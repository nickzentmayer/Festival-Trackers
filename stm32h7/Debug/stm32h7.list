
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a1ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0801a490  0801a490  0001b490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aa38  0801aa38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aa40  0801aa40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801aa44  0801aa44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  0801aa48  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000773b4  240002d0  0801ad18  0001c2d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24077684  0801ad18  0001c684  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038a69  00000000  00000000  0001c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c7b  00000000  00000000  00054d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002930  00000000  00000000  0005b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fdf  00000000  00000000  0005e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000aa37  00000000  00000000  000602f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000390f2  00000000  00000000  0006ad2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d0cd  00000000  00000000  000a3e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00220eed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c5b8  00000000  00000000  00220f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0022d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a474 	.word	0x0801a474

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	0801a474 	.word	0x0801a474

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <Process_GGA_Sentence>:
#include "gps_tools.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

bool Process_GGA_Sentence(const char *gga_sentence, GPS_Data *gps_data) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	gps_data->valid = false;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

    // Check if it is a GGA sentence
    if (strncmp(gga_sentence, "$GPGGA", 6) != 0) {
 8000a78:	2206      	movs	r2, #6
 8000a7a:	4975      	ldr	r1, [pc, #468]	@ (8000c50 <Process_GGA_Sentence+0x1e8>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f017 f9b6 	bl	8017dee <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <Process_GGA_Sentence+0x24>
        return false; // Not a GGA sentence
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e0dc      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Find the end of the sentence (length of checksum is always 2 characters + '*')
	const char *end_of_sentence = gga_sentence + strlen(gga_sentence) - 3;
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fc27 	bl	80002e0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	3b03      	subs	r3, #3
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]

	// Extract and calculate checksum
	uint8_t calculated_checksum = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e009      	b.n	8000abe <Process_GGA_Sentence+0x56>
		calculated_checksum ^= *p;
 8000aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aba:	3301      	adds	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3f1      	bcc.n	8000aaa <Process_GGA_Sentence+0x42>
	}

    // Convert the provided checksum to an integer
    uint8_t provided_checksum = (uint8_t)strtol(end_of_sentence + 1, NULL, 16);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f016 fc3e 	bl	8017350 <strtol>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]

    // Validate the checksum
    if (calculated_checksum != provided_checksum) {
 8000ad8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d001      	beq.n	8000ae6 <Process_GGA_Sentence+0x7e>
        return false; // Checksum mismatch
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e0af      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Process the GGA fields
    char *token;
    char *nmea_copy = strdup(gga_sentence);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f017 f966 	bl	8017db8 <strdup>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
    token = strtok(nmea_copy, ",");
 8000af0:	4958      	ldr	r1, [pc, #352]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f017 f98e 	bl	8017e14 <strtok>
 8000af8:	6278      	str	r0, [r7, #36]	@ 0x24

    int field_number = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    float raw_latitude = 0.0;
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    float raw_longitude = 0.0;
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
    char lat_dir = 'N';
 8000b0a:	234e      	movs	r3, #78	@ 0x4e
 8000b0c:	75fb      	strb	r3, [r7, #23]
    char lon_dir = 'E';
 8000b0e:	2345      	movs	r3, #69	@ 0x45
 8000b10:	75bb      	strb	r3, [r7, #22]

    while (token != NULL) {
 8000b12:	e076      	b.n	8000c02 <Process_GGA_Sentence+0x19a>
        switch (field_number) {
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d86a      	bhi.n	8000bf2 <Process_GGA_Sentence+0x18a>
 8000b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <Process_GGA_Sentence+0xbc>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b41 	.word	0x08000b41
 8000b28:	08000b67 	.word	0x08000b67
 8000b2c:	08000b83 	.word	0x08000b83
 8000b30:	08000b93 	.word	0x08000b93
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bd3 	.word	0x08000bd3
            case 1: // Timestamp
                if (*token) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d04b      	beq.n	8000be0 <Process_GGA_Sentence+0x178>
                    sscanf(token, "%2d%2d%f", &gps_data->hours, &gps_data->minutes, &gps_data->seconds);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f103 020c 	add.w	r2, r3, #12
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f103 0110 	add.w	r1, r3, #16
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3314      	adds	r3, #20
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	493e      	ldr	r1, [pc, #248]	@ (8000c58 <Process_GGA_Sentence+0x1f0>)
 8000b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b60:	f017 f81e 	bl	8017ba0 <siscanf>
                }
                break;
 8000b64:	e03c      	b.n	8000be0 <Process_GGA_Sentence+0x178>
            case 2: // Latitude
                if (*token) {
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <Process_GGA_Sentence+0x17c>
                    raw_latitude = atof(token);
 8000b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b70:	f015 fcea 	bl	8016548 <atof>
 8000b74:	eeb0 7b40 	vmov.f64	d7, d0
 8000b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7c:	edc7 7a07 	vstr	s15, [r7, #28]
                }
                break;
 8000b80:	e030      	b.n	8000be4 <Process_GGA_Sentence+0x17c>
            case 3: // Latitude direction (N/S)
                if (*token) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02e      	beq.n	8000be8 <Process_GGA_Sentence+0x180>
                    lat_dir = *token;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8000b90:	e02a      	b.n	8000be8 <Process_GGA_Sentence+0x180>
            case 4: // Longitude
                if (*token) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <Process_GGA_Sentence+0x184>
                    raw_longitude = atof(token);
 8000b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b9c:	f015 fcd4 	bl	8016548 <atof>
 8000ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	edc7 7a06 	vstr	s15, [r7, #24]
                }
                break;
 8000bac:	e01e      	b.n	8000bec <Process_GGA_Sentence+0x184>
            case 5: // Longitude direction (E/W)
                if (*token) {
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01c      	beq.n	8000bf0 <Process_GGA_Sentence+0x188>
                    lon_dir = *token;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75bb      	strb	r3, [r7, #22]
                }
                break;
 8000bbc:	e018      	b.n	8000bf0 <Process_GGA_Sentence+0x188>
            case 6: // Fix status
                gps_data->valid = (*token != '0');
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b30      	cmp	r3, #48	@ 0x30
 8000bc4:	bf14      	ite	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	2300      	moveq	r3, #0
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
                break;
 8000bd0:	e00f      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
            case 7: // Number of satellites
				gps_data->num_satellites = atoi(token);
 8000bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000bd4:	f015 fcbb 	bl	801654e <atoi>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	619a      	str	r2, [r3, #24]
				break;
 8000bde:	e008      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be0:	bf00      	nop
 8000be2:	e006      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be4:	bf00      	nop
 8000be6:	e004      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be8:	bf00      	nop
 8000bea:	e002      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bf0:	bf00      	nop
        }
        token = strtok(NULL, ",");
 8000bf2:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f017 f90d 	bl	8017e14 <strtok>
 8000bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        field_number++;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
    while (token != NULL) {
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d185      	bne.n	8000b14 <Process_GGA_Sentence+0xac>
    }

    free(nmea_copy);
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f015 fcad 	bl	8016568 <free>

    // Convert to decimal format if the sentence is valid
    if (gps_data->valid) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <Process_GGA_Sentence+0x1da>
        gps_data->latitude = convert_to_decimal(raw_latitude, lat_dir);
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c1e:	f000 f81f 	bl	8000c60 <convert_to_decimal>
 8000c22:	eef0 7a40 	vmov.f32	s15, s0
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	edc3 7a01 	vstr	s15, [r3, #4]
        gps_data->longitude = convert_to_decimal(raw_longitude, lon_dir);
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c34:	f000 f814 	bl	8000c60 <convert_to_decimal>
 8000c38:	eef0 7a40 	vmov.f32	s15, s0
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return gps_data->valid;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0801a490 	.word	0x0801a490
 8000c54:	0801a498 	.word	0x0801a498
 8000c58:	0801a49c 	.word	0x0801a49c
 8000c5c:	00000000 	.word	0x00000000

08000c60 <convert_to_decimal>:

float convert_to_decimal(float nmea_coordinate, char direction) {
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	70fb      	strb	r3, [r7, #3]
    int degrees = (int)(nmea_coordinate / 100);
 8000c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c72:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000d00 <convert_to_decimal+0xa0>
 8000c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
 8000c82:	613b      	str	r3, [r7, #16]
    float minutes = nmea_coordinate - (degrees * 100);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2264      	movs	r2, #100	@ 0x64
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9c:	edc7 7a03 	vstr	s15, [r7, #12]
    float decimal = degrees + minutes / 60.0;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb2:	ed9f 4b11 	vldr	d4, [pc, #68]	@ 8000cf8 <convert_to_decimal+0x98>
 8000cb6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (direction == 'S' || direction == 'W') {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b53      	cmp	r3, #83	@ 0x53
 8000cca:	d002      	beq.n	8000cd2 <convert_to_decimal+0x72>
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b57      	cmp	r3, #87	@ 0x57
 8000cd0:	d105      	bne.n	8000cde <convert_to_decimal+0x7e>
        decimal *= -1;
 8000cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd6:	eef1 7a67 	vneg.f32	s15, s15
 8000cda:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return decimal;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	ee07 3a90 	vmov	s15, r3
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	404e0000 	.word	0x404e0000
 8000d00:	42c80000 	.word	0x42c80000

08000d04 <LSM303AGR_Init>:
 *      Author: Tyler
 */

#include "lsm303agr.h"

HAL_StatusTypeDef LSM303AGR_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // set accelerometer to 50Hz, normal power mode, all axes enabled
    data = 0x57; // 01010111
 8000d0c:	2357      	movs	r3, #87	@ 0x57
 8000d0e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, REG_CTRL_REG1_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2220      	movs	r2, #32
 8000d22:	2132      	movs	r1, #50	@ 0x32
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f004 fb69 	bl	80053fc <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <LSM303AGR_Init+0x30>
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e014      	b.n	8000d5e <LSM303AGR_Init+0x5a>
    }

    // set magnetometer to 50Hz, normal power mode, continuous read
    data = 0x88; // 10001000
 8000d34:	2388      	movs	r3, #136	@ 0x88
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, CFG_REG_A_M, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2260      	movs	r2, #96	@ 0x60
 8000d4a:	2132      	movs	r1, #50	@ 0x32
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f004 fb55 	bl	80053fc <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <LSM303AGR_Init+0x58>
            return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LSM303AGR_Init+0x5a>
        }
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Display_Init>:
#define COLOR_BLUE           0x001F  // 16-bit RGB color: Blue

// Assuming LTDC and frame buffer are already initialized
LTDC_HandleTypeDef hltdc;

void Display_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    // Fill the screen with a solid color
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e018      	b.n	8000da6 <Display_Init+0x3e>
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	e00e      	b.n	8000d98 <Display_Init+0x30>
            framebuffer[y * DISPLAY_WIDTH + x] = COLOR_BLUE;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	461a      	mov	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <Display_Init+0x58>)
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000d9e:	d3ec      	bcc.n	8000d7a <Display_Init+0x12>
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dac:	d3e2      	bcc.n	8000d74 <Display_Init+0xc>
        }
    }

    // Trigger LTDC to refresh the display
    HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);  // Assuming hltdc is the LTDC handle
 8000dae:	2102      	movs	r1, #2
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <Display_Init+0x5c>)
 8000db2:	f005 ff49 	bl	8006c48 <HAL_LTDC_Reload>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000690 	.word	0x24000690
 8000dc4:	24000430 	.word	0x24000430

08000dc8 <_write>:

int _write(int file, char *ptr, int len) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);  // Transmit data via USB CDC
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f014 ff24 	bl	8015c28 <CDC_Transmit_FS>
    return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000df2:	f000 fd0f 	bl	8001814 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f001 fc83 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f869 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 fb4d 	bl	800149c <MX_GPIO_Init>
  MX_BDMA_Init();
 8000e02:	f000 fb23 	bl	800144c <MX_BDMA_Init>
  MX_LTDC_Init();
 8000e06:	f000 f925 	bl	8001054 <MX_LTDC_Init>
  MX_SPI1_Init();
 8000e0a:	f000 f9d1 	bl	80011b0 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000e0e:	f000 f8e1 	bl	8000fd4 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000e12:	f000 f9a1 	bl	8001158 <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8000e16:	f000 fa21 	bl	800125c <MX_TIM1_Init>
  MX_UART8_Init();
 8000e1a:	f000 facb 	bl	80013b4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();          // Initialize USB CDC
 8000e1e:	f014 fe43 	bl	8015aa8 <MX_USB_DEVICE_Init>

  // start receiving data on UART8 via interrupt, one byte at a time
  HAL_UART_Receive_IT(&huart8, (uint8_t*)rx_buffer, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	491d      	ldr	r1, [pc, #116]	@ (8000e9c <main+0xb0>)
 8000e26:	481e      	ldr	r0, [pc, #120]	@ (8000ea0 <main+0xb4>)
 8000e28:	f00c f9fe 	bl	800d228 <HAL_UART_Receive_IT>

  LSM303AGR_Init(&hi2c4);
 8000e2c:	481d      	ldr	r0, [pc, #116]	@ (8000ea4 <main+0xb8>)
 8000e2e:	f7ff ff69 	bl	8000d04 <LSM303AGR_Init>
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1);
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <main+0xbc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	481c      	ldr	r0, [pc, #112]	@ (8000eac <main+0xc0>)
 8000e3a:	f005 fecf 	bl	8006bdc <HAL_LTDC_SetAddress>
//  Display_Init();
  HAL_StatusTypeDef st7701_init_status = ST7701_Init(&hspi1);
 8000e3e:	481c      	ldr	r0, [pc, #112]	@ (8000eb0 <main+0xc4>)
 8000e40:	f000 fd40 	bl	80018c4 <ST7701_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  if (st7701_init_status != HAL_OK) {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <main+0x6a>
	  printf("st7701 initialization failed!\n");
 8000e4e:	4819      	ldr	r0, [pc, #100]	@ (8000eb4 <main+0xc8>)
 8000e50:	f016 fe7e 	bl	8017b50 <puts>
 8000e54:	e004      	b.n	8000e60 <main+0x74>
  } else {
	  printf("st7701 initialized! setting framebuffer to blue\n");
 8000e56:	4818      	ldr	r0, [pc, #96]	@ (8000eb8 <main+0xcc>)
 8000e58:	f016 fe7a 	bl	8017b50 <puts>
	  Display_Init();
 8000e5c:	f7ff ff84 	bl	8000d68 <Display_Init>
  }
  fflush(stdout);
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <main+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f016 fd34 	bl	80178d4 <fflush>

//  HAL_GPIO_WritePin(GPIOB, GPS_ON_Pin, GPIO_PIN_SET);

//   Start PWM output on TIM1 Channel 1
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <main+0xd4>)
 8000e70:	f00a ffd6 	bl	800be20 <HAL_TIM_PWM_Start>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <main+0x92>
  {
	  // Initialization Error
	  Error_Handler();
 8000e7a:	f000 fd06 	bl	800188a <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e7e:	f012 f8b7 	bl	8012ff0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e82:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <main+0xd8>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4810      	ldr	r0, [pc, #64]	@ (8000ec8 <main+0xdc>)
 8000e88:	f012 f8fc 	bl	8013084 <osThreadNew>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <main+0xe0>)
 8000e90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e92:	f012 f8d1 	bl	8013038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e96:	bf00      	nop
 8000e98:	e7fd      	b.n	8000e96 <main+0xaa>
 8000e9a:	bf00      	nop
 8000e9c:	24070e90 	.word	0x24070e90
 8000ea0:	240005f8 	.word	0x240005f8
 8000ea4:	240002ec 	.word	0x240002ec
 8000ea8:	24000690 	.word	0x24000690
 8000eac:	24000430 	.word	0x24000430
 8000eb0:	24000524 	.word	0x24000524
 8000eb4:	0801a4b4 	.word	0x0801a4b4
 8000eb8:	0801a4d4 	.word	0x0801a4d4
 8000ebc:	24000280 	.word	0x24000280
 8000ec0:	240005ac 	.word	0x240005ac
 8000ec4:	0801a598 	.word	0x0801a598
 8000ec8:	080017ad 	.word	0x080017ad
 8000ecc:	2400068c 	.word	0x2400068c

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09c      	sub	sp, #112	@ 0x70
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	224c      	movs	r2, #76	@ 0x4c
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f016 ff62 	bl	8017da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f016 ff5c 	bl	8017da8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f007 fb11 	bl	8008518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <SystemClock_Config+0xfc>)
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <SystemClock_Config+0xfc>)
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <SystemClock_Config+0xfc>)
 8000f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <SystemClock_Config+0x100>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f18:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd0 <SystemClock_Config+0x100>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <SystemClock_Config+0x100>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f2c:	bf00      	nop
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <SystemClock_Config+0x100>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f3a:	d1f8      	bne.n	8000f2e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000f3c:	2323      	movs	r3, #35	@ 0x23
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4a:	2340      	movs	r3, #64	@ 0x40
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f66:	2303      	movs	r3, #3
 8000f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f72:	2302      	movs	r3, #2
 8000f74:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fbce 	bl	8008720 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f8a:	f000 fc7e 	bl	800188a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	233f      	movs	r3, #63	@ 0x3f
 8000f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000faa:	2340      	movs	r3, #64	@ 0x40
 8000fac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 f80e 	bl	8008fd4 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fbe:	f000 fc64 	bl	800188a <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3770      	adds	r7, #112	@ 0x70
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	58000400 	.word	0x58000400
 8000fd0:	58024800 	.word	0x58024800

08000fd4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <MX_I2C4_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <MX_I2C4_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C4_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001010:	f004 f958 	bl	80052c4 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800101a:	f000 fc36 	bl	800188a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001022:	f005 fc35 	bl	8006890 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 fc2d 	bl	800188a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001034:	f005 fc77 	bl	8006926 <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fc24 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240002ec 	.word	0x240002ec
 800104c:	58001c00 	.word	0x58001c00
 8001050:	00707cbb 	.word	0x00707cbb

08001054 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	@ 0x38
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2234      	movs	r2, #52	@ 0x34
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f016 fea1 	bl	8017da8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001066:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001068:	4a3a      	ldr	r2, [pc, #232]	@ (8001154 <MX_LTDC_Init+0x100>)
 800106a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800106c:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <MX_LTDC_Init+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001072:	4b37      	ldr	r3, [pc, #220]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001078:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <MX_LTDC_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800107e:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 24;
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001086:	2218      	movs	r2, #24
 8001088:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 800108a:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <MX_LTDC_Init+0xfc>)
 800108c:	2207      	movs	r2, #7
 800108e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 54;
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001092:	2236      	movs	r2, #54	@ 0x36
 8001094:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 27;
 8001096:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_LTDC_Init+0xfc>)
 8001098:	221b      	movs	r2, #27
 800109a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 534;
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <MX_LTDC_Init+0xfc>)
 800109e:	f240 2216 	movw	r2, #534	@ 0x216
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 507;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010a6:	f240 12fb 	movw	r2, #507	@ 0x1fb
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 538;
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010ae:	f240 221a 	movw	r2, #538	@ 0x21a
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 522;
 80010b4:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010b6:	f240 220a 	movw	r2, #522	@ 0x20a
 80010ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010d4:	481e      	ldr	r0, [pc, #120]	@ (8001150 <MX_LTDC_Init+0xfc>)
 80010d6:	f005 fc73 	bl	80069c0 <HAL_LTDC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010e0:	f000 fbd3 	bl	800188a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010e8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80010ec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80010f2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80010f6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010fc:	23ff      	movs	r3, #255	@ 0xff
 80010fe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 150;
 8001100:	2396      	movs	r3, #150	@ 0x96
 8001102:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800110a:	2305      	movs	r3, #5
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x08100000;
 800110e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001114:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 800111a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001120:	23ff      	movs	r3, #255	@ 0xff
 8001122:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_LTDC_Init+0xfc>)
 800113a:	f005 fd11 	bl	8006b60 <HAL_LTDC_ConfigLayer>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001144:	f000 fba1 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	@ 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000430 	.word	0x24000430
 8001154:	50001000 	.word	0x50001000

08001158 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_QUADSPI_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001164:	22ff      	movs	r2, #255	@ 0xff
 8001166:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 800116a:	2201      	movs	r2, #1
 800116c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001176:	2201      	movs	r2, #1
 8001178:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_QUADSPI_Init+0x50>)
 8001194:	f007 fa0a 	bl	80085ac <HAL_QSPI_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800119e:	f000 fb74 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240004d8 	.word	0x240004d8
 80011ac:	52005000 	.word	0x52005000

080011b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011b6:	4a28      	ldr	r2, [pc, #160]	@ (8001258 <MX_SPI1_Init+0xa8>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_SPI1_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_SPI1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_SPI1_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_SPI1_Init+0xa4>)
 8001240:	f00a f8c2 	bl	800b3c8 <HAL_SPI_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800124a:	f000 fb1e 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000524 	.word	0x24000524
 8001258:	40013000 	.word	0x40013000

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b09a      	sub	sp, #104	@ 0x68
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	222c      	movs	r2, #44	@ 0x2c
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f016 fd86 	bl	8017da8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129c:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <MX_TIM1_Init+0x150>)
 800129e:	4a44      	ldr	r2, [pc, #272]	@ (80013b0 <MX_TIM1_Init+0x154>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80012a2:	4b42      	ldr	r3, [pc, #264]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012a4:	223f      	movs	r2, #63	@ 0x3f
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c8:	4838      	ldr	r0, [pc, #224]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012ca:	f00a fc78 	bl	800bbbe <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f000 fad9 	bl	800188a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012e2:	4619      	mov	r1, r3
 80012e4:	4831      	ldr	r0, [pc, #196]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012e6:	f00b f8c5 	bl	800c474 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012f0:	f000 facb 	bl	800188a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f4:	482d      	ldr	r0, [pc, #180]	@ (80013ac <MX_TIM1_Init+0x150>)
 80012f6:	f00a fd31 	bl	800bd5c <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001300:	f000 fac3 	bl	800188a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001310:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001314:	4619      	mov	r1, r3
 8001316:	4825      	ldr	r0, [pc, #148]	@ (80013ac <MX_TIM1_Init+0x150>)
 8001318:	f00b fe0c 	bl	800cf34 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001322:	f000 fab2 	bl	800188a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	@ 0x60
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_TIM1_Init+0x150>)
 800134c:	f00a ff7e 	bl	800c24c <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001356:	f000 fa98 	bl	800188a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001372:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800137c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM1_Init+0x150>)
 8001390:	f00b fe5e 	bl	800d050 <HAL_TIMEx_ConfigBreakDeadTime>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800139a:	f000 fa76 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139e:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM1_Init+0x150>)
 80013a0:	f000 feda 	bl	8002158 <HAL_TIM_MspPostInit>

}
 80013a4:	bf00      	nop
 80013a6:	3768      	adds	r7, #104	@ 0x68
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	240005ac 	.word	0x240005ac
 80013b0:	40010000 	.word	0x40010000

080013b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_UART8_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <MX_UART8_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_UART8_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_UART8_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_UART8_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <MX_UART8_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_UART8_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <MX_UART8_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_UART8_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_UART8_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_UART8_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_UART8_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <MX_UART8_Init+0x90>)
 80013fe:	f00b fec3 	bl	800d188 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fa3f 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_UART8_Init+0x90>)
 8001410:	f00e f98f 	bl	800f732 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fa36 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MX_UART8_Init+0x90>)
 8001422:	f00e f9c4 	bl	800f7ae <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fa2d 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_UART8_Init+0x90>)
 8001432:	f00e f945 	bl	800f6c0 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fa25 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	240005f8 	.word	0x240005f8
 8001448:	40007c00 	.word	0x40007c00

0800144c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_BDMA_Init+0x4c>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_BDMA_Init+0x4c>)
 800145a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_BDMA_Init+0x4c>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2081      	movs	r0, #129	@ 0x81
 8001476:	f001 fa87 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800147a:	2081      	movs	r0, #129	@ 0x81
 800147c:	f001 fa9e 	bl	80029bc <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2105      	movs	r1, #5
 8001484:	2082      	movs	r0, #130	@ 0x82
 8001486:	f001 fa7f 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800148a:	2082      	movs	r0, #130	@ 0x82
 800148c:	f001 fa96 	bl	80029bc <HAL_NVIC_EnableIRQ>

}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58024400 	.word	0x58024400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	@ 0x30
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4b8b      	ldr	r3, [pc, #556]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	4a89      	ldr	r2, [pc, #548]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c2:	4b87      	ldr	r3, [pc, #540]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d0:	4b83      	ldr	r3, [pc, #524]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a82      	ldr	r2, [pc, #520]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	4a7a      	ldr	r2, [pc, #488]	@ (80016e0 <MX_GPIO_Init+0x244>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fe:	4b78      	ldr	r3, [pc, #480]	@ (80016e0 <MX_GPIO_Init+0x244>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b74      	ldr	r3, [pc, #464]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a73      	ldr	r2, [pc, #460]	@ (80016e0 <MX_GPIO_Init+0x244>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	4a6b      	ldr	r2, [pc, #428]	@ (80016e0 <MX_GPIO_Init+0x244>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153a:	4b69      	ldr	r3, [pc, #420]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001548:	4b65      	ldr	r3, [pc, #404]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	4a64      	ldr	r2, [pc, #400]	@ (80016e0 <MX_GPIO_Init+0x244>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001558:	4b61      	ldr	r3, [pc, #388]	@ (80016e0 <MX_GPIO_Init+0x244>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_PA2_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f248 0104 	movw	r1, #32772	@ 0x8004
 800156c:	485d      	ldr	r0, [pc, #372]	@ (80016e4 <MX_GPIO_Init+0x248>)
 800156e:	f003 fe8f 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_PC4_GPIO_Port, TP_PC4_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2110      	movs	r1, #16
 8001576:	485c      	ldr	r0, [pc, #368]	@ (80016e8 <MX_GPIO_Init+0x24c>)
 8001578:	f003 fe8a 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001582:	485a      	ldr	r0, [pc, #360]	@ (80016ec <MX_GPIO_Init+0x250>)
 8001584:	f003 fe84 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|GPS_ON_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800158e:	4858      	ldr	r0, [pc, #352]	@ (80016f0 <MX_GPIO_Init+0x254>)
 8001590:	f003 fe7e 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159a:	4852      	ldr	r0, [pc, #328]	@ (80016e4 <MX_GPIO_Init+0x248>)
 800159c:	f003 fe78 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TP_PA2_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = TP_PA2_Pin|LORA_NSS_Pin;
 80015a0:	f248 0304 	movw	r3, #32772	@ 0x8004
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	484a      	ldr	r0, [pc, #296]	@ (80016e4 <MX_GPIO_Init+0x248>)
 80015ba:	f003 fcb9 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_PC4_Pin */
  GPIO_InitStruct.Pin = TP_PC4_Pin;
 80015be:	2310      	movs	r3, #16
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TP_PC4_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4844      	ldr	r0, [pc, #272]	@ (80016e8 <MX_GPIO_Init+0x24c>)
 80015d6:	f003 fcab 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80015da:	2320      	movs	r3, #32
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	483e      	ldr	r0, [pc, #248]	@ (80016e8 <MX_GPIO_Init+0x24c>)
 80015ee:	f003 fc9f 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4838      	ldr	r0, [pc, #224]	@ (80016ec <MX_GPIO_Init+0x250>)
 800160c:	f003 fc90 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin GPS_ON_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|GPS_ON_Pin;
 8001610:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	4831      	ldr	r0, [pc, #196]	@ (80016f0 <MX_GPIO_Init+0x254>)
 800162a:	f003 fc81 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_BUSY_Pin;
 800162e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	482b      	ldr	r0, [pc, #172]	@ (80016f0 <MX_GPIO_Init+0x254>)
 8001644:	f003 fc74 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MAG_Pin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 8001648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800164e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4824      	ldr	r0, [pc, #144]	@ (80016f0 <MX_GPIO_Init+0x254>)
 8001660:	f003 fc66 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : XL_INT0_Pin XL_INT1_Pin */
  GPIO_InitStruct.Pin = XL_INT0_Pin|XL_INT1_Pin;
 8001664:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	481e      	ldr	r0, [pc, #120]	@ (80016f4 <MX_GPIO_Init+0x258>)
 800167c:	f003 fc58 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168a:	2301      	movs	r3, #1
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4812      	ldr	r0, [pc, #72]	@ (80016e4 <MX_GPIO_Init+0x248>)
 800169a:	f003 fc49 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT_STAT_Pin FG_NALERT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin|FG_NALERT_Pin;
 800169e:	2330      	movs	r3, #48	@ 0x30
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <MX_GPIO_Init+0x258>)
 80016b2:	f003 fc3d 	bl	8004f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;    // Alternate Function Push-Pull
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;        // No Pull-up or Pull-down
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Adjust speed as needed
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1; // TIM1_CH1 is mapped to AF1
 80016c8:	2301      	movs	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_GPIO_Init+0x250>)
 80016d4:	f003 fc2c 	bl	8004f30 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3730      	adds	r7, #48	@ 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58020000 	.word	0x58020000
 80016e8:	58020800 	.word	0x58020800
 80016ec:	58021000 	.word	0x58021000
 80016f0:	58020400 	.word	0x58020400
 80016f4:	58020c00 	.word	0x58020c00

080016f8 <Blink_PC4>:

/* USER CODE BEGIN 4 */

void Blink_PC4(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, TP_PC4_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2110      	movs	r1, #16
 8001700:	4807      	ldr	r0, [pc, #28]	@ (8001720 <Blink_PC4+0x28>)
 8001702:	f003 fdc5 	bl	8005290 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001706:	2064      	movs	r0, #100	@ 0x64
 8001708:	f001 f856 	bl	80027b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, TP_PC4_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2110      	movs	r1, #16
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <Blink_PC4+0x28>)
 8001712:	f003 fdbd 	bl	8005290 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001716:	2064      	movs	r0, #100	@ 0x64
 8001718:	f001 f84e 	bl	80027b8 <HAL_Delay>

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	58020800 	.word	0x58020800

08001724 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] == '$') {
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_UART_RxCpltCallback+0x78>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b24      	cmp	r3, #36	@ 0x24
 8001732:	d103      	bne.n	800173c <HAL_UART_RxCpltCallback+0x18>
		// Start of a new GGA sentence, reset the index
		gga_index = 0;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e025      	b.n	8001788 <HAL_UART_RxCpltCallback+0x64>
	} else if (rx_buffer[0] == '\r') {
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_UART_RxCpltCallback+0x78>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b0d      	cmp	r3, #13
 8001742:	d10e      	bne.n	8001762 <HAL_UART_RxCpltCallback+0x3e>
//		if (gga_index < GGA_BUFFER_SIZE) {
//			gga_buffer[gga_index] = '\0'; // Null-terminate for string processing
//		}

		// Process the complete GGA sentence
		bool success = Process_GGA_Sentence(gga_buffer, &gps_data);
 8001744:	4917      	ldr	r1, [pc, #92]	@ (80017a4 <HAL_UART_RxCpltCallback+0x80>)
 8001746:	4818      	ldr	r0, [pc, #96]	@ (80017a8 <HAL_UART_RxCpltCallback+0x84>)
 8001748:	f7ff f98e 	bl	8000a68 <Process_GGA_Sentence>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
		if (success) Blink_PC4();
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_UART_RxCpltCallback+0x36>
 8001756:	f7ff ffcf 	bl	80016f8 <Blink_PC4>

		// Reset the index to start a new sentence
		gga_index = 0;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e012      	b.n	8001788 <HAL_UART_RxCpltCallback+0x64>
	} else if (gga_index < GGA_BUFFER_SIZE) {
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b63      	cmp	r3, #99	@ 0x63
 8001768:	d80b      	bhi.n	8001782 <HAL_UART_RxCpltCallback+0x5e>
		// accumulate the received character if we haven't reached the buffer size
		gga_buffer[gga_index++] = rx_buffer[0];
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	b2d1      	uxtb	r1, r2
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001774:	7011      	strb	r1, [r2, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_UART_RxCpltCallback+0x78>)
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_UART_RxCpltCallback+0x84>)
 800177e:	5499      	strb	r1, [r3, r2]
 8001780:	e002      	b.n	8001788 <HAL_UART_RxCpltCallback+0x64>
	} else {
		// there's something wrong, reset the index to 0 to start the data buffer over
		gga_index = 0;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
	}

	// re-enable the interrupt to receive the next byte
	HAL_UART_Receive_IT(huart, rx_buffer, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	4904      	ldr	r1, [pc, #16]	@ (800179c <HAL_UART_RxCpltCallback+0x78>)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f00b fd4b 	bl	800d228 <HAL_UART_Receive_IT>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24070e90 	.word	0x24070e90
 80017a0:	24070ef8 	.word	0x24070ef8
 80017a4:	24070efc 	.word	0x24070efc
 80017a8:	24070e94 	.word	0x24070e94

080017ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017b4:	f014 f978 	bl	8015aa8 <MX_USB_DEVICE_Init>
//		} else {
//			Blink_PC4();
//			Blink_PC4();
//		}
//		HAL_Delay(600);
		printf("set brightness max");
 80017b8:	4812      	ldr	r0, [pc, #72]	@ (8001804 <StartDefaultTask+0x58>)
 80017ba:	f016 f961 	bl	8017a80 <iprintf>
		fflush(stdout);
 80017be:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <StartDefaultTask+0x5c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f016 f885 	bl	80178d4 <fflush>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 999);
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <StartDefaultTask+0x60>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1000);
 80017d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d8:	f000 ffee 	bl	80027b8 <HAL_Delay>
		printf("set brightness low");
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <StartDefaultTask+0x64>)
 80017de:	f016 f94f 	bl	8017a80 <iprintf>
		fflush(stdout);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <StartDefaultTask+0x5c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f016 f873 	bl	80178d4 <fflush>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <StartDefaultTask+0x60>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2264      	movs	r2, #100	@ 0x64
 80017f4:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1000);
 80017f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017fa:	f000 ffdd 	bl	80027b8 <HAL_Delay>
		printf("set brightness max");
 80017fe:	bf00      	nop
 8001800:	e7da      	b.n	80017b8 <StartDefaultTask+0xc>
 8001802:	bf00      	nop
 8001804:	0801a504 	.word	0x0801a504
 8001808:	24000280 	.word	0x24000280
 800180c:	240005ac 	.word	0x240005ac
 8001810:	0801a518 	.word	0x0801a518

08001814 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800181a:	463b      	mov	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001826:	f001 f8d7 	bl	80029d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800182e:	2300      	movs	r3, #0
 8001830:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001836:	231f      	movs	r3, #31
 8001838:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800183a:	2387      	movs	r3, #135	@ 0x87
 800183c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800183e:	2300      	movs	r3, #0
 8001840:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001842:	2300      	movs	r3, #0
 8001844:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001856:	463b      	mov	r3, r7
 8001858:	4618      	mov	r0, r3
 800185a:	f001 f8f5 	bl	8002a48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800185e:	2004      	movs	r0, #4
 8001860:	f001 f8d2 	bl	8002a08 <HAL_MPU_Enable>

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d101      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187e:	f000 ff7b 	bl	8002778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188e:	b672      	cpsid	i
}
 8001890:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <Error_Handler+0x8>

08001896 <ST7701_SendCommand>:
#define ST7701_DATA 0x01 // Data mode

#define LCD_CS_LOW()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET) // Select LCD
#define LCD_CS_HIGH() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET)   // Deselect LCD

HAL_StatusTypeDef ST7701_SendCommand(SPI_HandleTypeDef *hspi, uint8_t cmd) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
    // Send command mode (command/parameter bit = 0)
    uint8_t command[2] = {ST7701_CMD, cmd};
 80018a2:	2300      	movs	r3, #0
 80018a4:	733b      	strb	r3, [r7, #12]
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	737b      	strb	r3, [r7, #13]
    return HAL_SPI_Transmit(hspi, command, 2, HAL_MAX_DELAY);
 80018aa:	f107 010c 	add.w	r1, r7, #12
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2202      	movs	r2, #2
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f009 feab 	bl	800b610 <HAL_SPI_Transmit>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ST7701_Init>:
    // Send data mode (command/parameter bit = 1)
    uint8_t dataArray[2] = {ST7701_DATA, data};
    return HAL_SPI_Transmit(hspi, dataArray, 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef ST7701_Init(SPI_HandleTypeDef *hspi) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Reset the display using PE10
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET); // Assert reset (PE10 low)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018d2:	4823      	ldr	r0, [pc, #140]	@ (8001960 <ST7701_Init+0x9c>)
 80018d4:	f003 fcdc 	bl	8005290 <HAL_GPIO_WritePin>
    HAL_Delay(20); // Wait for 20 ms
 80018d8:	2014      	movs	r0, #20
 80018da:	f000 ff6d 	bl	80027b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET); // Release reset (PE10 high)
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e4:	481e      	ldr	r0, [pc, #120]	@ (8001960 <ST7701_Init+0x9c>)
 80018e6:	f003 fcd3 	bl	8005290 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for 120 ms after reset
 80018ea:	2078      	movs	r0, #120	@ 0x78
 80018ec:	f000 ff64 	bl	80027b8 <HAL_Delay>

    // Select the LCD
    LCD_CS_LOW();
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018f6:	481b      	ldr	r0, [pc, #108]	@ (8001964 <ST7701_Init+0xa0>)
 80018f8:	f003 fcca 	bl	8005290 <HAL_GPIO_WritePin>

    // Send initialization commands
    status = ST7701_SendCommand(hspi, 0x01); // Software reset
 80018fc:	2101      	movs	r1, #1
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffc9 	bl	8001896 <ST7701_SendCommand>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <ST7701_Init+0x4e>
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	e022      	b.n	8001958 <ST7701_Init+0x94>
    HAL_Delay(150); // Wait for reset to complete
 8001912:	2096      	movs	r0, #150	@ 0x96
 8001914:	f000 ff50 	bl	80027b8 <HAL_Delay>

    status = ST7701_SendCommand(hspi, 0x11); // Sleep Out
 8001918:	2111      	movs	r1, #17
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffbb 	bl	8001896 <ST7701_SendCommand>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <ST7701_Init+0x6a>
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	e014      	b.n	8001958 <ST7701_Init+0x94>
    HAL_Delay(120); // Wait for sleep out
 800192e:	2078      	movs	r0, #120	@ 0x78
 8001930:	f000 ff42 	bl	80027b8 <HAL_Delay>

    status = ST7701_SendCommand(hspi, 0x29); // Display ON
 8001934:	2129      	movs	r1, #41	@ 0x29
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffad 	bl	8001896 <ST7701_SendCommand>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <ST7701_Init+0x86>
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	e006      	b.n	8001958 <ST7701_Init+0x94>

    // Deselect the LCD
    LCD_CS_HIGH();
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <ST7701_Init+0xa0>)
 8001952:	f003 fc9d 	bl	8005290 <HAL_GPIO_WritePin>

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58021000 	.word	0x58021000
 8001964:	58020000 	.word	0x58020000

08001968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_MspInit+0x38>)
 8001970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_MspInit+0x38>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_MspInit+0x38>)
 8001980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	210f      	movs	r1, #15
 8001990:	f06f 0001 	mvn.w	r0, #1
 8001994:	f000 fff8 	bl	8002988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58024400 	.word	0x58024400

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ba      	sub	sp, #232	@ 0xe8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	22c0      	movs	r2, #192	@ 0xc0
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f016 f9ef 	bl	8017da8 <memset>
  if(hi2c->Instance==I2C4)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_I2C_MspInit+0x190>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f040 80ab 	bne.w	8001b2c <HAL_I2C_MspInit+0x188>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019d6:	f04f 0210 	mov.w	r2, #16
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f007 febf 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80019f8:	f7ff ff47 	bl	800188a <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a02:	4a4d      	ldr	r2, [pc, #308]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	483e      	ldr	r0, [pc, #248]	@ (8001b3c <HAL_I2C_MspInit+0x198>)
 8001a42:	f003 fa75 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a46:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 8001a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a56:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_I2C_MspInit+0x194>)
 8001a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 8001a64:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a66:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <HAL_I2C_MspInit+0x1a0>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 8001a6a:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a6c:	220d      	movs	r2, #13
 8001a6e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a70:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a76:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a82:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001a9c:	4828      	ldr	r0, [pc, #160]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001a9e:	f001 f813 	bl	8002ac8 <HAL_DMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8001aa8:	f7ff feef 	bl	800188a <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ab2:	4a23      	ldr	r2, [pc, #140]	@ (8001b40 <HAL_I2C_MspInit+0x19c>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001aba:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <HAL_I2C_MspInit+0x1a8>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ac0:	220e      	movs	r2, #14
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ac6:	2240      	movs	r2, #64	@ 0x40
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001af0:	4815      	ldr	r0, [pc, #84]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001af2:	f000 ffe9 	bl	8002ac8 <HAL_DMA_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_MspInit+0x15c>
    {
      Error_Handler();
 8001afc:	f7ff fec5 	bl	800188a <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a11      	ldr	r2, [pc, #68]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001b04:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <HAL_I2C_MspInit+0x1a4>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2105      	movs	r1, #5
 8001b10:	205f      	movs	r0, #95	@ 0x5f
 8001b12:	f000 ff39 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001b16:	205f      	movs	r0, #95	@ 0x5f
 8001b18:	f000 ff50 	bl	80029bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2105      	movs	r1, #5
 8001b20:	2060      	movs	r0, #96	@ 0x60
 8001b22:	f000 ff31 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001b26:	2060      	movs	r0, #96	@ 0x60
 8001b28:	f000 ff48 	bl	80029bc <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	37e8      	adds	r7, #232	@ 0xe8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	58001c00 	.word	0x58001c00
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020c00 	.word	0x58020c00
 8001b40:	24000340 	.word	0x24000340
 8001b44:	58025408 	.word	0x58025408
 8001b48:	240003b8 	.word	0x240003b8
 8001b4c:	5802541c 	.word	0x5802541c

08001b50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0be      	sub	sp, #248	@ 0xf8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b68:	f107 0320 	add.w	r3, r7, #32
 8001b6c:	22c0      	movs	r2, #192	@ 0xc0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f016 f919 	bl	8017da8 <memset>
  if(hltdc->Instance==LTDC)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a8c      	ldr	r2, [pc, #560]	@ (8001dac <HAL_LTDC_MspInit+0x25c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 8111 	bne.w	8001da4 <HAL_LTDC_MspInit+0x254>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b82:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 17;
 8001b92:	2311      	movs	r3, #17
 8001b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 25;
 8001b9e:	2319      	movs	r3, #25
 8001ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ba2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fddb 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001bc0:	f7ff fe63 	bl	800188a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001bc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bca:	4a79      	ldr	r2, [pc, #484]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001bd4:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001bd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	4b73      	ldr	r3, [pc, #460]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	4a71      	ldr	r2, [pc, #452]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b6b      	ldr	r3, [pc, #428]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c06:	4a6a      	ldr	r2, [pc, #424]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c10:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b64      	ldr	r3, [pc, #400]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	4a62      	ldr	r2, [pc, #392]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2e:	4b60      	ldr	r3, [pc, #384]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c42:	4a5b      	ldr	r2, [pc, #364]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c4c:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c60:	4a53      	ldr	r2, [pc, #332]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6a:	4b51      	ldr	r3, [pc, #324]	@ (8001db0 <HAL_LTDC_MspInit+0x260>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_B3
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001c78:	23c1      	movs	r3, #193	@ 0xc1
 8001c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c90:	230e      	movs	r3, #14
 8001c92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4845      	ldr	r0, [pc, #276]	@ (8001db4 <HAL_LTDC_MspInit+0x264>)
 8001c9e:	f003 f947 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ca2:	2378      	movs	r3, #120	@ 0x78
 8001ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cba:	230e      	movs	r3, #14
 8001cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	483c      	ldr	r0, [pc, #240]	@ (8001db8 <HAL_LTDC_MspInit+0x268>)
 8001cc8:	f003 f932 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4832      	ldr	r0, [pc, #200]	@ (8001dbc <HAL_LTDC_MspInit+0x26c>)
 8001cf2:	f003 f91d 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001cf6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d10:	230e      	movs	r3, #14
 8001d12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d16:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4828      	ldr	r0, [pc, #160]	@ (8001dc0 <HAL_LTDC_MspInit+0x270>)
 8001d1e:	f003 f907 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001d22:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d3c:	230e      	movs	r3, #14
 8001d3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d46:	4619      	mov	r1, r3
 8001d48:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <HAL_LTDC_MspInit+0x26c>)
 8001d4a:	f003 f8f1 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001d68:	230d      	movs	r3, #13
 8001d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <HAL_LTDC_MspInit+0x268>)
 8001d76:	f003 f8db 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d92:	230e      	movs	r3, #14
 8001d94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <HAL_LTDC_MspInit+0x274>)
 8001da0:	f003 f8c6 	bl	8004f30 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001da4:	bf00      	nop
 8001da6:	37f8      	adds	r7, #248	@ 0xf8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	50001000 	.word	0x50001000
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58020800 	.word	0x58020800
 8001db8:	58020000 	.word	0x58020000
 8001dbc:	58020400 	.word	0x58020400
 8001dc0:	58021000 	.word	0x58021000
 8001dc4:	58020c00 	.word	0x58020c00

08001dc8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0be      	sub	sp, #248	@ 0xf8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	22c0      	movs	r2, #192	@ 0xc0
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f015 ffdd 	bl	8017da8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	@ (8001fdc <HAL_QSPI_MspInit+0x214>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f040 80ec 	bne.w	8001fd2 <HAL_QSPI_MspInit+0x20a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 fcae 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001e1a:	f7ff fd36 	bl	800188a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e1e:	4b70      	ldr	r3, [pc, #448]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e24:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3c:	4b68      	ldr	r3, [pc, #416]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a67      	ldr	r2, [pc, #412]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b64      	ldr	r3, [pc, #400]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b61      	ldr	r3, [pc, #388]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	4a58      	ldr	r2, [pc, #352]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e88:	4b55      	ldr	r3, [pc, #340]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	4b52      	ldr	r3, [pc, #328]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	4a50      	ldr	r2, [pc, #320]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	4a49      	ldr	r2, [pc, #292]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec4:	4b46      	ldr	r3, [pc, #280]	@ (8001fe0 <HAL_QSPI_MspInit+0x218>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001eea:	2309      	movs	r3, #9
 8001eec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	483b      	ldr	r0, [pc, #236]	@ (8001fe4 <HAL_QSPI_MspInit+0x21c>)
 8001ef8:	f003 f81a 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f14:	2309      	movs	r3, #9
 8001f16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4831      	ldr	r0, [pc, #196]	@ (8001fe8 <HAL_QSPI_MspInit+0x220>)
 8001f22:	f003 f805 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f26:	2304      	movs	r3, #4
 8001f28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4828      	ldr	r0, [pc, #160]	@ (8001fec <HAL_QSPI_MspInit+0x224>)
 8001f4c:	f002 fff0 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f6a:	2309      	movs	r3, #9
 8001f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f74:	4619      	mov	r1, r3
 8001f76:	481e      	ldr	r0, [pc, #120]	@ (8001ff0 <HAL_QSPI_MspInit+0x228>)
 8001f78:	f002 ffda 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f96:	2309      	movs	r3, #9
 8001f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4814      	ldr	r0, [pc, #80]	@ (8001ff4 <HAL_QSPI_MspInit+0x22c>)
 8001fa4:	f002 ffc4 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fa8:	2340      	movs	r3, #64	@ 0x40
 8001faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fc0:	230a      	movs	r3, #10
 8001fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	@ (8001fec <HAL_QSPI_MspInit+0x224>)
 8001fce:	f002 ffaf 	bl	8004f30 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001fd2:	bf00      	nop
 8001fd4:	37f8      	adds	r7, #248	@ 0xf8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	52005000 	.word	0x52005000
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	58021000 	.word	0x58021000
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	58020400 	.word	0x58020400
 8001ff0:	58020c00 	.word	0x58020c00
 8001ff4:	58020800 	.word	0x58020800

08001ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0bc      	sub	sp, #240	@ 0xf0
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	22c0      	movs	r2, #192	@ 0xc0
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f015 fec5 	bl	8017da8 <memset>
  if(hspi->Instance==SPI1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a38      	ldr	r2, [pc, #224]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d168      	bne.n	80020fa <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002034:	2300      	movs	r3, #0
 8002036:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	4618      	mov	r0, r3
 800203e:	f007 fb97 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002048:	f7ff fc1f 	bl	800188a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002058:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800205e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	4a25      	ldr	r2, [pc, #148]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208e:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002098:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020be:	2305      	movs	r3, #5
 80020c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020c8:	4619      	mov	r1, r3
 80020ca:	4810      	ldr	r0, [pc, #64]	@ (800210c <HAL_SPI_MspInit+0x114>)
 80020cc:	f002 ff30 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020d0:	2318      	movs	r3, #24
 80020d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e8:	2305      	movs	r3, #5
 80020ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020f2:	4619      	mov	r1, r3
 80020f4:	4806      	ldr	r0, [pc, #24]	@ (8002110 <HAL_SPI_MspInit+0x118>)
 80020f6:	f002 ff1b 	bl	8004f30 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020fa:	bf00      	nop
 80020fc:	37f0      	adds	r7, #240	@ 0xf0
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40013000 	.word	0x40013000
 8002108:	58024400 	.word	0x58024400
 800210c:	58020000 	.word	0x58020000
 8002110:	58020400 	.word	0x58020400

08002114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <HAL_TIM_Base_MspInit+0x3c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_TIM_Base_MspInit+0x40>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800212c:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x40>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_TIM_Base_MspInit+0x40>)
 8002138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40010000 	.word	0x40010000
 8002154:	58024400 	.word	0x58024400

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11f      	bne.n	80021ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_TIM_MspPostInit+0x70>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002180:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_TIM_MspPostInit+0x70>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_TIM_MspPostInit+0x70>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800219c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <HAL_TIM_MspPostInit+0x74>)
 80021b6:	f002 febb 	bl	8004f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58021000 	.word	0x58021000

080021d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0ba      	sub	sp, #232	@ 0xe8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	22c0      	movs	r2, #192	@ 0xc0
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f015 fdd9 	bl	8017da8 <memset>
  if(huart->Instance==UART8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_UART_MspInit+0xd4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d14d      	bne.n	800229c <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002200:	f04f 0202 	mov.w	r2, #2
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4618      	mov	r0, r3
 8002218:	f007 faaa 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002222:	f7ff fb32 	bl	800188a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 8002228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800222c:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 800222e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002232:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800223c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 800224c:	f043 0310 	orr.w	r3, r3, #16
 8002250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_UART_MspInit+0xd8>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002262:	2303      	movs	r3, #3
 8002264:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800227a:	2308      	movs	r3, #8
 800227c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002280:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002284:	4619      	mov	r1, r3
 8002286:	4809      	ldr	r0, [pc, #36]	@ (80022ac <HAL_UART_MspInit+0xdc>)
 8002288:	f002 fe52 	bl	8004f30 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2105      	movs	r1, #5
 8002290:	2053      	movs	r0, #83	@ 0x53
 8002292:	f000 fb79 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002296:	2053      	movs	r0, #83	@ 0x53
 8002298:	f000 fb90 	bl	80029bc <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 800229c:	bf00      	nop
 800229e:	37e8      	adds	r7, #232	@ 0xe8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40007c00 	.word	0x40007c00
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58021000 	.word	0x58021000

080022b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b090      	sub	sp, #64	@ 0x40
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d827      	bhi.n	800230e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80022be:	2200      	movs	r2, #0
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	201c      	movs	r0, #28
 80022c4:	f000 fb60 	bl	8002988 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022c8:	201c      	movs	r0, #28
 80022ca:	f000 fb77 	bl	80029bc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80022ce:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <HAL_InitTick+0xc4>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <HAL_InitTick+0xc8>)
 80022d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022da:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_InitTick+0xc8>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022e4:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_InitTick+0xc8>)
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022f2:	f107 0210 	add.w	r2, r7, #16
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f007 f9f5 	bl	80096ec <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_InitTick+0x6a>
 800230c:	e001      	b.n	8002312 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e02c      	b.n	800236c <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002312:	f007 f9bf 	bl	8009694 <HAL_RCC_GetPCLK1Freq>
 8002316:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002318:	e004      	b.n	8002324 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800231a:	f007 f9bb 	bl	8009694 <HAL_RCC_GetPCLK1Freq>
 800231e:	4603      	mov	r3, r0
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002326:	4a15      	ldr	r2, [pc, #84]	@ (800237c <HAL_InitTick+0xcc>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	3b01      	subs	r3, #1
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002332:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_InitTick+0xd0>)
 8002334:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002338:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_InitTick+0xd0>)
 800233c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002340:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002342:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_InitTick+0xd0>)
 8002344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002346:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002348:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_InitTick+0xd0>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234e:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <HAL_InitTick+0xd0>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002354:	480a      	ldr	r0, [pc, #40]	@ (8002380 <HAL_InitTick+0xd0>)
 8002356:	f009 fc32 	bl	800bbbe <HAL_TIM_Base_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002360:	4807      	ldr	r0, [pc, #28]	@ (8002380 <HAL_InitTick+0xd0>)
 8002362:	f009 fc83 	bl	800bc6c <HAL_TIM_Base_Start_IT>
 8002366:	4603      	mov	r3, r0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3740      	adds	r7, #64	@ 0x40
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24000008 	.word	0x24000008
 8002378:	58024400 	.word	0x58024400
 800237c:	431bde83 	.word	0x431bde83
 8002380:	24070f18 	.word	0x24070f18

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <NMI_Handler+0x4>

0800238c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <MemManage_Handler+0x4>

0800239c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <UsageFault_Handler+0x4>

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <TIM2_IRQHandler+0x10>)
 80023c2:	f009 fe3b 	bl	800c03c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	24070f18 	.word	0x24070f18

080023d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <UART8_IRQHandler+0x10>)
 80023d6:	f00a ff73 	bl	800d2c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	240005f8 	.word	0x240005f8

080023e4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <I2C4_EV_IRQHandler+0x10>)
 80023ea:	f003 f91b 	bl	8005624 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	240002ec 	.word	0x240002ec

080023f8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80023fc:	4802      	ldr	r0, [pc, #8]	@ (8002408 <I2C4_ER_IRQHandler+0x10>)
 80023fe:	f003 f92b 	bl	8005658 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	240002ec 	.word	0x240002ec

0800240c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <OTG_FS_IRQHandler+0x10>)
 8002412:	f004 ff24 	bl	800725e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	24076e34 	.word	0x24076e34

08002420 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <BDMA_Channel0_IRQHandler+0x10>)
 8002426:	f001 fc0f 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000340 	.word	0x24000340

08002434 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <BDMA_Channel1_IRQHandler+0x10>)
 800243a:	f001 fc05 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	240003b8 	.word	0x240003b8

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_kill>:

int _kill(int pid, int sig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002462:	f015 fddf 	bl	8018024 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2216      	movs	r2, #22
 800246a:	601a      	str	r2, [r3, #0]
  return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_exit>:

void _exit (int status)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800248a:	bf00      	nop
 800248c:	e7fd      	b.n	800248a <_exit+0x12>

0800248e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e00a      	b.n	80024b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a0:	f3af 8000 	nop.w
 80024a4:	4601      	mov	r1, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	60ba      	str	r2, [r7, #8]
 80024ac:	b2ca      	uxtb	r2, r1
 80024ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	dbf0      	blt.n	80024a0 <_read+0x12>
  }

  return len;
 80024be:	687b      	ldr	r3, [r7, #4]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f0:	605a      	str	r2, [r3, #4]
  return 0;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_isatty>:

int _isatty(int file)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f015 fd60 	bl	8018024 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24080000 	.word	0x24080000
 8002590:	00000400 	.word	0x00000400
 8002594:	24070f64 	.word	0x24070f64
 8002598:	24077688 	.word	0x24077688

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025a0:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <SystemInit+0xe4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	4a36      	ldr	r2, [pc, #216]	@ (8002680 <SystemInit+0xe4>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025b0:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <SystemInit+0xe8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d807      	bhi.n	80025cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <SystemInit+0xe8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 030f 	bic.w	r3, r3, #15
 80025c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <SystemInit+0xe8>)
 80025c6:	f043 0307 	orr.w	r3, r3, #7
 80025ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <SystemInit+0xec>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <SystemInit+0xec>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <SystemInit+0xec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <SystemInit+0xec>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4929      	ldr	r1, [pc, #164]	@ (8002688 <SystemInit+0xec>)
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <SystemInit+0xf0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <SystemInit+0xe8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <SystemInit+0xe8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 030f 	bic.w	r3, r3, #15
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <SystemInit+0xe8>)
 8002600:	f043 0307 	orr.w	r3, r3, #7
 8002604:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <SystemInit+0xec>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <SystemInit+0xec>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <SystemInit+0xec>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <SystemInit+0xec>)
 800261a:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <SystemInit+0xf4>)
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <SystemInit+0xec>)
 8002620:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <SystemInit+0xf8>)
 8002622:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002624:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <SystemInit+0xec>)
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <SystemInit+0xfc>)
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <SystemInit+0xec>)
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <SystemInit+0xec>)
 8002632:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <SystemInit+0xfc>)
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <SystemInit+0xec>)
 8002638:	2200      	movs	r2, #0
 800263a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <SystemInit+0xec>)
 800263e:	4a16      	ldr	r2, [pc, #88]	@ (8002698 <SystemInit+0xfc>)
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <SystemInit+0xec>)
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <SystemInit+0xec>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <SystemInit+0xec>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <SystemInit+0xec>)
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <SystemInit+0x100>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <SystemInit+0x104>)
 8002660:	4013      	ands	r3, r2
 8002662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002666:	d202      	bcs.n	800266e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <SystemInit+0x108>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <SystemInit+0x10c>)
 8002670:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002674:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	52002000 	.word	0x52002000
 8002688:	58024400 	.word	0x58024400
 800268c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002690:	02020200 	.word	0x02020200
 8002694:	01ff0000 	.word	0x01ff0000
 8002698:	01010280 	.word	0x01010280
 800269c:	5c001000 	.word	0x5c001000
 80026a0:	ffff0000 	.word	0xffff0000
 80026a4:	51008108 	.word	0x51008108
 80026a8:	52004000 	.word	0x52004000

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b0:	f7ff ff74 	bl	800259c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f015 fca9 	bl	8018030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7fe fb85 	bl	8000dec <main>
  bx  lr
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026ec:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 80026f0:	0801aa48 	.word	0x0801aa48
  ldr r2, =_sbss
 80026f4:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 80026f8:	24077684 	.word	0x24077684

080026fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC3_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002706:	2003      	movs	r0, #3
 8002708:	f000 f933 	bl	8002972 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800270c:	f006 fe18 	bl	8009340 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_Init+0x68>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4913      	ldr	r1, [pc, #76]	@ (800276c <HAL_Init+0x6c>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_Init+0x68>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <HAL_Init+0x6c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_Init+0x70>)
 8002742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_Init+0x74>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274a:	200f      	movs	r0, #15
 800274c:	f7ff fdb0 	bl	80022b0 <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e002      	b.n	8002760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff f905 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	58024400 	.word	0x58024400
 800276c:	0801a5bc 	.word	0x0801a5bc
 8002770:	24000004 	.word	0x24000004
 8002774:	24000000 	.word	0x24000000

08002778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_IncTick+0x20>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_IncTick+0x24>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a04      	ldr	r2, [pc, #16]	@ (800279c <HAL_IncTick+0x24>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	2400000c 	.word	0x2400000c
 800279c:	24070f68 	.word	0x24070f68

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_GetTick+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	24070f68 	.word	0x24070f68

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff ffee 	bl	80027a0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2400000c 	.word	0x2400000c

08002800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetREVID+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0c1b      	lsrs	r3, r3, #16
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	5c001000 	.word	0x5c001000

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <__NVIC_SetPriorityGrouping+0x40>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	4313      	orrs	r3, r2
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <__NVIC_SetPriorityGrouping+0x40>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00
 800285c:	05fa0000 	.word	0x05fa0000

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	@ (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	@ (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	@ (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	@ 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ff4c 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002996:	f7ff ff63 	bl	8002860 <__NVIC_GetPriorityGrouping>
 800299a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	6978      	ldr	r0, [r7, #20]
 80029a2:	f7ff ffb3 	bl	800290c <NVIC_EncodePriority>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff82 	bl	80028b8 <__NVIC_SetPriority>
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff56 	bl	800287c <__NVIC_EnableIRQ>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029dc:	f3bf 8f5f 	dmb	sy
}
 80029e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_MPU_Disable+0x28>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	4a06      	ldr	r2, [pc, #24]	@ (8002a00 <HAL_MPU_Disable+0x28>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_MPU_Disable+0x2c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	605a      	str	r2, [r3, #4]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00
 8002a04:	e000ed90 	.word	0xe000ed90

08002a08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a10:	4a0b      	ldr	r2, [pc, #44]	@ (8002a40 <HAL_MPU_Enable+0x38>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_MPU_Enable+0x3c>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <HAL_MPU_Enable+0x3c>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a26:	f3bf 8f4f 	dsb	sy
}
 8002a2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a2c:	f3bf 8f6f 	isb	sy
}
 8002a30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed90 	.word	0xe000ed90
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	785a      	ldrb	r2, [r3, #1]
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8002a56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002a58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	@ (8002ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002a64:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7adb      	ldrb	r3, [r3, #11]
 8002a76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7a9b      	ldrb	r3, [r3, #10]
 8002a7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7b5b      	ldrb	r3, [r3, #13]
 8002a86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7b9b      	ldrb	r3, [r3, #14]
 8002a8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7bdb      	ldrb	r3, [r3, #15]
 8002a96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7a5b      	ldrb	r3, [r3, #9]
 8002a9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7a1b      	ldrb	r3, [r3, #8]
 8002aa6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002aa8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ab0:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ab2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ab4:	6113      	str	r3, [r2, #16]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed90 	.word	0xe000ed90

08002ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff fe66 	bl	80027a0 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e316      	b.n	800310e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a66      	ldr	r2, [pc, #408]	@ (8002c80 <HAL_DMA_Init+0x1b8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d04a      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <HAL_DMA_Init+0x1bc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d045      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a63      	ldr	r2, [pc, #396]	@ (8002c88 <HAL_DMA_Init+0x1c0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d040      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a62      	ldr	r2, [pc, #392]	@ (8002c8c <HAL_DMA_Init+0x1c4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d03b      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a60      	ldr	r2, [pc, #384]	@ (8002c90 <HAL_DMA_Init+0x1c8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d036      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_DMA_Init+0x1cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d031      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5d      	ldr	r2, [pc, #372]	@ (8002c98 <HAL_DMA_Init+0x1d0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02c      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c9c <HAL_DMA_Init+0x1d4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d027      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca0 <HAL_DMA_Init+0x1d8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a59      	ldr	r2, [pc, #356]	@ (8002ca4 <HAL_DMA_Init+0x1dc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d01d      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a57      	ldr	r2, [pc, #348]	@ (8002ca8 <HAL_DMA_Init+0x1e0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_DMA_Init+0x1e4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a54      	ldr	r2, [pc, #336]	@ (8002cb0 <HAL_DMA_Init+0x1e8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a53      	ldr	r2, [pc, #332]	@ (8002cb4 <HAL_DMA_Init+0x1ec>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a51      	ldr	r2, [pc, #324]	@ (8002cb8 <HAL_DMA_Init+0x1f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_Init+0xb8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a50      	ldr	r2, [pc, #320]	@ (8002cbc <HAL_DMA_Init+0x1f4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Init+0xbc>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_DMA_Init+0xbe>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 813b 	beq.w	8002e02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a37      	ldr	r2, [pc, #220]	@ (8002c80 <HAL_DMA_Init+0x1b8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d04a      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a36      	ldr	r2, [pc, #216]	@ (8002c84 <HAL_DMA_Init+0x1bc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d045      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a34      	ldr	r2, [pc, #208]	@ (8002c88 <HAL_DMA_Init+0x1c0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d040      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a33      	ldr	r2, [pc, #204]	@ (8002c8c <HAL_DMA_Init+0x1c4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a31      	ldr	r2, [pc, #196]	@ (8002c90 <HAL_DMA_Init+0x1c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d036      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <HAL_DMA_Init+0x1cc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d031      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8002c98 <HAL_DMA_Init+0x1d0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02c      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c9c <HAL_DMA_Init+0x1d4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d027      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <HAL_DMA_Init+0x1d8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <HAL_DMA_Init+0x1dc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01d      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <HAL_DMA_Init+0x1e0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <HAL_DMA_Init+0x1e4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a25      	ldr	r2, [pc, #148]	@ (8002cb0 <HAL_DMA_Init+0x1e8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <HAL_DMA_Init+0x1ec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a22      	ldr	r2, [pc, #136]	@ (8002cb8 <HAL_DMA_Init+0x1f0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_DMA_Init+0x174>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <HAL_DMA_Init+0x1f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <HAL_DMA_Init+0x186>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_DMA_Init+0x196>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c5e:	e02f      	b.n	8002cc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c60:	f7ff fd9e 	bl	80027a0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d928      	bls.n	8002cc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e246      	b.n	800310e <HAL_DMA_Init+0x646>
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1c8      	bne.n	8002c60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4b83      	ldr	r3, [pc, #524]	@ (8002ee8 <HAL_DMA_Init+0x420>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ce6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d24:	4b71      	ldr	r3, [pc, #452]	@ (8002eec <HAL_DMA_Init+0x424>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b71      	ldr	r3, [pc, #452]	@ (8002ef0 <HAL_DMA_Init+0x428>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d30:	d328      	bcc.n	8002d84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b28      	cmp	r3, #40	@ 0x28
 8002d38:	d903      	bls.n	8002d42 <HAL_DMA_Init+0x27a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d40:	d917      	bls.n	8002d72 <HAL_DMA_Init+0x2aa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d48:	d903      	bls.n	8002d52 <HAL_DMA_Init+0x28a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b42      	cmp	r3, #66	@ 0x42
 8002d50:	d90f      	bls.n	8002d72 <HAL_DMA_Init+0x2aa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b46      	cmp	r3, #70	@ 0x46
 8002d58:	d903      	bls.n	8002d62 <HAL_DMA_Init+0x29a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b48      	cmp	r3, #72	@ 0x48
 8002d60:	d907      	bls.n	8002d72 <HAL_DMA_Init+0x2aa>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b4e      	cmp	r3, #78	@ 0x4e
 8002d68:	d905      	bls.n	8002d76 <HAL_DMA_Init+0x2ae>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b52      	cmp	r3, #82	@ 0x52
 8002d70:	d801      	bhi.n	8002d76 <HAL_DMA_Init+0x2ae>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_Init+0x2b0>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d117      	bne.n	8002dde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 ff2b 	bl	8004c1c <DMA_CheckFifoParam>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	@ 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e197      	b.n	800310e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 fe66 	bl	8004ab8 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	223f      	movs	r2, #63	@ 0x3f
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	e0cd      	b.n	8002f9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef4 <HAL_DMA_Init+0x42c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a39      	ldr	r2, [pc, #228]	@ (8002ef8 <HAL_DMA_Init+0x430>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a38      	ldr	r2, [pc, #224]	@ (8002efc <HAL_DMA_Init+0x434>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a36      	ldr	r2, [pc, #216]	@ (8002f00 <HAL_DMA_Init+0x438>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a35      	ldr	r2, [pc, #212]	@ (8002f04 <HAL_DMA_Init+0x43c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a33      	ldr	r2, [pc, #204]	@ (8002f08 <HAL_DMA_Init+0x440>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a32      	ldr	r2, [pc, #200]	@ (8002f0c <HAL_DMA_Init+0x444>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_Init+0x38a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <HAL_DMA_Init+0x448>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_DMA_Init+0x38e>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_DMA_Init+0x390>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8097 	beq.w	8002f8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <HAL_DMA_Init+0x42c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d021      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_DMA_Init+0x430>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01c      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <HAL_DMA_Init+0x434>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d017      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	@ (8002f00 <HAL_DMA_Init+0x438>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d012      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f04 <HAL_DMA_Init+0x43c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	@ (8002f08 <HAL_DMA_Init+0x440>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d008      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_DMA_Init+0x444>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_DMA_Init+0x3e4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_DMA_Init+0x448>)
 8002eaa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_DMA_Init+0x44c>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d021      	beq.n	8002f18 <HAL_DMA_Init+0x450>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b80      	cmp	r3, #128	@ 0x80
 8002eda:	d102      	bne.n	8002ee2 <HAL_DMA_Init+0x41a>
 8002edc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ee0:	e01b      	b.n	8002f1a <HAL_DMA_Init+0x452>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e019      	b.n	8002f1a <HAL_DMA_Init+0x452>
 8002ee6:	bf00      	nop
 8002ee8:	fe10803f 	.word	0xfe10803f
 8002eec:	5c001000 	.word	0x5c001000
 8002ef0:	ffff0000 	.word	0xffff0000
 8002ef4:	58025408 	.word	0x58025408
 8002ef8:	5802541c 	.word	0x5802541c
 8002efc:	58025430 	.word	0x58025430
 8002f00:	58025444 	.word	0x58025444
 8002f04:	58025458 	.word	0x58025458
 8002f08:	5802546c 	.word	0x5802546c
 8002f0c:	58025480 	.word	0x58025480
 8002f10:	58025494 	.word	0x58025494
 8002f14:	fffe000f 	.word	0xfffe000f
 8002f18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003118 <HAL_DMA_Init+0x650>)
 8002f60:	4413      	add	r3, r2
 8002f62:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_DMA_Init+0x654>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 fda1 	bl	8004ab8 <DMA_CalcBaseAndBitshift>
 8002f76:	4603      	mov	r3, r0
 8002f78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	e008      	b.n	8002f9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2203      	movs	r2, #3
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0b7      	b.n	800310e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8003120 <HAL_DMA_Init+0x658>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d072      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_DMA_Init+0x65c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d06d      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003128 <HAL_DMA_Init+0x660>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d068      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800312c <HAL_DMA_Init+0x664>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d063      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a59      	ldr	r2, [pc, #356]	@ (8003130 <HAL_DMA_Init+0x668>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d05e      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a57      	ldr	r2, [pc, #348]	@ (8003134 <HAL_DMA_Init+0x66c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d059      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a56      	ldr	r2, [pc, #344]	@ (8003138 <HAL_DMA_Init+0x670>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d054      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a54      	ldr	r2, [pc, #336]	@ (800313c <HAL_DMA_Init+0x674>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04f      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a53      	ldr	r2, [pc, #332]	@ (8003140 <HAL_DMA_Init+0x678>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d04a      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <HAL_DMA_Init+0x67c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d045      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <HAL_DMA_Init+0x680>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d040      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4e      	ldr	r2, [pc, #312]	@ (800314c <HAL_DMA_Init+0x684>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03b      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4d      	ldr	r2, [pc, #308]	@ (8003150 <HAL_DMA_Init+0x688>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d036      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <HAL_DMA_Init+0x68c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4a      	ldr	r2, [pc, #296]	@ (8003158 <HAL_DMA_Init+0x690>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d02c      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a48      	ldr	r2, [pc, #288]	@ (800315c <HAL_DMA_Init+0x694>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <HAL_DMA_Init+0x698>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a45      	ldr	r2, [pc, #276]	@ (8003164 <HAL_DMA_Init+0x69c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a44      	ldr	r2, [pc, #272]	@ (8003168 <HAL_DMA_Init+0x6a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a42      	ldr	r2, [pc, #264]	@ (800316c <HAL_DMA_Init+0x6a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a41      	ldr	r2, [pc, #260]	@ (8003170 <HAL_DMA_Init+0x6a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a3f      	ldr	r2, [pc, #252]	@ (8003174 <HAL_DMA_Init+0x6ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a3e      	ldr	r2, [pc, #248]	@ (8003178 <HAL_DMA_Init+0x6b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_DMA_Init+0x5c6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3c      	ldr	r2, [pc, #240]	@ (800317c <HAL_DMA_Init+0x6b4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Init+0x5ca>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_DMA_Init+0x5cc>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d032      	beq.n	80030fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f001 fe3b 	bl	8004d14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b80      	cmp	r3, #128	@ 0x80
 80030a4:	d102      	bne.n	80030ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_DMA_Init+0x624>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d80c      	bhi.n	80030ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f001 feb8 	bl	8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	e008      	b.n	80030fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	a7fdabf8 	.word	0xa7fdabf8
 800311c:	cccccccd 	.word	0xcccccccd
 8003120:	40020010 	.word	0x40020010
 8003124:	40020028 	.word	0x40020028
 8003128:	40020040 	.word	0x40020040
 800312c:	40020058 	.word	0x40020058
 8003130:	40020070 	.word	0x40020070
 8003134:	40020088 	.word	0x40020088
 8003138:	400200a0 	.word	0x400200a0
 800313c:	400200b8 	.word	0x400200b8
 8003140:	40020410 	.word	0x40020410
 8003144:	40020428 	.word	0x40020428
 8003148:	40020440 	.word	0x40020440
 800314c:	40020458 	.word	0x40020458
 8003150:	40020470 	.word	0x40020470
 8003154:	40020488 	.word	0x40020488
 8003158:	400204a0 	.word	0x400204a0
 800315c:	400204b8 	.word	0x400204b8
 8003160:	58025408 	.word	0x58025408
 8003164:	5802541c 	.word	0x5802541c
 8003168:	58025430 	.word	0x58025430
 800316c:	58025444 	.word	0x58025444
 8003170:	58025458 	.word	0x58025458
 8003174:	5802546c 	.word	0x5802546c
 8003178:	58025480 	.word	0x58025480
 800317c:	58025494 	.word	0x58025494

08003180 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff fb0a 	bl	80027a0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e2dc      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d008      	beq.n	80031b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e2cd      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a76      	ldr	r2, [pc, #472]	@ (8003394 <HAL_DMA_Abort+0x214>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a74      	ldr	r2, [pc, #464]	@ (8003398 <HAL_DMA_Abort+0x218>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_DMA_Abort+0x21c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a71      	ldr	r2, [pc, #452]	@ (80033a0 <HAL_DMA_Abort+0x220>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a70      	ldr	r2, [pc, #448]	@ (80033a4 <HAL_DMA_Abort+0x224>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6e      	ldr	r2, [pc, #440]	@ (80033a8 <HAL_DMA_Abort+0x228>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6d      	ldr	r2, [pc, #436]	@ (80033ac <HAL_DMA_Abort+0x22c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6b      	ldr	r2, [pc, #428]	@ (80033b0 <HAL_DMA_Abort+0x230>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6a      	ldr	r2, [pc, #424]	@ (80033b4 <HAL_DMA_Abort+0x234>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <HAL_DMA_Abort+0x238>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a67      	ldr	r2, [pc, #412]	@ (80033bc <HAL_DMA_Abort+0x23c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a65      	ldr	r2, [pc, #404]	@ (80033c0 <HAL_DMA_Abort+0x240>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a64      	ldr	r2, [pc, #400]	@ (80033c4 <HAL_DMA_Abort+0x244>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a62      	ldr	r2, [pc, #392]	@ (80033c8 <HAL_DMA_Abort+0x248>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a61      	ldr	r2, [pc, #388]	@ (80033cc <HAL_DMA_Abort+0x24c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5f      	ldr	r2, [pc, #380]	@ (80033d0 <HAL_DMA_Abort+0x250>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_DMA_Abort+0xda>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_DMA_Abort+0xdc>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 021e 	bic.w	r2, r2, #30
 800326e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800327e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e00a      	b.n	800329e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003394 <HAL_DMA_Abort+0x214>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d072      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003398 <HAL_DMA_Abort+0x218>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d06d      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a39      	ldr	r2, [pc, #228]	@ (800339c <HAL_DMA_Abort+0x21c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d068      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a37      	ldr	r2, [pc, #220]	@ (80033a0 <HAL_DMA_Abort+0x220>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d063      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a36      	ldr	r2, [pc, #216]	@ (80033a4 <HAL_DMA_Abort+0x224>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d05e      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a34      	ldr	r2, [pc, #208]	@ (80033a8 <HAL_DMA_Abort+0x228>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d059      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a33      	ldr	r2, [pc, #204]	@ (80033ac <HAL_DMA_Abort+0x22c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d054      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <HAL_DMA_Abort+0x230>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04f      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a30      	ldr	r2, [pc, #192]	@ (80033b4 <HAL_DMA_Abort+0x234>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <HAL_DMA_Abort+0x238>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_DMA_Abort+0x23c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <HAL_DMA_Abort+0x240>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <HAL_DMA_Abort+0x244>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <HAL_DMA_Abort+0x248>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <HAL_DMA_Abort+0x24c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_DMA_Abort+0x250>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_DMA_Abort+0x254>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_DMA_Abort+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <HAL_DMA_Abort+0x25c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1f      	ldr	r2, [pc, #124]	@ (80033e0 <HAL_DMA_Abort+0x260>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1e      	ldr	r2, [pc, #120]	@ (80033e4 <HAL_DMA_Abort+0x264>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_DMA_Abort+0x268>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <HAL_DMA_Abort+0x26c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_DMA_Abort+0x270>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d132      	bne.n	80033f4 <HAL_DMA_Abort+0x274>
 800338e:	2301      	movs	r3, #1
 8003390:	e031      	b.n	80033f6 <HAL_DMA_Abort+0x276>
 8003392:	bf00      	nop
 8003394:	40020010 	.word	0x40020010
 8003398:	40020028 	.word	0x40020028
 800339c:	40020040 	.word	0x40020040
 80033a0:	40020058 	.word	0x40020058
 80033a4:	40020070 	.word	0x40020070
 80033a8:	40020088 	.word	0x40020088
 80033ac:	400200a0 	.word	0x400200a0
 80033b0:	400200b8 	.word	0x400200b8
 80033b4:	40020410 	.word	0x40020410
 80033b8:	40020428 	.word	0x40020428
 80033bc:	40020440 	.word	0x40020440
 80033c0:	40020458 	.word	0x40020458
 80033c4:	40020470 	.word	0x40020470
 80033c8:	40020488 	.word	0x40020488
 80033cc:	400204a0 	.word	0x400204a0
 80033d0:	400204b8 	.word	0x400204b8
 80033d4:	58025408 	.word	0x58025408
 80033d8:	5802541c 	.word	0x5802541c
 80033dc:	58025430 	.word	0x58025430
 80033e0:	58025444 	.word	0x58025444
 80033e4:	58025458 	.word	0x58025458
 80033e8:	5802546c 	.word	0x5802546c
 80033ec:	58025480 	.word	0x58025480
 80033f0:	58025494 	.word	0x58025494
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6d      	ldr	r2, [pc, #436]	@ (80035c4 <HAL_DMA_Abort+0x444>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d04a      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6b      	ldr	r2, [pc, #428]	@ (80035c8 <HAL_DMA_Abort+0x448>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d045      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6a      	ldr	r2, [pc, #424]	@ (80035cc <HAL_DMA_Abort+0x44c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a68      	ldr	r2, [pc, #416]	@ (80035d0 <HAL_DMA_Abort+0x450>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d03b      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a67      	ldr	r2, [pc, #412]	@ (80035d4 <HAL_DMA_Abort+0x454>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a65      	ldr	r2, [pc, #404]	@ (80035d8 <HAL_DMA_Abort+0x458>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a64      	ldr	r2, [pc, #400]	@ (80035dc <HAL_DMA_Abort+0x45c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a62      	ldr	r2, [pc, #392]	@ (80035e0 <HAL_DMA_Abort+0x460>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d027      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a61      	ldr	r2, [pc, #388]	@ (80035e4 <HAL_DMA_Abort+0x464>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5f      	ldr	r2, [pc, #380]	@ (80035e8 <HAL_DMA_Abort+0x468>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5e      	ldr	r2, [pc, #376]	@ (80035ec <HAL_DMA_Abort+0x46c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5c      	ldr	r2, [pc, #368]	@ (80035f0 <HAL_DMA_Abort+0x470>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5b      	ldr	r2, [pc, #364]	@ (80035f4 <HAL_DMA_Abort+0x474>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a59      	ldr	r2, [pc, #356]	@ (80035f8 <HAL_DMA_Abort+0x478>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a58      	ldr	r2, [pc, #352]	@ (80035fc <HAL_DMA_Abort+0x47c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a56      	ldr	r2, [pc, #344]	@ (8003600 <HAL_DMA_Abort+0x480>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_Abort+0x33c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e007      	b.n	80034cc <HAL_DMA_Abort+0x34c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034cc:	e013      	b.n	80034f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ce:	f7ff f967 	bl	80027a0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d90c      	bls.n	80034f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e12d      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e5      	bne.n	80034ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_DMA_Abort+0x444>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_DMA_Abort+0x448>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <HAL_DMA_Abort+0x44c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <HAL_DMA_Abort+0x450>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a29      	ldr	r2, [pc, #164]	@ (80035d4 <HAL_DMA_Abort+0x454>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	@ (80035d8 <HAL_DMA_Abort+0x458>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a26      	ldr	r2, [pc, #152]	@ (80035dc <HAL_DMA_Abort+0x45c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <HAL_DMA_Abort+0x460>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <HAL_DMA_Abort+0x464>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <HAL_DMA_Abort+0x468>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a20      	ldr	r2, [pc, #128]	@ (80035ec <HAL_DMA_Abort+0x46c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_DMA_Abort+0x470>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_DMA_Abort+0x474>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_DMA_Abort+0x478>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_DMA_Abort+0x47c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <HAL_DMA_Abort+0x480>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Abort+0x426>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_Abort+0x428>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02b      	beq.n	8003604 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	223f      	movs	r2, #63	@ 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	e02a      	b.n	800361a <HAL_DMA_Abort+0x49a>
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4f      	ldr	r2, [pc, #316]	@ (800375c <HAL_DMA_Abort+0x5dc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d072      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4d      	ldr	r2, [pc, #308]	@ (8003760 <HAL_DMA_Abort+0x5e0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d06d      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4c      	ldr	r2, [pc, #304]	@ (8003764 <HAL_DMA_Abort+0x5e4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d068      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4a      	ldr	r2, [pc, #296]	@ (8003768 <HAL_DMA_Abort+0x5e8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d063      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a49      	ldr	r2, [pc, #292]	@ (800376c <HAL_DMA_Abort+0x5ec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <HAL_DMA_Abort+0x5f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d059      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <HAL_DMA_Abort+0x5f4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d054      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a44      	ldr	r2, [pc, #272]	@ (8003778 <HAL_DMA_Abort+0x5f8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d04f      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a43      	ldr	r2, [pc, #268]	@ (800377c <HAL_DMA_Abort+0x5fc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <HAL_DMA_Abort+0x600>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a40      	ldr	r2, [pc, #256]	@ (8003784 <HAL_DMA_Abort+0x604>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3e      	ldr	r2, [pc, #248]	@ (8003788 <HAL_DMA_Abort+0x608>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3d      	ldr	r2, [pc, #244]	@ (800378c <HAL_DMA_Abort+0x60c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003790 <HAL_DMA_Abort+0x610>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_DMA_Abort+0x614>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_DMA_Abort+0x618>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a37      	ldr	r2, [pc, #220]	@ (800379c <HAL_DMA_Abort+0x61c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <HAL_DMA_Abort+0x620>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_DMA_Abort+0x624>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a32      	ldr	r2, [pc, #200]	@ (80037a8 <HAL_DMA_Abort+0x628>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_DMA_Abort+0x62c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	@ (80037b0 <HAL_DMA_Abort+0x630>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <HAL_DMA_Abort+0x634>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <HAL_DMA_Abort+0x638>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_DMA_Abort+0x58e>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_DMA_Abort+0x590>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800371c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800373e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494

080037bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e237      	b.n	8003c3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e22c      	b.n	8003c3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5c      	ldr	r2, [pc, #368]	@ (800395c <HAL_DMA_Abort_IT+0x1a0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003960 <HAL_DMA_Abort_IT+0x1a4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a59      	ldr	r2, [pc, #356]	@ (8003964 <HAL_DMA_Abort_IT+0x1a8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_DMA_Abort_IT+0x1ac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a56      	ldr	r2, [pc, #344]	@ (800396c <HAL_DMA_Abort_IT+0x1b0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a55      	ldr	r2, [pc, #340]	@ (8003970 <HAL_DMA_Abort_IT+0x1b4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a53      	ldr	r2, [pc, #332]	@ (8003974 <HAL_DMA_Abort_IT+0x1b8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_DMA_Abort_IT+0x1bc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a50      	ldr	r2, [pc, #320]	@ (800397c <HAL_DMA_Abort_IT+0x1c0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_DMA_Abort_IT+0x1c4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4d      	ldr	r2, [pc, #308]	@ (8003984 <HAL_DMA_Abort_IT+0x1c8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4c      	ldr	r2, [pc, #304]	@ (8003988 <HAL_DMA_Abort_IT+0x1cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4a      	ldr	r2, [pc, #296]	@ (800398c <HAL_DMA_Abort_IT+0x1d0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a49      	ldr	r2, [pc, #292]	@ (8003990 <HAL_DMA_Abort_IT+0x1d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a47      	ldr	r2, [pc, #284]	@ (8003994 <HAL_DMA_Abort_IT+0x1d8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a46      	ldr	r2, [pc, #280]	@ (8003998 <HAL_DMA_Abort_IT+0x1dc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Abort_IT+0xcc>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_DMA_Abort_IT+0xce>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8086 	beq.w	800399c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <HAL_DMA_Abort_IT+0x1a0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04a      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <HAL_DMA_Abort_IT+0x1a4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d045      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003964 <HAL_DMA_Abort_IT+0x1a8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d040      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003968 <HAL_DMA_Abort_IT+0x1ac>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d03b      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_DMA_Abort_IT+0x1b0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d036      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <HAL_DMA_Abort_IT+0x1b4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d031      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_DMA_Abort_IT+0x1b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02c      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_DMA_Abort_IT+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d027      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	@ (800397c <HAL_DMA_Abort_IT+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a22      	ldr	r2, [pc, #136]	@ (8003980 <HAL_DMA_Abort_IT+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01d      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <HAL_DMA_Abort_IT+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_DMA_Abort_IT+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <HAL_DMA_Abort_IT+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_DMA_Abort_IT+0x1d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <HAL_DMA_Abort_IT+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a19      	ldr	r2, [pc, #100]	@ (8003998 <HAL_DMA_Abort_IT+0x1dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <HAL_DMA_Abort_IT+0x18e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e178      	b.n	8003c3c <HAL_DMA_Abort_IT+0x480>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e16f      	b.n	8003c3c <HAL_DMA_Abort_IT+0x480>
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020e 	bic.w	r2, r2, #14
 80039aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b64 <HAL_DMA_Abort_IT+0x3a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d04a      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003b68 <HAL_DMA_Abort_IT+0x3ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d045      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d040      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a68      	ldr	r2, [pc, #416]	@ (8003b70 <HAL_DMA_Abort_IT+0x3b4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d03b      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a66      	ldr	r2, [pc, #408]	@ (8003b74 <HAL_DMA_Abort_IT+0x3b8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d036      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_DMA_Abort_IT+0x3bc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d031      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a63      	ldr	r2, [pc, #396]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d02c      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a62      	ldr	r2, [pc, #392]	@ (8003b80 <HAL_DMA_Abort_IT+0x3c4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d027      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_DMA_Abort_IT+0x3c8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b88 <HAL_DMA_Abort_IT+0x3cc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d01d      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b90 <HAL_DMA_Abort_IT+0x3d4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5a      	ldr	r2, [pc, #360]	@ (8003b94 <HAL_DMA_Abort_IT+0x3d8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a59      	ldr	r2, [pc, #356]	@ (8003b98 <HAL_DMA_Abort_IT+0x3dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_DMA_Abort_IT+0x3e0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a56      	ldr	r2, [pc, #344]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <HAL_DMA_Abort_IT+0x2a2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e007      	b.n	8003a6e <HAL_DMA_Abort_IT+0x2b2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	@ (8003b64 <HAL_DMA_Abort_IT+0x3a8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d072      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_DMA_Abort_IT+0x3ac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d06d      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a39      	ldr	r2, [pc, #228]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d068      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <HAL_DMA_Abort_IT+0x3b4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d063      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <HAL_DMA_Abort_IT+0x3b8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d05e      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	@ (8003b78 <HAL_DMA_Abort_IT+0x3bc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d059      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d054      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_DMA_Abort_IT+0x3c4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04f      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <HAL_DMA_Abort_IT+0x3c8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <HAL_DMA_Abort_IT+0x3cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_DMA_Abort_IT+0x3d4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <HAL_DMA_Abort_IT+0x3d8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <HAL_DMA_Abort_IT+0x3dc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_DMA_Abort_IT+0x3e0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3e8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3ec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <HAL_DMA_Abort_IT+0x3f0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3f4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3f8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3fc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <HAL_DMA_Abort_IT+0x400>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a19      	ldr	r2, [pc, #100]	@ (8003bc0 <HAL_DMA_Abort_IT+0x404>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d132      	bne.n	8003bc4 <HAL_DMA_Abort_IT+0x408>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e031      	b.n	8003bc6 <HAL_DMA_Abort_IT+0x40a>
 8003b62:	bf00      	nop
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	40020040 	.word	0x40020040
 8003b70:	40020058 	.word	0x40020058
 8003b74:	40020070 	.word	0x40020070
 8003b78:	40020088 	.word	0x40020088
 8003b7c:	400200a0 	.word	0x400200a0
 8003b80:	400200b8 	.word	0x400200b8
 8003b84:	40020410 	.word	0x40020410
 8003b88:	40020428 	.word	0x40020428
 8003b8c:	40020440 	.word	0x40020440
 8003b90:	40020458 	.word	0x40020458
 8003b94:	40020470 	.word	0x40020470
 8003b98:	40020488 	.word	0x40020488
 8003b9c:	400204a0 	.word	0x400204a0
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	58025408 	.word	0x58025408
 8003ba8:	5802541c 	.word	0x5802541c
 8003bac:	58025430 	.word	0x58025430
 8003bb0:	58025444 	.word	0x58025444
 8003bb4:	58025458 	.word	0x58025458
 8003bb8:	5802546c 	.word	0x5802546c
 8003bbc:	58025480 	.word	0x58025480
 8003bc0:	58025494 	.word	0x58025494
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d028      	beq.n	8003c1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bf8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop

08003c48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c54:	4b67      	ldr	r3, [pc, #412]	@ (8003df4 <HAL_DMA_IRQHandler+0x1ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <HAL_DMA_IRQHandler+0x1b0>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dfc <HAL_DMA_IRQHandler+0x1b4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	@ (8003e04 <HAL_DMA_IRQHandler+0x1bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e08 <HAL_DMA_IRQHandler+0x1c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_DMA_IRQHandler+0x1cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <HAL_DMA_IRQHandler+0x1d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a50      	ldr	r2, [pc, #320]	@ (8003e24 <HAL_DMA_IRQHandler+0x1dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	@ (8003e28 <HAL_DMA_IRQHandler+0x1e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_DMA_IRQHandler+0x1ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a48      	ldr	r2, [pc, #288]	@ (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_DMA_IRQHandler+0xd6>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0xd8>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 842b 	beq.w	800457c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2208      	movs	r2, #8
 8003d30:	409a      	lsls	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a2 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	@ (8003dfc <HAL_DMA_IRQHandler+0x1b4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_DMA_IRQHandler+0x1bc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e08 <HAL_DMA_IRQHandler+0x1c0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	@ (8003e14 <HAL_DMA_IRQHandler+0x1cc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <HAL_DMA_IRQHandler+0x1d0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <HAL_DMA_IRQHandler+0x1dc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <HAL_DMA_IRQHandler+0x1e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	@ (8003e34 <HAL_DMA_IRQHandler+0x1ec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d12f      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x1f4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02e      	b.n	8003e50 <HAL_DMA_IRQHandler+0x208>
 8003df2:	bf00      	nop
 8003df4:	24000000 	.word	0x24000000
 8003df8:	1b4e81b5 	.word	0x1b4e81b5
 8003dfc:	40020010 	.word	0x40020010
 8003e00:	40020028 	.word	0x40020028
 8003e04:	40020040 	.word	0x40020040
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	40020070 	.word	0x40020070
 8003e10:	40020088 	.word	0x40020088
 8003e14:	400200a0 	.word	0x400200a0
 8003e18:	400200b8 	.word	0x400200b8
 8003e1c:	40020410 	.word	0x40020410
 8003e20:	40020428 	.word	0x40020428
 8003e24:	40020440 	.word	0x40020440
 8003e28:	40020458 	.word	0x40020458
 8003e2c:	40020470 	.word	0x40020470
 8003e30:	40020488 	.word	0x40020488
 8003e34:	400204a0 	.word	0x400204a0
 8003e38:	400204b8 	.word	0x400204b8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d06e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a69      	ldr	r2, [pc, #420]	@ (8004040 <HAL_DMA_IRQHandler+0x3f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a67      	ldr	r2, [pc, #412]	@ (8004044 <HAL_DMA_IRQHandler+0x3fc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a66      	ldr	r2, [pc, #408]	@ (8004048 <HAL_DMA_IRQHandler+0x400>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a64      	ldr	r2, [pc, #400]	@ (800404c <HAL_DMA_IRQHandler+0x404>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a63      	ldr	r2, [pc, #396]	@ (8004050 <HAL_DMA_IRQHandler+0x408>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a61      	ldr	r2, [pc, #388]	@ (8004054 <HAL_DMA_IRQHandler+0x40c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a60      	ldr	r2, [pc, #384]	@ (8004058 <HAL_DMA_IRQHandler+0x410>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5e      	ldr	r2, [pc, #376]	@ (800405c <HAL_DMA_IRQHandler+0x414>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5d      	ldr	r2, [pc, #372]	@ (8004060 <HAL_DMA_IRQHandler+0x418>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8004064 <HAL_DMA_IRQHandler+0x41c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5a      	ldr	r2, [pc, #360]	@ (8004068 <HAL_DMA_IRQHandler+0x420>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_DMA_IRQHandler+0x424>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a57      	ldr	r2, [pc, #348]	@ (8004070 <HAL_DMA_IRQHandler+0x428>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a55      	ldr	r2, [pc, #340]	@ (8004074 <HAL_DMA_IRQHandler+0x42c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a54      	ldr	r2, [pc, #336]	@ (8004078 <HAL_DMA_IRQHandler+0x430>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_DMA_IRQHandler+0x434>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10a      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x304>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e003      	b.n	8003f54 <HAL_DMA_IRQHandler+0x30c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6c:	f043 0202 	orr.w	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 808f 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <HAL_DMA_IRQHandler+0x3f8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d04a      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <HAL_DMA_IRQHandler+0x3fc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d045      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <HAL_DMA_IRQHandler+0x400>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d040      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a27      	ldr	r2, [pc, #156]	@ (800404c <HAL_DMA_IRQHandler+0x404>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d03b      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a26      	ldr	r2, [pc, #152]	@ (8004050 <HAL_DMA_IRQHandler+0x408>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d036      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <HAL_DMA_IRQHandler+0x40c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d031      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a23      	ldr	r2, [pc, #140]	@ (8004058 <HAL_DMA_IRQHandler+0x410>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d02c      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a21      	ldr	r2, [pc, #132]	@ (800405c <HAL_DMA_IRQHandler+0x414>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d027      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a20      	ldr	r2, [pc, #128]	@ (8004060 <HAL_DMA_IRQHandler+0x418>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <HAL_DMA_IRQHandler+0x41c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01d      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_DMA_IRQHandler+0x420>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d018      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <HAL_DMA_IRQHandler+0x424>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_DMA_IRQHandler+0x428>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <HAL_DMA_IRQHandler+0x42c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <HAL_DMA_IRQHandler+0x430>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <HAL_DMA_IRQHandler+0x434>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d12a      	bne.n	8004080 <HAL_DMA_IRQHandler+0x438>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e023      	b.n	8004088 <HAL_DMA_IRQHandler+0x440>
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2204      	movs	r2, #4
 8004096:	409a      	lsls	r2, r3
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2210      	movs	r2, #16
 80040b2:	409a      	lsls	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a6 	beq.w	800420a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a85      	ldr	r2, [pc, #532]	@ (80042d8 <HAL_DMA_IRQHandler+0x690>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	@ (80042dc <HAL_DMA_IRQHandler+0x694>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a82      	ldr	r2, [pc, #520]	@ (80042e0 <HAL_DMA_IRQHandler+0x698>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a80      	ldr	r2, [pc, #512]	@ (80042e4 <HAL_DMA_IRQHandler+0x69c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7f      	ldr	r2, [pc, #508]	@ (80042e8 <HAL_DMA_IRQHandler+0x6a0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7d      	ldr	r2, [pc, #500]	@ (80042ec <HAL_DMA_IRQHandler+0x6a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <HAL_DMA_IRQHandler+0x6ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a79      	ldr	r2, [pc, #484]	@ (80042f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	@ (80042fc <HAL_DMA_IRQHandler+0x6b4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <HAL_DMA_IRQHandler+0x6b8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_DMA_IRQHandler+0x6bc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	@ (8004308 <HAL_DMA_IRQHandler+0x6c0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a71      	ldr	r2, [pc, #452]	@ (800430c <HAL_DMA_IRQHandler+0x6c4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a70      	ldr	r2, [pc, #448]	@ (8004310 <HAL_DMA_IRQHandler+0x6c8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6e      	ldr	r2, [pc, #440]	@ (8004314 <HAL_DMA_IRQHandler+0x6cc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10a      	bne.n	8004174 <HAL_DMA_IRQHandler+0x52c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e009      	b.n	8004188 <HAL_DMA_IRQHandler+0x540>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03e      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2210      	movs	r2, #16
 8004196:	409a      	lsls	r2, r3
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d024      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e01f      	b.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e016      	b.n	800420a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0208 	bic.w	r2, r2, #8
 80041f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2220      	movs	r2, #32
 8004214:	409a      	lsls	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8110 	beq.w	8004440 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <HAL_DMA_IRQHandler+0x690>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04a      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <HAL_DMA_IRQHandler+0x694>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d045      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a29      	ldr	r2, [pc, #164]	@ (80042e0 <HAL_DMA_IRQHandler+0x698>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a28      	ldr	r2, [pc, #160]	@ (80042e4 <HAL_DMA_IRQHandler+0x69c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d03b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <HAL_DMA_IRQHandler+0x6a0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d036      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <HAL_DMA_IRQHandler+0x6a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d031      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a23      	ldr	r2, [pc, #140]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02c      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <HAL_DMA_IRQHandler+0x6ac>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a20      	ldr	r2, [pc, #128]	@ (80042f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <HAL_DMA_IRQHandler+0x6b4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01d      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_DMA_IRQHandler+0x6b8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_DMA_IRQHandler+0x6bc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	@ (8004308 <HAL_DMA_IRQHandler+0x6c0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a19      	ldr	r2, [pc, #100]	@ (800430c <HAL_DMA_IRQHandler+0x6c4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <HAL_DMA_IRQHandler+0x6c8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <HAL_DMA_IRQHandler+0x6cc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d12b      	bne.n	8004318 <HAL_DMA_IRQHandler+0x6d0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e02a      	b.n	800432c <HAL_DMA_IRQHandler+0x6e4>
 80042d6:	bf00      	nop
 80042d8:	40020010 	.word	0x40020010
 80042dc:	40020028 	.word	0x40020028
 80042e0:	40020040 	.word	0x40020040
 80042e4:	40020058 	.word	0x40020058
 80042e8:	40020070 	.word	0x40020070
 80042ec:	40020088 	.word	0x40020088
 80042f0:	400200a0 	.word	0x400200a0
 80042f4:	400200b8 	.word	0x400200b8
 80042f8:	40020410 	.word	0x40020410
 80042fc:	40020428 	.word	0x40020428
 8004300:	40020440 	.word	0x40020440
 8004304:	40020458 	.word	0x40020458
 8004308:	40020470 	.word	0x40020470
 800430c:	40020488 	.word	0x40020488
 8004310:	400204a0 	.word	0x400204a0
 8004314:	400204b8 	.word	0x400204b8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2220      	movs	r2, #32
 800433c:	409a      	lsls	r2, r3
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b04      	cmp	r3, #4
 800434c:	d139      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0216 	bic.w	r2, r2, #22
 800435c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800436c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_DMA_IRQHandler+0x736>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0208 	bic.w	r2, r2, #8
 800438c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	223f      	movs	r2, #63	@ 0x3f
 8004398:	409a      	lsls	r2, r3
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 834a 	beq.w	8004a4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
          }
          return;
 80043c0:	e344      	b.n	8004a4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02c      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e027      	b.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e01e      	b.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8306 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8088 	beq.w	8004568 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2204      	movs	r2, #4
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a7a      	ldr	r2, [pc, #488]	@ (8004650 <HAL_DMA_IRQHandler+0xa08>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04a      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a79      	ldr	r2, [pc, #484]	@ (8004654 <HAL_DMA_IRQHandler+0xa0c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d045      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a77      	ldr	r2, [pc, #476]	@ (8004658 <HAL_DMA_IRQHandler+0xa10>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d040      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a76      	ldr	r2, [pc, #472]	@ (800465c <HAL_DMA_IRQHandler+0xa14>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d03b      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a74      	ldr	r2, [pc, #464]	@ (8004660 <HAL_DMA_IRQHandler+0xa18>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d036      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a73      	ldr	r2, [pc, #460]	@ (8004664 <HAL_DMA_IRQHandler+0xa1c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d031      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a71      	ldr	r2, [pc, #452]	@ (8004668 <HAL_DMA_IRQHandler+0xa20>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a70      	ldr	r2, [pc, #448]	@ (800466c <HAL_DMA_IRQHandler+0xa24>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d027      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004670 <HAL_DMA_IRQHandler+0xa28>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6d      	ldr	r2, [pc, #436]	@ (8004674 <HAL_DMA_IRQHandler+0xa2c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004678 <HAL_DMA_IRQHandler+0xa30>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6a      	ldr	r2, [pc, #424]	@ (800467c <HAL_DMA_IRQHandler+0xa34>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a68      	ldr	r2, [pc, #416]	@ (8004680 <HAL_DMA_IRQHandler+0xa38>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a67      	ldr	r2, [pc, #412]	@ (8004684 <HAL_DMA_IRQHandler+0xa3c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a65      	ldr	r2, [pc, #404]	@ (8004688 <HAL_DMA_IRQHandler+0xa40>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a64      	ldr	r2, [pc, #400]	@ (800468c <HAL_DMA_IRQHandler+0xa44>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d108      	bne.n	8004512 <HAL_DMA_IRQHandler+0x8ca>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e007      	b.n	8004522 <HAL_DMA_IRQHandler+0x8da>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3301      	adds	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452a:	429a      	cmp	r2, r3
 800452c:	d307      	bcc.n	800453e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f2      	bne.n	8004522 <HAL_DMA_IRQHandler+0x8da>
 800453c:	e000      	b.n	8004540 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800453e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004556:	e003      	b.n	8004560 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8272 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e26c      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a43      	ldr	r2, [pc, #268]	@ (8004690 <HAL_DMA_IRQHandler+0xa48>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d022      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a42      	ldr	r2, [pc, #264]	@ (8004694 <HAL_DMA_IRQHandler+0xa4c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01d      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a40      	ldr	r2, [pc, #256]	@ (8004698 <HAL_DMA_IRQHandler+0xa50>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d018      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3f      	ldr	r2, [pc, #252]	@ (800469c <HAL_DMA_IRQHandler+0xa54>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <HAL_DMA_IRQHandler+0xa58>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	@ (80046a4 <HAL_DMA_IRQHandler+0xa5c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3a      	ldr	r2, [pc, #232]	@ (80046a8 <HAL_DMA_IRQHandler+0xa60>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a39      	ldr	r2, [pc, #228]	@ (80046ac <HAL_DMA_IRQHandler+0xa64>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x988>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_DMA_IRQHandler+0x98a>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 823f 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2204      	movs	r2, #4
 80045ea:	409a      	lsls	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80cd 	beq.w	8004790 <HAL_DMA_IRQHandler+0xb48>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80c7 	beq.w	8004790 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2204      	movs	r2, #4
 800460c:	409a      	lsls	r2, r3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d049      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8210 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	e20a      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8206 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464c:	e200      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
 800464e:	bf00      	nop
 8004650:	40020010 	.word	0x40020010
 8004654:	40020028 	.word	0x40020028
 8004658:	40020040 	.word	0x40020040
 800465c:	40020058 	.word	0x40020058
 8004660:	40020070 	.word	0x40020070
 8004664:	40020088 	.word	0x40020088
 8004668:	400200a0 	.word	0x400200a0
 800466c:	400200b8 	.word	0x400200b8
 8004670:	40020410 	.word	0x40020410
 8004674:	40020428 	.word	0x40020428
 8004678:	40020440 	.word	0x40020440
 800467c:	40020458 	.word	0x40020458
 8004680:	40020470 	.word	0x40020470
 8004684:	40020488 	.word	0x40020488
 8004688:	400204a0 	.word	0x400204a0
 800468c:	400204b8 	.word	0x400204b8
 8004690:	58025408 	.word	0x58025408
 8004694:	5802541c 	.word	0x5802541c
 8004698:	58025430 	.word	0x58025430
 800469c:	58025444 	.word	0x58025444
 80046a0:	58025458 	.word	0x58025458
 80046a4:	5802546c 	.word	0x5802546c
 80046a8:	58025480 	.word	0x58025480
 80046ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d160      	bne.n	800477c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7f      	ldr	r2, [pc, #508]	@ (80048bc <HAL_DMA_IRQHandler+0xc74>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7d      	ldr	r2, [pc, #500]	@ (80048c0 <HAL_DMA_IRQHandler+0xc78>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7c      	ldr	r2, [pc, #496]	@ (80048c4 <HAL_DMA_IRQHandler+0xc7c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7a      	ldr	r2, [pc, #488]	@ (80048c8 <HAL_DMA_IRQHandler+0xc80>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a79      	ldr	r2, [pc, #484]	@ (80048cc <HAL_DMA_IRQHandler+0xc84>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a77      	ldr	r2, [pc, #476]	@ (80048d0 <HAL_DMA_IRQHandler+0xc88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a76      	ldr	r2, [pc, #472]	@ (80048d4 <HAL_DMA_IRQHandler+0xc8c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a74      	ldr	r2, [pc, #464]	@ (80048d8 <HAL_DMA_IRQHandler+0xc90>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a73      	ldr	r2, [pc, #460]	@ (80048dc <HAL_DMA_IRQHandler+0xc94>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a71      	ldr	r2, [pc, #452]	@ (80048e0 <HAL_DMA_IRQHandler+0xc98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a70      	ldr	r2, [pc, #448]	@ (80048e4 <HAL_DMA_IRQHandler+0xc9c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6e      	ldr	r2, [pc, #440]	@ (80048e8 <HAL_DMA_IRQHandler+0xca0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6d      	ldr	r2, [pc, #436]	@ (80048ec <HAL_DMA_IRQHandler+0xca4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6b      	ldr	r2, [pc, #428]	@ (80048f0 <HAL_DMA_IRQHandler+0xca8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6a      	ldr	r2, [pc, #424]	@ (80048f4 <HAL_DMA_IRQHandler+0xcac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	@ (80048f8 <HAL_DMA_IRQHandler+0xcb0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <HAL_DMA_IRQHandler+0xb24>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0208 	bic.w	r2, r2, #8
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <HAL_DMA_IRQHandler+0xb34>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8165 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800478e:	e15f      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2202      	movs	r2, #2
 800479a:	409a      	lsls	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80c5 	beq.w	8004930 <HAL_DMA_IRQHandler+0xce8>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80bf 	beq.w	8004930 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2202      	movs	r2, #2
 80047bc:	409a      	lsls	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 813a 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e8:	e134      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8130 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047fc:	e12a      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8089 	bne.w	800491c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2b      	ldr	r2, [pc, #172]	@ (80048bc <HAL_DMA_IRQHandler+0xc74>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04a      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_DMA_IRQHandler+0xc78>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d045      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_DMA_IRQHandler+0xc7c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d040      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a26      	ldr	r2, [pc, #152]	@ (80048c8 <HAL_DMA_IRQHandler+0xc80>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d03b      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_DMA_IRQHandler+0xc84>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d036      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <HAL_DMA_IRQHandler+0xc88>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d031      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_DMA_IRQHandler+0xc8c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d02c      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <HAL_DMA_IRQHandler+0xc90>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d027      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_DMA_IRQHandler+0xc94>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_DMA_IRQHandler+0xc98>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01d      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <HAL_DMA_IRQHandler+0xc9c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_DMA_IRQHandler+0xca0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_DMA_IRQHandler+0xca4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_DMA_IRQHandler+0xca8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a16      	ldr	r2, [pc, #88]	@ (80048f4 <HAL_DMA_IRQHandler+0xcac>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <HAL_DMA_IRQHandler+0xcb0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d128      	bne.n	80048fc <HAL_DMA_IRQHandler+0xcb4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0214 	bic.w	r2, r2, #20
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e027      	b.n	800490c <HAL_DMA_IRQHandler+0xcc4>
 80048bc:	40020010 	.word	0x40020010
 80048c0:	40020028 	.word	0x40020028
 80048c4:	40020040 	.word	0x40020040
 80048c8:	40020058 	.word	0x40020058
 80048cc:	40020070 	.word	0x40020070
 80048d0:	40020088 	.word	0x40020088
 80048d4:	400200a0 	.word	0x400200a0
 80048d8:	400200b8 	.word	0x400200b8
 80048dc:	40020410 	.word	0x40020410
 80048e0:	40020428 	.word	0x40020428
 80048e4:	40020440 	.word	0x40020440
 80048e8:	40020458 	.word	0x40020458
 80048ec:	40020470 	.word	0x40020470
 80048f0:	40020488 	.word	0x40020488
 80048f4:	400204a0 	.word	0x400204a0
 80048f8:	400204b8 	.word	0x400204b8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 020a 	bic.w	r2, r2, #10
 800490a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492e:	e091      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8088 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8082 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a41      	ldr	r2, [pc, #260]	@ (8004a5c <HAL_DMA_IRQHandler+0xe14>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04a      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3f      	ldr	r2, [pc, #252]	@ (8004a60 <HAL_DMA_IRQHandler+0xe18>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d045      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a64 <HAL_DMA_IRQHandler+0xe1c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d040      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3c      	ldr	r2, [pc, #240]	@ (8004a68 <HAL_DMA_IRQHandler+0xe20>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d03b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a6c <HAL_DMA_IRQHandler+0xe24>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d036      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <HAL_DMA_IRQHandler+0xe28>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a38      	ldr	r2, [pc, #224]	@ (8004a74 <HAL_DMA_IRQHandler+0xe2c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d02c      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a36      	ldr	r2, [pc, #216]	@ (8004a78 <HAL_DMA_IRQHandler+0xe30>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d027      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <HAL_DMA_IRQHandler+0xe34>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <HAL_DMA_IRQHandler+0xe38>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <HAL_DMA_IRQHandler+0xe3c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	@ (8004a88 <HAL_DMA_IRQHandler+0xe40>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <HAL_DMA_IRQHandler+0xe44>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a90 <HAL_DMA_IRQHandler+0xe48>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a94 <HAL_DMA_IRQHandler+0xe4c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <HAL_DMA_IRQHandler+0xe50>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xdbc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 021c 	bic.w	r2, r2, #28
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_DMA_IRQHandler+0xdcc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 020e 	bic.w	r2, r2, #14
 8004a12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
 8004a4a:	e004      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a4c:	bf00      	nop
 8004a4e:	e002      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a50:	bf00      	nop
 8004a52:	e000      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a56:	3728      	adds	r7, #40	@ 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40020010 	.word	0x40020010
 8004a60:	40020028 	.word	0x40020028
 8004a64:	40020040 	.word	0x40020040
 8004a68:	40020058 	.word	0x40020058
 8004a6c:	40020070 	.word	0x40020070
 8004a70:	40020088 	.word	0x40020088
 8004a74:	400200a0 	.word	0x400200a0
 8004a78:	400200b8 	.word	0x400200b8
 8004a7c:	40020410 	.word	0x40020410
 8004a80:	40020428 	.word	0x40020428
 8004a84:	40020440 	.word	0x40020440
 8004a88:	40020458 	.word	0x40020458
 8004a8c:	40020470 	.word	0x40020470
 8004a90:	40020488 	.word	0x40020488
 8004a94:	400204a0 	.word	0x400204a0
 8004a98:	400204b8 	.word	0x400204b8

08004a9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a42      	ldr	r2, [pc, #264]	@ (8004bd0 <DMA_CalcBaseAndBitshift+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a41      	ldr	r2, [pc, #260]	@ (8004bd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bd8 <DMA_CalcBaseAndBitshift+0x120>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bdc <DMA_CalcBaseAndBitshift+0x124>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3c      	ldr	r2, [pc, #240]	@ (8004be0 <DMA_CalcBaseAndBitshift+0x128>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	@ (8004be4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a39      	ldr	r2, [pc, #228]	@ (8004be8 <DMA_CalcBaseAndBitshift+0x130>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a38      	ldr	r2, [pc, #224]	@ (8004bec <DMA_CalcBaseAndBitshift+0x134>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a36      	ldr	r2, [pc, #216]	@ (8004bf0 <DMA_CalcBaseAndBitshift+0x138>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a35      	ldr	r2, [pc, #212]	@ (8004bf4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a33      	ldr	r2, [pc, #204]	@ (8004bf8 <DMA_CalcBaseAndBitshift+0x140>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a32      	ldr	r2, [pc, #200]	@ (8004bfc <DMA_CalcBaseAndBitshift+0x144>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	@ (8004c00 <DMA_CalcBaseAndBitshift+0x148>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2d      	ldr	r2, [pc, #180]	@ (8004c08 <DMA_CalcBaseAndBitshift+0x150>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <DMA_CalcBaseAndBitshift+0xa8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <DMA_CalcBaseAndBitshift+0x154>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <DMA_CalcBaseAndBitshift+0xac>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <DMA_CalcBaseAndBitshift+0xae>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3b10      	subs	r3, #16
 8004b72:	4a27      	ldr	r2, [pc, #156]	@ (8004c10 <DMA_CalcBaseAndBitshift+0x158>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d908      	bls.n	8004ba4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <DMA_CalcBaseAndBitshift+0x160>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ba2:	e00d      	b.n	8004bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <DMA_CalcBaseAndBitshift+0x160>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb2:	e005      	b.n	8004bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40020010 	.word	0x40020010
 8004bd4:	40020028 	.word	0x40020028
 8004bd8:	40020040 	.word	0x40020040
 8004bdc:	40020058 	.word	0x40020058
 8004be0:	40020070 	.word	0x40020070
 8004be4:	40020088 	.word	0x40020088
 8004be8:	400200a0 	.word	0x400200a0
 8004bec:	400200b8 	.word	0x400200b8
 8004bf0:	40020410 	.word	0x40020410
 8004bf4:	40020428 	.word	0x40020428
 8004bf8:	40020440 	.word	0x40020440
 8004bfc:	40020458 	.word	0x40020458
 8004c00:	40020470 	.word	0x40020470
 8004c04:	40020488 	.word	0x40020488
 8004c08:	400204a0 	.word	0x400204a0
 8004c0c:	400204b8 	.word	0x400204b8
 8004c10:	aaaaaaab 	.word	0xaaaaaaab
 8004c14:	0801a5cc 	.word	0x0801a5cc
 8004c18:	fffffc00 	.word	0xfffffc00

08004c1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d120      	bne.n	8004c72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d858      	bhi.n	8004cea <DMA_CheckFifoParam+0xce>
 8004c38:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <DMA_CheckFifoParam+0x24>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c63 	.word	0x08004c63
 8004c48:	08004c51 	.word	0x08004c51
 8004c4c:	08004ceb 	.word	0x08004ceb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d048      	beq.n	8004cee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c60:	e045      	b.n	8004cee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c6a:	d142      	bne.n	8004cf2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c70:	e03f      	b.n	8004cf2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7a:	d123      	bne.n	8004cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d838      	bhi.n	8004cf6 <DMA_CheckFifoParam+0xda>
 8004c84:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <DMA_CheckFifoParam+0x70>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004ca3 	.word	0x08004ca3
 8004c94:	08004c9d 	.word	0x08004c9d
 8004c98:	08004cb5 	.word	0x08004cb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004ca0:	e030      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d025      	beq.n	8004cfa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb2:	e022      	b.n	8004cfa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cbc:	d11f      	bne.n	8004cfe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cc2:	e01c      	b.n	8004cfe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d902      	bls.n	8004cd2 <DMA_CheckFifoParam+0xb6>
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d003      	beq.n	8004cd8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cd0:	e018      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004cd6:	e015      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00e      	beq.n	8004d02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ce8:	e00b      	b.n	8004d02 <DMA_CheckFifoParam+0xe6>
        break;
 8004cea:	bf00      	nop
 8004cec:	e00a      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e008      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e006      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e004      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <DMA_CheckFifoParam+0xe8>
    break;
 8004d02:	bf00      	nop
    }
  }

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop

08004d14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a38      	ldr	r2, [pc, #224]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a36      	ldr	r2, [pc, #216]	@ (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01d      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a35      	ldr	r2, [pc, #212]	@ (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a33      	ldr	r2, [pc, #204]	@ (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a32      	ldr	r2, [pc, #200]	@ (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a30      	ldr	r2, [pc, #192]	@ (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	3b08      	subs	r3, #8
 8004d84:	4a28      	ldr	r2, [pc, #160]	@ (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4b26      	ldr	r3, [pc, #152]	@ (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004db0:	e024      	b.n	8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3b10      	subs	r3, #16
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d806      	bhi.n	8004dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d902      	bls.n	8004dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4b18      	ldr	r3, [pc, #96]	@ (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a16      	ldr	r2, [pc, #88]	@ (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004dec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2201      	movs	r2, #1
 8004df6:	409a      	lsls	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	58025408 	.word	0x58025408
 8004e0c:	5802541c 	.word	0x5802541c
 8004e10:	58025430 	.word	0x58025430
 8004e14:	58025444 	.word	0x58025444
 8004e18:	58025458 	.word	0x58025458
 8004e1c:	5802546c 	.word	0x5802546c
 8004e20:	58025480 	.word	0x58025480
 8004e24:	58025494 	.word	0x58025494
 8004e28:	cccccccd 	.word	0xcccccccd
 8004e2c:	16009600 	.word	0x16009600
 8004e30:	58025880 	.word	0x58025880
 8004e34:	aaaaaaab 	.word	0xaaaaaaab
 8004e38:	400204b8 	.word	0x400204b8
 8004e3c:	4002040f 	.word	0x4002040f
 8004e40:	10008200 	.word	0x10008200
 8004e44:	40020880 	.word	0x40020880

08004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d04a      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d847      	bhi.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a25      	ldr	r2, [pc, #148]	@ (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a24      	ldr	r2, [pc, #144]	@ (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ed0:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ed2:	e009      	b.n	8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ee6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	2201      	movs	r2, #1
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	58025408 	.word	0x58025408
 8004f04:	5802541c 	.word	0x5802541c
 8004f08:	58025430 	.word	0x58025430
 8004f0c:	58025444 	.word	0x58025444
 8004f10:	58025458 	.word	0x58025458
 8004f14:	5802546c 	.word	0x5802546c
 8004f18:	58025480 	.word	0x58025480
 8004f1c:	58025494 	.word	0x58025494
 8004f20:	1600963f 	.word	0x1600963f
 8004f24:	58025940 	.word	0x58025940
 8004f28:	1000823f 	.word	0x1000823f
 8004f2c:	40020940 	.word	0x40020940

08004f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	@ 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f3e:	4b89      	ldr	r3, [pc, #548]	@ (8005164 <HAL_GPIO_Init+0x234>)
 8004f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f42:	e194      	b.n	800526e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8186 	beq.w	8005268 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d005      	beq.n	8004f74 <HAL_GPIO_Init+0x44>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d130      	bne.n	8004fd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004faa:	2201      	movs	r2, #1
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 0201 	and.w	r2, r3, #1
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d017      	beq.n	8005012 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d123      	bne.n	8005066 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	08da      	lsrs	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3208      	adds	r2, #8
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80e0 	beq.w	8005268 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_GPIO_Init+0x238>)
 80050aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_GPIO_Init+0x238>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_GPIO_Init+0x238>)
 80050ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c6:	4a29      	ldr	r2, [pc, #164]	@ (800516c <HAL_GPIO_Init+0x23c>)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	3302      	adds	r3, #2
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <HAL_GPIO_Init+0x240>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d052      	beq.n	8005198 <HAL_GPIO_Init+0x268>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <HAL_GPIO_Init+0x244>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_GPIO_Init+0x22e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <HAL_GPIO_Init+0x248>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02b      	beq.n	800515a <HAL_GPIO_Init+0x22a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <HAL_GPIO_Init+0x24c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d025      	beq.n	8005156 <HAL_GPIO_Init+0x226>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <HAL_GPIO_Init+0x250>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <HAL_GPIO_Init+0x222>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_GPIO_Init+0x254>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d019      	beq.n	800514e <HAL_GPIO_Init+0x21e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <HAL_GPIO_Init+0x258>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_GPIO_Init+0x21a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_GPIO_Init+0x25c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00d      	beq.n	8005146 <HAL_GPIO_Init+0x216>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_GPIO_Init+0x260>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <HAL_GPIO_Init+0x212>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_GPIO_Init+0x264>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_GPIO_Init+0x20e>
 800513a:	2309      	movs	r3, #9
 800513c:	e02d      	b.n	800519a <HAL_GPIO_Init+0x26a>
 800513e:	230a      	movs	r3, #10
 8005140:	e02b      	b.n	800519a <HAL_GPIO_Init+0x26a>
 8005142:	2308      	movs	r3, #8
 8005144:	e029      	b.n	800519a <HAL_GPIO_Init+0x26a>
 8005146:	2307      	movs	r3, #7
 8005148:	e027      	b.n	800519a <HAL_GPIO_Init+0x26a>
 800514a:	2306      	movs	r3, #6
 800514c:	e025      	b.n	800519a <HAL_GPIO_Init+0x26a>
 800514e:	2305      	movs	r3, #5
 8005150:	e023      	b.n	800519a <HAL_GPIO_Init+0x26a>
 8005152:	2304      	movs	r3, #4
 8005154:	e021      	b.n	800519a <HAL_GPIO_Init+0x26a>
 8005156:	2303      	movs	r3, #3
 8005158:	e01f      	b.n	800519a <HAL_GPIO_Init+0x26a>
 800515a:	2302      	movs	r3, #2
 800515c:	e01d      	b.n	800519a <HAL_GPIO_Init+0x26a>
 800515e:	2301      	movs	r3, #1
 8005160:	e01b      	b.n	800519a <HAL_GPIO_Init+0x26a>
 8005162:	bf00      	nop
 8005164:	58000080 	.word	0x58000080
 8005168:	58024400 	.word	0x58024400
 800516c:	58000400 	.word	0x58000400
 8005170:	58020000 	.word	0x58020000
 8005174:	58020400 	.word	0x58020400
 8005178:	58020800 	.word	0x58020800
 800517c:	58020c00 	.word	0x58020c00
 8005180:	58021000 	.word	0x58021000
 8005184:	58021400 	.word	0x58021400
 8005188:	58021800 	.word	0x58021800
 800518c:	58021c00 	.word	0x58021c00
 8005190:	58022000 	.word	0x58022000
 8005194:	58022400 	.word	0x58022400
 8005198:	2300      	movs	r3, #0
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	f002 0203 	and.w	r2, r2, #3
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	4093      	lsls	r3, r2
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051aa:	4938      	ldr	r1, [pc, #224]	@ (800528c <HAL_GPIO_Init+0x35c>)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3302      	adds	r3, #2
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	43db      	mvns	r3, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3301      	adds	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f ae63 	bne.w	8004f44 <HAL_GPIO_Init+0x14>
  }
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	3724      	adds	r7, #36	@ 0x24
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	58000400 	.word	0x58000400

08005290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
 800529c:	4613      	mov	r3, r2
 800529e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a0:	787b      	ldrb	r3, [r7, #1]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052a6:	887a      	ldrh	r2, [r7, #2]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052ac:	e003      	b.n	80052b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	041a      	lsls	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	619a      	str	r2, [r3, #24]
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e08b      	b.n	80053ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fb5a 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	@ 0x24
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005314:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005324:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e006      	b.n	800534c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800534a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d108      	bne.n	8005366 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e007      	b.n	8005376 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <HAL_I2C_Init+0x134>)
 8005382:	430b      	orrs	r3, r1
 8005384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	02008000 	.word	0x02008000

080053fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	4603      	mov	r3, r0
 800540c:	817b      	strh	r3, [r7, #10]
 800540e:	460b      	mov	r3, r1
 8005410:	813b      	strh	r3, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	f040 80f9 	bne.w	8005616 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_I2C_Mem_Write+0x34>
 800542a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0ed      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_I2C_Mem_Write+0x4e>
 8005446:	2302      	movs	r3, #2
 8005448:	e0e6      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005452:	f7fd f9a5 	bl	80027a0 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2319      	movs	r3, #25
 800545e:	2201      	movs	r2, #1
 8005460:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 ffc0 	bl	80063ea <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0d1      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2221      	movs	r2, #33	@ 0x21
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2240      	movs	r2, #64	@ 0x40
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005494:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800549c:	88f8      	ldrh	r0, [r7, #6]
 800549e:	893a      	ldrh	r2, [r7, #8]
 80054a0:	8979      	ldrh	r1, [r7, #10]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4603      	mov	r3, r0
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fa67 	bl	8005980 <I2C_RequestMemoryWrite>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0a9      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2bff      	cmp	r3, #255	@ 0xff
 80054cc:	d90e      	bls.n	80054ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	22ff      	movs	r2, #255	@ 0xff
 80054d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	8979      	ldrh	r1, [r7, #10]
 80054dc:	2300      	movs	r3, #0
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f001 f943 	bl	8006770 <I2C_TransferConfig>
 80054ea:	e00f      	b.n	800550c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	8979      	ldrh	r1, [r7, #10]
 80054fe:	2300      	movs	r3, #0
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 f932 	bl	8006770 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 ffc3 	bl	800649c <I2C_WaitOnTXISFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e07b      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d034      	beq.n	80055c4 <HAL_I2C_Mem_Write+0x1c8>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d130      	bne.n	80055c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	2200      	movs	r2, #0
 800556a:	2180      	movs	r1, #128	@ 0x80
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 ff3c 	bl	80063ea <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e04d      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2bff      	cmp	r3, #255	@ 0xff
 8005584:	d90e      	bls.n	80055a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	22ff      	movs	r2, #255	@ 0xff
 800558a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005590:	b2da      	uxtb	r2, r3
 8005592:	8979      	ldrh	r1, [r7, #10]
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f001 f8e7 	bl	8006770 <I2C_TransferConfig>
 80055a2:	e00f      	b.n	80055c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	8979      	ldrh	r1, [r7, #10]
 80055b6:	2300      	movs	r3, #0
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 f8d6 	bl	8006770 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d19e      	bne.n	800550c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 ffa9 	bl	800652a <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e01a      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2220      	movs	r2, #32
 80055e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <HAL_I2C_Mem_Write+0x224>)
 80055f6:	400b      	ands	r3, r1
 80055f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	fe00e800 	.word	0xfe00e800

08005624 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
  }
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00f      	beq.n	800569a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005698:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00f      	beq.n	80056c4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0208 	orr.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00f      	beq.n	80056ee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	f043 0202 	orr.w	r2, r3, #2
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 030b 	and.w	r3, r3, #11
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fd19 	bl	8006138 <I2C_ITError>
  }
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
 8005742:	4613      	mov	r3, r2
 8005744:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <I2C_Slave_ISR_IT+0x24>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0e2      	b.n	8005978 <I2C_Slave_ISR_IT+0x1ea>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fa09 	bl	8005be8 <I2C_ITSlaveCplt>
 80057d6:	e0ca      	b.n	800596e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04b      	beq.n	800587a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d046      	beq.n	800587a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d128      	bne.n	8005848 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b28      	cmp	r3, #40	@ 0x28
 8005800:	d108      	bne.n	8005814 <I2C_Slave_ISR_IT+0x86>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005808:	d104      	bne.n	8005814 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fc3f 	bl	8006090 <I2C_ITListenCplt>
 8005812:	e031      	b.n	8005878 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b29      	cmp	r3, #41	@ 0x29
 800581e:	d10e      	bne.n	800583e <I2C_Slave_ISR_IT+0xb0>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005826:	d00a      	beq.n	800583e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fd98 	bl	8006366 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f97a 	bl	8005b30 <I2C_ITSlaveSeqCplt>
 800583c:	e01c      	b.n	8005878 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005846:	e08f      	b.n	8005968 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <I2C_Slave_ISR_IT+0xdc>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005868:	d17e      	bne.n	8005968 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fc61 	bl	8006138 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005876:	e077      	b.n	8005968 <I2C_Slave_ISR_IT+0x1da>
 8005878:	e076      	b.n	8005968 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02f      	beq.n	80058e4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800588a:	2b00      	cmp	r3, #0
 800588c:	d02a      	beq.n	80058e4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d018      	beq.n	80058ca <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d14b      	bne.n	800596c <I2C_Slave_ISR_IT+0x1de>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058da:	d047      	beq.n	800596c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f927 	bl	8005b30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80058e2:	e043      	b.n	800596c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80058f8:	6939      	ldr	r1, [r7, #16]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f894 	bl	8005a28 <I2C_ITAddrCplt>
 8005900:	e035      	b.n	800596e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d030      	beq.n	800596e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02b      	beq.n	800596e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d018      	beq.n	8005952 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005950:	e00d      	b.n	800596e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005958:	d002      	beq.n	8005960 <I2C_Slave_ISR_IT+0x1d2>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f8e5 	bl	8005b30 <I2C_ITSlaveSeqCplt>
 8005966:	e002      	b.n	800596e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800596c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	817b      	strh	r3, [r7, #10]
 8005992:	460b      	mov	r3, r1
 8005994:	813b      	strh	r3, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	b2da      	uxtb	r2, r3
 800599e:	8979      	ldrh	r1, [r7, #10]
 80059a0:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <I2C_RequestMemoryWrite+0xa4>)
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fee1 	bl	8006770 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fd72 	bl	800649c <I2C_WaitOnTXISFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e02c      	b.n	8005a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d105      	bne.n	80059d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80059d2:	e015      	b.n	8005a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059d4:	893b      	ldrh	r3, [r7, #8]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fd58 	bl	800649c <I2C_WaitOnTXISFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e012      	b.n	8005a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fced 	bl	80063ea <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	80002000 	.word	0x80002000

08005a28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a3e:	2b28      	cmp	r3, #40	@ 0x28
 8005a40:	d16a      	bne.n	8005b18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d138      	bne.n	8005af8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a86:	897b      	ldrh	r3, [r7, #10]
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	89bb      	ldrh	r3, [r7, #12]
 8005a8e:	4053      	eors	r3, r2
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f003 0306 	and.w	r3, r3, #6
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d11c      	bne.n	8005ad4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d13b      	bne.n	8005b28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2208      	movs	r2, #8
 8005abc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ac6:	89ba      	ldrh	r2, [r7, #12]
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fe32 	bl	8005736 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ad2:	e029      	b.n	8005b28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005ad4:	893b      	ldrh	r3, [r7, #8]
 8005ad6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fe79 	bl	80067d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aea:	89ba      	ldrh	r2, [r7, #12]
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe20 	bl	8005736 <HAL_I2C_AddrCallback>
}
 8005af6:	e017      	b.n	8005b28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fe69 	bl	80067d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b0a:	89ba      	ldrh	r2, [r7, #12]
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fe10 	bl	8005736 <HAL_I2C_AddrCallback>
}
 8005b16:	e007      	b.n	8005b28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e00c      	b.n	8005b7e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b29      	cmp	r3, #41	@ 0x29
 8005b88:	d112      	bne.n	8005bb0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2228      	movs	r2, #40	@ 0x28
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2221      	movs	r2, #33	@ 0x21
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b98:	2101      	movs	r1, #1
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fe1a 	bl	80067d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fdb0 	bl	800570e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bae:	e017      	b.n	8005be0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bba:	d111      	bne.n	8005be0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2228      	movs	r2, #40	@ 0x28
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2222      	movs	r2, #34	@ 0x22
 8005bc8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fe01 	bl	80067d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fda1 	bl	8005722 <HAL_I2C_SlaveRxCpltCallback>
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c02:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2220      	movs	r2, #32
 8005c12:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c14:	7afb      	ldrb	r3, [r7, #11]
 8005c16:	2b21      	cmp	r3, #33	@ 0x21
 8005c18:	d002      	beq.n	8005c20 <I2C_ITSlaveCplt+0x38>
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	2b29      	cmp	r3, #41	@ 0x29
 8005c1e:	d108      	bne.n	8005c32 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c20:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fdd5 	bl	80067d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2221      	movs	r2, #33	@ 0x21
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c30:	e019      	b.n	8005c66 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	2b22      	cmp	r3, #34	@ 0x22
 8005c36:	d002      	beq.n	8005c3e <I2C_ITSlaveCplt+0x56>
 8005c38:	7afb      	ldrb	r3, [r7, #11]
 8005c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3c:	d108      	bne.n	8005c50 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c3e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fdc6 	bl	80067d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2222      	movs	r2, #34	@ 0x22
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c4e:	e00a      	b.n	8005c66 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	2b28      	cmp	r3, #40	@ 0x28
 8005c54:	d107      	bne.n	8005c66 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c56:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fdba 	bl	80067d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c74:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b7f      	ldr	r3, [pc, #508]	@ (8005e80 <I2C_ITSlaveCplt+0x298>)
 8005c82:	400b      	ands	r3, r1
 8005c84:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb6d 	bl	8006366 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d07a      	beq.n	8005d8c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ca4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8111 	beq.w	8005ed2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a73      	ldr	r2, [pc, #460]	@ (8005e84 <I2C_ITSlaveCplt+0x29c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d059      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a71      	ldr	r2, [pc, #452]	@ (8005e88 <I2C_ITSlaveCplt+0x2a0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d053      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6f      	ldr	r2, [pc, #444]	@ (8005e8c <I2C_ITSlaveCplt+0x2a4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04d      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a6d      	ldr	r2, [pc, #436]	@ (8005e90 <I2C_ITSlaveCplt+0x2a8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d047      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e94 <I2C_ITSlaveCplt+0x2ac>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d041      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a69      	ldr	r2, [pc, #420]	@ (8005e98 <I2C_ITSlaveCplt+0x2b0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a67      	ldr	r2, [pc, #412]	@ (8005e9c <I2C_ITSlaveCplt+0x2b4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d035      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a65      	ldr	r2, [pc, #404]	@ (8005ea0 <I2C_ITSlaveCplt+0x2b8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02f      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a63      	ldr	r2, [pc, #396]	@ (8005ea4 <I2C_ITSlaveCplt+0x2bc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d029      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a61      	ldr	r2, [pc, #388]	@ (8005ea8 <I2C_ITSlaveCplt+0x2c0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d023      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8005eac <I2C_ITSlaveCplt+0x2c4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8005eb0 <I2C_ITSlaveCplt+0x2c8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d017      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a5b      	ldr	r2, [pc, #364]	@ (8005eb4 <I2C_ITSlaveCplt+0x2cc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d011      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a59      	ldr	r2, [pc, #356]	@ (8005eb8 <I2C_ITSlaveCplt+0x2d0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a57      	ldr	r2, [pc, #348]	@ (8005ebc <I2C_ITSlaveCplt+0x2d4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d005      	beq.n	8005d70 <I2C_ITSlaveCplt+0x188>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a55      	ldr	r2, [pc, #340]	@ (8005ec0 <I2C_ITSlaveCplt+0x2d8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d105      	bne.n	8005d7c <I2C_ITSlaveCplt+0x194>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	e004      	b.n	8005d86 <I2C_ITSlaveCplt+0x19e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005d8a:	e0a2      	b.n	8005ed2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 809d 	beq.w	8005ed2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005da6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8090 	beq.w	8005ed2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a32      	ldr	r2, [pc, #200]	@ (8005e84 <I2C_ITSlaveCplt+0x29c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d059      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	@ (8005e88 <I2C_ITSlaveCplt+0x2a0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d053      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e8c <I2C_ITSlaveCplt+0x2a4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04d      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <I2C_ITSlaveCplt+0x2a8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d047      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <I2C_ITSlaveCplt+0x2ac>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d041      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <I2C_ITSlaveCplt+0x2b0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a26      	ldr	r2, [pc, #152]	@ (8005e9c <I2C_ITSlaveCplt+0x2b4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d035      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a24      	ldr	r2, [pc, #144]	@ (8005ea0 <I2C_ITSlaveCplt+0x2b8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02f      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <I2C_ITSlaveCplt+0x2bc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d029      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <I2C_ITSlaveCplt+0x2c0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d023      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1e      	ldr	r2, [pc, #120]	@ (8005eac <I2C_ITSlaveCplt+0x2c4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <I2C_ITSlaveCplt+0x2c8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d017      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb4 <I2C_ITSlaveCplt+0x2cc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d011      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	@ (8005eb8 <I2C_ITSlaveCplt+0x2d0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a16      	ldr	r2, [pc, #88]	@ (8005ebc <I2C_ITSlaveCplt+0x2d4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d005      	beq.n	8005e72 <I2C_ITSlaveCplt+0x28a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ec0 <I2C_ITSlaveCplt+0x2d8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d128      	bne.n	8005ec4 <I2C_ITSlaveCplt+0x2dc>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	e027      	b.n	8005ece <I2C_ITSlaveCplt+0x2e6>
 8005e7e:	bf00      	nop
 8005e80:	fe00e800 	.word	0xfe00e800
 8005e84:	40020010 	.word	0x40020010
 8005e88:	40020028 	.word	0x40020028
 8005e8c:	40020040 	.word	0x40020040
 8005e90:	40020058 	.word	0x40020058
 8005e94:	40020070 	.word	0x40020070
 8005e98:	40020088 	.word	0x40020088
 8005e9c:	400200a0 	.word	0x400200a0
 8005ea0:	400200b8 	.word	0x400200b8
 8005ea4:	40020410 	.word	0x40020410
 8005ea8:	40020428 	.word	0x40020428
 8005eac:	40020440 	.word	0x40020440
 8005eb0:	40020458 	.word	0x40020458
 8005eb4:	40020470 	.word	0x40020470
 8005eb8:	40020488 	.word	0x40020488
 8005ebc:	400204a0 	.word	0x400204a0
 8005ec0:	400204b8 	.word	0x400204b8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0304 	bic.w	r3, r3, #4
 8005ee2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2c:	f043 0204 	orr.w	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d049      	beq.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d044      	beq.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d128      	bne.n	8005fa4 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b28      	cmp	r3, #40	@ 0x28
 8005f5c:	d108      	bne.n	8005f70 <I2C_ITSlaveCplt+0x388>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f64:	d104      	bne.n	8005f70 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f891 	bl	8006090 <I2C_ITListenCplt>
 8005f6e:	e030      	b.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b29      	cmp	r3, #41	@ 0x29
 8005f7a:	d10e      	bne.n	8005f9a <I2C_ITSlaveCplt+0x3b2>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f82:	d00a      	beq.n	8005f9a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2210      	movs	r2, #16
 8005f8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9ea 	bl	8006366 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fdcc 	bl	8005b30 <I2C_ITSlaveSeqCplt>
 8005f98:	e01b      	b.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	61da      	str	r2, [r3, #28]
 8005fa2:	e016      	b.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <I2C_ITSlaveCplt+0x3de>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fc4:	d105      	bne.n	8005fd2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8b3 	bl	8006138 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8a2 	bl	8006138 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b28      	cmp	r3, #40	@ 0x28
 8005ffe:	d141      	bne.n	8006084 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f844 	bl	8006090 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006008:	e03c      	b.n	8006084 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006012:	d014      	beq.n	800603e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fd8b 	bl	8005b30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1b      	ldr	r2, [pc, #108]	@ (800608c <I2C_ITSlaveCplt+0x4a4>)
 800601e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fb8b 	bl	8005752 <HAL_I2C_ListenCpltCallback>
}
 800603c:	e022      	b.n	8006084 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b22      	cmp	r3, #34	@ 0x22
 8006048:	d10e      	bne.n	8006068 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fb5e 	bl	8005722 <HAL_I2C_SlaveRxCpltCallback>
}
 8006066:	e00d      	b.n	8006084 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fb45 	bl	800570e <HAL_I2C_SlaveTxCpltCallback>
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	ffff0000 	.word	0xffff0000

08006090 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a25      	ldr	r2, [pc, #148]	@ (8006134 <I2C_ITListenCplt+0xa4>)
 800609e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d022      	beq.n	800610c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d012      	beq.n	800610c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	f043 0204 	orr.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800610c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb5f 	bl	80067d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2210      	movs	r2, #16
 800611c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fb13 	bl	8005752 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	ffff0000 	.word	0xffff0000

08006138 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006148:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a6d      	ldr	r2, [pc, #436]	@ (800630c <I2C_ITError+0x1d4>)
 8006156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	2b28      	cmp	r3, #40	@ 0x28
 800616e:	d005      	beq.n	800617c <I2C_ITError+0x44>
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b29      	cmp	r3, #41	@ 0x29
 8006174:	d002      	beq.n	800617c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	2b2a      	cmp	r3, #42	@ 0x2a
 800617a:	d10b      	bne.n	8006194 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800617c:	2103      	movs	r1, #3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fb28 	bl	80067d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2228      	movs	r2, #40	@ 0x28
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a60      	ldr	r2, [pc, #384]	@ (8006310 <I2C_ITError+0x1d8>)
 8006190:	635a      	str	r2, [r3, #52]	@ 0x34
 8006192:	e030      	b.n	80061f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006194:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fb1b 	bl	80067d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8e1 	bl	8006366 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b60      	cmp	r3, #96	@ 0x60
 80061ae:	d01f      	beq.n	80061f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d114      	bne.n	80061f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d109      	bne.n	80061e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2210      	movs	r2, #16
 80061da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	f043 0204 	orr.w	r2, r3, #4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2220      	movs	r2, #32
 80061ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d039      	beq.n	8006278 <I2C_ITError+0x140>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b11      	cmp	r3, #17
 8006208:	d002      	beq.n	8006210 <I2C_ITError+0xd8>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b21      	cmp	r3, #33	@ 0x21
 800620e:	d133      	bne.n	8006278 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800621e:	d107      	bne.n	8006230 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800622e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fc31 	bl	8004a9c <HAL_DMA_GetState>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d017      	beq.n	8006270 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	4a33      	ldr	r2, [pc, #204]	@ (8006314 <I2C_ITError+0x1dc>)
 8006246:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fab1 	bl	80037bc <HAL_DMA_Abort_IT>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d04d      	beq.n	80062fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800626a:	4610      	mov	r0, r2
 800626c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800626e:	e045      	b.n	80062fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f851 	bl	8006318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006276:	e041      	b.n	80062fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d039      	beq.n	80062f4 <I2C_ITError+0x1bc>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b12      	cmp	r3, #18
 8006284:	d002      	beq.n	800628c <I2C_ITError+0x154>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b22      	cmp	r3, #34	@ 0x22
 800628a:	d133      	bne.n	80062f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629a:	d107      	bne.n	80062ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fbf3 	bl	8004a9c <HAL_DMA_GetState>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d017      	beq.n	80062ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c0:	4a14      	ldr	r2, [pc, #80]	@ (8006314 <I2C_ITError+0x1dc>)
 80062c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fd fa73 	bl	80037bc <HAL_DMA_Abort_IT>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062e6:	4610      	mov	r0, r2
 80062e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ea:	e009      	b.n	8006300 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f813 	bl	8006318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062f2:	e005      	b.n	8006300 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f80f 	bl	8006318 <I2C_TreatErrorCallback>
  }
}
 80062fa:	e002      	b.n	8006302 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006300:	bf00      	nop
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	ffff0000 	.word	0xffff0000
 8006310:	0800578f 	.word	0x0800578f
 8006314:	080063af 	.word	0x080063af

08006318 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b60      	cmp	r3, #96	@ 0x60
 800632a:	d10e      	bne.n	800634a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fa19 	bl	800577a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006348:	e009      	b.n	800635e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fa04 	bl	8005766 <HAL_I2C_ErrorCallback>
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d103      	bne.n	8006384 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2200      	movs	r2, #0
 8006382:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d007      	beq.n	80063a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	619a      	str	r2, [r3, #24]
  }
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	2200      	movs	r2, #0
 80063ca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d8:	2200      	movs	r2, #0
 80063da:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff ff9b 	bl	8006318 <I2C_TreatErrorCallback>
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063fa:	e03b      	b.n	8006474 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f8d5 	bl	80065b0 <I2C_IsErrorOccurred>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e041      	b.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d02d      	beq.n	8006474 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006418:	f7fc f9c2 	bl	80027a0 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d302      	bcc.n	800642e <I2C_WaitOnFlagUntilTimeout+0x44>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d122      	bne.n	8006474 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d113      	bne.n	8006474 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e00f      	b.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	d0b4      	beq.n	80063fc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064a8:	e033      	b.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f87e 	bl	80065b0 <I2C_IsErrorOccurred>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e031      	b.n	8006522 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d025      	beq.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c6:	f7fc f96b 	bl	80027a0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d302      	bcc.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11a      	bne.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d013      	beq.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e007      	b.n	8006522 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b02      	cmp	r3, #2
 800651e:	d1c4      	bne.n	80064aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006536:	e02f      	b.n	8006598 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f837 	bl	80065b0 <I2C_IsErrorOccurred>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e02d      	b.n	80065a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654c:	f7fc f928 	bl	80027a0 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	d302      	bcc.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11a      	bne.n	8006598 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d013      	beq.n	8006598 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e007      	b.n	80065a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d1c8      	bne.n	8006538 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	@ 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d068      	beq.n	80066ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2210      	movs	r2, #16
 80065e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e4:	e049      	b.n	800667a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d045      	beq.n	800667a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ee:	f7fc f8d7 	bl	80027a0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <I2C_IsErrorOccurred+0x54>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d13a      	bne.n	800667a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800660e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006626:	d121      	bne.n	800666c <I2C_IsErrorOccurred+0xbc>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662e:	d01d      	beq.n	800666c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	2b20      	cmp	r3, #32
 8006634:	d01a      	beq.n	800666c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006646:	f7fc f8ab 	bl	80027a0 <HAL_GetTick>
 800664a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800664c:	e00e      	b.n	800666c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800664e:	f7fc f8a7 	bl	80027a0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b19      	cmp	r3, #25
 800665a:	d907      	bls.n	800666c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800666a:	e006      	b.n	800667a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d1e9      	bne.n	800664e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d003      	beq.n	8006690 <I2C_IsErrorOccurred+0xe0>
 8006688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0aa      	beq.n	80065e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2220      	movs	r2, #32
 800669e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	f043 0304 	orr.w	r3, r3, #4
 80066a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f043 0308 	orr.w	r3, r3, #8
 80066e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f043 0302 	orr.w	r3, r3, #2
 800670a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fe1e 	bl	8006366 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <I2C_IsErrorOccurred+0x1bc>)
 8006736:	400b      	ands	r3, r1
 8006738:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800675e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006762:	4618      	mov	r0, r3
 8006764:	3728      	adds	r7, #40	@ 0x28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	fe00e800 	.word	0xfe00e800

08006770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	4613      	mov	r3, r2
 8006780:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006788:	7a7b      	ldrb	r3, [r7, #9]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006790:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	4313      	orrs	r3, r2
 800679a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800679e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	0d5b      	lsrs	r3, r3, #21
 80067aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80067ae:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <I2C_TransferConfig+0x60>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	43db      	mvns	r3, r3
 80067b4:	ea02 0103 	and.w	r1, r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	03ff63ff 	.word	0x03ff63ff

080067d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00f      	beq.n	800680e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80067f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006802:	2b28      	cmp	r3, #40	@ 0x28
 8006804:	d003      	beq.n	800680e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800680c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00f      	beq.n	8006838 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800681e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800682c:	2b28      	cmp	r3, #40	@ 0x28
 800682e:	d003      	beq.n	8006838 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006836:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da03      	bge.n	8006848 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006846:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	2b10      	cmp	r3, #16
 800684c:	d103      	bne.n	8006856 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006854:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	2b20      	cmp	r3, #32
 800685a:	d103      	bne.n	8006864 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f043 0320 	orr.w	r3, r3, #32
 8006862:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d103      	bne.n	8006872 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006870:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6819      	ldr	r1, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	43da      	mvns	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	400a      	ands	r2, r1
 8006882:	601a      	str	r2, [r3, #0]
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d138      	bne.n	8006918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e032      	b.n	800691a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	@ 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b20      	cmp	r3, #32
 800693a:	d139      	bne.n	80069b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006946:	2302      	movs	r3, #2
 8006948:	e033      	b.n	80069b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2224      	movs	r2, #36	@ 0x24
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0201 	bic.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e000      	b.n	80069b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069b0:	2302      	movs	r3, #2
  }
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e0bf      	b.n	8006b52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb f8b2 	bl	8001b50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006a02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b4a      	ldr	r3, [pc, #296]	@ (8006b5c <HAL_LTDC_Init+0x19c>)
 8006a34:	400b      	ands	r3, r1
 8006a36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4b3e      	ldr	r3, [pc, #248]	@ (8006b5c <HAL_LTDC_Init+0x19c>)
 8006a62:	400b      	ands	r3, r1
 8006a64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68d9      	ldr	r1, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6919      	ldr	r1, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b33      	ldr	r3, [pc, #204]	@ (8006b5c <HAL_LTDC_Init+0x19c>)
 8006a90:	400b      	ands	r3, r1
 8006a92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6919      	ldr	r1, [r3, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6959      	ldr	r1, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <HAL_LTDC_Init+0x19c>)
 8006abe:	400b      	ands	r3, r1
 8006ac0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6959      	ldr	r1, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0206 	orr.w	r2, r2, #6
 8006b2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	f000f800 	.word	0xf000f800

08006b60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b60:	b5b0      	push	{r4, r5, r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_LTDC_ConfigLayer+0x1a>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e02c      	b.n	8006bd4 <HAL_LTDC_ConfigLayer+0x74>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2134      	movs	r1, #52	@ 0x34
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f877 	bl	8006ca8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bdb0      	pop	{r4, r5, r7, pc}

08006bdc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_LTDC_SetAddress+0x1a>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e024      	b.n	8006c40 <HAL_LTDC_SetAddress+0x64>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2234      	movs	r2, #52	@ 0x34
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	3338      	adds	r3, #56	@ 0x38
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f841 	bl	8006ca8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_LTDC_Reload+0x18>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e01c      	b.n	8006c9a <HAL_LTDC_Reload+0x52>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0208 	orr.w	r2, r2, #8
 8006c7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	@ 0x24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc4:	4413      	add	r3, r2
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	01db      	lsls	r3, r3, #7
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3384      	adds	r3, #132	@ 0x84
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	01d2      	lsls	r2, r2, #7
 8006ce4:	440a      	add	r2, r1
 8006ce6:	3284      	adds	r2, #132	@ 0x84
 8006ce8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006cec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006cfe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	01db      	lsls	r3, r3, #7
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3384      	adds	r3, #132	@ 0x84
 8006d10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006d16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d26:	4413      	add	r3, r2
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	01db      	lsls	r3, r3, #7
 8006d36:	4413      	add	r3, r2
 8006d38:	3384      	adds	r3, #132	@ 0x84
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	4611      	mov	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	01d2      	lsls	r2, r2, #7
 8006d46:	440a      	add	r2, r1
 8006d48:	3284      	adds	r2, #132	@ 0x84
 8006d4a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006d4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d5e:	4413      	add	r3, r2
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	01db      	lsls	r3, r3, #7
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3384      	adds	r3, #132	@ 0x84
 8006d70:	4619      	mov	r1, r3
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	4413      	add	r3, r2
 8006d84:	3384      	adds	r3, #132	@ 0x84
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	01d2      	lsls	r2, r2, #7
 8006d92:	440a      	add	r2, r1
 8006d94:	3284      	adds	r2, #132	@ 0x84
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	01db      	lsls	r3, r3, #7
 8006da6:	4413      	add	r3, r2
 8006da8:	3384      	adds	r3, #132	@ 0x84
 8006daa:	461a      	mov	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	061b      	lsls	r3, r3, #24
 8006dcc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	01db      	lsls	r3, r3, #7
 8006dd8:	4413      	add	r3, r2
 8006dda:	3384      	adds	r3, #132	@ 0x84
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	01db      	lsls	r3, r3, #7
 8006de8:	4413      	add	r3, r2
 8006dea:	3384      	adds	r3, #132	@ 0x84
 8006dec:	461a      	mov	r2, r3
 8006dee:	2300      	movs	r3, #0
 8006df0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006df8:	461a      	mov	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	01db      	lsls	r3, r3, #7
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3384      	adds	r3, #132	@ 0x84
 8006e10:	4619      	mov	r1, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	01db      	lsls	r3, r3, #7
 8006e22:	4413      	add	r3, r2
 8006e24:	3384      	adds	r3, #132	@ 0x84
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	01d2      	lsls	r2, r2, #7
 8006e32:	440a      	add	r2, r1
 8006e34:	3284      	adds	r2, #132	@ 0x84
 8006e36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	01db      	lsls	r3, r3, #7
 8006e46:	4413      	add	r3, r2
 8006e48:	3384      	adds	r3, #132	@ 0x84
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	01db      	lsls	r3, r3, #7
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3384      	adds	r3, #132	@ 0x84
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	01db      	lsls	r3, r3, #7
 8006e6c:	440b      	add	r3, r1
 8006e6e:	3384      	adds	r3, #132	@ 0x84
 8006e70:	4619      	mov	r1, r3
 8006e72:	4b58      	ldr	r3, [pc, #352]	@ (8006fd4 <LTDC_SetConfig+0x32c>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	6809      	ldr	r1, [r1, #0]
 8006e84:	4608      	mov	r0, r1
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	01c9      	lsls	r1, r1, #7
 8006e8a:	4401      	add	r1, r0
 8006e8c:	3184      	adds	r1, #132	@ 0x84
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	01db      	lsls	r3, r3, #7
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3384      	adds	r3, #132	@ 0x84
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	01db      	lsls	r3, r3, #7
 8006eac:	4413      	add	r3, r2
 8006eae:	3384      	adds	r3, #132	@ 0x84
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	01db      	lsls	r3, r3, #7
 8006ec0:	4413      	add	r3, r2
 8006ec2:	3384      	adds	r3, #132	@ 0x84
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e01b      	b.n	8006f12 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d102      	bne.n	8006ee8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e014      	b.n	8006f12 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d00b      	beq.n	8006f08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d007      	beq.n	8006f08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d003      	beq.n	8006f08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f04:	2b07      	cmp	r3, #7
 8006f06:	d102      	bne.n	8006f0e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e001      	b.n	8006f12 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	01db      	lsls	r3, r3, #7
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3384      	adds	r3, #132	@ 0x84
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	4611      	mov	r1, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	01d2      	lsls	r2, r2, #7
 8006f2c:	440a      	add	r2, r1
 8006f2e:	3284      	adds	r2, #132	@ 0x84
 8006f30:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6859      	ldr	r1, [r3, #4]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	1acb      	subs	r3, r1, r3
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006f54:	68f9      	ldr	r1, [r7, #12]
 8006f56:	6809      	ldr	r1, [r1, #0]
 8006f58:	4608      	mov	r0, r1
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	01c9      	lsls	r1, r1, #7
 8006f5e:	4401      	add	r1, r0
 8006f60:	3184      	adds	r1, #132	@ 0x84
 8006f62:	4313      	orrs	r3, r2
 8006f64:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	01db      	lsls	r3, r3, #7
 8006f70:	4413      	add	r3, r2
 8006f72:	3384      	adds	r3, #132	@ 0x84
 8006f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	01db      	lsls	r3, r3, #7
 8006f80:	440b      	add	r3, r1
 8006f82:	3384      	adds	r3, #132	@ 0x84
 8006f84:	4619      	mov	r1, r3
 8006f86:	4b14      	ldr	r3, [pc, #80]	@ (8006fd8 <LTDC_SetConfig+0x330>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	01db      	lsls	r3, r3, #7
 8006f96:	4413      	add	r3, r2
 8006f98:	3384      	adds	r3, #132	@ 0x84
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	01db      	lsls	r3, r3, #7
 8006fac:	4413      	add	r3, r2
 8006fae:	3384      	adds	r3, #132	@ 0x84
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	01d2      	lsls	r2, r2, #7
 8006fbc:	440a      	add	r2, r1
 8006fbe:	3284      	adds	r2, #132	@ 0x84
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	6013      	str	r3, [r2, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	3724      	adds	r7, #36	@ 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	fffff8f8 	.word	0xfffff8f8
 8006fd8:	fffff800 	.word	0xfffff800

08006fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0fe      	b.n	80071ec <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f00e ff58 	bl	8015eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2203      	movs	r2, #3
 800700c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f008 fd7c 	bl	800fb12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7c1a      	ldrb	r2, [r3, #16]
 8007022:	f88d 2000 	strb.w	r2, [sp]
 8007026:	3304      	adds	r3, #4
 8007028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800702a:	f008 fc4d 	bl	800f8c8 <USB_CoreInit>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0d5      	b.n	80071ec <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f008 fd74 	bl	800fb34 <USB_SetCurrentMode>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e0c6      	b.n	80071ec <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
 8007062:	e04a      	b.n	80070fa <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007064:	7bfa      	ldrb	r2, [r7, #15]
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	3315      	adds	r3, #21
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007078:	7bfa      	ldrb	r2, [r7, #15]
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	3314      	adds	r3, #20
 8007088:	7bfa      	ldrb	r2, [r7, #15]
 800708a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	b298      	uxth	r0, r3
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	332e      	adds	r3, #46	@ 0x2e
 80070a0:	4602      	mov	r2, r0
 80070a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070a4:	7bfa      	ldrb	r2, [r7, #15]
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	3318      	adds	r3, #24
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070b8:	7bfa      	ldrb	r2, [r7, #15]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	331c      	adds	r3, #28
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070cc:	7bfa      	ldrb	r2, [r7, #15]
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	3320      	adds	r3, #32
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070e0:	7bfa      	ldrb	r2, [r7, #15]
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	3324      	adds	r3, #36	@ 0x24
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	3301      	adds	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	791b      	ldrb	r3, [r3, #4]
 80070fe:	7bfa      	ldrb	r2, [r7, #15]
 8007100:	429a      	cmp	r2, r3
 8007102:	d3af      	bcc.n	8007064 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
 8007108:	e044      	b.n	8007194 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800710a:	7bfa      	ldrb	r2, [r7, #15]
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007136:	7bfa      	ldrb	r2, [r7, #15]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007162:	7bfa      	ldrb	r2, [r7, #15]
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	3301      	adds	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	429a      	cmp	r2, r3
 800719c:	d3b5      	bcc.n	800710a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7c1a      	ldrb	r2, [r3, #16]
 80071a6:	f88d 2000 	strb.w	r2, [sp]
 80071aa:	3304      	adds	r3, #4
 80071ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071ae:	f008 fd0d 	bl	800fbcc <USB_DevInit>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e013      	b.n	80071ec <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7b1b      	ldrb	r3, [r3, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d102      	bne.n	80071e0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f96c 	bl	80084b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f009 fd4c 	bl	8010c82 <USB_DevDisconnect>

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_PCD_Start+0x1c>
 800720c:	2302      	movs	r3, #2
 800720e:	e022      	b.n	8007256 <HAL_PCD_Start+0x62>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007228:	2b01      	cmp	r3, #1
 800722a:	d105      	bne.n	8007238 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f008 fc57 	bl	800faf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f009 fcfa 	bl	8010c40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800725e:	b590      	push	{r4, r7, lr}
 8007260:	b08d      	sub	sp, #52	@ 0x34
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f009 fdb8 	bl	8010dea <USB_GetMode>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	f040 84b9 	bne.w	8007bf4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f009 fd1c 	bl	8010cc4 <USB_ReadInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 84af 	beq.w	8007bf2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0a1b      	lsrs	r3, r3, #8
 800729e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f009 fd09 	bl	8010cc4 <USB_ReadInterrupts>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d107      	bne.n	80072cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f002 0202 	and.w	r2, r2, #2
 80072ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f009 fcf7 	bl	8010cc4 <USB_ReadInterrupts>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b10      	cmp	r3, #16
 80072de:	d161      	bne.n	80073a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0210 	bic.w	r2, r2, #16
 80072ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	3304      	adds	r3, #4
 800730e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	0c5b      	lsrs	r3, r3, #17
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2b02      	cmp	r3, #2
 800731a:	d124      	bne.n	8007366 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d035      	beq.n	8007394 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	6a38      	ldr	r0, [r7, #32]
 800733c:	f009 fb2e 	bl	801099c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800734c:	441a      	add	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	091b      	lsrs	r3, r3, #4
 800735a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800735e:	441a      	add	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	615a      	str	r2, [r3, #20]
 8007364:	e016      	b.n	8007394 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	0c5b      	lsrs	r3, r3, #17
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	2b06      	cmp	r3, #6
 8007370:	d110      	bne.n	8007394 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007378:	2208      	movs	r2, #8
 800737a:	4619      	mov	r1, r3
 800737c:	6a38      	ldr	r0, [r7, #32]
 800737e:	f009 fb0d 	bl	801099c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	695a      	ldr	r2, [r3, #20]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738e:	441a      	add	r2, r3
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0210 	orr.w	r2, r2, #16
 80073a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f009 fc8b 	bl	8010cc4 <USB_ReadInterrupts>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073b8:	f040 80a7 	bne.w	800750a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f009 fc90 	bl	8010cea <USB_ReadDevAllOutEpInterrupt>
 80073ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80073cc:	e099      	b.n	8007502 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 808e 	beq.w	80074f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f009 fcb4 	bl	8010d52 <USB_ReadDevOutEPInterrupt>
 80073ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007402:	461a      	mov	r2, r3
 8007404:	2301      	movs	r3, #1
 8007406:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007408:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fece 	bl	80081ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00c      	beq.n	8007434 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	461a      	mov	r2, r3
 8007428:	2308      	movs	r3, #8
 800742a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800742c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 ffa4 	bl	800837c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	461a      	mov	r2, r3
 800744c:	2310      	movs	r3, #16
 800744e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d030      	beq.n	80074bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	2b80      	cmp	r3, #128	@ 0x80
 8007464:	d109      	bne.n	800747a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007474:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007478:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800747a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747c:	4613      	mov	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4413      	add	r3, r2
 800748c:	3304      	adds	r3, #4
 800748e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d108      	bne.n	80074aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2200      	movs	r2, #0
 800749c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f00e fe3d 	bl	8016124 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	2302      	movs	r3, #2
 80074ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d008      	beq.n	80074d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d2:	461a      	mov	r2, r3
 80074d4:	2320      	movs	r3, #32
 80074d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80074f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	3301      	adds	r3, #1
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f af62 	bne.w	80073ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f009 fbd8 	bl	8010cc4 <USB_ReadInterrupts>
 8007514:	4603      	mov	r3, r0
 8007516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800751e:	f040 80db 	bne.w	80076d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f009 fbf9 	bl	8010d1e <USB_ReadDevAllInEpInterrupt>
 800752c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007532:	e0cd      	b.n	80076d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80c2 	beq.w	80076c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f009 fc1f 	bl	8010d8e <USB_ReadDevInEPInterrupt>
 8007550:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d057      	beq.n	800760c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	2201      	movs	r2, #1
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	43db      	mvns	r3, r3
 8007576:	69f9      	ldr	r1, [r7, #28]
 8007578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800757c:	4013      	ands	r3, r2
 800757e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758c:	461a      	mov	r2, r3
 800758e:	2301      	movs	r3, #1
 8007590:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	799b      	ldrb	r3, [r3, #6]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d132      	bne.n	8007600 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759e:	4613      	mov	r3, r2
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3320      	adds	r3, #32
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4403      	add	r3, r0
 80075ba:	331c      	adds	r3, #28
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4419      	add	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4403      	add	r3, r0
 80075ce:	3320      	adds	r3, #32
 80075d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d113      	bne.n	8007600 <HAL_PCD_IRQHandler+0x3a2>
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	3324      	adds	r3, #36	@ 0x24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075f8:	461a      	mov	r2, r3
 80075fa:	2101      	movs	r1, #1
 80075fc:	f009 fc28 	bl	8010e50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f00e fd07 	bl	801601a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007622:	461a      	mov	r2, r3
 8007624:	2308      	movs	r3, #8
 8007626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763e:	461a      	mov	r2, r3
 8007640:	2310      	movs	r3, #16
 8007642:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765a:	461a      	mov	r2, r3
 800765c:	2340      	movs	r3, #64	@ 0x40
 800765e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d023      	beq.n	80076b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800766a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800766c:	6a38      	ldr	r0, [r7, #32]
 800766e:	f008 fc0b 	bl	800fe88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	3310      	adds	r3, #16
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	3304      	adds	r3, #4
 8007684:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	78db      	ldrb	r3, [r3, #3]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d108      	bne.n	80076a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	b2db      	uxtb	r3, r3
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f00e fd54 	bl	8016148 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	461a      	mov	r2, r3
 80076ae:	2302      	movs	r3, #2
 80076b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80076bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fce8 	bl	8008094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	3301      	adds	r3, #1
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f47f af2e 	bne.w	8007534 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f009 faf1 	bl	8010cc4 <USB_ReadInterrupts>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ec:	d122      	bne.n	8007734 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007708:	2b01      	cmp	r3, #1
 800770a:	d108      	bne.n	800771e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fef2 	bl	8008500 <HAL_PCDEx_LPM_Callback>
 800771c:	e002      	b.n	8007724 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f00e fcf2 	bl	8016108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695a      	ldr	r2, [r3, #20]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f009 fac3 	bl	8010cc4 <USB_ReadInterrupts>
 800773e:	4603      	mov	r3, r0
 8007740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007748:	d112      	bne.n	8007770 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d102      	bne.n	8007760 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f00e fcae 	bl	80160bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800776e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f009 faa5 	bl	8010cc4 <USB_ReadInterrupts>
 800777a:	4603      	mov	r3, r0
 800777c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007784:	d121      	bne.n	80077ca <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007794:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800779c:	2b00      	cmp	r3, #0
 800779e:	d111      	bne.n	80077c4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ae:	089b      	lsrs	r3, r3, #2
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077ba:	2101      	movs	r1, #1
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fe9f 	bl	8008500 <HAL_PCDEx_LPM_Callback>
 80077c2:	e002      	b.n	80077ca <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f00e fc79 	bl	80160bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f009 fa78 	bl	8010cc4 <USB_ReadInterrupts>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077de:	f040 80b7 	bne.w	8007950 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2110      	movs	r1, #16
 80077fc:	4618      	mov	r0, r3
 80077fe:	f008 fb43 	bl	800fe88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007806:	e046      	b.n	8007896 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007814:	461a      	mov	r2, r3
 8007816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800781a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800781c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800783a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007848:	461a      	mov	r2, r3
 800784a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800784e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800786a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800786e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800788a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800788e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	3301      	adds	r3, #1
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	791b      	ldrb	r3, [r3, #4]
 800789a:	461a      	mov	r2, r3
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	4293      	cmp	r3, r2
 80078a0:	d3b2      	bcc.n	8007808 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80078b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7bdb      	ldrb	r3, [r3, #15]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d016      	beq.n	80078ec <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ce:	f043 030b 	orr.w	r3, r3, #11
 80078d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e4:	f043 030b 	orr.w	r3, r3, #11
 80078e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ea:	e015      	b.n	8007918 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fa:	4619      	mov	r1, r3
 80078fc:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007900:	4313      	orrs	r3, r2
 8007902:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007912:	f043 030b 	orr.w	r3, r3, #11
 8007916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800792a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800793a:	461a      	mov	r2, r3
 800793c:	f009 fa88 	bl	8010e50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800794e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f009 f9b5 	bl	8010cc4 <USB_ReadInterrupts>
 800795a:	4603      	mov	r3, r0
 800795c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007964:	d123      	bne.n	80079ae <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f009 fa4c 	bl	8010e08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f008 fb00 	bl	800ff7a <USB_GetDevSpeed>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681c      	ldr	r4, [r3, #0]
 8007986:	f001 fe55 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 800798a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007990:	461a      	mov	r2, r3
 8007992:	4620      	mov	r0, r4
 8007994:	f008 f80a 	bl	800f9ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f00e fb66 	bl	801606a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695a      	ldr	r2, [r3, #20]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80079ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f009 f986 	bl	8010cc4 <USB_ReadInterrupts>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d10a      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f00e fb43 	bl	801604e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f002 0208 	and.w	r2, r2, #8
 80079d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f009 f971 	bl	8010cc4 <USB_ReadInterrupts>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e8:	2b80      	cmp	r3, #128	@ 0x80
 80079ea:	d123      	bne.n	8007a34 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079f8:	2301      	movs	r3, #1
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fc:	e014      	b.n	8007a28 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a02:	4613      	mov	r3, r2
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d105      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fb08 	bl	8008032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	3301      	adds	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	791b      	ldrb	r3, [r3, #4]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d3e4      	bcc.n	80079fe <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f009 f943 	bl	8010cc4 <USB_ReadInterrupts>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a48:	d13c      	bne.n	8007ac4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a4e:	e02b      	b.n	8007aa8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3318      	adds	r3, #24
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d115      	bne.n	8007aa2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007a76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da12      	bge.n	8007aa2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	3317      	adds	r3, #23
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fac8 	bl	8008032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	791b      	ldrb	r3, [r3, #4]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d3cd      	bcc.n	8007a50 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f009 f8fb 	bl	8010cc4 <USB_ReadInterrupts>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ad8:	d156      	bne.n	8007b88 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ada:	2301      	movs	r3, #1
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ade:	e045      	b.n	8007b6c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d12e      	bne.n	8007b66 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da2b      	bge.n	8007b66 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007b1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d121      	bne.n	8007b66 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b26:	4613      	mov	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007b34:	2201      	movs	r2, #1
 8007b36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b62:	6053      	str	r3, [r2, #4]
            break;
 8007b64:	e008      	b.n	8007b78 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	3301      	adds	r3, #1
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	791b      	ldrb	r3, [r3, #4]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d3b3      	bcc.n	8007ae0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f009 f899 	bl	8010cc4 <USB_ReadInterrupts>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9c:	d10a      	bne.n	8007bb4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f00e fae4 	bl	801616c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f009 f883 	bl	8010cc4 <USB_ReadInterrupts>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d115      	bne.n	8007bf4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f00e fad4 	bl	8016188 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6859      	ldr	r1, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	e000      	b.n	8007bf4 <HAL_PCD_IRQHandler+0x996>
      return;
 8007bf2:	bf00      	nop
    }
  }
}
 8007bf4:	3734      	adds	r7, #52	@ 0x34
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd90      	pop	{r4, r7, pc}

08007bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_PCD_SetAddress+0x1a>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e012      	b.n	8007c3a <HAL_PCD_SetAddress+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f008 ffe2 	bl	8010bf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	70fb      	strb	r3, [r7, #3]
 8007c54:	460b      	mov	r3, r1
 8007c56:	803b      	strh	r3, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da0f      	bge.n	8007c88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 020f 	and.w	r2, r3, #15
 8007c6e:	4613      	mov	r3, r2
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	3310      	adds	r3, #16
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	705a      	strb	r2, [r3, #1]
 8007c86:	e00f      	b.n	8007ca8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	4613      	mov	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007cb4:	883a      	ldrh	r2, [r7, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	78ba      	ldrb	r2, [r7, #2]
 8007cbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007cd2:	78bb      	ldrb	r3, [r7, #2]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d102      	bne.n	8007cde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_PCD_EP_Open+0xaa>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e00e      	b.n	8007d0a <HAL_PCD_EP_Open+0xc8>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f008 f962 	bl	800ffc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da0f      	bge.n	8007d46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 020f 	and.w	r2, r3, #15
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	3310      	adds	r3, #16
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	705a      	strb	r2, [r3, #1]
 8007d44:	e00f      	b.n	8007d66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_PCD_EP_Close+0x6e>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e00e      	b.n	8007d9e <HAL_PCD_EP_Close+0x8c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f008 f9a0 	bl	80100d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	460b      	mov	r3, r1
 8007db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	f003 020f 	and.w	r2, r3, #15
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	3304      	adds	r3, #4
 8007dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2200      	movs	r2, #0
 8007de0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	799b      	ldrb	r3, [r3, #6]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d102      	bne.n	8007e02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	799b      	ldrb	r3, [r3, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6979      	ldr	r1, [r7, #20]
 8007e0e:	f008 fa3d 	bl	801028c <USB_EPStartXfer>

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 020f 	and.w	r2, r3, #15
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007e3e:	681b      	ldr	r3, [r3, #0]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	3310      	adds	r3, #16
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	799b      	ldrb	r3, [r3, #6]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d102      	bne.n	8007ea6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	799b      	ldrb	r3, [r3, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6979      	ldr	r1, [r7, #20]
 8007eb2:	f008 f9eb 	bl	801028c <USB_EPStartXfer>

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	7912      	ldrb	r2, [r2, #4]
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e04f      	b.n	8007f7e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da0f      	bge.n	8007f06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 020f 	and.w	r2, r3, #15
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3304      	adds	r3, #4
 8007efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	705a      	strb	r2, [r3, #1]
 8007f04:	e00d      	b.n	8007f22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_PCD_EP_SetStall+0x82>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e01d      	b.n	8007f7e <HAL_PCD_EP_SetStall+0xbe>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f008 fd7b 	bl	8010a4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7999      	ldrb	r1, [r3, #6]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f008 ff6e 	bl	8010e50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	7912      	ldrb	r2, [r2, #4]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e042      	b.n	800802a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0f      	bge.n	8007fcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	f003 020f 	and.w	r2, r3, #15
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3310      	adds	r3, #16
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	705a      	strb	r2, [r3, #1]
 8007fca:	e00f      	b.n	8007fec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 020f 	and.w	r2, r3, #15
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_PCD_EP_ClrStall+0x86>
 8008008:	2302      	movs	r3, #2
 800800a:	e00e      	b.n	800802a <HAL_PCD_EP_ClrStall+0xa4>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68f9      	ldr	r1, [r7, #12]
 800801a:	4618      	mov	r0, r3
 800801c:	f008 fd84 	bl	8010b28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800803e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008042:	2b00      	cmp	r3, #0
 8008044:	da0c      	bge.n	8008060 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	4613      	mov	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	3310      	adds	r3, #16
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	3304      	adds	r3, #4
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	e00c      	b.n	800807a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	4618      	mov	r0, r3
 8008082:	f008 fba3 	bl	80107cc <USB_EPStopXfer>
 8008086:	4603      	mov	r3, r0
 8008088:	72fb      	strb	r3, [r7, #11]

  return ret;
 800808a:	7afb      	ldrb	r3, [r7, #11]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	@ 0x28
 8008098:	af02      	add	r7, sp, #8
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	3310      	adds	r3, #16
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	3304      	adds	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d901      	bls.n	80080cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e06b      	b.n	80081a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d902      	bls.n	80080e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	3303      	adds	r3, #3
 80080ec:	089b      	lsrs	r3, r3, #2
 80080ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080f0:	e02a      	b.n	8008148 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	429a      	cmp	r2, r3
 8008106:	d902      	bls.n	800810e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3303      	adds	r3, #3
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68d9      	ldr	r1, [r3, #12]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4603      	mov	r3, r0
 800812a:	6978      	ldr	r0, [r7, #20]
 800812c:	f008 fbf8 	bl	8010920 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	695a      	ldr	r2, [r3, #20]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	441a      	add	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	429a      	cmp	r2, r3
 800815c:	d809      	bhi.n	8008172 <PCD_WriteEmptyTxFifo+0xde>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008166:	429a      	cmp	r2, r3
 8008168:	d203      	bcs.n	8008172 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1bf      	bne.n	80080f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	d811      	bhi.n	80081a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	2201      	movs	r2, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	43db      	mvns	r3, r3
 8008198:	6939      	ldr	r1, [r7, #16]
 800819a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800819e:	4013      	ands	r3, r2
 80081a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	333c      	adds	r3, #60	@ 0x3c
 80081c4:	3304      	adds	r3, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	799b      	ldrb	r3, [r3, #6]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d17b      	bne.n	80082da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4a61      	ldr	r2, [pc, #388]	@ (8008374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	f240 80b9 	bls.w	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80b3 	beq.w	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820e:	461a      	mov	r2, r3
 8008210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008214:	6093      	str	r3, [r2, #8]
 8008216:	e0a7      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	2320      	movs	r3, #32
 8008232:	6093      	str	r3, [r2, #8]
 8008234:	e098      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8093 	bne.w	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4a4b      	ldr	r2, [pc, #300]	@ (8008374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d90f      	bls.n	800826a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008260:	461a      	mov	r2, r3
 8008262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008266:	6093      	str	r3, [r2, #8]
 8008268:	e07e      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	4413      	add	r3, r2
 800827c:	3304      	adds	r3, #4
 800827e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	0159      	lsls	r1, r3, #5
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	440b      	add	r3, r1
 800828c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80082b4:	461a      	mov	r2, r3
 80082b6:	2101      	movs	r1, #1
 80082b8:	f008 fdca 	bl	8010e50 <USB_EP0_OutStart>
 80082bc:	e006      	b.n	80082cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	441a      	add	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f00d fe86 	bl	8015fe4 <HAL_PCD_DataOutStageCallback>
 80082d8:	e046      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	4a26      	ldr	r2, [pc, #152]	@ (8008378 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d124      	bne.n	800832c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f8:	461a      	mov	r2, r3
 80082fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082fe:	6093      	str	r3, [r2, #8]
 8008300:	e032      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008318:	461a      	mov	r2, r3
 800831a:	2320      	movs	r3, #32
 800831c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f00d fe5d 	bl	8015fe4 <HAL_PCD_DataOutStageCallback>
 800832a:	e01d      	b.n	8008368 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d114      	bne.n	800835c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d108      	bne.n	800835c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008354:	461a      	mov	r2, r3
 8008356:	2100      	movs	r1, #0
 8008358:	f008 fd7a 	bl	8010e50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f00d fe3e 	bl	8015fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	4f54300a 	.word	0x4f54300a
 8008378:	4f54310a 	.word	0x4f54310a

0800837c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	333c      	adds	r3, #60	@ 0x3c
 8008394:	3304      	adds	r3, #4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a15      	ldr	r2, [pc, #84]	@ (8008404 <PCD_EP_OutSetupPacket_int+0x88>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d90e      	bls.n	80083d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d009      	beq.n	80083d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c8:	461a      	mov	r2, r3
 80083ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f00d fdf5 	bl	8015fc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008404 <PCD_EP_OutSetupPacket_int+0x88>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d90c      	bls.n	80083f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	799b      	ldrb	r3, [r3, #6]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d108      	bne.n	80083f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083f0:	461a      	mov	r2, r3
 80083f2:	2101      	movs	r1, #1
 80083f4:	f008 fd2c 	bl	8010e50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	4f54300a 	.word	0x4f54300a

08008408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
 8008414:	4613      	mov	r3, r2
 8008416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008426:	883b      	ldrh	r3, [r7, #0]
 8008428:	0419      	lsls	r1, r3, #16
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	430a      	orrs	r2, r1
 8008432:	629a      	str	r2, [r3, #40]	@ 0x28
 8008434:	e028      	b.n	8008488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
 8008448:	e00d      	b.n	8008466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	3340      	adds	r3, #64	@ 0x40
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	0c1b      	lsrs	r3, r3, #16
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	3301      	adds	r3, #1
 8008464:	73fb      	strb	r3, [r7, #15]
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	3b01      	subs	r3, #1
 800846c:	429a      	cmp	r2, r3
 800846e:	d3ec      	bcc.n	800844a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008470:	883b      	ldrh	r3, [r7, #0]
 8008472:	0418      	lsls	r0, r3, #16
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6819      	ldr	r1, [r3, #0]
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	3b01      	subs	r3, #1
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	4302      	orrs	r2, r0
 8008480:	3340      	adds	r3, #64	@ 0x40
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	887a      	ldrh	r2, [r7, #2]
 80084a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084e6:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <HAL_PCDEx_ActivateLPM+0x44>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	10000003 	.word	0x10000003

08008500 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008520:	4b19      	ldr	r3, [pc, #100]	@ (8008588 <HAL_PWREx_ConfigSupply+0x70>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b04      	cmp	r3, #4
 800852a:	d00a      	beq.n	8008542 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800852c:	4b16      	ldr	r3, [pc, #88]	@ (8008588 <HAL_PWREx_ConfigSupply+0x70>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	429a      	cmp	r2, r3
 8008538:	d001      	beq.n	800853e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e01f      	b.n	800857e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	e01d      	b.n	800857e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008542:	4b11      	ldr	r3, [pc, #68]	@ (8008588 <HAL_PWREx_ConfigSupply+0x70>)
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f023 0207 	bic.w	r2, r3, #7
 800854a:	490f      	ldr	r1, [pc, #60]	@ (8008588 <HAL_PWREx_ConfigSupply+0x70>)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4313      	orrs	r3, r2
 8008550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008552:	f7fa f925 	bl	80027a0 <HAL_GetTick>
 8008556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008558:	e009      	b.n	800856e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800855a:	f7fa f921 	bl	80027a0 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008568:	d901      	bls.n	800856e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e007      	b.n	800857e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800856e:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <HAL_PWREx_ConfigSupply+0x70>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800857a:	d1ee      	bne.n	800855a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	58024800 	.word	0x58024800

0800858c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	4a04      	ldr	r2, [pc, #16]	@ (80085a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800859a:	60d3      	str	r3, [r2, #12]
}
 800859c:	bf00      	nop
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	58024800 	.word	0x58024800

080085ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80085b4:	f7fa f8f4 	bl	80027a0 <HAL_GetTick>
 80085b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e05f      	b.n	8008684 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f9 fbf9 	bl	8001dc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80085d6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f85a 	bl	8008694 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	021a      	lsls	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	2120      	movs	r1, #32
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f852 	bl	80086b0 <QSPI_WaitFlagStateUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d135      	bne.n	8008682 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4b1b      	ldr	r3, [pc, #108]	@ (800868c <HAL_QSPI_Init+0xe0>)
 800861e:	4013      	ands	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6852      	ldr	r2, [r2, #4]
 8008624:	0611      	lsls	r1, r2, #24
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	68d2      	ldr	r2, [r2, #12]
 800862a:	4311      	orrs	r1, r2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	69d2      	ldr	r2, [r2, #28]
 8008630:	4311      	orrs	r1, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6a12      	ldr	r2, [r2, #32]
 8008636:	4311      	orrs	r1, r2
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	430b      	orrs	r3, r1
 800863e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <HAL_QSPI_Init+0xe4>)
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6912      	ldr	r2, [r2, #16]
 800864e:	0411      	lsls	r1, r2, #16
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6952      	ldr	r2, [r2, #20]
 8008654:	4311      	orrs	r1, r2
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6992      	ldr	r2, [r2, #24]
 800865a:	4311      	orrs	r1, r2
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	430b      	orrs	r3, r1
 8008662:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008682:	7afb      	ldrb	r3, [r7, #11]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	00ffff2f 	.word	0x00ffff2f
 8008690:	ffe0f8fe 	.word	0xffe0f8fe

08008694 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80086c0:	e01a      	b.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d016      	beq.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ca:	f7fa f869 	bl	80027a0 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d302      	bcc.n	80086e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2204      	movs	r2, #4
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ec:	f043 0201 	orr.w	r2, r3, #1
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e00e      	b.n	8008716 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	429a      	cmp	r2, r3
 8008712:	d1d6      	bne.n	80086c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08c      	sub	sp, #48	@ 0x30
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	f000 bc48 	b.w	8008fc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 8088 	beq.w	8008852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008742:	4b99      	ldr	r3, [pc, #612]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800874a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800874c:	4b96      	ldr	r3, [pc, #600]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008754:	2b10      	cmp	r3, #16
 8008756:	d007      	beq.n	8008768 <HAL_RCC_OscConfig+0x48>
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	2b18      	cmp	r3, #24
 800875c:	d111      	bne.n	8008782 <HAL_RCC_OscConfig+0x62>
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d10c      	bne.n	8008782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008768:	4b8f      	ldr	r3, [pc, #572]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d06d      	beq.n	8008850 <HAL_RCC_OscConfig+0x130>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d169      	bne.n	8008850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f000 bc21 	b.w	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800878a:	d106      	bne.n	800879a <HAL_RCC_OscConfig+0x7a>
 800878c:	4b86      	ldr	r3, [pc, #536]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a85      	ldr	r2, [pc, #532]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e02e      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_RCC_OscConfig+0x9c>
 80087a2:	4b81      	ldr	r3, [pc, #516]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a80      	ldr	r2, [pc, #512]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	4b7e      	ldr	r3, [pc, #504]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a7d      	ldr	r2, [pc, #500]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e01d      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087c4:	d10c      	bne.n	80087e0 <HAL_RCC_OscConfig+0xc0>
 80087c6:	4b78      	ldr	r3, [pc, #480]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a77      	ldr	r2, [pc, #476]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b75      	ldr	r3, [pc, #468]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a74      	ldr	r2, [pc, #464]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	e00b      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 80087e0:	4b71      	ldr	r3, [pc, #452]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a70      	ldr	r2, [pc, #448]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b6e      	ldr	r3, [pc, #440]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a6d      	ldr	r2, [pc, #436]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d013      	beq.n	8008828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7f9 ffce 	bl	80027a0 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008808:	f7f9 ffca 	bl	80027a0 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	@ 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e3d4      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800881a:	4b63      	ldr	r3, [pc, #396]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0xe8>
 8008826:	e014      	b.n	8008852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7f9 ffba 	bl	80027a0 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008830:	f7f9 ffb6 	bl	80027a0 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	@ 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e3c0      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008842:	4b59      	ldr	r3, [pc, #356]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x110>
 800884e:	e000      	b.n	8008852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80ca 	beq.w	80089f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008860:	4b51      	ldr	r3, [pc, #324]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008868:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800886a:	4b4f      	ldr	r3, [pc, #316]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800886c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <HAL_RCC_OscConfig+0x166>
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	2b18      	cmp	r3, #24
 800887a:	d156      	bne.n	800892a <HAL_RCC_OscConfig+0x20a>
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d151      	bne.n	800892a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008886:	4b48      	ldr	r3, [pc, #288]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_RCC_OscConfig+0x17e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e392      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800889e:	4b42      	ldr	r3, [pc, #264]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f023 0219 	bic.w	r2, r3, #25
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	493f      	ldr	r1, [pc, #252]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b0:	f7f9 ff76 	bl	80027a0 <HAL_GetTick>
 80088b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b8:	f7f9 ff72 	bl	80027a0 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e37c      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ca:	4b37      	ldr	r3, [pc, #220]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0f0      	beq.n	80088b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d6:	f7f9 ff93 	bl	8002800 <HAL_GetREVID>
 80088da:	4603      	mov	r3, r0
 80088dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d817      	bhi.n	8008914 <HAL_RCC_OscConfig+0x1f4>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b40      	cmp	r3, #64	@ 0x40
 80088ea:	d108      	bne.n	80088fe <HAL_RCC_OscConfig+0x1de>
 80088ec:	4b2e      	ldr	r3, [pc, #184]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80088f4:	4a2c      	ldr	r2, [pc, #176]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80088f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088fc:	e07a      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088fe:	4b2a      	ldr	r3, [pc, #168]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	031b      	lsls	r3, r3, #12
 800890c:	4926      	ldr	r1, [pc, #152]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800890e:	4313      	orrs	r3, r2
 8008910:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008912:	e06f      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008914:	4b24      	ldr	r3, [pc, #144]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	4921      	ldr	r1, [pc, #132]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008924:	4313      	orrs	r3, r2
 8008926:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008928:	e064      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d047      	beq.n	80089c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008932:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f023 0219 	bic.w	r2, r3, #25
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	491a      	ldr	r1, [pc, #104]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008940:	4313      	orrs	r3, r2
 8008942:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7f9 ff2c 	bl	80027a0 <HAL_GetTick>
 8008948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800894c:	f7f9 ff28 	bl	80027a0 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e332      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800895e:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800896a:	f7f9 ff49 	bl	8002800 <HAL_GetREVID>
 800896e:	4603      	mov	r3, r0
 8008970:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008974:	4293      	cmp	r3, r2
 8008976:	d819      	bhi.n	80089ac <HAL_RCC_OscConfig+0x28c>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b40      	cmp	r3, #64	@ 0x40
 800897e:	d108      	bne.n	8008992 <HAL_RCC_OscConfig+0x272>
 8008980:	4b09      	ldr	r3, [pc, #36]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008988:	4a07      	ldr	r2, [pc, #28]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800898e:	6053      	str	r3, [r2, #4]
 8008990:	e030      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
 8008992:	4b05      	ldr	r3, [pc, #20]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	031b      	lsls	r3, r3, #12
 80089a0:	4901      	ldr	r1, [pc, #4]	@ (80089a8 <HAL_RCC_OscConfig+0x288>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	604b      	str	r3, [r1, #4]
 80089a6:	e025      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
 80089a8:	58024400 	.word	0x58024400
 80089ac:	4b9a      	ldr	r3, [pc, #616]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	4997      	ldr	r1, [pc, #604]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	e018      	b.n	80089f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089c2:	4b95      	ldr	r3, [pc, #596]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a94      	ldr	r2, [pc, #592]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7f9 fee7 	bl	80027a0 <HAL_GetTick>
 80089d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089d6:	f7f9 fee3 	bl	80027a0 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e2ed      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 80a9 	beq.w	8008b54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a02:	4b85      	ldr	r3, [pc, #532]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a0c:	4b82      	ldr	r3, [pc, #520]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d007      	beq.n	8008a28 <HAL_RCC_OscConfig+0x308>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b18      	cmp	r3, #24
 8008a1c:	d13a      	bne.n	8008a94 <HAL_RCC_OscConfig+0x374>
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d135      	bne.n	8008a94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a28:	4b7b      	ldr	r3, [pc, #492]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_RCC_OscConfig+0x320>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	2b80      	cmp	r3, #128	@ 0x80
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e2c1      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a40:	f7f9 fede 	bl	8002800 <HAL_GetREVID>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d817      	bhi.n	8008a7e <HAL_RCC_OscConfig+0x35e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d108      	bne.n	8008a68 <HAL_RCC_OscConfig+0x348>
 8008a56:	4b70      	ldr	r3, [pc, #448]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a66:	e075      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a68:	4b6b      	ldr	r3, [pc, #428]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	069b      	lsls	r3, r3, #26
 8008a76:	4968      	ldr	r1, [pc, #416]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a7c:	e06a      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a7e:	4b66      	ldr	r3, [pc, #408]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	4962      	ldr	r1, [pc, #392]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a92:	e05f      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d042      	beq.n	8008b22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7f9 fe7a 	bl	80027a0 <HAL_GetTick>
 8008aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ab0:	f7f9 fe76 	bl	80027a0 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e280      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ac2:	4b55      	ldr	r3, [pc, #340]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f0      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ace:	f7f9 fe97 	bl	8002800 <HAL_GetREVID>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d817      	bhi.n	8008b0c <HAL_RCC_OscConfig+0x3ec>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d108      	bne.n	8008af6 <HAL_RCC_OscConfig+0x3d6>
 8008ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008aec:	4a4a      	ldr	r2, [pc, #296]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008aee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008af2:	6053      	str	r3, [r2, #4]
 8008af4:	e02e      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
 8008af6:	4b48      	ldr	r3, [pc, #288]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	069b      	lsls	r3, r3, #26
 8008b04:	4944      	ldr	r1, [pc, #272]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	604b      	str	r3, [r1, #4]
 8008b0a:	e023      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
 8008b0c:	4b42      	ldr	r3, [pc, #264]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	493f      	ldr	r1, [pc, #252]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60cb      	str	r3, [r1, #12]
 8008b20:	e018      	b.n	8008b54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b22:	4b3d      	ldr	r3, [pc, #244]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a3c      	ldr	r2, [pc, #240]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7f9 fe37 	bl	80027a0 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b36:	f7f9 fe33 	bl	80027a0 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e23d      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b48:	4b33      	ldr	r3, [pc, #204]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d036      	beq.n	8008bce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d019      	beq.n	8008b9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b68:	4b2b      	ldr	r3, [pc, #172]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b74:	f7f9 fe14 	bl	80027a0 <HAL_GetTick>
 8008b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b7c:	f7f9 fe10 	bl	80027a0 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e21a      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b8e:	4b22      	ldr	r3, [pc, #136]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <HAL_RCC_OscConfig+0x45c>
 8008b9a:	e018      	b.n	8008bce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba8:	f7f9 fdfa 	bl	80027a0 <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bb0:	f7f9 fdf6 	bl	80027a0 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e200      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bc2:	4b15      	ldr	r3, [pc, #84]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d039      	beq.n	8008c4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01c      	beq.n	8008c1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008be2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a0c      	ldr	r2, [pc, #48]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008bec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bee:	f7f9 fdd7 	bl	80027a0 <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bf6:	f7f9 fdd3 	bl	80027a0 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e1dd      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c08:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <HAL_RCC_OscConfig+0x4f8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x4d6>
 8008c14:	e01b      	b.n	8008c4e <HAL_RCC_OscConfig+0x52e>
 8008c16:	bf00      	nop
 8008c18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a9a      	ldr	r2, [pc, #616]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c28:	f7f9 fdba 	bl	80027a0 <HAL_GetTick>
 8008c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c30:	f7f9 fdb6 	bl	80027a0 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e1c0      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c42:	4b92      	ldr	r3, [pc, #584]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8081 	beq.w	8008d5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8008e90 <HAL_RCC_OscConfig+0x770>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a8b      	ldr	r2, [pc, #556]	@ (8008e90 <HAL_RCC_OscConfig+0x770>)
 8008c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c68:	f7f9 fd9a 	bl	80027a0 <HAL_GetTick>
 8008c6c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c70:	f7f9 fd96 	bl	80027a0 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	@ 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1a0      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c82:	4b83      	ldr	r3, [pc, #524]	@ (8008e90 <HAL_RCC_OscConfig+0x770>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0f0      	beq.n	8008c70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d106      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x584>
 8008c96:	4b7d      	ldr	r3, [pc, #500]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ca2:	e02d      	b.n	8008d00 <HAL_RCC_OscConfig+0x5e0>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10c      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x5a6>
 8008cac:	4b77      	ldr	r3, [pc, #476]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb0:	4a76      	ldr	r2, [pc, #472]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cb2:	f023 0301 	bic.w	r3, r3, #1
 8008cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cb8:	4b74      	ldr	r3, [pc, #464]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cbc:	4a73      	ldr	r2, [pc, #460]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cbe:	f023 0304 	bic.w	r3, r3, #4
 8008cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cc4:	e01c      	b.n	8008d00 <HAL_RCC_OscConfig+0x5e0>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x5c8>
 8008cce:	4b6f      	ldr	r3, [pc, #444]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cd4:	f043 0304 	orr.w	r3, r3, #4
 8008cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cda:	4b6c      	ldr	r3, [pc, #432]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cde:	4a6b      	ldr	r2, [pc, #428]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ce6:	e00b      	b.n	8008d00 <HAL_RCC_OscConfig+0x5e0>
 8008ce8:	4b68      	ldr	r3, [pc, #416]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cec:	4a67      	ldr	r2, [pc, #412]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cf4:	4b65      	ldr	r3, [pc, #404]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf8:	4a64      	ldr	r2, [pc, #400]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	f023 0304 	bic.w	r3, r3, #4
 8008cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d015      	beq.n	8008d34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d08:	f7f9 fd4a 	bl	80027a0 <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d0e:	e00a      	b.n	8008d26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d10:	f7f9 fd46 	bl	80027a0 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e14e      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d26:	4b59      	ldr	r3, [pc, #356]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0ee      	beq.n	8008d10 <HAL_RCC_OscConfig+0x5f0>
 8008d32:	e014      	b.n	8008d5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d34:	f7f9 fd34 	bl	80027a0 <HAL_GetTick>
 8008d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d3a:	e00a      	b.n	8008d52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d3c:	f7f9 fd30 	bl	80027a0 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e138      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d52:	4b4e      	ldr	r3, [pc, #312]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1ee      	bne.n	8008d3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 812d 	beq.w	8008fc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d68:	4b48      	ldr	r3, [pc, #288]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d70:	2b18      	cmp	r3, #24
 8008d72:	f000 80bd 	beq.w	8008ef0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	f040 809e 	bne.w	8008ebc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d80:	4b42      	ldr	r3, [pc, #264]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a41      	ldr	r2, [pc, #260]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8c:	f7f9 fd08 	bl	80027a0 <HAL_GetTick>
 8008d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d94:	f7f9 fd04 	bl	80027a0 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e10e      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008da6:	4b39      	ldr	r3, [pc, #228]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f0      	bne.n	8008d94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008db2:	4b36      	ldr	r3, [pc, #216]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008db6:	4b37      	ldr	r3, [pc, #220]	@ (8008e94 <HAL_RCC_OscConfig+0x774>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008dc2:	0112      	lsls	r2, r2, #4
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	4931      	ldr	r1, [pc, #196]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	628b      	str	r3, [r1, #40]	@ 0x28
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	025b      	lsls	r3, r3, #9
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	3b01      	subs	r3, #1
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df4:	3b01      	subs	r3, #1
 8008df6:	061b      	lsls	r3, r3, #24
 8008df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008dfc:	4923      	ldr	r1, [pc, #140]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008e02:	4b22      	ldr	r3, [pc, #136]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	4a21      	ldr	r2, [pc, #132]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e08:	f023 0301 	bic.w	r3, r3, #1
 8008e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e12:	4b21      	ldr	r3, [pc, #132]	@ (8008e98 <HAL_RCC_OscConfig+0x778>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008e1a:	00d2      	lsls	r2, r2, #3
 8008e1c:	491b      	ldr	r1, [pc, #108]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e22:	4b1a      	ldr	r3, [pc, #104]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	f023 020c 	bic.w	r2, r3, #12
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	4917      	ldr	r1, [pc, #92]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e34:	4b15      	ldr	r3, [pc, #84]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e38:	f023 0202 	bic.w	r2, r3, #2
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e40:	4912      	ldr	r1, [pc, #72]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e46:	4b11      	ldr	r3, [pc, #68]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	4a10      	ldr	r2, [pc, #64]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e52:	4b0e      	ldr	r3, [pc, #56]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	4a0d      	ldr	r2, [pc, #52]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	4a0a      	ldr	r2, [pc, #40]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e6a:	4b08      	ldr	r3, [pc, #32]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	4a07      	ldr	r2, [pc, #28]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e70:	f043 0301 	orr.w	r3, r3, #1
 8008e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e76:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a04      	ldr	r2, [pc, #16]	@ (8008e8c <HAL_RCC_OscConfig+0x76c>)
 8008e7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e82:	f7f9 fc8d 	bl	80027a0 <HAL_GetTick>
 8008e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e88:	e011      	b.n	8008eae <HAL_RCC_OscConfig+0x78e>
 8008e8a:	bf00      	nop
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	58024800 	.word	0x58024800
 8008e94:	fffffc0c 	.word	0xfffffc0c
 8008e98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e9c:	f7f9 fc80 	bl	80027a0 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e08a      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eae:	4b47      	ldr	r3, [pc, #284]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0f0      	beq.n	8008e9c <HAL_RCC_OscConfig+0x77c>
 8008eba:	e082      	b.n	8008fc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ebc:	4b43      	ldr	r3, [pc, #268]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a42      	ldr	r2, [pc, #264]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec8:	f7f9 fc6a 	bl	80027a0 <HAL_GetTick>
 8008ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7f9 fc66 	bl	80027a0 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e070      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x7b0>
 8008eee:	e068      	b.n	8008fc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ef0:	4b36      	ldr	r3, [pc, #216]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ef6:	4b35      	ldr	r3, [pc, #212]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d031      	beq.n	8008f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f003 0203 	and.w	r2, r3, #3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d12a      	bne.n	8008f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d122      	bne.n	8008f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d11a      	bne.n	8008f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	0a5b      	lsrs	r3, r3, #9
 8008f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d111      	bne.n	8008f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	0c1b      	lsrs	r3, r3, #16
 8008f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d108      	bne.n	8008f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d001      	beq.n	8008f6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e02b      	b.n	8008fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f6c:	4b17      	ldr	r3, [pc, #92]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f70:	08db      	lsrs	r3, r3, #3
 8008f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d01f      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f82:	4b12      	ldr	r3, [pc, #72]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	4a11      	ldr	r2, [pc, #68]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f8e:	f7f9 fc07 	bl	80027a0 <HAL_GetTick>
 8008f92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f94:	bf00      	nop
 8008f96:	f7f9 fc03 	bl	80027a0 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d0f9      	beq.n	8008f96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <HAL_RCC_OscConfig+0x8b0>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008fae:	00d2      	lsls	r2, r2, #3
 8008fb0:	4906      	ldr	r1, [pc, #24]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008fb6:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fba:	4a04      	ldr	r2, [pc, #16]	@ (8008fcc <HAL_RCC_OscConfig+0x8ac>)
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3730      	adds	r7, #48	@ 0x30
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	ffff0007 	.word	0xffff0007

08008fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e19c      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d910      	bls.n	8009018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff6:	4b87      	ldr	r3, [pc, #540]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f023 020f 	bic.w	r2, r3, #15
 8008ffe:	4985      	ldr	r1, [pc, #532]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	4313      	orrs	r3, r2
 8009004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009006:	4b83      	ldr	r3, [pc, #524]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d001      	beq.n	8009018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e184      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d010      	beq.n	8009046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	4b7b      	ldr	r3, [pc, #492]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009030:	429a      	cmp	r2, r3
 8009032:	d908      	bls.n	8009046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009034:	4b78      	ldr	r3, [pc, #480]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	4975      	ldr	r1, [pc, #468]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009042:	4313      	orrs	r3, r2
 8009044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d010      	beq.n	8009074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	695a      	ldr	r2, [r3, #20]
 8009056:	4b70      	ldr	r3, [pc, #448]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800905e:	429a      	cmp	r2, r3
 8009060:	d908      	bls.n	8009074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009062:	4b6d      	ldr	r3, [pc, #436]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	496a      	ldr	r1, [pc, #424]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009070:	4313      	orrs	r3, r2
 8009072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d010      	beq.n	80090a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	4b64      	ldr	r3, [pc, #400]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800908c:	429a      	cmp	r2, r3
 800908e:	d908      	bls.n	80090a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009090:	4b61      	ldr	r3, [pc, #388]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	495e      	ldr	r1, [pc, #376]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	4b59      	ldr	r3, [pc, #356]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d908      	bls.n	80090d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090be:	4b56      	ldr	r3, [pc, #344]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	4953      	ldr	r1, [pc, #332]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d908      	bls.n	80090fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f023 020f 	bic.w	r2, r3, #15
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	4947      	ldr	r1, [pc, #284]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d055      	beq.n	80091b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800910a:	4b43      	ldr	r3, [pc, #268]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	4940      	ldr	r1, [pc, #256]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009118:	4313      	orrs	r3, r2
 800911a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d107      	bne.n	8009134 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009124:	4b3c      	ldr	r3, [pc, #240]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d121      	bne.n	8009174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e0f6      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2b03      	cmp	r3, #3
 800913a:	d107      	bne.n	800914c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800913c:	4b36      	ldr	r3, [pc, #216]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d115      	bne.n	8009174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e0ea      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d107      	bne.n	8009164 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009154:	4b30      	ldr	r3, [pc, #192]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0de      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009164:	4b2c      	ldr	r3, [pc, #176]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0304 	and.w	r3, r3, #4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e0d6      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009174:	4b28      	ldr	r3, [pc, #160]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f023 0207 	bic.w	r2, r3, #7
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	4925      	ldr	r1, [pc, #148]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 8009182:	4313      	orrs	r3, r2
 8009184:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009186:	f7f9 fb0b 	bl	80027a0 <HAL_GetTick>
 800918a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800918c:	e00a      	b.n	80091a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800918e:	f7f9 fb07 	bl	80027a0 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800919c:	4293      	cmp	r3, r2
 800919e:	d901      	bls.n	80091a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e0be      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d1eb      	bne.n	800918e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	4b14      	ldr	r3, [pc, #80]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d208      	bcs.n	80091e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091d2:	4b11      	ldr	r3, [pc, #68]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f023 020f 	bic.w	r2, r3, #15
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	490e      	ldr	r1, [pc, #56]	@ (8009218 <HAL_RCC_ClockConfig+0x244>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 030f 	and.w	r3, r3, #15
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d214      	bcs.n	800921c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091f2:	4b08      	ldr	r3, [pc, #32]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f023 020f 	bic.w	r2, r3, #15
 80091fa:	4906      	ldr	r1, [pc, #24]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	4313      	orrs	r3, r2
 8009200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009202:	4b04      	ldr	r3, [pc, #16]	@ (8009214 <HAL_RCC_ClockConfig+0x240>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d005      	beq.n	800921c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e086      	b.n	8009322 <HAL_RCC_ClockConfig+0x34e>
 8009214:	52002000 	.word	0x52002000
 8009218:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d010      	beq.n	800924a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	4b3f      	ldr	r3, [pc, #252]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009234:	429a      	cmp	r2, r3
 8009236:	d208      	bcs.n	800924a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009238:	4b3c      	ldr	r3, [pc, #240]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	4939      	ldr	r1, [pc, #228]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 8009246:	4313      	orrs	r3, r2
 8009248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d010      	beq.n	8009278 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695a      	ldr	r2, [r3, #20]
 800925a:	4b34      	ldr	r3, [pc, #208]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009262:	429a      	cmp	r2, r3
 8009264:	d208      	bcs.n	8009278 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009266:	4b31      	ldr	r3, [pc, #196]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	492e      	ldr	r1, [pc, #184]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 8009274:	4313      	orrs	r3, r2
 8009276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	d010      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	4b28      	ldr	r3, [pc, #160]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009290:	429a      	cmp	r2, r3
 8009292:	d208      	bcs.n	80092a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009294:	4b25      	ldr	r3, [pc, #148]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	4922      	ldr	r1, [pc, #136]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d010      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69da      	ldr	r2, [r3, #28]
 80092b6:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092be:	429a      	cmp	r2, r3
 80092c0:	d208      	bcs.n	80092d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092c2:	4b1a      	ldr	r3, [pc, #104]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	4917      	ldr	r1, [pc, #92]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092d4:	f000 f834 	bl	8009340 <HAL_RCC_GetSysClockFreq>
 80092d8:	4602      	mov	r2, r0
 80092da:	4b14      	ldr	r3, [pc, #80]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	4912      	ldr	r1, [pc, #72]	@ (8009330 <HAL_RCC_ClockConfig+0x35c>)
 80092e6:	5ccb      	ldrb	r3, [r1, r3]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092f2:	4b0e      	ldr	r3, [pc, #56]	@ (800932c <HAL_RCC_ClockConfig+0x358>)
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009330 <HAL_RCC_ClockConfig+0x35c>)
 80092fc:	5cd3      	ldrb	r3, [r2, r3]
 80092fe:	f003 031f 	and.w	r3, r3, #31
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <HAL_RCC_ClockConfig+0x360>)
 800930a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800930c:	4a0a      	ldr	r2, [pc, #40]	@ (8009338 <HAL_RCC_ClockConfig+0x364>)
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <HAL_RCC_ClockConfig+0x368>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7f8 ffca 	bl	80022b0 <HAL_InitTick>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	58024400 	.word	0x58024400
 8009330:	0801a5bc 	.word	0x0801a5bc
 8009334:	24000004 	.word	0x24000004
 8009338:	24000000 	.word	0x24000000
 800933c:	24000008 	.word	0x24000008

08009340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009340:	b480      	push	{r7}
 8009342:	b089      	sub	sp, #36	@ 0x24
 8009344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009346:	4bb3      	ldr	r3, [pc, #716]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800934e:	2b18      	cmp	r3, #24
 8009350:	f200 8155 	bhi.w	80095fe <HAL_RCC_GetSysClockFreq+0x2be>
 8009354:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	080093c1 	.word	0x080093c1
 8009360:	080095ff 	.word	0x080095ff
 8009364:	080095ff 	.word	0x080095ff
 8009368:	080095ff 	.word	0x080095ff
 800936c:	080095ff 	.word	0x080095ff
 8009370:	080095ff 	.word	0x080095ff
 8009374:	080095ff 	.word	0x080095ff
 8009378:	080095ff 	.word	0x080095ff
 800937c:	080093e7 	.word	0x080093e7
 8009380:	080095ff 	.word	0x080095ff
 8009384:	080095ff 	.word	0x080095ff
 8009388:	080095ff 	.word	0x080095ff
 800938c:	080095ff 	.word	0x080095ff
 8009390:	080095ff 	.word	0x080095ff
 8009394:	080095ff 	.word	0x080095ff
 8009398:	080095ff 	.word	0x080095ff
 800939c:	080093ed 	.word	0x080093ed
 80093a0:	080095ff 	.word	0x080095ff
 80093a4:	080095ff 	.word	0x080095ff
 80093a8:	080095ff 	.word	0x080095ff
 80093ac:	080095ff 	.word	0x080095ff
 80093b0:	080095ff 	.word	0x080095ff
 80093b4:	080095ff 	.word	0x080095ff
 80093b8:	080095ff 	.word	0x080095ff
 80093bc:	080093f3 	.word	0x080093f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c0:	4b94      	ldr	r3, [pc, #592]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093cc:	4b91      	ldr	r3, [pc, #580]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	08db      	lsrs	r3, r3, #3
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	4a90      	ldr	r2, [pc, #576]	@ (8009618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80093de:	e111      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093e0:	4b8d      	ldr	r3, [pc, #564]	@ (8009618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093e2:	61bb      	str	r3, [r7, #24]
      break;
 80093e4:	e10e      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093e6:	4b8d      	ldr	r3, [pc, #564]	@ (800961c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093e8:	61bb      	str	r3, [r7, #24]
      break;
 80093ea:	e10b      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80093ec:	4b8c      	ldr	r3, [pc, #560]	@ (8009620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093ee:	61bb      	str	r3, [r7, #24]
      break;
 80093f0:	e108      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093f2:	4b88      	ldr	r3, [pc, #544]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093fc:	4b85      	ldr	r3, [pc, #532]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	091b      	lsrs	r3, r3, #4
 8009402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009408:	4b82      	ldr	r3, [pc, #520]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009412:	4b80      	ldr	r3, [pc, #512]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009416:	08db      	lsrs	r3, r3, #3
 8009418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	fb02 f303 	mul.w	r3, r2, r3
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80e1 	beq.w	80095f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b02      	cmp	r3, #2
 800943a:	f000 8083 	beq.w	8009544 <HAL_RCC_GetSysClockFreq+0x204>
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b02      	cmp	r3, #2
 8009442:	f200 80a1 	bhi.w	8009588 <HAL_RCC_GetSysClockFreq+0x248>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_RCC_GetSysClockFreq+0x114>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d056      	beq.n	8009500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009452:	e099      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009454:	4b6f      	ldr	r3, [pc, #444]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0320 	and.w	r3, r3, #32
 800945c:	2b00      	cmp	r3, #0
 800945e:	d02d      	beq.n	80094bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009460:	4b6c      	ldr	r3, [pc, #432]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	08db      	lsrs	r3, r3, #3
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	4a6b      	ldr	r2, [pc, #428]	@ (8009618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948a:	4b62      	ldr	r3, [pc, #392]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949a:	ed97 6a02 	vldr	s12, [r7, #8]
 800949e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80094ba:	e087      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80094ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ce:	4b51      	ldr	r3, [pc, #324]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094de:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094fe:	e065      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800962c <HAL_RCC_GetSysClockFreq+0x2ec>
 800950e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009512:	4b40      	ldr	r3, [pc, #256]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009522:	ed97 6a02 	vldr	s12, [r7, #8]
 8009526:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800952a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800952e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800953a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800953e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009542:	e043      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009556:	4b2f      	ldr	r3, [pc, #188]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009566:	ed97 6a02 	vldr	s12, [r7, #8]
 800956a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800956e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800957a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009586:	e021      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800962c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959a:	4b1e      	ldr	r3, [pc, #120]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095cc:	4b11      	ldr	r3, [pc, #68]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	0a5b      	lsrs	r3, r3, #9
 80095d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095d6:	3301      	adds	r3, #1
 80095d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095f0:	ee17 3a90 	vmov	r3, s15
 80095f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80095f6:	e005      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
      break;
 80095fc:	e002      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80095fe:	4b07      	ldr	r3, [pc, #28]	@ (800961c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009600:	61bb      	str	r3, [r7, #24]
      break;
 8009602:	bf00      	nop
  }

  return sysclockfreq;
 8009604:	69bb      	ldr	r3, [r7, #24]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3724      	adds	r7, #36	@ 0x24
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	58024400 	.word	0x58024400
 8009618:	03d09000 	.word	0x03d09000
 800961c:	003d0900 	.word	0x003d0900
 8009620:	017d7840 	.word	0x017d7840
 8009624:	46000000 	.word	0x46000000
 8009628:	4c742400 	.word	0x4c742400
 800962c:	4a742400 	.word	0x4a742400
 8009630:	4bbebc20 	.word	0x4bbebc20

08009634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800963a:	f7ff fe81 	bl	8009340 <HAL_RCC_GetSysClockFreq>
 800963e:	4602      	mov	r2, r0
 8009640:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <HAL_RCC_GetHCLKFreq+0x50>)
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	0a1b      	lsrs	r3, r3, #8
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	490f      	ldr	r1, [pc, #60]	@ (8009688 <HAL_RCC_GetHCLKFreq+0x54>)
 800964c:	5ccb      	ldrb	r3, [r1, r3]
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	fa22 f303 	lsr.w	r3, r2, r3
 8009656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009658:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <HAL_RCC_GetHCLKFreq+0x50>)
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	4a09      	ldr	r2, [pc, #36]	@ (8009688 <HAL_RCC_GetHCLKFreq+0x54>)
 8009662:	5cd3      	ldrb	r3, [r2, r3]
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	4a07      	ldr	r2, [pc, #28]	@ (800968c <HAL_RCC_GetHCLKFreq+0x58>)
 8009670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009672:	4a07      	ldr	r2, [pc, #28]	@ (8009690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009678:	4b04      	ldr	r3, [pc, #16]	@ (800968c <HAL_RCC_GetHCLKFreq+0x58>)
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	58024400 	.word	0x58024400
 8009688:	0801a5bc 	.word	0x0801a5bc
 800968c:	24000004 	.word	0x24000004
 8009690:	24000000 	.word	0x24000000

08009694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009698:	f7ff ffcc 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 800969c:	4602      	mov	r2, r0
 800969e:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	091b      	lsrs	r3, r3, #4
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	4904      	ldr	r1, [pc, #16]	@ (80096bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80096aa:	5ccb      	ldrb	r3, [r1, r3]
 80096ac:	f003 031f 	and.w	r3, r3, #31
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	58024400 	.word	0x58024400
 80096bc:	0801a5bc 	.word	0x0801a5bc

080096c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096c4:	f7ff ffb6 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 80096c8:	4602      	mov	r2, r0
 80096ca:	4b06      	ldr	r3, [pc, #24]	@ (80096e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	f003 0307 	and.w	r3, r3, #7
 80096d4:	4904      	ldr	r1, [pc, #16]	@ (80096e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096d6:	5ccb      	ldrb	r3, [r1, r3]
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	58024400 	.word	0x58024400
 80096e8:	0801a5bc 	.word	0x0801a5bc

080096ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	223f      	movs	r2, #63	@ 0x3f
 80096fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f003 0207 	and.w	r2, r3, #7
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009708:	4b17      	ldr	r3, [pc, #92]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009714:	4b14      	ldr	r3, [pc, #80]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 020f 	and.w	r2, r3, #15
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009720:	4b11      	ldr	r3, [pc, #68]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800972c:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009738:	4b0b      	ldr	r3, [pc, #44]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009744:	4b08      	ldr	r3, [pc, #32]	@ (8009768 <HAL_RCC_GetClockConfig+0x7c>)
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009750:	4b06      	ldr	r3, [pc, #24]	@ (800976c <HAL_RCC_GetClockConfig+0x80>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 020f 	and.w	r2, r3, #15
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	601a      	str	r2, [r3, #0]
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	58024400 	.word	0x58024400
 800976c:	52002000 	.word	0x52002000

08009770 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009774:	b0ca      	sub	sp, #296	@ 0x128
 8009776:	af00      	add	r7, sp, #0
 8009778:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009782:	2300      	movs	r3, #0
 8009784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009794:	2500      	movs	r5, #0
 8009796:	ea54 0305 	orrs.w	r3, r4, r5
 800979a:	d049      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097a6:	d02f      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80097a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097ac:	d828      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097b2:	d01a      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80097b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097b8:	d822      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80097be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097c2:	d007      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80097c4:	e01c      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c6:	4bb8      	ldr	r3, [pc, #736]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	4ab7      	ldr	r2, [pc, #732]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097d2:	e01a      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	3308      	adds	r3, #8
 80097da:	2102      	movs	r1, #2
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fc8f 	bl	800b100 <RCCEx_PLL2_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097e8:	e00f      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ee:	3328      	adds	r3, #40	@ 0x28
 80097f0:	2102      	movs	r1, #2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 fd36 	bl	800b264 <RCCEx_PLL3_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097fe:	e004      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009806:	e000      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800980a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009812:	4ba5      	ldr	r3, [pc, #660]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009816:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009820:	4aa1      	ldr	r2, [pc, #644]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009822:	430b      	orrs	r3, r1
 8009824:	6513      	str	r3, [r2, #80]	@ 0x50
 8009826:	e003      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800982c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	ea58 0309 	orrs.w	r3, r8, r9
 8009844:	d047      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984c:	2b04      	cmp	r3, #4
 800984e:	d82a      	bhi.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009850:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009856:	bf00      	nop
 8009858:	0800986d 	.word	0x0800986d
 800985c:	0800987b 	.word	0x0800987b
 8009860:	08009891 	.word	0x08009891
 8009864:	080098af 	.word	0x080098af
 8009868:	080098af 	.word	0x080098af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800986c:	4b8e      	ldr	r3, [pc, #568]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009870:	4a8d      	ldr	r2, [pc, #564]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009878:	e01a      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987e:	3308      	adds	r3, #8
 8009880:	2100      	movs	r1, #0
 8009882:	4618      	mov	r0, r3
 8009884:	f001 fc3c 	bl	800b100 <RCCEx_PLL2_Config>
 8009888:	4603      	mov	r3, r0
 800988a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800988e:	e00f      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009894:	3328      	adds	r3, #40	@ 0x28
 8009896:	2100      	movs	r1, #0
 8009898:	4618      	mov	r0, r3
 800989a:	f001 fce3 	bl	800b264 <RCCEx_PLL3_Config>
 800989e:	4603      	mov	r3, r0
 80098a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098a4:	e004      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ac:	e000      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80098ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098b8:	4b7b      	ldr	r3, [pc, #492]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098bc:	f023 0107 	bic.w	r1, r3, #7
 80098c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c6:	4a78      	ldr	r2, [pc, #480]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80098cc:	e003      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80098d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80098e2:	f04f 0b00 	mov.w	fp, #0
 80098e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80098ea:	d04c      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f6:	d030      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80098f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098fc:	d829      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009900:	d02d      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009902:	2bc0      	cmp	r3, #192	@ 0xc0
 8009904:	d825      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009906:	2b80      	cmp	r3, #128	@ 0x80
 8009908:	d018      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800990a:	2b80      	cmp	r3, #128	@ 0x80
 800990c:	d821      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d007      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009916:	e01c      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009918:	4b63      	ldr	r3, [pc, #396]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4a62      	ldr	r2, [pc, #392]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800991e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009924:	e01c      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992a:	3308      	adds	r3, #8
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fbe6 	bl	800b100 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800993a:	e011      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800993c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009940:	3328      	adds	r3, #40	@ 0x28
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fc8d 	bl	800b264 <RCCEx_PLL3_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009950:	e006      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009958:	e002      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800995e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10a      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009968:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800996a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800996c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009976:	4a4c      	ldr	r2, [pc, #304]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009978:	430b      	orrs	r3, r1
 800997a:	6513      	str	r3, [r2, #80]	@ 0x50
 800997c:	e003      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009992:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009996:	2300      	movs	r3, #0
 8009998:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800999c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80099a0:	460b      	mov	r3, r1
 80099a2:	4313      	orrs	r3, r2
 80099a4:	d053      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80099a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80099ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b2:	d035      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80099b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b8:	d82e      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099be:	d031      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80099c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099c4:	d828      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ca:	d01a      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80099cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099d0:	d822      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80099d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099da:	d007      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80099dc:	e01c      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099de:	4b32      	ldr	r3, [pc, #200]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	4a31      	ldr	r2, [pc, #196]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099ea:	e01c      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f0:	3308      	adds	r3, #8
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fb83 	bl	800b100 <RCCEx_PLL2_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a00:	e011      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	3328      	adds	r3, #40	@ 0x28
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fc2a 	bl	800b264 <RCCEx_PLL3_Config>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a16:	e006      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a1e:	e002      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a20:	bf00      	nop
 8009a22:	e000      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a40:	430b      	orrs	r3, r1
 8009a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009a5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	d056      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a7a:	d038      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a80:	d831      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a86:	d034      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009a88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a8c:	d82b      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a92:	d01d      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a98:	d825      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d006      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aa2:	d00a      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009aa4:	e01f      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009aa6:	bf00      	nop
 8009aa8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aac:	4ba2      	ldr	r3, [pc, #648]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	4aa1      	ldr	r2, [pc, #644]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ab8:	e01c      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009abe:	3308      	adds	r3, #8
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fb1c 	bl	800b100 <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ace:	e011      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad4:	3328      	adds	r3, #40	@ 0x28
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 fbc3 	bl	800b264 <RCCEx_PLL3_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ae4:	e006      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aec:	e002      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009afc:	4b8e      	ldr	r3, [pc, #568]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b0c:	4a8a      	ldr	r2, [pc, #552]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b12:	e003      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d03a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b42:	2b30      	cmp	r3, #48	@ 0x30
 8009b44:	d01f      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009b46:	2b30      	cmp	r3, #48	@ 0x30
 8009b48:	d819      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d00c      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d815      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d019      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009b56:	2b10      	cmp	r3, #16
 8009b58:	d111      	bne.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b5a:	4b77      	ldr	r3, [pc, #476]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	4a76      	ldr	r2, [pc, #472]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b66:	e011      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	2102      	movs	r1, #2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fac5 	bl	800b100 <RCCEx_PLL2_Config>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b7c:	e006      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b94:	4b68      	ldr	r3, [pc, #416]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ba2:	4a65      	ldr	r2, [pc, #404]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ba8:	e003      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	d051      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bdc:	d035      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009be2:	d82e      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009be8:	d031      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bee:	d828      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf4:	d01a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bfa:	d822      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c04:	d007      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009c06:	e01c      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c08:	4b4b      	ldr	r3, [pc, #300]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c14:	e01c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fa6e 	bl	800b100 <RCCEx_PLL2_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c2a:	e011      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	3328      	adds	r3, #40	@ 0x28
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fb15 	bl	800b264 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c40:	e006      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c48:	e002      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c4a:	bf00      	nop
 8009c4c:	e000      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c58:	4b37      	ldr	r3, [pc, #220]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c66:	4a34      	ldr	r2, [pc, #208]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c6c:	e003      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c86:	2300      	movs	r3, #0
 8009c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	d056      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ca0:	d033      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ca6:	d82c      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ca8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009cac:	d02f      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009cae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009cb2:	d826      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cb8:	d02b      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009cba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cbe:	d820      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc4:	d012      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cca:	d81a      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d022      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd4:	d115      	bne.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cda:	3308      	adds	r3, #8
 8009cdc:	2101      	movs	r1, #1
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f001 fa0e 	bl	800b100 <RCCEx_PLL2_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cea:	e015      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf0:	3328      	adds	r3, #40	@ 0x28
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fab5 	bl	800b264 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d00:	e00a      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d08:	e006      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d0a:	bf00      	nop
 8009d0c:	e004      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d0e:	bf00      	nop
 8009d10:	e002      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d12:	bf00      	nop
 8009d14:	e000      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10d      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d2e:	4a02      	ldr	r2, [pc, #8]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d30:	430b      	orrs	r3, r1
 8009d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d34:	e006      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d36:	bf00      	nop
 8009d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d54:	2300      	movs	r3, #0
 8009d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4313      	orrs	r3, r2
 8009d62:	d055      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d70:	d033      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d76:	d82c      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7c:	d02f      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d82:	d826      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d88:	d02b      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009d8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d8e:	d820      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d94:	d012      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d9a:	d81a      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d022      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da4:	d115      	bne.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	3308      	adds	r3, #8
 8009dac:	2101      	movs	r1, #1
 8009dae:	4618      	mov	r0, r3
 8009db0:	f001 f9a6 	bl	800b100 <RCCEx_PLL2_Config>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009dba:	e015      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc0:	3328      	adds	r3, #40	@ 0x28
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fa4d 	bl	800b264 <RCCEx_PLL3_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009dd0:	e00a      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dd8:	e006      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dda:	bf00      	nop
 8009ddc:	e004      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dde:	bf00      	nop
 8009de0:	e002      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009de2:	bf00      	nop
 8009de4:	e000      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009df0:	4ba3      	ldr	r3, [pc, #652]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e00:	4a9f      	ldr	r2, [pc, #636]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e02:	430b      	orrs	r3, r1
 8009e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e06:	e003      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	d037      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e3a:	d00e      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e40:	d816      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d018      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e4a:	d111      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4c:	4b8c      	ldr	r3, [pc, #560]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	4a8b      	ldr	r2, [pc, #556]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e58:	e00f      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	3308      	adds	r3, #8
 8009e60:	2101      	movs	r1, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 f94c 	bl	800b100 <RCCEx_PLL2_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e6e:	e004      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e76:	e000      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10a      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e82:	4b7f      	ldr	r3, [pc, #508]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e90:	4a7b      	ldr	r2, [pc, #492]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e92:	430b      	orrs	r3, r1
 8009e94:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e96:	e003      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009eb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d039      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d81c      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009eca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009f0d 	.word	0x08009f0d
 8009ed4:	08009ee1 	.word	0x08009ee1
 8009ed8:	08009eef 	.word	0x08009eef
 8009edc:	08009f0d 	.word	0x08009f0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4b67      	ldr	r3, [pc, #412]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee4:	4a66      	ldr	r2, [pc, #408]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009eec:	e00f      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 f902 	bl	800b100 <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f02:	e004      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f0a:	e000      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f16:	4b5a      	ldr	r3, [pc, #360]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f1a:	f023 0103 	bic.w	r1, r3, #3
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f24:	4a56      	ldr	r2, [pc, #344]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f26:	430b      	orrs	r3, r1
 8009f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f2a:	e003      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009f40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f44:	2300      	movs	r3, #0
 8009f46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f000 809f 	beq.w	800a094 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f56:	4b4b      	ldr	r3, [pc, #300]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a4a      	ldr	r2, [pc, #296]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f62:	f7f8 fc1d 	bl	80027a0 <HAL_GetTick>
 8009f66:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f6a:	e00b      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f6c:	f7f8 fc18 	bl	80027a0 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b64      	cmp	r3, #100	@ 0x64
 8009f7a:	d903      	bls.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f82:	e005      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f84:	4b3f      	ldr	r3, [pc, #252]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0ed      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d179      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f98:	4b39      	ldr	r3, [pc, #228]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fa4:	4053      	eors	r3, r2
 8009fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d015      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fae:	4b34      	ldr	r3, [pc, #208]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fba:	4b31      	ldr	r3, [pc, #196]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fbe:	4a30      	ldr	r2, [pc, #192]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fc4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009fc6:	4b2e      	ldr	r3, [pc, #184]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fca:	4a2d      	ldr	r2, [pc, #180]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fd0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009fd2:	4a2b      	ldr	r2, [pc, #172]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fd8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe6:	d118      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7f8 fbda 	bl	80027a0 <HAL_GetTick>
 8009fec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ff0:	e00d      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ff2:	f7f8 fbd5 	bl	80027a0 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ffc:	1ad2      	subs	r2, r2, r3
 8009ffe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a002:	429a      	cmp	r2, r3
 800a004:	d903      	bls.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a00c:	e005      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a00e:	4b1c      	ldr	r3, [pc, #112]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0eb      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d129      	bne.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a02a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a02e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a032:	d10e      	bne.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a034:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a040:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a044:	091a      	lsrs	r2, r3, #4
 800a046:	4b10      	ldr	r3, [pc, #64]	@ (800a088 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a048:	4013      	ands	r3, r2
 800a04a:	4a0d      	ldr	r2, [pc, #52]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a04c:	430b      	orrs	r3, r1
 800a04e:	6113      	str	r3, [r2, #16]
 800a050:	e005      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a052:	4b0b      	ldr	r3, [pc, #44]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	4a0a      	ldr	r2, [pc, #40]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a058:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a05c:	6113      	str	r3, [r2, #16]
 800a05e:	4b08      	ldr	r3, [pc, #32]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a060:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a06a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a06e:	4a04      	ldr	r2, [pc, #16]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a070:	430b      	orrs	r3, r1
 800a072:	6713      	str	r3, [r2, #112]	@ 0x70
 800a074:	e00e      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a07a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a07e:	e009      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a080:	58024400 	.word	0x58024400
 800a084:	58024800 	.word	0x58024800
 800a088:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f002 0301 	and.w	r3, r2, #1
 800a0a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	f000 8089 	beq.w	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0bc:	2b28      	cmp	r3, #40	@ 0x28
 800a0be:	d86b      	bhi.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a0c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a1a1 	.word	0x0800a1a1
 800a0cc:	0800a199 	.word	0x0800a199
 800a0d0:	0800a199 	.word	0x0800a199
 800a0d4:	0800a199 	.word	0x0800a199
 800a0d8:	0800a199 	.word	0x0800a199
 800a0dc:	0800a199 	.word	0x0800a199
 800a0e0:	0800a199 	.word	0x0800a199
 800a0e4:	0800a199 	.word	0x0800a199
 800a0e8:	0800a16d 	.word	0x0800a16d
 800a0ec:	0800a199 	.word	0x0800a199
 800a0f0:	0800a199 	.word	0x0800a199
 800a0f4:	0800a199 	.word	0x0800a199
 800a0f8:	0800a199 	.word	0x0800a199
 800a0fc:	0800a199 	.word	0x0800a199
 800a100:	0800a199 	.word	0x0800a199
 800a104:	0800a199 	.word	0x0800a199
 800a108:	0800a183 	.word	0x0800a183
 800a10c:	0800a199 	.word	0x0800a199
 800a110:	0800a199 	.word	0x0800a199
 800a114:	0800a199 	.word	0x0800a199
 800a118:	0800a199 	.word	0x0800a199
 800a11c:	0800a199 	.word	0x0800a199
 800a120:	0800a199 	.word	0x0800a199
 800a124:	0800a199 	.word	0x0800a199
 800a128:	0800a1a1 	.word	0x0800a1a1
 800a12c:	0800a199 	.word	0x0800a199
 800a130:	0800a199 	.word	0x0800a199
 800a134:	0800a199 	.word	0x0800a199
 800a138:	0800a199 	.word	0x0800a199
 800a13c:	0800a199 	.word	0x0800a199
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a199 	.word	0x0800a199
 800a150:	0800a199 	.word	0x0800a199
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a199 	.word	0x0800a199
 800a15c:	0800a199 	.word	0x0800a199
 800a160:	0800a199 	.word	0x0800a199
 800a164:	0800a199 	.word	0x0800a199
 800a168:	0800a1a1 	.word	0x0800a1a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a170:	3308      	adds	r3, #8
 800a172:	2101      	movs	r1, #1
 800a174:	4618      	mov	r0, r3
 800a176:	f000 ffc3 	bl	800b100 <RCCEx_PLL2_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a180:	e00f      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a186:	3328      	adds	r3, #40	@ 0x28
 800a188:	2101      	movs	r1, #1
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 f86a 	bl	800b264 <RCCEx_PLL3_Config>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a196:	e004      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a19e:	e000      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a1a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a1aa:	4bbf      	ldr	r3, [pc, #764]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1b8:	4abb      	ldr	r2, [pc, #748]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1be:	e003      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f002 0302 	and.w	r3, r2, #2
 800a1d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a1de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	d041      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	d824      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a245 	.word	0x0800a245
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a227 	.word	0x0800a227
 800a204:	0800a245 	.word	0x0800a245
 800a208:	0800a245 	.word	0x0800a245
 800a20c:	0800a245 	.word	0x0800a245
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	3308      	adds	r3, #8
 800a216:	2101      	movs	r1, #1
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 ff71 	bl	800b100 <RCCEx_PLL2_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a224:	e00f      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22a:	3328      	adds	r3, #40	@ 0x28
 800a22c:	2101      	movs	r1, #1
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 f818 	bl	800b264 <RCCEx_PLL3_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a23a:	e004      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a242:	e000      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10a      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a24e:	4b96      	ldr	r3, [pc, #600]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a252:	f023 0107 	bic.w	r1, r3, #7
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a25c:	4a92      	ldr	r2, [pc, #584]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a25e:	430b      	orrs	r3, r1
 800a260:	6553      	str	r3, [r2, #84]	@ 0x54
 800a262:	e003      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f002 0304 	and.w	r3, r2, #4
 800a278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a282:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a286:	460b      	mov	r3, r1
 800a288:	4313      	orrs	r3, r2
 800a28a:	d044      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a294:	2b05      	cmp	r3, #5
 800a296:	d825      	bhi.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a298:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2ed 	.word	0x0800a2ed
 800a2a4:	0800a2b9 	.word	0x0800a2b9
 800a2a8:	0800a2cf 	.word	0x0800a2cf
 800a2ac:	0800a2ed 	.word	0x0800a2ed
 800a2b0:	0800a2ed 	.word	0x0800a2ed
 800a2b4:	0800a2ed 	.word	0x0800a2ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2bc:	3308      	adds	r3, #8
 800a2be:	2101      	movs	r1, #1
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 ff1d 	bl	800b100 <RCCEx_PLL2_Config>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2cc:	e00f      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d2:	3328      	adds	r3, #40	@ 0x28
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 ffc4 	bl	800b264 <RCCEx_PLL3_Config>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2e2:	e004      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ea:	e000      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a2ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2f6:	4b6c      	ldr	r3, [pc, #432]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2fa:	f023 0107 	bic.w	r1, r3, #7
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a306:	4a68      	ldr	r2, [pc, #416]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f002 0320 	and.w	r3, r2, #32
 800a322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a32c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d055      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a33e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a342:	d033      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a348:	d82c      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34e:	d02f      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a354:	d826      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a35a:	d02b      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a35c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a360:	d820      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a366:	d012      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a36c:	d81a      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d022      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a376:	d115      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37c:	3308      	adds	r3, #8
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f000 febd 	bl	800b100 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a38c:	e015      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a392:	3328      	adds	r3, #40	@ 0x28
 800a394:	2102      	movs	r1, #2
 800a396:	4618      	mov	r0, r3
 800a398:	f000 ff64 	bl	800b264 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a3a2:	e00a      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3aa:	e006      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3ac:	bf00      	nop
 800a3ae:	e004      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3c2:	4b39      	ldr	r3, [pc, #228]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d2:	4a35      	ldr	r2, [pc, #212]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3d8:	e003      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a3ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a3f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4313      	orrs	r3, r2
 800a400:	d058      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a40a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a40e:	d033      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a410:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a414:	d82c      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a41a:	d02f      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a41c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a420:	d826      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a422:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a426:	d02b      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a42c:	d820      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a42e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a432:	d012      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a438:	d81a      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d022      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a43e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a442:	d115      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a448:	3308      	adds	r3, #8
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fe57 	bl	800b100 <RCCEx_PLL2_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a458:	e015      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45e:	3328      	adds	r3, #40	@ 0x28
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fefe 	bl	800b264 <RCCEx_PLL3_Config>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a46e:	e00a      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a476:	e006      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a478:	bf00      	nop
 800a47a:	e004      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a47c:	bf00      	nop
 800a47e:	e002      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a480:	bf00      	nop
 800a482:	e000      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10e      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a48e:	4b06      	ldr	r3, [pc, #24]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a492:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a49e:	4a02      	ldr	r2, [pc, #8]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4a4:	e006      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a4a6:	bf00      	nop
 800a4a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	d055      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4e0:	d033      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a4e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4e6:	d82c      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ec:	d02f      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a4ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4f2:	d826      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4f8:	d02b      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a4fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4fe:	d820      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a500:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a504:	d012      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a50a:	d81a      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d022      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a514:	d115      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51a:	3308      	adds	r3, #8
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fdee 	bl	800b100 <RCCEx_PLL2_Config>
 800a524:	4603      	mov	r3, r0
 800a526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a52a:	e015      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a530:	3328      	adds	r3, #40	@ 0x28
 800a532:	2102      	movs	r1, #2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fe95 	bl	800b264 <RCCEx_PLL3_Config>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a540:	e00a      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a548:	e006      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a54a:	bf00      	nop
 800a54c:	e004      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a54e:	bf00      	nop
 800a550:	e002      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a556:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10b      	bne.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a560:	4ba1      	ldr	r3, [pc, #644]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a564:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a570:	4a9d      	ldr	r2, [pc, #628]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a572:	430b      	orrs	r3, r1
 800a574:	6593      	str	r3, [r2, #88]	@ 0x58
 800a576:	e003      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a57c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f002 0308 	and.w	r3, r2, #8
 800a58c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a590:	2300      	movs	r3, #0
 800a592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a596:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a59a:	460b      	mov	r3, r1
 800a59c:	4313      	orrs	r3, r2
 800a59e:	d01e      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ac:	d10c      	bne.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b2:	3328      	adds	r3, #40	@ 0x28
 800a5b4:	2102      	movs	r1, #2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fe54 	bl	800b264 <RCCEx_PLL3_Config>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a5c8:	4b87      	ldr	r3, [pc, #540]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5d8:	4a83      	ldr	r2, [pc, #524]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5da:	430b      	orrs	r3, r1
 800a5dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f002 0310 	and.w	r3, r2, #16
 800a5ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	d01e      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a60a:	d10c      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a610:	3328      	adds	r3, #40	@ 0x28
 800a612:	2102      	movs	r1, #2
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fe25 	bl	800b264 <RCCEx_PLL3_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a626:	4b70      	ldr	r3, [pc, #448]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a62a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a636:	4a6c      	ldr	r2, [pc, #432]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a638:	430b      	orrs	r3, r1
 800a63a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a64c:	2300      	movs	r3, #0
 800a64e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a652:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a656:	460b      	mov	r3, r1
 800a658:	4313      	orrs	r3, r2
 800a65a:	d03e      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a668:	d022      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a66a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a66e:	d81b      	bhi.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a678:	d00b      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a67a:	e015      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a680:	3308      	adds	r3, #8
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fd3b 	bl	800b100 <RCCEx_PLL2_Config>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a690:	e00f      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a696:	3328      	adds	r3, #40	@ 0x28
 800a698:	2102      	movs	r1, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fde2 	bl	800b264 <RCCEx_PLL3_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6a6:	e004      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6ae:	e000      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10b      	bne.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6ca:	4a47      	ldr	r2, [pc, #284]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6d0:	e003      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a6e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	d03b      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a702:	d01f      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a704:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a708:	d818      	bhi.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a70a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a70e:	d003      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a714:	d007      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a716:	e011      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a718:	4b33      	ldr	r3, [pc, #204]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71c:	4a32      	ldr	r2, [pc, #200]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a71e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a724:	e00f      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a72a:	3328      	adds	r3, #40	@ 0x28
 800a72c:	2101      	movs	r1, #1
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fd98 	bl	800b264 <RCCEx_PLL3_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a73a:	e004      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a742:	e000      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a74e:	4b26      	ldr	r3, [pc, #152]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a752:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a75e:	4a22      	ldr	r2, [pc, #136]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a760:	430b      	orrs	r3, r1
 800a762:	6553      	str	r3, [r2, #84]	@ 0x54
 800a764:	e003      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a76a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a77a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a77c:	2300      	movs	r3, #0
 800a77e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a780:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a784:	460b      	mov	r3, r1
 800a786:	4313      	orrs	r3, r2
 800a788:	d034      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a798:	d007      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a79a:	e011      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79c:	4b12      	ldr	r3, [pc, #72]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a0:	4a11      	ldr	r2, [pc, #68]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7a8:	e00e      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	2102      	movs	r1, #2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fca4 	bl	800b100 <RCCEx_PLL2_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7be:	e003      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10d      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7d0:	4b05      	ldr	r3, [pc, #20]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7de:	4a02      	ldr	r2, [pc, #8]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7e4:	e006      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a7e6:	bf00      	nop
 800a7e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a800:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a802:	2300      	movs	r3, #0
 800a804:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a806:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a80a:	460b      	mov	r3, r1
 800a80c:	4313      	orrs	r3, r2
 800a80e:	d00c      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a814:	3328      	adds	r3, #40	@ 0x28
 800a816:	2102      	movs	r1, #2
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fd23 	bl	800b264 <RCCEx_PLL3_Config>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a836:	663b      	str	r3, [r7, #96]	@ 0x60
 800a838:	2300      	movs	r3, #0
 800a83a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a83c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a840:	460b      	mov	r3, r1
 800a842:	4313      	orrs	r3, r2
 800a844:	d038      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a84e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a852:	d018      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a858:	d811      	bhi.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a85a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85e:	d014      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a864:	d80b      	bhi.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d011      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86e:	d106      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a870:	4bc3      	ldr	r3, [pc, #780]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a874:	4ac2      	ldr	r2, [pc, #776]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a87a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a87c:	e008      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a884:	e004      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a886:	bf00      	nop
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a88e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a898:	4bb9      	ldr	r3, [pc, #740]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a89a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a8:	4ab5      	ldr	r2, [pc, #724]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8ae:	e003      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a8c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	d009      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8d4:	4baa      	ldr	r3, [pc, #680]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8e2:	4aa7      	ldr	r2, [pc, #668]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a8f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a8fe:	460b      	mov	r3, r1
 800a900:	4313      	orrs	r3, r2
 800a902:	d00a      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a904:	4b9e      	ldr	r3, [pc, #632]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a914:	4a9a      	ldr	r2, [pc, #616]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a916:	430b      	orrs	r3, r1
 800a918:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a926:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a928:	2300      	movs	r3, #0
 800a92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a92c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a930:	460b      	mov	r3, r1
 800a932:	4313      	orrs	r3, r2
 800a934:	d009      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a936:	4b92      	ldr	r3, [pc, #584]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a944:	4a8e      	ldr	r2, [pc, #568]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a946:	430b      	orrs	r3, r1
 800a948:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a956:	643b      	str	r3, [r7, #64]	@ 0x40
 800a958:	2300      	movs	r3, #0
 800a95a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a95c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d00e      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a966:	4b86      	ldr	r3, [pc, #536]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	4a85      	ldr	r2, [pc, #532]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a96c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a970:	6113      	str	r3, [r2, #16]
 800a972:	4b83      	ldr	r3, [pc, #524]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a974:	6919      	ldr	r1, [r3, #16]
 800a976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a97e:	4a80      	ldr	r2, [pc, #512]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a980:	430b      	orrs	r3, r1
 800a982:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a990:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a992:	2300      	movs	r3, #0
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a996:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a99a:	460b      	mov	r3, r1
 800a99c:	4313      	orrs	r3, r2
 800a99e:	d009      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a9a0:	4b77      	ldr	r3, [pc, #476]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ae:	4a74      	ldr	r2, [pc, #464]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9b0:	430b      	orrs	r3, r1
 800a9b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a9c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	d00a      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9d0:	4b6b      	ldr	r3, [pc, #428]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9e0:	4a67      	ldr	r2, [pc, #412]	@ (800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	d011      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa06:	3308      	adds	r3, #8
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fb78 	bl	800b100 <RCCEx_PLL2_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6239      	str	r1, [r7, #32]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	d011      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa46:	3308      	adds	r3, #8
 800aa48:	2101      	movs	r1, #1
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fb58 	bl	800b100 <RCCEx_PLL2_Config>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	2100      	movs	r1, #0
 800aa70:	61b9      	str	r1, [r7, #24]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	d011      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa86:	3308      	adds	r3, #8
 800aa88:	2102      	movs	r1, #2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fb38 	bl	800b100 <RCCEx_PLL2_Config>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	2100      	movs	r1, #0
 800aab0:	6139      	str	r1, [r7, #16]
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aabc:	460b      	mov	r3, r1
 800aabe:	4313      	orrs	r3, r2
 800aac0:	d011      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac6:	3328      	adds	r3, #40	@ 0x28
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fbca 	bl	800b264 <RCCEx_PLL3_Config>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	2100      	movs	r1, #0
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	f003 0310 	and.w	r3, r3, #16
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d011      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab06:	3328      	adds	r3, #40	@ 0x28
 800ab08:	2101      	movs	r1, #1
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fbaa 	bl	800b264 <RCCEx_PLL3_Config>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	6039      	str	r1, [r7, #0]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	607b      	str	r3, [r7, #4]
 800ab38:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d011      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab46:	3328      	adds	r3, #40	@ 0x28
 800ab48:	2102      	movs	r1, #2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fb8a 	bl	800b264 <RCCEx_PLL3_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ab66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e000      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab80:	58024400 	.word	0x58024400

0800ab84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab88:	f7fe fd54 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	091b      	lsrs	r3, r3, #4
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	4904      	ldr	r1, [pc, #16]	@ (800abac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab9a:	5ccb      	ldrb	r3, [r1, r3]
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	58024400 	.word	0x58024400
 800abac:	0801a5bc 	.word	0x0801a5bc

0800abb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	@ 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb8:	4ba1      	ldr	r3, [pc, #644]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800abc2:	4b9f      	ldr	r3, [pc, #636]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc6:	0b1b      	lsrs	r3, r3, #12
 800abc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abce:	4b9c      	ldr	r3, [pc, #624]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd2:	091b      	lsrs	r3, r3, #4
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800abda:	4b99      	ldr	r3, [pc, #612]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8111 	beq.w	800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f000 8083 	beq.w	800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	f200 80a1 	bhi.w	800ad50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d056      	beq.n	800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac1a:	e099      	b.n	800ad50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac1c:	4b88      	ldr	r3, [pc, #544]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0320 	and.w	r3, r3, #32
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d02d      	beq.n	800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac28:	4b85      	ldr	r3, [pc, #532]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	08db      	lsrs	r3, r3, #3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	4a84      	ldr	r2, [pc, #528]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac52:	4b7b      	ldr	r3, [pc, #492]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac82:	e087      	b.n	800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac96:	4b6a      	ldr	r3, [pc, #424]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acaa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc6:	e065      	b.n	800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acda:	4b59      	ldr	r3, [pc, #356]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acea:	ed97 6a03 	vldr	s12, [r7, #12]
 800acee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad0a:	e043      	b.n	800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1e:	4b48      	ldr	r3, [pc, #288]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad4e:	e021      	b.n	800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad62:	4b37      	ldr	r3, [pc, #220]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad94:	4b2a      	ldr	r3, [pc, #168]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad98:	0a5b      	lsrs	r3, r3, #9
 800ad9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adae:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adba:	ee17 2a90 	vmov	r2, s15
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800adc2:	4b1f      	ldr	r3, [pc, #124]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc6:	0c1b      	lsrs	r3, r3, #16
 800adc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800add8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800addc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade8:	ee17 2a90 	vmov	r2, s15
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800adf0:	4b13      	ldr	r3, [pc, #76]	@ (800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf4:	0e1b      	lsrs	r3, r3, #24
 800adf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae16:	ee17 2a90 	vmov	r2, s15
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae1e:	e008      	b.n	800ae32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	609a      	str	r2, [r3, #8]
}
 800ae32:	bf00      	nop
 800ae34:	3724      	adds	r7, #36	@ 0x24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	58024400 	.word	0x58024400
 800ae44:	03d09000 	.word	0x03d09000
 800ae48:	46000000 	.word	0x46000000
 800ae4c:	4c742400 	.word	0x4c742400
 800ae50:	4a742400 	.word	0x4a742400
 800ae54:	4bbebc20 	.word	0x4bbebc20

0800ae58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b089      	sub	sp, #36	@ 0x24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae60:	4ba1      	ldr	r3, [pc, #644]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae64:	f003 0303 	and.w	r3, r3, #3
 800ae68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae6a:	4b9f      	ldr	r3, [pc, #636]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6e:	0d1b      	lsrs	r3, r3, #20
 800ae70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae76:	4b9c      	ldr	r3, [pc, #624]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7a:	0a1b      	lsrs	r3, r3, #8
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae82:	4b99      	ldr	r3, [pc, #612]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae86:	08db      	lsrs	r3, r3, #3
 800ae88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	fb02 f303 	mul.w	r3, r2, r3
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 8111 	beq.w	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	f000 8083 	beq.w	800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	f200 80a1 	bhi.w	800aff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d056      	beq.n	800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aec2:	e099      	b.n	800aff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec4:	4b88      	ldr	r3, [pc, #544]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0320 	and.w	r3, r3, #32
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d02d      	beq.n	800af2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed0:	4b85      	ldr	r3, [pc, #532]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	08db      	lsrs	r3, r3, #3
 800aed6:	f003 0303 	and.w	r3, r3, #3
 800aeda:	4a84      	ldr	r2, [pc, #528]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aedc:	fa22 f303 	lsr.w	r3, r2, r3
 800aee0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefa:	4b7b      	ldr	r3, [pc, #492]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af2a:	e087      	b.n	800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3e:	4b6a      	ldr	r3, [pc, #424]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af6e:	e065      	b.n	800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af82:	4b59      	ldr	r3, [pc, #356]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af92:	ed97 6a03 	vldr	s12, [r7, #12]
 800af96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afb2:	e043      	b.n	800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afc6:	4b48      	ldr	r3, [pc, #288]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff6:	e021      	b.n	800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b002:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b00a:	4b37      	ldr	r3, [pc, #220]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b01e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b02a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b03a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b03c:	4b2a      	ldr	r3, [pc, #168]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b040:	0a5b      	lsrs	r3, r3, #9
 800b042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b052:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b056:	edd7 6a07 	vldr	s13, [r7, #28]
 800b05a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b062:	ee17 2a90 	vmov	r2, s15
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b06a:	4b1f      	ldr	r3, [pc, #124]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06e:	0c1b      	lsrs	r3, r3, #16
 800b070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b080:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b084:	edd7 6a07 	vldr	s13, [r7, #28]
 800b088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b090:	ee17 2a90 	vmov	r2, s15
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b098:	4b13      	ldr	r3, [pc, #76]	@ (800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09c:	0e1b      	lsrs	r3, r3, #24
 800b09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0be:	ee17 2a90 	vmov	r2, s15
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0c6:	e008      	b.n	800b0da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	609a      	str	r2, [r3, #8]
}
 800b0da:	bf00      	nop
 800b0dc:	3724      	adds	r7, #36	@ 0x24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	58024400 	.word	0x58024400
 800b0ec:	03d09000 	.word	0x03d09000
 800b0f0:	46000000 	.word	0x46000000
 800b0f4:	4c742400 	.word	0x4c742400
 800b0f8:	4a742400 	.word	0x4a742400
 800b0fc:	4bbebc20 	.word	0x4bbebc20

0800b100 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b10e:	4b53      	ldr	r3, [pc, #332]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b112:	f003 0303 	and.w	r3, r3, #3
 800b116:	2b03      	cmp	r3, #3
 800b118:	d101      	bne.n	800b11e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e099      	b.n	800b252 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b11e:	4b4f      	ldr	r3, [pc, #316]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a4e      	ldr	r2, [pc, #312]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b124:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b12a:	f7f7 fb39 	bl	80027a0 <HAL_GetTick>
 800b12e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b130:	e008      	b.n	800b144 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b132:	f7f7 fb35 	bl	80027a0 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d901      	bls.n	800b144 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e086      	b.n	800b252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b144:	4b45      	ldr	r3, [pc, #276]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1f0      	bne.n	800b132 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b150:	4b42      	ldr	r3, [pc, #264]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b154:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	031b      	lsls	r3, r3, #12
 800b15e:	493f      	ldr	r1, [pc, #252]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b160:	4313      	orrs	r3, r2
 800b162:	628b      	str	r3, [r1, #40]	@ 0x28
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	3b01      	subs	r3, #1
 800b16a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	3b01      	subs	r3, #1
 800b174:	025b      	lsls	r3, r3, #9
 800b176:	b29b      	uxth	r3, r3
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	3b01      	subs	r3, #1
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	061b      	lsls	r3, r3, #24
 800b190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b194:	4931      	ldr	r1, [pc, #196]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b196:	4313      	orrs	r3, r2
 800b198:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b19a:	4b30      	ldr	r3, [pc, #192]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	492d      	ldr	r1, [pc, #180]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b0:	f023 0220 	bic.w	r2, r3, #32
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	4928      	ldr	r1, [pc, #160]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b1be:	4b27      	ldr	r3, [pc, #156]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	4a26      	ldr	r2, [pc, #152]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	f023 0310 	bic.w	r3, r3, #16
 800b1c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1ca:	4b24      	ldr	r3, [pc, #144]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1ce:	4b24      	ldr	r3, [pc, #144]	@ (800b260 <RCCEx_PLL2_Config+0x160>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	69d2      	ldr	r2, [r2, #28]
 800b1d6:	00d2      	lsls	r2, r2, #3
 800b1d8:	4920      	ldr	r1, [pc, #128]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b1de:	4b1f      	ldr	r3, [pc, #124]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1e4:	f043 0310 	orr.w	r3, r3, #16
 800b1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d106      	bne.n	800b1fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f4:	4a19      	ldr	r2, [pc, #100]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b1f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1fc:	e00f      	b.n	800b21e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d106      	bne.n	800b212 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b204:	4b15      	ldr	r3, [pc, #84]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b208:	4a14      	ldr	r2, [pc, #80]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b20a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b20e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b210:	e005      	b.n	800b21e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b212:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	4a11      	ldr	r2, [pc, #68]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b21c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b21e:	4b0f      	ldr	r3, [pc, #60]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a0e      	ldr	r2, [pc, #56]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b224:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b22a:	f7f7 fab9 	bl	80027a0 <HAL_GetTick>
 800b22e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b230:	e008      	b.n	800b244 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b232:	f7f7 fab5 	bl	80027a0 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d901      	bls.n	800b244 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e006      	b.n	800b252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b244:	4b05      	ldr	r3, [pc, #20]	@ (800b25c <RCCEx_PLL2_Config+0x15c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0f0      	beq.n	800b232 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	58024400 	.word	0x58024400
 800b260:	ffff0007 	.word	0xffff0007

0800b264 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b272:	4b53      	ldr	r3, [pc, #332]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d101      	bne.n	800b282 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e099      	b.n	800b3b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b282:	4b4f      	ldr	r3, [pc, #316]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a4e      	ldr	r2, [pc, #312]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7f7 fa87 	bl	80027a0 <HAL_GetTick>
 800b292:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b294:	e008      	b.n	800b2a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b296:	f7f7 fa83 	bl	80027a0 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d901      	bls.n	800b2a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e086      	b.n	800b3b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2a8:	4b45      	ldr	r3, [pc, #276]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f0      	bne.n	800b296 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2b4:	4b42      	ldr	r3, [pc, #264]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	051b      	lsls	r3, r3, #20
 800b2c2:	493f      	ldr	r1, [pc, #252]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	025b      	lsls	r3, r3, #9
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	041b      	lsls	r3, r3, #16
 800b2e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	061b      	lsls	r3, r3, #24
 800b2f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b2f8:	4931      	ldr	r1, [pc, #196]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b2fe:	4b30      	ldr	r3, [pc, #192]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	492d      	ldr	r1, [pc, #180]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b30c:	4313      	orrs	r3, r2
 800b30e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b310:	4b2b      	ldr	r3, [pc, #172]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b314:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	4928      	ldr	r1, [pc, #160]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b322:	4b27      	ldr	r3, [pc, #156]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	4a26      	ldr	r2, [pc, #152]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b32c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b32e:	4b24      	ldr	r3, [pc, #144]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b332:	4b24      	ldr	r3, [pc, #144]	@ (800b3c4 <RCCEx_PLL3_Config+0x160>)
 800b334:	4013      	ands	r3, r2
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	69d2      	ldr	r2, [r2, #28]
 800b33a:	00d2      	lsls	r2, r2, #3
 800b33c:	4920      	ldr	r1, [pc, #128]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b342:	4b1f      	ldr	r3, [pc, #124]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b34c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d106      	bne.n	800b362 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b354:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b358:	4a19      	ldr	r2, [pc, #100]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b35a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b35e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b360:	e00f      	b.n	800b382 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d106      	bne.n	800b376 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b368:	4b15      	ldr	r3, [pc, #84]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36c:	4a14      	ldr	r2, [pc, #80]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b36e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b374:	e005      	b.n	800b382 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b376:	4b12      	ldr	r3, [pc, #72]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	4a11      	ldr	r2, [pc, #68]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b380:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b382:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a0e      	ldr	r2, [pc, #56]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38e:	f7f7 fa07 	bl	80027a0 <HAL_GetTick>
 800b392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b394:	e008      	b.n	800b3a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b396:	f7f7 fa03 	bl	80027a0 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d901      	bls.n	800b3a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e006      	b.n	800b3b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3a8:	4b05      	ldr	r3, [pc, #20]	@ (800b3c0 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0f0      	beq.n	800b396 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	ffff0007 	.word	0xffff0007

0800b3c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e10f      	b.n	800b5fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a87      	ldr	r2, [pc, #540]	@ (800b604 <HAL_SPI_Init+0x23c>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00f      	beq.n	800b40a <HAL_SPI_Init+0x42>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a86      	ldr	r2, [pc, #536]	@ (800b608 <HAL_SPI_Init+0x240>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d00a      	beq.n	800b40a <HAL_SPI_Init+0x42>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a84      	ldr	r2, [pc, #528]	@ (800b60c <HAL_SPI_Init+0x244>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d005      	beq.n	800b40a <HAL_SPI_Init+0x42>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	2b0f      	cmp	r3, #15
 800b404:	d901      	bls.n	800b40a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e0f7      	b.n	800b5fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fbbc 	bl	800bb88 <SPI_GetPacketSize>
 800b410:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a7b      	ldr	r2, [pc, #492]	@ (800b604 <HAL_SPI_Init+0x23c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00c      	beq.n	800b436 <HAL_SPI_Init+0x6e>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a79      	ldr	r2, [pc, #484]	@ (800b608 <HAL_SPI_Init+0x240>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d007      	beq.n	800b436 <HAL_SPI_Init+0x6e>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a78      	ldr	r2, [pc, #480]	@ (800b60c <HAL_SPI_Init+0x244>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d002      	beq.n	800b436 <HAL_SPI_Init+0x6e>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b08      	cmp	r3, #8
 800b434:	d811      	bhi.n	800b45a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b43a:	4a72      	ldr	r2, [pc, #456]	@ (800b604 <HAL_SPI_Init+0x23c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d009      	beq.n	800b454 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a70      	ldr	r2, [pc, #448]	@ (800b608 <HAL_SPI_Init+0x240>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_SPI_Init+0x8c>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a6f      	ldr	r2, [pc, #444]	@ (800b60c <HAL_SPI_Init+0x244>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d104      	bne.n	800b45e <HAL_SPI_Init+0x96>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b10      	cmp	r3, #16
 800b458:	d901      	bls.n	800b45e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e0cd      	b.n	800b5fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7f6 fdc0 	bl	8001ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b49a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4a4:	d119      	bne.n	800b4da <HAL_SPI_Init+0x112>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4ae:	d103      	bne.n	800b4b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10c      	bne.n	800b4da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4c8:	d107      	bne.n	800b4da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00f      	beq.n	800b506 <HAL_SPI_Init+0x13e>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	2b06      	cmp	r3, #6
 800b4ec:	d90b      	bls.n	800b506 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	e007      	b.n	800b516 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b514:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69da      	ldr	r2, [r3, #28]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	431a      	orrs	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	431a      	orrs	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b528:	ea42 0103 	orr.w	r1, r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b546:	431a      	orrs	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	431a      	orrs	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	431a      	orrs	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	431a      	orrs	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	431a      	orrs	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	431a      	orrs	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b56a:	431a      	orrs	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	431a      	orrs	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b576:	ea42 0103 	orr.w	r1, r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d113      	bne.n	800b5b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b5b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0201 	bic.w	r2, r2, #1
 800b5c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	40013000 	.word	0x40013000
 800b608:	40003800 	.word	0x40003800
 800b60c:	40003c00 	.word	0x40003c00

0800b610 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af02      	add	r7, sp, #8
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4613      	mov	r3, r2
 800b61e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3320      	adds	r3, #32
 800b626:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b628:	f7f7 f8ba 	bl	80027a0 <HAL_GetTick>
 800b62c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b01      	cmp	r3, #1
 800b638:	d001      	beq.n	800b63e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b63a:	2302      	movs	r3, #2
 800b63c:	e1d1      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <HAL_SPI_Transmit+0x3a>
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e1c9      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_SPI_Transmit+0x4c>
 800b658:	2302      	movs	r3, #2
 800b65a:	e1c2      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2203      	movs	r2, #3
 800b668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	88fa      	ldrh	r2, [r7, #6]
 800b67e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	88fa      	ldrh	r2, [r7, #6]
 800b686:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b6b4:	d108      	bne.n	800b6c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	e009      	b.n	800b6dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b6da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	4b96      	ldr	r3, [pc, #600]	@ (800b93c <HAL_SPI_Transmit+0x32c>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	88f9      	ldrh	r1, [r7, #6]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f042 0201 	orr.w	r2, r2, #1
 800b6fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b708:	d107      	bne.n	800b71a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b0f      	cmp	r3, #15
 800b720:	d947      	bls.n	800b7b2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b722:	e03f      	b.n	800b7a4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	f003 0302 	and.w	r3, r3, #2
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d114      	bne.n	800b75c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6812      	ldr	r2, [r2, #0]
 800b73c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b742:	1d1a      	adds	r2, r3, #4
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b74e:	b29b      	uxth	r3, r3
 800b750:	3b01      	subs	r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b75a:	e023      	b.n	800b7a4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b75c:	f7f7 f820 	bl	80027a0 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d803      	bhi.n	800b774 <HAL_SPI_Transmit+0x164>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d102      	bne.n	800b77a <HAL_SPI_Transmit+0x16a>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d114      	bne.n	800b7a4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f936 	bl	800b9ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e11e      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1b9      	bne.n	800b724 <HAL_SPI_Transmit+0x114>
 800b7b0:	e0f1      	b.n	800b996 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	2b07      	cmp	r3, #7
 800b7b8:	f240 80e6 	bls.w	800b988 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b7bc:	e05d      	b.n	800b87a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d132      	bne.n	800b832 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d918      	bls.n	800b80a <HAL_SPI_Transmit+0x1fa>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d014      	beq.n	800b80a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6812      	ldr	r2, [r2, #0]
 800b7ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7f0:	1d1a      	adds	r2, r3, #4
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	3b02      	subs	r3, #2
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b808:	e037      	b.n	800b87a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b80e:	881a      	ldrh	r2, [r3, #0]
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b818:	1c9a      	adds	r2, r3, #2
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b830:	e023      	b.n	800b87a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b832:	f7f6 ffb5 	bl	80027a0 <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d803      	bhi.n	800b84a <HAL_SPI_Transmit+0x23a>
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b848:	d102      	bne.n	800b850 <HAL_SPI_Transmit+0x240>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d114      	bne.n	800b87a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f8cb 	bl	800b9ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b85c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e0b3      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b880:	b29b      	uxth	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d19b      	bne.n	800b7be <HAL_SPI_Transmit+0x1ae>
 800b886:	e086      	b.n	800b996 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b02      	cmp	r3, #2
 800b894:	d154      	bne.n	800b940 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d918      	bls.n	800b8d4 <HAL_SPI_Transmit+0x2c4>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a6:	2b40      	cmp	r3, #64	@ 0x40
 800b8a8:	d914      	bls.n	800b8d4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ba:	1d1a      	adds	r2, r3, #4
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3b04      	subs	r3, #4
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8d2:	e059      	b.n	800b988 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d917      	bls.n	800b910 <HAL_SPI_Transmit+0x300>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d013      	beq.n	800b910 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ec:	881a      	ldrh	r2, [r3, #0]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f6:	1c9a      	adds	r2, r3, #2
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b902:	b29b      	uxth	r3, r3
 800b904:	3b02      	subs	r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b90e:	e03b      	b.n	800b988 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3320      	adds	r3, #32
 800b91a:	7812      	ldrb	r2, [r2, #0]
 800b91c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b92e:	b29b      	uxth	r3, r3
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b93a:	e025      	b.n	800b988 <HAL_SPI_Transmit+0x378>
 800b93c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b940:	f7f6 ff2e 	bl	80027a0 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d803      	bhi.n	800b958 <HAL_SPI_Transmit+0x348>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b956:	d102      	bne.n	800b95e <HAL_SPI_Transmit+0x34e>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d114      	bne.n	800b988 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 f844 	bl	800b9ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b96a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e02c      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b98e:	b29b      	uxth	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	f47f af79 	bne.w	800b888 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2200      	movs	r2, #0
 800b99e:	2108      	movs	r1, #8
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f8c3 	bl	800bb2c <SPI_WaitOnFlagUntilTimeout>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9b2:	f043 0220 	orr.w	r2, r3, #32
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 f815 	bl	800b9ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e000      	b.n	800b9e2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
  }
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f042 0208 	orr.w	r2, r2, #8
 800ba0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	699a      	ldr	r2, [r3, #24]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f042 0210 	orr.w	r2, r2, #16
 800ba1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6919      	ldr	r1, [r3, #16]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	4b3c      	ldr	r3, [pc, #240]	@ (800bb28 <SPI_CloseTransfer+0x13c>)
 800ba38:	400b      	ands	r3, r1
 800ba3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ba4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d014      	beq.n	800ba82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00f      	beq.n	800ba82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 0220 	orr.w	r2, r2, #32
 800ba80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d014      	beq.n	800bab8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00f      	beq.n	800bab8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba9e:	f043 0204 	orr.w	r2, r3, #4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	699a      	ldr	r2, [r3, #24]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bab6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00f      	beq.n	800bae2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac8:	f043 0201 	orr.w	r2, r3, #1
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699a      	ldr	r2, [r3, #24]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bae0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00f      	beq.n	800bb0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf2:	f043 0208 	orr.w	r2, r3, #8
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	fffffc90 	.word	0xfffffc90

0800bb2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	603b      	str	r3, [r7, #0]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bb3c:	e010      	b.n	800bb60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb3e:	f7f6 fe2f 	bl	80027a0 <HAL_GetTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d803      	bhi.n	800bb56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb54:	d102      	bne.n	800bb5c <SPI_WaitOnFlagUntilTimeout+0x30>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e00f      	b.n	800bb80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695a      	ldr	r2, [r3, #20]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	bf0c      	ite	eq
 800bb70:	2301      	moveq	r3, #1
 800bb72:	2300      	movne	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	461a      	mov	r2, r3
 800bb78:	79fb      	ldrb	r3, [r7, #7]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d0df      	beq.n	800bb3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb94:	095b      	lsrs	r3, r3, #5
 800bb96:	3301      	adds	r3, #1
 800bb98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	3307      	adds	r3, #7
 800bba6:	08db      	lsrs	r3, r3, #3
 800bba8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	fb02 f303 	mul.w	r3, r2, r3
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e049      	b.n	800bc64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d106      	bne.n	800bbea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7f6 fa95 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2202      	movs	r2, #2
 800bbee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f000 fd59 	bl	800c6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d001      	beq.n	800bc84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e054      	b.n	800bd2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2202      	movs	r2, #2
 800bc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68da      	ldr	r2, [r3, #12]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f042 0201 	orr.w	r2, r2, #1
 800bc9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a26      	ldr	r2, [pc, #152]	@ (800bd3c <HAL_TIM_Base_Start_IT+0xd0>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d022      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcae:	d01d      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a22      	ldr	r2, [pc, #136]	@ (800bd40 <HAL_TIM_Base_Start_IT+0xd4>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d018      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a21      	ldr	r2, [pc, #132]	@ (800bd44 <HAL_TIM_Base_Start_IT+0xd8>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d013      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1f      	ldr	r2, [pc, #124]	@ (800bd48 <HAL_TIM_Base_Start_IT+0xdc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d00e      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd4c <HAL_TIM_Base_Start_IT+0xe0>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d009      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a1c      	ldr	r2, [pc, #112]	@ (800bd50 <HAL_TIM_Base_Start_IT+0xe4>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x80>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a1b      	ldr	r2, [pc, #108]	@ (800bd54 <HAL_TIM_Base_Start_IT+0xe8>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d115      	bne.n	800bd18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	4b19      	ldr	r3, [pc, #100]	@ (800bd58 <HAL_TIM_Base_Start_IT+0xec>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b06      	cmp	r3, #6
 800bcfc:	d015      	beq.n	800bd2a <HAL_TIM_Base_Start_IT+0xbe>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd04:	d011      	beq.n	800bd2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f042 0201 	orr.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd16:	e008      	b.n	800bd2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0201 	orr.w	r2, r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	e000      	b.n	800bd2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	40010000 	.word	0x40010000
 800bd40:	40000400 	.word	0x40000400
 800bd44:	40000800 	.word	0x40000800
 800bd48:	40000c00 	.word	0x40000c00
 800bd4c:	40010400 	.word	0x40010400
 800bd50:	40001800 	.word	0x40001800
 800bd54:	40014000 	.word	0x40014000
 800bd58:	00010007 	.word	0x00010007

0800bd5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e049      	b.n	800be02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f841 	bl	800be0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f000 fc8a 	bl	800c6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
	...

0800be20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <HAL_TIM_PWM_Start+0x24>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b01      	cmp	r3, #1
 800be3a:	bf14      	ite	ne
 800be3c:	2301      	movne	r3, #1
 800be3e:	2300      	moveq	r3, #0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	e03c      	b.n	800bebe <HAL_TIM_PWM_Start+0x9e>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b04      	cmp	r3, #4
 800be48:	d109      	bne.n	800be5e <HAL_TIM_PWM_Start+0x3e>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b01      	cmp	r3, #1
 800be54:	bf14      	ite	ne
 800be56:	2301      	movne	r3, #1
 800be58:	2300      	moveq	r3, #0
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	e02f      	b.n	800bebe <HAL_TIM_PWM_Start+0x9e>
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	2b08      	cmp	r3, #8
 800be62:	d109      	bne.n	800be78 <HAL_TIM_PWM_Start+0x58>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	bf14      	ite	ne
 800be70:	2301      	movne	r3, #1
 800be72:	2300      	moveq	r3, #0
 800be74:	b2db      	uxtb	r3, r3
 800be76:	e022      	b.n	800bebe <HAL_TIM_PWM_Start+0x9e>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b0c      	cmp	r3, #12
 800be7c:	d109      	bne.n	800be92 <HAL_TIM_PWM_Start+0x72>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b01      	cmp	r3, #1
 800be88:	bf14      	ite	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	2300      	moveq	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	e015      	b.n	800bebe <HAL_TIM_PWM_Start+0x9e>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2b10      	cmp	r3, #16
 800be96:	d109      	bne.n	800beac <HAL_TIM_PWM_Start+0x8c>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	bf14      	ite	ne
 800bea4:	2301      	movne	r3, #1
 800bea6:	2300      	moveq	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	e008      	b.n	800bebe <HAL_TIM_PWM_Start+0x9e>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	bf14      	ite	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	2300      	moveq	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e0a1      	b.n	800c00a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <HAL_TIM_PWM_Start+0xb6>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bed4:	e023      	b.n	800bf1e <HAL_TIM_PWM_Start+0xfe>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d104      	bne.n	800bee6 <HAL_TIM_PWM_Start+0xc6>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2202      	movs	r2, #2
 800bee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bee4:	e01b      	b.n	800bf1e <HAL_TIM_PWM_Start+0xfe>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d104      	bne.n	800bef6 <HAL_TIM_PWM_Start+0xd6>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2202      	movs	r2, #2
 800bef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bef4:	e013      	b.n	800bf1e <HAL_TIM_PWM_Start+0xfe>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b0c      	cmp	r3, #12
 800befa:	d104      	bne.n	800bf06 <HAL_TIM_PWM_Start+0xe6>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf04:	e00b      	b.n	800bf1e <HAL_TIM_PWM_Start+0xfe>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b10      	cmp	r3, #16
 800bf0a:	d104      	bne.n	800bf16 <HAL_TIM_PWM_Start+0xf6>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf14:	e003      	b.n	800bf1e <HAL_TIM_PWM_Start+0xfe>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2201      	movs	r2, #1
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 ffde 	bl	800cee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a38      	ldr	r2, [pc, #224]	@ (800c014 <HAL_TIM_PWM_Start+0x1f4>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d013      	beq.n	800bf5e <HAL_TIM_PWM_Start+0x13e>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a37      	ldr	r2, [pc, #220]	@ (800c018 <HAL_TIM_PWM_Start+0x1f8>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d00e      	beq.n	800bf5e <HAL_TIM_PWM_Start+0x13e>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a35      	ldr	r2, [pc, #212]	@ (800c01c <HAL_TIM_PWM_Start+0x1fc>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d009      	beq.n	800bf5e <HAL_TIM_PWM_Start+0x13e>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a34      	ldr	r2, [pc, #208]	@ (800c020 <HAL_TIM_PWM_Start+0x200>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d004      	beq.n	800bf5e <HAL_TIM_PWM_Start+0x13e>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a32      	ldr	r2, [pc, #200]	@ (800c024 <HAL_TIM_PWM_Start+0x204>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d101      	bne.n	800bf62 <HAL_TIM_PWM_Start+0x142>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e000      	b.n	800bf64 <HAL_TIM_PWM_Start+0x144>
 800bf62:	2300      	movs	r3, #0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a25      	ldr	r2, [pc, #148]	@ (800c014 <HAL_TIM_PWM_Start+0x1f4>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d022      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8a:	d01d      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a25      	ldr	r2, [pc, #148]	@ (800c028 <HAL_TIM_PWM_Start+0x208>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d018      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a24      	ldr	r2, [pc, #144]	@ (800c02c <HAL_TIM_PWM_Start+0x20c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d013      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a22      	ldr	r2, [pc, #136]	@ (800c030 <HAL_TIM_PWM_Start+0x210>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a1a      	ldr	r2, [pc, #104]	@ (800c018 <HAL_TIM_PWM_Start+0x1f8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d009      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a1e      	ldr	r2, [pc, #120]	@ (800c034 <HAL_TIM_PWM_Start+0x214>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d004      	beq.n	800bfc8 <HAL_TIM_PWM_Start+0x1a8>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a16      	ldr	r2, [pc, #88]	@ (800c01c <HAL_TIM_PWM_Start+0x1fc>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d115      	bne.n	800bff4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689a      	ldr	r2, [r3, #8]
 800bfce:	4b1a      	ldr	r3, [pc, #104]	@ (800c038 <HAL_TIM_PWM_Start+0x218>)
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b06      	cmp	r3, #6
 800bfd8:	d015      	beq.n	800c006 <HAL_TIM_PWM_Start+0x1e6>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe0:	d011      	beq.n	800c006 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f042 0201 	orr.w	r2, r2, #1
 800bff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff2:	e008      	b.n	800c006 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f042 0201 	orr.w	r2, r2, #1
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	e000      	b.n	800c008 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	40010000 	.word	0x40010000
 800c018:	40010400 	.word	0x40010400
 800c01c:	40014000 	.word	0x40014000
 800c020:	40014400 	.word	0x40014400
 800c024:	40014800 	.word	0x40014800
 800c028:	40000400 	.word	0x40000400
 800c02c:	40000800 	.word	0x40000800
 800c030:	40000c00 	.word	0x40000c00
 800c034:	40001800 	.word	0x40001800
 800c038:	00010007 	.word	0x00010007

0800c03c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d020      	beq.n	800c0a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f003 0302 	and.w	r3, r3, #2
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01b      	beq.n	800c0a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f06f 0202 	mvn.w	r2, #2
 800c070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 faf6 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c08c:	e005      	b.n	800c09a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fae8 	bl	800c664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 faf9 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	f003 0304 	and.w	r3, r3, #4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d020      	beq.n	800c0ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01b      	beq.n	800c0ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f06f 0204 	mvn.w	r2, #4
 800c0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fad0 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c0d8:	e005      	b.n	800c0e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fac2 	bl	800c664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fad3 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f003 0308 	and.w	r3, r3, #8
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d020      	beq.n	800c138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f003 0308 	and.w	r3, r3, #8
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d01b      	beq.n	800c138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f06f 0208 	mvn.w	r2, #8
 800c108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2204      	movs	r2, #4
 800c10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 faaa 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c124:	e005      	b.n	800c132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa9c 	bl	800c664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 faad 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f003 0310 	and.w	r3, r3, #16
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d020      	beq.n	800c184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f003 0310 	and.w	r3, r3, #16
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d01b      	beq.n	800c184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f06f 0210 	mvn.w	r2, #16
 800c154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2208      	movs	r2, #8
 800c15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa84 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c170:	e005      	b.n	800c17e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa76 	bl	800c664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa87 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00c      	beq.n	800c1a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	2b00      	cmp	r3, #0
 800c196:	d007      	beq.n	800c1a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f06f 0201 	mvn.w	r2, #1
 800c1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7f5 fb62 	bl	800186c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00c      	beq.n	800c1d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d007      	beq.n	800c1d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 ffc5 	bl	800d160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00c      	beq.n	800c1fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c1f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 ffbd 	bl	800d174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00c      	beq.n	800c21e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d007      	beq.n	800c21e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fa41 	bl	800c6a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	f003 0320 	and.w	r3, r3, #32
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00c      	beq.n	800c242 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d007      	beq.n	800c242 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f06f 0220 	mvn.w	r2, #32
 800c23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 ff85 	bl	800d14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c242:	bf00      	nop
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c266:	2302      	movs	r3, #2
 800c268:	e0ff      	b.n	800c46a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b14      	cmp	r3, #20
 800c276:	f200 80f0 	bhi.w	800c45a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c2d5 	.word	0x0800c2d5
 800c284:	0800c45b 	.word	0x0800c45b
 800c288:	0800c45b 	.word	0x0800c45b
 800c28c:	0800c45b 	.word	0x0800c45b
 800c290:	0800c315 	.word	0x0800c315
 800c294:	0800c45b 	.word	0x0800c45b
 800c298:	0800c45b 	.word	0x0800c45b
 800c29c:	0800c45b 	.word	0x0800c45b
 800c2a0:	0800c357 	.word	0x0800c357
 800c2a4:	0800c45b 	.word	0x0800c45b
 800c2a8:	0800c45b 	.word	0x0800c45b
 800c2ac:	0800c45b 	.word	0x0800c45b
 800c2b0:	0800c397 	.word	0x0800c397
 800c2b4:	0800c45b 	.word	0x0800c45b
 800c2b8:	0800c45b 	.word	0x0800c45b
 800c2bc:	0800c45b 	.word	0x0800c45b
 800c2c0:	0800c3d9 	.word	0x0800c3d9
 800c2c4:	0800c45b 	.word	0x0800c45b
 800c2c8:	0800c45b 	.word	0x0800c45b
 800c2cc:	0800c45b 	.word	0x0800c45b
 800c2d0:	0800c419 	.word	0x0800c419
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fa90 	bl	800c800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f042 0208 	orr.w	r2, r2, #8
 800c2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 0204 	bic.w	r2, r2, #4
 800c2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6999      	ldr	r1, [r3, #24]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	619a      	str	r2, [r3, #24]
      break;
 800c312:	e0a5      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fb00 	bl	800c920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	699a      	ldr	r2, [r3, #24]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	699a      	ldr	r2, [r3, #24]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6999      	ldr	r1, [r3, #24]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	021a      	lsls	r2, r3, #8
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	619a      	str	r2, [r3, #24]
      break;
 800c354:	e084      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fb69 	bl	800ca34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69da      	ldr	r2, [r3, #28]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0208 	orr.w	r2, r2, #8
 800c370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69da      	ldr	r2, [r3, #28]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0204 	bic.w	r2, r2, #4
 800c380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69d9      	ldr	r1, [r3, #28]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	691a      	ldr	r2, [r3, #16]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	61da      	str	r2, [r3, #28]
      break;
 800c394:	e064      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 fbd1 	bl	800cb44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	69da      	ldr	r2, [r3, #28]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	69da      	ldr	r2, [r3, #28]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	69d9      	ldr	r1, [r3, #28]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	021a      	lsls	r2, r3, #8
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	61da      	str	r2, [r3, #28]
      break;
 800c3d6:	e043      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 fc1a 	bl	800cc18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0208 	orr.w	r2, r2, #8
 800c3f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 0204 	bic.w	r2, r2, #4
 800c402:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	691a      	ldr	r2, [r3, #16]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c416:	e023      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68b9      	ldr	r1, [r7, #8]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fc5e 	bl	800cce0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c432:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c442:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	021a      	lsls	r2, r3, #8
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c458:	e002      	b.n	800c460 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
      break;
 800c45e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c468:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop

0800c474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_TIM_ConfigClockSource+0x1c>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e0dc      	b.n	800c64a <HAL_TIM_ConfigClockSource+0x1d6>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2202      	movs	r2, #2
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	4b6a      	ldr	r3, [pc, #424]	@ (800c654 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a64      	ldr	r2, [pc, #400]	@ (800c658 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	f000 80a9 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c4cc:	4a62      	ldr	r2, [pc, #392]	@ (800c658 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	f200 80ae 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4d4:	4a61      	ldr	r2, [pc, #388]	@ (800c65c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	f000 80a1 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	@ (800c65c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	f200 80a6 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4e4:	4a5e      	ldr	r2, [pc, #376]	@ (800c660 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	f000 8099 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c4ec:	4a5c      	ldr	r2, [pc, #368]	@ (800c660 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	f200 809e 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c4f8:	f000 8091 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c4fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c500:	f200 8096 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c508:	f000 8089 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c50c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c510:	f200 808e 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c518:	d03e      	beq.n	800c598 <HAL_TIM_ConfigClockSource+0x124>
 800c51a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c51e:	f200 8087 	bhi.w	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c526:	f000 8086 	beq.w	800c636 <HAL_TIM_ConfigClockSource+0x1c2>
 800c52a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c52e:	d87f      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c530:	2b70      	cmp	r3, #112	@ 0x70
 800c532:	d01a      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0xf6>
 800c534:	2b70      	cmp	r3, #112	@ 0x70
 800c536:	d87b      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c538:	2b60      	cmp	r3, #96	@ 0x60
 800c53a:	d050      	beq.n	800c5de <HAL_TIM_ConfigClockSource+0x16a>
 800c53c:	2b60      	cmp	r3, #96	@ 0x60
 800c53e:	d877      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c540:	2b50      	cmp	r3, #80	@ 0x50
 800c542:	d03c      	beq.n	800c5be <HAL_TIM_ConfigClockSource+0x14a>
 800c544:	2b50      	cmp	r3, #80	@ 0x50
 800c546:	d873      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c548:	2b40      	cmp	r3, #64	@ 0x40
 800c54a:	d058      	beq.n	800c5fe <HAL_TIM_ConfigClockSource+0x18a>
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	d86f      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c550:	2b30      	cmp	r3, #48	@ 0x30
 800c552:	d064      	beq.n	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c554:	2b30      	cmp	r3, #48	@ 0x30
 800c556:	d86b      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c558:	2b20      	cmp	r3, #32
 800c55a:	d060      	beq.n	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d867      	bhi.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
 800c560:	2b00      	cmp	r3, #0
 800c562:	d05c      	beq.n	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c564:	2b10      	cmp	r3, #16
 800c566:	d05a      	beq.n	800c61e <HAL_TIM_ConfigClockSource+0x1aa>
 800c568:	e062      	b.n	800c630 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c57a:	f000 fc95 	bl	800cea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c58c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	609a      	str	r2, [r3, #8]
      break;
 800c596:	e04f      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c5a8:	f000 fc7e 	bl	800cea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	689a      	ldr	r2, [r3, #8]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c5ba:	609a      	str	r2, [r3, #8]
      break;
 800c5bc:	e03c      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f000 fbee 	bl	800cdac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2150      	movs	r1, #80	@ 0x50
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 fc48 	bl	800ce6c <TIM_ITRx_SetConfig>
      break;
 800c5dc:	e02c      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f000 fc0d 	bl	800ce0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2160      	movs	r1, #96	@ 0x60
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fc38 	bl	800ce6c <TIM_ITRx_SetConfig>
      break;
 800c5fc:	e01c      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c60a:	461a      	mov	r2, r3
 800c60c:	f000 fbce 	bl	800cdac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2140      	movs	r1, #64	@ 0x40
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fc28 	bl	800ce6c <TIM_ITRx_SetConfig>
      break;
 800c61c:	e00c      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f000 fc1f 	bl	800ce6c <TIM_ITRx_SetConfig>
      break;
 800c62e:	e003      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	73fb      	strb	r3, [r7, #15]
      break;
 800c634:	e000      	b.n	800c638 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	ffceff88 	.word	0xffceff88
 800c658:	00100040 	.word	0x00100040
 800c65c:	00100030 	.word	0x00100030
 800c660:	00100020 	.word	0x00100020

0800c664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a46      	ldr	r2, [pc, #280]	@ (800c7e0 <TIM_Base_SetConfig+0x12c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d013      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d2:	d00f      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a43      	ldr	r2, [pc, #268]	@ (800c7e4 <TIM_Base_SetConfig+0x130>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d00b      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a42      	ldr	r2, [pc, #264]	@ (800c7e8 <TIM_Base_SetConfig+0x134>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d007      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a41      	ldr	r2, [pc, #260]	@ (800c7ec <TIM_Base_SetConfig+0x138>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a40      	ldr	r2, [pc, #256]	@ (800c7f0 <TIM_Base_SetConfig+0x13c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d108      	bne.n	800c706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a35      	ldr	r2, [pc, #212]	@ (800c7e0 <TIM_Base_SetConfig+0x12c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d01f      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c714:	d01b      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a32      	ldr	r2, [pc, #200]	@ (800c7e4 <TIM_Base_SetConfig+0x130>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d017      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a31      	ldr	r2, [pc, #196]	@ (800c7e8 <TIM_Base_SetConfig+0x134>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d013      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a30      	ldr	r2, [pc, #192]	@ (800c7ec <TIM_Base_SetConfig+0x138>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d00f      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a2f      	ldr	r2, [pc, #188]	@ (800c7f0 <TIM_Base_SetConfig+0x13c>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d00b      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a2e      	ldr	r2, [pc, #184]	@ (800c7f4 <TIM_Base_SetConfig+0x140>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d007      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a2d      	ldr	r2, [pc, #180]	@ (800c7f8 <TIM_Base_SetConfig+0x144>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d003      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a2c      	ldr	r2, [pc, #176]	@ (800c7fc <TIM_Base_SetConfig+0x148>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d108      	bne.n	800c760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a16      	ldr	r2, [pc, #88]	@ (800c7e0 <TIM_Base_SetConfig+0x12c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d00f      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a18      	ldr	r2, [pc, #96]	@ (800c7f0 <TIM_Base_SetConfig+0x13c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00b      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a17      	ldr	r2, [pc, #92]	@ (800c7f4 <TIM_Base_SetConfig+0x140>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d007      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a16      	ldr	r2, [pc, #88]	@ (800c7f8 <TIM_Base_SetConfig+0x144>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d003      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a15      	ldr	r2, [pc, #84]	@ (800c7fc <TIM_Base_SetConfig+0x148>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d103      	bne.n	800c7b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	691a      	ldr	r2, [r3, #16]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f003 0301 	and.w	r3, r3, #1
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d105      	bne.n	800c7d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	f023 0201 	bic.w	r2, r3, #1
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	611a      	str	r2, [r3, #16]
  }
}
 800c7d2:	bf00      	nop
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	40010000 	.word	0x40010000
 800c7e4:	40000400 	.word	0x40000400
 800c7e8:	40000800 	.word	0x40000800
 800c7ec:	40000c00 	.word	0x40000c00
 800c7f0:	40010400 	.word	0x40010400
 800c7f4:	40014000 	.word	0x40014000
 800c7f8:	40014400 	.word	0x40014400
 800c7fc:	40014800 	.word	0x40014800

0800c800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	f023 0201 	bic.w	r2, r3, #1
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	4b37      	ldr	r3, [pc, #220]	@ (800c908 <TIM_OC1_SetConfig+0x108>)
 800c82c:	4013      	ands	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f023 0303 	bic.w	r3, r3, #3
 800c836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	4313      	orrs	r3, r2
 800c840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f023 0302 	bic.w	r3, r3, #2
 800c848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	4313      	orrs	r3, r2
 800c852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a2d      	ldr	r2, [pc, #180]	@ (800c90c <TIM_OC1_SetConfig+0x10c>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d00f      	beq.n	800c87c <TIM_OC1_SetConfig+0x7c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a2c      	ldr	r2, [pc, #176]	@ (800c910 <TIM_OC1_SetConfig+0x110>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d00b      	beq.n	800c87c <TIM_OC1_SetConfig+0x7c>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a2b      	ldr	r2, [pc, #172]	@ (800c914 <TIM_OC1_SetConfig+0x114>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d007      	beq.n	800c87c <TIM_OC1_SetConfig+0x7c>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a2a      	ldr	r2, [pc, #168]	@ (800c918 <TIM_OC1_SetConfig+0x118>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d003      	beq.n	800c87c <TIM_OC1_SetConfig+0x7c>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a29      	ldr	r2, [pc, #164]	@ (800c91c <TIM_OC1_SetConfig+0x11c>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d10c      	bne.n	800c896 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f023 0308 	bic.w	r3, r3, #8
 800c882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f023 0304 	bic.w	r3, r3, #4
 800c894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a1c      	ldr	r2, [pc, #112]	@ (800c90c <TIM_OC1_SetConfig+0x10c>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d00f      	beq.n	800c8be <TIM_OC1_SetConfig+0xbe>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c910 <TIM_OC1_SetConfig+0x110>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d00b      	beq.n	800c8be <TIM_OC1_SetConfig+0xbe>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c914 <TIM_OC1_SetConfig+0x114>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d007      	beq.n	800c8be <TIM_OC1_SetConfig+0xbe>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a19      	ldr	r2, [pc, #100]	@ (800c918 <TIM_OC1_SetConfig+0x118>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d003      	beq.n	800c8be <TIM_OC1_SetConfig+0xbe>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a18      	ldr	r2, [pc, #96]	@ (800c91c <TIM_OC1_SetConfig+0x11c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d111      	bne.n	800c8e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c8cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	621a      	str	r2, [r3, #32]
}
 800c8fc:	bf00      	nop
 800c8fe:	371c      	adds	r7, #28
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	fffeff8f 	.word	0xfffeff8f
 800c90c:	40010000 	.word	0x40010000
 800c910:	40010400 	.word	0x40010400
 800c914:	40014000 	.word	0x40014000
 800c918:	40014400 	.word	0x40014400
 800c91c:	40014800 	.word	0x40014800

0800c920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	f023 0210 	bic.w	r2, r3, #16
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4b34      	ldr	r3, [pc, #208]	@ (800ca1c <TIM_OC2_SetConfig+0xfc>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	021b      	lsls	r3, r3, #8
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	4313      	orrs	r3, r2
 800c962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f023 0320 	bic.w	r3, r3, #32
 800c96a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4313      	orrs	r3, r2
 800c976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a29      	ldr	r2, [pc, #164]	@ (800ca20 <TIM_OC2_SetConfig+0x100>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d003      	beq.n	800c988 <TIM_OC2_SetConfig+0x68>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a28      	ldr	r2, [pc, #160]	@ (800ca24 <TIM_OC2_SetConfig+0x104>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d10d      	bne.n	800c9a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c98e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	011b      	lsls	r3, r3, #4
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4313      	orrs	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca20 <TIM_OC2_SetConfig+0x100>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d00f      	beq.n	800c9cc <TIM_OC2_SetConfig+0xac>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a1d      	ldr	r2, [pc, #116]	@ (800ca24 <TIM_OC2_SetConfig+0x104>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d00b      	beq.n	800c9cc <TIM_OC2_SetConfig+0xac>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	@ (800ca28 <TIM_OC2_SetConfig+0x108>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d007      	beq.n	800c9cc <TIM_OC2_SetConfig+0xac>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a1b      	ldr	r2, [pc, #108]	@ (800ca2c <TIM_OC2_SetConfig+0x10c>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d003      	beq.n	800c9cc <TIM_OC2_SetConfig+0xac>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a1a      	ldr	r2, [pc, #104]	@ (800ca30 <TIM_OC2_SetConfig+0x110>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d113      	bne.n	800c9f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	699b      	ldr	r3, [r3, #24]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	697a      	ldr	r2, [r7, #20]
 800ca0c:	621a      	str	r2, [r3, #32]
}
 800ca0e:	bf00      	nop
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	feff8fff 	.word	0xfeff8fff
 800ca20:	40010000 	.word	0x40010000
 800ca24:	40010400 	.word	0x40010400
 800ca28:	40014000 	.word	0x40014000
 800ca2c:	40014400 	.word	0x40014400
 800ca30:	40014800 	.word	0x40014800

0800ca34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4b33      	ldr	r3, [pc, #204]	@ (800cb2c <TIM_OC3_SetConfig+0xf8>)
 800ca60:	4013      	ands	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0303 	bic.w	r3, r3, #3
 800ca6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	021b      	lsls	r3, r3, #8
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a28      	ldr	r2, [pc, #160]	@ (800cb30 <TIM_OC3_SetConfig+0xfc>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d003      	beq.n	800ca9a <TIM_OC3_SetConfig+0x66>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a27      	ldr	r2, [pc, #156]	@ (800cb34 <TIM_OC3_SetConfig+0x100>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d10d      	bne.n	800cab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800caa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	021b      	lsls	r3, r3, #8
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	4313      	orrs	r3, r2
 800caac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb30 <TIM_OC3_SetConfig+0xfc>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00f      	beq.n	800cade <TIM_OC3_SetConfig+0xaa>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a1c      	ldr	r2, [pc, #112]	@ (800cb34 <TIM_OC3_SetConfig+0x100>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00b      	beq.n	800cade <TIM_OC3_SetConfig+0xaa>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a1b      	ldr	r2, [pc, #108]	@ (800cb38 <TIM_OC3_SetConfig+0x104>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d007      	beq.n	800cade <TIM_OC3_SetConfig+0xaa>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a1a      	ldr	r2, [pc, #104]	@ (800cb3c <TIM_OC3_SetConfig+0x108>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d003      	beq.n	800cade <TIM_OC3_SetConfig+0xaa>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a19      	ldr	r2, [pc, #100]	@ (800cb40 <TIM_OC3_SetConfig+0x10c>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d113      	bne.n	800cb06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800caec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	011b      	lsls	r3, r3, #4
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	011b      	lsls	r3, r3, #4
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	621a      	str	r2, [r3, #32]
}
 800cb20:	bf00      	nop
 800cb22:	371c      	adds	r7, #28
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	fffeff8f 	.word	0xfffeff8f
 800cb30:	40010000 	.word	0x40010000
 800cb34:	40010400 	.word	0x40010400
 800cb38:	40014000 	.word	0x40014000
 800cb3c:	40014400 	.word	0x40014400
 800cb40:	40014800 	.word	0x40014800

0800cb44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	4b24      	ldr	r3, [pc, #144]	@ (800cc00 <TIM_OC4_SetConfig+0xbc>)
 800cb70:	4013      	ands	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	021b      	lsls	r3, r3, #8
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	031b      	lsls	r3, r3, #12
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a19      	ldr	r2, [pc, #100]	@ (800cc04 <TIM_OC4_SetConfig+0xc0>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d00f      	beq.n	800cbc4 <TIM_OC4_SetConfig+0x80>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a18      	ldr	r2, [pc, #96]	@ (800cc08 <TIM_OC4_SetConfig+0xc4>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d00b      	beq.n	800cbc4 <TIM_OC4_SetConfig+0x80>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a17      	ldr	r2, [pc, #92]	@ (800cc0c <TIM_OC4_SetConfig+0xc8>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d007      	beq.n	800cbc4 <TIM_OC4_SetConfig+0x80>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a16      	ldr	r2, [pc, #88]	@ (800cc10 <TIM_OC4_SetConfig+0xcc>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d003      	beq.n	800cbc4 <TIM_OC4_SetConfig+0x80>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a15      	ldr	r2, [pc, #84]	@ (800cc14 <TIM_OC4_SetConfig+0xd0>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d109      	bne.n	800cbd8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	019b      	lsls	r3, r3, #6
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	621a      	str	r2, [r3, #32]
}
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	feff8fff 	.word	0xfeff8fff
 800cc04:	40010000 	.word	0x40010000
 800cc08:	40010400 	.word	0x40010400
 800cc0c:	40014000 	.word	0x40014000
 800cc10:	40014400 	.word	0x40014400
 800cc14:	40014800 	.word	0x40014800

0800cc18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a1b      	ldr	r3, [r3, #32]
 800cc2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4b21      	ldr	r3, [pc, #132]	@ (800ccc8 <TIM_OC5_SetConfig+0xb0>)
 800cc44:	4013      	ands	r3, r2
 800cc46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cc58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	041b      	lsls	r3, r3, #16
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a18      	ldr	r2, [pc, #96]	@ (800cccc <TIM_OC5_SetConfig+0xb4>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d00f      	beq.n	800cc8e <TIM_OC5_SetConfig+0x76>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a17      	ldr	r2, [pc, #92]	@ (800ccd0 <TIM_OC5_SetConfig+0xb8>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d00b      	beq.n	800cc8e <TIM_OC5_SetConfig+0x76>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a16      	ldr	r2, [pc, #88]	@ (800ccd4 <TIM_OC5_SetConfig+0xbc>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d007      	beq.n	800cc8e <TIM_OC5_SetConfig+0x76>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a15      	ldr	r2, [pc, #84]	@ (800ccd8 <TIM_OC5_SetConfig+0xc0>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d003      	beq.n	800cc8e <TIM_OC5_SetConfig+0x76>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a14      	ldr	r2, [pc, #80]	@ (800ccdc <TIM_OC5_SetConfig+0xc4>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d109      	bne.n	800cca2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	021b      	lsls	r3, r3, #8
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	621a      	str	r2, [r3, #32]
}
 800ccbc:	bf00      	nop
 800ccbe:	371c      	adds	r7, #28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	fffeff8f 	.word	0xfffeff8f
 800cccc:	40010000 	.word	0x40010000
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	40014000 	.word	0x40014000
 800ccd8:	40014400 	.word	0x40014400
 800ccdc:	40014800 	.word	0x40014800

0800cce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a1b      	ldr	r3, [r3, #32]
 800ccf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	4b22      	ldr	r3, [pc, #136]	@ (800cd94 <TIM_OC6_SetConfig+0xb4>)
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	051b      	lsls	r3, r3, #20
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a19      	ldr	r2, [pc, #100]	@ (800cd98 <TIM_OC6_SetConfig+0xb8>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d00f      	beq.n	800cd58 <TIM_OC6_SetConfig+0x78>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a18      	ldr	r2, [pc, #96]	@ (800cd9c <TIM_OC6_SetConfig+0xbc>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d00b      	beq.n	800cd58 <TIM_OC6_SetConfig+0x78>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a17      	ldr	r2, [pc, #92]	@ (800cda0 <TIM_OC6_SetConfig+0xc0>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d007      	beq.n	800cd58 <TIM_OC6_SetConfig+0x78>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a16      	ldr	r2, [pc, #88]	@ (800cda4 <TIM_OC6_SetConfig+0xc4>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d003      	beq.n	800cd58 <TIM_OC6_SetConfig+0x78>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a15      	ldr	r2, [pc, #84]	@ (800cda8 <TIM_OC6_SetConfig+0xc8>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d109      	bne.n	800cd6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	029b      	lsls	r3, r3, #10
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	621a      	str	r2, [r3, #32]
}
 800cd86:	bf00      	nop
 800cd88:	371c      	adds	r7, #28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	feff8fff 	.word	0xfeff8fff
 800cd98:	40010000 	.word	0x40010000
 800cd9c:	40010400 	.word	0x40010400
 800cda0:	40014000 	.word	0x40014000
 800cda4:	40014400 	.word	0x40014400
 800cda8:	40014800 	.word	0x40014800

0800cdac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	f023 0201 	bic.w	r2, r3, #1
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cdd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	011b      	lsls	r3, r3, #4
 800cddc:	693a      	ldr	r2, [r7, #16]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f023 030a 	bic.w	r3, r3, #10
 800cde8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	621a      	str	r2, [r3, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	371c      	adds	r7, #28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b087      	sub	sp, #28
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	60f8      	str	r0, [r7, #12]
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6a1b      	ldr	r3, [r3, #32]
 800ce20:	f023 0210 	bic.w	r2, r3, #16
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	031b      	lsls	r3, r3, #12
 800ce3a:	693a      	ldr	r2, [r7, #16]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	011b      	lsls	r3, r3, #4
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	621a      	str	r2, [r3, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
	...

0800ce6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	4b09      	ldr	r3, [pc, #36]	@ (800cea4 <TIM_ITRx_SetConfig+0x38>)
 800ce80:	4013      	ands	r3, r2
 800ce82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	f043 0307 	orr.w	r3, r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	609a      	str	r2, [r3, #8]
}
 800ce96:	bf00      	nop
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	ffcfff8f 	.word	0xffcfff8f

0800cea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b087      	sub	sp, #28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	021a      	lsls	r2, r3, #8
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4313      	orrs	r3, r2
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	609a      	str	r2, [r3, #8]
}
 800cedc:	bf00      	nop
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	f003 031f 	and.w	r3, r3, #31
 800cefa:	2201      	movs	r2, #1
 800cefc:	fa02 f303 	lsl.w	r3, r2, r3
 800cf00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6a1a      	ldr	r2, [r3, #32]
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	43db      	mvns	r3, r3
 800cf0a:	401a      	ands	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6a1a      	ldr	r2, [r3, #32]
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	f003 031f 	and.w	r3, r3, #31
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf20:	431a      	orrs	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	621a      	str	r2, [r3, #32]
}
 800cf26:	bf00      	nop
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
	...

0800cf34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d101      	bne.n	800cf4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e06d      	b.n	800d028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a30      	ldr	r2, [pc, #192]	@ (800d034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d004      	beq.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a2f      	ldr	r2, [pc, #188]	@ (800d038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d108      	bne.n	800cf92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a20      	ldr	r2, [pc, #128]	@ (800d034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d022      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfbe:	d01d      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a1d      	ldr	r2, [pc, #116]	@ (800d03c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d018      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a1c      	ldr	r2, [pc, #112]	@ (800d040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d013      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a1a      	ldr	r2, [pc, #104]	@ (800d044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d00e      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a15      	ldr	r2, [pc, #84]	@ (800d038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d009      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a16      	ldr	r2, [pc, #88]	@ (800d048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d004      	beq.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a15      	ldr	r2, [pc, #84]	@ (800d04c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d10c      	bne.n	800d016 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	40010000 	.word	0x40010000
 800d038:	40010400 	.word	0x40010400
 800d03c:	40000400 	.word	0x40000400
 800d040:	40000800 	.word	0x40000800
 800d044:	40000c00 	.word	0x40000c00
 800d048:	40001800 	.word	0x40001800
 800d04c:	40014000 	.word	0x40014000

0800d050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d05a:	2300      	movs	r3, #0
 800d05c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d064:	2b01      	cmp	r3, #1
 800d066:	d101      	bne.n	800d06c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d068:	2302      	movs	r3, #2
 800d06a:	e065      	b.n	800d138 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	041b      	lsls	r3, r3, #16
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a16      	ldr	r2, [pc, #88]	@ (800d144 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d004      	beq.n	800d0fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a14      	ldr	r2, [pc, #80]	@ (800d148 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d115      	bne.n	800d126 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d104:	051b      	lsls	r3, r3, #20
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	4313      	orrs	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	40010000 	.word	0x40010000
 800d148:	40010400 	.word	0x40010400

0800d14c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e042      	b.n	800d220 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7f5 f80f 	bl	80021d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2224      	movs	r2, #36	@ 0x24
 800d1b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f022 0201 	bic.w	r2, r2, #1
 800d1c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 f9b6 	bl	800e544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fc4b 	bl	800da74 <UART_SetConfig>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d101      	bne.n	800d1e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e01b      	b.n	800d220 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689a      	ldr	r2, [r3, #8]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0201 	orr.w	r2, r2, #1
 800d216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 fa35 	bl	800e688 <UART_CheckIdleState>
 800d21e:	4603      	mov	r3, r0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b08a      	sub	sp, #40	@ 0x28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d23c:	2b20      	cmp	r3, #32
 800d23e:	d137      	bne.n	800d2b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <HAL_UART_Receive_IT+0x24>
 800d246:	88fb      	ldrh	r3, [r7, #6]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e030      	b.n	800d2b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a18      	ldr	r2, [pc, #96]	@ (800d2bc <HAL_UART_Receive_IT+0x94>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d01f      	beq.n	800d2a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d018      	beq.n	800d2a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	613b      	str	r3, [r7, #16]
   return(result);
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d282:	627b      	str	r3, [r7, #36]	@ 0x24
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	461a      	mov	r2, r3
 800d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	69f9      	ldr	r1, [r7, #28]
 800d292:	6a3a      	ldr	r2, [r7, #32]
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	61bb      	str	r3, [r7, #24]
   return(result);
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e6      	bne.n	800d26e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f001 fb06 	bl	800e8b8 <UART_Start_Receive_IT>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	e000      	b.n	800d2b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d2b0:	2302      	movs	r3, #2
  }
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3728      	adds	r7, #40	@ 0x28
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	58000c00 	.word	0x58000c00

0800d2c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b0ba      	sub	sp, #232	@ 0xe8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d2ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d2f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d11b      	bne.n	800d334 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d300:	f003 0320 	and.w	r3, r3, #32
 800d304:	2b00      	cmp	r3, #0
 800d306:	d015      	beq.n	800d334 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d30c:	f003 0320 	and.w	r3, r3, #32
 800d310:	2b00      	cmp	r3, #0
 800d312:	d105      	bne.n	800d320 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d009      	beq.n	800d334 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 8377 	beq.w	800da18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	4798      	blx	r3
      }
      return;
 800d332:	e371      	b.n	800da18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 8123 	beq.w	800d584 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d33e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d342:	4b8d      	ldr	r3, [pc, #564]	@ (800d578 <HAL_UART_IRQHandler+0x2b8>)
 800d344:	4013      	ands	r3, r2
 800d346:	2b00      	cmp	r3, #0
 800d348:	d106      	bne.n	800d358 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d34a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d34e:	4b8b      	ldr	r3, [pc, #556]	@ (800d57c <HAL_UART_IRQHandler+0x2bc>)
 800d350:	4013      	ands	r3, r2
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 8116 	beq.w	800d584 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d011      	beq.n	800d388 <HAL_UART_IRQHandler+0xc8>
 800d364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00b      	beq.n	800d388 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2201      	movs	r2, #1
 800d376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d37e:	f043 0201 	orr.w	r2, r3, #1
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d38c:	f003 0302 	and.w	r3, r3, #2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d011      	beq.n	800d3b8 <HAL_UART_IRQHandler+0xf8>
 800d394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ae:	f043 0204 	orr.w	r2, r3, #4
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d011      	beq.n	800d3e8 <HAL_UART_IRQHandler+0x128>
 800d3c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00b      	beq.n	800d3e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2204      	movs	r2, #4
 800d3d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3de:	f043 0202 	orr.w	r2, r3, #2
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3ec:	f003 0308 	and.w	r3, r3, #8
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d017      	beq.n	800d424 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3f8:	f003 0320 	and.w	r3, r3, #32
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d105      	bne.n	800d40c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d404:	4b5c      	ldr	r3, [pc, #368]	@ (800d578 <HAL_UART_IRQHandler+0x2b8>)
 800d406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2208      	movs	r2, #8
 800d412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d41a:	f043 0208 	orr.w	r2, r3, #8
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d012      	beq.n	800d456 <HAL_UART_IRQHandler+0x196>
 800d430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00c      	beq.n	800d456 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d44c:	f043 0220 	orr.w	r2, r3, #32
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 82dd 	beq.w	800da1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d466:	f003 0320 	and.w	r3, r3, #32
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d013      	beq.n	800d496 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d472:	f003 0320 	and.w	r3, r3, #32
 800d476:	2b00      	cmp	r3, #0
 800d478:	d105      	bne.n	800d486 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d47e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d007      	beq.n	800d496 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d003      	beq.n	800d496 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d49c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4aa:	2b40      	cmp	r3, #64	@ 0x40
 800d4ac:	d005      	beq.n	800d4ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d054      	beq.n	800d564 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f001 fb1e 	bl	800eafc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ca:	2b40      	cmp	r3, #64	@ 0x40
 800d4cc:	d146      	bne.n	800d55c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d4e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d4e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d4fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d4fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d50a:	e841 2300 	strex	r3, r2, [r1]
 800d50e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1d9      	bne.n	800d4ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d520:	2b00      	cmp	r3, #0
 800d522:	d017      	beq.n	800d554 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d52a:	4a15      	ldr	r2, [pc, #84]	@ (800d580 <HAL_UART_IRQHandler+0x2c0>)
 800d52c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d534:	4618      	mov	r0, r3
 800d536:	f7f6 f941 	bl	80037bc <HAL_DMA_Abort_IT>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d019      	beq.n	800d574 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d54e:	4610      	mov	r0, r2
 800d550:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d552:	e00f      	b.n	800d574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fa77 	bl	800da48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d55a:	e00b      	b.n	800d574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa73 	bl	800da48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d562:	e007      	b.n	800d574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa6f 	bl	800da48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d572:	e253      	b.n	800da1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d574:	bf00      	nop
    return;
 800d576:	e251      	b.n	800da1c <HAL_UART_IRQHandler+0x75c>
 800d578:	10000001 	.word	0x10000001
 800d57c:	04000120 	.word	0x04000120
 800d580:	0800ebc9 	.word	0x0800ebc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d588:	2b01      	cmp	r3, #1
 800d58a:	f040 81e7 	bne.w	800d95c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d592:	f003 0310 	and.w	r3, r3, #16
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 81e0 	beq.w	800d95c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a0:	f003 0310 	and.w	r3, r3, #16
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 81d9 	beq.w	800d95c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5bc:	2b40      	cmp	r3, #64	@ 0x40
 800d5be:	f040 8151 	bne.w	800d864 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a96      	ldr	r2, [pc, #600]	@ (800d824 <HAL_UART_IRQHandler+0x564>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d068      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a93      	ldr	r2, [pc, #588]	@ (800d828 <HAL_UART_IRQHandler+0x568>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d061      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a91      	ldr	r2, [pc, #580]	@ (800d82c <HAL_UART_IRQHandler+0x56c>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d05a      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a8e      	ldr	r2, [pc, #568]	@ (800d830 <HAL_UART_IRQHandler+0x570>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d053      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a8c      	ldr	r2, [pc, #560]	@ (800d834 <HAL_UART_IRQHandler+0x574>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d04c      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a89      	ldr	r2, [pc, #548]	@ (800d838 <HAL_UART_IRQHandler+0x578>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d045      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a87      	ldr	r2, [pc, #540]	@ (800d83c <HAL_UART_IRQHandler+0x57c>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d03e      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a84      	ldr	r2, [pc, #528]	@ (800d840 <HAL_UART_IRQHandler+0x580>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d037      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a82      	ldr	r2, [pc, #520]	@ (800d844 <HAL_UART_IRQHandler+0x584>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d030      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a7f      	ldr	r2, [pc, #508]	@ (800d848 <HAL_UART_IRQHandler+0x588>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d029      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a7d      	ldr	r2, [pc, #500]	@ (800d84c <HAL_UART_IRQHandler+0x58c>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d022      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a7a      	ldr	r2, [pc, #488]	@ (800d850 <HAL_UART_IRQHandler+0x590>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d01b      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a78      	ldr	r2, [pc, #480]	@ (800d854 <HAL_UART_IRQHandler+0x594>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d014      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a75      	ldr	r2, [pc, #468]	@ (800d858 <HAL_UART_IRQHandler+0x598>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d00d      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a73      	ldr	r2, [pc, #460]	@ (800d85c <HAL_UART_IRQHandler+0x59c>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d006      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x3e2>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a70      	ldr	r2, [pc, #448]	@ (800d860 <HAL_UART_IRQHandler+0x5a0>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d106      	bne.n	800d6b0 <HAL_UART_IRQHandler+0x3f0>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	e005      	b.n	800d6bc <HAL_UART_IRQHandler+0x3fc>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 81ab 	beq.w	800da20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	f080 81a3 	bcs.w	800da20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ea:	69db      	ldr	r3, [r3, #28]
 800d6ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f0:	f000 8087 	beq.w	800d802 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d700:	e853 3f00 	ldrex	r3, [r3]
 800d704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d70c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	461a      	mov	r2, r3
 800d71a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d71e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d722:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d72a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d72e:	e841 2300 	strex	r3, r2, [r1]
 800d732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1da      	bne.n	800d6f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3308      	adds	r3, #8
 800d744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d74e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d750:	f023 0301 	bic.w	r3, r3, #1
 800d754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3308      	adds	r3, #8
 800d75e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d76a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e1      	bne.n	800d73e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3308      	adds	r3, #8
 800d780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d784:	e853 3f00 	ldrex	r3, [r3]
 800d788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d78a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d78c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3308      	adds	r3, #8
 800d79a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d79e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7a6:	e841 2300 	strex	r3, r2, [r1]
 800d7aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e3      	bne.n	800d77a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7c8:	e853 3f00 	ldrex	r3, [r3]
 800d7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7d0:	f023 0310 	bic.w	r3, r3, #16
 800d7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e4      	bne.n	800d7c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7f5 fcbf 	bl	8003180 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2202      	movs	r2, #2
 800d806:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d814:	b29b      	uxth	r3, r3
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	b29b      	uxth	r3, r3
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f91d 	bl	800da5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d822:	e0fd      	b.n	800da20 <HAL_UART_IRQHandler+0x760>
 800d824:	40020010 	.word	0x40020010
 800d828:	40020028 	.word	0x40020028
 800d82c:	40020040 	.word	0x40020040
 800d830:	40020058 	.word	0x40020058
 800d834:	40020070 	.word	0x40020070
 800d838:	40020088 	.word	0x40020088
 800d83c:	400200a0 	.word	0x400200a0
 800d840:	400200b8 	.word	0x400200b8
 800d844:	40020410 	.word	0x40020410
 800d848:	40020428 	.word	0x40020428
 800d84c:	40020440 	.word	0x40020440
 800d850:	40020458 	.word	0x40020458
 800d854:	40020470 	.word	0x40020470
 800d858:	40020488 	.word	0x40020488
 800d85c:	400204a0 	.word	0x400204a0
 800d860:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d870:	b29b      	uxth	r3, r3
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d87e:	b29b      	uxth	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	f000 80cf 	beq.w	800da24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80ca 	beq.w	800da24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d898:	e853 3f00 	ldrex	r3, [r3]
 800d89c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8ba:	e841 2300 	strex	r3, r2, [r1]
 800d8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1e4      	bne.n	800d890 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d8d6:	6a3a      	ldr	r2, [r7, #32]
 800d8d8:	4b55      	ldr	r3, [pc, #340]	@ (800da30 <HAL_UART_IRQHandler+0x770>)
 800d8da:	4013      	ands	r3, r2
 800d8dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f2:	e841 2300 	strex	r3, r2, [r1]
 800d8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e3      	bne.n	800d8c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	e853 3f00 	ldrex	r3, [r3]
 800d91e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f023 0310 	bic.w	r3, r3, #16
 800d926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	461a      	mov	r2, r3
 800d930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d934:	61fb      	str	r3, [r7, #28]
 800d936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	69b9      	ldr	r1, [r7, #24]
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	617b      	str	r3, [r7, #20]
   return(result);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e4      	bne.n	800d912 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2202      	movs	r2, #2
 800d94c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d94e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f881 	bl	800da5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d95a:	e063      	b.n	800da24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00e      	beq.n	800d986 <HAL_UART_IRQHandler+0x6c6>
 800d968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d96c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d008      	beq.n	800d986 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d97c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f001 fe80 	bl	800f684 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d984:	e051      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d98a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d014      	beq.n	800d9bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d105      	bne.n	800d9aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d99e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d008      	beq.n	800d9bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d03a      	beq.n	800da28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	4798      	blx	r3
    }
    return;
 800d9ba:	e035      	b.n	800da28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d009      	beq.n	800d9dc <HAL_UART_IRQHandler+0x71c>
 800d9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f001 f90d 	bl	800ebf4 <UART_EndTransmit_IT>
    return;
 800d9da:	e026      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d009      	beq.n	800d9fc <HAL_UART_IRQHandler+0x73c>
 800d9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d003      	beq.n	800d9fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f001 fe59 	bl	800f6ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9fa:	e016      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d010      	beq.n	800da2a <HAL_UART_IRQHandler+0x76a>
 800da08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	da0c      	bge.n	800da2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f001 fe41 	bl	800f698 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da16:	e008      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
      return;
 800da18:	bf00      	nop
 800da1a:	e006      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
    return;
 800da1c:	bf00      	nop
 800da1e:	e004      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
      return;
 800da20:	bf00      	nop
 800da22:	e002      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
      return;
 800da24:	bf00      	nop
 800da26:	e000      	b.n	800da2a <HAL_UART_IRQHandler+0x76a>
    return;
 800da28:	bf00      	nop
  }
}
 800da2a:	37e8      	adds	r7, #232	@ 0xe8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	effffffe 	.word	0xeffffffe

0800da34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da3c:	bf00      	nop
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da78:	b092      	sub	sp, #72	@ 0x48
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	689a      	ldr	r2, [r3, #8]
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	431a      	orrs	r2, r3
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	431a      	orrs	r2, r3
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	4313      	orrs	r3, r2
 800da9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	4bbe      	ldr	r3, [pc, #760]	@ (800dd9c <UART_SetConfig+0x328>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	6812      	ldr	r2, [r2, #0]
 800daaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800daac:	430b      	orrs	r3, r1
 800daae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	430a      	orrs	r2, r1
 800dac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4ab3      	ldr	r2, [pc, #716]	@ (800dda0 <UART_SetConfig+0x32c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d004      	beq.n	800dae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dadc:	4313      	orrs	r3, r2
 800dade:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	4baf      	ldr	r3, [pc, #700]	@ (800dda4 <UART_SetConfig+0x330>)
 800dae8:	4013      	ands	r3, r2
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	6812      	ldr	r2, [r2, #0]
 800daee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800daf0:	430b      	orrs	r3, r1
 800daf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dafa:	f023 010f 	bic.w	r1, r3, #15
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	430a      	orrs	r2, r1
 800db08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4aa6      	ldr	r2, [pc, #664]	@ (800dda8 <UART_SetConfig+0x334>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d177      	bne.n	800dc04 <UART_SetConfig+0x190>
 800db14:	4ba5      	ldr	r3, [pc, #660]	@ (800ddac <UART_SetConfig+0x338>)
 800db16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db1c:	2b28      	cmp	r3, #40	@ 0x28
 800db1e:	d86d      	bhi.n	800dbfc <UART_SetConfig+0x188>
 800db20:	a201      	add	r2, pc, #4	@ (adr r2, 800db28 <UART_SetConfig+0xb4>)
 800db22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db26:	bf00      	nop
 800db28:	0800dbcd 	.word	0x0800dbcd
 800db2c:	0800dbfd 	.word	0x0800dbfd
 800db30:	0800dbfd 	.word	0x0800dbfd
 800db34:	0800dbfd 	.word	0x0800dbfd
 800db38:	0800dbfd 	.word	0x0800dbfd
 800db3c:	0800dbfd 	.word	0x0800dbfd
 800db40:	0800dbfd 	.word	0x0800dbfd
 800db44:	0800dbfd 	.word	0x0800dbfd
 800db48:	0800dbd5 	.word	0x0800dbd5
 800db4c:	0800dbfd 	.word	0x0800dbfd
 800db50:	0800dbfd 	.word	0x0800dbfd
 800db54:	0800dbfd 	.word	0x0800dbfd
 800db58:	0800dbfd 	.word	0x0800dbfd
 800db5c:	0800dbfd 	.word	0x0800dbfd
 800db60:	0800dbfd 	.word	0x0800dbfd
 800db64:	0800dbfd 	.word	0x0800dbfd
 800db68:	0800dbdd 	.word	0x0800dbdd
 800db6c:	0800dbfd 	.word	0x0800dbfd
 800db70:	0800dbfd 	.word	0x0800dbfd
 800db74:	0800dbfd 	.word	0x0800dbfd
 800db78:	0800dbfd 	.word	0x0800dbfd
 800db7c:	0800dbfd 	.word	0x0800dbfd
 800db80:	0800dbfd 	.word	0x0800dbfd
 800db84:	0800dbfd 	.word	0x0800dbfd
 800db88:	0800dbe5 	.word	0x0800dbe5
 800db8c:	0800dbfd 	.word	0x0800dbfd
 800db90:	0800dbfd 	.word	0x0800dbfd
 800db94:	0800dbfd 	.word	0x0800dbfd
 800db98:	0800dbfd 	.word	0x0800dbfd
 800db9c:	0800dbfd 	.word	0x0800dbfd
 800dba0:	0800dbfd 	.word	0x0800dbfd
 800dba4:	0800dbfd 	.word	0x0800dbfd
 800dba8:	0800dbed 	.word	0x0800dbed
 800dbac:	0800dbfd 	.word	0x0800dbfd
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800dbfd 	.word	0x0800dbfd
 800dbb8:	0800dbfd 	.word	0x0800dbfd
 800dbbc:	0800dbfd 	.word	0x0800dbfd
 800dbc0:	0800dbfd 	.word	0x0800dbfd
 800dbc4:	0800dbfd 	.word	0x0800dbfd
 800dbc8:	0800dbf5 	.word	0x0800dbf5
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd2:	e222      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbda:	e21e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbdc:	2308      	movs	r3, #8
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe2:	e21a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbe4:	2310      	movs	r3, #16
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbea:	e216      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbec:	2320      	movs	r3, #32
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf2:	e212      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbf4:	2340      	movs	r3, #64	@ 0x40
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfa:	e20e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dbfc:	2380      	movs	r3, #128	@ 0x80
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc02:	e20a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a69      	ldr	r2, [pc, #420]	@ (800ddb0 <UART_SetConfig+0x33c>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d130      	bne.n	800dc70 <UART_SetConfig+0x1fc>
 800dc0e:	4b67      	ldr	r3, [pc, #412]	@ (800ddac <UART_SetConfig+0x338>)
 800dc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc12:	f003 0307 	and.w	r3, r3, #7
 800dc16:	2b05      	cmp	r3, #5
 800dc18:	d826      	bhi.n	800dc68 <UART_SetConfig+0x1f4>
 800dc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc20 <UART_SetConfig+0x1ac>)
 800dc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc20:	0800dc39 	.word	0x0800dc39
 800dc24:	0800dc41 	.word	0x0800dc41
 800dc28:	0800dc49 	.word	0x0800dc49
 800dc2c:	0800dc51 	.word	0x0800dc51
 800dc30:	0800dc59 	.word	0x0800dc59
 800dc34:	0800dc61 	.word	0x0800dc61
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e1ec      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc40:	2304      	movs	r3, #4
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e1e8      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc48:	2308      	movs	r3, #8
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4e:	e1e4      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc50:	2310      	movs	r3, #16
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc56:	e1e0      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc58:	2320      	movs	r3, #32
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5e:	e1dc      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc60:	2340      	movs	r3, #64	@ 0x40
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc66:	e1d8      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc68:	2380      	movs	r3, #128	@ 0x80
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6e:	e1d4      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a4f      	ldr	r2, [pc, #316]	@ (800ddb4 <UART_SetConfig+0x340>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d130      	bne.n	800dcdc <UART_SetConfig+0x268>
 800dc7a:	4b4c      	ldr	r3, [pc, #304]	@ (800ddac <UART_SetConfig+0x338>)
 800dc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7e:	f003 0307 	and.w	r3, r3, #7
 800dc82:	2b05      	cmp	r3, #5
 800dc84:	d826      	bhi.n	800dcd4 <UART_SetConfig+0x260>
 800dc86:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <UART_SetConfig+0x218>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dca5 	.word	0x0800dca5
 800dc90:	0800dcad 	.word	0x0800dcad
 800dc94:	0800dcb5 	.word	0x0800dcb5
 800dc98:	0800dcbd 	.word	0x0800dcbd
 800dc9c:	0800dcc5 	.word	0x0800dcc5
 800dca0:	0800dccd 	.word	0x0800dccd
 800dca4:	2300      	movs	r3, #0
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e1b6      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcac:	2304      	movs	r3, #4
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e1b2      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e1ae      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc2:	e1aa      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcca:	e1a6      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dccc:	2340      	movs	r3, #64	@ 0x40
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd2:	e1a2      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcd4:	2380      	movs	r3, #128	@ 0x80
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcda:	e19e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a35      	ldr	r2, [pc, #212]	@ (800ddb8 <UART_SetConfig+0x344>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d130      	bne.n	800dd48 <UART_SetConfig+0x2d4>
 800dce6:	4b31      	ldr	r3, [pc, #196]	@ (800ddac <UART_SetConfig+0x338>)
 800dce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	2b05      	cmp	r3, #5
 800dcf0:	d826      	bhi.n	800dd40 <UART_SetConfig+0x2cc>
 800dcf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcf8 <UART_SetConfig+0x284>)
 800dcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf8:	0800dd11 	.word	0x0800dd11
 800dcfc:	0800dd19 	.word	0x0800dd19
 800dd00:	0800dd21 	.word	0x0800dd21
 800dd04:	0800dd29 	.word	0x0800dd29
 800dd08:	0800dd31 	.word	0x0800dd31
 800dd0c:	0800dd39 	.word	0x0800dd39
 800dd10:	2300      	movs	r3, #0
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd16:	e180      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd18:	2304      	movs	r3, #4
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1e:	e17c      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd20:	2308      	movs	r3, #8
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd26:	e178      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd28:	2310      	movs	r3, #16
 800dd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2e:	e174      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd30:	2320      	movs	r3, #32
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd36:	e170      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd38:	2340      	movs	r3, #64	@ 0x40
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3e:	e16c      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd40:	2380      	movs	r3, #128	@ 0x80
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd46:	e168      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a1b      	ldr	r2, [pc, #108]	@ (800ddbc <UART_SetConfig+0x348>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d142      	bne.n	800ddd8 <UART_SetConfig+0x364>
 800dd52:	4b16      	ldr	r3, [pc, #88]	@ (800ddac <UART_SetConfig+0x338>)
 800dd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b05      	cmp	r3, #5
 800dd5c:	d838      	bhi.n	800ddd0 <UART_SetConfig+0x35c>
 800dd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd64 <UART_SetConfig+0x2f0>)
 800dd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd64:	0800dd7d 	.word	0x0800dd7d
 800dd68:	0800dd85 	.word	0x0800dd85
 800dd6c:	0800dd8d 	.word	0x0800dd8d
 800dd70:	0800dd95 	.word	0x0800dd95
 800dd74:	0800ddc1 	.word	0x0800ddc1
 800dd78:	0800ddc9 	.word	0x0800ddc9
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd82:	e14a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd84:	2304      	movs	r3, #4
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8a:	e146      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd92:	e142      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd94:	2310      	movs	r3, #16
 800dd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9a:	e13e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dd9c:	cfff69f3 	.word	0xcfff69f3
 800dda0:	58000c00 	.word	0x58000c00
 800dda4:	11fff4ff 	.word	0x11fff4ff
 800dda8:	40011000 	.word	0x40011000
 800ddac:	58024400 	.word	0x58024400
 800ddb0:	40004400 	.word	0x40004400
 800ddb4:	40004800 	.word	0x40004800
 800ddb8:	40004c00 	.word	0x40004c00
 800ddbc:	40005000 	.word	0x40005000
 800ddc0:	2320      	movs	r3, #32
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc6:	e128      	b.n	800e01a <UART_SetConfig+0x5a6>
 800ddc8:	2340      	movs	r3, #64	@ 0x40
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddce:	e124      	b.n	800e01a <UART_SetConfig+0x5a6>
 800ddd0:	2380      	movs	r3, #128	@ 0x80
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd6:	e120      	b.n	800e01a <UART_SetConfig+0x5a6>
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4acb      	ldr	r2, [pc, #812]	@ (800e10c <UART_SetConfig+0x698>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d176      	bne.n	800ded0 <UART_SetConfig+0x45c>
 800dde2:	4bcb      	ldr	r3, [pc, #812]	@ (800e110 <UART_SetConfig+0x69c>)
 800dde4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dde6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddea:	2b28      	cmp	r3, #40	@ 0x28
 800ddec:	d86c      	bhi.n	800dec8 <UART_SetConfig+0x454>
 800ddee:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf4 <UART_SetConfig+0x380>)
 800ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf4:	0800de99 	.word	0x0800de99
 800ddf8:	0800dec9 	.word	0x0800dec9
 800ddfc:	0800dec9 	.word	0x0800dec9
 800de00:	0800dec9 	.word	0x0800dec9
 800de04:	0800dec9 	.word	0x0800dec9
 800de08:	0800dec9 	.word	0x0800dec9
 800de0c:	0800dec9 	.word	0x0800dec9
 800de10:	0800dec9 	.word	0x0800dec9
 800de14:	0800dea1 	.word	0x0800dea1
 800de18:	0800dec9 	.word	0x0800dec9
 800de1c:	0800dec9 	.word	0x0800dec9
 800de20:	0800dec9 	.word	0x0800dec9
 800de24:	0800dec9 	.word	0x0800dec9
 800de28:	0800dec9 	.word	0x0800dec9
 800de2c:	0800dec9 	.word	0x0800dec9
 800de30:	0800dec9 	.word	0x0800dec9
 800de34:	0800dea9 	.word	0x0800dea9
 800de38:	0800dec9 	.word	0x0800dec9
 800de3c:	0800dec9 	.word	0x0800dec9
 800de40:	0800dec9 	.word	0x0800dec9
 800de44:	0800dec9 	.word	0x0800dec9
 800de48:	0800dec9 	.word	0x0800dec9
 800de4c:	0800dec9 	.word	0x0800dec9
 800de50:	0800dec9 	.word	0x0800dec9
 800de54:	0800deb1 	.word	0x0800deb1
 800de58:	0800dec9 	.word	0x0800dec9
 800de5c:	0800dec9 	.word	0x0800dec9
 800de60:	0800dec9 	.word	0x0800dec9
 800de64:	0800dec9 	.word	0x0800dec9
 800de68:	0800dec9 	.word	0x0800dec9
 800de6c:	0800dec9 	.word	0x0800dec9
 800de70:	0800dec9 	.word	0x0800dec9
 800de74:	0800deb9 	.word	0x0800deb9
 800de78:	0800dec9 	.word	0x0800dec9
 800de7c:	0800dec9 	.word	0x0800dec9
 800de80:	0800dec9 	.word	0x0800dec9
 800de84:	0800dec9 	.word	0x0800dec9
 800de88:	0800dec9 	.word	0x0800dec9
 800de8c:	0800dec9 	.word	0x0800dec9
 800de90:	0800dec9 	.word	0x0800dec9
 800de94:	0800dec1 	.word	0x0800dec1
 800de98:	2301      	movs	r3, #1
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9e:	e0bc      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dea0:	2304      	movs	r3, #4
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e0b8      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dea8:	2308      	movs	r3, #8
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deae:	e0b4      	b.n	800e01a <UART_SetConfig+0x5a6>
 800deb0:	2310      	movs	r3, #16
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb6:	e0b0      	b.n	800e01a <UART_SetConfig+0x5a6>
 800deb8:	2320      	movs	r3, #32
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800debe:	e0ac      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dec0:	2340      	movs	r3, #64	@ 0x40
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec6:	e0a8      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dec8:	2380      	movs	r3, #128	@ 0x80
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dece:	e0a4      	b.n	800e01a <UART_SetConfig+0x5a6>
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a8f      	ldr	r2, [pc, #572]	@ (800e114 <UART_SetConfig+0x6a0>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d130      	bne.n	800df3c <UART_SetConfig+0x4c8>
 800deda:	4b8d      	ldr	r3, [pc, #564]	@ (800e110 <UART_SetConfig+0x69c>)
 800dedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dede:	f003 0307 	and.w	r3, r3, #7
 800dee2:	2b05      	cmp	r3, #5
 800dee4:	d826      	bhi.n	800df34 <UART_SetConfig+0x4c0>
 800dee6:	a201      	add	r2, pc, #4	@ (adr r2, 800deec <UART_SetConfig+0x478>)
 800dee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deec:	0800df05 	.word	0x0800df05
 800def0:	0800df0d 	.word	0x0800df0d
 800def4:	0800df15 	.word	0x0800df15
 800def8:	0800df1d 	.word	0x0800df1d
 800defc:	0800df25 	.word	0x0800df25
 800df00:	0800df2d 	.word	0x0800df2d
 800df04:	2300      	movs	r3, #0
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0a:	e086      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df0c:	2304      	movs	r3, #4
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df12:	e082      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df14:	2308      	movs	r3, #8
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1a:	e07e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df1c:	2310      	movs	r3, #16
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df22:	e07a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df24:	2320      	movs	r3, #32
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2a:	e076      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df2c:	2340      	movs	r3, #64	@ 0x40
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df32:	e072      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df34:	2380      	movs	r3, #128	@ 0x80
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3a:	e06e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a75      	ldr	r2, [pc, #468]	@ (800e118 <UART_SetConfig+0x6a4>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d130      	bne.n	800dfa8 <UART_SetConfig+0x534>
 800df46:	4b72      	ldr	r3, [pc, #456]	@ (800e110 <UART_SetConfig+0x69c>)
 800df48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df4a:	f003 0307 	and.w	r3, r3, #7
 800df4e:	2b05      	cmp	r3, #5
 800df50:	d826      	bhi.n	800dfa0 <UART_SetConfig+0x52c>
 800df52:	a201      	add	r2, pc, #4	@ (adr r2, 800df58 <UART_SetConfig+0x4e4>)
 800df54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df58:	0800df71 	.word	0x0800df71
 800df5c:	0800df79 	.word	0x0800df79
 800df60:	0800df81 	.word	0x0800df81
 800df64:	0800df89 	.word	0x0800df89
 800df68:	0800df91 	.word	0x0800df91
 800df6c:	0800df99 	.word	0x0800df99
 800df70:	2300      	movs	r3, #0
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df76:	e050      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df78:	2304      	movs	r3, #4
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7e:	e04c      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df80:	2308      	movs	r3, #8
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df86:	e048      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df88:	2310      	movs	r3, #16
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8e:	e044      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df90:	2320      	movs	r3, #32
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df96:	e040      	b.n	800e01a <UART_SetConfig+0x5a6>
 800df98:	2340      	movs	r3, #64	@ 0x40
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9e:	e03c      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dfa0:	2380      	movs	r3, #128	@ 0x80
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e038      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a5b      	ldr	r2, [pc, #364]	@ (800e11c <UART_SetConfig+0x6a8>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d130      	bne.n	800e014 <UART_SetConfig+0x5a0>
 800dfb2:	4b57      	ldr	r3, [pc, #348]	@ (800e110 <UART_SetConfig+0x69c>)
 800dfb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfb6:	f003 0307 	and.w	r3, r3, #7
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	d826      	bhi.n	800e00c <UART_SetConfig+0x598>
 800dfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc4 <UART_SetConfig+0x550>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800dfdd 	.word	0x0800dfdd
 800dfc8:	0800dfe5 	.word	0x0800dfe5
 800dfcc:	0800dfed 	.word	0x0800dfed
 800dfd0:	0800dff5 	.word	0x0800dff5
 800dfd4:	0800dffd 	.word	0x0800dffd
 800dfd8:	0800e005 	.word	0x0800e005
 800dfdc:	2302      	movs	r3, #2
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe2:	e01a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dfe4:	2304      	movs	r3, #4
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfea:	e016      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dfec:	2308      	movs	r3, #8
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff2:	e012      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dff4:	2310      	movs	r3, #16
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffa:	e00e      	b.n	800e01a <UART_SetConfig+0x5a6>
 800dffc:	2320      	movs	r3, #32
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e002:	e00a      	b.n	800e01a <UART_SetConfig+0x5a6>
 800e004:	2340      	movs	r3, #64	@ 0x40
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00a:	e006      	b.n	800e01a <UART_SetConfig+0x5a6>
 800e00c:	2380      	movs	r3, #128	@ 0x80
 800e00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e012:	e002      	b.n	800e01a <UART_SetConfig+0x5a6>
 800e014:	2380      	movs	r3, #128	@ 0x80
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a3f      	ldr	r2, [pc, #252]	@ (800e11c <UART_SetConfig+0x6a8>)
 800e020:	4293      	cmp	r3, r2
 800e022:	f040 80f8 	bne.w	800e216 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e026:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e02a:	2b20      	cmp	r3, #32
 800e02c:	dc46      	bgt.n	800e0bc <UART_SetConfig+0x648>
 800e02e:	2b02      	cmp	r3, #2
 800e030:	f2c0 8082 	blt.w	800e138 <UART_SetConfig+0x6c4>
 800e034:	3b02      	subs	r3, #2
 800e036:	2b1e      	cmp	r3, #30
 800e038:	d87e      	bhi.n	800e138 <UART_SetConfig+0x6c4>
 800e03a:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <UART_SetConfig+0x5cc>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e0c3 	.word	0x0800e0c3
 800e044:	0800e139 	.word	0x0800e139
 800e048:	0800e0cb 	.word	0x0800e0cb
 800e04c:	0800e139 	.word	0x0800e139
 800e050:	0800e139 	.word	0x0800e139
 800e054:	0800e139 	.word	0x0800e139
 800e058:	0800e0db 	.word	0x0800e0db
 800e05c:	0800e139 	.word	0x0800e139
 800e060:	0800e139 	.word	0x0800e139
 800e064:	0800e139 	.word	0x0800e139
 800e068:	0800e139 	.word	0x0800e139
 800e06c:	0800e139 	.word	0x0800e139
 800e070:	0800e139 	.word	0x0800e139
 800e074:	0800e139 	.word	0x0800e139
 800e078:	0800e0eb 	.word	0x0800e0eb
 800e07c:	0800e139 	.word	0x0800e139
 800e080:	0800e139 	.word	0x0800e139
 800e084:	0800e139 	.word	0x0800e139
 800e088:	0800e139 	.word	0x0800e139
 800e08c:	0800e139 	.word	0x0800e139
 800e090:	0800e139 	.word	0x0800e139
 800e094:	0800e139 	.word	0x0800e139
 800e098:	0800e139 	.word	0x0800e139
 800e09c:	0800e139 	.word	0x0800e139
 800e0a0:	0800e139 	.word	0x0800e139
 800e0a4:	0800e139 	.word	0x0800e139
 800e0a8:	0800e139 	.word	0x0800e139
 800e0ac:	0800e139 	.word	0x0800e139
 800e0b0:	0800e139 	.word	0x0800e139
 800e0b4:	0800e139 	.word	0x0800e139
 800e0b8:	0800e12b 	.word	0x0800e12b
 800e0bc:	2b40      	cmp	r3, #64	@ 0x40
 800e0be:	d037      	beq.n	800e130 <UART_SetConfig+0x6bc>
 800e0c0:	e03a      	b.n	800e138 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e0c2:	f7fc fd5f 	bl	800ab84 <HAL_RCCEx_GetD3PCLK1Freq>
 800e0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0c8:	e03c      	b.n	800e144 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fc fd6e 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0d8:	e034      	b.n	800e144 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0da:	f107 0318 	add.w	r3, r7, #24
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fc feba 	bl	800ae58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0e8:	e02c      	b.n	800e144 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ea:	4b09      	ldr	r3, [pc, #36]	@ (800e110 <UART_SetConfig+0x69c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 0320 	and.w	r3, r3, #32
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d016      	beq.n	800e124 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0f6:	4b06      	ldr	r3, [pc, #24]	@ (800e110 <UART_SetConfig+0x69c>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	08db      	lsrs	r3, r3, #3
 800e0fc:	f003 0303 	and.w	r3, r3, #3
 800e100:	4a07      	ldr	r2, [pc, #28]	@ (800e120 <UART_SetConfig+0x6ac>)
 800e102:	fa22 f303 	lsr.w	r3, r2, r3
 800e106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e108:	e01c      	b.n	800e144 <UART_SetConfig+0x6d0>
 800e10a:	bf00      	nop
 800e10c:	40011400 	.word	0x40011400
 800e110:	58024400 	.word	0x58024400
 800e114:	40007800 	.word	0x40007800
 800e118:	40007c00 	.word	0x40007c00
 800e11c:	58000c00 	.word	0x58000c00
 800e120:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e124:	4b9d      	ldr	r3, [pc, #628]	@ (800e39c <UART_SetConfig+0x928>)
 800e126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e128:	e00c      	b.n	800e144 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e12a:	4b9d      	ldr	r3, [pc, #628]	@ (800e3a0 <UART_SetConfig+0x92c>)
 800e12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e12e:	e009      	b.n	800e144 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e136:	e005      	b.n	800e144 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e138:	2300      	movs	r3, #0
 800e13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e142:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e146:	2b00      	cmp	r3, #0
 800e148:	f000 81de 	beq.w	800e508 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e150:	4a94      	ldr	r2, [pc, #592]	@ (800e3a4 <UART_SetConfig+0x930>)
 800e152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e156:	461a      	mov	r2, r3
 800e158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e15a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e15e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d305      	bcc.n	800e17c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e178:	429a      	cmp	r2, r3
 800e17a:	d903      	bls.n	800e184 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e182:	e1c1      	b.n	800e508 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e186:	2200      	movs	r2, #0
 800e188:	60bb      	str	r3, [r7, #8]
 800e18a:	60fa      	str	r2, [r7, #12]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e190:	4a84      	ldr	r2, [pc, #528]	@ (800e3a4 <UART_SetConfig+0x930>)
 800e192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e196:	b29b      	uxth	r3, r3
 800e198:	2200      	movs	r2, #0
 800e19a:	603b      	str	r3, [r7, #0]
 800e19c:	607a      	str	r2, [r7, #4]
 800e19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1a6:	f7f2 faaf 	bl	8000708 <__aeabi_uldivmod>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	f04f 0200 	mov.w	r2, #0
 800e1b6:	f04f 0300 	mov.w	r3, #0
 800e1ba:	020b      	lsls	r3, r1, #8
 800e1bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e1c0:	0202      	lsls	r2, r0, #8
 800e1c2:	6979      	ldr	r1, [r7, #20]
 800e1c4:	6849      	ldr	r1, [r1, #4]
 800e1c6:	0849      	lsrs	r1, r1, #1
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	4605      	mov	r5, r0
 800e1ce:	eb12 0804 	adds.w	r8, r2, r4
 800e1d2:	eb43 0905 	adc.w	r9, r3, r5
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	469a      	mov	sl, r3
 800e1de:	4693      	mov	fp, r2
 800e1e0:	4652      	mov	r2, sl
 800e1e2:	465b      	mov	r3, fp
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7f2 fa8e 	bl	8000708 <__aeabi_uldivmod>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1fa:	d308      	bcc.n	800e20e <UART_SetConfig+0x79a>
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e202:	d204      	bcs.n	800e20e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e20a:	60da      	str	r2, [r3, #12]
 800e20c:	e17c      	b.n	800e508 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e214:	e178      	b.n	800e508 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	69db      	ldr	r3, [r3, #28]
 800e21a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e21e:	f040 80c5 	bne.w	800e3ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e222:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e226:	2b20      	cmp	r3, #32
 800e228:	dc48      	bgt.n	800e2bc <UART_SetConfig+0x848>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	db7b      	blt.n	800e326 <UART_SetConfig+0x8b2>
 800e22e:	2b20      	cmp	r3, #32
 800e230:	d879      	bhi.n	800e326 <UART_SetConfig+0x8b2>
 800e232:	a201      	add	r2, pc, #4	@ (adr r2, 800e238 <UART_SetConfig+0x7c4>)
 800e234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e238:	0800e2c3 	.word	0x0800e2c3
 800e23c:	0800e2cb 	.word	0x0800e2cb
 800e240:	0800e327 	.word	0x0800e327
 800e244:	0800e327 	.word	0x0800e327
 800e248:	0800e2d3 	.word	0x0800e2d3
 800e24c:	0800e327 	.word	0x0800e327
 800e250:	0800e327 	.word	0x0800e327
 800e254:	0800e327 	.word	0x0800e327
 800e258:	0800e2e3 	.word	0x0800e2e3
 800e25c:	0800e327 	.word	0x0800e327
 800e260:	0800e327 	.word	0x0800e327
 800e264:	0800e327 	.word	0x0800e327
 800e268:	0800e327 	.word	0x0800e327
 800e26c:	0800e327 	.word	0x0800e327
 800e270:	0800e327 	.word	0x0800e327
 800e274:	0800e327 	.word	0x0800e327
 800e278:	0800e2f3 	.word	0x0800e2f3
 800e27c:	0800e327 	.word	0x0800e327
 800e280:	0800e327 	.word	0x0800e327
 800e284:	0800e327 	.word	0x0800e327
 800e288:	0800e327 	.word	0x0800e327
 800e28c:	0800e327 	.word	0x0800e327
 800e290:	0800e327 	.word	0x0800e327
 800e294:	0800e327 	.word	0x0800e327
 800e298:	0800e327 	.word	0x0800e327
 800e29c:	0800e327 	.word	0x0800e327
 800e2a0:	0800e327 	.word	0x0800e327
 800e2a4:	0800e327 	.word	0x0800e327
 800e2a8:	0800e327 	.word	0x0800e327
 800e2ac:	0800e327 	.word	0x0800e327
 800e2b0:	0800e327 	.word	0x0800e327
 800e2b4:	0800e327 	.word	0x0800e327
 800e2b8:	0800e319 	.word	0x0800e319
 800e2bc:	2b40      	cmp	r3, #64	@ 0x40
 800e2be:	d02e      	beq.n	800e31e <UART_SetConfig+0x8aa>
 800e2c0:	e031      	b.n	800e326 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2c2:	f7fb f9e7 	bl	8009694 <HAL_RCC_GetPCLK1Freq>
 800e2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e2c8:	e033      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2ca:	f7fb f9f9 	bl	80096c0 <HAL_RCC_GetPCLK2Freq>
 800e2ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e2d0:	e02f      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fc fc6a 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e0:	e027      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2e2:	f107 0318 	add.w	r3, r7, #24
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fc fdb6 	bl	800ae58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2f0:	e01f      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2f2:	4b2d      	ldr	r3, [pc, #180]	@ (800e3a8 <UART_SetConfig+0x934>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d009      	beq.n	800e312 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e3a8 <UART_SetConfig+0x934>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	08db      	lsrs	r3, r3, #3
 800e304:	f003 0303 	and.w	r3, r3, #3
 800e308:	4a24      	ldr	r2, [pc, #144]	@ (800e39c <UART_SetConfig+0x928>)
 800e30a:	fa22 f303 	lsr.w	r3, r2, r3
 800e30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e310:	e00f      	b.n	800e332 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e312:	4b22      	ldr	r3, [pc, #136]	@ (800e39c <UART_SetConfig+0x928>)
 800e314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e316:	e00c      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e318:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <UART_SetConfig+0x92c>)
 800e31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e31c:	e009      	b.n	800e332 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e31e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e324:	e005      	b.n	800e332 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80e7 	beq.w	800e508 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e33e:	4a19      	ldr	r2, [pc, #100]	@ (800e3a4 <UART_SetConfig+0x930>)
 800e340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e344:	461a      	mov	r2, r3
 800e346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e348:	fbb3 f3f2 	udiv	r3, r3, r2
 800e34c:	005a      	lsls	r2, r3, #1
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	085b      	lsrs	r3, r3, #1
 800e354:	441a      	add	r2, r3
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e35e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	2b0f      	cmp	r3, #15
 800e364:	d916      	bls.n	800e394 <UART_SetConfig+0x920>
 800e366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e36c:	d212      	bcs.n	800e394 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e370:	b29b      	uxth	r3, r3
 800e372:	f023 030f 	bic.w	r3, r3, #15
 800e376:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37a:	085b      	lsrs	r3, r3, #1
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f003 0307 	and.w	r3, r3, #7
 800e382:	b29a      	uxth	r2, r3
 800e384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e386:	4313      	orrs	r3, r2
 800e388:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	e0b9      	b.n	800e508 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e39a:	e0b5      	b.n	800e508 <UART_SetConfig+0xa94>
 800e39c:	03d09000 	.word	0x03d09000
 800e3a0:	003d0900 	.word	0x003d0900
 800e3a4:	0801a5d4 	.word	0x0801a5d4
 800e3a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	dc49      	bgt.n	800e448 <UART_SetConfig+0x9d4>
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	db7c      	blt.n	800e4b2 <UART_SetConfig+0xa3e>
 800e3b8:	2b20      	cmp	r3, #32
 800e3ba:	d87a      	bhi.n	800e4b2 <UART_SetConfig+0xa3e>
 800e3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e3c4 <UART_SetConfig+0x950>)
 800e3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c2:	bf00      	nop
 800e3c4:	0800e44f 	.word	0x0800e44f
 800e3c8:	0800e457 	.word	0x0800e457
 800e3cc:	0800e4b3 	.word	0x0800e4b3
 800e3d0:	0800e4b3 	.word	0x0800e4b3
 800e3d4:	0800e45f 	.word	0x0800e45f
 800e3d8:	0800e4b3 	.word	0x0800e4b3
 800e3dc:	0800e4b3 	.word	0x0800e4b3
 800e3e0:	0800e4b3 	.word	0x0800e4b3
 800e3e4:	0800e46f 	.word	0x0800e46f
 800e3e8:	0800e4b3 	.word	0x0800e4b3
 800e3ec:	0800e4b3 	.word	0x0800e4b3
 800e3f0:	0800e4b3 	.word	0x0800e4b3
 800e3f4:	0800e4b3 	.word	0x0800e4b3
 800e3f8:	0800e4b3 	.word	0x0800e4b3
 800e3fc:	0800e4b3 	.word	0x0800e4b3
 800e400:	0800e4b3 	.word	0x0800e4b3
 800e404:	0800e47f 	.word	0x0800e47f
 800e408:	0800e4b3 	.word	0x0800e4b3
 800e40c:	0800e4b3 	.word	0x0800e4b3
 800e410:	0800e4b3 	.word	0x0800e4b3
 800e414:	0800e4b3 	.word	0x0800e4b3
 800e418:	0800e4b3 	.word	0x0800e4b3
 800e41c:	0800e4b3 	.word	0x0800e4b3
 800e420:	0800e4b3 	.word	0x0800e4b3
 800e424:	0800e4b3 	.word	0x0800e4b3
 800e428:	0800e4b3 	.word	0x0800e4b3
 800e42c:	0800e4b3 	.word	0x0800e4b3
 800e430:	0800e4b3 	.word	0x0800e4b3
 800e434:	0800e4b3 	.word	0x0800e4b3
 800e438:	0800e4b3 	.word	0x0800e4b3
 800e43c:	0800e4b3 	.word	0x0800e4b3
 800e440:	0800e4b3 	.word	0x0800e4b3
 800e444:	0800e4a5 	.word	0x0800e4a5
 800e448:	2b40      	cmp	r3, #64	@ 0x40
 800e44a:	d02e      	beq.n	800e4aa <UART_SetConfig+0xa36>
 800e44c:	e031      	b.n	800e4b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e44e:	f7fb f921 	bl	8009694 <HAL_RCC_GetPCLK1Freq>
 800e452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e454:	e033      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e456:	f7fb f933 	bl	80096c0 <HAL_RCC_GetPCLK2Freq>
 800e45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e45c:	e02f      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e45e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e462:	4618      	mov	r0, r3
 800e464:	f7fc fba4 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e46c:	e027      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e46e:	f107 0318 	add.w	r3, r7, #24
 800e472:	4618      	mov	r0, r3
 800e474:	f7fc fcf0 	bl	800ae58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e47c:	e01f      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e47e:	4b2d      	ldr	r3, [pc, #180]	@ (800e534 <UART_SetConfig+0xac0>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 0320 	and.w	r3, r3, #32
 800e486:	2b00      	cmp	r3, #0
 800e488:	d009      	beq.n	800e49e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e48a:	4b2a      	ldr	r3, [pc, #168]	@ (800e534 <UART_SetConfig+0xac0>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	08db      	lsrs	r3, r3, #3
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	4a28      	ldr	r2, [pc, #160]	@ (800e538 <UART_SetConfig+0xac4>)
 800e496:	fa22 f303 	lsr.w	r3, r2, r3
 800e49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e49c:	e00f      	b.n	800e4be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e49e:	4b26      	ldr	r3, [pc, #152]	@ (800e538 <UART_SetConfig+0xac4>)
 800e4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4a2:	e00c      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4a4:	4b25      	ldr	r3, [pc, #148]	@ (800e53c <UART_SetConfig+0xac8>)
 800e4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4a8:	e009      	b.n	800e4be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4b0:	e005      	b.n	800e4be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e4bc:	bf00      	nop
    }

    if (pclk != 0U)
 800e4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d021      	beq.n	800e508 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e540 <UART_SetConfig+0xacc>)
 800e4ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	085b      	lsrs	r3, r3, #1
 800e4dc:	441a      	add	r2, r3
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ea:	2b0f      	cmp	r3, #15
 800e4ec:	d909      	bls.n	800e502 <UART_SetConfig+0xa8e>
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4f4:	d205      	bcs.n	800e502 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	60da      	str	r2, [r3, #12]
 800e500:	e002      	b.n	800e508 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2201      	movs	r2, #1
 800e514:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2200      	movs	r2, #0
 800e51c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2200      	movs	r2, #0
 800e522:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e524:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3748      	adds	r7, #72	@ 0x48
 800e52c:	46bd      	mov	sp, r7
 800e52e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e532:	bf00      	nop
 800e534:	58024400 	.word	0x58024400
 800e538:	03d09000 	.word	0x03d09000
 800e53c:	003d0900 	.word	0x003d0900
 800e540:	0801a5d4 	.word	0x0801a5d4

0800e544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e550:	f003 0308 	and.w	r3, r3, #8
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00a      	beq.n	800e56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	430a      	orrs	r2, r1
 800e56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00a      	beq.n	800e590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	430a      	orrs	r2, r1
 800e58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e594:	f003 0302 	and.w	r3, r3, #2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00a      	beq.n	800e5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b6:	f003 0304 	and.w	r3, r3, #4
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	430a      	orrs	r2, r1
 800e5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5d8:	f003 0310 	and.w	r3, r3, #16
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00a      	beq.n	800e5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	430a      	orrs	r2, r1
 800e5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fa:	f003 0320 	and.w	r3, r3, #32
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00a      	beq.n	800e618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e61c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e620:	2b00      	cmp	r3, #0
 800e622:	d01a      	beq.n	800e65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	430a      	orrs	r2, r1
 800e638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e63e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e642:	d10a      	bne.n	800e65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	430a      	orrs	r2, r1
 800e67a:	605a      	str	r2, [r3, #4]
  }
}
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b098      	sub	sp, #96	@ 0x60
 800e68c:	af02      	add	r7, sp, #8
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e698:	f7f4 f882 	bl	80027a0 <HAL_GetTick>
 800e69c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f003 0308 	and.w	r3, r3, #8
 800e6a8:	2b08      	cmp	r3, #8
 800e6aa:	d12f      	bne.n	800e70c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f88e 	bl	800e7dc <UART_WaitOnFlagUntilTimeout>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d022      	beq.n	800e70c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ce:	e853 3f00 	ldrex	r3, [r3]
 800e6d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6da:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6ec:	e841 2300 	strex	r3, r2, [r1]
 800e6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1e6      	bne.n	800e6c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e708:	2303      	movs	r3, #3
 800e70a:	e063      	b.n	800e7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	2b04      	cmp	r3, #4
 800e718:	d149      	bne.n	800e7ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e71a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e722:	2200      	movs	r2, #0
 800e724:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f857 	bl	800e7dc <UART_WaitOnFlagUntilTimeout>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d03c      	beq.n	800e7ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73c:	e853 3f00 	ldrex	r3, [r3]
 800e740:	623b      	str	r3, [r7, #32]
   return(result);
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	461a      	mov	r2, r3
 800e750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e752:	633b      	str	r3, [r7, #48]	@ 0x30
 800e754:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e75a:	e841 2300 	strex	r3, r2, [r1]
 800e75e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1e6      	bne.n	800e734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3308      	adds	r3, #8
 800e76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	e853 3f00 	ldrex	r3, [r3]
 800e774:	60fb      	str	r3, [r7, #12]
   return(result);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f023 0301 	bic.w	r3, r3, #1
 800e77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	3308      	adds	r3, #8
 800e784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e786:	61fa      	str	r2, [r7, #28]
 800e788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78a:	69b9      	ldr	r1, [r7, #24]
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	e841 2300 	strex	r3, r2, [r1]
 800e792:	617b      	str	r3, [r7, #20]
   return(result);
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1e5      	bne.n	800e766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2220      	movs	r2, #32
 800e79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	e012      	b.n	800e7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2220      	movs	r2, #32
 800e7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3758      	adds	r7, #88	@ 0x58
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7ec:	e04f      	b.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f4:	d04b      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7f6:	f7f3 ffd3 	bl	80027a0 <HAL_GetTick>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	69ba      	ldr	r2, [r7, #24]
 800e802:	429a      	cmp	r2, r3
 800e804:	d302      	bcc.n	800e80c <UART_WaitOnFlagUntilTimeout+0x30>
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d101      	bne.n	800e810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e80c:	2303      	movs	r3, #3
 800e80e:	e04e      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f003 0304 	and.w	r3, r3, #4
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d037      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2b80      	cmp	r3, #128	@ 0x80
 800e822:	d034      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	2b40      	cmp	r3, #64	@ 0x40
 800e828:	d031      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	f003 0308 	and.w	r3, r3, #8
 800e834:	2b08      	cmp	r3, #8
 800e836:	d110      	bne.n	800e85a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2208      	movs	r2, #8
 800e83e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 f95b 	bl	800eafc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2208      	movs	r2, #8
 800e84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e029      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	69db      	ldr	r3, [r3, #28]
 800e860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e868:	d111      	bne.n	800e88e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f941 	bl	800eafc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2220      	movs	r2, #32
 800e87e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e88a:	2303      	movs	r3, #3
 800e88c:	e00f      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	69da      	ldr	r2, [r3, #28]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	4013      	ands	r3, r2
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	bf0c      	ite	eq
 800e89e:	2301      	moveq	r3, #1
 800e8a0:	2300      	movne	r3, #0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d0a0      	beq.n	800e7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b0a3      	sub	sp, #140	@ 0x8c
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	88fa      	ldrh	r2, [r7, #6]
 800e8d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	88fa      	ldrh	r2, [r7, #6]
 800e8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8ea:	d10e      	bne.n	800e90a <UART_Start_Receive_IT+0x52>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d105      	bne.n	800e900 <UART_Start_Receive_IT+0x48>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e8fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8fe:	e02d      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	22ff      	movs	r2, #255	@ 0xff
 800e904:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e908:	e028      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10d      	bne.n	800e92e <UART_Start_Receive_IT+0x76>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <UART_Start_Receive_IT+0x6c>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	22ff      	movs	r2, #255	@ 0xff
 800e91e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e922:	e01b      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	227f      	movs	r2, #127	@ 0x7f
 800e928:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e92c:	e016      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e936:	d10d      	bne.n	800e954 <UART_Start_Receive_IT+0x9c>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d104      	bne.n	800e94a <UART_Start_Receive_IT+0x92>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	227f      	movs	r2, #127	@ 0x7f
 800e944:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e948:	e008      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	223f      	movs	r2, #63	@ 0x3f
 800e94e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e952:	e003      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2222      	movs	r2, #34	@ 0x22
 800e968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e97c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3308      	adds	r3, #8
 800e98c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e990:	673a      	str	r2, [r7, #112]	@ 0x70
 800e992:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e996:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e99e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e3      	bne.n	800e96c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9ac:	d14f      	bne.n	800ea4e <UART_Start_Receive_IT+0x196>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e9b4:	88fa      	ldrh	r2, [r7, #6]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d349      	bcc.n	800ea4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9c2:	d107      	bne.n	800e9d4 <UART_Start_Receive_IT+0x11c>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d103      	bne.n	800e9d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4a47      	ldr	r2, [pc, #284]	@ (800eaec <UART_Start_Receive_IT+0x234>)
 800e9d0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e9d2:	e002      	b.n	800e9da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	4a46      	ldr	r2, [pc, #280]	@ (800eaf0 <UART_Start_Receive_IT+0x238>)
 800e9d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	691b      	ldr	r3, [r3, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d01a      	beq.n	800ea18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e9f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ea04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ea12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e4      	bne.n	800e9e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3308      	adds	r3, #8
 800ea36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea38:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ea3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea40:	e841 2300 	strex	r3, r2, [r1]
 800ea44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ea46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1e5      	bne.n	800ea18 <UART_Start_Receive_IT+0x160>
 800ea4c:	e046      	b.n	800eadc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea56:	d107      	bne.n	800ea68 <UART_Start_Receive_IT+0x1b0>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d103      	bne.n	800ea68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4a24      	ldr	r2, [pc, #144]	@ (800eaf4 <UART_Start_Receive_IT+0x23c>)
 800ea64:	675a      	str	r2, [r3, #116]	@ 0x74
 800ea66:	e002      	b.n	800ea6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4a23      	ldr	r2, [pc, #140]	@ (800eaf8 <UART_Start_Receive_IT+0x240>)
 800ea6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d019      	beq.n	800eaaa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7e:	e853 3f00 	ldrex	r3, [r3]
 800ea82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ea8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e6      	bne.n	800ea76 <UART_Start_Receive_IT+0x1be>
 800eaa8:	e018      	b.n	800eadc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	e853 3f00 	ldrex	r3, [r3]
 800eab6:	613b      	str	r3, [r7, #16]
   return(result);
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f043 0320 	orr.w	r3, r3, #32
 800eabe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	461a      	mov	r2, r3
 800eac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eac8:	623b      	str	r3, [r7, #32]
 800eaca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eacc:	69f9      	ldr	r1, [r7, #28]
 800eace:	6a3a      	ldr	r2, [r7, #32]
 800ead0:	e841 2300 	strex	r3, r2, [r1]
 800ead4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e6      	bne.n	800eaaa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	378c      	adds	r7, #140	@ 0x8c
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	0800f31d 	.word	0x0800f31d
 800eaf0:	0800efbd 	.word	0x0800efbd
 800eaf4:	0800ee05 	.word	0x0800ee05
 800eaf8:	0800ec4d 	.word	0x0800ec4d

0800eafc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b095      	sub	sp, #84	@ 0x54
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb0c:	e853 3f00 	ldrex	r3, [r3]
 800eb10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb22:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e6      	bne.n	800eb04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb46:	69fa      	ldr	r2, [r7, #28]
 800eb48:	4b1e      	ldr	r3, [pc, #120]	@ (800ebc4 <UART_EndRxTransfer+0xc8>)
 800eb4a:	4013      	ands	r3, r2
 800eb4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	3308      	adds	r3, #8
 800eb54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb5e:	e841 2300 	strex	r3, r2, [r1]
 800eb62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1e5      	bne.n	800eb36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d118      	bne.n	800eba4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	e853 3f00 	ldrex	r3, [r3]
 800eb7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f023 0310 	bic.w	r3, r3, #16
 800eb86:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb90:	61bb      	str	r3, [r7, #24]
 800eb92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb94:	6979      	ldr	r1, [r7, #20]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	e841 2300 	strex	r3, r2, [r1]
 800eb9c:	613b      	str	r3, [r7, #16]
   return(result);
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e6      	bne.n	800eb72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2220      	movs	r2, #32
 800eba8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ebb8:	bf00      	nop
 800ebba:	3754      	adds	r7, #84	@ 0x54
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	effffffe 	.word	0xeffffffe

0800ebc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7fe ff2e 	bl	800da48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebec:	bf00      	nop
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	6979      	ldr	r1, [r7, #20]
 800ec20:	69ba      	ldr	r2, [r7, #24]
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	613b      	str	r3, [r7, #16]
   return(result);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e6      	bne.n	800ebfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7fe fef9 	bl	800da34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec42:	bf00      	nop
 800ec44:	3720      	adds	r7, #32
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b09c      	sub	sp, #112	@ 0x70
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec64:	2b22      	cmp	r3, #34	@ 0x22
 800ec66:	f040 80be 	bne.w	800ede6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ec78:	b2d9      	uxtb	r1, r3
 800ec7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec84:	400a      	ands	r2, r1
 800ec86:	b2d2      	uxtb	r2, r2
 800ec88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec8e:	1c5a      	adds	r2, r3, #1
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f040 80a1 	bne.w	800edf6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecbc:	e853 3f00 	ldrex	r3, [r3]
 800ecc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ecc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecda:	e841 2300 	strex	r3, r2, [r1]
 800ecde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ece0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e6      	bne.n	800ecb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3308      	adds	r3, #8
 800ecec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf0:	e853 3f00 	ldrex	r3, [r3]
 800ecf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf8:	f023 0301 	bic.w	r3, r3, #1
 800ecfc:	667b      	str	r3, [r7, #100]	@ 0x64
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed06:	647a      	str	r2, [r7, #68]	@ 0x44
 800ed08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed0e:	e841 2300 	strex	r3, r2, [r1]
 800ed12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e5      	bne.n	800ece6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a33      	ldr	r2, [pc, #204]	@ (800ee00 <UART_RxISR_8BIT+0x1b4>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d01f      	beq.n	800ed78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d018      	beq.n	800ed78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed4e:	e853 3f00 	ldrex	r3, [r3]
 800ed52:	623b      	str	r3, [r7, #32]
   return(result);
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed5a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	461a      	mov	r2, r3
 800ed62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed64:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed6c:	e841 2300 	strex	r3, r2, [r1]
 800ed70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1e6      	bne.n	800ed46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d12e      	bne.n	800edde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	e853 3f00 	ldrex	r3, [r3]
 800ed92:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0310 	bic.w	r3, r3, #16
 800ed9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	461a      	mov	r2, r3
 800eda2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda8:	69b9      	ldr	r1, [r7, #24]
 800edaa:	69fa      	ldr	r2, [r7, #28]
 800edac:	e841 2300 	strex	r3, r2, [r1]
 800edb0:	617b      	str	r3, [r7, #20]
   return(result);
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1e6      	bne.n	800ed86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	69db      	ldr	r3, [r3, #28]
 800edbe:	f003 0310 	and.w	r3, r3, #16
 800edc2:	2b10      	cmp	r3, #16
 800edc4:	d103      	bne.n	800edce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2210      	movs	r2, #16
 800edcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7fe fe40 	bl	800da5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eddc:	e00b      	b.n	800edf6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7f2 fca0 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 800ede4:	e007      	b.n	800edf6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	699a      	ldr	r2, [r3, #24]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f042 0208 	orr.w	r2, r2, #8
 800edf4:	619a      	str	r2, [r3, #24]
}
 800edf6:	bf00      	nop
 800edf8:	3770      	adds	r7, #112	@ 0x70
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	58000c00 	.word	0x58000c00

0800ee04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b09c      	sub	sp, #112	@ 0x70
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee1c:	2b22      	cmp	r3, #34	@ 0x22
 800ee1e:	f040 80be 	bne.w	800ef9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ee36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ee3a:	4013      	ands	r3, r2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee46:	1c9a      	adds	r2, r3, #2
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	3b01      	subs	r3, #1
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	f040 80a1 	bne.w	800efae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee74:	e853 3f00 	ldrex	r3, [r3]
 800ee78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ee7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee80:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee92:	e841 2300 	strex	r3, r2, [r1]
 800ee96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ee98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e6      	bne.n	800ee6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eea8:	e853 3f00 	ldrex	r3, [r3]
 800eeac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb0:	f023 0301 	bic.w	r3, r3, #1
 800eeb4:	663b      	str	r3, [r7, #96]	@ 0x60
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3308      	adds	r3, #8
 800eebc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eebe:	643a      	str	r2, [r7, #64]	@ 0x40
 800eec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eec6:	e841 2300 	strex	r3, r2, [r1]
 800eeca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1e5      	bne.n	800ee9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2220      	movs	r2, #32
 800eed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a33      	ldr	r2, [pc, #204]	@ (800efb8 <UART_RxISR_16BIT+0x1b4>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d01f      	beq.n	800ef30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d018      	beq.n	800ef30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef04:	6a3b      	ldr	r3, [r7, #32]
 800ef06:	e853 3f00 	ldrex	r3, [r3]
 800ef0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef24:	e841 2300 	strex	r3, r2, [r1]
 800ef28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1e6      	bne.n	800eefe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d12e      	bne.n	800ef96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	e853 3f00 	ldrex	r3, [r3]
 800ef4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	f023 0310 	bic.w	r3, r3, #16
 800ef52:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef5c:	61bb      	str	r3, [r7, #24]
 800ef5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef60:	6979      	ldr	r1, [r7, #20]
 800ef62:	69ba      	ldr	r2, [r7, #24]
 800ef64:	e841 2300 	strex	r3, r2, [r1]
 800ef68:	613b      	str	r3, [r7, #16]
   return(result);
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1e6      	bne.n	800ef3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	f003 0310 	and.w	r3, r3, #16
 800ef7a:	2b10      	cmp	r3, #16
 800ef7c:	d103      	bne.n	800ef86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2210      	movs	r2, #16
 800ef84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7fe fd64 	bl	800da5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef94:	e00b      	b.n	800efae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7f2 fbc4 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 800ef9c:	e007      	b.n	800efae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	699a      	ldr	r2, [r3, #24]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f042 0208 	orr.w	r2, r2, #8
 800efac:	619a      	str	r2, [r3, #24]
}
 800efae:	bf00      	nop
 800efb0:	3770      	adds	r7, #112	@ 0x70
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	58000c00 	.word	0x58000c00

0800efbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b0ac      	sub	sp, #176	@ 0xb0
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eff2:	2b22      	cmp	r3, #34	@ 0x22
 800eff4:	f040 8180 	bne.w	800f2f8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800effe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f002:	e123      	b.n	800f24c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f00a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f00e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f012:	b2d9      	uxtb	r1, r3
 800f014:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f01e:	400a      	ands	r2, r1
 800f020:	b2d2      	uxtb	r2, r2
 800f022:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f028:	1c5a      	adds	r2, r3, #1
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f034:	b29b      	uxth	r3, r3
 800f036:	3b01      	subs	r3, #1
 800f038:	b29a      	uxth	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f04e:	f003 0307 	and.w	r3, r3, #7
 800f052:	2b00      	cmp	r3, #0
 800f054:	d053      	beq.n	800f0fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d011      	beq.n	800f086 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00b      	beq.n	800f086 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2201      	movs	r2, #1
 800f074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f07c:	f043 0201 	orr.w	r2, r3, #1
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f08a:	f003 0302 	and.w	r3, r3, #2
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d011      	beq.n	800f0b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f096:	f003 0301 	and.w	r3, r3, #1
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00b      	beq.n	800f0b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0ac:	f043 0204 	orr.w	r2, r3, #4
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0ba:	f003 0304 	and.w	r3, r3, #4
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d011      	beq.n	800f0e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f0c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f0c6:	f003 0301 	and.w	r3, r3, #1
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00b      	beq.n	800f0e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2204      	movs	r2, #4
 800f0d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0dc:	f043 0202 	orr.w	r2, r3, #2
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d006      	beq.n	800f0fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7fe fca9 	bl	800da48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f104:	b29b      	uxth	r3, r3
 800f106:	2b00      	cmp	r3, #0
 800f108:	f040 80a0 	bne.w	800f24c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f114:	e853 3f00 	ldrex	r3, [r3]
 800f118:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f11c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	461a      	mov	r2, r3
 800f12a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f12e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f130:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f132:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f134:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f136:	e841 2300 	strex	r3, r2, [r1]
 800f13a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f13c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e4      	bne.n	800f10c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3308      	adds	r3, #8
 800f148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f14c:	e853 3f00 	ldrex	r3, [r3]
 800f150:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f154:	4b6e      	ldr	r3, [pc, #440]	@ (800f310 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f156:	4013      	ands	r3, r2
 800f158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3308      	adds	r3, #8
 800f162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f166:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f168:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f16c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e3      	bne.n	800f142 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2220      	movs	r2, #32
 800f17e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a60      	ldr	r2, [pc, #384]	@ (800f314 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d021      	beq.n	800f1dc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d01a      	beq.n	800f1dc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1ae:	e853 3f00 	ldrex	r3, [r3]
 800f1b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f1ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f1c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800f1ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f1ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f1d0:	e841 2300 	strex	r3, r2, [r1]
 800f1d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1e4      	bne.n	800f1a6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d130      	bne.n	800f246 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f2:	e853 3f00 	ldrex	r3, [r3]
 800f1f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fa:	f023 0310 	bic.w	r3, r3, #16
 800f1fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f20c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f20e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f214:	e841 2300 	strex	r3, r2, [r1]
 800f218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1e4      	bne.n	800f1ea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	f003 0310 	and.w	r3, r3, #16
 800f22a:	2b10      	cmp	r3, #16
 800f22c:	d103      	bne.n	800f236 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2210      	movs	r2, #16
 800f234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7fe fc0c 	bl	800da5c <HAL_UARTEx_RxEventCallback>
 800f244:	e002      	b.n	800f24c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7f2 fa6c 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f24c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f250:	2b00      	cmp	r3, #0
 800f252:	d006      	beq.n	800f262 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f258:	f003 0320 	and.w	r3, r3, #32
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f47f aed1 	bne.w	800f004 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f268:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f26c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f270:	2b00      	cmp	r3, #0
 800f272:	d049      	beq.n	800f308 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f27a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f27e:	429a      	cmp	r2, r3
 800f280:	d242      	bcs.n	800f308 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3308      	adds	r3, #8
 800f288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	e853 3f00 	ldrex	r3, [r3]
 800f290:	61fb      	str	r3, [r7, #28]
   return(result);
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f2a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e3      	bne.n	800f282 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4a16      	ldr	r2, [pc, #88]	@ (800f318 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f2be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	e853 3f00 	ldrex	r3, [r3]
 800f2cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f043 0320 	orr.w	r3, r3, #32
 800f2d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f2e2:	61bb      	str	r3, [r7, #24]
 800f2e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e6:	6979      	ldr	r1, [r7, #20]
 800f2e8:	69ba      	ldr	r2, [r7, #24]
 800f2ea:	e841 2300 	strex	r3, r2, [r1]
 800f2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1e4      	bne.n	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2f6:	e007      	b.n	800f308 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	699a      	ldr	r2, [r3, #24]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f042 0208 	orr.w	r2, r2, #8
 800f306:	619a      	str	r2, [r3, #24]
}
 800f308:	bf00      	nop
 800f30a:	37b0      	adds	r7, #176	@ 0xb0
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	effffffe 	.word	0xeffffffe
 800f314:	58000c00 	.word	0x58000c00
 800f318:	0800ec4d 	.word	0x0800ec4d

0800f31c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b0ae      	sub	sp, #184	@ 0xb8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f32a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69db      	ldr	r3, [r3, #28]
 800f334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f352:	2b22      	cmp	r3, #34	@ 0x22
 800f354:	f040 8184 	bne.w	800f660 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f35e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f362:	e127      	b.n	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f36a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f376:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f37a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f37e:	4013      	ands	r3, r2
 800f380:	b29a      	uxth	r2, r3
 800f382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f386:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f38c:	1c9a      	adds	r2, r3, #2
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f398:	b29b      	uxth	r3, r3
 800f39a:	3b01      	subs	r3, #1
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	69db      	ldr	r3, [r3, #28]
 800f3aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3b2:	f003 0307 	and.w	r3, r3, #7
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d053      	beq.n	800f462 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3be:	f003 0301 	and.w	r3, r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d011      	beq.n	800f3ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800f3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00b      	beq.n	800f3ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3e0:	f043 0201 	orr.w	r2, r3, #1
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d011      	beq.n	800f41a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f3f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3fa:	f003 0301 	and.w	r3, r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00b      	beq.n	800f41a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2202      	movs	r2, #2
 800f408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f410:	f043 0204 	orr.w	r2, r3, #4
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f41a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f41e:	f003 0304 	and.w	r3, r3, #4
 800f422:	2b00      	cmp	r3, #0
 800f424:	d011      	beq.n	800f44a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00b      	beq.n	800f44a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2204      	movs	r2, #4
 800f438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f440:	f043 0202 	orr.w	r2, r3, #2
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f450:	2b00      	cmp	r3, #0
 800f452:	d006      	beq.n	800f462 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7fe faf7 	bl	800da48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f468:	b29b      	uxth	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f040 80a2 	bne.w	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f478:	e853 3f00 	ldrex	r3, [r3]
 800f47c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f47e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f496:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f49a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f49e:	e841 2300 	strex	r3, r2, [r1]
 800f4a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f4a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1e2      	bne.n	800f470 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3308      	adds	r3, #8
 800f4b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4b4:	e853 3f00 	ldrex	r3, [r3]
 800f4b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f4ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f4bc:	4b6e      	ldr	r3, [pc, #440]	@ (800f678 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f4be:	4013      	ands	r3, r2
 800f4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f4ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f4d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f4d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f4d6:	e841 2300 	strex	r3, r2, [r1]
 800f4da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f4dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1e3      	bne.n	800f4aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2220      	movs	r2, #32
 800f4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a60      	ldr	r2, [pc, #384]	@ (800f67c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d021      	beq.n	800f544 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d01a      	beq.n	800f544 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f516:	e853 3f00 	ldrex	r3, [r3]
 800f51a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f51e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	461a      	mov	r2, r3
 800f52c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f530:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f532:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f538:	e841 2300 	strex	r3, r2, [r1]
 800f53c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e4      	bne.n	800f50e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d130      	bne.n	800f5ae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55a:	e853 3f00 	ldrex	r3, [r3]
 800f55e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f562:	f023 0310 	bic.w	r3, r3, #16
 800f566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f574:	647b      	str	r3, [r7, #68]	@ 0x44
 800f576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f57c:	e841 2300 	strex	r3, r2, [r1]
 800f580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1e4      	bne.n	800f552 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	69db      	ldr	r3, [r3, #28]
 800f58e:	f003 0310 	and.w	r3, r3, #16
 800f592:	2b10      	cmp	r3, #16
 800f594:	d103      	bne.n	800f59e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2210      	movs	r2, #16
 800f59c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7fe fa58 	bl	800da5c <HAL_UARTEx_RxEventCallback>
 800f5ac:	e002      	b.n	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7f2 f8b8 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d006      	beq.n	800f5ca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f5bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f5c0:	f003 0320 	and.w	r3, r3, #32
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f47f aecd 	bne.w	800f364 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f5d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d049      	beq.n	800f670 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f5e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d242      	bcs.n	800f670 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	3308      	adds	r3, #8
 800f5f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5f4:	e853 3f00 	ldrex	r3, [r3]
 800f5f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f5fa:	6a3b      	ldr	r3, [r7, #32]
 800f5fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3308      	adds	r3, #8
 800f60a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f60e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f610:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f616:	e841 2300 	strex	r3, r2, [r1]
 800f61a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1e3      	bne.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a16      	ldr	r2, [pc, #88]	@ (800f680 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f626:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	e853 3f00 	ldrex	r3, [r3]
 800f634:	60fb      	str	r3, [r7, #12]
   return(result);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f043 0320 	orr.w	r3, r3, #32
 800f63c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f64a:	61fb      	str	r3, [r7, #28]
 800f64c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	69b9      	ldr	r1, [r7, #24]
 800f650:	69fa      	ldr	r2, [r7, #28]
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	617b      	str	r3, [r7, #20]
   return(result);
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e4      	bne.n	800f628 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f65e:	e007      	b.n	800f670 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	699a      	ldr	r2, [r3, #24]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f042 0208 	orr.w	r2, r2, #8
 800f66e:	619a      	str	r2, [r3, #24]
}
 800f670:	bf00      	nop
 800f672:	37b8      	adds	r7, #184	@ 0xb8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	effffffe 	.word	0xeffffffe
 800f67c:	58000c00 	.word	0x58000c00
 800f680:	0800ee05 	.word	0x0800ee05

0800f684 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d101      	bne.n	800f6d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	e027      	b.n	800f726 <HAL_UARTEx_DisableFifoMode+0x66>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2224      	movs	r2, #36	@ 0x24
 800f6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f022 0201 	bic.w	r2, r2, #1
 800f6fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f704:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2220      	movs	r2, #32
 800f718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f742:	2b01      	cmp	r3, #1
 800f744:	d101      	bne.n	800f74a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f746:	2302      	movs	r3, #2
 800f748:	e02d      	b.n	800f7a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2224      	movs	r2, #36	@ 0x24
 800f756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f022 0201 	bic.w	r2, r2, #1
 800f770:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	430a      	orrs	r2, r1
 800f784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f850 	bl	800f82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2220      	movs	r2, #32
 800f798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d101      	bne.n	800f7c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	e02d      	b.n	800f822 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2224      	movs	r2, #36	@ 0x24
 800f7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f022 0201 	bic.w	r2, r2, #1
 800f7ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	683a      	ldr	r2, [r7, #0]
 800f7fe:	430a      	orrs	r2, r1
 800f800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 f812 	bl	800f82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2220      	movs	r2, #32
 800f814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
	...

0800f82c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d108      	bne.n	800f84e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f84c:	e031      	b.n	800f8b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f84e:	2310      	movs	r3, #16
 800f850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f852:	2310      	movs	r3, #16
 800f854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	0e5b      	lsrs	r3, r3, #25
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	f003 0307 	and.w	r3, r3, #7
 800f864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	0f5b      	lsrs	r3, r3, #29
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	f003 0307 	and.w	r3, r3, #7
 800f874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	7b3a      	ldrb	r2, [r7, #12]
 800f87a:	4911      	ldr	r1, [pc, #68]	@ (800f8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f87c:	5c8a      	ldrb	r2, [r1, r2]
 800f87e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f882:	7b3a      	ldrb	r2, [r7, #12]
 800f884:	490f      	ldr	r1, [pc, #60]	@ (800f8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f888:	fb93 f3f2 	sdiv	r3, r3, r2
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	7b7a      	ldrb	r2, [r7, #13]
 800f898:	4909      	ldr	r1, [pc, #36]	@ (800f8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f89a:	5c8a      	ldrb	r2, [r1, r2]
 800f89c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8a0:	7b7a      	ldrb	r2, [r7, #13]
 800f8a2:	4908      	ldr	r1, [pc, #32]	@ (800f8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f8a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8b2:	bf00      	nop
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	0801a5ec 	.word	0x0801a5ec
 800f8c4:	0801a5f4 	.word	0x0801a5f4

0800f8c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8c8:	b084      	sub	sp, #16
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	f107 001c 	add.w	r0, r7, #28
 800f8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d121      	bne.n	800f926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68da      	ldr	r2, [r3, #12]
 800f8f2:	4b2c      	ldr	r3, [pc, #176]	@ (800f9a4 <USB_CoreInit+0xdc>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d105      	bne.n	800f91a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f001 faf6 	bl	8010f0c <USB_CoreReset>
 800f920:	4603      	mov	r3, r0
 800f922:	73fb      	strb	r3, [r7, #15]
 800f924:	e01b      	b.n	800f95e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f001 faea 	bl	8010f0c <USB_CoreReset>
 800f938:	4603      	mov	r3, r0
 800f93a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f93c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f940:	2b00      	cmp	r3, #0
 800f942:	d106      	bne.n	800f952 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f948:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f950:	e005      	b.n	800f95e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f956:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f95e:	7fbb      	ldrb	r3, [r7, #30]
 800f960:	2b01      	cmp	r3, #1
 800f962:	d116      	bne.n	800f992 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f972:	4b0d      	ldr	r3, [pc, #52]	@ (800f9a8 <USB_CoreInit+0xe0>)
 800f974:	4313      	orrs	r3, r2
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	f043 0206 	orr.w	r2, r3, #6
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	689b      	ldr	r3, [r3, #8]
 800f98a:	f043 0220 	orr.w	r2, r3, #32
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f992:	7bfb      	ldrb	r3, [r7, #15]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f99e:	b004      	add	sp, #16
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	ffbdffbf 	.word	0xffbdffbf
 800f9a8:	03ee0000 	.word	0x03ee0000

0800f9ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b087      	sub	sp, #28
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d165      	bne.n	800fa8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	4a41      	ldr	r2, [pc, #260]	@ (800fac8 <USB_SetTurnaroundTime+0x11c>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d906      	bls.n	800f9d6 <USB_SetTurnaroundTime+0x2a>
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	4a40      	ldr	r2, [pc, #256]	@ (800facc <USB_SetTurnaroundTime+0x120>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d202      	bcs.n	800f9d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f9d0:	230f      	movs	r3, #15
 800f9d2:	617b      	str	r3, [r7, #20]
 800f9d4:	e062      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	4a3c      	ldr	r2, [pc, #240]	@ (800facc <USB_SetTurnaroundTime+0x120>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d306      	bcc.n	800f9ec <USB_SetTurnaroundTime+0x40>
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	4a3b      	ldr	r2, [pc, #236]	@ (800fad0 <USB_SetTurnaroundTime+0x124>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d202      	bcs.n	800f9ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f9e6:	230e      	movs	r3, #14
 800f9e8:	617b      	str	r3, [r7, #20]
 800f9ea:	e057      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	4a38      	ldr	r2, [pc, #224]	@ (800fad0 <USB_SetTurnaroundTime+0x124>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d306      	bcc.n	800fa02 <USB_SetTurnaroundTime+0x56>
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	4a37      	ldr	r2, [pc, #220]	@ (800fad4 <USB_SetTurnaroundTime+0x128>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d202      	bcs.n	800fa02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f9fc:	230d      	movs	r3, #13
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	e04c      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	4a33      	ldr	r2, [pc, #204]	@ (800fad4 <USB_SetTurnaroundTime+0x128>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d306      	bcc.n	800fa18 <USB_SetTurnaroundTime+0x6c>
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	4a32      	ldr	r2, [pc, #200]	@ (800fad8 <USB_SetTurnaroundTime+0x12c>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d802      	bhi.n	800fa18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fa12:	230c      	movs	r3, #12
 800fa14:	617b      	str	r3, [r7, #20]
 800fa16:	e041      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	4a2f      	ldr	r2, [pc, #188]	@ (800fad8 <USB_SetTurnaroundTime+0x12c>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d906      	bls.n	800fa2e <USB_SetTurnaroundTime+0x82>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	4a2e      	ldr	r2, [pc, #184]	@ (800fadc <USB_SetTurnaroundTime+0x130>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d802      	bhi.n	800fa2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa28:	230b      	movs	r3, #11
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	e036      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	4a2a      	ldr	r2, [pc, #168]	@ (800fadc <USB_SetTurnaroundTime+0x130>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d906      	bls.n	800fa44 <USB_SetTurnaroundTime+0x98>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	4a29      	ldr	r2, [pc, #164]	@ (800fae0 <USB_SetTurnaroundTime+0x134>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d802      	bhi.n	800fa44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa3e:	230a      	movs	r3, #10
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	e02b      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	4a26      	ldr	r2, [pc, #152]	@ (800fae0 <USB_SetTurnaroundTime+0x134>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d906      	bls.n	800fa5a <USB_SetTurnaroundTime+0xae>
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	4a25      	ldr	r2, [pc, #148]	@ (800fae4 <USB_SetTurnaroundTime+0x138>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d202      	bcs.n	800fa5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fa54:	2309      	movs	r3, #9
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	e020      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	4a21      	ldr	r2, [pc, #132]	@ (800fae4 <USB_SetTurnaroundTime+0x138>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d306      	bcc.n	800fa70 <USB_SetTurnaroundTime+0xc4>
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	4a20      	ldr	r2, [pc, #128]	@ (800fae8 <USB_SetTurnaroundTime+0x13c>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d802      	bhi.n	800fa70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fa6a:	2308      	movs	r3, #8
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	e015      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	4a1d      	ldr	r2, [pc, #116]	@ (800fae8 <USB_SetTurnaroundTime+0x13c>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d906      	bls.n	800fa86 <USB_SetTurnaroundTime+0xda>
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	4a1c      	ldr	r2, [pc, #112]	@ (800faec <USB_SetTurnaroundTime+0x140>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d202      	bcs.n	800fa86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fa80:	2307      	movs	r3, #7
 800fa82:	617b      	str	r3, [r7, #20]
 800fa84:	e00a      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fa86:	2306      	movs	r3, #6
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	e007      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa8c:	79fb      	ldrb	r3, [r7, #7]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d102      	bne.n	800fa98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa92:	2309      	movs	r3, #9
 800fa94:	617b      	str	r3, [r7, #20]
 800fa96:	e001      	b.n	800fa9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa98:	2309      	movs	r3, #9
 800fa9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	68da      	ldr	r2, [r3, #12]
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	029b      	lsls	r3, r3, #10
 800fab0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800fab4:	431a      	orrs	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	371c      	adds	r7, #28
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	00d8acbf 	.word	0x00d8acbf
 800facc:	00e4e1c0 	.word	0x00e4e1c0
 800fad0:	00f42400 	.word	0x00f42400
 800fad4:	01067380 	.word	0x01067380
 800fad8:	011a499f 	.word	0x011a499f
 800fadc:	01312cff 	.word	0x01312cff
 800fae0:	014ca43f 	.word	0x014ca43f
 800fae4:	016e3600 	.word	0x016e3600
 800fae8:	01a6ab1f 	.word	0x01a6ab1f
 800faec:	01e84800 	.word	0x01e84800

0800faf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	f043 0201 	orr.w	r2, r3, #1
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	f023 0201 	bic.w	r2, r3, #1
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fb40:	2300      	movs	r3, #0
 800fb42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fb50:	78fb      	ldrb	r3, [r7, #3]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d115      	bne.n	800fb82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fb62:	200a      	movs	r0, #10
 800fb64:	f7f2 fe28 	bl	80027b8 <HAL_Delay>
      ms += 10U;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	330a      	adds	r3, #10
 800fb6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f001 f93b 	bl	8010dea <USB_GetMode>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d01e      	beq.n	800fbb8 <USB_SetCurrentMode+0x84>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2bc7      	cmp	r3, #199	@ 0xc7
 800fb7e:	d9f0      	bls.n	800fb62 <USB_SetCurrentMode+0x2e>
 800fb80:	e01a      	b.n	800fbb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb82:	78fb      	ldrb	r3, [r7, #3]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d115      	bne.n	800fbb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fb94:	200a      	movs	r0, #10
 800fb96:	f7f2 fe0f 	bl	80027b8 <HAL_Delay>
      ms += 10U;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	330a      	adds	r3, #10
 800fb9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f001 f922 	bl	8010dea <USB_GetMode>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d005      	beq.n	800fbb8 <USB_SetCurrentMode+0x84>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2bc7      	cmp	r3, #199	@ 0xc7
 800fbb0:	d9f0      	bls.n	800fb94 <USB_SetCurrentMode+0x60>
 800fbb2:	e001      	b.n	800fbb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e005      	b.n	800fbc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2bc8      	cmp	r3, #200	@ 0xc8
 800fbbc:	d101      	bne.n	800fbc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e000      	b.n	800fbc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3710      	adds	r7, #16
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fbcc:	b084      	sub	sp, #16
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b086      	sub	sp, #24
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800fbda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	613b      	str	r3, [r7, #16]
 800fbea:	e009      	b.n	800fc00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	3340      	adds	r3, #64	@ 0x40
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4413      	add	r3, r2
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	613b      	str	r3, [r7, #16]
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	2b0e      	cmp	r3, #14
 800fc04:	d9f2      	bls.n	800fbec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fc06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d11c      	bne.n	800fc48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fc1c:	f043 0302 	orr.w	r3, r3, #2
 800fc20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	e005      	b.n	800fc54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d10d      	bne.n	800fc84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d104      	bne.n	800fc7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc70:	2100      	movs	r1, #0
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f968 	bl	800ff48 <USB_SetDevSpeed>
 800fc78:	e008      	b.n	800fc8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f963 	bl	800ff48 <USB_SetDevSpeed>
 800fc82:	e003      	b.n	800fc8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc84:	2103      	movs	r1, #3
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f95e 	bl	800ff48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc8c:	2110      	movs	r1, #16
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f8fa 	bl	800fe88 <USB_FlushTxFifo>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f924 	bl	800feec <USB_FlushRxFifo>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fccc:	461a      	mov	r2, r3
 800fcce:	2300      	movs	r3, #0
 800fcd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	613b      	str	r3, [r7, #16]
 800fcd6:	e043      	b.n	800fd60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	015a      	lsls	r2, r3, #5
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	4413      	add	r3, r2
 800fce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fcea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fcee:	d118      	bne.n	800fd22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10a      	bne.n	800fd0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd02:	461a      	mov	r2, r3
 800fd04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fd08:	6013      	str	r3, [r2, #0]
 800fd0a:	e013      	b.n	800fd34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	015a      	lsls	r2, r3, #5
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4413      	add	r3, r2
 800fd14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd18:	461a      	mov	r2, r3
 800fd1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	e008      	b.n	800fd34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd2e:	461a      	mov	r2, r3
 800fd30:	2300      	movs	r3, #0
 800fd32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd40:	461a      	mov	r2, r3
 800fd42:	2300      	movs	r3, #0
 800fd44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	015a      	lsls	r2, r3, #5
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd52:	461a      	mov	r2, r3
 800fd54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fd58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	613b      	str	r3, [r7, #16]
 800fd60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fd64:	461a      	mov	r2, r3
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d3b5      	bcc.n	800fcd8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	613b      	str	r3, [r7, #16]
 800fd70:	e043      	b.n	800fdfa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd88:	d118      	bne.n	800fdbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10a      	bne.n	800fda6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fda2:	6013      	str	r3, [r2, #0]
 800fda4:	e013      	b.n	800fdce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	015a      	lsls	r2, r3, #5
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	4413      	add	r3, r2
 800fdae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fdb8:	6013      	str	r3, [r2, #0]
 800fdba:	e008      	b.n	800fdce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	015a      	lsls	r2, r3, #5
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdc8:	461a      	mov	r2, r3
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdda:	461a      	mov	r2, r3
 800fddc:	2300      	movs	r3, #0
 800fdde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	015a      	lsls	r2, r3, #5
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdec:	461a      	mov	r2, r3
 800fdee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fdf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	613b      	str	r3, [r7, #16]
 800fdfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fdfe:	461a      	mov	r2, r3
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d3b5      	bcc.n	800fd72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fe14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fe26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fe28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d105      	bne.n	800fe3c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	699b      	ldr	r3, [r3, #24]
 800fe34:	f043 0210 	orr.w	r2, r3, #16
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	699a      	ldr	r2, [r3, #24]
 800fe40:	4b0f      	ldr	r3, [pc, #60]	@ (800fe80 <USB_DevInit+0x2b4>)
 800fe42:	4313      	orrs	r3, r2
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fe48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d005      	beq.n	800fe5c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	f043 0208 	orr.w	r2, r3, #8
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d105      	bne.n	800fe70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	699a      	ldr	r2, [r3, #24]
 800fe68:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <USB_DevInit+0x2b8>)
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3718      	adds	r7, #24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe7c:	b004      	add	sp, #16
 800fe7e:	4770      	bx	lr
 800fe80:	803c3800 	.word	0x803c3800
 800fe84:	40000004 	.word	0x40000004

0800fe88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe92:	2300      	movs	r3, #0
 800fe94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fea2:	d901      	bls.n	800fea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fea4:	2303      	movs	r3, #3
 800fea6:	e01b      	b.n	800fee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	691b      	ldr	r3, [r3, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	daf2      	bge.n	800fe96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800feb0:	2300      	movs	r3, #0
 800feb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	019b      	lsls	r3, r3, #6
 800feb8:	f043 0220 	orr.w	r2, r3, #32
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	3301      	adds	r3, #1
 800fec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fecc:	d901      	bls.n	800fed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fece:	2303      	movs	r3, #3
 800fed0:	e006      	b.n	800fee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	691b      	ldr	r3, [r3, #16]
 800fed6:	f003 0320 	and.w	r3, r3, #32
 800feda:	2b20      	cmp	r3, #32
 800fedc:	d0f0      	beq.n	800fec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fef4:	2300      	movs	r3, #0
 800fef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	3301      	adds	r3, #1
 800fefc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ff04:	d901      	bls.n	800ff0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ff06:	2303      	movs	r3, #3
 800ff08:	e018      	b.n	800ff3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	daf2      	bge.n	800fef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ff12:	2300      	movs	r3, #0
 800ff14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2210      	movs	r2, #16
 800ff1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ff28:	d901      	bls.n	800ff2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	e006      	b.n	800ff3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	f003 0310 	and.w	r3, r3, #16
 800ff36:	2b10      	cmp	r3, #16
 800ff38:	d0f0      	beq.n	800ff1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	460b      	mov	r3, r1
 800ff52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	78fb      	ldrb	r3, [r7, #3]
 800ff62:	68f9      	ldr	r1, [r7, #12]
 800ff64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3714      	adds	r7, #20
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff7a:	b480      	push	{r7}
 800ff7c:	b087      	sub	sp, #28
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	f003 0306 	and.w	r3, r3, #6
 800ff92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d102      	bne.n	800ffa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
 800ff9e:	e00a      	b.n	800ffb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d002      	beq.n	800ffac <USB_GetDevSpeed+0x32>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b06      	cmp	r3, #6
 800ffaa:	d102      	bne.n	800ffb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ffac:	2302      	movs	r3, #2
 800ffae:	75fb      	strb	r3, [r7, #23]
 800ffb0:	e001      	b.n	800ffb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ffb2:	230f      	movs	r3, #15
 800ffb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	371c      	adds	r7, #28
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	785b      	ldrb	r3, [r3, #1]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d139      	bne.n	8010054 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffe6:	69da      	ldr	r2, [r3, #28]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	f003 030f 	and.w	r3, r3, #15
 800fff0:	2101      	movs	r1, #1
 800fff2:	fa01 f303 	lsl.w	r3, r1, r3
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	68f9      	ldr	r1, [r7, #12]
 800fffa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fffe:	4313      	orrs	r3, r2
 8010000:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	015a      	lsls	r2, r3, #5
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	4413      	add	r3, r2
 801000a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010014:	2b00      	cmp	r3, #0
 8010016:	d153      	bne.n	80100c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	015a      	lsls	r2, r3, #5
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	4413      	add	r3, r2
 8010020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	791b      	ldrb	r3, [r3, #4]
 8010032:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010034:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	059b      	lsls	r3, r3, #22
 801003a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801003c:	431a      	orrs	r2, r3
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	0159      	lsls	r1, r3, #5
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	440b      	add	r3, r1
 8010046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801004a:	4619      	mov	r1, r3
 801004c:	4b20      	ldr	r3, [pc, #128]	@ (80100d0 <USB_ActivateEndpoint+0x10c>)
 801004e:	4313      	orrs	r3, r2
 8010050:	600b      	str	r3, [r1, #0]
 8010052:	e035      	b.n	80100c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801005a:	69da      	ldr	r2, [r3, #28]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f003 030f 	and.w	r3, r3, #15
 8010064:	2101      	movs	r1, #1
 8010066:	fa01 f303 	lsl.w	r3, r1, r3
 801006a:	041b      	lsls	r3, r3, #16
 801006c:	68f9      	ldr	r1, [r7, #12]
 801006e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010072:	4313      	orrs	r3, r2
 8010074:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	015a      	lsls	r2, r3, #5
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	4413      	add	r3, r2
 801007e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d119      	bne.n	80100c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	791b      	ldrb	r3, [r3, #4]
 80100a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80100a8:	430b      	orrs	r3, r1
 80100aa:	431a      	orrs	r2, r3
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	0159      	lsls	r1, r3, #5
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	440b      	add	r3, r1
 80100b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100b8:	4619      	mov	r1, r3
 80100ba:	4b05      	ldr	r3, [pc, #20]	@ (80100d0 <USB_ActivateEndpoint+0x10c>)
 80100bc:	4313      	orrs	r3, r2
 80100be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80100c0:	2300      	movs	r3, #0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	10008000 	.word	0x10008000

080100d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	785b      	ldrb	r3, [r3, #1]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d161      	bne.n	80101b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	015a      	lsls	r2, r3, #5
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	4413      	add	r3, r2
 80100f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010106:	d11f      	bne.n	8010148 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	015a      	lsls	r2, r3, #5
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	4413      	add	r3, r2
 8010110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	0151      	lsls	r1, r2, #5
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	440a      	add	r2, r1
 801011e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010126:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	0151      	lsls	r1, r2, #5
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	440a      	add	r2, r1
 801013e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010142:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801014e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f003 030f 	and.w	r3, r3, #15
 8010158:	2101      	movs	r1, #1
 801015a:	fa01 f303 	lsl.w	r3, r1, r3
 801015e:	b29b      	uxth	r3, r3
 8010160:	43db      	mvns	r3, r3
 8010162:	68f9      	ldr	r1, [r7, #12]
 8010164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010168:	4013      	ands	r3, r2
 801016a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010172:	69da      	ldr	r2, [r3, #28]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	f003 030f 	and.w	r3, r3, #15
 801017c:	2101      	movs	r1, #1
 801017e:	fa01 f303 	lsl.w	r3, r1, r3
 8010182:	b29b      	uxth	r3, r3
 8010184:	43db      	mvns	r3, r3
 8010186:	68f9      	ldr	r1, [r7, #12]
 8010188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801018c:	4013      	ands	r3, r2
 801018e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	015a      	lsls	r2, r3, #5
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	4413      	add	r3, r2
 8010198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	0159      	lsls	r1, r3, #5
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	440b      	add	r3, r1
 80101a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101aa:	4619      	mov	r1, r3
 80101ac:	4b35      	ldr	r3, [pc, #212]	@ (8010284 <USB_DeactivateEndpoint+0x1b0>)
 80101ae:	4013      	ands	r3, r2
 80101b0:	600b      	str	r3, [r1, #0]
 80101b2:	e060      	b.n	8010276 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	015a      	lsls	r2, r3, #5
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	4413      	add	r3, r2
 80101bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80101c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80101ca:	d11f      	bne.n	801020c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	015a      	lsls	r2, r3, #5
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	4413      	add	r3, r2
 80101d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	0151      	lsls	r1, r2, #5
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	440a      	add	r2, r1
 80101e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80101e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80101ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	015a      	lsls	r2, r3, #5
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	4413      	add	r3, r2
 80101f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	0151      	lsls	r1, r2, #5
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	440a      	add	r2, r1
 8010202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801020a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	f003 030f 	and.w	r3, r3, #15
 801021c:	2101      	movs	r1, #1
 801021e:	fa01 f303 	lsl.w	r3, r1, r3
 8010222:	041b      	lsls	r3, r3, #16
 8010224:	43db      	mvns	r3, r3
 8010226:	68f9      	ldr	r1, [r7, #12]
 8010228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801022c:	4013      	ands	r3, r2
 801022e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010236:	69da      	ldr	r2, [r3, #28]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f003 030f 	and.w	r3, r3, #15
 8010240:	2101      	movs	r1, #1
 8010242:	fa01 f303 	lsl.w	r3, r1, r3
 8010246:	041b      	lsls	r3, r3, #16
 8010248:	43db      	mvns	r3, r3
 801024a:	68f9      	ldr	r1, [r7, #12]
 801024c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010250:	4013      	ands	r3, r2
 8010252:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	015a      	lsls	r2, r3, #5
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4413      	add	r3, r2
 801025c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	0159      	lsls	r1, r3, #5
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	440b      	add	r3, r1
 801026a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801026e:	4619      	mov	r1, r3
 8010270:	4b05      	ldr	r3, [pc, #20]	@ (8010288 <USB_DeactivateEndpoint+0x1b4>)
 8010272:	4013      	ands	r3, r2
 8010274:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	ec337800 	.word	0xec337800
 8010288:	eff37800 	.word	0xeff37800

0801028c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	@ 0x28
 8010290:	af02      	add	r7, sp, #8
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	4613      	mov	r3, r2
 8010298:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	785b      	ldrb	r3, [r3, #1]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	f040 8181 	bne.w	80105b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d132      	bne.n	801031c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	015a      	lsls	r2, r3, #5
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	4413      	add	r3, r2
 80102be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102c2:	691a      	ldr	r2, [r3, #16]
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	0159      	lsls	r1, r3, #5
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	440b      	add	r3, r1
 80102cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102d0:	4619      	mov	r1, r3
 80102d2:	4ba5      	ldr	r3, [pc, #660]	@ (8010568 <USB_EPStartXfer+0x2dc>)
 80102d4:	4013      	ands	r3, r2
 80102d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	015a      	lsls	r2, r3, #5
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	4413      	add	r3, r2
 80102e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102e4:	691b      	ldr	r3, [r3, #16]
 80102e6:	69ba      	ldr	r2, [r7, #24]
 80102e8:	0151      	lsls	r1, r2, #5
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	440a      	add	r2, r1
 80102ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80102f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	015a      	lsls	r2, r3, #5
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	4413      	add	r3, r2
 8010300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010304:	691a      	ldr	r2, [r3, #16]
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	0159      	lsls	r1, r3, #5
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	440b      	add	r3, r1
 801030e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010312:	4619      	mov	r1, r3
 8010314:	4b95      	ldr	r3, [pc, #596]	@ (801056c <USB_EPStartXfer+0x2e0>)
 8010316:	4013      	ands	r3, r2
 8010318:	610b      	str	r3, [r1, #16]
 801031a:	e092      	b.n	8010442 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	015a      	lsls	r2, r3, #5
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	4413      	add	r3, r2
 8010324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010328:	691a      	ldr	r2, [r3, #16]
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	0159      	lsls	r1, r3, #5
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	440b      	add	r3, r1
 8010332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010336:	4619      	mov	r1, r3
 8010338:	4b8c      	ldr	r3, [pc, #560]	@ (801056c <USB_EPStartXfer+0x2e0>)
 801033a:	4013      	ands	r3, r2
 801033c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	015a      	lsls	r2, r3, #5
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	4413      	add	r3, r2
 8010346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801034a:	691a      	ldr	r2, [r3, #16]
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	0159      	lsls	r1, r3, #5
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	440b      	add	r3, r1
 8010354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010358:	4619      	mov	r1, r3
 801035a:	4b83      	ldr	r3, [pc, #524]	@ (8010568 <USB_EPStartXfer+0x2dc>)
 801035c:	4013      	ands	r3, r2
 801035e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d11a      	bne.n	801039c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	691a      	ldr	r2, [r3, #16]
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	429a      	cmp	r2, r3
 8010370:	d903      	bls.n	801037a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	689a      	ldr	r2, [r3, #8]
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	015a      	lsls	r2, r3, #5
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	0151      	lsls	r1, r2, #5
 801038c:	69fa      	ldr	r2, [r7, #28]
 801038e:	440a      	add	r2, r1
 8010390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010398:	6113      	str	r3, [r2, #16]
 801039a:	e01b      	b.n	80103d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	015a      	lsls	r2, r3, #5
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	4413      	add	r3, r2
 80103a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6919      	ldr	r1, [r3, #16]
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	440b      	add	r3, r1
 80103b4:	1e59      	subs	r1, r3, #1
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80103be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80103c0:	4b6b      	ldr	r3, [pc, #428]	@ (8010570 <USB_EPStartXfer+0x2e4>)
 80103c2:	400b      	ands	r3, r1
 80103c4:	69b9      	ldr	r1, [r7, #24]
 80103c6:	0148      	lsls	r0, r1, #5
 80103c8:	69f9      	ldr	r1, [r7, #28]
 80103ca:	4401      	add	r1, r0
 80103cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80103d0:	4313      	orrs	r3, r2
 80103d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	015a      	lsls	r2, r3, #5
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	4413      	add	r3, r2
 80103dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103e0:	691a      	ldr	r2, [r3, #16]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	691b      	ldr	r3, [r3, #16]
 80103e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103ea:	69b9      	ldr	r1, [r7, #24]
 80103ec:	0148      	lsls	r0, r1, #5
 80103ee:	69f9      	ldr	r1, [r7, #28]
 80103f0:	4401      	add	r1, r0
 80103f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80103f6:	4313      	orrs	r3, r2
 80103f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	791b      	ldrb	r3, [r3, #4]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d11f      	bne.n	8010442 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	015a      	lsls	r2, r3, #5
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	4413      	add	r3, r2
 801040a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801040e:	691b      	ldr	r3, [r3, #16]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	0151      	lsls	r1, r2, #5
 8010414:	69fa      	ldr	r2, [r7, #28]
 8010416:	440a      	add	r2, r1
 8010418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801041c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010420:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	015a      	lsls	r2, r3, #5
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	4413      	add	r3, r2
 801042a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	0151      	lsls	r1, r2, #5
 8010434:	69fa      	ldr	r2, [r7, #28]
 8010436:	440a      	add	r2, r1
 8010438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801043c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010440:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010442:	79fb      	ldrb	r3, [r7, #7]
 8010444:	2b01      	cmp	r3, #1
 8010446:	d14b      	bne.n	80104e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	69db      	ldr	r3, [r3, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d009      	beq.n	8010464 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801045c:	461a      	mov	r2, r3
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	69db      	ldr	r3, [r3, #28]
 8010462:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	791b      	ldrb	r3, [r3, #4]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d128      	bne.n	80104be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010478:	2b00      	cmp	r3, #0
 801047a:	d110      	bne.n	801049e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	015a      	lsls	r2, r3, #5
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	4413      	add	r3, r2
 8010484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	69ba      	ldr	r2, [r7, #24]
 801048c:	0151      	lsls	r1, r2, #5
 801048e:	69fa      	ldr	r2, [r7, #28]
 8010490:	440a      	add	r2, r1
 8010492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010496:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	e00f      	b.n	80104be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	69ba      	ldr	r2, [r7, #24]
 80104ae:	0151      	lsls	r1, r2, #5
 80104b0:	69fa      	ldr	r2, [r7, #28]
 80104b2:	440a      	add	r2, r1
 80104b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	0151      	lsls	r1, r2, #5
 80104d0:	69fa      	ldr	r2, [r7, #28]
 80104d2:	440a      	add	r2, r1
 80104d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80104dc:	6013      	str	r3, [r2, #0]
 80104de:	e16a      	b.n	80107b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	015a      	lsls	r2, r3, #5
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	4413      	add	r3, r2
 80104e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	69ba      	ldr	r2, [r7, #24]
 80104f0:	0151      	lsls	r1, r2, #5
 80104f2:	69fa      	ldr	r2, [r7, #28]
 80104f4:	440a      	add	r2, r1
 80104f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80104fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	791b      	ldrb	r3, [r3, #4]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d015      	beq.n	8010534 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	691b      	ldr	r3, [r3, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	f000 8152 	beq.w	80107b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	f003 030f 	and.w	r3, r3, #15
 8010522:	2101      	movs	r1, #1
 8010524:	fa01 f303 	lsl.w	r3, r1, r3
 8010528:	69f9      	ldr	r1, [r7, #28]
 801052a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801052e:	4313      	orrs	r3, r2
 8010530:	634b      	str	r3, [r1, #52]	@ 0x34
 8010532:	e140      	b.n	80107b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010540:	2b00      	cmp	r3, #0
 8010542:	d117      	bne.n	8010574 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	015a      	lsls	r2, r3, #5
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	4413      	add	r3, r2
 801054c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	69ba      	ldr	r2, [r7, #24]
 8010554:	0151      	lsls	r1, r2, #5
 8010556:	69fa      	ldr	r2, [r7, #28]
 8010558:	440a      	add	r2, r1
 801055a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801055e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010562:	6013      	str	r3, [r2, #0]
 8010564:	e016      	b.n	8010594 <USB_EPStartXfer+0x308>
 8010566:	bf00      	nop
 8010568:	e007ffff 	.word	0xe007ffff
 801056c:	fff80000 	.word	0xfff80000
 8010570:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	015a      	lsls	r2, r3, #5
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	4413      	add	r3, r2
 801057c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	69ba      	ldr	r2, [r7, #24]
 8010584:	0151      	lsls	r1, r2, #5
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	440a      	add	r2, r1
 801058a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010592:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	68d9      	ldr	r1, [r3, #12]
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	781a      	ldrb	r2, [r3, #0]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	b298      	uxth	r0, r3
 80105a2:	79fb      	ldrb	r3, [r7, #7]
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	4603      	mov	r3, r0
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f000 f9b9 	bl	8010920 <USB_WritePacket>
 80105ae:	e102      	b.n	80107b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105bc:	691a      	ldr	r2, [r3, #16]
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	0159      	lsls	r1, r3, #5
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	440b      	add	r3, r1
 80105c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ca:	4619      	mov	r1, r3
 80105cc:	4b7c      	ldr	r3, [pc, #496]	@ (80107c0 <USB_EPStartXfer+0x534>)
 80105ce:	4013      	ands	r3, r2
 80105d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	015a      	lsls	r2, r3, #5
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	4413      	add	r3, r2
 80105da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105de:	691a      	ldr	r2, [r3, #16]
 80105e0:	69bb      	ldr	r3, [r7, #24]
 80105e2:	0159      	lsls	r1, r3, #5
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	440b      	add	r3, r1
 80105e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ec:	4619      	mov	r1, r3
 80105ee:	4b75      	ldr	r3, [pc, #468]	@ (80107c4 <USB_EPStartXfer+0x538>)
 80105f0:	4013      	ands	r3, r2
 80105f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d12f      	bne.n	801065a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d003      	beq.n	801060a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	689a      	ldr	r2, [r3, #8]
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	689a      	ldr	r2, [r3, #8]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	015a      	lsls	r2, r3, #5
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	4413      	add	r3, r2
 801061a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801061e:	691a      	ldr	r2, [r3, #16]
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	6a1b      	ldr	r3, [r3, #32]
 8010624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010628:	69b9      	ldr	r1, [r7, #24]
 801062a:	0148      	lsls	r0, r1, #5
 801062c:	69f9      	ldr	r1, [r7, #28]
 801062e:	4401      	add	r1, r0
 8010630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010634:	4313      	orrs	r3, r2
 8010636:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	69ba      	ldr	r2, [r7, #24]
 8010648:	0151      	lsls	r1, r2, #5
 801064a:	69fa      	ldr	r2, [r7, #28]
 801064c:	440a      	add	r2, r1
 801064e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010656:	6113      	str	r3, [r2, #16]
 8010658:	e05f      	b.n	801071a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d123      	bne.n	80106aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	015a      	lsls	r2, r3, #5
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	4413      	add	r3, r2
 801066a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801066e:	691a      	ldr	r2, [r3, #16]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010678:	69b9      	ldr	r1, [r7, #24]
 801067a:	0148      	lsls	r0, r1, #5
 801067c:	69f9      	ldr	r1, [r7, #28]
 801067e:	4401      	add	r1, r0
 8010680:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010684:	4313      	orrs	r3, r2
 8010686:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	015a      	lsls	r2, r3, #5
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	4413      	add	r3, r2
 8010690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	69ba      	ldr	r2, [r7, #24]
 8010698:	0151      	lsls	r1, r2, #5
 801069a:	69fa      	ldr	r2, [r7, #28]
 801069c:	440a      	add	r2, r1
 801069e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80106a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80106a6:	6113      	str	r3, [r2, #16]
 80106a8:	e037      	b.n	801071a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	691a      	ldr	r2, [r3, #16]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	4413      	add	r3, r2
 80106b4:	1e5a      	subs	r2, r3, #1
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80106be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	8afa      	ldrh	r2, [r7, #22]
 80106c6:	fb03 f202 	mul.w	r2, r3, r2
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	015a      	lsls	r2, r3, #5
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	4413      	add	r3, r2
 80106d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	8afb      	ldrh	r3, [r7, #22]
 80106de:	04d9      	lsls	r1, r3, #19
 80106e0:	4b39      	ldr	r3, [pc, #228]	@ (80107c8 <USB_EPStartXfer+0x53c>)
 80106e2:	400b      	ands	r3, r1
 80106e4:	69b9      	ldr	r1, [r7, #24]
 80106e6:	0148      	lsls	r0, r1, #5
 80106e8:	69f9      	ldr	r1, [r7, #28]
 80106ea:	4401      	add	r1, r0
 80106ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80106f0:	4313      	orrs	r3, r2
 80106f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010700:	691a      	ldr	r2, [r3, #16]
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	6a1b      	ldr	r3, [r3, #32]
 8010706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801070a:	69b9      	ldr	r1, [r7, #24]
 801070c:	0148      	lsls	r0, r1, #5
 801070e:	69f9      	ldr	r1, [r7, #28]
 8010710:	4401      	add	r1, r0
 8010712:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010716:	4313      	orrs	r3, r2
 8010718:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801071a:	79fb      	ldrb	r3, [r7, #7]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d10d      	bne.n	801073c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d009      	beq.n	801073c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	68d9      	ldr	r1, [r3, #12]
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	015a      	lsls	r2, r3, #5
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	4413      	add	r3, r2
 8010734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010738:	460a      	mov	r2, r1
 801073a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	791b      	ldrb	r3, [r3, #4]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d128      	bne.n	8010796 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010750:	2b00      	cmp	r3, #0
 8010752:	d110      	bne.n	8010776 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	0151      	lsls	r1, r2, #5
 8010766:	69fa      	ldr	r2, [r7, #28]
 8010768:	440a      	add	r2, r1
 801076a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801076e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	e00f      	b.n	8010796 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	015a      	lsls	r2, r3, #5
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	4413      	add	r3, r2
 801077e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	69ba      	ldr	r2, [r7, #24]
 8010786:	0151      	lsls	r1, r2, #5
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	440a      	add	r2, r1
 801078c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010794:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	015a      	lsls	r2, r3, #5
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	4413      	add	r3, r2
 801079e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	69ba      	ldr	r2, [r7, #24]
 80107a6:	0151      	lsls	r1, r2, #5
 80107a8:	69fa      	ldr	r2, [r7, #28]
 80107aa:	440a      	add	r2, r1
 80107ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80107b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3720      	adds	r7, #32
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	fff80000 	.word	0xfff80000
 80107c4:	e007ffff 	.word	0xe007ffff
 80107c8:	1ff80000 	.word	0x1ff80000

080107cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80107d6:	2300      	movs	r3, #0
 80107d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80107da:	2300      	movs	r3, #0
 80107dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	785b      	ldrb	r3, [r3, #1]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d14a      	bne.n	8010880 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80107fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010802:	f040 8086 	bne.w	8010912 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	015a      	lsls	r2, r3, #5
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	4413      	add	r3, r2
 8010810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	683a      	ldr	r2, [r7, #0]
 8010818:	7812      	ldrb	r2, [r2, #0]
 801081a:	0151      	lsls	r1, r2, #5
 801081c:	693a      	ldr	r2, [r7, #16]
 801081e:	440a      	add	r2, r1
 8010820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010824:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010828:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	015a      	lsls	r2, r3, #5
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	4413      	add	r3, r2
 8010834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	7812      	ldrb	r2, [r2, #0]
 801083e:	0151      	lsls	r1, r2, #5
 8010840:	693a      	ldr	r2, [r7, #16]
 8010842:	440a      	add	r2, r1
 8010844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010848:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801084c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3301      	adds	r3, #1
 8010852:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f242 7210 	movw	r2, #10000	@ 0x2710
 801085a:	4293      	cmp	r3, r2
 801085c:	d902      	bls.n	8010864 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801085e:	2301      	movs	r3, #1
 8010860:	75fb      	strb	r3, [r7, #23]
          break;
 8010862:	e056      	b.n	8010912 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	015a      	lsls	r2, r3, #5
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	4413      	add	r3, r2
 801086e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801087c:	d0e7      	beq.n	801084e <USB_EPStopXfer+0x82>
 801087e:	e048      	b.n	8010912 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	015a      	lsls	r2, r3, #5
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	4413      	add	r3, r2
 801088a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010898:	d13b      	bne.n	8010912 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	015a      	lsls	r2, r3, #5
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	4413      	add	r3, r2
 80108a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	7812      	ldrb	r2, [r2, #0]
 80108ae:	0151      	lsls	r1, r2, #5
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	440a      	add	r2, r1
 80108b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80108bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	015a      	lsls	r2, r3, #5
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	4413      	add	r3, r2
 80108c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	683a      	ldr	r2, [r7, #0]
 80108d0:	7812      	ldrb	r2, [r2, #0]
 80108d2:	0151      	lsls	r1, r2, #5
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	440a      	add	r2, r1
 80108d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80108e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	3301      	adds	r3, #1
 80108e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d902      	bls.n	80108f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80108f2:	2301      	movs	r3, #1
 80108f4:	75fb      	strb	r3, [r7, #23]
          break;
 80108f6:	e00c      	b.n	8010912 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	015a      	lsls	r2, r3, #5
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	4413      	add	r3, r2
 8010902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801090c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010910:	d0e7      	beq.n	80108e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010912:	7dfb      	ldrb	r3, [r7, #23]
}
 8010914:	4618      	mov	r0, r3
 8010916:	371c      	adds	r7, #28
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010920:	b480      	push	{r7}
 8010922:	b089      	sub	sp, #36	@ 0x24
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	4611      	mov	r1, r2
 801092c:	461a      	mov	r2, r3
 801092e:	460b      	mov	r3, r1
 8010930:	71fb      	strb	r3, [r7, #7]
 8010932:	4613      	mov	r3, r2
 8010934:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801093e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010942:	2b00      	cmp	r3, #0
 8010944:	d123      	bne.n	801098e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010946:	88bb      	ldrh	r3, [r7, #4]
 8010948:	3303      	adds	r3, #3
 801094a:	089b      	lsrs	r3, r3, #2
 801094c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801094e:	2300      	movs	r3, #0
 8010950:	61bb      	str	r3, [r7, #24]
 8010952:	e018      	b.n	8010986 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	031a      	lsls	r2, r3, #12
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	4413      	add	r3, r2
 801095c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010960:	461a      	mov	r2, r3
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	3301      	adds	r3, #1
 801096c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	3301      	adds	r3, #1
 8010972:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	3301      	adds	r3, #1
 8010978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	3301      	adds	r3, #1
 801097e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	3301      	adds	r3, #1
 8010984:	61bb      	str	r3, [r7, #24]
 8010986:	69ba      	ldr	r2, [r7, #24]
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	429a      	cmp	r2, r3
 801098c:	d3e2      	bcc.n	8010954 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3724      	adds	r7, #36	@ 0x24
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801099c:	b480      	push	{r7}
 801099e:	b08b      	sub	sp, #44	@ 0x2c
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	4613      	mov	r3, r2
 80109a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80109b2:	88fb      	ldrh	r3, [r7, #6]
 80109b4:	089b      	lsrs	r3, r3, #2
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80109ba:	88fb      	ldrh	r3, [r7, #6]
 80109bc:	f003 0303 	and.w	r3, r3, #3
 80109c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80109c2:	2300      	movs	r3, #0
 80109c4:	623b      	str	r3, [r7, #32]
 80109c6:	e014      	b.n	80109f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d6:	3301      	adds	r3, #1
 80109d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80109da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109dc:	3301      	adds	r3, #1
 80109de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e2:	3301      	adds	r3, #1
 80109e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80109e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e8:	3301      	adds	r3, #1
 80109ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	3301      	adds	r3, #1
 80109f0:	623b      	str	r3, [r7, #32]
 80109f2:	6a3a      	ldr	r2, [r7, #32]
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d3e6      	bcc.n	80109c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80109fa:	8bfb      	ldrh	r3, [r7, #30]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01e      	beq.n	8010a3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	f107 0310 	add.w	r3, r7, #16
 8010a10:	6812      	ldr	r2, [r2, #0]
 8010a12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010a14:	693a      	ldr	r2, [r7, #16]
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a24:	701a      	strb	r2, [r3, #0]
      i++;
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2e:	3301      	adds	r3, #1
 8010a30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010a32:	8bfb      	ldrh	r3, [r7, #30]
 8010a34:	3b01      	subs	r3, #1
 8010a36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010a38:	8bfb      	ldrh	r3, [r7, #30]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1ea      	bne.n	8010a14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	372c      	adds	r7, #44	@ 0x2c
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	785b      	ldrb	r3, [r3, #1]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d12c      	bne.n	8010ac2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	015a      	lsls	r2, r3, #5
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	4413      	add	r3, r2
 8010a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	db12      	blt.n	8010aa0 <USB_EPSetStall+0x54>
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00f      	beq.n	8010aa0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	015a      	lsls	r2, r3, #5
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	4413      	add	r3, r2
 8010a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	0151      	lsls	r1, r2, #5
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	440a      	add	r2, r1
 8010a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010a9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	015a      	lsls	r2, r3, #5
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	0151      	lsls	r1, r2, #5
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	440a      	add	r2, r1
 8010ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010abe:	6013      	str	r3, [r2, #0]
 8010ac0:	e02b      	b.n	8010b1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	015a      	lsls	r2, r3, #5
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	4413      	add	r3, r2
 8010aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	db12      	blt.n	8010afa <USB_EPSetStall+0xae>
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00f      	beq.n	8010afa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	015a      	lsls	r2, r3, #5
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	0151      	lsls	r1, r2, #5
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	440a      	add	r2, r1
 8010af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010af4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010af8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	015a      	lsls	r2, r3, #5
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	4413      	add	r3, r2
 8010b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	0151      	lsls	r1, r2, #5
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	440a      	add	r2, r1
 8010b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010b18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	785b      	ldrb	r3, [r3, #1]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d128      	bne.n	8010b96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	015a      	lsls	r2, r3, #5
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68ba      	ldr	r2, [r7, #8]
 8010b54:	0151      	lsls	r1, r2, #5
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	440a      	add	r2, r1
 8010b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010b62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	791b      	ldrb	r3, [r3, #4]
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d003      	beq.n	8010b74 <USB_EPClearStall+0x4c>
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	791b      	ldrb	r3, [r3, #4]
 8010b70:	2b02      	cmp	r3, #2
 8010b72:	d138      	bne.n	8010be6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	015a      	lsls	r2, r3, #5
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	68ba      	ldr	r2, [r7, #8]
 8010b84:	0151      	lsls	r1, r2, #5
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	440a      	add	r2, r1
 8010b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b92:	6013      	str	r3, [r2, #0]
 8010b94:	e027      	b.n	8010be6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	015a      	lsls	r2, r3, #5
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010bb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	791b      	ldrb	r3, [r3, #4]
 8010bba:	2b03      	cmp	r3, #3
 8010bbc:	d003      	beq.n	8010bc6 <USB_EPClearStall+0x9e>
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	791b      	ldrb	r3, [r3, #4]
 8010bc2:	2b02      	cmp	r3, #2
 8010bc4:	d10f      	bne.n	8010be6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	015a      	lsls	r2, r3, #5
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	4413      	add	r3, r2
 8010bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	0151      	lsls	r1, r2, #5
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	440a      	add	r2, r1
 8010bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010be4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68fa      	ldr	r2, [r7, #12]
 8010c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010c16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	011b      	lsls	r3, r3, #4
 8010c24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010c28:	68f9      	ldr	r1, [r7, #12]
 8010c2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c32:	2300      	movs	r3, #0
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010c5a:	f023 0303 	bic.w	r3, r3, #3
 8010c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c6e:	f023 0302 	bic.w	r3, r3, #2
 8010c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b085      	sub	sp, #20
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010c9c:	f023 0303 	bic.w	r3, r3, #3
 8010ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010cb0:	f043 0302 	orr.w	r3, r3, #2
 8010cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010cb6:	2300      	movs	r3, #0
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b085      	sub	sp, #20
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	4013      	ands	r3, r2
 8010cda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3714      	adds	r7, #20
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr

08010cea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010cea:	b480      	push	{r7}
 8010cec:	b085      	sub	sp, #20
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cfc:	699b      	ldr	r3, [r3, #24]
 8010cfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d06:	69db      	ldr	r3, [r3, #28]
 8010d08:	68ba      	ldr	r2, [r7, #8]
 8010d0a:	4013      	ands	r3, r2
 8010d0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	0c1b      	lsrs	r3, r3, #16
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3714      	adds	r7, #20
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr

08010d1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010d1e:	b480      	push	{r7}
 8010d20:	b085      	sub	sp, #20
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d3a:	69db      	ldr	r3, [r3, #28]
 8010d3c:	68ba      	ldr	r2, [r7, #8]
 8010d3e:	4013      	ands	r3, r2
 8010d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	b29b      	uxth	r3, r3
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3714      	adds	r7, #20
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr

08010d52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d52:	b480      	push	{r7}
 8010d54:	b085      	sub	sp, #20
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d62:	78fb      	ldrb	r3, [r7, #3]
 8010d64:	015a      	lsls	r2, r3, #5
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	4413      	add	r3, r2
 8010d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d6e:	689b      	ldr	r3, [r3, #8]
 8010d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	68ba      	ldr	r2, [r7, #8]
 8010d7c:	4013      	ands	r3, r2
 8010d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d80:	68bb      	ldr	r3, [r7, #8]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr

08010d8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d8e:	b480      	push	{r7}
 8010d90:	b087      	sub	sp, #28
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	f003 030f 	and.w	r3, r3, #15
 8010db8:	68fa      	ldr	r2, [r7, #12]
 8010dba:	fa22 f303 	lsr.w	r3, r2, r3
 8010dbe:	01db      	lsls	r3, r3, #7
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010dc8:	78fb      	ldrb	r3, [r7, #3]
 8010dca:	015a      	lsls	r2, r3, #5
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	4413      	add	r3, r2
 8010dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	693a      	ldr	r2, [r7, #16]
 8010dd8:	4013      	ands	r3, r2
 8010dda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ddc:	68bb      	ldr	r3, [r7, #8]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	371c      	adds	r7, #28
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010dea:	b480      	push	{r7}
 8010dec:	b083      	sub	sp, #12
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	695b      	ldr	r3, [r3, #20]
 8010df6:	f003 0301 	and.w	r3, r3, #1
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
	...

08010e08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b085      	sub	sp, #20
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e22:	4619      	mov	r1, r3
 8010e24:	4b09      	ldr	r3, [pc, #36]	@ (8010e4c <USB_ActivateSetup+0x44>)
 8010e26:	4013      	ands	r3, r2
 8010e28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	fffff800 	.word	0xfffff800

08010e50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b087      	sub	sp, #28
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	607a      	str	r2, [r7, #4]
 8010e5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	333c      	adds	r3, #60	@ 0x3c
 8010e66:	3304      	adds	r3, #4
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	4a26      	ldr	r2, [pc, #152]	@ (8010f08 <USB_EP0_OutStart+0xb8>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d90a      	bls.n	8010e8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010e84:	d101      	bne.n	8010e8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e86:	2300      	movs	r3, #0
 8010e88:	e037      	b.n	8010efa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e90:	461a      	mov	r2, r3
 8010e92:	2300      	movs	r3, #0
 8010e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e9c:	691b      	ldr	r3, [r3, #16]
 8010e9e:	697a      	ldr	r2, [r7, #20]
 8010ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	697a      	ldr	r2, [r7, #20]
 8010eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010eb8:	f043 0318 	orr.w	r3, r3, #24
 8010ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ecc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010ed0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010ed2:	7afb      	ldrb	r3, [r7, #11]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d10f      	bne.n	8010ef8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ede:	461a      	mov	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	697a      	ldr	r2, [r7, #20]
 8010eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ef2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	371c      	adds	r7, #28
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	4f54300a 	.word	0x4f54300a

08010f0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010f14:	2300      	movs	r3, #0
 8010f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f24:	d901      	bls.n	8010f2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010f26:	2303      	movs	r3, #3
 8010f28:	e01b      	b.n	8010f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	691b      	ldr	r3, [r3, #16]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	daf2      	bge.n	8010f18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f32:	2300      	movs	r3, #0
 8010f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	f043 0201 	orr.w	r2, r3, #1
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	3301      	adds	r3, #1
 8010f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f4e:	d901      	bls.n	8010f54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f50:	2303      	movs	r3, #3
 8010f52:	e006      	b.n	8010f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	691b      	ldr	r3, [r3, #16]
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d0f0      	beq.n	8010f42 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3714      	adds	r7, #20
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr
	...

08010f70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010f7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010f80:	f005 fa9e 	bl	80164c0 <USBD_static_malloc>
 8010f84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d109      	bne.n	8010fa0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	32b0      	adds	r2, #176	@ 0xb0
 8010f96:	2100      	movs	r1, #0
 8010f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	e0d4      	b.n	801114a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010fa0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f006 fefe 	bl	8017da8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	32b0      	adds	r2, #176	@ 0xb0
 8010fb6:	68f9      	ldr	r1, [r7, #12]
 8010fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	32b0      	adds	r2, #176	@ 0xb0
 8010fc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7c1b      	ldrb	r3, [r3, #16]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d138      	bne.n	801104a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8011154 <USBD_CDC_Init+0x1e4>)
 8010fda:	7819      	ldrb	r1, [r3, #0]
 8010fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010fe0:	2202      	movs	r2, #2
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f005 f949 	bl	801627a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8011154 <USBD_CDC_Init+0x1e4>)
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	f003 020f 	and.w	r2, r3, #15
 8010ff0:	6879      	ldr	r1, [r7, #4]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	4413      	add	r3, r2
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	440b      	add	r3, r1
 8010ffc:	3324      	adds	r3, #36	@ 0x24
 8010ffe:	2201      	movs	r2, #1
 8011000:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011002:	4b55      	ldr	r3, [pc, #340]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011004:	7819      	ldrb	r1, [r3, #0]
 8011006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801100a:	2202      	movs	r2, #2
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f005 f934 	bl	801627a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011012:	4b51      	ldr	r3, [pc, #324]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 020f 	and.w	r2, r3, #15
 801101a:	6879      	ldr	r1, [r7, #4]
 801101c:	4613      	mov	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	440b      	add	r3, r1
 8011026:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801102a:	2201      	movs	r2, #1
 801102c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801102e:	4b4b      	ldr	r3, [pc, #300]	@ (801115c <USBD_CDC_Init+0x1ec>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f003 020f 	and.w	r2, r3, #15
 8011036:	6879      	ldr	r1, [r7, #4]
 8011038:	4613      	mov	r3, r2
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4413      	add	r3, r2
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	440b      	add	r3, r1
 8011042:	3326      	adds	r3, #38	@ 0x26
 8011044:	2210      	movs	r2, #16
 8011046:	801a      	strh	r2, [r3, #0]
 8011048:	e035      	b.n	80110b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801104a:	4b42      	ldr	r3, [pc, #264]	@ (8011154 <USBD_CDC_Init+0x1e4>)
 801104c:	7819      	ldrb	r1, [r3, #0]
 801104e:	2340      	movs	r3, #64	@ 0x40
 8011050:	2202      	movs	r2, #2
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f005 f911 	bl	801627a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011058:	4b3e      	ldr	r3, [pc, #248]	@ (8011154 <USBD_CDC_Init+0x1e4>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	f003 020f 	and.w	r2, r3, #15
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	4613      	mov	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	4413      	add	r3, r2
 8011068:	009b      	lsls	r3, r3, #2
 801106a:	440b      	add	r3, r1
 801106c:	3324      	adds	r3, #36	@ 0x24
 801106e:	2201      	movs	r2, #1
 8011070:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011072:	4b39      	ldr	r3, [pc, #228]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011074:	7819      	ldrb	r1, [r3, #0]
 8011076:	2340      	movs	r3, #64	@ 0x40
 8011078:	2202      	movs	r2, #2
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f005 f8fd 	bl	801627a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011080:	4b35      	ldr	r3, [pc, #212]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f003 020f 	and.w	r2, r3, #15
 8011088:	6879      	ldr	r1, [r7, #4]
 801108a:	4613      	mov	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	4413      	add	r3, r2
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	440b      	add	r3, r1
 8011094:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011098:	2201      	movs	r2, #1
 801109a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801109c:	4b2f      	ldr	r3, [pc, #188]	@ (801115c <USBD_CDC_Init+0x1ec>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	f003 020f 	and.w	r2, r3, #15
 80110a4:	6879      	ldr	r1, [r7, #4]
 80110a6:	4613      	mov	r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	4413      	add	r3, r2
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	440b      	add	r3, r1
 80110b0:	3326      	adds	r3, #38	@ 0x26
 80110b2:	2210      	movs	r2, #16
 80110b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80110b6:	4b29      	ldr	r3, [pc, #164]	@ (801115c <USBD_CDC_Init+0x1ec>)
 80110b8:	7819      	ldrb	r1, [r3, #0]
 80110ba:	2308      	movs	r3, #8
 80110bc:	2203      	movs	r2, #3
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f005 f8db 	bl	801627a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80110c4:	4b25      	ldr	r3, [pc, #148]	@ (801115c <USBD_CDC_Init+0x1ec>)
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	f003 020f 	and.w	r2, r3, #15
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	4613      	mov	r3, r2
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	4413      	add	r3, r2
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	440b      	add	r3, r1
 80110d8:	3324      	adds	r3, #36	@ 0x24
 80110da:	2201      	movs	r2, #1
 80110dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	33b0      	adds	r3, #176	@ 0xb0
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4413      	add	r3, r2
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2200      	movs	r2, #0
 80110fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2200      	movs	r2, #0
 8011106:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011114:	2302      	movs	r3, #2
 8011116:	e018      	b.n	801114a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7c1b      	ldrb	r3, [r3, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011120:	4b0d      	ldr	r3, [pc, #52]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011122:	7819      	ldrb	r1, [r3, #0]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801112a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f005 f992 	bl	8016458 <USBD_LL_PrepareReceive>
 8011134:	e008      	b.n	8011148 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011136:	4b08      	ldr	r3, [pc, #32]	@ (8011158 <USBD_CDC_Init+0x1e8>)
 8011138:	7819      	ldrb	r1, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011140:	2340      	movs	r3, #64	@ 0x40
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f005 f988 	bl	8016458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	24000097 	.word	0x24000097
 8011158:	24000098 	.word	0x24000098
 801115c:	24000099 	.word	0x24000099

08011160 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	460b      	mov	r3, r1
 801116a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801116c:	4b3a      	ldr	r3, [pc, #232]	@ (8011258 <USBD_CDC_DeInit+0xf8>)
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	4619      	mov	r1, r3
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f005 f8a7 	bl	80162c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011178:	4b37      	ldr	r3, [pc, #220]	@ (8011258 <USBD_CDC_DeInit+0xf8>)
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	f003 020f 	and.w	r2, r3, #15
 8011180:	6879      	ldr	r1, [r7, #4]
 8011182:	4613      	mov	r3, r2
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	4413      	add	r3, r2
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	440b      	add	r3, r1
 801118c:	3324      	adds	r3, #36	@ 0x24
 801118e:	2200      	movs	r2, #0
 8011190:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011192:	4b32      	ldr	r3, [pc, #200]	@ (801125c <USBD_CDC_DeInit+0xfc>)
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	4619      	mov	r1, r3
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f005 f894 	bl	80162c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801119e:	4b2f      	ldr	r3, [pc, #188]	@ (801125c <USBD_CDC_DeInit+0xfc>)
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	f003 020f 	and.w	r2, r3, #15
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	4613      	mov	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4413      	add	r3, r2
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	440b      	add	r3, r1
 80111b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80111b6:	2200      	movs	r2, #0
 80111b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80111ba:	4b29      	ldr	r3, [pc, #164]	@ (8011260 <USBD_CDC_DeInit+0x100>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	4619      	mov	r1, r3
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f005 f880 	bl	80162c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80111c6:	4b26      	ldr	r3, [pc, #152]	@ (8011260 <USBD_CDC_DeInit+0x100>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	f003 020f 	and.w	r2, r3, #15
 80111ce:	6879      	ldr	r1, [r7, #4]
 80111d0:	4613      	mov	r3, r2
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	4413      	add	r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	440b      	add	r3, r1
 80111da:	3324      	adds	r3, #36	@ 0x24
 80111dc:	2200      	movs	r2, #0
 80111de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80111e0:	4b1f      	ldr	r3, [pc, #124]	@ (8011260 <USBD_CDC_DeInit+0x100>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f003 020f 	and.w	r2, r3, #15
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	4613      	mov	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	440b      	add	r3, r1
 80111f4:	3326      	adds	r3, #38	@ 0x26
 80111f6:	2200      	movs	r2, #0
 80111f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	32b0      	adds	r2, #176	@ 0xb0
 8011204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d01f      	beq.n	801124c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	33b0      	adds	r3, #176	@ 0xb0
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	4413      	add	r3, r2
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	32b0      	adds	r2, #176	@ 0xb0
 801122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122e:	4618      	mov	r0, r3
 8011230:	f005 f954 	bl	80164dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	32b0      	adds	r2, #176	@ 0xb0
 801123e:	2100      	movs	r1, #0
 8011240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	3708      	adds	r7, #8
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	24000097 	.word	0x24000097
 801125c:	24000098 	.word	0x24000098
 8011260:	24000099 	.word	0x24000099

08011264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b086      	sub	sp, #24
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	32b0      	adds	r2, #176	@ 0xb0
 8011278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801127c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801127e:	2300      	movs	r3, #0
 8011280:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011282:	2300      	movs	r3, #0
 8011284:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d101      	bne.n	8011294 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011290:	2303      	movs	r3, #3
 8011292:	e0bf      	b.n	8011414 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801129c:	2b00      	cmp	r3, #0
 801129e:	d050      	beq.n	8011342 <USBD_CDC_Setup+0xde>
 80112a0:	2b20      	cmp	r3, #32
 80112a2:	f040 80af 	bne.w	8011404 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	88db      	ldrh	r3, [r3, #6]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d03a      	beq.n	8011324 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	b25b      	sxtb	r3, r3
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	da1b      	bge.n	80112f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	33b0      	adds	r3, #176	@ 0xb0
 80112c2:	009b      	lsls	r3, r3, #2
 80112c4:	4413      	add	r3, r2
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80112ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	88d2      	ldrh	r2, [r2, #6]
 80112d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	88db      	ldrh	r3, [r3, #6]
 80112da:	2b07      	cmp	r3, #7
 80112dc:	bf28      	it	cs
 80112de:	2307      	movcs	r3, #7
 80112e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	89fa      	ldrh	r2, [r7, #14]
 80112e6:	4619      	mov	r1, r3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f001 fdbd 	bl	8012e68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80112ee:	e090      	b.n	8011412 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	785a      	ldrb	r2, [r3, #1]
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	88db      	ldrh	r3, [r3, #6]
 80112fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8011300:	d803      	bhi.n	801130a <USBD_CDC_Setup+0xa6>
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	88db      	ldrh	r3, [r3, #6]
 8011306:	b2da      	uxtb	r2, r3
 8011308:	e000      	b.n	801130c <USBD_CDC_Setup+0xa8>
 801130a:	2240      	movs	r2, #64	@ 0x40
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011312:	6939      	ldr	r1, [r7, #16]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801131a:	461a      	mov	r2, r3
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f001 fdcf 	bl	8012ec0 <USBD_CtlPrepareRx>
      break;
 8011322:	e076      	b.n	8011412 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	33b0      	adds	r3, #176	@ 0xb0
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	4413      	add	r3, r2
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	7850      	ldrb	r0, [r2, #1]
 801133a:	2200      	movs	r2, #0
 801133c:	6839      	ldr	r1, [r7, #0]
 801133e:	4798      	blx	r3
      break;
 8011340:	e067      	b.n	8011412 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	785b      	ldrb	r3, [r3, #1]
 8011346:	2b0b      	cmp	r3, #11
 8011348:	d851      	bhi.n	80113ee <USBD_CDC_Setup+0x18a>
 801134a:	a201      	add	r2, pc, #4	@ (adr r2, 8011350 <USBD_CDC_Setup+0xec>)
 801134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011350:	08011381 	.word	0x08011381
 8011354:	080113fd 	.word	0x080113fd
 8011358:	080113ef 	.word	0x080113ef
 801135c:	080113ef 	.word	0x080113ef
 8011360:	080113ef 	.word	0x080113ef
 8011364:	080113ef 	.word	0x080113ef
 8011368:	080113ef 	.word	0x080113ef
 801136c:	080113ef 	.word	0x080113ef
 8011370:	080113ef 	.word	0x080113ef
 8011374:	080113ef 	.word	0x080113ef
 8011378:	080113ab 	.word	0x080113ab
 801137c:	080113d5 	.word	0x080113d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011386:	b2db      	uxtb	r3, r3
 8011388:	2b03      	cmp	r3, #3
 801138a:	d107      	bne.n	801139c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801138c:	f107 030a 	add.w	r3, r7, #10
 8011390:	2202      	movs	r2, #2
 8011392:	4619      	mov	r1, r3
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f001 fd67 	bl	8012e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801139a:	e032      	b.n	8011402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f001 fce5 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80113a4:	2303      	movs	r3, #3
 80113a6:	75fb      	strb	r3, [r7, #23]
          break;
 80113a8:	e02b      	b.n	8011402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	d107      	bne.n	80113c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80113b6:	f107 030d 	add.w	r3, r7, #13
 80113ba:	2201      	movs	r2, #1
 80113bc:	4619      	mov	r1, r3
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f001 fd52 	bl	8012e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113c4:	e01d      	b.n	8011402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80113c6:	6839      	ldr	r1, [r7, #0]
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f001 fcd0 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80113ce:	2303      	movs	r3, #3
 80113d0:	75fb      	strb	r3, [r7, #23]
          break;
 80113d2:	e016      	b.n	8011402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b03      	cmp	r3, #3
 80113de:	d00f      	beq.n	8011400 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f001 fcc3 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80113ec:	e008      	b.n	8011400 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f001 fcbc 	bl	8012d6e <USBD_CtlError>
          ret = USBD_FAIL;
 80113f6:	2303      	movs	r3, #3
 80113f8:	75fb      	strb	r3, [r7, #23]
          break;
 80113fa:	e002      	b.n	8011402 <USBD_CDC_Setup+0x19e>
          break;
 80113fc:	bf00      	nop
 80113fe:	e008      	b.n	8011412 <USBD_CDC_Setup+0x1ae>
          break;
 8011400:	bf00      	nop
      }
      break;
 8011402:	e006      	b.n	8011412 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f001 fcb1 	bl	8012d6e <USBD_CtlError>
      ret = USBD_FAIL;
 801140c:	2303      	movs	r3, #3
 801140e:	75fb      	strb	r3, [r7, #23]
      break;
 8011410:	bf00      	nop
  }

  return (uint8_t)ret;
 8011412:	7dfb      	ldrb	r3, [r7, #23]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3718      	adds	r7, #24
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	460b      	mov	r3, r1
 8011426:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801142e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	32b0      	adds	r2, #176	@ 0xb0
 801143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011442:	2303      	movs	r3, #3
 8011444:	e065      	b.n	8011512 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	32b0      	adds	r2, #176	@ 0xb0
 8011450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011456:	78fb      	ldrb	r3, [r7, #3]
 8011458:	f003 020f 	and.w	r2, r3, #15
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	4613      	mov	r3, r2
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	4413      	add	r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	440b      	add	r3, r1
 8011468:	3318      	adds	r3, #24
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d02f      	beq.n	80114d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011470:	78fb      	ldrb	r3, [r7, #3]
 8011472:	f003 020f 	and.w	r2, r3, #15
 8011476:	6879      	ldr	r1, [r7, #4]
 8011478:	4613      	mov	r3, r2
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	4413      	add	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	440b      	add	r3, r1
 8011482:	3318      	adds	r3, #24
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	78fb      	ldrb	r3, [r7, #3]
 8011488:	f003 010f 	and.w	r1, r3, #15
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	460b      	mov	r3, r1
 8011490:	00db      	lsls	r3, r3, #3
 8011492:	440b      	add	r3, r1
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	4403      	add	r3, r0
 8011498:	331c      	adds	r3, #28
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	fbb2 f1f3 	udiv	r1, r2, r3
 80114a0:	fb01 f303 	mul.w	r3, r1, r3
 80114a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d112      	bne.n	80114d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80114aa:	78fb      	ldrb	r3, [r7, #3]
 80114ac:	f003 020f 	and.w	r2, r3, #15
 80114b0:	6879      	ldr	r1, [r7, #4]
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	440b      	add	r3, r1
 80114bc:	3318      	adds	r3, #24
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80114c2:	78f9      	ldrb	r1, [r7, #3]
 80114c4:	2300      	movs	r3, #0
 80114c6:	2200      	movs	r2, #0
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f004 ffa4 	bl	8016416 <USBD_LL_Transmit>
 80114ce:	e01f      	b.n	8011510 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2200      	movs	r2, #0
 80114d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	33b0      	adds	r3, #176	@ 0xb0
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d010      	beq.n	8011510 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	33b0      	adds	r3, #176	@ 0xb0
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801150c:	78fa      	ldrb	r2, [r7, #3]
 801150e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	460b      	mov	r3, r1
 8011524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	32b0      	adds	r2, #176	@ 0xb0
 8011530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011534:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	32b0      	adds	r2, #176	@ 0xb0
 8011540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011548:	2303      	movs	r3, #3
 801154a:	e01a      	b.n	8011582 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801154c:	78fb      	ldrb	r3, [r7, #3]
 801154e:	4619      	mov	r1, r3
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f004 ffa2 	bl	801649a <USBD_LL_GetRxDataSize>
 8011556:	4602      	mov	r2, r0
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	33b0      	adds	r3, #176	@ 0xb0
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	68fa      	ldr	r2, [r7, #12]
 8011572:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801157c:	4611      	mov	r1, r2
 801157e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	3710      	adds	r7, #16
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	32b0      	adds	r2, #176	@ 0xb0
 801159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d101      	bne.n	80115ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115a8:	2303      	movs	r3, #3
 80115aa:	e024      	b.n	80115f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	33b0      	adds	r3, #176	@ 0xb0
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4413      	add	r3, r2
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d019      	beq.n	80115f4 <USBD_CDC_EP0_RxReady+0x6a>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80115c6:	2bff      	cmp	r3, #255	@ 0xff
 80115c8:	d014      	beq.n	80115f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	33b0      	adds	r3, #176	@ 0xb0
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	4413      	add	r3, r2
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80115e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80115ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	22ff      	movs	r2, #255	@ 0xff
 80115f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
	...

08011600 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011608:	2182      	movs	r1, #130	@ 0x82
 801160a:	4818      	ldr	r0, [pc, #96]	@ (801166c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801160c:	f000 fd4f 	bl	80120ae <USBD_GetEpDesc>
 8011610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011612:	2101      	movs	r1, #1
 8011614:	4815      	ldr	r0, [pc, #84]	@ (801166c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011616:	f000 fd4a 	bl	80120ae <USBD_GetEpDesc>
 801161a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801161c:	2181      	movs	r1, #129	@ 0x81
 801161e:	4813      	ldr	r0, [pc, #76]	@ (801166c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011620:	f000 fd45 	bl	80120ae <USBD_GetEpDesc>
 8011624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d002      	beq.n	8011632 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	2210      	movs	r2, #16
 8011630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d006      	beq.n	8011646 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2200      	movs	r2, #0
 801163c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011640:	711a      	strb	r2, [r3, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d006      	beq.n	801165a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011654:	711a      	strb	r2, [r3, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2243      	movs	r2, #67	@ 0x43
 801165e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011660:	4b02      	ldr	r3, [pc, #8]	@ (801166c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011662:	4618      	mov	r0, r3
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	24000054 	.word	0x24000054

08011670 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011678:	2182      	movs	r1, #130	@ 0x82
 801167a:	4818      	ldr	r0, [pc, #96]	@ (80116dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801167c:	f000 fd17 	bl	80120ae <USBD_GetEpDesc>
 8011680:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011682:	2101      	movs	r1, #1
 8011684:	4815      	ldr	r0, [pc, #84]	@ (80116dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011686:	f000 fd12 	bl	80120ae <USBD_GetEpDesc>
 801168a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801168c:	2181      	movs	r1, #129	@ 0x81
 801168e:	4813      	ldr	r0, [pc, #76]	@ (80116dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011690:	f000 fd0d 	bl	80120ae <USBD_GetEpDesc>
 8011694:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2210      	movs	r2, #16
 80116a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d006      	beq.n	80116b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	2200      	movs	r2, #0
 80116ac:	711a      	strb	r2, [r3, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f042 0202 	orr.w	r2, r2, #2
 80116b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d006      	beq.n	80116ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	711a      	strb	r2, [r3, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	f042 0202 	orr.w	r2, r2, #2
 80116c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2243      	movs	r2, #67	@ 0x43
 80116ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80116d0:	4b02      	ldr	r3, [pc, #8]	@ (80116dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3718      	adds	r7, #24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	24000054 	.word	0x24000054

080116e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b086      	sub	sp, #24
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80116e8:	2182      	movs	r1, #130	@ 0x82
 80116ea:	4818      	ldr	r0, [pc, #96]	@ (801174c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80116ec:	f000 fcdf 	bl	80120ae <USBD_GetEpDesc>
 80116f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80116f2:	2101      	movs	r1, #1
 80116f4:	4815      	ldr	r0, [pc, #84]	@ (801174c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80116f6:	f000 fcda 	bl	80120ae <USBD_GetEpDesc>
 80116fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80116fc:	2181      	movs	r1, #129	@ 0x81
 80116fe:	4813      	ldr	r0, [pc, #76]	@ (801174c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011700:	f000 fcd5 	bl	80120ae <USBD_GetEpDesc>
 8011704:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d002      	beq.n	8011712 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	2210      	movs	r2, #16
 8011710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d006      	beq.n	8011726 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	2200      	movs	r2, #0
 801171c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011720:	711a      	strb	r2, [r3, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d006      	beq.n	801173a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2200      	movs	r2, #0
 8011730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011734:	711a      	strb	r2, [r3, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2243      	movs	r2, #67	@ 0x43
 801173e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011740:	4b02      	ldr	r3, [pc, #8]	@ (801174c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011742:	4618      	mov	r0, r3
 8011744:	3718      	adds	r7, #24
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	24000054 	.word	0x24000054

08011750 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	220a      	movs	r2, #10
 801175c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801175e:	4b03      	ldr	r3, [pc, #12]	@ (801176c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	24000010 	.word	0x24000010

08011770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d101      	bne.n	8011784 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011780:	2303      	movs	r3, #3
 8011782:	e009      	b.n	8011798 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	33b0      	adds	r3, #176	@ 0xb0
 801178e:	009b      	lsls	r3, r3, #2
 8011790:	4413      	add	r3, r2
 8011792:	683a      	ldr	r2, [r7, #0]
 8011794:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011796:	2300      	movs	r3, #0
}
 8011798:	4618      	mov	r0, r3
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b087      	sub	sp, #28
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	32b0      	adds	r2, #176	@ 0xb0
 80117ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d101      	bne.n	80117ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80117c6:	2303      	movs	r3, #3
 80117c8:	e008      	b.n	80117dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	68ba      	ldr	r2, [r7, #8]
 80117ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80117da:	2300      	movs	r3, #0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	371c      	adds	r7, #28
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	32b0      	adds	r2, #176	@ 0xb0
 80117fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011800:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011808:	2303      	movs	r3, #3
 801180a:	e004      	b.n	8011816 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	683a      	ldr	r2, [r7, #0]
 8011810:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
	...

08011824 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	32b0      	adds	r2, #176	@ 0xb0
 8011836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801183a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801183c:	2301      	movs	r3, #1
 801183e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d101      	bne.n	801184a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011846:	2303      	movs	r3, #3
 8011848:	e025      	b.n	8011896 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011850:	2b00      	cmp	r3, #0
 8011852:	d11f      	bne.n	8011894 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2201      	movs	r2, #1
 8011858:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801185c:	4b10      	ldr	r3, [pc, #64]	@ (80118a0 <USBD_CDC_TransmitPacket+0x7c>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	f003 020f 	and.w	r2, r3, #15
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	4613      	mov	r3, r2
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	4413      	add	r3, r2
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4403      	add	r3, r0
 8011876:	3318      	adds	r3, #24
 8011878:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801187a:	4b09      	ldr	r3, [pc, #36]	@ (80118a0 <USBD_CDC_TransmitPacket+0x7c>)
 801187c:	7819      	ldrb	r1, [r3, #0]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f004 fdc3 	bl	8016416 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011890:	2300      	movs	r3, #0
 8011892:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011894:	7bfb      	ldrb	r3, [r7, #15]
}
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	24000097 	.word	0x24000097

080118a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	32b0      	adds	r2, #176	@ 0xb0
 80118b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	32b0      	adds	r2, #176	@ 0xb0
 80118c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80118ce:	2303      	movs	r3, #3
 80118d0:	e018      	b.n	8011904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	7c1b      	ldrb	r3, [r3, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d10a      	bne.n	80118f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80118da:	4b0c      	ldr	r3, [pc, #48]	@ (801190c <USBD_CDC_ReceivePacket+0x68>)
 80118dc:	7819      	ldrb	r1, [r3, #0]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80118e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f004 fdb5 	bl	8016458 <USBD_LL_PrepareReceive>
 80118ee:	e008      	b.n	8011902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80118f0:	4b06      	ldr	r3, [pc, #24]	@ (801190c <USBD_CDC_ReceivePacket+0x68>)
 80118f2:	7819      	ldrb	r1, [r3, #0]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80118fa:	2340      	movs	r3, #64	@ 0x40
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f004 fdab 	bl	8016458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011902:	2300      	movs	r3, #0
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	24000098 	.word	0x24000098

08011910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	4613      	mov	r3, r2
 801191c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d101      	bne.n	8011928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011924:	2303      	movs	r3, #3
 8011926:	e01f      	b.n	8011968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2200      	movs	r2, #0
 801192c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2200      	movs	r2, #0
 8011934:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2200      	movs	r2, #0
 801193c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d003      	beq.n	801194e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	2201      	movs	r2, #1
 8011952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	79fa      	ldrb	r2, [r7, #7]
 801195a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f004 fc21 	bl	80161a4 <USBD_LL_Init>
 8011962:	4603      	mov	r3, r0
 8011964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011966:	7dfb      	ldrb	r3, [r7, #23]
}
 8011968:	4618      	mov	r0, r3
 801196a:	3718      	adds	r7, #24
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801197a:	2300      	movs	r3, #0
 801197c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d101      	bne.n	8011988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011984:	2303      	movs	r3, #3
 8011986:	e025      	b.n	80119d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	683a      	ldr	r2, [r7, #0]
 801198c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	32ae      	adds	r2, #174	@ 0xae
 801199a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00f      	beq.n	80119c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	32ae      	adds	r2, #174	@ 0xae
 80119ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b4:	f107 020e 	add.w	r2, r7, #14
 80119b8:	4610      	mov	r0, r2
 80119ba:	4798      	blx	r3
 80119bc:	4602      	mov	r2, r0
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80119ca:	1c5a      	adds	r2, r3, #1
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f004 fc2d 	bl	8016244 <USBD_LL_Start>
 80119ea:	4603      	mov	r3, r0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80119fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a0a:	b580      	push	{r7, lr}
 8011a0c:	b084      	sub	sp, #16
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	460b      	mov	r3, r1
 8011a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a16:	2300      	movs	r3, #0
 8011a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d009      	beq.n	8011a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	78fa      	ldrb	r2, [r7, #3]
 8011a2e:	4611      	mov	r1, r2
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	4798      	blx	r3
 8011a34:	4603      	mov	r3, r0
 8011a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	78fa      	ldrb	r2, [r7, #3]
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	4798      	blx	r3
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011a68:	2303      	movs	r3, #3
 8011a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b084      	sub	sp, #16
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f001 f936 	bl	8012cfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2201      	movs	r2, #1
 8011a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011aaa:	f003 031f 	and.w	r3, r3, #31
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d01a      	beq.n	8011ae8 <USBD_LL_SetupStage+0x72>
 8011ab2:	2b02      	cmp	r3, #2
 8011ab4:	d822      	bhi.n	8011afc <USBD_LL_SetupStage+0x86>
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d002      	beq.n	8011ac0 <USBD_LL_SetupStage+0x4a>
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d00a      	beq.n	8011ad4 <USBD_LL_SetupStage+0x5e>
 8011abe:	e01d      	b.n	8011afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fb63 	bl	8012194 <USBD_StdDevReq>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8011ad2:	e020      	b.n	8011b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 fbcb 	bl	8012278 <USBD_StdItfReq>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8011ae6:	e016      	b.n	8011b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011aee:	4619      	mov	r1, r3
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fc2d 	bl	8012350 <USBD_StdEPReq>
 8011af6:	4603      	mov	r3, r0
 8011af8:	73fb      	strb	r3, [r7, #15]
      break;
 8011afa:	e00c      	b.n	8011b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011b02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	4619      	mov	r1, r3
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f004 fbfa 	bl	8016304 <USBD_LL_StallEP>
 8011b10:	4603      	mov	r3, r0
 8011b12:	73fb      	strb	r3, [r7, #15]
      break;
 8011b14:	bf00      	nop
  }

  return ret;
 8011b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3710      	adds	r7, #16
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b086      	sub	sp, #24
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011b32:	7afb      	ldrb	r3, [r7, #11]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d16e      	bne.n	8011c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011b46:	2b03      	cmp	r3, #3
 8011b48:	f040 8098 	bne.w	8011c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	689a      	ldr	r2, [r3, #8]
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d913      	bls.n	8011b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	689a      	ldr	r2, [r3, #8]
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	1ad2      	subs	r2, r2, r3
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	68da      	ldr	r2, [r3, #12]
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	689b      	ldr	r3, [r3, #8]
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	bf28      	it	cs
 8011b72:	4613      	movcs	r3, r2
 8011b74:	461a      	mov	r2, r3
 8011b76:	6879      	ldr	r1, [r7, #4]
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f001 f9be 	bl	8012efa <USBD_CtlContinueRx>
 8011b7e:	e07d      	b.n	8011c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011b86:	f003 031f 	and.w	r3, r3, #31
 8011b8a:	2b02      	cmp	r3, #2
 8011b8c:	d014      	beq.n	8011bb8 <USBD_LL_DataOutStage+0x98>
 8011b8e:	2b02      	cmp	r3, #2
 8011b90:	d81d      	bhi.n	8011bce <USBD_LL_DataOutStage+0xae>
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d002      	beq.n	8011b9c <USBD_LL_DataOutStage+0x7c>
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d003      	beq.n	8011ba2 <USBD_LL_DataOutStage+0x82>
 8011b9a:	e018      	b.n	8011bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8011ba0:	e018      	b.n	8011bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	4619      	mov	r1, r3
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f000 fa64 	bl	801207a <USBD_CoreFindIF>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8011bb6:	e00d      	b.n	8011bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f000 fa66 	bl	8012094 <USBD_CoreFindEP>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	75bb      	strb	r3, [r7, #22]
            break;
 8011bcc:	e002      	b.n	8011bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8011bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011bd4:	7dbb      	ldrb	r3, [r7, #22]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d119      	bne.n	8011c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d113      	bne.n	8011c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011be6:	7dba      	ldrb	r2, [r7, #22]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	32ae      	adds	r2, #174	@ 0xae
 8011bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d00b      	beq.n	8011c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011bf6:	7dba      	ldrb	r2, [r7, #22]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011bfe:	7dba      	ldrb	r2, [r7, #22]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	32ae      	adds	r2, #174	@ 0xae
 8011c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f001 f984 	bl	8012f1c <USBD_CtlSendStatus>
 8011c14:	e032      	b.n	8011c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011c16:	7afb      	ldrb	r3, [r7, #11]
 8011c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	4619      	mov	r1, r3
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 fa37 	bl	8012094 <USBD_CoreFindEP>
 8011c26:	4603      	mov	r3, r0
 8011c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011c2a:	7dbb      	ldrb	r3, [r7, #22]
 8011c2c:	2bff      	cmp	r3, #255	@ 0xff
 8011c2e:	d025      	beq.n	8011c7c <USBD_LL_DataOutStage+0x15c>
 8011c30:	7dbb      	ldrb	r3, [r7, #22]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d122      	bne.n	8011c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b03      	cmp	r3, #3
 8011c40:	d117      	bne.n	8011c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011c42:	7dba      	ldrb	r2, [r7, #22]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	32ae      	adds	r2, #174	@ 0xae
 8011c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c4c:	699b      	ldr	r3, [r3, #24]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00f      	beq.n	8011c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011c52:	7dba      	ldrb	r2, [r7, #22]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011c5a:	7dba      	ldrb	r2, [r7, #22]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	32ae      	adds	r2, #174	@ 0xae
 8011c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c64:	699b      	ldr	r3, [r3, #24]
 8011c66:	7afa      	ldrb	r2, [r7, #11]
 8011c68:	4611      	mov	r1, r2
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	4798      	blx	r3
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d001      	beq.n	8011c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011c78:	7dfb      	ldrb	r3, [r7, #23]
 8011c7a:	e000      	b.n	8011c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b086      	sub	sp, #24
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	60f8      	str	r0, [r7, #12]
 8011c8e:	460b      	mov	r3, r1
 8011c90:	607a      	str	r2, [r7, #4]
 8011c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011c94:	7afb      	ldrb	r3, [r7, #11]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d16f      	bne.n	8011d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3314      	adds	r3, #20
 8011c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d15a      	bne.n	8011d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	689a      	ldr	r2, [r3, #8]
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d914      	bls.n	8011ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	689a      	ldr	r2, [r3, #8]
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	1ad2      	subs	r2, r2, r3
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	461a      	mov	r2, r3
 8011cca:	6879      	ldr	r1, [r7, #4]
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f001 f8e6 	bl	8012e9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f004 fbbd 	bl	8016458 <USBD_LL_PrepareReceive>
 8011cde:	e03f      	b.n	8011d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	68da      	ldr	r2, [r3, #12]
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d11c      	bne.n	8011d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	685a      	ldr	r2, [r3, #4]
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d316      	bcc.n	8011d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	685a      	ldr	r2, [r3, #4]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d20f      	bcs.n	8011d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011d06:	2200      	movs	r2, #0
 8011d08:	2100      	movs	r1, #0
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f001 f8c7 	bl	8012e9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2200      	movs	r2, #0
 8011d14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d18:	2300      	movs	r3, #0
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2100      	movs	r1, #0
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	f004 fb9a 	bl	8016458 <USBD_LL_PrepareReceive>
 8011d24:	e01c      	b.n	8011d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b03      	cmp	r3, #3
 8011d30:	d10f      	bne.n	8011d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d009      	beq.n	8011d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	68f8      	ldr	r0, [r7, #12]
 8011d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d52:	2180      	movs	r1, #128	@ 0x80
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f004 fad5 	bl	8016304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f001 f8f1 	bl	8012f42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d03a      	beq.n	8011de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f7ff fe42 	bl	80119f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011d78:	e032      	b.n	8011de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011d7a:	7afb      	ldrb	r3, [r7, #11]
 8011d7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	4619      	mov	r1, r3
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f000 f985 	bl	8012094 <USBD_CoreFindEP>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	2bff      	cmp	r3, #255	@ 0xff
 8011d92:	d025      	beq.n	8011de0 <USBD_LL_DataInStage+0x15a>
 8011d94:	7dfb      	ldrb	r3, [r7, #23]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d122      	bne.n	8011de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b03      	cmp	r3, #3
 8011da4:	d11c      	bne.n	8011de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011da6:	7dfa      	ldrb	r2, [r7, #23]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	32ae      	adds	r2, #174	@ 0xae
 8011dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011db0:	695b      	ldr	r3, [r3, #20]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d014      	beq.n	8011de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011db6:	7dfa      	ldrb	r2, [r7, #23]
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011dbe:	7dfa      	ldrb	r2, [r7, #23]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	32ae      	adds	r2, #174	@ 0xae
 8011dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dc8:	695b      	ldr	r3, [r3, #20]
 8011dca:	7afa      	ldrb	r2, [r7, #11]
 8011dcc:	4611      	mov	r1, r2
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	4798      	blx	r3
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011dd6:	7dbb      	ldrb	r3, [r7, #22]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011ddc:	7dbb      	ldrb	r3, [r7, #22]
 8011dde:	e000      	b.n	8011de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3718      	adds	r7, #24
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b084      	sub	sp, #16
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011df2:	2300      	movs	r3, #0
 8011df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d014      	beq.n	8011e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00e      	beq.n	8011e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	6852      	ldr	r2, [r2, #4]
 8011e3e:	b2d2      	uxtb	r2, r2
 8011e40:	4611      	mov	r1, r2
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	4798      	blx	r3
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d001      	beq.n	8011e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011e4c:	2303      	movs	r3, #3
 8011e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e50:	2340      	movs	r3, #64	@ 0x40
 8011e52:	2200      	movs	r2, #0
 8011e54:	2100      	movs	r1, #0
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f004 fa0f 	bl	801627a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2201      	movs	r2, #1
 8011e60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2240      	movs	r2, #64	@ 0x40
 8011e68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e6c:	2340      	movs	r3, #64	@ 0x40
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2180      	movs	r1, #128	@ 0x80
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f004 fa01 	bl	801627a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2240      	movs	r2, #64	@ 0x40
 8011e82:	621a      	str	r2, [r3, #32]

  return ret;
 8011e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	b083      	sub	sp, #12
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	460b      	mov	r3, r1
 8011e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	78fa      	ldrb	r2, [r7, #3]
 8011e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	370c      	adds	r7, #12
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr

08011eae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011eae:	b480      	push	{r7}
 8011eb0:	b083      	sub	sp, #12
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b04      	cmp	r3, #4
 8011ec0:	d006      	beq.n	8011ed0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2204      	movs	r2, #4
 8011ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011ed8:	2300      	movs	r3, #0
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ee6:	b480      	push	{r7}
 8011ee8:	b083      	sub	sp, #12
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b04      	cmp	r3, #4
 8011ef8:	d106      	bne.n	8011f08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011f08:	2300      	movs	r3, #0
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	370c      	adds	r7, #12
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr

08011f16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b082      	sub	sp, #8
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	2b03      	cmp	r3, #3
 8011f28:	d110      	bne.n	8011f4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00b      	beq.n	8011f4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d005      	beq.n	8011f4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f46:	69db      	ldr	r3, [r3, #28]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011f4c:	2300      	movs	r3, #0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3708      	adds	r7, #8
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}

08011f56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f56:	b580      	push	{r7, lr}
 8011f58:	b082      	sub	sp, #8
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
 8011f5e:	460b      	mov	r3, r1
 8011f60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	32ae      	adds	r2, #174	@ 0xae
 8011f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011f74:	2303      	movs	r3, #3
 8011f76:	e01c      	b.n	8011fb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b03      	cmp	r3, #3
 8011f82:	d115      	bne.n	8011fb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	32ae      	adds	r2, #174	@ 0xae
 8011f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f92:	6a1b      	ldr	r3, [r3, #32]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d00b      	beq.n	8011fb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	32ae      	adds	r2, #174	@ 0xae
 8011fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fa6:	6a1b      	ldr	r3, [r3, #32]
 8011fa8:	78fa      	ldrb	r2, [r7, #3]
 8011faa:	4611      	mov	r1, r2
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3708      	adds	r7, #8
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}

08011fba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011fba:	b580      	push	{r7, lr}
 8011fbc:	b082      	sub	sp, #8
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	32ae      	adds	r2, #174	@ 0xae
 8011fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011fd8:	2303      	movs	r3, #3
 8011fda:	e01c      	b.n	8012016 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b03      	cmp	r3, #3
 8011fe6:	d115      	bne.n	8012014 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	32ae      	adds	r2, #174	@ 0xae
 8011ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d00b      	beq.n	8012014 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	32ae      	adds	r2, #174	@ 0xae
 8012006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200c:	78fa      	ldrb	r2, [r7, #3]
 801200e:	4611      	mov	r1, r2
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012014:	2300      	movs	r3, #0
}
 8012016:	4618      	mov	r0, r3
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801201e:	b480      	push	{r7}
 8012020:	b083      	sub	sp, #12
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801203c:	2300      	movs	r3, #0
 801203e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2201      	movs	r2, #1
 8012044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00e      	beq.n	8012070 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	6852      	ldr	r2, [r2, #4]
 801205e:	b2d2      	uxtb	r2, r2
 8012060:	4611      	mov	r1, r2
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	4798      	blx	r3
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d001      	beq.n	8012070 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801206c:	2303      	movs	r3, #3
 801206e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012070:	7bfb      	ldrb	r3, [r7, #15]
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801207a:	b480      	push	{r7}
 801207c:	b083      	sub	sp, #12
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	460b      	mov	r3, r1
 8012084:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012086:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012088:	4618      	mov	r0, r3
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	460b      	mov	r3, r1
 801209e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80120a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b086      	sub	sp, #24
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
 80120b6:	460b      	mov	r3, r1
 80120b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80120c2:	2300      	movs	r3, #0
 80120c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	885b      	ldrh	r3, [r3, #2]
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	7812      	ldrb	r2, [r2, #0]
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d91f      	bls.n	8012114 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80120da:	e013      	b.n	8012104 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80120dc:	f107 030a 	add.w	r3, r7, #10
 80120e0:	4619      	mov	r1, r3
 80120e2:	6978      	ldr	r0, [r7, #20]
 80120e4:	f000 f81b 	bl	801211e <USBD_GetNextDesc>
 80120e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	785b      	ldrb	r3, [r3, #1]
 80120ee:	2b05      	cmp	r3, #5
 80120f0:	d108      	bne.n	8012104 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	789b      	ldrb	r3, [r3, #2]
 80120fa:	78fa      	ldrb	r2, [r7, #3]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d008      	beq.n	8012112 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	885b      	ldrh	r3, [r3, #2]
 8012108:	b29a      	uxth	r2, r3
 801210a:	897b      	ldrh	r3, [r7, #10]
 801210c:	429a      	cmp	r2, r3
 801210e:	d8e5      	bhi.n	80120dc <USBD_GetEpDesc+0x2e>
 8012110:	e000      	b.n	8012114 <USBD_GetEpDesc+0x66>
          break;
 8012112:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012114:	693b      	ldr	r3, [r7, #16]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801211e:	b480      	push	{r7}
 8012120:	b085      	sub	sp, #20
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	7812      	ldrb	r2, [r2, #0]
 8012134:	4413      	add	r3, r2
 8012136:	b29a      	uxth	r2, r3
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	461a      	mov	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	4413      	add	r3, r2
 8012146:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012148:	68fb      	ldr	r3, [r7, #12]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3714      	adds	r7, #20
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012156:	b480      	push	{r7}
 8012158:	b087      	sub	sp, #28
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	3301      	adds	r3, #1
 801216c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012174:	8a3b      	ldrh	r3, [r7, #16]
 8012176:	021b      	lsls	r3, r3, #8
 8012178:	b21a      	sxth	r2, r3
 801217a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801217e:	4313      	orrs	r3, r2
 8012180:	b21b      	sxth	r3, r3
 8012182:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012184:	89fb      	ldrh	r3, [r7, #14]
}
 8012186:	4618      	mov	r0, r3
 8012188:	371c      	adds	r7, #28
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr
	...

08012194 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801219e:	2300      	movs	r3, #0
 80121a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80121aa:	2b40      	cmp	r3, #64	@ 0x40
 80121ac:	d005      	beq.n	80121ba <USBD_StdDevReq+0x26>
 80121ae:	2b40      	cmp	r3, #64	@ 0x40
 80121b0:	d857      	bhi.n	8012262 <USBD_StdDevReq+0xce>
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00f      	beq.n	80121d6 <USBD_StdDevReq+0x42>
 80121b6:	2b20      	cmp	r3, #32
 80121b8:	d153      	bne.n	8012262 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	32ae      	adds	r2, #174	@ 0xae
 80121c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121c8:	689b      	ldr	r3, [r3, #8]
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	4798      	blx	r3
 80121d0:	4603      	mov	r3, r0
 80121d2:	73fb      	strb	r3, [r7, #15]
      break;
 80121d4:	e04a      	b.n	801226c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	785b      	ldrb	r3, [r3, #1]
 80121da:	2b09      	cmp	r3, #9
 80121dc:	d83b      	bhi.n	8012256 <USBD_StdDevReq+0xc2>
 80121de:	a201      	add	r2, pc, #4	@ (adr r2, 80121e4 <USBD_StdDevReq+0x50>)
 80121e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e4:	08012239 	.word	0x08012239
 80121e8:	0801224d 	.word	0x0801224d
 80121ec:	08012257 	.word	0x08012257
 80121f0:	08012243 	.word	0x08012243
 80121f4:	08012257 	.word	0x08012257
 80121f8:	08012217 	.word	0x08012217
 80121fc:	0801220d 	.word	0x0801220d
 8012200:	08012257 	.word	0x08012257
 8012204:	0801222f 	.word	0x0801222f
 8012208:	08012221 	.word	0x08012221
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fa3c 	bl	801268c <USBD_GetDescriptor>
          break;
 8012214:	e024      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fbcb 	bl	80129b4 <USBD_SetAddress>
          break;
 801221e:	e01f      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012220:	6839      	ldr	r1, [r7, #0]
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f000 fc0a 	bl	8012a3c <USBD_SetConfig>
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]
          break;
 801222c:	e018      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fcad 	bl	8012b90 <USBD_GetConfig>
          break;
 8012236:	e013      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fcde 	bl	8012bfc <USBD_GetStatus>
          break;
 8012240:	e00e      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fd0d 	bl	8012c64 <USBD_SetFeature>
          break;
 801224a:	e009      	b.n	8012260 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fd31 	bl	8012cb6 <USBD_ClrFeature>
          break;
 8012254:	e004      	b.n	8012260 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fd88 	bl	8012d6e <USBD_CtlError>
          break;
 801225e:	bf00      	nop
      }
      break;
 8012260:	e004      	b.n	801226c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012262:	6839      	ldr	r1, [r7, #0]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fd82 	bl	8012d6e <USBD_CtlError>
      break;
 801226a:	bf00      	nop
  }

  return ret;
 801226c:	7bfb      	ldrb	r3, [r7, #15]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop

08012278 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801228e:	2b40      	cmp	r3, #64	@ 0x40
 8012290:	d005      	beq.n	801229e <USBD_StdItfReq+0x26>
 8012292:	2b40      	cmp	r3, #64	@ 0x40
 8012294:	d852      	bhi.n	801233c <USBD_StdItfReq+0xc4>
 8012296:	2b00      	cmp	r3, #0
 8012298:	d001      	beq.n	801229e <USBD_StdItfReq+0x26>
 801229a:	2b20      	cmp	r3, #32
 801229c:	d14e      	bne.n	801233c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	3b01      	subs	r3, #1
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d840      	bhi.n	801232e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	889b      	ldrh	r3, [r3, #4]
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d836      	bhi.n	8012324 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	889b      	ldrh	r3, [r3, #4]
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff fedb 	bl	801207a <USBD_CoreFindIF>
 80122c4:	4603      	mov	r3, r0
 80122c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80122c8:	7bbb      	ldrb	r3, [r7, #14]
 80122ca:	2bff      	cmp	r3, #255	@ 0xff
 80122cc:	d01d      	beq.n	801230a <USBD_StdItfReq+0x92>
 80122ce:	7bbb      	ldrb	r3, [r7, #14]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d11a      	bne.n	801230a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80122d4:	7bba      	ldrb	r2, [r7, #14]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	32ae      	adds	r2, #174	@ 0xae
 80122da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00f      	beq.n	8012304 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80122e4:	7bba      	ldrb	r2, [r7, #14]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80122ec:	7bba      	ldrb	r2, [r7, #14]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	32ae      	adds	r2, #174	@ 0xae
 80122f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	6839      	ldr	r1, [r7, #0]
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	4798      	blx	r3
 80122fe:	4603      	mov	r3, r0
 8012300:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012302:	e004      	b.n	801230e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012304:	2303      	movs	r3, #3
 8012306:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012308:	e001      	b.n	801230e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801230a:	2303      	movs	r3, #3
 801230c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	88db      	ldrh	r3, [r3, #6]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d110      	bne.n	8012338 <USBD_StdItfReq+0xc0>
 8012316:	7bfb      	ldrb	r3, [r7, #15]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10d      	bne.n	8012338 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 fdfd 	bl	8012f1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012322:	e009      	b.n	8012338 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 fd21 	bl	8012d6e <USBD_CtlError>
          break;
 801232c:	e004      	b.n	8012338 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 fd1c 	bl	8012d6e <USBD_CtlError>
          break;
 8012336:	e000      	b.n	801233a <USBD_StdItfReq+0xc2>
          break;
 8012338:	bf00      	nop
      }
      break;
 801233a:	e004      	b.n	8012346 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f000 fd15 	bl	8012d6e <USBD_CtlError>
      break;
 8012344:	bf00      	nop
  }

  return ret;
 8012346:	7bfb      	ldrb	r3, [r7, #15]
}
 8012348:	4618      	mov	r0, r3
 801234a:	3710      	adds	r7, #16
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801235a:	2300      	movs	r3, #0
 801235c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	889b      	ldrh	r3, [r3, #4]
 8012362:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801236c:	2b40      	cmp	r3, #64	@ 0x40
 801236e:	d007      	beq.n	8012380 <USBD_StdEPReq+0x30>
 8012370:	2b40      	cmp	r3, #64	@ 0x40
 8012372:	f200 817f 	bhi.w	8012674 <USBD_StdEPReq+0x324>
 8012376:	2b00      	cmp	r3, #0
 8012378:	d02a      	beq.n	80123d0 <USBD_StdEPReq+0x80>
 801237a:	2b20      	cmp	r3, #32
 801237c:	f040 817a 	bne.w	8012674 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012380:	7bbb      	ldrb	r3, [r7, #14]
 8012382:	4619      	mov	r1, r3
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7ff fe85 	bl	8012094 <USBD_CoreFindEP>
 801238a:	4603      	mov	r3, r0
 801238c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801238e:	7b7b      	ldrb	r3, [r7, #13]
 8012390:	2bff      	cmp	r3, #255	@ 0xff
 8012392:	f000 8174 	beq.w	801267e <USBD_StdEPReq+0x32e>
 8012396:	7b7b      	ldrb	r3, [r7, #13]
 8012398:	2b00      	cmp	r3, #0
 801239a:	f040 8170 	bne.w	801267e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801239e:	7b7a      	ldrb	r2, [r7, #13]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80123a6:	7b7a      	ldrb	r2, [r7, #13]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	32ae      	adds	r2, #174	@ 0xae
 80123ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123b0:	689b      	ldr	r3, [r3, #8]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f000 8163 	beq.w	801267e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80123b8:	7b7a      	ldrb	r2, [r7, #13]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	32ae      	adds	r2, #174	@ 0xae
 80123be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123c2:	689b      	ldr	r3, [r3, #8]
 80123c4:	6839      	ldr	r1, [r7, #0]
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	4798      	blx	r3
 80123ca:	4603      	mov	r3, r0
 80123cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80123ce:	e156      	b.n	801267e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	785b      	ldrb	r3, [r3, #1]
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d008      	beq.n	80123ea <USBD_StdEPReq+0x9a>
 80123d8:	2b03      	cmp	r3, #3
 80123da:	f300 8145 	bgt.w	8012668 <USBD_StdEPReq+0x318>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f000 809b 	beq.w	801251a <USBD_StdEPReq+0x1ca>
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	d03c      	beq.n	8012462 <USBD_StdEPReq+0x112>
 80123e8:	e13e      	b.n	8012668 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b02      	cmp	r3, #2
 80123f4:	d002      	beq.n	80123fc <USBD_StdEPReq+0xac>
 80123f6:	2b03      	cmp	r3, #3
 80123f8:	d016      	beq.n	8012428 <USBD_StdEPReq+0xd8>
 80123fa:	e02c      	b.n	8012456 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123fc:	7bbb      	ldrb	r3, [r7, #14]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00d      	beq.n	801241e <USBD_StdEPReq+0xce>
 8012402:	7bbb      	ldrb	r3, [r7, #14]
 8012404:	2b80      	cmp	r3, #128	@ 0x80
 8012406:	d00a      	beq.n	801241e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012408:	7bbb      	ldrb	r3, [r7, #14]
 801240a:	4619      	mov	r1, r3
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f003 ff79 	bl	8016304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012412:	2180      	movs	r1, #128	@ 0x80
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f003 ff75 	bl	8016304 <USBD_LL_StallEP>
 801241a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801241c:	e020      	b.n	8012460 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 fca4 	bl	8012d6e <USBD_CtlError>
              break;
 8012426:	e01b      	b.n	8012460 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	885b      	ldrh	r3, [r3, #2]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d10e      	bne.n	801244e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012430:	7bbb      	ldrb	r3, [r7, #14]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00b      	beq.n	801244e <USBD_StdEPReq+0xfe>
 8012436:	7bbb      	ldrb	r3, [r7, #14]
 8012438:	2b80      	cmp	r3, #128	@ 0x80
 801243a:	d008      	beq.n	801244e <USBD_StdEPReq+0xfe>
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	88db      	ldrh	r3, [r3, #6]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d104      	bne.n	801244e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	4619      	mov	r1, r3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f003 ff5b 	bl	8016304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 fd64 	bl	8012f1c <USBD_CtlSendStatus>

              break;
 8012454:	e004      	b.n	8012460 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012456:	6839      	ldr	r1, [r7, #0]
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 fc88 	bl	8012d6e <USBD_CtlError>
              break;
 801245e:	bf00      	nop
          }
          break;
 8012460:	e107      	b.n	8012672 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012468:	b2db      	uxtb	r3, r3
 801246a:	2b02      	cmp	r3, #2
 801246c:	d002      	beq.n	8012474 <USBD_StdEPReq+0x124>
 801246e:	2b03      	cmp	r3, #3
 8012470:	d016      	beq.n	80124a0 <USBD_StdEPReq+0x150>
 8012472:	e04b      	b.n	801250c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012474:	7bbb      	ldrb	r3, [r7, #14]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d00d      	beq.n	8012496 <USBD_StdEPReq+0x146>
 801247a:	7bbb      	ldrb	r3, [r7, #14]
 801247c:	2b80      	cmp	r3, #128	@ 0x80
 801247e:	d00a      	beq.n	8012496 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012480:	7bbb      	ldrb	r3, [r7, #14]
 8012482:	4619      	mov	r1, r3
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f003 ff3d 	bl	8016304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801248a:	2180      	movs	r1, #128	@ 0x80
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f003 ff39 	bl	8016304 <USBD_LL_StallEP>
 8012492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012494:	e040      	b.n	8012518 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 fc68 	bl	8012d6e <USBD_CtlError>
              break;
 801249e:	e03b      	b.n	8012518 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	885b      	ldrh	r3, [r3, #2]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d136      	bne.n	8012516 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80124a8:	7bbb      	ldrb	r3, [r7, #14]
 80124aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d004      	beq.n	80124bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80124b2:	7bbb      	ldrb	r3, [r7, #14]
 80124b4:	4619      	mov	r1, r3
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f003 ff43 	bl	8016342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 fd2d 	bl	8012f1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80124c2:	7bbb      	ldrb	r3, [r7, #14]
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7ff fde4 	bl	8012094 <USBD_CoreFindEP>
 80124cc:	4603      	mov	r3, r0
 80124ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80124d0:	7b7b      	ldrb	r3, [r7, #13]
 80124d2:	2bff      	cmp	r3, #255	@ 0xff
 80124d4:	d01f      	beq.n	8012516 <USBD_StdEPReq+0x1c6>
 80124d6:	7b7b      	ldrb	r3, [r7, #13]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d11c      	bne.n	8012516 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80124dc:	7b7a      	ldrb	r2, [r7, #13]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80124e4:	7b7a      	ldrb	r2, [r7, #13]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	32ae      	adds	r2, #174	@ 0xae
 80124ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ee:	689b      	ldr	r3, [r3, #8]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d010      	beq.n	8012516 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80124f4:	7b7a      	ldrb	r2, [r7, #13]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	32ae      	adds	r2, #174	@ 0xae
 80124fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	6839      	ldr	r1, [r7, #0]
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	4798      	blx	r3
 8012506:	4603      	mov	r3, r0
 8012508:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801250a:	e004      	b.n	8012516 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801250c:	6839      	ldr	r1, [r7, #0]
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 fc2d 	bl	8012d6e <USBD_CtlError>
              break;
 8012514:	e000      	b.n	8012518 <USBD_StdEPReq+0x1c8>
              break;
 8012516:	bf00      	nop
          }
          break;
 8012518:	e0ab      	b.n	8012672 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2b02      	cmp	r3, #2
 8012524:	d002      	beq.n	801252c <USBD_StdEPReq+0x1dc>
 8012526:	2b03      	cmp	r3, #3
 8012528:	d032      	beq.n	8012590 <USBD_StdEPReq+0x240>
 801252a:	e097      	b.n	801265c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801252c:	7bbb      	ldrb	r3, [r7, #14]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d007      	beq.n	8012542 <USBD_StdEPReq+0x1f2>
 8012532:	7bbb      	ldrb	r3, [r7, #14]
 8012534:	2b80      	cmp	r3, #128	@ 0x80
 8012536:	d004      	beq.n	8012542 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012538:	6839      	ldr	r1, [r7, #0]
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 fc17 	bl	8012d6e <USBD_CtlError>
                break;
 8012540:	e091      	b.n	8012666 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012546:	2b00      	cmp	r3, #0
 8012548:	da0b      	bge.n	8012562 <USBD_StdEPReq+0x212>
 801254a:	7bbb      	ldrb	r3, [r7, #14]
 801254c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012550:	4613      	mov	r3, r2
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	4413      	add	r3, r2
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	3310      	adds	r3, #16
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	4413      	add	r3, r2
 801255e:	3304      	adds	r3, #4
 8012560:	e00b      	b.n	801257a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012562:	7bbb      	ldrb	r3, [r7, #14]
 8012564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012568:	4613      	mov	r3, r2
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	4413      	add	r3, r2
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	4413      	add	r3, r2
 8012578:	3304      	adds	r3, #4
 801257a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	2200      	movs	r2, #0
 8012580:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	2202      	movs	r2, #2
 8012586:	4619      	mov	r1, r3
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f000 fc6d 	bl	8012e68 <USBD_CtlSendData>
              break;
 801258e:	e06a      	b.n	8012666 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012594:	2b00      	cmp	r3, #0
 8012596:	da11      	bge.n	80125bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012598:	7bbb      	ldrb	r3, [r7, #14]
 801259a:	f003 020f 	and.w	r2, r3, #15
 801259e:	6879      	ldr	r1, [r7, #4]
 80125a0:	4613      	mov	r3, r2
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	4413      	add	r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	440b      	add	r3, r1
 80125aa:	3324      	adds	r3, #36	@ 0x24
 80125ac:	881b      	ldrh	r3, [r3, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d117      	bne.n	80125e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 fbda 	bl	8012d6e <USBD_CtlError>
                  break;
 80125ba:	e054      	b.n	8012666 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80125bc:	7bbb      	ldrb	r3, [r7, #14]
 80125be:	f003 020f 	and.w	r2, r3, #15
 80125c2:	6879      	ldr	r1, [r7, #4]
 80125c4:	4613      	mov	r3, r2
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	4413      	add	r3, r2
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	440b      	add	r3, r1
 80125ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d104      	bne.n	80125e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80125d8:	6839      	ldr	r1, [r7, #0]
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 fbc7 	bl	8012d6e <USBD_CtlError>
                  break;
 80125e0:	e041      	b.n	8012666 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	da0b      	bge.n	8012602 <USBD_StdEPReq+0x2b2>
 80125ea:	7bbb      	ldrb	r3, [r7, #14]
 80125ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80125f0:	4613      	mov	r3, r2
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	4413      	add	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	3310      	adds	r3, #16
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	4413      	add	r3, r2
 80125fe:	3304      	adds	r3, #4
 8012600:	e00b      	b.n	801261a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012602:	7bbb      	ldrb	r3, [r7, #14]
 8012604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012608:	4613      	mov	r3, r2
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	4413      	add	r3, r2
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	4413      	add	r3, r2
 8012618:	3304      	adds	r3, #4
 801261a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801261c:	7bbb      	ldrb	r3, [r7, #14]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d002      	beq.n	8012628 <USBD_StdEPReq+0x2d8>
 8012622:	7bbb      	ldrb	r3, [r7, #14]
 8012624:	2b80      	cmp	r3, #128	@ 0x80
 8012626:	d103      	bne.n	8012630 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	2200      	movs	r2, #0
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	e00e      	b.n	801264e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012630:	7bbb      	ldrb	r3, [r7, #14]
 8012632:	4619      	mov	r1, r3
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f003 fea3 	bl	8016380 <USBD_LL_IsStallEP>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d003      	beq.n	8012648 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	2201      	movs	r2, #1
 8012644:	601a      	str	r2, [r3, #0]
 8012646:	e002      	b.n	801264e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	2200      	movs	r2, #0
 801264c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	2202      	movs	r2, #2
 8012652:	4619      	mov	r1, r3
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f000 fc07 	bl	8012e68 <USBD_CtlSendData>
              break;
 801265a:	e004      	b.n	8012666 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 fb85 	bl	8012d6e <USBD_CtlError>
              break;
 8012664:	bf00      	nop
          }
          break;
 8012666:	e004      	b.n	8012672 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012668:	6839      	ldr	r1, [r7, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fb7f 	bl	8012d6e <USBD_CtlError>
          break;
 8012670:	bf00      	nop
      }
      break;
 8012672:	e005      	b.n	8012680 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 fb79 	bl	8012d6e <USBD_CtlError>
      break;
 801267c:	e000      	b.n	8012680 <USBD_StdEPReq+0x330>
      break;
 801267e:	bf00      	nop
  }

  return ret;
 8012680:	7bfb      	ldrb	r3, [r7, #15]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
	...

0801268c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012696:	2300      	movs	r3, #0
 8012698:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801269a:	2300      	movs	r3, #0
 801269c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801269e:	2300      	movs	r3, #0
 80126a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	885b      	ldrh	r3, [r3, #2]
 80126a6:	0a1b      	lsrs	r3, r3, #8
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	3b01      	subs	r3, #1
 80126ac:	2b0e      	cmp	r3, #14
 80126ae:	f200 8152 	bhi.w	8012956 <USBD_GetDescriptor+0x2ca>
 80126b2:	a201      	add	r2, pc, #4	@ (adr r2, 80126b8 <USBD_GetDescriptor+0x2c>)
 80126b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b8:	08012729 	.word	0x08012729
 80126bc:	08012741 	.word	0x08012741
 80126c0:	08012781 	.word	0x08012781
 80126c4:	08012957 	.word	0x08012957
 80126c8:	08012957 	.word	0x08012957
 80126cc:	080128f7 	.word	0x080128f7
 80126d0:	08012923 	.word	0x08012923
 80126d4:	08012957 	.word	0x08012957
 80126d8:	08012957 	.word	0x08012957
 80126dc:	08012957 	.word	0x08012957
 80126e0:	08012957 	.word	0x08012957
 80126e4:	08012957 	.word	0x08012957
 80126e8:	08012957 	.word	0x08012957
 80126ec:	08012957 	.word	0x08012957
 80126f0:	080126f5 	.word	0x080126f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80126fa:	69db      	ldr	r3, [r3, #28]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00b      	beq.n	8012718 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012706:	69db      	ldr	r3, [r3, #28]
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	7c12      	ldrb	r2, [r2, #16]
 801270c:	f107 0108 	add.w	r1, r7, #8
 8012710:	4610      	mov	r0, r2
 8012712:	4798      	blx	r3
 8012714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012716:	e126      	b.n	8012966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 fb27 	bl	8012d6e <USBD_CtlError>
        err++;
 8012720:	7afb      	ldrb	r3, [r7, #11]
 8012722:	3301      	adds	r3, #1
 8012724:	72fb      	strb	r3, [r7, #11]
      break;
 8012726:	e11e      	b.n	8012966 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	7c12      	ldrb	r2, [r2, #16]
 8012734:	f107 0108 	add.w	r1, r7, #8
 8012738:	4610      	mov	r0, r2
 801273a:	4798      	blx	r3
 801273c:	60f8      	str	r0, [r7, #12]
      break;
 801273e:	e112      	b.n	8012966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	7c1b      	ldrb	r3, [r3, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10d      	bne.n	8012764 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012750:	f107 0208 	add.w	r2, r7, #8
 8012754:	4610      	mov	r0, r2
 8012756:	4798      	blx	r3
 8012758:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3301      	adds	r3, #1
 801275e:	2202      	movs	r2, #2
 8012760:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012762:	e100      	b.n	8012966 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801276c:	f107 0208 	add.w	r2, r7, #8
 8012770:	4610      	mov	r0, r2
 8012772:	4798      	blx	r3
 8012774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3301      	adds	r3, #1
 801277a:	2202      	movs	r2, #2
 801277c:	701a      	strb	r2, [r3, #0]
      break;
 801277e:	e0f2      	b.n	8012966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	885b      	ldrh	r3, [r3, #2]
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b05      	cmp	r3, #5
 8012788:	f200 80ac 	bhi.w	80128e4 <USBD_GetDescriptor+0x258>
 801278c:	a201      	add	r2, pc, #4	@ (adr r2, 8012794 <USBD_GetDescriptor+0x108>)
 801278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012792:	bf00      	nop
 8012794:	080127ad 	.word	0x080127ad
 8012798:	080127e1 	.word	0x080127e1
 801279c:	08012815 	.word	0x08012815
 80127a0:	08012849 	.word	0x08012849
 80127a4:	0801287d 	.word	0x0801287d
 80127a8:	080128b1 	.word	0x080128b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d00b      	beq.n	80127d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	7c12      	ldrb	r2, [r2, #16]
 80127c4:	f107 0108 	add.w	r1, r7, #8
 80127c8:	4610      	mov	r0, r2
 80127ca:	4798      	blx	r3
 80127cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127ce:	e091      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127d0:	6839      	ldr	r1, [r7, #0]
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f000 facb 	bl	8012d6e <USBD_CtlError>
            err++;
 80127d8:	7afb      	ldrb	r3, [r7, #11]
 80127da:	3301      	adds	r3, #1
 80127dc:	72fb      	strb	r3, [r7, #11]
          break;
 80127de:	e089      	b.n	80128f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	7c12      	ldrb	r2, [r2, #16]
 80127f8:	f107 0108 	add.w	r1, r7, #8
 80127fc:	4610      	mov	r0, r2
 80127fe:	4798      	blx	r3
 8012800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012802:	e077      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 fab1 	bl	8012d6e <USBD_CtlError>
            err++;
 801280c:	7afb      	ldrb	r3, [r7, #11]
 801280e:	3301      	adds	r3, #1
 8012810:	72fb      	strb	r3, [r7, #11]
          break;
 8012812:	e06f      	b.n	80128f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00b      	beq.n	8012838 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	7c12      	ldrb	r2, [r2, #16]
 801282c:	f107 0108 	add.w	r1, r7, #8
 8012830:	4610      	mov	r0, r2
 8012832:	4798      	blx	r3
 8012834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012836:	e05d      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012838:	6839      	ldr	r1, [r7, #0]
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 fa97 	bl	8012d6e <USBD_CtlError>
            err++;
 8012840:	7afb      	ldrb	r3, [r7, #11]
 8012842:	3301      	adds	r3, #1
 8012844:	72fb      	strb	r3, [r7, #11]
          break;
 8012846:	e055      	b.n	80128f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801284e:	691b      	ldr	r3, [r3, #16]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00b      	beq.n	801286c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	7c12      	ldrb	r2, [r2, #16]
 8012860:	f107 0108 	add.w	r1, r7, #8
 8012864:	4610      	mov	r0, r2
 8012866:	4798      	blx	r3
 8012868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801286a:	e043      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801286c:	6839      	ldr	r1, [r7, #0]
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 fa7d 	bl	8012d6e <USBD_CtlError>
            err++;
 8012874:	7afb      	ldrb	r3, [r7, #11]
 8012876:	3301      	adds	r3, #1
 8012878:	72fb      	strb	r3, [r7, #11]
          break;
 801287a:	e03b      	b.n	80128f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012882:	695b      	ldr	r3, [r3, #20]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00b      	beq.n	80128a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801288e:	695b      	ldr	r3, [r3, #20]
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	7c12      	ldrb	r2, [r2, #16]
 8012894:	f107 0108 	add.w	r1, r7, #8
 8012898:	4610      	mov	r0, r2
 801289a:	4798      	blx	r3
 801289c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801289e:	e029      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128a0:	6839      	ldr	r1, [r7, #0]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fa63 	bl	8012d6e <USBD_CtlError>
            err++;
 80128a8:	7afb      	ldrb	r3, [r7, #11]
 80128aa:	3301      	adds	r3, #1
 80128ac:	72fb      	strb	r3, [r7, #11]
          break;
 80128ae:	e021      	b.n	80128f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128b6:	699b      	ldr	r3, [r3, #24]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00b      	beq.n	80128d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128c2:	699b      	ldr	r3, [r3, #24]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	7c12      	ldrb	r2, [r2, #16]
 80128c8:	f107 0108 	add.w	r1, r7, #8
 80128cc:	4610      	mov	r0, r2
 80128ce:	4798      	blx	r3
 80128d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128d2:	e00f      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128d4:	6839      	ldr	r1, [r7, #0]
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 fa49 	bl	8012d6e <USBD_CtlError>
            err++;
 80128dc:	7afb      	ldrb	r3, [r7, #11]
 80128de:	3301      	adds	r3, #1
 80128e0:	72fb      	strb	r3, [r7, #11]
          break;
 80128e2:	e007      	b.n	80128f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 fa41 	bl	8012d6e <USBD_CtlError>
          err++;
 80128ec:	7afb      	ldrb	r3, [r7, #11]
 80128ee:	3301      	adds	r3, #1
 80128f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80128f2:	bf00      	nop
      }
      break;
 80128f4:	e037      	b.n	8012966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7c1b      	ldrb	r3, [r3, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012906:	f107 0208 	add.w	r2, r7, #8
 801290a:	4610      	mov	r0, r2
 801290c:	4798      	blx	r3
 801290e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012910:	e029      	b.n	8012966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fa2a 	bl	8012d6e <USBD_CtlError>
        err++;
 801291a:	7afb      	ldrb	r3, [r7, #11]
 801291c:	3301      	adds	r3, #1
 801291e:	72fb      	strb	r3, [r7, #11]
      break;
 8012920:	e021      	b.n	8012966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	7c1b      	ldrb	r3, [r3, #16]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d10d      	bne.n	8012946 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012932:	f107 0208 	add.w	r2, r7, #8
 8012936:	4610      	mov	r0, r2
 8012938:	4798      	blx	r3
 801293a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	3301      	adds	r3, #1
 8012940:	2207      	movs	r2, #7
 8012942:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012944:	e00f      	b.n	8012966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 fa10 	bl	8012d6e <USBD_CtlError>
        err++;
 801294e:	7afb      	ldrb	r3, [r7, #11]
 8012950:	3301      	adds	r3, #1
 8012952:	72fb      	strb	r3, [r7, #11]
      break;
 8012954:	e007      	b.n	8012966 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012956:	6839      	ldr	r1, [r7, #0]
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f000 fa08 	bl	8012d6e <USBD_CtlError>
      err++;
 801295e:	7afb      	ldrb	r3, [r7, #11]
 8012960:	3301      	adds	r3, #1
 8012962:	72fb      	strb	r3, [r7, #11]
      break;
 8012964:	bf00      	nop
  }

  if (err != 0U)
 8012966:	7afb      	ldrb	r3, [r7, #11]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d11e      	bne.n	80129aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	88db      	ldrh	r3, [r3, #6]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d016      	beq.n	80129a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012974:	893b      	ldrh	r3, [r7, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00e      	beq.n	8012998 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	88da      	ldrh	r2, [r3, #6]
 801297e:	893b      	ldrh	r3, [r7, #8]
 8012980:	4293      	cmp	r3, r2
 8012982:	bf28      	it	cs
 8012984:	4613      	movcs	r3, r2
 8012986:	b29b      	uxth	r3, r3
 8012988:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801298a:	893b      	ldrh	r3, [r7, #8]
 801298c:	461a      	mov	r2, r3
 801298e:	68f9      	ldr	r1, [r7, #12]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fa69 	bl	8012e68 <USBD_CtlSendData>
 8012996:	e009      	b.n	80129ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012998:	6839      	ldr	r1, [r7, #0]
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f9e7 	bl	8012d6e <USBD_CtlError>
 80129a0:	e004      	b.n	80129ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f000 faba 	bl	8012f1c <USBD_CtlSendStatus>
 80129a8:	e000      	b.n	80129ac <USBD_GetDescriptor+0x320>
    return;
 80129aa:	bf00      	nop
  }
}
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop

080129b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	889b      	ldrh	r3, [r3, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d131      	bne.n	8012a2a <USBD_SetAddress+0x76>
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	88db      	ldrh	r3, [r3, #6]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d12d      	bne.n	8012a2a <USBD_SetAddress+0x76>
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	885b      	ldrh	r3, [r3, #2]
 80129d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80129d4:	d829      	bhi.n	8012a2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	885b      	ldrh	r3, [r3, #2]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80129e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b03      	cmp	r3, #3
 80129ec:	d104      	bne.n	80129f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 f9bc 	bl	8012d6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f6:	e01d      	b.n	8012a34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	7bfa      	ldrb	r2, [r7, #15]
 80129fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	4619      	mov	r1, r3
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f003 fce7 	bl	80163d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 fa86 	bl	8012f1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a1e:	e009      	b.n	8012a34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a28:	e004      	b.n	8012a34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012a2a:	6839      	ldr	r1, [r7, #0]
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 f99e 	bl	8012d6e <USBD_CtlError>
  }
}
 8012a32:	bf00      	nop
 8012a34:	bf00      	nop
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	885b      	ldrh	r3, [r3, #2]
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	4b4e      	ldr	r3, [pc, #312]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a54:	4b4d      	ldr	r3, [pc, #308]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	d905      	bls.n	8012a68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a5c:	6839      	ldr	r1, [r7, #0]
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 f985 	bl	8012d6e <USBD_CtlError>
    return USBD_FAIL;
 8012a64:	2303      	movs	r3, #3
 8012a66:	e08c      	b.n	8012b82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b02      	cmp	r3, #2
 8012a72:	d002      	beq.n	8012a7a <USBD_SetConfig+0x3e>
 8012a74:	2b03      	cmp	r3, #3
 8012a76:	d029      	beq.n	8012acc <USBD_SetConfig+0x90>
 8012a78:	e075      	b.n	8012b66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012a7a:	4b44      	ldr	r3, [pc, #272]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d020      	beq.n	8012ac4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012a82:	4b42      	ldr	r3, [pc, #264]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	4619      	mov	r1, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7fe ffb9 	bl	8011a0a <USBD_SetClassConfig>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d008      	beq.n	8012ab4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012aa2:	6839      	ldr	r1, [r7, #0]
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 f962 	bl	8012d6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2202      	movs	r2, #2
 8012aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ab2:	e065      	b.n	8012b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f000 fa31 	bl	8012f1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2203      	movs	r2, #3
 8012abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012ac2:	e05d      	b.n	8012b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 fa29 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012aca:	e059      	b.n	8012b80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012acc:	4b2f      	ldr	r3, [pc, #188]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d112      	bne.n	8012afa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012adc:	4b2b      	ldr	r3, [pc, #172]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ae6:	4b29      	ldr	r3, [pc, #164]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7fe ffa8 	bl	8011a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 fa12 	bl	8012f1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012af8:	e042      	b.n	8012b80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012afa:	4b24      	ldr	r3, [pc, #144]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d02a      	beq.n	8012b5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	4619      	mov	r1, r3
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7fe ff96 	bl	8011a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012b16:	4b1d      	ldr	r3, [pc, #116]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b20:	4b1a      	ldr	r3, [pc, #104]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	4619      	mov	r1, r3
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7fe ff6f 	bl	8011a0a <USBD_SetClassConfig>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00f      	beq.n	8012b56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012b36:	6839      	ldr	r1, [r7, #0]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 f918 	bl	8012d6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	4619      	mov	r1, r3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7fe ff7b 	bl	8011a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2202      	movs	r2, #2
 8012b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012b54:	e014      	b.n	8012b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f9e0 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012b5c:	e010      	b.n	8012b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f9dc 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012b64:	e00c      	b.n	8012b80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012b66:	6839      	ldr	r1, [r7, #0]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f900 	bl	8012d6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b6e:	4b07      	ldr	r3, [pc, #28]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7fe ff64 	bl	8011a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8012b7e:	bf00      	nop
  }

  return ret;
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	24070f6c 	.word	0x24070f6c

08012b90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	88db      	ldrh	r3, [r3, #6]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d004      	beq.n	8012bac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012ba2:	6839      	ldr	r1, [r7, #0]
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f000 f8e2 	bl	8012d6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012baa:	e023      	b.n	8012bf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	dc02      	bgt.n	8012bbe <USBD_GetConfig+0x2e>
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	dc03      	bgt.n	8012bc4 <USBD_GetConfig+0x34>
 8012bbc:	e015      	b.n	8012bea <USBD_GetConfig+0x5a>
 8012bbe:	2b03      	cmp	r3, #3
 8012bc0:	d00b      	beq.n	8012bda <USBD_GetConfig+0x4a>
 8012bc2:	e012      	b.n	8012bea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	3308      	adds	r3, #8
 8012bce:	2201      	movs	r2, #1
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f948 	bl	8012e68 <USBD_CtlSendData>
        break;
 8012bd8:	e00c      	b.n	8012bf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	2201      	movs	r2, #1
 8012be0:	4619      	mov	r1, r3
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f000 f940 	bl	8012e68 <USBD_CtlSendData>
        break;
 8012be8:	e004      	b.n	8012bf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012bea:	6839      	ldr	r1, [r7, #0]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f8be 	bl	8012d6e <USBD_CtlError>
        break;
 8012bf2:	bf00      	nop
}
 8012bf4:	bf00      	nop
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d81e      	bhi.n	8012c52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	88db      	ldrh	r3, [r3, #6]
 8012c18:	2b02      	cmp	r3, #2
 8012c1a:	d004      	beq.n	8012c26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012c1c:	6839      	ldr	r1, [r7, #0]
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f000 f8a5 	bl	8012d6e <USBD_CtlError>
        break;
 8012c24:	e01a      	b.n	8012c5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2201      	movs	r2, #1
 8012c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d005      	beq.n	8012c42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	f043 0202 	orr.w	r2, r3, #2
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	330c      	adds	r3, #12
 8012c46:	2202      	movs	r2, #2
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 f90c 	bl	8012e68 <USBD_CtlSendData>
      break;
 8012c50:	e004      	b.n	8012c5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012c52:	6839      	ldr	r1, [r7, #0]
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f88a 	bl	8012d6e <USBD_CtlError>
      break;
 8012c5a:	bf00      	nop
  }
}
 8012c5c:	bf00      	nop
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	885b      	ldrh	r3, [r3, #2]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d107      	bne.n	8012c86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 f94c 	bl	8012f1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012c84:	e013      	b.n	8012cae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d10b      	bne.n	8012ca6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	889b      	ldrh	r3, [r3, #4]
 8012c92:	0a1b      	lsrs	r3, r3, #8
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f93c 	bl	8012f1c <USBD_CtlSendStatus>
}
 8012ca4:	e003      	b.n	8012cae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f000 f860 	bl	8012d6e <USBD_CtlError>
}
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	2b02      	cmp	r3, #2
 8012ccc:	d80b      	bhi.n	8012ce6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	885b      	ldrh	r3, [r3, #2]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d10c      	bne.n	8012cf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 f91c 	bl	8012f1c <USBD_CtlSendStatus>
      }
      break;
 8012ce4:	e004      	b.n	8012cf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 f840 	bl	8012d6e <USBD_CtlError>
      break;
 8012cee:	e000      	b.n	8012cf2 <USBD_ClrFeature+0x3c>
      break;
 8012cf0:	bf00      	nop
  }
}
 8012cf2:	bf00      	nop
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}

08012cfa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	3301      	adds	r3, #1
 8012d14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	781a      	ldrb	r2, [r3, #0]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3301      	adds	r3, #1
 8012d22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7ff fa16 	bl	8012156 <SWAPBYTE>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	3301      	adds	r3, #1
 8012d36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f7ff fa09 	bl	8012156 <SWAPBYTE>
 8012d44:	4603      	mov	r3, r0
 8012d46:	461a      	mov	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3301      	adds	r3, #1
 8012d56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7ff f9fc 	bl	8012156 <SWAPBYTE>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	461a      	mov	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	80da      	strh	r2, [r3, #6]
}
 8012d66:	bf00      	nop
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b082      	sub	sp, #8
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
 8012d76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d78:	2180      	movs	r1, #128	@ 0x80
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f003 fac2 	bl	8016304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d80:	2100      	movs	r1, #0
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f003 fabe 	bl	8016304 <USBD_LL_StallEP>
}
 8012d88:	bf00      	nop
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d042      	beq.n	8012e2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012daa:	6938      	ldr	r0, [r7, #16]
 8012dac:	f000 f842 	bl	8012e34 <USBD_GetLen>
 8012db0:	4603      	mov	r3, r0
 8012db2:	3301      	adds	r3, #1
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dba:	d808      	bhi.n	8012dce <USBD_GetString+0x3e>
 8012dbc:	6938      	ldr	r0, [r7, #16]
 8012dbe:	f000 f839 	bl	8012e34 <USBD_GetLen>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	e001      	b.n	8012dd2 <USBD_GetString+0x42>
 8012dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	4413      	add	r3, r2
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	7812      	ldrb	r2, [r2, #0]
 8012de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012de2:	7dfb      	ldrb	r3, [r7, #23]
 8012de4:	3301      	adds	r3, #1
 8012de6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
 8012dea:	68ba      	ldr	r2, [r7, #8]
 8012dec:	4413      	add	r3, r2
 8012dee:	2203      	movs	r2, #3
 8012df0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
 8012df4:	3301      	adds	r3, #1
 8012df6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012df8:	e013      	b.n	8012e22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	68ba      	ldr	r2, [r7, #8]
 8012dfe:	4413      	add	r3, r2
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	7812      	ldrb	r2, [r2, #0]
 8012e04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	613b      	str	r3, [r7, #16]
    idx++;
 8012e0c:	7dfb      	ldrb	r3, [r7, #23]
 8012e0e:	3301      	adds	r3, #1
 8012e10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	4413      	add	r3, r2
 8012e18:	2200      	movs	r2, #0
 8012e1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1e7      	bne.n	8012dfa <USBD_GetString+0x6a>
 8012e2a:	e000      	b.n	8012e2e <USBD_GetString+0x9e>
    return;
 8012e2c:	bf00      	nop
  }
}
 8012e2e:	3718      	adds	r7, #24
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012e44:	e005      	b.n	8012e52 <USBD_GetLen+0x1e>
  {
    len++;
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1f5      	bne.n	8012e46 <USBD_GetLen+0x12>
  }

  return len;
 8012e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2202      	movs	r2, #2
 8012e78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f003 fac1 	bl	8016416 <USBD_LL_Transmit>

  return USBD_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b084      	sub	sp, #16
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	2100      	movs	r1, #0
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f003 fab0 	bl	8016416 <USBD_LL_Transmit>

  return USBD_OK;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2203      	movs	r2, #3
 8012ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	2100      	movs	r1, #0
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f003 fab4 	bl	8016458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	60f8      	str	r0, [r7, #12]
 8012f02:	60b9      	str	r1, [r7, #8]
 8012f04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f003 faa3 	bl	8016458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2204      	movs	r2, #4
 8012f28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2100      	movs	r1, #0
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f003 fa6f 	bl	8016416 <USBD_LL_Transmit>

  return USBD_OK;
 8012f38:	2300      	movs	r3, #0
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b082      	sub	sp, #8
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2205      	movs	r2, #5
 8012f4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f52:	2300      	movs	r3, #0
 8012f54:	2200      	movs	r2, #0
 8012f56:	2100      	movs	r1, #0
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f003 fa7d 	bl	8016458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f5e:	2300      	movs	r3, #0
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <__NVIC_SetPriority>:
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	db0a      	blt.n	8012f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	490c      	ldr	r1, [pc, #48]	@ (8012fb4 <__NVIC_SetPriority+0x4c>)
 8012f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f86:	0112      	lsls	r2, r2, #4
 8012f88:	b2d2      	uxtb	r2, r2
 8012f8a:	440b      	add	r3, r1
 8012f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012f90:	e00a      	b.n	8012fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	b2da      	uxtb	r2, r3
 8012f96:	4908      	ldr	r1, [pc, #32]	@ (8012fb8 <__NVIC_SetPriority+0x50>)
 8012f98:	88fb      	ldrh	r3, [r7, #6]
 8012f9a:	f003 030f 	and.w	r3, r3, #15
 8012f9e:	3b04      	subs	r3, #4
 8012fa0:	0112      	lsls	r2, r2, #4
 8012fa2:	b2d2      	uxtb	r2, r2
 8012fa4:	440b      	add	r3, r1
 8012fa6:	761a      	strb	r2, [r3, #24]
}
 8012fa8:	bf00      	nop
 8012faa:	370c      	adds	r7, #12
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr
 8012fb4:	e000e100 	.word	0xe000e100
 8012fb8:	e000ed00 	.word	0xe000ed00

08012fbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012fc0:	4b05      	ldr	r3, [pc, #20]	@ (8012fd8 <SysTick_Handler+0x1c>)
 8012fc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012fc4:	f001 fcf4 	bl	80149b0 <xTaskGetSchedulerState>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d001      	beq.n	8012fd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012fce:	f002 faeb 	bl	80155a8 <xPortSysTickHandler>
  }
}
 8012fd2:	bf00      	nop
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	e000e010 	.word	0xe000e010

08012fdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	f06f 0004 	mvn.w	r0, #4
 8012fe6:	f7ff ffbf 	bl	8012f68 <__NVIC_SetPriority>
#endif
}
 8012fea:	bf00      	nop
 8012fec:	bd80      	pop	{r7, pc}
	...

08012ff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ff6:	f3ef 8305 	mrs	r3, IPSR
 8012ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8012ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d003      	beq.n	801300a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013002:	f06f 0305 	mvn.w	r3, #5
 8013006:	607b      	str	r3, [r7, #4]
 8013008:	e00c      	b.n	8013024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801300a:	4b0a      	ldr	r3, [pc, #40]	@ (8013034 <osKernelInitialize+0x44>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d105      	bne.n	801301e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013012:	4b08      	ldr	r3, [pc, #32]	@ (8013034 <osKernelInitialize+0x44>)
 8013014:	2201      	movs	r2, #1
 8013016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013018:	2300      	movs	r3, #0
 801301a:	607b      	str	r3, [r7, #4]
 801301c:	e002      	b.n	8013024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013024:	687b      	ldr	r3, [r7, #4]
}
 8013026:	4618      	mov	r0, r3
 8013028:	370c      	adds	r7, #12
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	24070f70 	.word	0x24070f70

08013038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801303e:	f3ef 8305 	mrs	r3, IPSR
 8013042:	603b      	str	r3, [r7, #0]
  return(result);
 8013044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013046:	2b00      	cmp	r3, #0
 8013048:	d003      	beq.n	8013052 <osKernelStart+0x1a>
    stat = osErrorISR;
 801304a:	f06f 0305 	mvn.w	r3, #5
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	e010      	b.n	8013074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013052:	4b0b      	ldr	r3, [pc, #44]	@ (8013080 <osKernelStart+0x48>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b01      	cmp	r3, #1
 8013058:	d109      	bne.n	801306e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801305a:	f7ff ffbf 	bl	8012fdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801305e:	4b08      	ldr	r3, [pc, #32]	@ (8013080 <osKernelStart+0x48>)
 8013060:	2202      	movs	r2, #2
 8013062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013064:	f001 f840 	bl	80140e8 <vTaskStartScheduler>
      stat = osOK;
 8013068:	2300      	movs	r3, #0
 801306a:	607b      	str	r3, [r7, #4]
 801306c:	e002      	b.n	8013074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801306e:	f04f 33ff 	mov.w	r3, #4294967295
 8013072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013074:	687b      	ldr	r3, [r7, #4]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	24070f70 	.word	0x24070f70

08013084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013084:	b580      	push	{r7, lr}
 8013086:	b08e      	sub	sp, #56	@ 0x38
 8013088:	af04      	add	r7, sp, #16
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013090:	2300      	movs	r3, #0
 8013092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013094:	f3ef 8305 	mrs	r3, IPSR
 8013098:	617b      	str	r3, [r7, #20]
  return(result);
 801309a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801309c:	2b00      	cmp	r3, #0
 801309e:	d17e      	bne.n	801319e <osThreadNew+0x11a>
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d07b      	beq.n	801319e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80130a6:	2380      	movs	r3, #128	@ 0x80
 80130a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80130aa:	2318      	movs	r3, #24
 80130ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80130ae:	2300      	movs	r3, #0
 80130b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80130b2:	f04f 33ff 	mov.w	r3, #4294967295
 80130b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d045      	beq.n	801314a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d002      	beq.n	80130cc <osThreadNew+0x48>
        name = attr->name;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d008      	beq.n	80130f2 <osThreadNew+0x6e>
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	2b38      	cmp	r3, #56	@ 0x38
 80130e4:	d805      	bhi.n	80130f2 <osThreadNew+0x6e>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	f003 0301 	and.w	r3, r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d001      	beq.n	80130f6 <osThreadNew+0x72>
        return (NULL);
 80130f2:	2300      	movs	r3, #0
 80130f4:	e054      	b.n	80131a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	695b      	ldr	r3, [r3, #20]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	695b      	ldr	r3, [r3, #20]
 8013102:	089b      	lsrs	r3, r3, #2
 8013104:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00e      	beq.n	801312c <osThreadNew+0xa8>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	2ba7      	cmp	r3, #167	@ 0xa7
 8013114:	d90a      	bls.n	801312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801311a:	2b00      	cmp	r3, #0
 801311c:	d006      	beq.n	801312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	695b      	ldr	r3, [r3, #20]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <osThreadNew+0xa8>
        mem = 1;
 8013126:	2301      	movs	r3, #1
 8013128:	61bb      	str	r3, [r7, #24]
 801312a:	e010      	b.n	801314e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10c      	bne.n	801314e <osThreadNew+0xca>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d108      	bne.n	801314e <osThreadNew+0xca>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <osThreadNew+0xca>
          mem = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	61bb      	str	r3, [r7, #24]
 8013148:	e001      	b.n	801314e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d110      	bne.n	8013176 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801315c:	9202      	str	r2, [sp, #8]
 801315e:	9301      	str	r3, [sp, #4]
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	6a3a      	ldr	r2, [r7, #32]
 8013168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801316a:	68f8      	ldr	r0, [r7, #12]
 801316c:	f000 fdfe 	bl	8013d6c <xTaskCreateStatic>
 8013170:	4603      	mov	r3, r0
 8013172:	613b      	str	r3, [r7, #16]
 8013174:	e013      	b.n	801319e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d110      	bne.n	801319e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801317c:	6a3b      	ldr	r3, [r7, #32]
 801317e:	b29a      	uxth	r2, r3
 8013180:	f107 0310 	add.w	r3, r7, #16
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f000 fe4c 	bl	8013e2c <xTaskCreate>
 8013194:	4603      	mov	r3, r0
 8013196:	2b01      	cmp	r3, #1
 8013198:	d001      	beq.n	801319e <osThreadNew+0x11a>
            hTask = NULL;
 801319a:	2300      	movs	r3, #0
 801319c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801319e:	693b      	ldr	r3, [r7, #16]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3728      	adds	r7, #40	@ 0x28
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80131a8:	b480      	push	{r7}
 80131aa:	b085      	sub	sp, #20
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	4a07      	ldr	r2, [pc, #28]	@ (80131d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80131b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	4a06      	ldr	r2, [pc, #24]	@ (80131d8 <vApplicationGetIdleTaskMemory+0x30>)
 80131be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2280      	movs	r2, #128	@ 0x80
 80131c4:	601a      	str	r2, [r3, #0]
}
 80131c6:	bf00      	nop
 80131c8:	3714      	adds	r7, #20
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	24070f74 	.word	0x24070f74
 80131d8:	2407101c 	.word	0x2407101c

080131dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	4a07      	ldr	r2, [pc, #28]	@ (8013208 <vApplicationGetTimerTaskMemory+0x2c>)
 80131ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	4a06      	ldr	r2, [pc, #24]	@ (801320c <vApplicationGetTimerTaskMemory+0x30>)
 80131f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80131fa:	601a      	str	r2, [r3, #0]
}
 80131fc:	bf00      	nop
 80131fe:	3714      	adds	r7, #20
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr
 8013208:	2407121c 	.word	0x2407121c
 801320c:	240712c4 	.word	0x240712c4

08013210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f103 0208 	add.w	r2, r3, #8
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f04f 32ff 	mov.w	r2, #4294967295
 8013228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f103 0208 	add.w	r2, r3, #8
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f103 0208 	add.w	r2, r3, #8
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2200      	movs	r2, #0
 8013242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013244:	bf00      	nop
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801325e:	bf00      	nop
 8013260:	370c      	adds	r7, #12
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr

0801326a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801326a:	b480      	push	{r7}
 801326c:	b085      	sub	sp, #20
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	689a      	ldr	r2, [r3, #8]
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	689b      	ldr	r3, [r3, #8]
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	683a      	ldr	r2, [r7, #0]
 8013294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	1c5a      	adds	r2, r3, #1
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	601a      	str	r2, [r3, #0]
}
 80132a6:	bf00      	nop
 80132a8:	3714      	adds	r7, #20
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132b2:	b480      	push	{r7}
 80132b4:	b085      	sub	sp, #20
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c8:	d103      	bne.n	80132d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	691b      	ldr	r3, [r3, #16]
 80132ce:	60fb      	str	r3, [r7, #12]
 80132d0:	e00c      	b.n	80132ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3308      	adds	r3, #8
 80132d6:	60fb      	str	r3, [r7, #12]
 80132d8:	e002      	b.n	80132e0 <vListInsert+0x2e>
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d2f6      	bcs.n	80132da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	685a      	ldr	r2, [r3, #4]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	683a      	ldr	r2, [r7, #0]
 80132fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	683a      	ldr	r2, [r7, #0]
 8013306:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	1c5a      	adds	r2, r3, #1
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	601a      	str	r2, [r3, #0]
}
 8013318:	bf00      	nop
 801331a:	3714      	adds	r7, #20
 801331c:	46bd      	mov	sp, r7
 801331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013322:	4770      	bx	lr

08013324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013324:	b480      	push	{r7}
 8013326:	b085      	sub	sp, #20
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	691b      	ldr	r3, [r3, #16]
 8013330:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	6892      	ldr	r2, [r2, #8]
 801333a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	6852      	ldr	r2, [r2, #4]
 8013344:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	429a      	cmp	r2, r3
 801334e:	d103      	bne.n	8013358 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	689a      	ldr	r2, [r3, #8]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2200      	movs	r2, #0
 801335c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	1e5a      	subs	r2, r3, #1
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d10b      	bne.n	80133a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013390:	f383 8811 	msr	BASEPRI, r3
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801339e:	bf00      	nop
 80133a0:	bf00      	nop
 80133a2:	e7fd      	b.n	80133a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80133a4:	f002 f870 	bl	8015488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133b0:	68f9      	ldr	r1, [r7, #12]
 80133b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80133b4:	fb01 f303 	mul.w	r3, r1, r3
 80133b8:	441a      	add	r2, r3
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2200      	movs	r2, #0
 80133c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133d4:	3b01      	subs	r3, #1
 80133d6:	68f9      	ldr	r1, [r7, #12]
 80133d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80133da:	fb01 f303 	mul.w	r3, r1, r3
 80133de:	441a      	add	r2, r3
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	22ff      	movs	r2, #255	@ 0xff
 80133e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	22ff      	movs	r2, #255	@ 0xff
 80133f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d114      	bne.n	8013424 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d01a      	beq.n	8013438 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	3310      	adds	r3, #16
 8013406:	4618      	mov	r0, r3
 8013408:	f001 f90c 	bl	8014624 <xTaskRemoveFromEventList>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d012      	beq.n	8013438 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013412:	4b0d      	ldr	r3, [pc, #52]	@ (8013448 <xQueueGenericReset+0xd0>)
 8013414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	f3bf 8f4f 	dsb	sy
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	e009      	b.n	8013438 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	3310      	adds	r3, #16
 8013428:	4618      	mov	r0, r3
 801342a:	f7ff fef1 	bl	8013210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	3324      	adds	r3, #36	@ 0x24
 8013432:	4618      	mov	r0, r3
 8013434:	f7ff feec 	bl	8013210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013438:	f002 f858 	bl	80154ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801343c:	2301      	movs	r3, #1
}
 801343e:	4618      	mov	r0, r3
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	e000ed04 	.word	0xe000ed04

0801344c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08e      	sub	sp, #56	@ 0x38
 8013450:	af02      	add	r7, sp, #8
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	607a      	str	r2, [r7, #4]
 8013458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d10b      	bne.n	8013478 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013464:	f383 8811 	msr	BASEPRI, r3
 8013468:	f3bf 8f6f 	isb	sy
 801346c:	f3bf 8f4f 	dsb	sy
 8013470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013472:	bf00      	nop
 8013474:	bf00      	nop
 8013476:	e7fd      	b.n	8013474 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d10b      	bne.n	8013496 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013482:	f383 8811 	msr	BASEPRI, r3
 8013486:	f3bf 8f6f 	isb	sy
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013490:	bf00      	nop
 8013492:	bf00      	nop
 8013494:	e7fd      	b.n	8013492 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <xQueueGenericCreateStatic+0x56>
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d001      	beq.n	80134a6 <xQueueGenericCreateStatic+0x5a>
 80134a2:	2301      	movs	r3, #1
 80134a4:	e000      	b.n	80134a8 <xQueueGenericCreateStatic+0x5c>
 80134a6:	2300      	movs	r3, #0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d10b      	bne.n	80134c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80134ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134b0:	f383 8811 	msr	BASEPRI, r3
 80134b4:	f3bf 8f6f 	isb	sy
 80134b8:	f3bf 8f4f 	dsb	sy
 80134bc:	623b      	str	r3, [r7, #32]
}
 80134be:	bf00      	nop
 80134c0:	bf00      	nop
 80134c2:	e7fd      	b.n	80134c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <xQueueGenericCreateStatic+0x84>
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d101      	bne.n	80134d4 <xQueueGenericCreateStatic+0x88>
 80134d0:	2301      	movs	r3, #1
 80134d2:	e000      	b.n	80134d6 <xQueueGenericCreateStatic+0x8a>
 80134d4:	2300      	movs	r3, #0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10b      	bne.n	80134f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80134da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134de:	f383 8811 	msr	BASEPRI, r3
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	f3bf 8f4f 	dsb	sy
 80134ea:	61fb      	str	r3, [r7, #28]
}
 80134ec:	bf00      	nop
 80134ee:	bf00      	nop
 80134f0:	e7fd      	b.n	80134ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80134f2:	2350      	movs	r3, #80	@ 0x50
 80134f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	2b50      	cmp	r3, #80	@ 0x50
 80134fa:	d00b      	beq.n	8013514 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80134fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	61bb      	str	r3, [r7, #24]
}
 801350e:	bf00      	nop
 8013510:	bf00      	nop
 8013512:	e7fd      	b.n	8013510 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013514:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801351a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00d      	beq.n	801353c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013522:	2201      	movs	r2, #1
 8013524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013528:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352e:	9300      	str	r3, [sp, #0]
 8013530:	4613      	mov	r3, r2
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f000 f805 	bl	8013546 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801353e:	4618      	mov	r0, r3
 8013540:	3730      	adds	r7, #48	@ 0x30
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b084      	sub	sp, #16
 801354a:	af00      	add	r7, sp, #0
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	607a      	str	r2, [r7, #4]
 8013552:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d103      	bne.n	8013562 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801355a:	69bb      	ldr	r3, [r7, #24]
 801355c:	69ba      	ldr	r2, [r7, #24]
 801355e:	601a      	str	r2, [r3, #0]
 8013560:	e002      	b.n	8013568 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	68fa      	ldr	r2, [r7, #12]
 801356c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	68ba      	ldr	r2, [r7, #8]
 8013572:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013574:	2101      	movs	r1, #1
 8013576:	69b8      	ldr	r0, [r7, #24]
 8013578:	f7ff fefe 	bl	8013378 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801357c:	69bb      	ldr	r3, [r7, #24]
 801357e:	78fa      	ldrb	r2, [r7, #3]
 8013580:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013584:	bf00      	nop
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08e      	sub	sp, #56	@ 0x38
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801359a:	2300      	movs	r3, #0
 801359c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80135a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10b      	bne.n	80135c0 <xQueueGenericSend+0x34>
	__asm volatile
 80135a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ac:	f383 8811 	msr	BASEPRI, r3
 80135b0:	f3bf 8f6f 	isb	sy
 80135b4:	f3bf 8f4f 	dsb	sy
 80135b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80135ba:	bf00      	nop
 80135bc:	bf00      	nop
 80135be:	e7fd      	b.n	80135bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d103      	bne.n	80135ce <xQueueGenericSend+0x42>
 80135c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <xQueueGenericSend+0x46>
 80135ce:	2301      	movs	r3, #1
 80135d0:	e000      	b.n	80135d4 <xQueueGenericSend+0x48>
 80135d2:	2300      	movs	r3, #0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10b      	bne.n	80135f0 <xQueueGenericSend+0x64>
	__asm volatile
 80135d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135dc:	f383 8811 	msr	BASEPRI, r3
 80135e0:	f3bf 8f6f 	isb	sy
 80135e4:	f3bf 8f4f 	dsb	sy
 80135e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80135ea:	bf00      	nop
 80135ec:	bf00      	nop
 80135ee:	e7fd      	b.n	80135ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	2b02      	cmp	r3, #2
 80135f4:	d103      	bne.n	80135fe <xQueueGenericSend+0x72>
 80135f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d101      	bne.n	8013602 <xQueueGenericSend+0x76>
 80135fe:	2301      	movs	r3, #1
 8013600:	e000      	b.n	8013604 <xQueueGenericSend+0x78>
 8013602:	2300      	movs	r3, #0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d10b      	bne.n	8013620 <xQueueGenericSend+0x94>
	__asm volatile
 8013608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801360c:	f383 8811 	msr	BASEPRI, r3
 8013610:	f3bf 8f6f 	isb	sy
 8013614:	f3bf 8f4f 	dsb	sy
 8013618:	623b      	str	r3, [r7, #32]
}
 801361a:	bf00      	nop
 801361c:	bf00      	nop
 801361e:	e7fd      	b.n	801361c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013620:	f001 f9c6 	bl	80149b0 <xTaskGetSchedulerState>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d102      	bne.n	8013630 <xQueueGenericSend+0xa4>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d101      	bne.n	8013634 <xQueueGenericSend+0xa8>
 8013630:	2301      	movs	r3, #1
 8013632:	e000      	b.n	8013636 <xQueueGenericSend+0xaa>
 8013634:	2300      	movs	r3, #0
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10b      	bne.n	8013652 <xQueueGenericSend+0xc6>
	__asm volatile
 801363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801363e:	f383 8811 	msr	BASEPRI, r3
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	61fb      	str	r3, [r7, #28]
}
 801364c:	bf00      	nop
 801364e:	bf00      	nop
 8013650:	e7fd      	b.n	801364e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013652:	f001 ff19 	bl	8015488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801365e:	429a      	cmp	r2, r3
 8013660:	d302      	bcc.n	8013668 <xQueueGenericSend+0xdc>
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	2b02      	cmp	r3, #2
 8013666:	d129      	bne.n	80136bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	68b9      	ldr	r1, [r7, #8]
 801366c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801366e:	f000 fa0f 	bl	8013a90 <prvCopyDataToQueue>
 8013672:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013678:	2b00      	cmp	r3, #0
 801367a:	d010      	beq.n	801369e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801367e:	3324      	adds	r3, #36	@ 0x24
 8013680:	4618      	mov	r0, r3
 8013682:	f000 ffcf 	bl	8014624 <xTaskRemoveFromEventList>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d013      	beq.n	80136b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801368c:	4b3f      	ldr	r3, [pc, #252]	@ (801378c <xQueueGenericSend+0x200>)
 801368e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	f3bf 8f4f 	dsb	sy
 8013698:	f3bf 8f6f 	isb	sy
 801369c:	e00a      	b.n	80136b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d007      	beq.n	80136b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80136a4:	4b39      	ldr	r3, [pc, #228]	@ (801378c <xQueueGenericSend+0x200>)
 80136a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136aa:	601a      	str	r2, [r3, #0]
 80136ac:	f3bf 8f4f 	dsb	sy
 80136b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80136b4:	f001 ff1a 	bl	80154ec <vPortExitCritical>
				return pdPASS;
 80136b8:	2301      	movs	r3, #1
 80136ba:	e063      	b.n	8013784 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d103      	bne.n	80136ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136c2:	f001 ff13 	bl	80154ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80136c6:	2300      	movs	r3, #0
 80136c8:	e05c      	b.n	8013784 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d106      	bne.n	80136de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136d0:	f107 0314 	add.w	r3, r7, #20
 80136d4:	4618      	mov	r0, r3
 80136d6:	f001 f809 	bl	80146ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136da:	2301      	movs	r3, #1
 80136dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136de:	f001 ff05 	bl	80154ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136e2:	f000 fd71 	bl	80141c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136e6:	f001 fecf 	bl	8015488 <vPortEnterCritical>
 80136ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136f0:	b25b      	sxtb	r3, r3
 80136f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f6:	d103      	bne.n	8013700 <xQueueGenericSend+0x174>
 80136f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136fa:	2200      	movs	r2, #0
 80136fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013706:	b25b      	sxtb	r3, r3
 8013708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801370c:	d103      	bne.n	8013716 <xQueueGenericSend+0x18a>
 801370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013710:	2200      	movs	r2, #0
 8013712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013716:	f001 fee9 	bl	80154ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801371a:	1d3a      	adds	r2, r7, #4
 801371c:	f107 0314 	add.w	r3, r7, #20
 8013720:	4611      	mov	r1, r2
 8013722:	4618      	mov	r0, r3
 8013724:	f000 fff8 	bl	8014718 <xTaskCheckForTimeOut>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d124      	bne.n	8013778 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801372e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013730:	f000 faa6 	bl	8013c80 <prvIsQueueFull>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d018      	beq.n	801376c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373c:	3310      	adds	r3, #16
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	4611      	mov	r1, r2
 8013742:	4618      	mov	r0, r3
 8013744:	f000 ff1c 	bl	8014580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801374a:	f000 fa31 	bl	8013bb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801374e:	f000 fd49 	bl	80141e4 <xTaskResumeAll>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	f47f af7c 	bne.w	8013652 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801375a:	4b0c      	ldr	r3, [pc, #48]	@ (801378c <xQueueGenericSend+0x200>)
 801375c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	e772      	b.n	8013652 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801376c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801376e:	f000 fa1f 	bl	8013bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013772:	f000 fd37 	bl	80141e4 <xTaskResumeAll>
 8013776:	e76c      	b.n	8013652 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801377a:	f000 fa19 	bl	8013bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801377e:	f000 fd31 	bl	80141e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013782:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013784:	4618      	mov	r0, r3
 8013786:	3738      	adds	r7, #56	@ 0x38
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	e000ed04 	.word	0xe000ed04

08013790 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b090      	sub	sp, #64	@ 0x40
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]
 801379c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10b      	bne.n	80137c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80137ba:	bf00      	nop
 80137bc:	bf00      	nop
 80137be:	e7fd      	b.n	80137bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d103      	bne.n	80137ce <xQueueGenericSendFromISR+0x3e>
 80137c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <xQueueGenericSendFromISR+0x42>
 80137ce:	2301      	movs	r3, #1
 80137d0:	e000      	b.n	80137d4 <xQueueGenericSendFromISR+0x44>
 80137d2:	2300      	movs	r3, #0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d10b      	bne.n	80137f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80137d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137dc:	f383 8811 	msr	BASEPRI, r3
 80137e0:	f3bf 8f6f 	isb	sy
 80137e4:	f3bf 8f4f 	dsb	sy
 80137e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80137ea:	bf00      	nop
 80137ec:	bf00      	nop
 80137ee:	e7fd      	b.n	80137ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d103      	bne.n	80137fe <xQueueGenericSendFromISR+0x6e>
 80137f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d101      	bne.n	8013802 <xQueueGenericSendFromISR+0x72>
 80137fe:	2301      	movs	r3, #1
 8013800:	e000      	b.n	8013804 <xQueueGenericSendFromISR+0x74>
 8013802:	2300      	movs	r3, #0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10b      	bne.n	8013820 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801380c:	f383 8811 	msr	BASEPRI, r3
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	623b      	str	r3, [r7, #32]
}
 801381a:	bf00      	nop
 801381c:	bf00      	nop
 801381e:	e7fd      	b.n	801381c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013820:	f001 ff12 	bl	8015648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013824:	f3ef 8211 	mrs	r2, BASEPRI
 8013828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801382c:	f383 8811 	msr	BASEPRI, r3
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f3bf 8f4f 	dsb	sy
 8013838:	61fa      	str	r2, [r7, #28]
 801383a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801383c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801383e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013848:	429a      	cmp	r2, r3
 801384a:	d302      	bcc.n	8013852 <xQueueGenericSendFromISR+0xc2>
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	2b02      	cmp	r3, #2
 8013850:	d12f      	bne.n	80138b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013858:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013860:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	68b9      	ldr	r1, [r7, #8]
 8013866:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013868:	f000 f912 	bl	8013a90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801386c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013874:	d112      	bne.n	801389c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801387a:	2b00      	cmp	r3, #0
 801387c:	d016      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013880:	3324      	adds	r3, #36	@ 0x24
 8013882:	4618      	mov	r0, r3
 8013884:	f000 fece 	bl	8014624 <xTaskRemoveFromEventList>
 8013888:	4603      	mov	r3, r0
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00e      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00b      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	601a      	str	r2, [r3, #0]
 801389a:	e007      	b.n	80138ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801389c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138a0:	3301      	adds	r3, #1
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	b25a      	sxtb	r2, r3
 80138a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80138ac:	2301      	movs	r3, #1
 80138ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80138b0:	e001      	b.n	80138b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80138b2:	2300      	movs	r3, #0
 80138b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80138c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3740      	adds	r7, #64	@ 0x40
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b08c      	sub	sp, #48	@ 0x30
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138d8:	2300      	movs	r3, #0
 80138da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d10b      	bne.n	80138fe <xQueueReceive+0x32>
	__asm volatile
 80138e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	623b      	str	r3, [r7, #32]
}
 80138f8:	bf00      	nop
 80138fa:	bf00      	nop
 80138fc:	e7fd      	b.n	80138fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d103      	bne.n	801390c <xQueueReceive+0x40>
 8013904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	d101      	bne.n	8013910 <xQueueReceive+0x44>
 801390c:	2301      	movs	r3, #1
 801390e:	e000      	b.n	8013912 <xQueueReceive+0x46>
 8013910:	2300      	movs	r3, #0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10b      	bne.n	801392e <xQueueReceive+0x62>
	__asm volatile
 8013916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801391a:	f383 8811 	msr	BASEPRI, r3
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f3bf 8f4f 	dsb	sy
 8013926:	61fb      	str	r3, [r7, #28]
}
 8013928:	bf00      	nop
 801392a:	bf00      	nop
 801392c:	e7fd      	b.n	801392a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801392e:	f001 f83f 	bl	80149b0 <xTaskGetSchedulerState>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <xQueueReceive+0x72>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <xQueueReceive+0x76>
 801393e:	2301      	movs	r3, #1
 8013940:	e000      	b.n	8013944 <xQueueReceive+0x78>
 8013942:	2300      	movs	r3, #0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d10b      	bne.n	8013960 <xQueueReceive+0x94>
	__asm volatile
 8013948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801394c:	f383 8811 	msr	BASEPRI, r3
 8013950:	f3bf 8f6f 	isb	sy
 8013954:	f3bf 8f4f 	dsb	sy
 8013958:	61bb      	str	r3, [r7, #24]
}
 801395a:	bf00      	nop
 801395c:	bf00      	nop
 801395e:	e7fd      	b.n	801395c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013960:	f001 fd92 	bl	8015488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013968:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01f      	beq.n	80139b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013970:	68b9      	ldr	r1, [r7, #8]
 8013972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013974:	f000 f8f6 	bl	8013b64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397a:	1e5a      	subs	r2, r3, #1
 801397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801397e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00f      	beq.n	80139a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398a:	3310      	adds	r3, #16
 801398c:	4618      	mov	r0, r3
 801398e:	f000 fe49 	bl	8014624 <xTaskRemoveFromEventList>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d007      	beq.n	80139a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013998:	4b3c      	ldr	r3, [pc, #240]	@ (8013a8c <xQueueReceive+0x1c0>)
 801399a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80139a8:	f001 fda0 	bl	80154ec <vPortExitCritical>
				return pdPASS;
 80139ac:	2301      	movs	r3, #1
 80139ae:	e069      	b.n	8013a84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d103      	bne.n	80139be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139b6:	f001 fd99 	bl	80154ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80139ba:	2300      	movs	r3, #0
 80139bc:	e062      	b.n	8013a84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d106      	bne.n	80139d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139c4:	f107 0310 	add.w	r3, r7, #16
 80139c8:	4618      	mov	r0, r3
 80139ca:	f000 fe8f 	bl	80146ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139ce:	2301      	movs	r3, #1
 80139d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139d2:	f001 fd8b 	bl	80154ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139d6:	f000 fbf7 	bl	80141c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139da:	f001 fd55 	bl	8015488 <vPortEnterCritical>
 80139de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139e4:	b25b      	sxtb	r3, r3
 80139e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ea:	d103      	bne.n	80139f4 <xQueueReceive+0x128>
 80139ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ee:	2200      	movs	r2, #0
 80139f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139fa:	b25b      	sxtb	r3, r3
 80139fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a00:	d103      	bne.n	8013a0a <xQueueReceive+0x13e>
 8013a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a0a:	f001 fd6f 	bl	80154ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a0e:	1d3a      	adds	r2, r7, #4
 8013a10:	f107 0310 	add.w	r3, r7, #16
 8013a14:	4611      	mov	r1, r2
 8013a16:	4618      	mov	r0, r3
 8013a18:	f000 fe7e 	bl	8014718 <xTaskCheckForTimeOut>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d123      	bne.n	8013a6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a24:	f000 f916 	bl	8013c54 <prvIsQueueEmpty>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d017      	beq.n	8013a5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a30:	3324      	adds	r3, #36	@ 0x24
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	4611      	mov	r1, r2
 8013a36:	4618      	mov	r0, r3
 8013a38:	f000 fda2 	bl	8014580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a3e:	f000 f8b7 	bl	8013bb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a42:	f000 fbcf 	bl	80141e4 <xTaskResumeAll>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d189      	bne.n	8013960 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013a8c <xQueueReceive+0x1c0>)
 8013a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a52:	601a      	str	r2, [r3, #0]
 8013a54:	f3bf 8f4f 	dsb	sy
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	e780      	b.n	8013960 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a60:	f000 f8a6 	bl	8013bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a64:	f000 fbbe 	bl	80141e4 <xTaskResumeAll>
 8013a68:	e77a      	b.n	8013960 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a6c:	f000 f8a0 	bl	8013bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a70:	f000 fbb8 	bl	80141e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a76:	f000 f8ed 	bl	8013c54 <prvIsQueueEmpty>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f43f af6f 	beq.w	8013960 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3730      	adds	r7, #48	@ 0x30
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	e000ed04 	.word	0xe000ed04

08013a90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d10d      	bne.n	8013aca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d14d      	bne.n	8013b52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	689b      	ldr	r3, [r3, #8]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f000 ff96 	bl	80149ec <xTaskPriorityDisinherit>
 8013ac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	609a      	str	r2, [r3, #8]
 8013ac8:	e043      	b.n	8013b52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d119      	bne.n	8013b04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6858      	ldr	r0, [r3, #4]
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ad8:	461a      	mov	r2, r3
 8013ada:	68b9      	ldr	r1, [r7, #8]
 8013adc:	f004 facf 	bl	801807e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	685a      	ldr	r2, [r3, #4]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ae8:	441a      	add	r2, r3
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	685a      	ldr	r2, [r3, #4]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	689b      	ldr	r3, [r3, #8]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d32b      	bcc.n	8013b52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	605a      	str	r2, [r3, #4]
 8013b02:	e026      	b.n	8013b52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	68d8      	ldr	r0, [r3, #12]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	68b9      	ldr	r1, [r7, #8]
 8013b10:	f004 fab5 	bl	801807e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	68da      	ldr	r2, [r3, #12]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b1c:	425b      	negs	r3, r3
 8013b1e:	441a      	add	r2, r3
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	68da      	ldr	r2, [r3, #12]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d207      	bcs.n	8013b40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	689a      	ldr	r2, [r3, #8]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b38:	425b      	negs	r3, r3
 8013b3a:	441a      	add	r2, r3
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d105      	bne.n	8013b52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	3b01      	subs	r3, #1
 8013b50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	1c5a      	adds	r2, r3, #1
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013b5a:	697b      	ldr	r3, [r7, #20]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3718      	adds	r7, #24
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d018      	beq.n	8013ba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	68da      	ldr	r2, [r3, #12]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b7e:	441a      	add	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	68da      	ldr	r2, [r3, #12]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	689b      	ldr	r3, [r3, #8]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d303      	bcc.n	8013b98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	68d9      	ldr	r1, [r3, #12]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	6838      	ldr	r0, [r7, #0]
 8013ba4:	f004 fa6b 	bl	801807e <memcpy>
	}
}
 8013ba8:	bf00      	nop
 8013baa:	3708      	adds	r7, #8
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013bb8:	f001 fc66 	bl	8015488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013bc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bc4:	e011      	b.n	8013bea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d012      	beq.n	8013bf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	3324      	adds	r3, #36	@ 0x24
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f000 fd26 	bl	8014624 <xTaskRemoveFromEventList>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d001      	beq.n	8013be2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013bde:	f000 fdff 	bl	80147e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013be2:	7bfb      	ldrb	r3, [r7, #15]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	dce9      	bgt.n	8013bc6 <prvUnlockQueue+0x16>
 8013bf2:	e000      	b.n	8013bf6 <prvUnlockQueue+0x46>
					break;
 8013bf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	22ff      	movs	r2, #255	@ 0xff
 8013bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013bfe:	f001 fc75 	bl	80154ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c02:	f001 fc41 	bl	8015488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c0e:	e011      	b.n	8013c34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	691b      	ldr	r3, [r3, #16]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d012      	beq.n	8013c3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	3310      	adds	r3, #16
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f000 fd01 	bl	8014624 <xTaskRemoveFromEventList>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d001      	beq.n	8013c2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c28:	f000 fdda 	bl	80147e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c2c:	7bbb      	ldrb	r3, [r7, #14]
 8013c2e:	3b01      	subs	r3, #1
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	dce9      	bgt.n	8013c10 <prvUnlockQueue+0x60>
 8013c3c:	e000      	b.n	8013c40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013c3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	22ff      	movs	r2, #255	@ 0xff
 8013c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013c48:	f001 fc50 	bl	80154ec <vPortExitCritical>
}
 8013c4c:	bf00      	nop
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c5c:	f001 fc14 	bl	8015488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d102      	bne.n	8013c6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	60fb      	str	r3, [r7, #12]
 8013c6c:	e001      	b.n	8013c72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c72:	f001 fc3b 	bl	80154ec <vPortExitCritical>

	return xReturn;
 8013c76:	68fb      	ldr	r3, [r7, #12]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c88:	f001 fbfe 	bl	8015488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d102      	bne.n	8013c9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013c98:	2301      	movs	r3, #1
 8013c9a:	60fb      	str	r3, [r7, #12]
 8013c9c:	e001      	b.n	8013ca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ca2:	f001 fc23 	bl	80154ec <vPortExitCritical>

	return xReturn;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3710      	adds	r7, #16
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013cba:	2300      	movs	r3, #0
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	e014      	b.n	8013cea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8013d00 <vQueueAddToRegistry+0x50>)
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d10b      	bne.n	8013ce4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013ccc:	490c      	ldr	r1, [pc, #48]	@ (8013d00 <vQueueAddToRegistry+0x50>)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	683a      	ldr	r2, [r7, #0]
 8013cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8013d00 <vQueueAddToRegistry+0x50>)
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	4413      	add	r3, r2
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013ce2:	e006      	b.n	8013cf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b07      	cmp	r3, #7
 8013cee:	d9e7      	bls.n	8013cc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013cf0:	bf00      	nop
 8013cf2:	bf00      	nop
 8013cf4:	3714      	adds	r7, #20
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	240716c4 	.word	0x240716c4

08013d04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013d14:	f001 fbb8 	bl	8015488 <vPortEnterCritical>
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d1e:	b25b      	sxtb	r3, r3
 8013d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d24:	d103      	bne.n	8013d2e <vQueueWaitForMessageRestricted+0x2a>
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d34:	b25b      	sxtb	r3, r3
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3a:	d103      	bne.n	8013d44 <vQueueWaitForMessageRestricted+0x40>
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d44:	f001 fbd2 	bl	80154ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d106      	bne.n	8013d5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	3324      	adds	r3, #36	@ 0x24
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	68b9      	ldr	r1, [r7, #8]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f000 fc37 	bl	80145cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013d5e:	6978      	ldr	r0, [r7, #20]
 8013d60:	f7ff ff26 	bl	8013bb0 <prvUnlockQueue>
	}
 8013d64:	bf00      	nop
 8013d66:	3718      	adds	r7, #24
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b08e      	sub	sp, #56	@ 0x38
 8013d70:	af04      	add	r7, sp, #16
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d10b      	bne.n	8013d98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	623b      	str	r3, [r7, #32]
}
 8013d92:	bf00      	nop
 8013d94:	bf00      	nop
 8013d96:	e7fd      	b.n	8013d94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d10b      	bne.n	8013db6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013da2:	f383 8811 	msr	BASEPRI, r3
 8013da6:	f3bf 8f6f 	isb	sy
 8013daa:	f3bf 8f4f 	dsb	sy
 8013dae:	61fb      	str	r3, [r7, #28]
}
 8013db0:	bf00      	nop
 8013db2:	bf00      	nop
 8013db4:	e7fd      	b.n	8013db2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013db6:	23a8      	movs	r3, #168	@ 0xa8
 8013db8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	2ba8      	cmp	r3, #168	@ 0xa8
 8013dbe:	d00b      	beq.n	8013dd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	61bb      	str	r3, [r7, #24]
}
 8013dd2:	bf00      	nop
 8013dd4:	bf00      	nop
 8013dd6:	e7fd      	b.n	8013dd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013dd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d01e      	beq.n	8013e1e <xTaskCreateStatic+0xb2>
 8013de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d01b      	beq.n	8013e1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013dee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df2:	2202      	movs	r2, #2
 8013df4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013df8:	2300      	movs	r3, #0
 8013dfa:	9303      	str	r3, [sp, #12]
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfe:	9302      	str	r3, [sp, #8]
 8013e00:	f107 0314 	add.w	r3, r7, #20
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e08:	9300      	str	r3, [sp, #0]
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	68b9      	ldr	r1, [r7, #8]
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f000 f851 	bl	8013eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e18:	f000 f8f6 	bl	8014008 <prvAddNewTaskToReadyList>
 8013e1c:	e001      	b.n	8013e22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e22:	697b      	ldr	r3, [r7, #20]
	}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3728      	adds	r7, #40	@ 0x28
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b08c      	sub	sp, #48	@ 0x30
 8013e30:	af04      	add	r7, sp, #16
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	603b      	str	r3, [r7, #0]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013e3c:	88fb      	ldrh	r3, [r7, #6]
 8013e3e:	009b      	lsls	r3, r3, #2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f001 fc43 	bl	80156cc <pvPortMalloc>
 8013e46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00e      	beq.n	8013e6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013e4e:	20a8      	movs	r0, #168	@ 0xa8
 8013e50:	f001 fc3c 	bl	80156cc <pvPortMalloc>
 8013e54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d003      	beq.n	8013e64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	697a      	ldr	r2, [r7, #20]
 8013e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8013e62:	e005      	b.n	8013e70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013e64:	6978      	ldr	r0, [r7, #20]
 8013e66:	f001 fcff 	bl	8015868 <vPortFree>
 8013e6a:	e001      	b.n	8013e70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d017      	beq.n	8013ea6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013e7e:	88fa      	ldrh	r2, [r7, #6]
 8013e80:	2300      	movs	r3, #0
 8013e82:	9303      	str	r3, [sp, #12]
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	9302      	str	r3, [sp, #8]
 8013e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8a:	9301      	str	r3, [sp, #4]
 8013e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e8e:	9300      	str	r3, [sp, #0]
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	68b9      	ldr	r1, [r7, #8]
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f000 f80f 	bl	8013eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e9a:	69f8      	ldr	r0, [r7, #28]
 8013e9c:	f000 f8b4 	bl	8014008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	61bb      	str	r3, [r7, #24]
 8013ea4:	e002      	b.n	8013eac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013eac:	69bb      	ldr	r3, [r7, #24]
	}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3720      	adds	r7, #32
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
	...

08013eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b088      	sub	sp, #32
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	461a      	mov	r2, r3
 8013ed0:	21a5      	movs	r1, #165	@ 0xa5
 8013ed2:	f003 ff69 	bl	8017da8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013eda:	6879      	ldr	r1, [r7, #4]
 8013edc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013ee0:	440b      	add	r3, r1
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4413      	add	r3, r2
 8013ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	f023 0307 	bic.w	r3, r3, #7
 8013eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	f003 0307 	and.w	r3, r3, #7
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00b      	beq.n	8013f12 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	617b      	str	r3, [r7, #20]
}
 8013f0c:	bf00      	nop
 8013f0e:	bf00      	nop
 8013f10:	e7fd      	b.n	8013f0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d01f      	beq.n	8013f58 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f18:	2300      	movs	r3, #0
 8013f1a:	61fb      	str	r3, [r7, #28]
 8013f1c:	e012      	b.n	8013f44 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	4413      	add	r3, r2
 8013f24:	7819      	ldrb	r1, [r3, #0]
 8013f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f28:	69fb      	ldr	r3, [r7, #28]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	3334      	adds	r3, #52	@ 0x34
 8013f2e:	460a      	mov	r2, r1
 8013f30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013f32:	68ba      	ldr	r2, [r7, #8]
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	4413      	add	r3, r2
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d006      	beq.n	8013f4c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	3301      	adds	r3, #1
 8013f42:	61fb      	str	r3, [r7, #28]
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	2b0f      	cmp	r3, #15
 8013f48:	d9e9      	bls.n	8013f1e <prvInitialiseNewTask+0x66>
 8013f4a:	e000      	b.n	8013f4e <prvInitialiseNewTask+0x96>
			{
				break;
 8013f4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f50:	2200      	movs	r2, #0
 8013f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013f56:	e003      	b.n	8013f60 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f62:	2b37      	cmp	r3, #55	@ 0x37
 8013f64:	d901      	bls.n	8013f6a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f66:	2337      	movs	r3, #55	@ 0x37
 8013f68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f74:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f78:	2200      	movs	r2, #0
 8013f7a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f7e:	3304      	adds	r3, #4
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7ff f965 	bl	8013250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f88:	3318      	adds	r3, #24
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff f960 	bl	8013250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fa4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa8:	2200      	movs	r2, #0
 8013faa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb8:	3354      	adds	r3, #84	@ 0x54
 8013fba:	224c      	movs	r2, #76	@ 0x4c
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f003 fef2 	bl	8017da8 <memset>
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8013ffc <prvInitialiseNewTask+0x144>)
 8013fc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8013fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8014000 <prvInitialiseNewTask+0x148>)
 8013fce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8014004 <prvInitialiseNewTask+0x14c>)
 8013fd4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013fd6:	683a      	ldr	r2, [r7, #0]
 8013fd8:	68f9      	ldr	r1, [r7, #12]
 8013fda:	69b8      	ldr	r0, [r7, #24]
 8013fdc:	f001 f924 	bl	8015228 <pxPortInitialiseStack>
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d002      	beq.n	8013ff2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ff2:	bf00      	nop
 8013ff4:	3720      	adds	r7, #32
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	24077540 	.word	0x24077540
 8014000:	240775a8 	.word	0x240775a8
 8014004:	24077610 	.word	0x24077610

08014008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b082      	sub	sp, #8
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014010:	f001 fa3a 	bl	8015488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014014:	4b2d      	ldr	r3, [pc, #180]	@ (80140cc <prvAddNewTaskToReadyList+0xc4>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	4a2c      	ldr	r2, [pc, #176]	@ (80140cc <prvAddNewTaskToReadyList+0xc4>)
 801401c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801401e:	4b2c      	ldr	r3, [pc, #176]	@ (80140d0 <prvAddNewTaskToReadyList+0xc8>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d109      	bne.n	801403a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014026:	4a2a      	ldr	r2, [pc, #168]	@ (80140d0 <prvAddNewTaskToReadyList+0xc8>)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801402c:	4b27      	ldr	r3, [pc, #156]	@ (80140cc <prvAddNewTaskToReadyList+0xc4>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	2b01      	cmp	r3, #1
 8014032:	d110      	bne.n	8014056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014034:	f000 fbf8 	bl	8014828 <prvInitialiseTaskLists>
 8014038:	e00d      	b.n	8014056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801403a:	4b26      	ldr	r3, [pc, #152]	@ (80140d4 <prvAddNewTaskToReadyList+0xcc>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d109      	bne.n	8014056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014042:	4b23      	ldr	r3, [pc, #140]	@ (80140d0 <prvAddNewTaskToReadyList+0xc8>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801404c:	429a      	cmp	r2, r3
 801404e:	d802      	bhi.n	8014056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014050:	4a1f      	ldr	r2, [pc, #124]	@ (80140d0 <prvAddNewTaskToReadyList+0xc8>)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014056:	4b20      	ldr	r3, [pc, #128]	@ (80140d8 <prvAddNewTaskToReadyList+0xd0>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3301      	adds	r3, #1
 801405c:	4a1e      	ldr	r2, [pc, #120]	@ (80140d8 <prvAddNewTaskToReadyList+0xd0>)
 801405e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014060:	4b1d      	ldr	r3, [pc, #116]	@ (80140d8 <prvAddNewTaskToReadyList+0xd0>)
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801406c:	4b1b      	ldr	r3, [pc, #108]	@ (80140dc <prvAddNewTaskToReadyList+0xd4>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	429a      	cmp	r2, r3
 8014072:	d903      	bls.n	801407c <prvAddNewTaskToReadyList+0x74>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014078:	4a18      	ldr	r2, [pc, #96]	@ (80140dc <prvAddNewTaskToReadyList+0xd4>)
 801407a:	6013      	str	r3, [r2, #0]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014080:	4613      	mov	r3, r2
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4413      	add	r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	4a15      	ldr	r2, [pc, #84]	@ (80140e0 <prvAddNewTaskToReadyList+0xd8>)
 801408a:	441a      	add	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	3304      	adds	r3, #4
 8014090:	4619      	mov	r1, r3
 8014092:	4610      	mov	r0, r2
 8014094:	f7ff f8e9 	bl	801326a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014098:	f001 fa28 	bl	80154ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801409c:	4b0d      	ldr	r3, [pc, #52]	@ (80140d4 <prvAddNewTaskToReadyList+0xcc>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00e      	beq.n	80140c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80140a4:	4b0a      	ldr	r3, [pc, #40]	@ (80140d0 <prvAddNewTaskToReadyList+0xc8>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d207      	bcs.n	80140c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80140b2:	4b0c      	ldr	r3, [pc, #48]	@ (80140e4 <prvAddNewTaskToReadyList+0xdc>)
 80140b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	f3bf 8f4f 	dsb	sy
 80140be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140c2:	bf00      	nop
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	24071bd8 	.word	0x24071bd8
 80140d0:	24071704 	.word	0x24071704
 80140d4:	24071be4 	.word	0x24071be4
 80140d8:	24071bf4 	.word	0x24071bf4
 80140dc:	24071be0 	.word	0x24071be0
 80140e0:	24071708 	.word	0x24071708
 80140e4:	e000ed04 	.word	0xe000ed04

080140e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b08a      	sub	sp, #40	@ 0x28
 80140ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80140ee:	2300      	movs	r3, #0
 80140f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80140f2:	2300      	movs	r3, #0
 80140f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80140f6:	463a      	mov	r2, r7
 80140f8:	1d39      	adds	r1, r7, #4
 80140fa:	f107 0308 	add.w	r3, r7, #8
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff f852 	bl	80131a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	9202      	str	r2, [sp, #8]
 801410c:	9301      	str	r3, [sp, #4]
 801410e:	2300      	movs	r3, #0
 8014110:	9300      	str	r3, [sp, #0]
 8014112:	2300      	movs	r3, #0
 8014114:	460a      	mov	r2, r1
 8014116:	4924      	ldr	r1, [pc, #144]	@ (80141a8 <vTaskStartScheduler+0xc0>)
 8014118:	4824      	ldr	r0, [pc, #144]	@ (80141ac <vTaskStartScheduler+0xc4>)
 801411a:	f7ff fe27 	bl	8013d6c <xTaskCreateStatic>
 801411e:	4603      	mov	r3, r0
 8014120:	4a23      	ldr	r2, [pc, #140]	@ (80141b0 <vTaskStartScheduler+0xc8>)
 8014122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014124:	4b22      	ldr	r3, [pc, #136]	@ (80141b0 <vTaskStartScheduler+0xc8>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d002      	beq.n	8014132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801412c:	2301      	movs	r3, #1
 801412e:	617b      	str	r3, [r7, #20]
 8014130:	e001      	b.n	8014136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014132:	2300      	movs	r3, #0
 8014134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b01      	cmp	r3, #1
 801413a:	d102      	bne.n	8014142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801413c:	f000 fd1a 	bl	8014b74 <xTimerCreateTimerTask>
 8014140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2b01      	cmp	r3, #1
 8014146:	d11b      	bne.n	8014180 <vTaskStartScheduler+0x98>
	__asm volatile
 8014148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801414c:	f383 8811 	msr	BASEPRI, r3
 8014150:	f3bf 8f6f 	isb	sy
 8014154:	f3bf 8f4f 	dsb	sy
 8014158:	613b      	str	r3, [r7, #16]
}
 801415a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801415c:	4b15      	ldr	r3, [pc, #84]	@ (80141b4 <vTaskStartScheduler+0xcc>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	3354      	adds	r3, #84	@ 0x54
 8014162:	4a15      	ldr	r2, [pc, #84]	@ (80141b8 <vTaskStartScheduler+0xd0>)
 8014164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014166:	4b15      	ldr	r3, [pc, #84]	@ (80141bc <vTaskStartScheduler+0xd4>)
 8014168:	f04f 32ff 	mov.w	r2, #4294967295
 801416c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801416e:	4b14      	ldr	r3, [pc, #80]	@ (80141c0 <vTaskStartScheduler+0xd8>)
 8014170:	2201      	movs	r2, #1
 8014172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014174:	4b13      	ldr	r3, [pc, #76]	@ (80141c4 <vTaskStartScheduler+0xdc>)
 8014176:	2200      	movs	r2, #0
 8014178:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801417a:	f001 f8e1 	bl	8015340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801417e:	e00f      	b.n	80141a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014186:	d10b      	bne.n	80141a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8014188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801418c:	f383 8811 	msr	BASEPRI, r3
 8014190:	f3bf 8f6f 	isb	sy
 8014194:	f3bf 8f4f 	dsb	sy
 8014198:	60fb      	str	r3, [r7, #12]
}
 801419a:	bf00      	nop
 801419c:	bf00      	nop
 801419e:	e7fd      	b.n	801419c <vTaskStartScheduler+0xb4>
}
 80141a0:	bf00      	nop
 80141a2:	3718      	adds	r7, #24
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}
 80141a8:	0801a52c 	.word	0x0801a52c
 80141ac:	080147f9 	.word	0x080147f9
 80141b0:	24071bfc 	.word	0x24071bfc
 80141b4:	24071704 	.word	0x24071704
 80141b8:	24000280 	.word	0x24000280
 80141bc:	24071bf8 	.word	0x24071bf8
 80141c0:	24071be4 	.word	0x24071be4
 80141c4:	24071bdc 	.word	0x24071bdc

080141c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80141c8:	b480      	push	{r7}
 80141ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80141cc:	4b04      	ldr	r3, [pc, #16]	@ (80141e0 <vTaskSuspendAll+0x18>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	3301      	adds	r3, #1
 80141d2:	4a03      	ldr	r2, [pc, #12]	@ (80141e0 <vTaskSuspendAll+0x18>)
 80141d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80141d6:	bf00      	nop
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr
 80141e0:	24071c00 	.word	0x24071c00

080141e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80141ea:	2300      	movs	r3, #0
 80141ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80141ee:	2300      	movs	r3, #0
 80141f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80141f2:	4b42      	ldr	r3, [pc, #264]	@ (80142fc <xTaskResumeAll+0x118>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10b      	bne.n	8014212 <xTaskResumeAll+0x2e>
	__asm volatile
 80141fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	603b      	str	r3, [r7, #0]
}
 801420c:	bf00      	nop
 801420e:	bf00      	nop
 8014210:	e7fd      	b.n	801420e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014212:	f001 f939 	bl	8015488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014216:	4b39      	ldr	r3, [pc, #228]	@ (80142fc <xTaskResumeAll+0x118>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	3b01      	subs	r3, #1
 801421c:	4a37      	ldr	r2, [pc, #220]	@ (80142fc <xTaskResumeAll+0x118>)
 801421e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014220:	4b36      	ldr	r3, [pc, #216]	@ (80142fc <xTaskResumeAll+0x118>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d162      	bne.n	80142ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014228:	4b35      	ldr	r3, [pc, #212]	@ (8014300 <xTaskResumeAll+0x11c>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d05e      	beq.n	80142ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014230:	e02f      	b.n	8014292 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014232:	4b34      	ldr	r3, [pc, #208]	@ (8014304 <xTaskResumeAll+0x120>)
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	68db      	ldr	r3, [r3, #12]
 8014238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	3318      	adds	r3, #24
 801423e:	4618      	mov	r0, r3
 8014240:	f7ff f870 	bl	8013324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	3304      	adds	r3, #4
 8014248:	4618      	mov	r0, r3
 801424a:	f7ff f86b 	bl	8013324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014252:	4b2d      	ldr	r3, [pc, #180]	@ (8014308 <xTaskResumeAll+0x124>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	429a      	cmp	r2, r3
 8014258:	d903      	bls.n	8014262 <xTaskResumeAll+0x7e>
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801425e:	4a2a      	ldr	r2, [pc, #168]	@ (8014308 <xTaskResumeAll+0x124>)
 8014260:	6013      	str	r3, [r2, #0]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014266:	4613      	mov	r3, r2
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	4413      	add	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	4a27      	ldr	r2, [pc, #156]	@ (801430c <xTaskResumeAll+0x128>)
 8014270:	441a      	add	r2, r3
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	3304      	adds	r3, #4
 8014276:	4619      	mov	r1, r3
 8014278:	4610      	mov	r0, r2
 801427a:	f7fe fff6 	bl	801326a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014282:	4b23      	ldr	r3, [pc, #140]	@ (8014310 <xTaskResumeAll+0x12c>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014288:	429a      	cmp	r2, r3
 801428a:	d302      	bcc.n	8014292 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801428c:	4b21      	ldr	r3, [pc, #132]	@ (8014314 <xTaskResumeAll+0x130>)
 801428e:	2201      	movs	r2, #1
 8014290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014292:	4b1c      	ldr	r3, [pc, #112]	@ (8014304 <xTaskResumeAll+0x120>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1cb      	bne.n	8014232 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d001      	beq.n	80142a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80142a0:	f000 fb66 	bl	8014970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80142a4:	4b1c      	ldr	r3, [pc, #112]	@ (8014318 <xTaskResumeAll+0x134>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d010      	beq.n	80142d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80142b0:	f000 f846 	bl	8014340 <xTaskIncrementTick>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d002      	beq.n	80142c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80142ba:	4b16      	ldr	r3, [pc, #88]	@ (8014314 <xTaskResumeAll+0x130>)
 80142bc:	2201      	movs	r2, #1
 80142be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	3b01      	subs	r3, #1
 80142c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1f1      	bne.n	80142b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80142cc:	4b12      	ldr	r3, [pc, #72]	@ (8014318 <xTaskResumeAll+0x134>)
 80142ce:	2200      	movs	r2, #0
 80142d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80142d2:	4b10      	ldr	r3, [pc, #64]	@ (8014314 <xTaskResumeAll+0x130>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d009      	beq.n	80142ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80142da:	2301      	movs	r3, #1
 80142dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80142de:	4b0f      	ldr	r3, [pc, #60]	@ (801431c <xTaskResumeAll+0x138>)
 80142e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142e4:	601a      	str	r2, [r3, #0]
 80142e6:	f3bf 8f4f 	dsb	sy
 80142ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80142ee:	f001 f8fd 	bl	80154ec <vPortExitCritical>

	return xAlreadyYielded;
 80142f2:	68bb      	ldr	r3, [r7, #8]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	24071c00 	.word	0x24071c00
 8014300:	24071bd8 	.word	0x24071bd8
 8014304:	24071b98 	.word	0x24071b98
 8014308:	24071be0 	.word	0x24071be0
 801430c:	24071708 	.word	0x24071708
 8014310:	24071704 	.word	0x24071704
 8014314:	24071bec 	.word	0x24071bec
 8014318:	24071be8 	.word	0x24071be8
 801431c:	e000ed04 	.word	0xe000ed04

08014320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014326:	4b05      	ldr	r3, [pc, #20]	@ (801433c <xTaskGetTickCount+0x1c>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801432c:	687b      	ldr	r3, [r7, #4]
}
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop
 801433c:	24071bdc 	.word	0x24071bdc

08014340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b086      	sub	sp, #24
 8014344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014346:	2300      	movs	r3, #0
 8014348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801434a:	4b4f      	ldr	r3, [pc, #316]	@ (8014488 <xTaskIncrementTick+0x148>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	f040 8090 	bne.w	8014474 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014354:	4b4d      	ldr	r3, [pc, #308]	@ (801448c <xTaskIncrementTick+0x14c>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	3301      	adds	r3, #1
 801435a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801435c:	4a4b      	ldr	r2, [pc, #300]	@ (801448c <xTaskIncrementTick+0x14c>)
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d121      	bne.n	80143ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014368:	4b49      	ldr	r3, [pc, #292]	@ (8014490 <xTaskIncrementTick+0x150>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d00b      	beq.n	801438a <xTaskIncrementTick+0x4a>
	__asm volatile
 8014372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014376:	f383 8811 	msr	BASEPRI, r3
 801437a:	f3bf 8f6f 	isb	sy
 801437e:	f3bf 8f4f 	dsb	sy
 8014382:	603b      	str	r3, [r7, #0]
}
 8014384:	bf00      	nop
 8014386:	bf00      	nop
 8014388:	e7fd      	b.n	8014386 <xTaskIncrementTick+0x46>
 801438a:	4b41      	ldr	r3, [pc, #260]	@ (8014490 <xTaskIncrementTick+0x150>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]
 8014390:	4b40      	ldr	r3, [pc, #256]	@ (8014494 <xTaskIncrementTick+0x154>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a3e      	ldr	r2, [pc, #248]	@ (8014490 <xTaskIncrementTick+0x150>)
 8014396:	6013      	str	r3, [r2, #0]
 8014398:	4a3e      	ldr	r2, [pc, #248]	@ (8014494 <xTaskIncrementTick+0x154>)
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6013      	str	r3, [r2, #0]
 801439e:	4b3e      	ldr	r3, [pc, #248]	@ (8014498 <xTaskIncrementTick+0x158>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	3301      	adds	r3, #1
 80143a4:	4a3c      	ldr	r2, [pc, #240]	@ (8014498 <xTaskIncrementTick+0x158>)
 80143a6:	6013      	str	r3, [r2, #0]
 80143a8:	f000 fae2 	bl	8014970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80143ac:	4b3b      	ldr	r3, [pc, #236]	@ (801449c <xTaskIncrementTick+0x15c>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	693a      	ldr	r2, [r7, #16]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d349      	bcc.n	801444a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143b6:	4b36      	ldr	r3, [pc, #216]	@ (8014490 <xTaskIncrementTick+0x150>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d104      	bne.n	80143ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143c0:	4b36      	ldr	r3, [pc, #216]	@ (801449c <xTaskIncrementTick+0x15c>)
 80143c2:	f04f 32ff 	mov.w	r2, #4294967295
 80143c6:	601a      	str	r2, [r3, #0]
					break;
 80143c8:	e03f      	b.n	801444a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143ca:	4b31      	ldr	r3, [pc, #196]	@ (8014490 <xTaskIncrementTick+0x150>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80143da:	693a      	ldr	r2, [r7, #16]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d203      	bcs.n	80143ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80143e2:	4a2e      	ldr	r2, [pc, #184]	@ (801449c <xTaskIncrementTick+0x15c>)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80143e8:	e02f      	b.n	801444a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	3304      	adds	r3, #4
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fe ff98 	bl	8013324 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d004      	beq.n	8014406 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	3318      	adds	r3, #24
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe ff8f 	bl	8013324 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801440a:	4b25      	ldr	r3, [pc, #148]	@ (80144a0 <xTaskIncrementTick+0x160>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	429a      	cmp	r2, r3
 8014410:	d903      	bls.n	801441a <xTaskIncrementTick+0xda>
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014416:	4a22      	ldr	r2, [pc, #136]	@ (80144a0 <xTaskIncrementTick+0x160>)
 8014418:	6013      	str	r3, [r2, #0]
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801441e:	4613      	mov	r3, r2
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	4413      	add	r3, r2
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	4a1f      	ldr	r2, [pc, #124]	@ (80144a4 <xTaskIncrementTick+0x164>)
 8014428:	441a      	add	r2, r3
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	3304      	adds	r3, #4
 801442e:	4619      	mov	r1, r3
 8014430:	4610      	mov	r0, r2
 8014432:	f7fe ff1a 	bl	801326a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801443a:	4b1b      	ldr	r3, [pc, #108]	@ (80144a8 <xTaskIncrementTick+0x168>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014440:	429a      	cmp	r2, r3
 8014442:	d3b8      	bcc.n	80143b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014444:	2301      	movs	r3, #1
 8014446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014448:	e7b5      	b.n	80143b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801444a:	4b17      	ldr	r3, [pc, #92]	@ (80144a8 <xTaskIncrementTick+0x168>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014450:	4914      	ldr	r1, [pc, #80]	@ (80144a4 <xTaskIncrementTick+0x164>)
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	440b      	add	r3, r1
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d901      	bls.n	8014466 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8014462:	2301      	movs	r3, #1
 8014464:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014466:	4b11      	ldr	r3, [pc, #68]	@ (80144ac <xTaskIncrementTick+0x16c>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d007      	beq.n	801447e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801446e:	2301      	movs	r3, #1
 8014470:	617b      	str	r3, [r7, #20]
 8014472:	e004      	b.n	801447e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014474:	4b0e      	ldr	r3, [pc, #56]	@ (80144b0 <xTaskIncrementTick+0x170>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	3301      	adds	r3, #1
 801447a:	4a0d      	ldr	r2, [pc, #52]	@ (80144b0 <xTaskIncrementTick+0x170>)
 801447c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801447e:	697b      	ldr	r3, [r7, #20]
}
 8014480:	4618      	mov	r0, r3
 8014482:	3718      	adds	r7, #24
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	24071c00 	.word	0x24071c00
 801448c:	24071bdc 	.word	0x24071bdc
 8014490:	24071b90 	.word	0x24071b90
 8014494:	24071b94 	.word	0x24071b94
 8014498:	24071bf0 	.word	0x24071bf0
 801449c:	24071bf8 	.word	0x24071bf8
 80144a0:	24071be0 	.word	0x24071be0
 80144a4:	24071708 	.word	0x24071708
 80144a8:	24071704 	.word	0x24071704
 80144ac:	24071bec 	.word	0x24071bec
 80144b0:	24071be8 	.word	0x24071be8

080144b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80144ba:	4b2b      	ldr	r3, [pc, #172]	@ (8014568 <vTaskSwitchContext+0xb4>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d003      	beq.n	80144ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80144c2:	4b2a      	ldr	r3, [pc, #168]	@ (801456c <vTaskSwitchContext+0xb8>)
 80144c4:	2201      	movs	r2, #1
 80144c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80144c8:	e047      	b.n	801455a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80144ca:	4b28      	ldr	r3, [pc, #160]	@ (801456c <vTaskSwitchContext+0xb8>)
 80144cc:	2200      	movs	r2, #0
 80144ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144d0:	4b27      	ldr	r3, [pc, #156]	@ (8014570 <vTaskSwitchContext+0xbc>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	60fb      	str	r3, [r7, #12]
 80144d6:	e011      	b.n	80144fc <vTaskSwitchContext+0x48>
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10b      	bne.n	80144f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80144de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	607b      	str	r3, [r7, #4]
}
 80144f0:	bf00      	nop
 80144f2:	bf00      	nop
 80144f4:	e7fd      	b.n	80144f2 <vTaskSwitchContext+0x3e>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	3b01      	subs	r3, #1
 80144fa:	60fb      	str	r3, [r7, #12]
 80144fc:	491d      	ldr	r1, [pc, #116]	@ (8014574 <vTaskSwitchContext+0xc0>)
 80144fe:	68fa      	ldr	r2, [r7, #12]
 8014500:	4613      	mov	r3, r2
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	440b      	add	r3, r1
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d0e3      	beq.n	80144d8 <vTaskSwitchContext+0x24>
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	4613      	mov	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4413      	add	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4a16      	ldr	r2, [pc, #88]	@ (8014574 <vTaskSwitchContext+0xc0>)
 801451c:	4413      	add	r3, r2
 801451e:	60bb      	str	r3, [r7, #8]
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	685a      	ldr	r2, [r3, #4]
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	605a      	str	r2, [r3, #4]
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	685a      	ldr	r2, [r3, #4]
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	3308      	adds	r3, #8
 8014532:	429a      	cmp	r2, r3
 8014534:	d104      	bne.n	8014540 <vTaskSwitchContext+0x8c>
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	685a      	ldr	r2, [r3, #4]
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	605a      	str	r2, [r3, #4]
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	68db      	ldr	r3, [r3, #12]
 8014546:	4a0c      	ldr	r2, [pc, #48]	@ (8014578 <vTaskSwitchContext+0xc4>)
 8014548:	6013      	str	r3, [r2, #0]
 801454a:	4a09      	ldr	r2, [pc, #36]	@ (8014570 <vTaskSwitchContext+0xbc>)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014550:	4b09      	ldr	r3, [pc, #36]	@ (8014578 <vTaskSwitchContext+0xc4>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	3354      	adds	r3, #84	@ 0x54
 8014556:	4a09      	ldr	r2, [pc, #36]	@ (801457c <vTaskSwitchContext+0xc8>)
 8014558:	6013      	str	r3, [r2, #0]
}
 801455a:	bf00      	nop
 801455c:	3714      	adds	r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr
 8014566:	bf00      	nop
 8014568:	24071c00 	.word	0x24071c00
 801456c:	24071bec 	.word	0x24071bec
 8014570:	24071be0 	.word	0x24071be0
 8014574:	24071708 	.word	0x24071708
 8014578:	24071704 	.word	0x24071704
 801457c:	24000280 	.word	0x24000280

08014580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d10b      	bne.n	80145a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014594:	f383 8811 	msr	BASEPRI, r3
 8014598:	f3bf 8f6f 	isb	sy
 801459c:	f3bf 8f4f 	dsb	sy
 80145a0:	60fb      	str	r3, [r7, #12]
}
 80145a2:	bf00      	nop
 80145a4:	bf00      	nop
 80145a6:	e7fd      	b.n	80145a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80145a8:	4b07      	ldr	r3, [pc, #28]	@ (80145c8 <vTaskPlaceOnEventList+0x48>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	3318      	adds	r3, #24
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7fe fe7e 	bl	80132b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80145b6:	2101      	movs	r1, #1
 80145b8:	6838      	ldr	r0, [r7, #0]
 80145ba:	f000 fa87 	bl	8014acc <prvAddCurrentTaskToDelayedList>
}
 80145be:	bf00      	nop
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	24071704 	.word	0x24071704

080145cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10b      	bne.n	80145f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80145de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145e2:	f383 8811 	msr	BASEPRI, r3
 80145e6:	f3bf 8f6f 	isb	sy
 80145ea:	f3bf 8f4f 	dsb	sy
 80145ee:	617b      	str	r3, [r7, #20]
}
 80145f0:	bf00      	nop
 80145f2:	bf00      	nop
 80145f4:	e7fd      	b.n	80145f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80145f6:	4b0a      	ldr	r3, [pc, #40]	@ (8014620 <vTaskPlaceOnEventListRestricted+0x54>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	3318      	adds	r3, #24
 80145fc:	4619      	mov	r1, r3
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f7fe fe33 	bl	801326a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d002      	beq.n	8014610 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801460a:	f04f 33ff 	mov.w	r3, #4294967295
 801460e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	68b8      	ldr	r0, [r7, #8]
 8014614:	f000 fa5a 	bl	8014acc <prvAddCurrentTaskToDelayedList>
	}
 8014618:	bf00      	nop
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	24071704 	.word	0x24071704

08014624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b086      	sub	sp, #24
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d10b      	bne.n	8014652 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801463e:	f383 8811 	msr	BASEPRI, r3
 8014642:	f3bf 8f6f 	isb	sy
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	60fb      	str	r3, [r7, #12]
}
 801464c:	bf00      	nop
 801464e:	bf00      	nop
 8014650:	e7fd      	b.n	801464e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	3318      	adds	r3, #24
 8014656:	4618      	mov	r0, r3
 8014658:	f7fe fe64 	bl	8013324 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801465c:	4b1d      	ldr	r3, [pc, #116]	@ (80146d4 <xTaskRemoveFromEventList+0xb0>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d11d      	bne.n	80146a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	3304      	adds	r3, #4
 8014668:	4618      	mov	r0, r3
 801466a:	f7fe fe5b 	bl	8013324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014672:	4b19      	ldr	r3, [pc, #100]	@ (80146d8 <xTaskRemoveFromEventList+0xb4>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	429a      	cmp	r2, r3
 8014678:	d903      	bls.n	8014682 <xTaskRemoveFromEventList+0x5e>
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801467e:	4a16      	ldr	r2, [pc, #88]	@ (80146d8 <xTaskRemoveFromEventList+0xb4>)
 8014680:	6013      	str	r3, [r2, #0]
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4a13      	ldr	r2, [pc, #76]	@ (80146dc <xTaskRemoveFromEventList+0xb8>)
 8014690:	441a      	add	r2, r3
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	3304      	adds	r3, #4
 8014696:	4619      	mov	r1, r3
 8014698:	4610      	mov	r0, r2
 801469a:	f7fe fde6 	bl	801326a <vListInsertEnd>
 801469e:	e005      	b.n	80146ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	3318      	adds	r3, #24
 80146a4:	4619      	mov	r1, r3
 80146a6:	480e      	ldr	r0, [pc, #56]	@ (80146e0 <xTaskRemoveFromEventList+0xbc>)
 80146a8:	f7fe fddf 	bl	801326a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146b0:	4b0c      	ldr	r3, [pc, #48]	@ (80146e4 <xTaskRemoveFromEventList+0xc0>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d905      	bls.n	80146c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80146ba:	2301      	movs	r3, #1
 80146bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80146be:	4b0a      	ldr	r3, [pc, #40]	@ (80146e8 <xTaskRemoveFromEventList+0xc4>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	601a      	str	r2, [r3, #0]
 80146c4:	e001      	b.n	80146ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80146c6:	2300      	movs	r3, #0
 80146c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80146ca:	697b      	ldr	r3, [r7, #20]
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3718      	adds	r7, #24
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	24071c00 	.word	0x24071c00
 80146d8:	24071be0 	.word	0x24071be0
 80146dc:	24071708 	.word	0x24071708
 80146e0:	24071b98 	.word	0x24071b98
 80146e4:	24071704 	.word	0x24071704
 80146e8:	24071bec 	.word	0x24071bec

080146ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80146f4:	4b06      	ldr	r3, [pc, #24]	@ (8014710 <vTaskInternalSetTimeOutState+0x24>)
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80146fc:	4b05      	ldr	r3, [pc, #20]	@ (8014714 <vTaskInternalSetTimeOutState+0x28>)
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	605a      	str	r2, [r3, #4]
}
 8014704:	bf00      	nop
 8014706:	370c      	adds	r7, #12
 8014708:	46bd      	mov	sp, r7
 801470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470e:	4770      	bx	lr
 8014710:	24071bf0 	.word	0x24071bf0
 8014714:	24071bdc 	.word	0x24071bdc

08014718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b088      	sub	sp, #32
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10b      	bne.n	8014740 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801472c:	f383 8811 	msr	BASEPRI, r3
 8014730:	f3bf 8f6f 	isb	sy
 8014734:	f3bf 8f4f 	dsb	sy
 8014738:	613b      	str	r3, [r7, #16]
}
 801473a:	bf00      	nop
 801473c:	bf00      	nop
 801473e:	e7fd      	b.n	801473c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d10b      	bne.n	801475e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801474a:	f383 8811 	msr	BASEPRI, r3
 801474e:	f3bf 8f6f 	isb	sy
 8014752:	f3bf 8f4f 	dsb	sy
 8014756:	60fb      	str	r3, [r7, #12]
}
 8014758:	bf00      	nop
 801475a:	bf00      	nop
 801475c:	e7fd      	b.n	801475a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801475e:	f000 fe93 	bl	8015488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014762:	4b1d      	ldr	r3, [pc, #116]	@ (80147d8 <xTaskCheckForTimeOut+0xc0>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	69ba      	ldr	r2, [r7, #24]
 801476e:	1ad3      	subs	r3, r2, r3
 8014770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801477a:	d102      	bne.n	8014782 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801477c:	2300      	movs	r3, #0
 801477e:	61fb      	str	r3, [r7, #28]
 8014780:	e023      	b.n	80147ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	4b15      	ldr	r3, [pc, #84]	@ (80147dc <xTaskCheckForTimeOut+0xc4>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	429a      	cmp	r2, r3
 801478c:	d007      	beq.n	801479e <xTaskCheckForTimeOut+0x86>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	69ba      	ldr	r2, [r7, #24]
 8014794:	429a      	cmp	r2, r3
 8014796:	d302      	bcc.n	801479e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014798:	2301      	movs	r3, #1
 801479a:	61fb      	str	r3, [r7, #28]
 801479c:	e015      	b.n	80147ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	697a      	ldr	r2, [r7, #20]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d20b      	bcs.n	80147c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	1ad2      	subs	r2, r2, r3
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f7ff ff99 	bl	80146ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80147ba:	2300      	movs	r3, #0
 80147bc:	61fb      	str	r3, [r7, #28]
 80147be:	e004      	b.n	80147ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	2200      	movs	r2, #0
 80147c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80147c6:	2301      	movs	r3, #1
 80147c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80147ca:	f000 fe8f 	bl	80154ec <vPortExitCritical>

	return xReturn;
 80147ce:	69fb      	ldr	r3, [r7, #28]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3720      	adds	r7, #32
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	24071bdc 	.word	0x24071bdc
 80147dc:	24071bf0 	.word	0x24071bf0

080147e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80147e0:	b480      	push	{r7}
 80147e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80147e4:	4b03      	ldr	r3, [pc, #12]	@ (80147f4 <vTaskMissedYield+0x14>)
 80147e6:	2201      	movs	r2, #1
 80147e8:	601a      	str	r2, [r3, #0]
}
 80147ea:	bf00      	nop
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr
 80147f4:	24071bec 	.word	0x24071bec

080147f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014800:	f000 f852 	bl	80148a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014804:	4b06      	ldr	r3, [pc, #24]	@ (8014820 <prvIdleTask+0x28>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d9f9      	bls.n	8014800 <prvIdleTask+0x8>
			{
				taskYIELD();
 801480c:	4b05      	ldr	r3, [pc, #20]	@ (8014824 <prvIdleTask+0x2c>)
 801480e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014812:	601a      	str	r2, [r3, #0]
 8014814:	f3bf 8f4f 	dsb	sy
 8014818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801481c:	e7f0      	b.n	8014800 <prvIdleTask+0x8>
 801481e:	bf00      	nop
 8014820:	24071708 	.word	0x24071708
 8014824:	e000ed04 	.word	0xe000ed04

08014828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801482e:	2300      	movs	r3, #0
 8014830:	607b      	str	r3, [r7, #4]
 8014832:	e00c      	b.n	801484e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	4613      	mov	r3, r2
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	4413      	add	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4a12      	ldr	r2, [pc, #72]	@ (8014888 <prvInitialiseTaskLists+0x60>)
 8014840:	4413      	add	r3, r2
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fce4 	bl	8013210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	3301      	adds	r3, #1
 801484c:	607b      	str	r3, [r7, #4]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b37      	cmp	r3, #55	@ 0x37
 8014852:	d9ef      	bls.n	8014834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014854:	480d      	ldr	r0, [pc, #52]	@ (801488c <prvInitialiseTaskLists+0x64>)
 8014856:	f7fe fcdb 	bl	8013210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801485a:	480d      	ldr	r0, [pc, #52]	@ (8014890 <prvInitialiseTaskLists+0x68>)
 801485c:	f7fe fcd8 	bl	8013210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014860:	480c      	ldr	r0, [pc, #48]	@ (8014894 <prvInitialiseTaskLists+0x6c>)
 8014862:	f7fe fcd5 	bl	8013210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014866:	480c      	ldr	r0, [pc, #48]	@ (8014898 <prvInitialiseTaskLists+0x70>)
 8014868:	f7fe fcd2 	bl	8013210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801486c:	480b      	ldr	r0, [pc, #44]	@ (801489c <prvInitialiseTaskLists+0x74>)
 801486e:	f7fe fccf 	bl	8013210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014872:	4b0b      	ldr	r3, [pc, #44]	@ (80148a0 <prvInitialiseTaskLists+0x78>)
 8014874:	4a05      	ldr	r2, [pc, #20]	@ (801488c <prvInitialiseTaskLists+0x64>)
 8014876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014878:	4b0a      	ldr	r3, [pc, #40]	@ (80148a4 <prvInitialiseTaskLists+0x7c>)
 801487a:	4a05      	ldr	r2, [pc, #20]	@ (8014890 <prvInitialiseTaskLists+0x68>)
 801487c:	601a      	str	r2, [r3, #0]
}
 801487e:	bf00      	nop
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	24071708 	.word	0x24071708
 801488c:	24071b68 	.word	0x24071b68
 8014890:	24071b7c 	.word	0x24071b7c
 8014894:	24071b98 	.word	0x24071b98
 8014898:	24071bac 	.word	0x24071bac
 801489c:	24071bc4 	.word	0x24071bc4
 80148a0:	24071b90 	.word	0x24071b90
 80148a4:	24071b94 	.word	0x24071b94

080148a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80148ae:	e019      	b.n	80148e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80148b0:	f000 fdea 	bl	8015488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148b4:	4b10      	ldr	r3, [pc, #64]	@ (80148f8 <prvCheckTasksWaitingTermination+0x50>)
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	68db      	ldr	r3, [r3, #12]
 80148ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	3304      	adds	r3, #4
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fd2f 	bl	8013324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80148c6:	4b0d      	ldr	r3, [pc, #52]	@ (80148fc <prvCheckTasksWaitingTermination+0x54>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	3b01      	subs	r3, #1
 80148cc:	4a0b      	ldr	r2, [pc, #44]	@ (80148fc <prvCheckTasksWaitingTermination+0x54>)
 80148ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80148d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014900 <prvCheckTasksWaitingTermination+0x58>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	3b01      	subs	r3, #1
 80148d6:	4a0a      	ldr	r2, [pc, #40]	@ (8014900 <prvCheckTasksWaitingTermination+0x58>)
 80148d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80148da:	f000 fe07 	bl	80154ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 f810 	bl	8014904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80148e4:	4b06      	ldr	r3, [pc, #24]	@ (8014900 <prvCheckTasksWaitingTermination+0x58>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d1e1      	bne.n	80148b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80148ec:	bf00      	nop
 80148ee:	bf00      	nop
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	24071bac 	.word	0x24071bac
 80148fc:	24071bd8 	.word	0x24071bd8
 8014900:	24071bc0 	.word	0x24071bc0

08014904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	3354      	adds	r3, #84	@ 0x54
 8014910:	4618      	mov	r0, r3
 8014912:	f003 faeb 	bl	8017eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801491c:	2b00      	cmp	r3, #0
 801491e:	d108      	bne.n	8014932 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014924:	4618      	mov	r0, r3
 8014926:	f000 ff9f 	bl	8015868 <vPortFree>
				vPortFree( pxTCB );
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 ff9c 	bl	8015868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014930:	e019      	b.n	8014966 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014938:	2b01      	cmp	r3, #1
 801493a:	d103      	bne.n	8014944 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 ff93 	bl	8015868 <vPortFree>
	}
 8014942:	e010      	b.n	8014966 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801494a:	2b02      	cmp	r3, #2
 801494c:	d00b      	beq.n	8014966 <prvDeleteTCB+0x62>
	__asm volatile
 801494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014952:	f383 8811 	msr	BASEPRI, r3
 8014956:	f3bf 8f6f 	isb	sy
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	60fb      	str	r3, [r7, #12]
}
 8014960:	bf00      	nop
 8014962:	bf00      	nop
 8014964:	e7fd      	b.n	8014962 <prvDeleteTCB+0x5e>
	}
 8014966:	bf00      	nop
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
	...

08014970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014976:	4b0c      	ldr	r3, [pc, #48]	@ (80149a8 <prvResetNextTaskUnblockTime+0x38>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d104      	bne.n	801498a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014980:	4b0a      	ldr	r3, [pc, #40]	@ (80149ac <prvResetNextTaskUnblockTime+0x3c>)
 8014982:	f04f 32ff 	mov.w	r2, #4294967295
 8014986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014988:	e008      	b.n	801499c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801498a:	4b07      	ldr	r3, [pc, #28]	@ (80149a8 <prvResetNextTaskUnblockTime+0x38>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	4a04      	ldr	r2, [pc, #16]	@ (80149ac <prvResetNextTaskUnblockTime+0x3c>)
 801499a:	6013      	str	r3, [r2, #0]
}
 801499c:	bf00      	nop
 801499e:	370c      	adds	r7, #12
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr
 80149a8:	24071b90 	.word	0x24071b90
 80149ac:	24071bf8 	.word	0x24071bf8

080149b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80149b0:	b480      	push	{r7}
 80149b2:	b083      	sub	sp, #12
 80149b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80149b6:	4b0b      	ldr	r3, [pc, #44]	@ (80149e4 <xTaskGetSchedulerState+0x34>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d102      	bne.n	80149c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80149be:	2301      	movs	r3, #1
 80149c0:	607b      	str	r3, [r7, #4]
 80149c2:	e008      	b.n	80149d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149c4:	4b08      	ldr	r3, [pc, #32]	@ (80149e8 <xTaskGetSchedulerState+0x38>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d102      	bne.n	80149d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80149cc:	2302      	movs	r3, #2
 80149ce:	607b      	str	r3, [r7, #4]
 80149d0:	e001      	b.n	80149d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80149d2:	2300      	movs	r3, #0
 80149d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80149d6:	687b      	ldr	r3, [r7, #4]
	}
 80149d8:	4618      	mov	r0, r3
 80149da:	370c      	adds	r7, #12
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr
 80149e4:	24071be4 	.word	0x24071be4
 80149e8:	24071c00 	.word	0x24071c00

080149ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80149f8:	2300      	movs	r3, #0
 80149fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d058      	beq.n	8014ab4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014a02:	4b2f      	ldr	r3, [pc, #188]	@ (8014ac0 <xTaskPriorityDisinherit+0xd4>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	693a      	ldr	r2, [r7, #16]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d00b      	beq.n	8014a24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a10:	f383 8811 	msr	BASEPRI, r3
 8014a14:	f3bf 8f6f 	isb	sy
 8014a18:	f3bf 8f4f 	dsb	sy
 8014a1c:	60fb      	str	r3, [r7, #12]
}
 8014a1e:	bf00      	nop
 8014a20:	bf00      	nop
 8014a22:	e7fd      	b.n	8014a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d10b      	bne.n	8014a44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a30:	f383 8811 	msr	BASEPRI, r3
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	f3bf 8f4f 	dsb	sy
 8014a3c:	60bb      	str	r3, [r7, #8]
}
 8014a3e:	bf00      	nop
 8014a40:	bf00      	nop
 8014a42:	e7fd      	b.n	8014a40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a48:	1e5a      	subs	r2, r3, #1
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d02c      	beq.n	8014ab4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d128      	bne.n	8014ab4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	3304      	adds	r3, #4
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fe fc5c 	bl	8013324 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a84:	4b0f      	ldr	r3, [pc, #60]	@ (8014ac4 <xTaskPriorityDisinherit+0xd8>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d903      	bls.n	8014a94 <xTaskPriorityDisinherit+0xa8>
 8014a8c:	693b      	ldr	r3, [r7, #16]
 8014a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a90:	4a0c      	ldr	r2, [pc, #48]	@ (8014ac4 <xTaskPriorityDisinherit+0xd8>)
 8014a92:	6013      	str	r3, [r2, #0]
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a98:	4613      	mov	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4a09      	ldr	r2, [pc, #36]	@ (8014ac8 <xTaskPriorityDisinherit+0xdc>)
 8014aa2:	441a      	add	r2, r3
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	3304      	adds	r3, #4
 8014aa8:	4619      	mov	r1, r3
 8014aaa:	4610      	mov	r0, r2
 8014aac:	f7fe fbdd 	bl	801326a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ab4:	697b      	ldr	r3, [r7, #20]
	}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3718      	adds	r7, #24
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	24071704 	.word	0x24071704
 8014ac4:	24071be0 	.word	0x24071be0
 8014ac8:	24071708 	.word	0x24071708

08014acc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014ad6:	4b21      	ldr	r3, [pc, #132]	@ (8014b5c <prvAddCurrentTaskToDelayedList+0x90>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014adc:	4b20      	ldr	r3, [pc, #128]	@ (8014b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe fc1e 	bl	8013324 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aee:	d10a      	bne.n	8014b06 <prvAddCurrentTaskToDelayedList+0x3a>
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d007      	beq.n	8014b06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014af6:	4b1a      	ldr	r3, [pc, #104]	@ (8014b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	3304      	adds	r3, #4
 8014afc:	4619      	mov	r1, r3
 8014afe:	4819      	ldr	r0, [pc, #100]	@ (8014b64 <prvAddCurrentTaskToDelayedList+0x98>)
 8014b00:	f7fe fbb3 	bl	801326a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014b04:	e026      	b.n	8014b54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014b0e:	4b14      	ldr	r3, [pc, #80]	@ (8014b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	68ba      	ldr	r2, [r7, #8]
 8014b14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014b16:	68ba      	ldr	r2, [r7, #8]
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d209      	bcs.n	8014b32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b1e:	4b12      	ldr	r3, [pc, #72]	@ (8014b68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014b20:	681a      	ldr	r2, [r3, #0]
 8014b22:	4b0f      	ldr	r3, [pc, #60]	@ (8014b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	3304      	adds	r3, #4
 8014b28:	4619      	mov	r1, r3
 8014b2a:	4610      	mov	r0, r2
 8014b2c:	f7fe fbc1 	bl	80132b2 <vListInsert>
}
 8014b30:	e010      	b.n	8014b54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b32:	4b0e      	ldr	r3, [pc, #56]	@ (8014b6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	4b0a      	ldr	r3, [pc, #40]	@ (8014b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	4610      	mov	r0, r2
 8014b40:	f7fe fbb7 	bl	80132b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014b44:	4b0a      	ldr	r3, [pc, #40]	@ (8014b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	68ba      	ldr	r2, [r7, #8]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d202      	bcs.n	8014b54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014b4e:	4a08      	ldr	r2, [pc, #32]	@ (8014b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	6013      	str	r3, [r2, #0]
}
 8014b54:	bf00      	nop
 8014b56:	3710      	adds	r7, #16
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	24071bdc 	.word	0x24071bdc
 8014b60:	24071704 	.word	0x24071704
 8014b64:	24071bc4 	.word	0x24071bc4
 8014b68:	24071b94 	.word	0x24071b94
 8014b6c:	24071b90 	.word	0x24071b90
 8014b70:	24071bf8 	.word	0x24071bf8

08014b74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b08a      	sub	sp, #40	@ 0x28
 8014b78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014b7e:	f000 fb13 	bl	80151a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014b82:	4b1d      	ldr	r3, [pc, #116]	@ (8014bf8 <xTimerCreateTimerTask+0x84>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d021      	beq.n	8014bce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014b92:	1d3a      	adds	r2, r7, #4
 8014b94:	f107 0108 	add.w	r1, r7, #8
 8014b98:	f107 030c 	add.w	r3, r7, #12
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fe fb1d 	bl	80131dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014ba2:	6879      	ldr	r1, [r7, #4]
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	68fa      	ldr	r2, [r7, #12]
 8014ba8:	9202      	str	r2, [sp, #8]
 8014baa:	9301      	str	r3, [sp, #4]
 8014bac:	2302      	movs	r3, #2
 8014bae:	9300      	str	r3, [sp, #0]
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	460a      	mov	r2, r1
 8014bb4:	4911      	ldr	r1, [pc, #68]	@ (8014bfc <xTimerCreateTimerTask+0x88>)
 8014bb6:	4812      	ldr	r0, [pc, #72]	@ (8014c00 <xTimerCreateTimerTask+0x8c>)
 8014bb8:	f7ff f8d8 	bl	8013d6c <xTaskCreateStatic>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	4a11      	ldr	r2, [pc, #68]	@ (8014c04 <xTimerCreateTimerTask+0x90>)
 8014bc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014bc2:	4b10      	ldr	r3, [pc, #64]	@ (8014c04 <xTimerCreateTimerTask+0x90>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014bca:	2301      	movs	r3, #1
 8014bcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d10b      	bne.n	8014bec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8014bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd8:	f383 8811 	msr	BASEPRI, r3
 8014bdc:	f3bf 8f6f 	isb	sy
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	613b      	str	r3, [r7, #16]
}
 8014be6:	bf00      	nop
 8014be8:	bf00      	nop
 8014bea:	e7fd      	b.n	8014be8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014bec:	697b      	ldr	r3, [r7, #20]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3718      	adds	r7, #24
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	24071c34 	.word	0x24071c34
 8014bfc:	0801a534 	.word	0x0801a534
 8014c00:	08014d41 	.word	0x08014d41
 8014c04:	24071c38 	.word	0x24071c38

08014c08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b08a      	sub	sp, #40	@ 0x28
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	60b9      	str	r1, [r7, #8]
 8014c12:	607a      	str	r2, [r7, #4]
 8014c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014c16:	2300      	movs	r3, #0
 8014c18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d10b      	bne.n	8014c38 <xTimerGenericCommand+0x30>
	__asm volatile
 8014c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c24:	f383 8811 	msr	BASEPRI, r3
 8014c28:	f3bf 8f6f 	isb	sy
 8014c2c:	f3bf 8f4f 	dsb	sy
 8014c30:	623b      	str	r3, [r7, #32]
}
 8014c32:	bf00      	nop
 8014c34:	bf00      	nop
 8014c36:	e7fd      	b.n	8014c34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014c38:	4b19      	ldr	r3, [pc, #100]	@ (8014ca0 <xTimerGenericCommand+0x98>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d02a      	beq.n	8014c96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	2b05      	cmp	r3, #5
 8014c50:	dc18      	bgt.n	8014c84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014c52:	f7ff fead 	bl	80149b0 <xTaskGetSchedulerState>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b02      	cmp	r3, #2
 8014c5a:	d109      	bne.n	8014c70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014c5c:	4b10      	ldr	r3, [pc, #64]	@ (8014ca0 <xTimerGenericCommand+0x98>)
 8014c5e:	6818      	ldr	r0, [r3, #0]
 8014c60:	f107 0110 	add.w	r1, r7, #16
 8014c64:	2300      	movs	r3, #0
 8014c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c68:	f7fe fc90 	bl	801358c <xQueueGenericSend>
 8014c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8014c6e:	e012      	b.n	8014c96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014c70:	4b0b      	ldr	r3, [pc, #44]	@ (8014ca0 <xTimerGenericCommand+0x98>)
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	f107 0110 	add.w	r1, r7, #16
 8014c78:	2300      	movs	r3, #0
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f7fe fc86 	bl	801358c <xQueueGenericSend>
 8014c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8014c82:	e008      	b.n	8014c96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014c84:	4b06      	ldr	r3, [pc, #24]	@ (8014ca0 <xTimerGenericCommand+0x98>)
 8014c86:	6818      	ldr	r0, [r3, #0]
 8014c88:	f107 0110 	add.w	r1, r7, #16
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	683a      	ldr	r2, [r7, #0]
 8014c90:	f7fe fd7e 	bl	8013790 <xQueueGenericSendFromISR>
 8014c94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3728      	adds	r7, #40	@ 0x28
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	24071c34 	.word	0x24071c34

08014ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b088      	sub	sp, #32
 8014ca8:	af02      	add	r7, sp, #8
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cae:	4b23      	ldr	r3, [pc, #140]	@ (8014d3c <prvProcessExpiredTimer+0x98>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7fe fb31 	bl	8013324 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014cc8:	f003 0304 	and.w	r3, r3, #4
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d023      	beq.n	8014d18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	699a      	ldr	r2, [r3, #24]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	18d1      	adds	r1, r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	683a      	ldr	r2, [r7, #0]
 8014cdc:	6978      	ldr	r0, [r7, #20]
 8014cde:	f000 f8d5 	bl	8014e8c <prvInsertTimerInActiveList>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d020      	beq.n	8014d2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ce8:	2300      	movs	r3, #0
 8014cea:	9300      	str	r3, [sp, #0]
 8014cec:	2300      	movs	r3, #0
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	6978      	ldr	r0, [r7, #20]
 8014cf4:	f7ff ff88 	bl	8014c08 <xTimerGenericCommand>
 8014cf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d114      	bne.n	8014d2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	60fb      	str	r3, [r7, #12]
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	e7fd      	b.n	8014d14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d1e:	f023 0301 	bic.w	r3, r3, #1
 8014d22:	b2da      	uxtb	r2, r3
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	6a1b      	ldr	r3, [r3, #32]
 8014d2e:	6978      	ldr	r0, [r7, #20]
 8014d30:	4798      	blx	r3
}
 8014d32:	bf00      	nop
 8014d34:	3718      	adds	r7, #24
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	24071c2c 	.word	0x24071c2c

08014d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b084      	sub	sp, #16
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014d48:	f107 0308 	add.w	r3, r7, #8
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f859 	bl	8014e04 <prvGetNextExpireTime>
 8014d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	4619      	mov	r1, r3
 8014d58:	68f8      	ldr	r0, [r7, #12]
 8014d5a:	f000 f805 	bl	8014d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014d5e:	f000 f8d7 	bl	8014f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014d62:	bf00      	nop
 8014d64:	e7f0      	b.n	8014d48 <prvTimerTask+0x8>
	...

08014d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014d72:	f7ff fa29 	bl	80141c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014d76:	f107 0308 	add.w	r3, r7, #8
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f000 f866 	bl	8014e4c <prvSampleTimeNow>
 8014d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d130      	bne.n	8014dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d10a      	bne.n	8014da4 <prvProcessTimerOrBlockTask+0x3c>
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d806      	bhi.n	8014da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014d96:	f7ff fa25 	bl	80141e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014d9a:	68f9      	ldr	r1, [r7, #12]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f7ff ff81 	bl	8014ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014da2:	e024      	b.n	8014dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d008      	beq.n	8014dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014daa:	4b13      	ldr	r3, [pc, #76]	@ (8014df8 <prvProcessTimerOrBlockTask+0x90>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d101      	bne.n	8014db8 <prvProcessTimerOrBlockTask+0x50>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <prvProcessTimerOrBlockTask+0x52>
 8014db8:	2300      	movs	r3, #0
 8014dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8014dfc <prvProcessTimerOrBlockTask+0x94>)
 8014dbe:	6818      	ldr	r0, [r3, #0]
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	f7fe ff9b 	bl	8013d04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014dce:	f7ff fa09 	bl	80141e4 <xTaskResumeAll>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d10a      	bne.n	8014dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014dd8:	4b09      	ldr	r3, [pc, #36]	@ (8014e00 <prvProcessTimerOrBlockTask+0x98>)
 8014dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dde:	601a      	str	r2, [r3, #0]
 8014de0:	f3bf 8f4f 	dsb	sy
 8014de4:	f3bf 8f6f 	isb	sy
}
 8014de8:	e001      	b.n	8014dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014dea:	f7ff f9fb 	bl	80141e4 <xTaskResumeAll>
}
 8014dee:	bf00      	nop
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	24071c30 	.word	0x24071c30
 8014dfc:	24071c34 	.word	0x24071c34
 8014e00:	e000ed04 	.word	0xe000ed04

08014e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8014e48 <prvGetNextExpireTime+0x44>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d101      	bne.n	8014e1a <prvGetNextExpireTime+0x16>
 8014e16:	2201      	movs	r2, #1
 8014e18:	e000      	b.n	8014e1c <prvGetNextExpireTime+0x18>
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d105      	bne.n	8014e34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e28:	4b07      	ldr	r3, [pc, #28]	@ (8014e48 <prvGetNextExpireTime+0x44>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	68db      	ldr	r3, [r3, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	60fb      	str	r3, [r7, #12]
 8014e32:	e001      	b.n	8014e38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014e34:	2300      	movs	r3, #0
 8014e36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014e38:	68fb      	ldr	r3, [r7, #12]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3714      	adds	r7, #20
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	24071c2c 	.word	0x24071c2c

08014e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014e54:	f7ff fa64 	bl	8014320 <xTaskGetTickCount>
 8014e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e88 <prvSampleTimeNow+0x3c>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	68fa      	ldr	r2, [r7, #12]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d205      	bcs.n	8014e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014e64:	f000 f93a 	bl	80150dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	601a      	str	r2, [r3, #0]
 8014e6e:	e002      	b.n	8014e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2200      	movs	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014e76:	4a04      	ldr	r2, [pc, #16]	@ (8014e88 <prvSampleTimeNow+0x3c>)
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	24071c3c 	.word	0x24071c3c

08014e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b086      	sub	sp, #24
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
 8014e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	68ba      	ldr	r2, [r7, #8]
 8014ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	68fa      	ldr	r2, [r7, #12]
 8014ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014eaa:	68ba      	ldr	r2, [r7, #8]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d812      	bhi.n	8014ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	1ad2      	subs	r2, r2, r3
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	699b      	ldr	r3, [r3, #24]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d302      	bcc.n	8014ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	617b      	str	r3, [r7, #20]
 8014ec4:	e01b      	b.n	8014efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014ec6:	4b10      	ldr	r3, [pc, #64]	@ (8014f08 <prvInsertTimerInActiveList+0x7c>)
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3304      	adds	r3, #4
 8014ece:	4619      	mov	r1, r3
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	f7fe f9ee 	bl	80132b2 <vListInsert>
 8014ed6:	e012      	b.n	8014efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d206      	bcs.n	8014eee <prvInsertTimerInActiveList+0x62>
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d302      	bcc.n	8014eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	617b      	str	r3, [r7, #20]
 8014eec:	e007      	b.n	8014efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014eee:	4b07      	ldr	r3, [pc, #28]	@ (8014f0c <prvInsertTimerInActiveList+0x80>)
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	4610      	mov	r0, r2
 8014efa:	f7fe f9da 	bl	80132b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014efe:	697b      	ldr	r3, [r7, #20]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	24071c30 	.word	0x24071c30
 8014f0c:	24071c2c 	.word	0x24071c2c

08014f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b08e      	sub	sp, #56	@ 0x38
 8014f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014f16:	e0ce      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	da19      	bge.n	8014f52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014f1e:	1d3b      	adds	r3, r7, #4
 8014f20:	3304      	adds	r3, #4
 8014f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d10b      	bne.n	8014f42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8014f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	61fb      	str	r3, [r7, #28]
}
 8014f3c:	bf00      	nop
 8014f3e:	bf00      	nop
 8014f40:	e7fd      	b.n	8014f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f48:	6850      	ldr	r0, [r2, #4]
 8014f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f4c:	6892      	ldr	r2, [r2, #8]
 8014f4e:	4611      	mov	r1, r2
 8014f50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f2c0 80ae 	blt.w	80150b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f60:	695b      	ldr	r3, [r3, #20]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d004      	beq.n	8014f70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f68:	3304      	adds	r3, #4
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7fe f9da 	bl	8013324 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014f70:	463b      	mov	r3, r7
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7ff ff6a 	bl	8014e4c <prvSampleTimeNow>
 8014f78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b09      	cmp	r3, #9
 8014f7e:	f200 8097 	bhi.w	80150b0 <prvProcessReceivedCommands+0x1a0>
 8014f82:	a201      	add	r2, pc, #4	@ (adr r2, 8014f88 <prvProcessReceivedCommands+0x78>)
 8014f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f88:	08014fb1 	.word	0x08014fb1
 8014f8c:	08014fb1 	.word	0x08014fb1
 8014f90:	08014fb1 	.word	0x08014fb1
 8014f94:	08015027 	.word	0x08015027
 8014f98:	0801503b 	.word	0x0801503b
 8014f9c:	08015087 	.word	0x08015087
 8014fa0:	08014fb1 	.word	0x08014fb1
 8014fa4:	08014fb1 	.word	0x08014fb1
 8014fa8:	08015027 	.word	0x08015027
 8014fac:	0801503b 	.word	0x0801503b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014fb6:	f043 0301 	orr.w	r3, r3, #1
 8014fba:	b2da      	uxtb	r2, r3
 8014fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fc6:	699b      	ldr	r3, [r3, #24]
 8014fc8:	18d1      	adds	r1, r2, r3
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014fd0:	f7ff ff5c 	bl	8014e8c <prvInsertTimerInActiveList>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d06c      	beq.n	80150b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fdc:	6a1b      	ldr	r3, [r3, #32]
 8014fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014fe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014fe8:	f003 0304 	and.w	r3, r3, #4
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d061      	beq.n	80150b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014ff0:	68ba      	ldr	r2, [r7, #8]
 8014ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff4:	699b      	ldr	r3, [r3, #24]
 8014ff6:	441a      	add	r2, r3
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	2100      	movs	r1, #0
 8015000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015002:	f7ff fe01 	bl	8014c08 <xTimerGenericCommand>
 8015006:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015008:	6a3b      	ldr	r3, [r7, #32]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d152      	bne.n	80150b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015012:	f383 8811 	msr	BASEPRI, r3
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	f3bf 8f4f 	dsb	sy
 801501e:	61bb      	str	r3, [r7, #24]
}
 8015020:	bf00      	nop
 8015022:	bf00      	nop
 8015024:	e7fd      	b.n	8015022 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801502c:	f023 0301 	bic.w	r3, r3, #1
 8015030:	b2da      	uxtb	r2, r3
 8015032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015038:	e03d      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801503c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015040:	f043 0301 	orr.w	r3, r3, #1
 8015044:	b2da      	uxtb	r2, r3
 8015046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801504c:	68ba      	ldr	r2, [r7, #8]
 801504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015054:	699b      	ldr	r3, [r3, #24]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d10b      	bne.n	8015072 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801505e:	f383 8811 	msr	BASEPRI, r3
 8015062:	f3bf 8f6f 	isb	sy
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	617b      	str	r3, [r7, #20]
}
 801506c:	bf00      	nop
 801506e:	bf00      	nop
 8015070:	e7fd      	b.n	801506e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015074:	699a      	ldr	r2, [r3, #24]
 8015076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015078:	18d1      	adds	r1, r2, r3
 801507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801507e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015080:	f7ff ff04 	bl	8014e8c <prvInsertTimerInActiveList>
					break;
 8015084:	e017      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801508c:	f003 0302 	and.w	r3, r3, #2
 8015090:	2b00      	cmp	r3, #0
 8015092:	d103      	bne.n	801509c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015096:	f000 fbe7 	bl	8015868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801509a:	e00c      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801509e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80150a2:	f023 0301 	bic.w	r3, r3, #1
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80150ae:	e002      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80150b0:	bf00      	nop
 80150b2:	e000      	b.n	80150b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80150b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80150b6:	4b08      	ldr	r3, [pc, #32]	@ (80150d8 <prvProcessReceivedCommands+0x1c8>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	1d39      	adds	r1, r7, #4
 80150bc:	2200      	movs	r2, #0
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fe fc04 	bl	80138cc <xQueueReceive>
 80150c4:	4603      	mov	r3, r0
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f47f af26 	bne.w	8014f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80150cc:	bf00      	nop
 80150ce:	bf00      	nop
 80150d0:	3730      	adds	r7, #48	@ 0x30
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	24071c34 	.word	0x24071c34

080150dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b088      	sub	sp, #32
 80150e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80150e2:	e049      	b.n	8015178 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80150e4:	4b2e      	ldr	r3, [pc, #184]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ee:	4b2c      	ldr	r3, [pc, #176]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	3304      	adds	r3, #4
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7fe f911 	bl	8013324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6a1b      	ldr	r3, [r3, #32]
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015110:	f003 0304 	and.w	r3, r3, #4
 8015114:	2b00      	cmp	r3, #0
 8015116:	d02f      	beq.n	8015178 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	699b      	ldr	r3, [r3, #24]
 801511c:	693a      	ldr	r2, [r7, #16]
 801511e:	4413      	add	r3, r2
 8015120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015122:	68ba      	ldr	r2, [r7, #8]
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	429a      	cmp	r2, r3
 8015128:	d90e      	bls.n	8015148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	68ba      	ldr	r2, [r7, #8]
 801512e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015136:	4b1a      	ldr	r3, [pc, #104]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	3304      	adds	r3, #4
 801513e:	4619      	mov	r1, r3
 8015140:	4610      	mov	r0, r2
 8015142:	f7fe f8b6 	bl	80132b2 <vListInsert>
 8015146:	e017      	b.n	8015178 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015148:	2300      	movs	r3, #0
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	2300      	movs	r3, #0
 801514e:	693a      	ldr	r2, [r7, #16]
 8015150:	2100      	movs	r1, #0
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	f7ff fd58 	bl	8014c08 <xTimerGenericCommand>
 8015158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d10b      	bne.n	8015178 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	603b      	str	r3, [r7, #0]
}
 8015172:	bf00      	nop
 8015174:	bf00      	nop
 8015176:	e7fd      	b.n	8015174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015178:	4b09      	ldr	r3, [pc, #36]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1b0      	bne.n	80150e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015182:	4b07      	ldr	r3, [pc, #28]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015188:	4b06      	ldr	r3, [pc, #24]	@ (80151a4 <prvSwitchTimerLists+0xc8>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a04      	ldr	r2, [pc, #16]	@ (80151a0 <prvSwitchTimerLists+0xc4>)
 801518e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015190:	4a04      	ldr	r2, [pc, #16]	@ (80151a4 <prvSwitchTimerLists+0xc8>)
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	6013      	str	r3, [r2, #0]
}
 8015196:	bf00      	nop
 8015198:	3718      	adds	r7, #24
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	24071c2c 	.word	0x24071c2c
 80151a4:	24071c30 	.word	0x24071c30

080151a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80151ae:	f000 f96b 	bl	8015488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80151b2:	4b15      	ldr	r3, [pc, #84]	@ (8015208 <prvCheckForValidListAndQueue+0x60>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d120      	bne.n	80151fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80151ba:	4814      	ldr	r0, [pc, #80]	@ (801520c <prvCheckForValidListAndQueue+0x64>)
 80151bc:	f7fe f828 	bl	8013210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80151c0:	4813      	ldr	r0, [pc, #76]	@ (8015210 <prvCheckForValidListAndQueue+0x68>)
 80151c2:	f7fe f825 	bl	8013210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80151c6:	4b13      	ldr	r3, [pc, #76]	@ (8015214 <prvCheckForValidListAndQueue+0x6c>)
 80151c8:	4a10      	ldr	r2, [pc, #64]	@ (801520c <prvCheckForValidListAndQueue+0x64>)
 80151ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80151cc:	4b12      	ldr	r3, [pc, #72]	@ (8015218 <prvCheckForValidListAndQueue+0x70>)
 80151ce:	4a10      	ldr	r2, [pc, #64]	@ (8015210 <prvCheckForValidListAndQueue+0x68>)
 80151d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80151d2:	2300      	movs	r3, #0
 80151d4:	9300      	str	r3, [sp, #0]
 80151d6:	4b11      	ldr	r3, [pc, #68]	@ (801521c <prvCheckForValidListAndQueue+0x74>)
 80151d8:	4a11      	ldr	r2, [pc, #68]	@ (8015220 <prvCheckForValidListAndQueue+0x78>)
 80151da:	2110      	movs	r1, #16
 80151dc:	200a      	movs	r0, #10
 80151de:	f7fe f935 	bl	801344c <xQueueGenericCreateStatic>
 80151e2:	4603      	mov	r3, r0
 80151e4:	4a08      	ldr	r2, [pc, #32]	@ (8015208 <prvCheckForValidListAndQueue+0x60>)
 80151e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80151e8:	4b07      	ldr	r3, [pc, #28]	@ (8015208 <prvCheckForValidListAndQueue+0x60>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d005      	beq.n	80151fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80151f0:	4b05      	ldr	r3, [pc, #20]	@ (8015208 <prvCheckForValidListAndQueue+0x60>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	490b      	ldr	r1, [pc, #44]	@ (8015224 <prvCheckForValidListAndQueue+0x7c>)
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7fe fd5a 	bl	8013cb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80151fc:	f000 f976 	bl	80154ec <vPortExitCritical>
}
 8015200:	bf00      	nop
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	24071c34 	.word	0x24071c34
 801520c:	24071c04 	.word	0x24071c04
 8015210:	24071c18 	.word	0x24071c18
 8015214:	24071c2c 	.word	0x24071c2c
 8015218:	24071c30 	.word	0x24071c30
 801521c:	24071ce0 	.word	0x24071ce0
 8015220:	24071c40 	.word	0x24071c40
 8015224:	0801a53c 	.word	0x0801a53c

08015228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015228:	b480      	push	{r7}
 801522a:	b085      	sub	sp, #20
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	3b04      	subs	r3, #4
 8015238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	3b04      	subs	r3, #4
 8015246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	f023 0201 	bic.w	r2, r3, #1
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	3b04      	subs	r3, #4
 8015256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015258:	4a0c      	ldr	r2, [pc, #48]	@ (801528c <pxPortInitialiseStack+0x64>)
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	3b14      	subs	r3, #20
 8015262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3b04      	subs	r3, #4
 801526e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f06f 0202 	mvn.w	r2, #2
 8015276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	3b20      	subs	r3, #32
 801527c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801527e:	68fb      	ldr	r3, [r7, #12]
}
 8015280:	4618      	mov	r0, r3
 8015282:	3714      	adds	r7, #20
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr
 801528c:	08015291 	.word	0x08015291

08015290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015290:	b480      	push	{r7}
 8015292:	b085      	sub	sp, #20
 8015294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015296:	2300      	movs	r3, #0
 8015298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801529a:	4b13      	ldr	r3, [pc, #76]	@ (80152e8 <prvTaskExitError+0x58>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152a2:	d00b      	beq.n	80152bc <prvTaskExitError+0x2c>
	__asm volatile
 80152a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152a8:	f383 8811 	msr	BASEPRI, r3
 80152ac:	f3bf 8f6f 	isb	sy
 80152b0:	f3bf 8f4f 	dsb	sy
 80152b4:	60fb      	str	r3, [r7, #12]
}
 80152b6:	bf00      	nop
 80152b8:	bf00      	nop
 80152ba:	e7fd      	b.n	80152b8 <prvTaskExitError+0x28>
	__asm volatile
 80152bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152c0:	f383 8811 	msr	BASEPRI, r3
 80152c4:	f3bf 8f6f 	isb	sy
 80152c8:	f3bf 8f4f 	dsb	sy
 80152cc:	60bb      	str	r3, [r7, #8]
}
 80152ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80152d0:	bf00      	nop
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d0fc      	beq.n	80152d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80152d8:	bf00      	nop
 80152da:	bf00      	nop
 80152dc:	3714      	adds	r7, #20
 80152de:	46bd      	mov	sp, r7
 80152e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop
 80152e8:	2400009c 	.word	0x2400009c
 80152ec:	00000000 	.word	0x00000000

080152f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80152f0:	4b07      	ldr	r3, [pc, #28]	@ (8015310 <pxCurrentTCBConst2>)
 80152f2:	6819      	ldr	r1, [r3, #0]
 80152f4:	6808      	ldr	r0, [r1, #0]
 80152f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fa:	f380 8809 	msr	PSP, r0
 80152fe:	f3bf 8f6f 	isb	sy
 8015302:	f04f 0000 	mov.w	r0, #0
 8015306:	f380 8811 	msr	BASEPRI, r0
 801530a:	4770      	bx	lr
 801530c:	f3af 8000 	nop.w

08015310 <pxCurrentTCBConst2>:
 8015310:	24071704 	.word	0x24071704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015314:	bf00      	nop
 8015316:	bf00      	nop

08015318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015318:	4808      	ldr	r0, [pc, #32]	@ (801533c <prvPortStartFirstTask+0x24>)
 801531a:	6800      	ldr	r0, [r0, #0]
 801531c:	6800      	ldr	r0, [r0, #0]
 801531e:	f380 8808 	msr	MSP, r0
 8015322:	f04f 0000 	mov.w	r0, #0
 8015326:	f380 8814 	msr	CONTROL, r0
 801532a:	b662      	cpsie	i
 801532c:	b661      	cpsie	f
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	f3bf 8f6f 	isb	sy
 8015336:	df00      	svc	0
 8015338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801533a:	bf00      	nop
 801533c:	e000ed08 	.word	0xe000ed08

08015340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b086      	sub	sp, #24
 8015344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015346:	4b47      	ldr	r3, [pc, #284]	@ (8015464 <xPortStartScheduler+0x124>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4a47      	ldr	r2, [pc, #284]	@ (8015468 <xPortStartScheduler+0x128>)
 801534c:	4293      	cmp	r3, r2
 801534e:	d10b      	bne.n	8015368 <xPortStartScheduler+0x28>
	__asm volatile
 8015350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015354:	f383 8811 	msr	BASEPRI, r3
 8015358:	f3bf 8f6f 	isb	sy
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	613b      	str	r3, [r7, #16]
}
 8015362:	bf00      	nop
 8015364:	bf00      	nop
 8015366:	e7fd      	b.n	8015364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015368:	4b3e      	ldr	r3, [pc, #248]	@ (8015464 <xPortStartScheduler+0x124>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a3f      	ldr	r2, [pc, #252]	@ (801546c <xPortStartScheduler+0x12c>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d10b      	bne.n	801538a <xPortStartScheduler+0x4a>
	__asm volatile
 8015372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015376:	f383 8811 	msr	BASEPRI, r3
 801537a:	f3bf 8f6f 	isb	sy
 801537e:	f3bf 8f4f 	dsb	sy
 8015382:	60fb      	str	r3, [r7, #12]
}
 8015384:	bf00      	nop
 8015386:	bf00      	nop
 8015388:	e7fd      	b.n	8015386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801538a:	4b39      	ldr	r3, [pc, #228]	@ (8015470 <xPortStartScheduler+0x130>)
 801538c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	b2db      	uxtb	r3, r3
 8015394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	22ff      	movs	r2, #255	@ 0xff
 801539a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80153a4:	78fb      	ldrb	r3, [r7, #3]
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80153ac:	b2da      	uxtb	r2, r3
 80153ae:	4b31      	ldr	r3, [pc, #196]	@ (8015474 <xPortStartScheduler+0x134>)
 80153b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80153b2:	4b31      	ldr	r3, [pc, #196]	@ (8015478 <xPortStartScheduler+0x138>)
 80153b4:	2207      	movs	r2, #7
 80153b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80153b8:	e009      	b.n	80153ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80153ba:	4b2f      	ldr	r3, [pc, #188]	@ (8015478 <xPortStartScheduler+0x138>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	3b01      	subs	r3, #1
 80153c0:	4a2d      	ldr	r2, [pc, #180]	@ (8015478 <xPortStartScheduler+0x138>)
 80153c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80153c4:	78fb      	ldrb	r3, [r7, #3]
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	005b      	lsls	r3, r3, #1
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80153ce:	78fb      	ldrb	r3, [r7, #3]
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80153d6:	2b80      	cmp	r3, #128	@ 0x80
 80153d8:	d0ef      	beq.n	80153ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80153da:	4b27      	ldr	r3, [pc, #156]	@ (8015478 <xPortStartScheduler+0x138>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f1c3 0307 	rsb	r3, r3, #7
 80153e2:	2b04      	cmp	r3, #4
 80153e4:	d00b      	beq.n	80153fe <xPortStartScheduler+0xbe>
	__asm volatile
 80153e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153ea:	f383 8811 	msr	BASEPRI, r3
 80153ee:	f3bf 8f6f 	isb	sy
 80153f2:	f3bf 8f4f 	dsb	sy
 80153f6:	60bb      	str	r3, [r7, #8]
}
 80153f8:	bf00      	nop
 80153fa:	bf00      	nop
 80153fc:	e7fd      	b.n	80153fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80153fe:	4b1e      	ldr	r3, [pc, #120]	@ (8015478 <xPortStartScheduler+0x138>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	021b      	lsls	r3, r3, #8
 8015404:	4a1c      	ldr	r2, [pc, #112]	@ (8015478 <xPortStartScheduler+0x138>)
 8015406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015408:	4b1b      	ldr	r3, [pc, #108]	@ (8015478 <xPortStartScheduler+0x138>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015410:	4a19      	ldr	r2, [pc, #100]	@ (8015478 <xPortStartScheduler+0x138>)
 8015412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	b2da      	uxtb	r2, r3
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801541c:	4b17      	ldr	r3, [pc, #92]	@ (801547c <xPortStartScheduler+0x13c>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	4a16      	ldr	r2, [pc, #88]	@ (801547c <xPortStartScheduler+0x13c>)
 8015422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015428:	4b14      	ldr	r3, [pc, #80]	@ (801547c <xPortStartScheduler+0x13c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	4a13      	ldr	r2, [pc, #76]	@ (801547c <xPortStartScheduler+0x13c>)
 801542e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015434:	f000 f8da 	bl	80155ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015438:	4b11      	ldr	r3, [pc, #68]	@ (8015480 <xPortStartScheduler+0x140>)
 801543a:	2200      	movs	r2, #0
 801543c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801543e:	f000 f8f9 	bl	8015634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015442:	4b10      	ldr	r3, [pc, #64]	@ (8015484 <xPortStartScheduler+0x144>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4a0f      	ldr	r2, [pc, #60]	@ (8015484 <xPortStartScheduler+0x144>)
 8015448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801544c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801544e:	f7ff ff63 	bl	8015318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015452:	f7ff f82f 	bl	80144b4 <vTaskSwitchContext>
	prvTaskExitError();
 8015456:	f7ff ff1b 	bl	8015290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3718      	adds	r7, #24
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	e000ed00 	.word	0xe000ed00
 8015468:	410fc271 	.word	0x410fc271
 801546c:	410fc270 	.word	0x410fc270
 8015470:	e000e400 	.word	0xe000e400
 8015474:	24071d30 	.word	0x24071d30
 8015478:	24071d34 	.word	0x24071d34
 801547c:	e000ed20 	.word	0xe000ed20
 8015480:	2400009c 	.word	0x2400009c
 8015484:	e000ef34 	.word	0xe000ef34

08015488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	607b      	str	r3, [r7, #4]
}
 80154a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80154a2:	4b10      	ldr	r3, [pc, #64]	@ (80154e4 <vPortEnterCritical+0x5c>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	3301      	adds	r3, #1
 80154a8:	4a0e      	ldr	r2, [pc, #56]	@ (80154e4 <vPortEnterCritical+0x5c>)
 80154aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80154ac:	4b0d      	ldr	r3, [pc, #52]	@ (80154e4 <vPortEnterCritical+0x5c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d110      	bne.n	80154d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80154b4:	4b0c      	ldr	r3, [pc, #48]	@ (80154e8 <vPortEnterCritical+0x60>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00b      	beq.n	80154d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80154be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c2:	f383 8811 	msr	BASEPRI, r3
 80154c6:	f3bf 8f6f 	isb	sy
 80154ca:	f3bf 8f4f 	dsb	sy
 80154ce:	603b      	str	r3, [r7, #0]
}
 80154d0:	bf00      	nop
 80154d2:	bf00      	nop
 80154d4:	e7fd      	b.n	80154d2 <vPortEnterCritical+0x4a>
	}
}
 80154d6:	bf00      	nop
 80154d8:	370c      	adds	r7, #12
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr
 80154e2:	bf00      	nop
 80154e4:	2400009c 	.word	0x2400009c
 80154e8:	e000ed04 	.word	0xe000ed04

080154ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80154ec:	b480      	push	{r7}
 80154ee:	b083      	sub	sp, #12
 80154f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80154f2:	4b12      	ldr	r3, [pc, #72]	@ (801553c <vPortExitCritical+0x50>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d10b      	bne.n	8015512 <vPortExitCritical+0x26>
	__asm volatile
 80154fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154fe:	f383 8811 	msr	BASEPRI, r3
 8015502:	f3bf 8f6f 	isb	sy
 8015506:	f3bf 8f4f 	dsb	sy
 801550a:	607b      	str	r3, [r7, #4]
}
 801550c:	bf00      	nop
 801550e:	bf00      	nop
 8015510:	e7fd      	b.n	801550e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015512:	4b0a      	ldr	r3, [pc, #40]	@ (801553c <vPortExitCritical+0x50>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	3b01      	subs	r3, #1
 8015518:	4a08      	ldr	r2, [pc, #32]	@ (801553c <vPortExitCritical+0x50>)
 801551a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801551c:	4b07      	ldr	r3, [pc, #28]	@ (801553c <vPortExitCritical+0x50>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d105      	bne.n	8015530 <vPortExitCritical+0x44>
 8015524:	2300      	movs	r3, #0
 8015526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	f383 8811 	msr	BASEPRI, r3
}
 801552e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015530:	bf00      	nop
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr
 801553c:	2400009c 	.word	0x2400009c

08015540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015540:	f3ef 8009 	mrs	r0, PSP
 8015544:	f3bf 8f6f 	isb	sy
 8015548:	4b15      	ldr	r3, [pc, #84]	@ (80155a0 <pxCurrentTCBConst>)
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	f01e 0f10 	tst.w	lr, #16
 8015550:	bf08      	it	eq
 8015552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555a:	6010      	str	r0, [r2, #0]
 801555c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015564:	f380 8811 	msr	BASEPRI, r0
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	f3bf 8f6f 	isb	sy
 8015570:	f7fe ffa0 	bl	80144b4 <vTaskSwitchContext>
 8015574:	f04f 0000 	mov.w	r0, #0
 8015578:	f380 8811 	msr	BASEPRI, r0
 801557c:	bc09      	pop	{r0, r3}
 801557e:	6819      	ldr	r1, [r3, #0]
 8015580:	6808      	ldr	r0, [r1, #0]
 8015582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015586:	f01e 0f10 	tst.w	lr, #16
 801558a:	bf08      	it	eq
 801558c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015590:	f380 8809 	msr	PSP, r0
 8015594:	f3bf 8f6f 	isb	sy
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	f3af 8000 	nop.w

080155a0 <pxCurrentTCBConst>:
 80155a0:	24071704 	.word	0x24071704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80155a4:	bf00      	nop
 80155a6:	bf00      	nop

080155a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
	__asm volatile
 80155ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b2:	f383 8811 	msr	BASEPRI, r3
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	f3bf 8f4f 	dsb	sy
 80155be:	607b      	str	r3, [r7, #4]
}
 80155c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80155c2:	f7fe febd 	bl	8014340 <xTaskIncrementTick>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d003      	beq.n	80155d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80155cc:	4b06      	ldr	r3, [pc, #24]	@ (80155e8 <xPortSysTickHandler+0x40>)
 80155ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155d2:	601a      	str	r2, [r3, #0]
 80155d4:	2300      	movs	r3, #0
 80155d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	f383 8811 	msr	BASEPRI, r3
}
 80155de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	e000ed04 	.word	0xe000ed04

080155ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80155ec:	b480      	push	{r7}
 80155ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80155f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015620 <vPortSetupTimerInterrupt+0x34>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80155f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015624 <vPortSetupTimerInterrupt+0x38>)
 80155f8:	2200      	movs	r2, #0
 80155fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80155fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015628 <vPortSetupTimerInterrupt+0x3c>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	4a0a      	ldr	r2, [pc, #40]	@ (801562c <vPortSetupTimerInterrupt+0x40>)
 8015602:	fba2 2303 	umull	r2, r3, r2, r3
 8015606:	099b      	lsrs	r3, r3, #6
 8015608:	4a09      	ldr	r2, [pc, #36]	@ (8015630 <vPortSetupTimerInterrupt+0x44>)
 801560a:	3b01      	subs	r3, #1
 801560c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801560e:	4b04      	ldr	r3, [pc, #16]	@ (8015620 <vPortSetupTimerInterrupt+0x34>)
 8015610:	2207      	movs	r2, #7
 8015612:	601a      	str	r2, [r3, #0]
}
 8015614:	bf00      	nop
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop
 8015620:	e000e010 	.word	0xe000e010
 8015624:	e000e018 	.word	0xe000e018
 8015628:	24000000 	.word	0x24000000
 801562c:	10624dd3 	.word	0x10624dd3
 8015630:	e000e014 	.word	0xe000e014

08015634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015644 <vPortEnableVFP+0x10>
 8015638:	6801      	ldr	r1, [r0, #0]
 801563a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801563e:	6001      	str	r1, [r0, #0]
 8015640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015642:	bf00      	nop
 8015644:	e000ed88 	.word	0xe000ed88

08015648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015648:	b480      	push	{r7}
 801564a:	b085      	sub	sp, #20
 801564c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801564e:	f3ef 8305 	mrs	r3, IPSR
 8015652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2b0f      	cmp	r3, #15
 8015658:	d915      	bls.n	8015686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801565a:	4a18      	ldr	r2, [pc, #96]	@ (80156bc <vPortValidateInterruptPriority+0x74>)
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	4413      	add	r3, r2
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015664:	4b16      	ldr	r3, [pc, #88]	@ (80156c0 <vPortValidateInterruptPriority+0x78>)
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	7afa      	ldrb	r2, [r7, #11]
 801566a:	429a      	cmp	r2, r3
 801566c:	d20b      	bcs.n	8015686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015672:	f383 8811 	msr	BASEPRI, r3
 8015676:	f3bf 8f6f 	isb	sy
 801567a:	f3bf 8f4f 	dsb	sy
 801567e:	607b      	str	r3, [r7, #4]
}
 8015680:	bf00      	nop
 8015682:	bf00      	nop
 8015684:	e7fd      	b.n	8015682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015686:	4b0f      	ldr	r3, [pc, #60]	@ (80156c4 <vPortValidateInterruptPriority+0x7c>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801568e:	4b0e      	ldr	r3, [pc, #56]	@ (80156c8 <vPortValidateInterruptPriority+0x80>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	429a      	cmp	r2, r3
 8015694:	d90b      	bls.n	80156ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801569a:	f383 8811 	msr	BASEPRI, r3
 801569e:	f3bf 8f6f 	isb	sy
 80156a2:	f3bf 8f4f 	dsb	sy
 80156a6:	603b      	str	r3, [r7, #0]
}
 80156a8:	bf00      	nop
 80156aa:	bf00      	nop
 80156ac:	e7fd      	b.n	80156aa <vPortValidateInterruptPriority+0x62>
	}
 80156ae:	bf00      	nop
 80156b0:	3714      	adds	r7, #20
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop
 80156bc:	e000e3f0 	.word	0xe000e3f0
 80156c0:	24071d30 	.word	0x24071d30
 80156c4:	e000ed0c 	.word	0xe000ed0c
 80156c8:	24071d34 	.word	0x24071d34

080156cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08a      	sub	sp, #40	@ 0x28
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80156d4:	2300      	movs	r3, #0
 80156d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80156d8:	f7fe fd76 	bl	80141c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80156dc:	4b5c      	ldr	r3, [pc, #368]	@ (8015850 <pvPortMalloc+0x184>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d101      	bne.n	80156e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80156e4:	f000 f924 	bl	8015930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80156e8:	4b5a      	ldr	r3, [pc, #360]	@ (8015854 <pvPortMalloc+0x188>)
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	4013      	ands	r3, r2
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f040 8095 	bne.w	8015820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01e      	beq.n	801573a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80156fc:	2208      	movs	r2, #8
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4413      	add	r3, r2
 8015702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f003 0307 	and.w	r3, r3, #7
 801570a:	2b00      	cmp	r3, #0
 801570c:	d015      	beq.n	801573a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f023 0307 	bic.w	r3, r3, #7
 8015714:	3308      	adds	r3, #8
 8015716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f003 0307 	and.w	r3, r3, #7
 801571e:	2b00      	cmp	r3, #0
 8015720:	d00b      	beq.n	801573a <pvPortMalloc+0x6e>
	__asm volatile
 8015722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015726:	f383 8811 	msr	BASEPRI, r3
 801572a:	f3bf 8f6f 	isb	sy
 801572e:	f3bf 8f4f 	dsb	sy
 8015732:	617b      	str	r3, [r7, #20]
}
 8015734:	bf00      	nop
 8015736:	bf00      	nop
 8015738:	e7fd      	b.n	8015736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d06f      	beq.n	8015820 <pvPortMalloc+0x154>
 8015740:	4b45      	ldr	r3, [pc, #276]	@ (8015858 <pvPortMalloc+0x18c>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	687a      	ldr	r2, [r7, #4]
 8015746:	429a      	cmp	r2, r3
 8015748:	d86a      	bhi.n	8015820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801574a:	4b44      	ldr	r3, [pc, #272]	@ (801585c <pvPortMalloc+0x190>)
 801574c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801574e:	4b43      	ldr	r3, [pc, #268]	@ (801585c <pvPortMalloc+0x190>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015754:	e004      	b.n	8015760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	687a      	ldr	r2, [r7, #4]
 8015766:	429a      	cmp	r2, r3
 8015768:	d903      	bls.n	8015772 <pvPortMalloc+0xa6>
 801576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1f1      	bne.n	8015756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015772:	4b37      	ldr	r3, [pc, #220]	@ (8015850 <pvPortMalloc+0x184>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015778:	429a      	cmp	r2, r3
 801577a:	d051      	beq.n	8015820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801577c:	6a3b      	ldr	r3, [r7, #32]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	2208      	movs	r2, #8
 8015782:	4413      	add	r3, r2
 8015784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	6a3b      	ldr	r3, [r7, #32]
 801578c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015790:	685a      	ldr	r2, [r3, #4]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	1ad2      	subs	r2, r2, r3
 8015796:	2308      	movs	r3, #8
 8015798:	005b      	lsls	r3, r3, #1
 801579a:	429a      	cmp	r2, r3
 801579c:	d920      	bls.n	80157e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801579e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	4413      	add	r3, r2
 80157a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	f003 0307 	and.w	r3, r3, #7
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d00b      	beq.n	80157c8 <pvPortMalloc+0xfc>
	__asm volatile
 80157b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157b4:	f383 8811 	msr	BASEPRI, r3
 80157b8:	f3bf 8f6f 	isb	sy
 80157bc:	f3bf 8f4f 	dsb	sy
 80157c0:	613b      	str	r3, [r7, #16]
}
 80157c2:	bf00      	nop
 80157c4:	bf00      	nop
 80157c6:	e7fd      	b.n	80157c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80157c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ca:	685a      	ldr	r2, [r3, #4]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	1ad2      	subs	r2, r2, r3
 80157d0:	69bb      	ldr	r3, [r7, #24]
 80157d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80157d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80157da:	69b8      	ldr	r0, [r7, #24]
 80157dc:	f000 f90a 	bl	80159f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80157e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015858 <pvPortMalloc+0x18c>)
 80157e2:	681a      	ldr	r2, [r3, #0]
 80157e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	1ad3      	subs	r3, r2, r3
 80157ea:	4a1b      	ldr	r2, [pc, #108]	@ (8015858 <pvPortMalloc+0x18c>)
 80157ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80157ee:	4b1a      	ldr	r3, [pc, #104]	@ (8015858 <pvPortMalloc+0x18c>)
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	4b1b      	ldr	r3, [pc, #108]	@ (8015860 <pvPortMalloc+0x194>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d203      	bcs.n	8015802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80157fa:	4b17      	ldr	r3, [pc, #92]	@ (8015858 <pvPortMalloc+0x18c>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	4a18      	ldr	r2, [pc, #96]	@ (8015860 <pvPortMalloc+0x194>)
 8015800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015804:	685a      	ldr	r2, [r3, #4]
 8015806:	4b13      	ldr	r3, [pc, #76]	@ (8015854 <pvPortMalloc+0x188>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	431a      	orrs	r2, r3
 801580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015812:	2200      	movs	r2, #0
 8015814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015816:	4b13      	ldr	r3, [pc, #76]	@ (8015864 <pvPortMalloc+0x198>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3301      	adds	r3, #1
 801581c:	4a11      	ldr	r2, [pc, #68]	@ (8015864 <pvPortMalloc+0x198>)
 801581e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015820:	f7fe fce0 	bl	80141e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	f003 0307 	and.w	r3, r3, #7
 801582a:	2b00      	cmp	r3, #0
 801582c:	d00b      	beq.n	8015846 <pvPortMalloc+0x17a>
	__asm volatile
 801582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015832:	f383 8811 	msr	BASEPRI, r3
 8015836:	f3bf 8f6f 	isb	sy
 801583a:	f3bf 8f4f 	dsb	sy
 801583e:	60fb      	str	r3, [r7, #12]
}
 8015840:	bf00      	nop
 8015842:	bf00      	nop
 8015844:	e7fd      	b.n	8015842 <pvPortMalloc+0x176>
	return pvReturn;
 8015846:	69fb      	ldr	r3, [r7, #28]
}
 8015848:	4618      	mov	r0, r3
 801584a:	3728      	adds	r7, #40	@ 0x28
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}
 8015850:	24075940 	.word	0x24075940
 8015854:	24075954 	.word	0x24075954
 8015858:	24075944 	.word	0x24075944
 801585c:	24075938 	.word	0x24075938
 8015860:	24075948 	.word	0x24075948
 8015864:	2407594c 	.word	0x2407594c

08015868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b086      	sub	sp, #24
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d04f      	beq.n	801591a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801587a:	2308      	movs	r3, #8
 801587c:	425b      	negs	r3, r3
 801587e:	697a      	ldr	r2, [r7, #20]
 8015880:	4413      	add	r3, r2
 8015882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	685a      	ldr	r2, [r3, #4]
 801588c:	4b25      	ldr	r3, [pc, #148]	@ (8015924 <vPortFree+0xbc>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	4013      	ands	r3, r2
 8015892:	2b00      	cmp	r3, #0
 8015894:	d10b      	bne.n	80158ae <vPortFree+0x46>
	__asm volatile
 8015896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801589a:	f383 8811 	msr	BASEPRI, r3
 801589e:	f3bf 8f6f 	isb	sy
 80158a2:	f3bf 8f4f 	dsb	sy
 80158a6:	60fb      	str	r3, [r7, #12]
}
 80158a8:	bf00      	nop
 80158aa:	bf00      	nop
 80158ac:	e7fd      	b.n	80158aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00b      	beq.n	80158ce <vPortFree+0x66>
	__asm volatile
 80158b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158ba:	f383 8811 	msr	BASEPRI, r3
 80158be:	f3bf 8f6f 	isb	sy
 80158c2:	f3bf 8f4f 	dsb	sy
 80158c6:	60bb      	str	r3, [r7, #8]
}
 80158c8:	bf00      	nop
 80158ca:	bf00      	nop
 80158cc:	e7fd      	b.n	80158ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	685a      	ldr	r2, [r3, #4]
 80158d2:	4b14      	ldr	r3, [pc, #80]	@ (8015924 <vPortFree+0xbc>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4013      	ands	r3, r2
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d01e      	beq.n	801591a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d11a      	bne.n	801591a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	685a      	ldr	r2, [r3, #4]
 80158e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015924 <vPortFree+0xbc>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	43db      	mvns	r3, r3
 80158ee:	401a      	ands	r2, r3
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80158f4:	f7fe fc68 	bl	80141c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	685a      	ldr	r2, [r3, #4]
 80158fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015928 <vPortFree+0xc0>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	4413      	add	r3, r2
 8015902:	4a09      	ldr	r2, [pc, #36]	@ (8015928 <vPortFree+0xc0>)
 8015904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015906:	6938      	ldr	r0, [r7, #16]
 8015908:	f000 f874 	bl	80159f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801590c:	4b07      	ldr	r3, [pc, #28]	@ (801592c <vPortFree+0xc4>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	3301      	adds	r3, #1
 8015912:	4a06      	ldr	r2, [pc, #24]	@ (801592c <vPortFree+0xc4>)
 8015914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015916:	f7fe fc65 	bl	80141e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801591a:	bf00      	nop
 801591c:	3718      	adds	r7, #24
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	24075954 	.word	0x24075954
 8015928:	24075944 	.word	0x24075944
 801592c:	24075950 	.word	0x24075950

08015930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015930:	b480      	push	{r7}
 8015932:	b085      	sub	sp, #20
 8015934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801593a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801593c:	4b27      	ldr	r3, [pc, #156]	@ (80159dc <prvHeapInit+0xac>)
 801593e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f003 0307 	and.w	r3, r3, #7
 8015946:	2b00      	cmp	r3, #0
 8015948:	d00c      	beq.n	8015964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	3307      	adds	r3, #7
 801594e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f023 0307 	bic.w	r3, r3, #7
 8015956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015958:	68ba      	ldr	r2, [r7, #8]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	1ad3      	subs	r3, r2, r3
 801595e:	4a1f      	ldr	r2, [pc, #124]	@ (80159dc <prvHeapInit+0xac>)
 8015960:	4413      	add	r3, r2
 8015962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015968:	4a1d      	ldr	r2, [pc, #116]	@ (80159e0 <prvHeapInit+0xb0>)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801596e:	4b1c      	ldr	r3, [pc, #112]	@ (80159e0 <prvHeapInit+0xb0>)
 8015970:	2200      	movs	r2, #0
 8015972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	68ba      	ldr	r2, [r7, #8]
 8015978:	4413      	add	r3, r2
 801597a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801597c:	2208      	movs	r2, #8
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	1a9b      	subs	r3, r3, r2
 8015982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f023 0307 	bic.w	r3, r3, #7
 801598a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	4a15      	ldr	r2, [pc, #84]	@ (80159e4 <prvHeapInit+0xb4>)
 8015990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015992:	4b14      	ldr	r3, [pc, #80]	@ (80159e4 <prvHeapInit+0xb4>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	2200      	movs	r2, #0
 8015998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801599a:	4b12      	ldr	r3, [pc, #72]	@ (80159e4 <prvHeapInit+0xb4>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	2200      	movs	r2, #0
 80159a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	1ad2      	subs	r2, r2, r3
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80159b0:	4b0c      	ldr	r3, [pc, #48]	@ (80159e4 <prvHeapInit+0xb4>)
 80159b2:	681a      	ldr	r2, [r3, #0]
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	4a0a      	ldr	r2, [pc, #40]	@ (80159e8 <prvHeapInit+0xb8>)
 80159be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	4a09      	ldr	r2, [pc, #36]	@ (80159ec <prvHeapInit+0xbc>)
 80159c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80159c8:	4b09      	ldr	r3, [pc, #36]	@ (80159f0 <prvHeapInit+0xc0>)
 80159ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80159ce:	601a      	str	r2, [r3, #0]
}
 80159d0:	bf00      	nop
 80159d2:	3714      	adds	r7, #20
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr
 80159dc:	24071d38 	.word	0x24071d38
 80159e0:	24075938 	.word	0x24075938
 80159e4:	24075940 	.word	0x24075940
 80159e8:	24075948 	.word	0x24075948
 80159ec:	24075944 	.word	0x24075944
 80159f0:	24075954 	.word	0x24075954

080159f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80159fc:	4b28      	ldr	r3, [pc, #160]	@ (8015aa0 <prvInsertBlockIntoFreeList+0xac>)
 80159fe:	60fb      	str	r3, [r7, #12]
 8015a00:	e002      	b.n	8015a08 <prvInsertBlockIntoFreeList+0x14>
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	60fb      	str	r3, [r7, #12]
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d8f7      	bhi.n	8015a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	68ba      	ldr	r2, [r7, #8]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d108      	bne.n	8015a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	685a      	ldr	r2, [r3, #4]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	441a      	add	r2, r3
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	441a      	add	r2, r3
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d118      	bne.n	8015a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	4b15      	ldr	r3, [pc, #84]	@ (8015aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d00d      	beq.n	8015a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	685a      	ldr	r2, [r3, #4]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	441a      	add	r2, r3
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	601a      	str	r2, [r3, #0]
 8015a70:	e008      	b.n	8015a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015a72:	4b0c      	ldr	r3, [pc, #48]	@ (8015aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	601a      	str	r2, [r3, #0]
 8015a7a:	e003      	b.n	8015a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	681a      	ldr	r2, [r3, #0]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015a84:	68fa      	ldr	r2, [r7, #12]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d002      	beq.n	8015a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	687a      	ldr	r2, [r7, #4]
 8015a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a92:	bf00      	nop
 8015a94:	3714      	adds	r7, #20
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	24075938 	.word	0x24075938
 8015aa4:	24075940 	.word	0x24075940

08015aa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015aac:	2200      	movs	r2, #0
 8015aae:	4913      	ldr	r1, [pc, #76]	@ (8015afc <MX_USB_DEVICE_Init+0x54>)
 8015ab0:	4813      	ldr	r0, [pc, #76]	@ (8015b00 <MX_USB_DEVICE_Init+0x58>)
 8015ab2:	f7fb ff2d 	bl	8011910 <USBD_Init>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d001      	beq.n	8015ac0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015abc:	f7eb fee5 	bl	800188a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015ac0:	4910      	ldr	r1, [pc, #64]	@ (8015b04 <MX_USB_DEVICE_Init+0x5c>)
 8015ac2:	480f      	ldr	r0, [pc, #60]	@ (8015b00 <MX_USB_DEVICE_Init+0x58>)
 8015ac4:	f7fb ff54 	bl	8011970 <USBD_RegisterClass>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d001      	beq.n	8015ad2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015ace:	f7eb fedc 	bl	800188a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015ad2:	490d      	ldr	r1, [pc, #52]	@ (8015b08 <MX_USB_DEVICE_Init+0x60>)
 8015ad4:	480a      	ldr	r0, [pc, #40]	@ (8015b00 <MX_USB_DEVICE_Init+0x58>)
 8015ad6:	f7fb fe4b 	bl	8011770 <USBD_CDC_RegisterInterface>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d001      	beq.n	8015ae4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015ae0:	f7eb fed3 	bl	800188a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015ae4:	4806      	ldr	r0, [pc, #24]	@ (8015b00 <MX_USB_DEVICE_Init+0x58>)
 8015ae6:	f7fb ff79 	bl	80119dc <USBD_Start>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d001      	beq.n	8015af4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015af0:	f7eb fecb 	bl	800188a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015af4:	f7f2 fd4a 	bl	800858c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015af8:	bf00      	nop
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	240000b4 	.word	0x240000b4
 8015b00:	24075958 	.word	0x24075958
 8015b04:	2400001c 	.word	0x2400001c
 8015b08:	240000a0 	.word	0x240000a0

08015b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015b10:	2200      	movs	r2, #0
 8015b12:	4905      	ldr	r1, [pc, #20]	@ (8015b28 <CDC_Init_FS+0x1c>)
 8015b14:	4805      	ldr	r0, [pc, #20]	@ (8015b2c <CDC_Init_FS+0x20>)
 8015b16:	f7fb fe45 	bl	80117a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015b1a:	4905      	ldr	r1, [pc, #20]	@ (8015b30 <CDC_Init_FS+0x24>)
 8015b1c:	4803      	ldr	r0, [pc, #12]	@ (8015b2c <CDC_Init_FS+0x20>)
 8015b1e:	f7fb fe63 	bl	80117e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	24076434 	.word	0x24076434
 8015b2c:	24075958 	.word	0x24075958
 8015b30:	24075c34 	.word	0x24075c34

08015b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015b34:	b480      	push	{r7}
 8015b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b42:	4770      	bx	lr

08015b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015b44:	b480      	push	{r7}
 8015b46:	b083      	sub	sp, #12
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	6039      	str	r1, [r7, #0]
 8015b4e:	71fb      	strb	r3, [r7, #7]
 8015b50:	4613      	mov	r3, r2
 8015b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015b54:	79fb      	ldrb	r3, [r7, #7]
 8015b56:	2b23      	cmp	r3, #35	@ 0x23
 8015b58:	d84a      	bhi.n	8015bf0 <CDC_Control_FS+0xac>
 8015b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8015b60 <CDC_Control_FS+0x1c>)
 8015b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b60:	08015bf1 	.word	0x08015bf1
 8015b64:	08015bf1 	.word	0x08015bf1
 8015b68:	08015bf1 	.word	0x08015bf1
 8015b6c:	08015bf1 	.word	0x08015bf1
 8015b70:	08015bf1 	.word	0x08015bf1
 8015b74:	08015bf1 	.word	0x08015bf1
 8015b78:	08015bf1 	.word	0x08015bf1
 8015b7c:	08015bf1 	.word	0x08015bf1
 8015b80:	08015bf1 	.word	0x08015bf1
 8015b84:	08015bf1 	.word	0x08015bf1
 8015b88:	08015bf1 	.word	0x08015bf1
 8015b8c:	08015bf1 	.word	0x08015bf1
 8015b90:	08015bf1 	.word	0x08015bf1
 8015b94:	08015bf1 	.word	0x08015bf1
 8015b98:	08015bf1 	.word	0x08015bf1
 8015b9c:	08015bf1 	.word	0x08015bf1
 8015ba0:	08015bf1 	.word	0x08015bf1
 8015ba4:	08015bf1 	.word	0x08015bf1
 8015ba8:	08015bf1 	.word	0x08015bf1
 8015bac:	08015bf1 	.word	0x08015bf1
 8015bb0:	08015bf1 	.word	0x08015bf1
 8015bb4:	08015bf1 	.word	0x08015bf1
 8015bb8:	08015bf1 	.word	0x08015bf1
 8015bbc:	08015bf1 	.word	0x08015bf1
 8015bc0:	08015bf1 	.word	0x08015bf1
 8015bc4:	08015bf1 	.word	0x08015bf1
 8015bc8:	08015bf1 	.word	0x08015bf1
 8015bcc:	08015bf1 	.word	0x08015bf1
 8015bd0:	08015bf1 	.word	0x08015bf1
 8015bd4:	08015bf1 	.word	0x08015bf1
 8015bd8:	08015bf1 	.word	0x08015bf1
 8015bdc:	08015bf1 	.word	0x08015bf1
 8015be0:	08015bf1 	.word	0x08015bf1
 8015be4:	08015bf1 	.word	0x08015bf1
 8015be8:	08015bf1 	.word	0x08015bf1
 8015bec:	08015bf1 	.word	0x08015bf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015bf0:	bf00      	nop
  }

  return (USBD_OK);
 8015bf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015c0a:	6879      	ldr	r1, [r7, #4]
 8015c0c:	4805      	ldr	r0, [pc, #20]	@ (8015c24 <CDC_Receive_FS+0x24>)
 8015c0e:	f7fb fdeb 	bl	80117e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015c12:	4804      	ldr	r0, [pc, #16]	@ (8015c24 <CDC_Receive_FS+0x24>)
 8015c14:	f7fb fe46 	bl	80118a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	24075958 	.word	0x24075958

08015c28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	460b      	mov	r3, r1
 8015c32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015c34:	2300      	movs	r3, #0
 8015c36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015c38:	4b0d      	ldr	r3, [pc, #52]	@ (8015c70 <CDC_Transmit_FS+0x48>)
 8015c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015c3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015c40:	68bb      	ldr	r3, [r7, #8]
 8015c42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d001      	beq.n	8015c4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	e00b      	b.n	8015c66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015c4e:	887b      	ldrh	r3, [r7, #2]
 8015c50:	461a      	mov	r2, r3
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	4806      	ldr	r0, [pc, #24]	@ (8015c70 <CDC_Transmit_FS+0x48>)
 8015c56:	f7fb fda5 	bl	80117a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015c5a:	4805      	ldr	r0, [pc, #20]	@ (8015c70 <CDC_Transmit_FS+0x48>)
 8015c5c:	f7fb fde2 	bl	8011824 <USBD_CDC_TransmitPacket>
 8015c60:	4603      	mov	r3, r0
 8015c62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	24075958 	.word	0x24075958

08015c74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015c74:	b480      	push	{r7}
 8015c76:	b087      	sub	sp, #28
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	60f8      	str	r0, [r7, #12]
 8015c7c:	60b9      	str	r1, [r7, #8]
 8015c7e:	4613      	mov	r3, r2
 8015c80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015c82:	2300      	movs	r3, #0
 8015c84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	371c      	adds	r7, #28
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr
	...

08015c98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	6039      	str	r1, [r7, #0]
 8015ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	2212      	movs	r2, #18
 8015ca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015caa:	4b03      	ldr	r3, [pc, #12]	@ (8015cb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	370c      	adds	r7, #12
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	240000d4 	.word	0x240000d4

08015cbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	6039      	str	r1, [r7, #0]
 8015cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	2204      	movs	r2, #4
 8015ccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015cce:	4b03      	ldr	r3, [pc, #12]	@ (8015cdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	370c      	adds	r7, #12
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr
 8015cdc:	240000e8 	.word	0x240000e8

08015ce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	6039      	str	r1, [r7, #0]
 8015cea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015cec:	79fb      	ldrb	r3, [r7, #7]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d105      	bne.n	8015cfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015cf2:	683a      	ldr	r2, [r7, #0]
 8015cf4:	4907      	ldr	r1, [pc, #28]	@ (8015d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8015cf6:	4808      	ldr	r0, [pc, #32]	@ (8015d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8015cf8:	f7fd f84a 	bl	8012d90 <USBD_GetString>
 8015cfc:	e004      	b.n	8015d08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	4904      	ldr	r1, [pc, #16]	@ (8015d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8015d02:	4805      	ldr	r0, [pc, #20]	@ (8015d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8015d04:	f7fd f844 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d08:	4b02      	ldr	r3, [pc, #8]	@ (8015d14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	24076c34 	.word	0x24076c34
 8015d18:	0801a544 	.word	0x0801a544

08015d1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	4603      	mov	r3, r0
 8015d24:	6039      	str	r1, [r7, #0]
 8015d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015d28:	683a      	ldr	r2, [r7, #0]
 8015d2a:	4904      	ldr	r1, [pc, #16]	@ (8015d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015d2c:	4804      	ldr	r0, [pc, #16]	@ (8015d40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015d2e:	f7fd f82f 	bl	8012d90 <USBD_GetString>
  return USBD_StrDesc;
 8015d32:	4b02      	ldr	r3, [pc, #8]	@ (8015d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	24076c34 	.word	0x24076c34
 8015d40:	0801a55c 	.word	0x0801a55c

08015d44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	6039      	str	r1, [r7, #0]
 8015d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	221a      	movs	r2, #26
 8015d54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015d56:	f000 f843 	bl	8015de0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015d5a:	4b02      	ldr	r3, [pc, #8]	@ (8015d64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	240000ec 	.word	0x240000ec

08015d68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b082      	sub	sp, #8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	4603      	mov	r3, r0
 8015d70:	6039      	str	r1, [r7, #0]
 8015d72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015d74:	79fb      	ldrb	r3, [r7, #7]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d105      	bne.n	8015d86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d7a:	683a      	ldr	r2, [r7, #0]
 8015d7c:	4907      	ldr	r1, [pc, #28]	@ (8015d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d7e:	4808      	ldr	r0, [pc, #32]	@ (8015da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d80:	f7fd f806 	bl	8012d90 <USBD_GetString>
 8015d84:	e004      	b.n	8015d90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d86:	683a      	ldr	r2, [r7, #0]
 8015d88:	4904      	ldr	r1, [pc, #16]	@ (8015d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d8a:	4805      	ldr	r0, [pc, #20]	@ (8015da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d8c:	f7fd f800 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d90:	4b02      	ldr	r3, [pc, #8]	@ (8015d9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	24076c34 	.word	0x24076c34
 8015da0:	0801a570 	.word	0x0801a570

08015da4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	4603      	mov	r3, r0
 8015dac:	6039      	str	r1, [r7, #0]
 8015dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015db0:	79fb      	ldrb	r3, [r7, #7]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d105      	bne.n	8015dc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	4907      	ldr	r1, [pc, #28]	@ (8015dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015dba:	4808      	ldr	r0, [pc, #32]	@ (8015ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015dbc:	f7fc ffe8 	bl	8012d90 <USBD_GetString>
 8015dc0:	e004      	b.n	8015dcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	4904      	ldr	r1, [pc, #16]	@ (8015dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015dc6:	4805      	ldr	r0, [pc, #20]	@ (8015ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015dc8:	f7fc ffe2 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015dcc:	4b02      	ldr	r3, [pc, #8]	@ (8015dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3708      	adds	r7, #8
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	24076c34 	.word	0x24076c34
 8015ddc:	0801a57c 	.word	0x0801a57c

08015de0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b084      	sub	sp, #16
 8015de4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015de6:	4b0f      	ldr	r3, [pc, #60]	@ (8015e24 <Get_SerialNum+0x44>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015dec:	4b0e      	ldr	r3, [pc, #56]	@ (8015e28 <Get_SerialNum+0x48>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015df2:	4b0e      	ldr	r3, [pc, #56]	@ (8015e2c <Get_SerialNum+0x4c>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d009      	beq.n	8015e1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015e06:	2208      	movs	r2, #8
 8015e08:	4909      	ldr	r1, [pc, #36]	@ (8015e30 <Get_SerialNum+0x50>)
 8015e0a:	68f8      	ldr	r0, [r7, #12]
 8015e0c:	f000 f814 	bl	8015e38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015e10:	2204      	movs	r2, #4
 8015e12:	4908      	ldr	r1, [pc, #32]	@ (8015e34 <Get_SerialNum+0x54>)
 8015e14:	68b8      	ldr	r0, [r7, #8]
 8015e16:	f000 f80f 	bl	8015e38 <IntToUnicode>
  }
}
 8015e1a:	bf00      	nop
 8015e1c:	3710      	adds	r7, #16
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	1ff1e800 	.word	0x1ff1e800
 8015e28:	1ff1e804 	.word	0x1ff1e804
 8015e2c:	1ff1e808 	.word	0x1ff1e808
 8015e30:	240000ee 	.word	0x240000ee
 8015e34:	240000fe 	.word	0x240000fe

08015e38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b087      	sub	sp, #28
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	4613      	mov	r3, r2
 8015e44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015e46:	2300      	movs	r3, #0
 8015e48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	75fb      	strb	r3, [r7, #23]
 8015e4e:	e027      	b.n	8015ea0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	0f1b      	lsrs	r3, r3, #28
 8015e54:	2b09      	cmp	r3, #9
 8015e56:	d80b      	bhi.n	8015e70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	0f1b      	lsrs	r3, r3, #28
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	7dfb      	ldrb	r3, [r7, #23]
 8015e60:	005b      	lsls	r3, r3, #1
 8015e62:	4619      	mov	r1, r3
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	440b      	add	r3, r1
 8015e68:	3230      	adds	r2, #48	@ 0x30
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	701a      	strb	r2, [r3, #0]
 8015e6e:	e00a      	b.n	8015e86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	0f1b      	lsrs	r3, r3, #28
 8015e74:	b2da      	uxtb	r2, r3
 8015e76:	7dfb      	ldrb	r3, [r7, #23]
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	440b      	add	r3, r1
 8015e80:	3237      	adds	r2, #55	@ 0x37
 8015e82:	b2d2      	uxtb	r2, r2
 8015e84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	011b      	lsls	r3, r3, #4
 8015e8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015e8c:	7dfb      	ldrb	r3, [r7, #23]
 8015e8e:	005b      	lsls	r3, r3, #1
 8015e90:	3301      	adds	r3, #1
 8015e92:	68ba      	ldr	r2, [r7, #8]
 8015e94:	4413      	add	r3, r2
 8015e96:	2200      	movs	r2, #0
 8015e98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015e9a:	7dfb      	ldrb	r3, [r7, #23]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	75fb      	strb	r3, [r7, #23]
 8015ea0:	7dfa      	ldrb	r2, [r7, #23]
 8015ea2:	79fb      	ldrb	r3, [r7, #7]
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d3d3      	bcc.n	8015e50 <IntToUnicode+0x18>
  }
}
 8015ea8:	bf00      	nop
 8015eaa:	bf00      	nop
 8015eac:	371c      	adds	r7, #28
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb4:	4770      	bx	lr
	...

08015eb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b0ba      	sub	sp, #232	@ 0xe8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ec0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	601a      	str	r2, [r3, #0]
 8015ec8:	605a      	str	r2, [r3, #4]
 8015eca:	609a      	str	r2, [r3, #8]
 8015ecc:	60da      	str	r2, [r3, #12]
 8015ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015ed0:	f107 0310 	add.w	r3, r7, #16
 8015ed4:	22c0      	movs	r2, #192	@ 0xc0
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f001 ff65 	bl	8017da8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a34      	ldr	r2, [pc, #208]	@ (8015fb4 <HAL_PCD_MspInit+0xfc>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d161      	bne.n	8015fac <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015ee8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015eec:	f04f 0300 	mov.w	r3, #0
 8015ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015ef4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8015ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015efc:	f107 0310 	add.w	r3, r7, #16
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7f3 fc35 	bl	8009770 <HAL_RCCEx_PeriphCLKConfig>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8015f0c:	f7eb fcbd 	bl	800188a <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015f10:	f7f2 fb3c 	bl	800858c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f14:	4b28      	ldr	r3, [pc, #160]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015f1a:	4a27      	ldr	r2, [pc, #156]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f1c:	f043 0301 	orr.w	r3, r3, #1
 8015f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015f24:	4b24      	ldr	r3, [pc, #144]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015f2a:	f003 0301 	and.w	r3, r3, #1
 8015f2e:	60fb      	str	r3, [r7, #12]
 8015f30:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f40:	2300      	movs	r3, #0
 8015f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015f46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	481b      	ldr	r0, [pc, #108]	@ (8015fbc <HAL_PCD_MspInit+0x104>)
 8015f4e:	f7ee ffef 	bl	8004f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015f52:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f5a:	2302      	movs	r3, #2
 8015f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f60:	2300      	movs	r3, #0
 8015f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015f66:	2300      	movs	r3, #0
 8015f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015f6c:	230a      	movs	r3, #10
 8015f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015f72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015f76:	4619      	mov	r1, r3
 8015f78:	4810      	ldr	r0, [pc, #64]	@ (8015fbc <HAL_PCD_MspInit+0x104>)
 8015f7a:	f7ee ffd9 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015f84:	4a0c      	ldr	r2, [pc, #48]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015f8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8015f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8015fb8 <HAL_PCD_MspInit+0x100>)
 8015f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015f98:	60bb      	str	r3, [r7, #8]
 8015f9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	2105      	movs	r1, #5
 8015fa0:	2065      	movs	r0, #101	@ 0x65
 8015fa2:	f7ec fcf1 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015fa6:	2065      	movs	r0, #101	@ 0x65
 8015fa8:	f7ec fd08 	bl	80029bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015fac:	bf00      	nop
 8015fae:	37e8      	adds	r7, #232	@ 0xe8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	40080000 	.word	0x40080000
 8015fb8:	58024400 	.word	0x58024400
 8015fbc:	58020000 	.word	0x58020000

08015fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	4610      	mov	r0, r2
 8015fd8:	f7fb fd4d 	bl	8011a76 <USBD_LL_SetupStage>
}
 8015fdc:	bf00      	nop
 8015fde:	3708      	adds	r7, #8
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	460b      	mov	r3, r1
 8015fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015ff6:	78fa      	ldrb	r2, [r7, #3]
 8015ff8:	6879      	ldr	r1, [r7, #4]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	00db      	lsls	r3, r3, #3
 8015ffe:	4413      	add	r3, r2
 8016000:	009b      	lsls	r3, r3, #2
 8016002:	440b      	add	r3, r1
 8016004:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	78fb      	ldrb	r3, [r7, #3]
 801600c:	4619      	mov	r1, r3
 801600e:	f7fb fd87 	bl	8011b20 <USBD_LL_DataOutStage>
}
 8016012:	bf00      	nop
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b082      	sub	sp, #8
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	460b      	mov	r3, r1
 8016024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801602c:	78fa      	ldrb	r2, [r7, #3]
 801602e:	6879      	ldr	r1, [r7, #4]
 8016030:	4613      	mov	r3, r2
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	4413      	add	r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	440b      	add	r3, r1
 801603a:	3320      	adds	r3, #32
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	78fb      	ldrb	r3, [r7, #3]
 8016040:	4619      	mov	r1, r3
 8016042:	f7fb fe20 	bl	8011c86 <USBD_LL_DataInStage>
}
 8016046:	bf00      	nop
 8016048:	3708      	adds	r7, #8
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}

0801604e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b082      	sub	sp, #8
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801605c:	4618      	mov	r0, r3
 801605e:	f7fb ff5a 	bl	8011f16 <USBD_LL_SOF>
}
 8016062:	bf00      	nop
 8016064:	3708      	adds	r7, #8
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}

0801606a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801606a:	b580      	push	{r7, lr}
 801606c:	b084      	sub	sp, #16
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016072:	2301      	movs	r3, #1
 8016074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	79db      	ldrb	r3, [r3, #7]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d102      	bne.n	8016084 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801607e:	2300      	movs	r3, #0
 8016080:	73fb      	strb	r3, [r7, #15]
 8016082:	e008      	b.n	8016096 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	79db      	ldrb	r3, [r3, #7]
 8016088:	2b02      	cmp	r3, #2
 801608a:	d102      	bne.n	8016092 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801608c:	2301      	movs	r3, #1
 801608e:	73fb      	strb	r3, [r7, #15]
 8016090:	e001      	b.n	8016096 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016092:	f7eb fbfa 	bl	800188a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801609c:	7bfa      	ldrb	r2, [r7, #15]
 801609e:	4611      	mov	r1, r2
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fb fef4 	bl	8011e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fb fe9c 	bl	8011dea <USBD_LL_Reset>
}
 80160b2:	bf00      	nop
 80160b4:	3710      	adds	r7, #16
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
	...

080160bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7fb feef 	bl	8011eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	6812      	ldr	r2, [r2, #0]
 80160de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80160e2:	f043 0301 	orr.w	r3, r3, #1
 80160e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	7adb      	ldrb	r3, [r3, #11]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d005      	beq.n	80160fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80160f0:	4b04      	ldr	r3, [pc, #16]	@ (8016104 <HAL_PCD_SuspendCallback+0x48>)
 80160f2:	691b      	ldr	r3, [r3, #16]
 80160f4:	4a03      	ldr	r2, [pc, #12]	@ (8016104 <HAL_PCD_SuspendCallback+0x48>)
 80160f6:	f043 0306 	orr.w	r3, r3, #6
 80160fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80160fc:	bf00      	nop
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	e000ed00 	.word	0xe000ed00

08016108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016116:	4618      	mov	r0, r3
 8016118:	f7fb fee5 	bl	8011ee6 <USBD_LL_Resume>
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	460b      	mov	r3, r1
 801612e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016136:	78fa      	ldrb	r2, [r7, #3]
 8016138:	4611      	mov	r1, r2
 801613a:	4618      	mov	r0, r3
 801613c:	f7fb ff3d 	bl	8011fba <USBD_LL_IsoOUTIncomplete>
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	460b      	mov	r3, r1
 8016152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801615a:	78fa      	ldrb	r2, [r7, #3]
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7fb fef9 	bl	8011f56 <USBD_LL_IsoINIncomplete>
}
 8016164:	bf00      	nop
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}

0801616c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b082      	sub	sp, #8
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801617a:	4618      	mov	r0, r3
 801617c:	f7fb ff4f 	bl	801201e <USBD_LL_DevConnected>
}
 8016180:	bf00      	nop
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016196:	4618      	mov	r0, r3
 8016198:	f7fb ff4c 	bl	8012034 <USBD_LL_DevDisconnected>
}
 801619c:	bf00      	nop
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	781b      	ldrb	r3, [r3, #0]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d13e      	bne.n	8016232 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80161b4:	4a21      	ldr	r2, [pc, #132]	@ (801623c <USBD_LL_Init+0x98>)
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	4a1f      	ldr	r2, [pc, #124]	@ (801623c <USBD_LL_Init+0x98>)
 80161c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80161c4:	4b1d      	ldr	r3, [pc, #116]	@ (801623c <USBD_LL_Init+0x98>)
 80161c6:	4a1e      	ldr	r2, [pc, #120]	@ (8016240 <USBD_LL_Init+0x9c>)
 80161c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80161ca:	4b1c      	ldr	r3, [pc, #112]	@ (801623c <USBD_LL_Init+0x98>)
 80161cc:	2209      	movs	r2, #9
 80161ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80161d0:	4b1a      	ldr	r3, [pc, #104]	@ (801623c <USBD_LL_Init+0x98>)
 80161d2:	2202      	movs	r2, #2
 80161d4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80161d6:	4b19      	ldr	r3, [pc, #100]	@ (801623c <USBD_LL_Init+0x98>)
 80161d8:	2200      	movs	r2, #0
 80161da:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80161dc:	4b17      	ldr	r3, [pc, #92]	@ (801623c <USBD_LL_Init+0x98>)
 80161de:	2202      	movs	r2, #2
 80161e0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80161e2:	4b16      	ldr	r3, [pc, #88]	@ (801623c <USBD_LL_Init+0x98>)
 80161e4:	2200      	movs	r2, #0
 80161e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80161e8:	4b14      	ldr	r3, [pc, #80]	@ (801623c <USBD_LL_Init+0x98>)
 80161ea:	2200      	movs	r2, #0
 80161ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80161ee:	4b13      	ldr	r3, [pc, #76]	@ (801623c <USBD_LL_Init+0x98>)
 80161f0:	2200      	movs	r2, #0
 80161f2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80161f4:	4b11      	ldr	r3, [pc, #68]	@ (801623c <USBD_LL_Init+0x98>)
 80161f6:	2201      	movs	r2, #1
 80161f8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80161fa:	4b10      	ldr	r3, [pc, #64]	@ (801623c <USBD_LL_Init+0x98>)
 80161fc:	2201      	movs	r2, #1
 80161fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016200:	4b0e      	ldr	r3, [pc, #56]	@ (801623c <USBD_LL_Init+0x98>)
 8016202:	2200      	movs	r2, #0
 8016204:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016206:	480d      	ldr	r0, [pc, #52]	@ (801623c <USBD_LL_Init+0x98>)
 8016208:	f7f0 fee8 	bl	8006fdc <HAL_PCD_Init>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d001      	beq.n	8016216 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016212:	f7eb fb3a 	bl	800188a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016216:	2180      	movs	r1, #128	@ 0x80
 8016218:	4808      	ldr	r0, [pc, #32]	@ (801623c <USBD_LL_Init+0x98>)
 801621a:	f7f2 f93c 	bl	8008496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801621e:	2240      	movs	r2, #64	@ 0x40
 8016220:	2100      	movs	r1, #0
 8016222:	4806      	ldr	r0, [pc, #24]	@ (801623c <USBD_LL_Init+0x98>)
 8016224:	f7f2 f8f0 	bl	8008408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016228:	2280      	movs	r2, #128	@ 0x80
 801622a:	2101      	movs	r1, #1
 801622c:	4803      	ldr	r0, [pc, #12]	@ (801623c <USBD_LL_Init+0x98>)
 801622e:	f7f2 f8eb 	bl	8008408 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016232:	2300      	movs	r3, #0
}
 8016234:	4618      	mov	r0, r3
 8016236:	3708      	adds	r7, #8
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	24076e34 	.word	0x24076e34
 8016240:	40080000 	.word	0x40080000

08016244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801624c:	2300      	movs	r3, #0
 801624e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016250:	2300      	movs	r3, #0
 8016252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801625a:	4618      	mov	r0, r3
 801625c:	f7f0 ffca 	bl	80071f4 <HAL_PCD_Start>
 8016260:	4603      	mov	r3, r0
 8016262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016264:	7bfb      	ldrb	r3, [r7, #15]
 8016266:	4618      	mov	r0, r3
 8016268:	f000 f942 	bl	80164f0 <USBD_Get_USB_Status>
 801626c:	4603      	mov	r3, r0
 801626e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016270:	7bbb      	ldrb	r3, [r7, #14]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801627a:	b580      	push	{r7, lr}
 801627c:	b084      	sub	sp, #16
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
 8016282:	4608      	mov	r0, r1
 8016284:	4611      	mov	r1, r2
 8016286:	461a      	mov	r2, r3
 8016288:	4603      	mov	r3, r0
 801628a:	70fb      	strb	r3, [r7, #3]
 801628c:	460b      	mov	r3, r1
 801628e:	70bb      	strb	r3, [r7, #2]
 8016290:	4613      	mov	r3, r2
 8016292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016294:	2300      	movs	r3, #0
 8016296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016298:	2300      	movs	r3, #0
 801629a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80162a2:	78bb      	ldrb	r3, [r7, #2]
 80162a4:	883a      	ldrh	r2, [r7, #0]
 80162a6:	78f9      	ldrb	r1, [r7, #3]
 80162a8:	f7f1 fccb 	bl	8007c42 <HAL_PCD_EP_Open>
 80162ac:	4603      	mov	r3, r0
 80162ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162b0:	7bfb      	ldrb	r3, [r7, #15]
 80162b2:	4618      	mov	r0, r3
 80162b4:	f000 f91c 	bl	80164f0 <USBD_Get_USB_Status>
 80162b8:	4603      	mov	r3, r0
 80162ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3710      	adds	r7, #16
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}

080162c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162c6:	b580      	push	{r7, lr}
 80162c8:	b084      	sub	sp, #16
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	460b      	mov	r3, r1
 80162d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162d2:	2300      	movs	r3, #0
 80162d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162d6:	2300      	movs	r3, #0
 80162d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80162e0:	78fa      	ldrb	r2, [r7, #3]
 80162e2:	4611      	mov	r1, r2
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7f1 fd14 	bl	8007d12 <HAL_PCD_EP_Close>
 80162ea:	4603      	mov	r3, r0
 80162ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162ee:	7bfb      	ldrb	r3, [r7, #15]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f000 f8fd 	bl	80164f0 <USBD_Get_USB_Status>
 80162f6:	4603      	mov	r3, r0
 80162f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3710      	adds	r7, #16
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}

08016304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b084      	sub	sp, #16
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	460b      	mov	r3, r1
 801630e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016310:	2300      	movs	r3, #0
 8016312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016314:	2300      	movs	r3, #0
 8016316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801631e:	78fa      	ldrb	r2, [r7, #3]
 8016320:	4611      	mov	r1, r2
 8016322:	4618      	mov	r0, r3
 8016324:	f7f1 fdcc 	bl	8007ec0 <HAL_PCD_EP_SetStall>
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801632c:	7bfb      	ldrb	r3, [r7, #15]
 801632e:	4618      	mov	r0, r3
 8016330:	f000 f8de 	bl	80164f0 <USBD_Get_USB_Status>
 8016334:	4603      	mov	r3, r0
 8016336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016338:	7bbb      	ldrb	r3, [r7, #14]
}
 801633a:	4618      	mov	r0, r3
 801633c:	3710      	adds	r7, #16
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b084      	sub	sp, #16
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]
 801634a:	460b      	mov	r3, r1
 801634c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801634e:	2300      	movs	r3, #0
 8016350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016352:	2300      	movs	r3, #0
 8016354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801635c:	78fa      	ldrb	r2, [r7, #3]
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f7f1 fe10 	bl	8007f86 <HAL_PCD_EP_ClrStall>
 8016366:	4603      	mov	r3, r0
 8016368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801636a:	7bfb      	ldrb	r3, [r7, #15]
 801636c:	4618      	mov	r0, r3
 801636e:	f000 f8bf 	bl	80164f0 <USBD_Get_USB_Status>
 8016372:	4603      	mov	r3, r0
 8016374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016376:	7bbb      	ldrb	r3, [r7, #14]
}
 8016378:	4618      	mov	r0, r3
 801637a:	3710      	adds	r7, #16
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016380:	b480      	push	{r7}
 8016382:	b085      	sub	sp, #20
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	460b      	mov	r3, r1
 801638a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016398:	2b00      	cmp	r3, #0
 801639a:	da0b      	bge.n	80163b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801639c:	78fb      	ldrb	r3, [r7, #3]
 801639e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80163a2:	68f9      	ldr	r1, [r7, #12]
 80163a4:	4613      	mov	r3, r2
 80163a6:	00db      	lsls	r3, r3, #3
 80163a8:	4413      	add	r3, r2
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	440b      	add	r3, r1
 80163ae:	3316      	adds	r3, #22
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	e00b      	b.n	80163cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80163b4:	78fb      	ldrb	r3, [r7, #3]
 80163b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80163ba:	68f9      	ldr	r1, [r7, #12]
 80163bc:	4613      	mov	r3, r2
 80163be:	00db      	lsls	r3, r3, #3
 80163c0:	4413      	add	r3, r2
 80163c2:	009b      	lsls	r3, r3, #2
 80163c4:	440b      	add	r3, r1
 80163c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80163ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3714      	adds	r7, #20
 80163d0:	46bd      	mov	sp, r7
 80163d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d6:	4770      	bx	lr

080163d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
 80163e0:	460b      	mov	r3, r1
 80163e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163e4:	2300      	movs	r3, #0
 80163e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163e8:	2300      	movs	r3, #0
 80163ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80163f2:	78fa      	ldrb	r2, [r7, #3]
 80163f4:	4611      	mov	r1, r2
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7f1 fbff 	bl	8007bfa <HAL_PCD_SetAddress>
 80163fc:	4603      	mov	r3, r0
 80163fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016400:	7bfb      	ldrb	r3, [r7, #15]
 8016402:	4618      	mov	r0, r3
 8016404:	f000 f874 	bl	80164f0 <USBD_Get_USB_Status>
 8016408:	4603      	mov	r3, r0
 801640a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801640c:	7bbb      	ldrb	r3, [r7, #14]
}
 801640e:	4618      	mov	r0, r3
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}

08016416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016416:	b580      	push	{r7, lr}
 8016418:	b086      	sub	sp, #24
 801641a:	af00      	add	r7, sp, #0
 801641c:	60f8      	str	r0, [r7, #12]
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	603b      	str	r3, [r7, #0]
 8016422:	460b      	mov	r3, r1
 8016424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016426:	2300      	movs	r3, #0
 8016428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801642a:	2300      	movs	r3, #0
 801642c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016434:	7af9      	ldrb	r1, [r7, #11]
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	687a      	ldr	r2, [r7, #4]
 801643a:	f7f1 fd07 	bl	8007e4c <HAL_PCD_EP_Transmit>
 801643e:	4603      	mov	r3, r0
 8016440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016442:	7dfb      	ldrb	r3, [r7, #23]
 8016444:	4618      	mov	r0, r3
 8016446:	f000 f853 	bl	80164f0 <USBD_Get_USB_Status>
 801644a:	4603      	mov	r3, r0
 801644c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801644e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016450:	4618      	mov	r0, r3
 8016452:	3718      	adds	r7, #24
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b086      	sub	sp, #24
 801645c:	af00      	add	r7, sp, #0
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	607a      	str	r2, [r7, #4]
 8016462:	603b      	str	r3, [r7, #0]
 8016464:	460b      	mov	r3, r1
 8016466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016468:	2300      	movs	r3, #0
 801646a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801646c:	2300      	movs	r3, #0
 801646e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016476:	7af9      	ldrb	r1, [r7, #11]
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	f7f1 fc93 	bl	8007da6 <HAL_PCD_EP_Receive>
 8016480:	4603      	mov	r3, r0
 8016482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	4618      	mov	r0, r3
 8016488:	f000 f832 	bl	80164f0 <USBD_Get_USB_Status>
 801648c:	4603      	mov	r3, r0
 801648e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016490:	7dbb      	ldrb	r3, [r7, #22]
}
 8016492:	4618      	mov	r0, r3
 8016494:	3718      	adds	r7, #24
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}

0801649a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801649a:	b580      	push	{r7, lr}
 801649c:	b082      	sub	sp, #8
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
 80164a2:	460b      	mov	r3, r1
 80164a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80164ac:	78fa      	ldrb	r2, [r7, #3]
 80164ae:	4611      	mov	r1, r2
 80164b0:	4618      	mov	r0, r3
 80164b2:	f7f1 fcb3 	bl	8007e1c <HAL_PCD_EP_GetRxCount>
 80164b6:	4603      	mov	r3, r0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3708      	adds	r7, #8
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b083      	sub	sp, #12
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80164c8:	4b03      	ldr	r3, [pc, #12]	@ (80164d8 <USBD_static_malloc+0x18>)
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	370c      	adds	r7, #12
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	24077318 	.word	0x24077318

080164dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80164dc:	b480      	push	{r7}
 80164de:	b083      	sub	sp, #12
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80164e4:	bf00      	nop
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr

080164f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b085      	sub	sp, #20
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	4603      	mov	r3, r0
 80164f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164fa:	2300      	movs	r3, #0
 80164fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80164fe:	79fb      	ldrb	r3, [r7, #7]
 8016500:	2b03      	cmp	r3, #3
 8016502:	d817      	bhi.n	8016534 <USBD_Get_USB_Status+0x44>
 8016504:	a201      	add	r2, pc, #4	@ (adr r2, 801650c <USBD_Get_USB_Status+0x1c>)
 8016506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801650a:	bf00      	nop
 801650c:	0801651d 	.word	0x0801651d
 8016510:	08016523 	.word	0x08016523
 8016514:	08016529 	.word	0x08016529
 8016518:	0801652f 	.word	0x0801652f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	73fb      	strb	r3, [r7, #15]
    break;
 8016520:	e00b      	b.n	801653a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016522:	2303      	movs	r3, #3
 8016524:	73fb      	strb	r3, [r7, #15]
    break;
 8016526:	e008      	b.n	801653a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016528:	2301      	movs	r3, #1
 801652a:	73fb      	strb	r3, [r7, #15]
    break;
 801652c:	e005      	b.n	801653a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801652e:	2303      	movs	r3, #3
 8016530:	73fb      	strb	r3, [r7, #15]
    break;
 8016532:	e002      	b.n	801653a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016534:	2303      	movs	r3, #3
 8016536:	73fb      	strb	r3, [r7, #15]
    break;
 8016538:	bf00      	nop
  }
  return usb_status;
 801653a:	7bfb      	ldrb	r3, [r7, #15]
}
 801653c:	4618      	mov	r0, r3
 801653e:	3714      	adds	r7, #20
 8016540:	46bd      	mov	sp, r7
 8016542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016546:	4770      	bx	lr

08016548 <atof>:
 8016548:	2100      	movs	r1, #0
 801654a:	f000 be79 	b.w	8017240 <strtod>

0801654e <atoi>:
 801654e:	220a      	movs	r2, #10
 8016550:	2100      	movs	r1, #0
 8016552:	f000 befd 	b.w	8017350 <strtol>
	...

08016558 <malloc>:
 8016558:	4b02      	ldr	r3, [pc, #8]	@ (8016564 <malloc+0xc>)
 801655a:	4601      	mov	r1, r0
 801655c:	6818      	ldr	r0, [r3, #0]
 801655e:	f000 b82d 	b.w	80165bc <_malloc_r>
 8016562:	bf00      	nop
 8016564:	24000280 	.word	0x24000280

08016568 <free>:
 8016568:	4b02      	ldr	r3, [pc, #8]	@ (8016574 <free+0xc>)
 801656a:	4601      	mov	r1, r0
 801656c:	6818      	ldr	r0, [r3, #0]
 801656e:	f001 bdc3 	b.w	80180f8 <_free_r>
 8016572:	bf00      	nop
 8016574:	24000280 	.word	0x24000280

08016578 <sbrk_aligned>:
 8016578:	b570      	push	{r4, r5, r6, lr}
 801657a:	4e0f      	ldr	r6, [pc, #60]	@ (80165b8 <sbrk_aligned+0x40>)
 801657c:	460c      	mov	r4, r1
 801657e:	6831      	ldr	r1, [r6, #0]
 8016580:	4605      	mov	r5, r0
 8016582:	b911      	cbnz	r1, 801658a <sbrk_aligned+0x12>
 8016584:	f001 fd2c 	bl	8017fe0 <_sbrk_r>
 8016588:	6030      	str	r0, [r6, #0]
 801658a:	4621      	mov	r1, r4
 801658c:	4628      	mov	r0, r5
 801658e:	f001 fd27 	bl	8017fe0 <_sbrk_r>
 8016592:	1c43      	adds	r3, r0, #1
 8016594:	d103      	bne.n	801659e <sbrk_aligned+0x26>
 8016596:	f04f 34ff 	mov.w	r4, #4294967295
 801659a:	4620      	mov	r0, r4
 801659c:	bd70      	pop	{r4, r5, r6, pc}
 801659e:	1cc4      	adds	r4, r0, #3
 80165a0:	f024 0403 	bic.w	r4, r4, #3
 80165a4:	42a0      	cmp	r0, r4
 80165a6:	d0f8      	beq.n	801659a <sbrk_aligned+0x22>
 80165a8:	1a21      	subs	r1, r4, r0
 80165aa:	4628      	mov	r0, r5
 80165ac:	f001 fd18 	bl	8017fe0 <_sbrk_r>
 80165b0:	3001      	adds	r0, #1
 80165b2:	d1f2      	bne.n	801659a <sbrk_aligned+0x22>
 80165b4:	e7ef      	b.n	8016596 <sbrk_aligned+0x1e>
 80165b6:	bf00      	nop
 80165b8:	24077538 	.word	0x24077538

080165bc <_malloc_r>:
 80165bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c0:	1ccd      	adds	r5, r1, #3
 80165c2:	f025 0503 	bic.w	r5, r5, #3
 80165c6:	3508      	adds	r5, #8
 80165c8:	2d0c      	cmp	r5, #12
 80165ca:	bf38      	it	cc
 80165cc:	250c      	movcc	r5, #12
 80165ce:	2d00      	cmp	r5, #0
 80165d0:	4606      	mov	r6, r0
 80165d2:	db01      	blt.n	80165d8 <_malloc_r+0x1c>
 80165d4:	42a9      	cmp	r1, r5
 80165d6:	d904      	bls.n	80165e2 <_malloc_r+0x26>
 80165d8:	230c      	movs	r3, #12
 80165da:	6033      	str	r3, [r6, #0]
 80165dc:	2000      	movs	r0, #0
 80165de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80166b8 <_malloc_r+0xfc>
 80165e6:	f000 f869 	bl	80166bc <__malloc_lock>
 80165ea:	f8d8 3000 	ldr.w	r3, [r8]
 80165ee:	461c      	mov	r4, r3
 80165f0:	bb44      	cbnz	r4, 8016644 <_malloc_r+0x88>
 80165f2:	4629      	mov	r1, r5
 80165f4:	4630      	mov	r0, r6
 80165f6:	f7ff ffbf 	bl	8016578 <sbrk_aligned>
 80165fa:	1c43      	adds	r3, r0, #1
 80165fc:	4604      	mov	r4, r0
 80165fe:	d158      	bne.n	80166b2 <_malloc_r+0xf6>
 8016600:	f8d8 4000 	ldr.w	r4, [r8]
 8016604:	4627      	mov	r7, r4
 8016606:	2f00      	cmp	r7, #0
 8016608:	d143      	bne.n	8016692 <_malloc_r+0xd6>
 801660a:	2c00      	cmp	r4, #0
 801660c:	d04b      	beq.n	80166a6 <_malloc_r+0xea>
 801660e:	6823      	ldr	r3, [r4, #0]
 8016610:	4639      	mov	r1, r7
 8016612:	4630      	mov	r0, r6
 8016614:	eb04 0903 	add.w	r9, r4, r3
 8016618:	f001 fce2 	bl	8017fe0 <_sbrk_r>
 801661c:	4581      	cmp	r9, r0
 801661e:	d142      	bne.n	80166a6 <_malloc_r+0xea>
 8016620:	6821      	ldr	r1, [r4, #0]
 8016622:	1a6d      	subs	r5, r5, r1
 8016624:	4629      	mov	r1, r5
 8016626:	4630      	mov	r0, r6
 8016628:	f7ff ffa6 	bl	8016578 <sbrk_aligned>
 801662c:	3001      	adds	r0, #1
 801662e:	d03a      	beq.n	80166a6 <_malloc_r+0xea>
 8016630:	6823      	ldr	r3, [r4, #0]
 8016632:	442b      	add	r3, r5
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	f8d8 3000 	ldr.w	r3, [r8]
 801663a:	685a      	ldr	r2, [r3, #4]
 801663c:	bb62      	cbnz	r2, 8016698 <_malloc_r+0xdc>
 801663e:	f8c8 7000 	str.w	r7, [r8]
 8016642:	e00f      	b.n	8016664 <_malloc_r+0xa8>
 8016644:	6822      	ldr	r2, [r4, #0]
 8016646:	1b52      	subs	r2, r2, r5
 8016648:	d420      	bmi.n	801668c <_malloc_r+0xd0>
 801664a:	2a0b      	cmp	r2, #11
 801664c:	d917      	bls.n	801667e <_malloc_r+0xc2>
 801664e:	1961      	adds	r1, r4, r5
 8016650:	42a3      	cmp	r3, r4
 8016652:	6025      	str	r5, [r4, #0]
 8016654:	bf18      	it	ne
 8016656:	6059      	strne	r1, [r3, #4]
 8016658:	6863      	ldr	r3, [r4, #4]
 801665a:	bf08      	it	eq
 801665c:	f8c8 1000 	streq.w	r1, [r8]
 8016660:	5162      	str	r2, [r4, r5]
 8016662:	604b      	str	r3, [r1, #4]
 8016664:	4630      	mov	r0, r6
 8016666:	f000 f82f 	bl	80166c8 <__malloc_unlock>
 801666a:	f104 000b 	add.w	r0, r4, #11
 801666e:	1d23      	adds	r3, r4, #4
 8016670:	f020 0007 	bic.w	r0, r0, #7
 8016674:	1ac2      	subs	r2, r0, r3
 8016676:	bf1c      	itt	ne
 8016678:	1a1b      	subne	r3, r3, r0
 801667a:	50a3      	strne	r3, [r4, r2]
 801667c:	e7af      	b.n	80165de <_malloc_r+0x22>
 801667e:	6862      	ldr	r2, [r4, #4]
 8016680:	42a3      	cmp	r3, r4
 8016682:	bf0c      	ite	eq
 8016684:	f8c8 2000 	streq.w	r2, [r8]
 8016688:	605a      	strne	r2, [r3, #4]
 801668a:	e7eb      	b.n	8016664 <_malloc_r+0xa8>
 801668c:	4623      	mov	r3, r4
 801668e:	6864      	ldr	r4, [r4, #4]
 8016690:	e7ae      	b.n	80165f0 <_malloc_r+0x34>
 8016692:	463c      	mov	r4, r7
 8016694:	687f      	ldr	r7, [r7, #4]
 8016696:	e7b6      	b.n	8016606 <_malloc_r+0x4a>
 8016698:	461a      	mov	r2, r3
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	42a3      	cmp	r3, r4
 801669e:	d1fb      	bne.n	8016698 <_malloc_r+0xdc>
 80166a0:	2300      	movs	r3, #0
 80166a2:	6053      	str	r3, [r2, #4]
 80166a4:	e7de      	b.n	8016664 <_malloc_r+0xa8>
 80166a6:	230c      	movs	r3, #12
 80166a8:	6033      	str	r3, [r6, #0]
 80166aa:	4630      	mov	r0, r6
 80166ac:	f000 f80c 	bl	80166c8 <__malloc_unlock>
 80166b0:	e794      	b.n	80165dc <_malloc_r+0x20>
 80166b2:	6005      	str	r5, [r0, #0]
 80166b4:	e7d6      	b.n	8016664 <_malloc_r+0xa8>
 80166b6:	bf00      	nop
 80166b8:	2407753c 	.word	0x2407753c

080166bc <__malloc_lock>:
 80166bc:	4801      	ldr	r0, [pc, #4]	@ (80166c4 <__malloc_lock+0x8>)
 80166be:	f001 bcdc 	b.w	801807a <__retarget_lock_acquire_recursive>
 80166c2:	bf00      	nop
 80166c4:	24077680 	.word	0x24077680

080166c8 <__malloc_unlock>:
 80166c8:	4801      	ldr	r0, [pc, #4]	@ (80166d0 <__malloc_unlock+0x8>)
 80166ca:	f001 bcd7 	b.w	801807c <__retarget_lock_release_recursive>
 80166ce:	bf00      	nop
 80166d0:	24077680 	.word	0x24077680

080166d4 <sulp>:
 80166d4:	b570      	push	{r4, r5, r6, lr}
 80166d6:	4604      	mov	r4, r0
 80166d8:	460d      	mov	r5, r1
 80166da:	4616      	mov	r6, r2
 80166dc:	ec45 4b10 	vmov	d0, r4, r5
 80166e0:	f002 fc14 	bl	8018f0c <__ulp>
 80166e4:	b17e      	cbz	r6, 8016706 <sulp+0x32>
 80166e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	dd09      	ble.n	8016706 <sulp+0x32>
 80166f2:	051b      	lsls	r3, r3, #20
 80166f4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80166f8:	2000      	movs	r0, #0
 80166fa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80166fe:	ec41 0b17 	vmov	d7, r0, r1
 8016702:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016706:	bd70      	pop	{r4, r5, r6, pc}

08016708 <_strtod_l>:
 8016708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	ed2d 8b0a 	vpush	{d8-d12}
 8016710:	b097      	sub	sp, #92	@ 0x5c
 8016712:	4688      	mov	r8, r1
 8016714:	920e      	str	r2, [sp, #56]	@ 0x38
 8016716:	2200      	movs	r2, #0
 8016718:	9212      	str	r2, [sp, #72]	@ 0x48
 801671a:	9005      	str	r0, [sp, #20]
 801671c:	f04f 0a00 	mov.w	sl, #0
 8016720:	f04f 0b00 	mov.w	fp, #0
 8016724:	460a      	mov	r2, r1
 8016726:	9211      	str	r2, [sp, #68]	@ 0x44
 8016728:	7811      	ldrb	r1, [r2, #0]
 801672a:	292b      	cmp	r1, #43	@ 0x2b
 801672c:	d04c      	beq.n	80167c8 <_strtod_l+0xc0>
 801672e:	d839      	bhi.n	80167a4 <_strtod_l+0x9c>
 8016730:	290d      	cmp	r1, #13
 8016732:	d833      	bhi.n	801679c <_strtod_l+0x94>
 8016734:	2908      	cmp	r1, #8
 8016736:	d833      	bhi.n	80167a0 <_strtod_l+0x98>
 8016738:	2900      	cmp	r1, #0
 801673a:	d03c      	beq.n	80167b6 <_strtod_l+0xae>
 801673c:	2200      	movs	r2, #0
 801673e:	9208      	str	r2, [sp, #32]
 8016740:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016742:	782a      	ldrb	r2, [r5, #0]
 8016744:	2a30      	cmp	r2, #48	@ 0x30
 8016746:	f040 80b5 	bne.w	80168b4 <_strtod_l+0x1ac>
 801674a:	786a      	ldrb	r2, [r5, #1]
 801674c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016750:	2a58      	cmp	r2, #88	@ 0x58
 8016752:	d170      	bne.n	8016836 <_strtod_l+0x12e>
 8016754:	9302      	str	r3, [sp, #8]
 8016756:	9b08      	ldr	r3, [sp, #32]
 8016758:	9301      	str	r3, [sp, #4]
 801675a:	ab12      	add	r3, sp, #72	@ 0x48
 801675c:	9300      	str	r3, [sp, #0]
 801675e:	4a8b      	ldr	r2, [pc, #556]	@ (801698c <_strtod_l+0x284>)
 8016760:	9805      	ldr	r0, [sp, #20]
 8016762:	ab13      	add	r3, sp, #76	@ 0x4c
 8016764:	a911      	add	r1, sp, #68	@ 0x44
 8016766:	f001 fd79 	bl	801825c <__gethex>
 801676a:	f010 060f 	ands.w	r6, r0, #15
 801676e:	4604      	mov	r4, r0
 8016770:	d005      	beq.n	801677e <_strtod_l+0x76>
 8016772:	2e06      	cmp	r6, #6
 8016774:	d12a      	bne.n	80167cc <_strtod_l+0xc4>
 8016776:	3501      	adds	r5, #1
 8016778:	2300      	movs	r3, #0
 801677a:	9511      	str	r5, [sp, #68]	@ 0x44
 801677c:	9308      	str	r3, [sp, #32]
 801677e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016780:	2b00      	cmp	r3, #0
 8016782:	f040 852f 	bne.w	80171e4 <_strtod_l+0xadc>
 8016786:	9b08      	ldr	r3, [sp, #32]
 8016788:	ec4b ab10 	vmov	d0, sl, fp
 801678c:	b1cb      	cbz	r3, 80167c2 <_strtod_l+0xba>
 801678e:	eeb1 0b40 	vneg.f64	d0, d0
 8016792:	b017      	add	sp, #92	@ 0x5c
 8016794:	ecbd 8b0a 	vpop	{d8-d12}
 8016798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679c:	2920      	cmp	r1, #32
 801679e:	d1cd      	bne.n	801673c <_strtod_l+0x34>
 80167a0:	3201      	adds	r2, #1
 80167a2:	e7c0      	b.n	8016726 <_strtod_l+0x1e>
 80167a4:	292d      	cmp	r1, #45	@ 0x2d
 80167a6:	d1c9      	bne.n	801673c <_strtod_l+0x34>
 80167a8:	2101      	movs	r1, #1
 80167aa:	9108      	str	r1, [sp, #32]
 80167ac:	1c51      	adds	r1, r2, #1
 80167ae:	9111      	str	r1, [sp, #68]	@ 0x44
 80167b0:	7852      	ldrb	r2, [r2, #1]
 80167b2:	2a00      	cmp	r2, #0
 80167b4:	d1c4      	bne.n	8016740 <_strtod_l+0x38>
 80167b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167b8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80167bc:	2b00      	cmp	r3, #0
 80167be:	f040 850f 	bne.w	80171e0 <_strtod_l+0xad8>
 80167c2:	ec4b ab10 	vmov	d0, sl, fp
 80167c6:	e7e4      	b.n	8016792 <_strtod_l+0x8a>
 80167c8:	2100      	movs	r1, #0
 80167ca:	e7ee      	b.n	80167aa <_strtod_l+0xa2>
 80167cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80167ce:	b13a      	cbz	r2, 80167e0 <_strtod_l+0xd8>
 80167d0:	2135      	movs	r1, #53	@ 0x35
 80167d2:	a814      	add	r0, sp, #80	@ 0x50
 80167d4:	f002 fc91 	bl	80190fa <__copybits>
 80167d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80167da:	9805      	ldr	r0, [sp, #20]
 80167dc:	f002 f862 	bl	80188a4 <_Bfree>
 80167e0:	1e73      	subs	r3, r6, #1
 80167e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80167e4:	2b04      	cmp	r3, #4
 80167e6:	d806      	bhi.n	80167f6 <_strtod_l+0xee>
 80167e8:	e8df f003 	tbb	[pc, r3]
 80167ec:	201d0314 	.word	0x201d0314
 80167f0:	14          	.byte	0x14
 80167f1:	00          	.byte	0x00
 80167f2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80167f6:	05e3      	lsls	r3, r4, #23
 80167f8:	bf48      	it	mi
 80167fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80167fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016802:	0d1b      	lsrs	r3, r3, #20
 8016804:	051b      	lsls	r3, r3, #20
 8016806:	2b00      	cmp	r3, #0
 8016808:	d1b9      	bne.n	801677e <_strtod_l+0x76>
 801680a:	f001 fc0b 	bl	8018024 <__errno>
 801680e:	2322      	movs	r3, #34	@ 0x22
 8016810:	6003      	str	r3, [r0, #0]
 8016812:	e7b4      	b.n	801677e <_strtod_l+0x76>
 8016814:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016818:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801681c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016820:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016824:	e7e7      	b.n	80167f6 <_strtod_l+0xee>
 8016826:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016994 <_strtod_l+0x28c>
 801682a:	e7e4      	b.n	80167f6 <_strtod_l+0xee>
 801682c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016830:	f04f 3aff 	mov.w	sl, #4294967295
 8016834:	e7df      	b.n	80167f6 <_strtod_l+0xee>
 8016836:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016838:	1c5a      	adds	r2, r3, #1
 801683a:	9211      	str	r2, [sp, #68]	@ 0x44
 801683c:	785b      	ldrb	r3, [r3, #1]
 801683e:	2b30      	cmp	r3, #48	@ 0x30
 8016840:	d0f9      	beq.n	8016836 <_strtod_l+0x12e>
 8016842:	2b00      	cmp	r3, #0
 8016844:	d09b      	beq.n	801677e <_strtod_l+0x76>
 8016846:	2301      	movs	r3, #1
 8016848:	2600      	movs	r6, #0
 801684a:	9307      	str	r3, [sp, #28]
 801684c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801684e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016850:	46b1      	mov	r9, r6
 8016852:	4635      	mov	r5, r6
 8016854:	220a      	movs	r2, #10
 8016856:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016858:	7804      	ldrb	r4, [r0, #0]
 801685a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801685e:	b2d9      	uxtb	r1, r3
 8016860:	2909      	cmp	r1, #9
 8016862:	d929      	bls.n	80168b8 <_strtod_l+0x1b0>
 8016864:	494a      	ldr	r1, [pc, #296]	@ (8016990 <_strtod_l+0x288>)
 8016866:	2201      	movs	r2, #1
 8016868:	f001 fac1 	bl	8017dee <strncmp>
 801686c:	b378      	cbz	r0, 80168ce <_strtod_l+0x1c6>
 801686e:	2000      	movs	r0, #0
 8016870:	4622      	mov	r2, r4
 8016872:	462b      	mov	r3, r5
 8016874:	4607      	mov	r7, r0
 8016876:	9006      	str	r0, [sp, #24]
 8016878:	2a65      	cmp	r2, #101	@ 0x65
 801687a:	d001      	beq.n	8016880 <_strtod_l+0x178>
 801687c:	2a45      	cmp	r2, #69	@ 0x45
 801687e:	d117      	bne.n	80168b0 <_strtod_l+0x1a8>
 8016880:	b91b      	cbnz	r3, 801688a <_strtod_l+0x182>
 8016882:	9b07      	ldr	r3, [sp, #28]
 8016884:	4303      	orrs	r3, r0
 8016886:	d096      	beq.n	80167b6 <_strtod_l+0xae>
 8016888:	2300      	movs	r3, #0
 801688a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801688e:	f108 0201 	add.w	r2, r8, #1
 8016892:	9211      	str	r2, [sp, #68]	@ 0x44
 8016894:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016898:	2a2b      	cmp	r2, #43	@ 0x2b
 801689a:	d06b      	beq.n	8016974 <_strtod_l+0x26c>
 801689c:	2a2d      	cmp	r2, #45	@ 0x2d
 801689e:	d071      	beq.n	8016984 <_strtod_l+0x27c>
 80168a0:	f04f 0e00 	mov.w	lr, #0
 80168a4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80168a8:	2c09      	cmp	r4, #9
 80168aa:	d979      	bls.n	80169a0 <_strtod_l+0x298>
 80168ac:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80168b0:	2400      	movs	r4, #0
 80168b2:	e094      	b.n	80169de <_strtod_l+0x2d6>
 80168b4:	2300      	movs	r3, #0
 80168b6:	e7c7      	b.n	8016848 <_strtod_l+0x140>
 80168b8:	2d08      	cmp	r5, #8
 80168ba:	f100 0001 	add.w	r0, r0, #1
 80168be:	bfd4      	ite	le
 80168c0:	fb02 3909 	mlale	r9, r2, r9, r3
 80168c4:	fb02 3606 	mlagt	r6, r2, r6, r3
 80168c8:	3501      	adds	r5, #1
 80168ca:	9011      	str	r0, [sp, #68]	@ 0x44
 80168cc:	e7c3      	b.n	8016856 <_strtod_l+0x14e>
 80168ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80168d0:	1c5a      	adds	r2, r3, #1
 80168d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80168d4:	785a      	ldrb	r2, [r3, #1]
 80168d6:	b375      	cbz	r5, 8016936 <_strtod_l+0x22e>
 80168d8:	4607      	mov	r7, r0
 80168da:	462b      	mov	r3, r5
 80168dc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80168e0:	2909      	cmp	r1, #9
 80168e2:	d913      	bls.n	801690c <_strtod_l+0x204>
 80168e4:	2101      	movs	r1, #1
 80168e6:	9106      	str	r1, [sp, #24]
 80168e8:	e7c6      	b.n	8016878 <_strtod_l+0x170>
 80168ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80168ec:	1c5a      	adds	r2, r3, #1
 80168ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80168f0:	785a      	ldrb	r2, [r3, #1]
 80168f2:	3001      	adds	r0, #1
 80168f4:	2a30      	cmp	r2, #48	@ 0x30
 80168f6:	d0f8      	beq.n	80168ea <_strtod_l+0x1e2>
 80168f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80168fc:	2b08      	cmp	r3, #8
 80168fe:	f200 8476 	bhi.w	80171ee <_strtod_l+0xae6>
 8016902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016904:	930a      	str	r3, [sp, #40]	@ 0x28
 8016906:	4607      	mov	r7, r0
 8016908:	2000      	movs	r0, #0
 801690a:	4603      	mov	r3, r0
 801690c:	3a30      	subs	r2, #48	@ 0x30
 801690e:	f100 0101 	add.w	r1, r0, #1
 8016912:	d023      	beq.n	801695c <_strtod_l+0x254>
 8016914:	440f      	add	r7, r1
 8016916:	eb00 0c03 	add.w	ip, r0, r3
 801691a:	4619      	mov	r1, r3
 801691c:	240a      	movs	r4, #10
 801691e:	4561      	cmp	r1, ip
 8016920:	d10b      	bne.n	801693a <_strtod_l+0x232>
 8016922:	1c5c      	adds	r4, r3, #1
 8016924:	4403      	add	r3, r0
 8016926:	2b08      	cmp	r3, #8
 8016928:	4404      	add	r4, r0
 801692a:	dc11      	bgt.n	8016950 <_strtod_l+0x248>
 801692c:	230a      	movs	r3, #10
 801692e:	fb03 2909 	mla	r9, r3, r9, r2
 8016932:	2100      	movs	r1, #0
 8016934:	e013      	b.n	801695e <_strtod_l+0x256>
 8016936:	4628      	mov	r0, r5
 8016938:	e7dc      	b.n	80168f4 <_strtod_l+0x1ec>
 801693a:	2908      	cmp	r1, #8
 801693c:	f101 0101 	add.w	r1, r1, #1
 8016940:	dc02      	bgt.n	8016948 <_strtod_l+0x240>
 8016942:	fb04 f909 	mul.w	r9, r4, r9
 8016946:	e7ea      	b.n	801691e <_strtod_l+0x216>
 8016948:	2910      	cmp	r1, #16
 801694a:	bfd8      	it	le
 801694c:	4366      	mulle	r6, r4
 801694e:	e7e6      	b.n	801691e <_strtod_l+0x216>
 8016950:	2b0f      	cmp	r3, #15
 8016952:	dcee      	bgt.n	8016932 <_strtod_l+0x22a>
 8016954:	230a      	movs	r3, #10
 8016956:	fb03 2606 	mla	r6, r3, r6, r2
 801695a:	e7ea      	b.n	8016932 <_strtod_l+0x22a>
 801695c:	461c      	mov	r4, r3
 801695e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016960:	1c5a      	adds	r2, r3, #1
 8016962:	9211      	str	r2, [sp, #68]	@ 0x44
 8016964:	785a      	ldrb	r2, [r3, #1]
 8016966:	4608      	mov	r0, r1
 8016968:	4623      	mov	r3, r4
 801696a:	e7b7      	b.n	80168dc <_strtod_l+0x1d4>
 801696c:	2301      	movs	r3, #1
 801696e:	2700      	movs	r7, #0
 8016970:	9306      	str	r3, [sp, #24]
 8016972:	e786      	b.n	8016882 <_strtod_l+0x17a>
 8016974:	f04f 0e00 	mov.w	lr, #0
 8016978:	f108 0202 	add.w	r2, r8, #2
 801697c:	9211      	str	r2, [sp, #68]	@ 0x44
 801697e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016982:	e78f      	b.n	80168a4 <_strtod_l+0x19c>
 8016984:	f04f 0e01 	mov.w	lr, #1
 8016988:	e7f6      	b.n	8016978 <_strtod_l+0x270>
 801698a:	bf00      	nop
 801698c:	0801a620 	.word	0x0801a620
 8016990:	0801a5fc 	.word	0x0801a5fc
 8016994:	7ff00000 	.word	0x7ff00000
 8016998:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801699a:	1c54      	adds	r4, r2, #1
 801699c:	9411      	str	r4, [sp, #68]	@ 0x44
 801699e:	7852      	ldrb	r2, [r2, #1]
 80169a0:	2a30      	cmp	r2, #48	@ 0x30
 80169a2:	d0f9      	beq.n	8016998 <_strtod_l+0x290>
 80169a4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80169a8:	2c08      	cmp	r4, #8
 80169aa:	d881      	bhi.n	80168b0 <_strtod_l+0x1a8>
 80169ac:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80169b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80169b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80169b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80169b6:	1c51      	adds	r1, r2, #1
 80169b8:	9111      	str	r1, [sp, #68]	@ 0x44
 80169ba:	7852      	ldrb	r2, [r2, #1]
 80169bc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80169c0:	2c09      	cmp	r4, #9
 80169c2:	d938      	bls.n	8016a36 <_strtod_l+0x32e>
 80169c4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80169c6:	1b0c      	subs	r4, r1, r4
 80169c8:	2c08      	cmp	r4, #8
 80169ca:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80169ce:	dc02      	bgt.n	80169d6 <_strtod_l+0x2ce>
 80169d0:	4564      	cmp	r4, ip
 80169d2:	bfa8      	it	ge
 80169d4:	4664      	movge	r4, ip
 80169d6:	f1be 0f00 	cmp.w	lr, #0
 80169da:	d000      	beq.n	80169de <_strtod_l+0x2d6>
 80169dc:	4264      	negs	r4, r4
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d14e      	bne.n	8016a80 <_strtod_l+0x378>
 80169e2:	9b07      	ldr	r3, [sp, #28]
 80169e4:	4318      	orrs	r0, r3
 80169e6:	f47f aeca 	bne.w	801677e <_strtod_l+0x76>
 80169ea:	9b06      	ldr	r3, [sp, #24]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	f47f aee2 	bne.w	80167b6 <_strtod_l+0xae>
 80169f2:	2a69      	cmp	r2, #105	@ 0x69
 80169f4:	d027      	beq.n	8016a46 <_strtod_l+0x33e>
 80169f6:	dc24      	bgt.n	8016a42 <_strtod_l+0x33a>
 80169f8:	2a49      	cmp	r2, #73	@ 0x49
 80169fa:	d024      	beq.n	8016a46 <_strtod_l+0x33e>
 80169fc:	2a4e      	cmp	r2, #78	@ 0x4e
 80169fe:	f47f aeda 	bne.w	80167b6 <_strtod_l+0xae>
 8016a02:	4997      	ldr	r1, [pc, #604]	@ (8016c60 <_strtod_l+0x558>)
 8016a04:	a811      	add	r0, sp, #68	@ 0x44
 8016a06:	f001 fe4b 	bl	80186a0 <__match>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	f43f aed3 	beq.w	80167b6 <_strtod_l+0xae>
 8016a10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	2b28      	cmp	r3, #40	@ 0x28
 8016a16:	d12d      	bne.n	8016a74 <_strtod_l+0x36c>
 8016a18:	4992      	ldr	r1, [pc, #584]	@ (8016c64 <_strtod_l+0x55c>)
 8016a1a:	aa14      	add	r2, sp, #80	@ 0x50
 8016a1c:	a811      	add	r0, sp, #68	@ 0x44
 8016a1e:	f001 fe53 	bl	80186c8 <__hexnan>
 8016a22:	2805      	cmp	r0, #5
 8016a24:	d126      	bne.n	8016a74 <_strtod_l+0x36c>
 8016a26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a28:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016a2c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016a30:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016a34:	e6a3      	b.n	801677e <_strtod_l+0x76>
 8016a36:	240a      	movs	r4, #10
 8016a38:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016a3c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016a40:	e7b8      	b.n	80169b4 <_strtod_l+0x2ac>
 8016a42:	2a6e      	cmp	r2, #110	@ 0x6e
 8016a44:	e7db      	b.n	80169fe <_strtod_l+0x2f6>
 8016a46:	4988      	ldr	r1, [pc, #544]	@ (8016c68 <_strtod_l+0x560>)
 8016a48:	a811      	add	r0, sp, #68	@ 0x44
 8016a4a:	f001 fe29 	bl	80186a0 <__match>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f43f aeb1 	beq.w	80167b6 <_strtod_l+0xae>
 8016a54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a56:	4985      	ldr	r1, [pc, #532]	@ (8016c6c <_strtod_l+0x564>)
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	a811      	add	r0, sp, #68	@ 0x44
 8016a5c:	9311      	str	r3, [sp, #68]	@ 0x44
 8016a5e:	f001 fe1f 	bl	80186a0 <__match>
 8016a62:	b910      	cbnz	r0, 8016a6a <_strtod_l+0x362>
 8016a64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a66:	3301      	adds	r3, #1
 8016a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8016a6a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016c80 <_strtod_l+0x578>
 8016a6e:	f04f 0a00 	mov.w	sl, #0
 8016a72:	e684      	b.n	801677e <_strtod_l+0x76>
 8016a74:	487e      	ldr	r0, [pc, #504]	@ (8016c70 <_strtod_l+0x568>)
 8016a76:	f001 fb13 	bl	80180a0 <nan>
 8016a7a:	ec5b ab10 	vmov	sl, fp, d0
 8016a7e:	e67e      	b.n	801677e <_strtod_l+0x76>
 8016a80:	ee07 9a90 	vmov	s15, r9
 8016a84:	1be2      	subs	r2, r4, r7
 8016a86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016a8a:	2d00      	cmp	r5, #0
 8016a8c:	bf08      	it	eq
 8016a8e:	461d      	moveq	r5, r3
 8016a90:	2b10      	cmp	r3, #16
 8016a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a94:	461a      	mov	r2, r3
 8016a96:	bfa8      	it	ge
 8016a98:	2210      	movge	r2, #16
 8016a9a:	2b09      	cmp	r3, #9
 8016a9c:	ec5b ab17 	vmov	sl, fp, d7
 8016aa0:	dc15      	bgt.n	8016ace <_strtod_l+0x3c6>
 8016aa2:	1be1      	subs	r1, r4, r7
 8016aa4:	2900      	cmp	r1, #0
 8016aa6:	f43f ae6a 	beq.w	801677e <_strtod_l+0x76>
 8016aaa:	eba4 0107 	sub.w	r1, r4, r7
 8016aae:	dd72      	ble.n	8016b96 <_strtod_l+0x48e>
 8016ab0:	2916      	cmp	r1, #22
 8016ab2:	dc59      	bgt.n	8016b68 <_strtod_l+0x460>
 8016ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8016c74 <_strtod_l+0x56c>)
 8016ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016abc:	ed93 7b00 	vldr	d7, [r3]
 8016ac0:	ec4b ab16 	vmov	d6, sl, fp
 8016ac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ac8:	ec5b ab17 	vmov	sl, fp, d7
 8016acc:	e657      	b.n	801677e <_strtod_l+0x76>
 8016ace:	4969      	ldr	r1, [pc, #420]	@ (8016c74 <_strtod_l+0x56c>)
 8016ad0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016ad4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016ad8:	ee06 6a90 	vmov	s13, r6
 8016adc:	2b0f      	cmp	r3, #15
 8016ade:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016ae2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016ae6:	ec5b ab16 	vmov	sl, fp, d6
 8016aea:	ddda      	ble.n	8016aa2 <_strtod_l+0x39a>
 8016aec:	1a9a      	subs	r2, r3, r2
 8016aee:	1be1      	subs	r1, r4, r7
 8016af0:	440a      	add	r2, r1
 8016af2:	2a00      	cmp	r2, #0
 8016af4:	f340 8094 	ble.w	8016c20 <_strtod_l+0x518>
 8016af8:	f012 000f 	ands.w	r0, r2, #15
 8016afc:	d00a      	beq.n	8016b14 <_strtod_l+0x40c>
 8016afe:	495d      	ldr	r1, [pc, #372]	@ (8016c74 <_strtod_l+0x56c>)
 8016b00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016b04:	ed91 7b00 	vldr	d7, [r1]
 8016b08:	ec4b ab16 	vmov	d6, sl, fp
 8016b0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016b10:	ec5b ab17 	vmov	sl, fp, d7
 8016b14:	f032 020f 	bics.w	r2, r2, #15
 8016b18:	d073      	beq.n	8016c02 <_strtod_l+0x4fa>
 8016b1a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016b1e:	dd47      	ble.n	8016bb0 <_strtod_l+0x4a8>
 8016b20:	2400      	movs	r4, #0
 8016b22:	4625      	mov	r5, r4
 8016b24:	9407      	str	r4, [sp, #28]
 8016b26:	4626      	mov	r6, r4
 8016b28:	9a05      	ldr	r2, [sp, #20]
 8016b2a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016c80 <_strtod_l+0x578>
 8016b2e:	2322      	movs	r3, #34	@ 0x22
 8016b30:	6013      	str	r3, [r2, #0]
 8016b32:	f04f 0a00 	mov.w	sl, #0
 8016b36:	9b07      	ldr	r3, [sp, #28]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	f43f ae20 	beq.w	801677e <_strtod_l+0x76>
 8016b3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016b40:	9805      	ldr	r0, [sp, #20]
 8016b42:	f001 feaf 	bl	80188a4 <_Bfree>
 8016b46:	9805      	ldr	r0, [sp, #20]
 8016b48:	4631      	mov	r1, r6
 8016b4a:	f001 feab 	bl	80188a4 <_Bfree>
 8016b4e:	9805      	ldr	r0, [sp, #20]
 8016b50:	4629      	mov	r1, r5
 8016b52:	f001 fea7 	bl	80188a4 <_Bfree>
 8016b56:	9907      	ldr	r1, [sp, #28]
 8016b58:	9805      	ldr	r0, [sp, #20]
 8016b5a:	f001 fea3 	bl	80188a4 <_Bfree>
 8016b5e:	9805      	ldr	r0, [sp, #20]
 8016b60:	4621      	mov	r1, r4
 8016b62:	f001 fe9f 	bl	80188a4 <_Bfree>
 8016b66:	e60a      	b.n	801677e <_strtod_l+0x76>
 8016b68:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016b6c:	1be0      	subs	r0, r4, r7
 8016b6e:	4281      	cmp	r1, r0
 8016b70:	dbbc      	blt.n	8016aec <_strtod_l+0x3e4>
 8016b72:	4a40      	ldr	r2, [pc, #256]	@ (8016c74 <_strtod_l+0x56c>)
 8016b74:	f1c3 030f 	rsb	r3, r3, #15
 8016b78:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016b7c:	ed91 7b00 	vldr	d7, [r1]
 8016b80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016b82:	ec4b ab16 	vmov	d6, sl, fp
 8016b86:	1acb      	subs	r3, r1, r3
 8016b88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016b8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016b90:	ed92 6b00 	vldr	d6, [r2]
 8016b94:	e796      	b.n	8016ac4 <_strtod_l+0x3bc>
 8016b96:	3116      	adds	r1, #22
 8016b98:	dba8      	blt.n	8016aec <_strtod_l+0x3e4>
 8016b9a:	4b36      	ldr	r3, [pc, #216]	@ (8016c74 <_strtod_l+0x56c>)
 8016b9c:	1b3c      	subs	r4, r7, r4
 8016b9e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016ba2:	ed94 7b00 	vldr	d7, [r4]
 8016ba6:	ec4b ab16 	vmov	d6, sl, fp
 8016baa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016bae:	e78b      	b.n	8016ac8 <_strtod_l+0x3c0>
 8016bb0:	2000      	movs	r0, #0
 8016bb2:	ec4b ab17 	vmov	d7, sl, fp
 8016bb6:	4e30      	ldr	r6, [pc, #192]	@ (8016c78 <_strtod_l+0x570>)
 8016bb8:	1112      	asrs	r2, r2, #4
 8016bba:	4601      	mov	r1, r0
 8016bbc:	2a01      	cmp	r2, #1
 8016bbe:	dc23      	bgt.n	8016c08 <_strtod_l+0x500>
 8016bc0:	b108      	cbz	r0, 8016bc6 <_strtod_l+0x4be>
 8016bc2:	ec5b ab17 	vmov	sl, fp, d7
 8016bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8016c78 <_strtod_l+0x570>)
 8016bc8:	482c      	ldr	r0, [pc, #176]	@ (8016c7c <_strtod_l+0x574>)
 8016bca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016bce:	ed92 7b00 	vldr	d7, [r2]
 8016bd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016bd6:	ec4b ab16 	vmov	d6, sl, fp
 8016bda:	4a29      	ldr	r2, [pc, #164]	@ (8016c80 <_strtod_l+0x578>)
 8016bdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016be0:	ee17 1a90 	vmov	r1, s15
 8016be4:	400a      	ands	r2, r1
 8016be6:	4282      	cmp	r2, r0
 8016be8:	ec5b ab17 	vmov	sl, fp, d7
 8016bec:	d898      	bhi.n	8016b20 <_strtod_l+0x418>
 8016bee:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8016bf2:	4282      	cmp	r2, r0
 8016bf4:	bf86      	itte	hi
 8016bf6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016c84 <_strtod_l+0x57c>
 8016bfa:	f04f 3aff 	movhi.w	sl, #4294967295
 8016bfe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8016c02:	2200      	movs	r2, #0
 8016c04:	9206      	str	r2, [sp, #24]
 8016c06:	e076      	b.n	8016cf6 <_strtod_l+0x5ee>
 8016c08:	f012 0f01 	tst.w	r2, #1
 8016c0c:	d004      	beq.n	8016c18 <_strtod_l+0x510>
 8016c0e:	ed96 6b00 	vldr	d6, [r6]
 8016c12:	2001      	movs	r0, #1
 8016c14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016c18:	3101      	adds	r1, #1
 8016c1a:	1052      	asrs	r2, r2, #1
 8016c1c:	3608      	adds	r6, #8
 8016c1e:	e7cd      	b.n	8016bbc <_strtod_l+0x4b4>
 8016c20:	d0ef      	beq.n	8016c02 <_strtod_l+0x4fa>
 8016c22:	4252      	negs	r2, r2
 8016c24:	f012 000f 	ands.w	r0, r2, #15
 8016c28:	d00a      	beq.n	8016c40 <_strtod_l+0x538>
 8016c2a:	4912      	ldr	r1, [pc, #72]	@ (8016c74 <_strtod_l+0x56c>)
 8016c2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016c30:	ed91 7b00 	vldr	d7, [r1]
 8016c34:	ec4b ab16 	vmov	d6, sl, fp
 8016c38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016c3c:	ec5b ab17 	vmov	sl, fp, d7
 8016c40:	1112      	asrs	r2, r2, #4
 8016c42:	d0de      	beq.n	8016c02 <_strtod_l+0x4fa>
 8016c44:	2a1f      	cmp	r2, #31
 8016c46:	dd1f      	ble.n	8016c88 <_strtod_l+0x580>
 8016c48:	2400      	movs	r4, #0
 8016c4a:	4625      	mov	r5, r4
 8016c4c:	9407      	str	r4, [sp, #28]
 8016c4e:	4626      	mov	r6, r4
 8016c50:	9a05      	ldr	r2, [sp, #20]
 8016c52:	2322      	movs	r3, #34	@ 0x22
 8016c54:	f04f 0a00 	mov.w	sl, #0
 8016c58:	f04f 0b00 	mov.w	fp, #0
 8016c5c:	6013      	str	r3, [r2, #0]
 8016c5e:	e76a      	b.n	8016b36 <_strtod_l+0x42e>
 8016c60:	0801a607 	.word	0x0801a607
 8016c64:	0801a60c 	.word	0x0801a60c
 8016c68:	0801a5fe 	.word	0x0801a5fe
 8016c6c:	0801a601 	.word	0x0801a601
 8016c70:	0801a81a 	.word	0x0801a81a
 8016c74:	0801a920 	.word	0x0801a920
 8016c78:	0801a8f8 	.word	0x0801a8f8
 8016c7c:	7ca00000 	.word	0x7ca00000
 8016c80:	7ff00000 	.word	0x7ff00000
 8016c84:	7fefffff 	.word	0x7fefffff
 8016c88:	f012 0110 	ands.w	r1, r2, #16
 8016c8c:	bf18      	it	ne
 8016c8e:	216a      	movne	r1, #106	@ 0x6a
 8016c90:	9106      	str	r1, [sp, #24]
 8016c92:	ec4b ab17 	vmov	d7, sl, fp
 8016c96:	49b0      	ldr	r1, [pc, #704]	@ (8016f58 <_strtod_l+0x850>)
 8016c98:	2000      	movs	r0, #0
 8016c9a:	07d6      	lsls	r6, r2, #31
 8016c9c:	d504      	bpl.n	8016ca8 <_strtod_l+0x5a0>
 8016c9e:	ed91 6b00 	vldr	d6, [r1]
 8016ca2:	2001      	movs	r0, #1
 8016ca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ca8:	1052      	asrs	r2, r2, #1
 8016caa:	f101 0108 	add.w	r1, r1, #8
 8016cae:	d1f4      	bne.n	8016c9a <_strtod_l+0x592>
 8016cb0:	b108      	cbz	r0, 8016cb6 <_strtod_l+0x5ae>
 8016cb2:	ec5b ab17 	vmov	sl, fp, d7
 8016cb6:	9a06      	ldr	r2, [sp, #24]
 8016cb8:	b1b2      	cbz	r2, 8016ce8 <_strtod_l+0x5e0>
 8016cba:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8016cbe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016cc2:	2a00      	cmp	r2, #0
 8016cc4:	4658      	mov	r0, fp
 8016cc6:	dd0f      	ble.n	8016ce8 <_strtod_l+0x5e0>
 8016cc8:	2a1f      	cmp	r2, #31
 8016cca:	dd55      	ble.n	8016d78 <_strtod_l+0x670>
 8016ccc:	2a34      	cmp	r2, #52	@ 0x34
 8016cce:	bfde      	ittt	le
 8016cd0:	f04f 32ff 	movle.w	r2, #4294967295
 8016cd4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016cd8:	408a      	lslle	r2, r1
 8016cda:	f04f 0a00 	mov.w	sl, #0
 8016cde:	bfcc      	ite	gt
 8016ce0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016ce4:	ea02 0b00 	andle.w	fp, r2, r0
 8016ce8:	ec4b ab17 	vmov	d7, sl, fp
 8016cec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf4:	d0a8      	beq.n	8016c48 <_strtod_l+0x540>
 8016cf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016cf8:	9805      	ldr	r0, [sp, #20]
 8016cfa:	f8cd 9000 	str.w	r9, [sp]
 8016cfe:	462a      	mov	r2, r5
 8016d00:	f001 fe38 	bl	8018974 <__s2b>
 8016d04:	9007      	str	r0, [sp, #28]
 8016d06:	2800      	cmp	r0, #0
 8016d08:	f43f af0a 	beq.w	8016b20 <_strtod_l+0x418>
 8016d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d0e:	1b3f      	subs	r7, r7, r4
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	bfb4      	ite	lt
 8016d14:	463b      	movlt	r3, r7
 8016d16:	2300      	movge	r3, #0
 8016d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d1c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016f48 <_strtod_l+0x840>
 8016d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d24:	2400      	movs	r4, #0
 8016d26:	930d      	str	r3, [sp, #52]	@ 0x34
 8016d28:	4625      	mov	r5, r4
 8016d2a:	9b07      	ldr	r3, [sp, #28]
 8016d2c:	9805      	ldr	r0, [sp, #20]
 8016d2e:	6859      	ldr	r1, [r3, #4]
 8016d30:	f001 fd78 	bl	8018824 <_Balloc>
 8016d34:	4606      	mov	r6, r0
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f43f aef6 	beq.w	8016b28 <_strtod_l+0x420>
 8016d3c:	9b07      	ldr	r3, [sp, #28]
 8016d3e:	691a      	ldr	r2, [r3, #16]
 8016d40:	ec4b ab19 	vmov	d9, sl, fp
 8016d44:	3202      	adds	r2, #2
 8016d46:	f103 010c 	add.w	r1, r3, #12
 8016d4a:	0092      	lsls	r2, r2, #2
 8016d4c:	300c      	adds	r0, #12
 8016d4e:	f001 f996 	bl	801807e <memcpy>
 8016d52:	eeb0 0b49 	vmov.f64	d0, d9
 8016d56:	9805      	ldr	r0, [sp, #20]
 8016d58:	aa14      	add	r2, sp, #80	@ 0x50
 8016d5a:	a913      	add	r1, sp, #76	@ 0x4c
 8016d5c:	f002 f946 	bl	8018fec <__d2b>
 8016d60:	9012      	str	r0, [sp, #72]	@ 0x48
 8016d62:	2800      	cmp	r0, #0
 8016d64:	f43f aee0 	beq.w	8016b28 <_strtod_l+0x420>
 8016d68:	9805      	ldr	r0, [sp, #20]
 8016d6a:	2101      	movs	r1, #1
 8016d6c:	f001 fe98 	bl	8018aa0 <__i2b>
 8016d70:	4605      	mov	r5, r0
 8016d72:	b940      	cbnz	r0, 8016d86 <_strtod_l+0x67e>
 8016d74:	2500      	movs	r5, #0
 8016d76:	e6d7      	b.n	8016b28 <_strtod_l+0x420>
 8016d78:	f04f 31ff 	mov.w	r1, #4294967295
 8016d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8016d80:	ea02 0a0a 	and.w	sl, r2, sl
 8016d84:	e7b0      	b.n	8016ce8 <_strtod_l+0x5e0>
 8016d86:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016d88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016d8a:	2f00      	cmp	r7, #0
 8016d8c:	bfab      	itete	ge
 8016d8e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016d90:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8016d92:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8016d96:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016d9a:	bfac      	ite	ge
 8016d9c:	eb07 0903 	addge.w	r9, r7, r3
 8016da0:	eba3 0807 	sublt.w	r8, r3, r7
 8016da4:	9b06      	ldr	r3, [sp, #24]
 8016da6:	1aff      	subs	r7, r7, r3
 8016da8:	4417      	add	r7, r2
 8016daa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016dae:	4a6b      	ldr	r2, [pc, #428]	@ (8016f5c <_strtod_l+0x854>)
 8016db0:	3f01      	subs	r7, #1
 8016db2:	4297      	cmp	r7, r2
 8016db4:	da51      	bge.n	8016e5a <_strtod_l+0x752>
 8016db6:	1bd1      	subs	r1, r2, r7
 8016db8:	291f      	cmp	r1, #31
 8016dba:	eba3 0301 	sub.w	r3, r3, r1
 8016dbe:	f04f 0201 	mov.w	r2, #1
 8016dc2:	dc3e      	bgt.n	8016e42 <_strtod_l+0x73a>
 8016dc4:	408a      	lsls	r2, r1
 8016dc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8016dc8:	2200      	movs	r2, #0
 8016dca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016dcc:	eb09 0703 	add.w	r7, r9, r3
 8016dd0:	4498      	add	r8, r3
 8016dd2:	9b06      	ldr	r3, [sp, #24]
 8016dd4:	45b9      	cmp	r9, r7
 8016dd6:	4498      	add	r8, r3
 8016dd8:	464b      	mov	r3, r9
 8016dda:	bfa8      	it	ge
 8016ddc:	463b      	movge	r3, r7
 8016dde:	4543      	cmp	r3, r8
 8016de0:	bfa8      	it	ge
 8016de2:	4643      	movge	r3, r8
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	bfc2      	ittt	gt
 8016de8:	1aff      	subgt	r7, r7, r3
 8016dea:	eba8 0803 	subgt.w	r8, r8, r3
 8016dee:	eba9 0903 	subgt.w	r9, r9, r3
 8016df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	dd16      	ble.n	8016e26 <_strtod_l+0x71e>
 8016df8:	4629      	mov	r1, r5
 8016dfa:	9805      	ldr	r0, [sp, #20]
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	f001 ff0f 	bl	8018c20 <__pow5mult>
 8016e02:	4605      	mov	r5, r0
 8016e04:	2800      	cmp	r0, #0
 8016e06:	d0b5      	beq.n	8016d74 <_strtod_l+0x66c>
 8016e08:	4601      	mov	r1, r0
 8016e0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e0c:	9805      	ldr	r0, [sp, #20]
 8016e0e:	f001 fe5d 	bl	8018acc <__multiply>
 8016e12:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016e14:	2800      	cmp	r0, #0
 8016e16:	f43f ae87 	beq.w	8016b28 <_strtod_l+0x420>
 8016e1a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e1c:	9805      	ldr	r0, [sp, #20]
 8016e1e:	f001 fd41 	bl	80188a4 <_Bfree>
 8016e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e24:	9312      	str	r3, [sp, #72]	@ 0x48
 8016e26:	2f00      	cmp	r7, #0
 8016e28:	dc1b      	bgt.n	8016e62 <_strtod_l+0x75a>
 8016e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	dd21      	ble.n	8016e74 <_strtod_l+0x76c>
 8016e30:	4631      	mov	r1, r6
 8016e32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016e34:	9805      	ldr	r0, [sp, #20]
 8016e36:	f001 fef3 	bl	8018c20 <__pow5mult>
 8016e3a:	4606      	mov	r6, r0
 8016e3c:	b9d0      	cbnz	r0, 8016e74 <_strtod_l+0x76c>
 8016e3e:	2600      	movs	r6, #0
 8016e40:	e672      	b.n	8016b28 <_strtod_l+0x420>
 8016e42:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8016e46:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016e4a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016e4e:	37e2      	adds	r7, #226	@ 0xe2
 8016e50:	fa02 f107 	lsl.w	r1, r2, r7
 8016e54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016e56:	920c      	str	r2, [sp, #48]	@ 0x30
 8016e58:	e7b8      	b.n	8016dcc <_strtod_l+0x6c4>
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016e5e:	2201      	movs	r2, #1
 8016e60:	e7f9      	b.n	8016e56 <_strtod_l+0x74e>
 8016e62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e64:	9805      	ldr	r0, [sp, #20]
 8016e66:	463a      	mov	r2, r7
 8016e68:	f001 ff34 	bl	8018cd4 <__lshift>
 8016e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	d1db      	bne.n	8016e2a <_strtod_l+0x722>
 8016e72:	e659      	b.n	8016b28 <_strtod_l+0x420>
 8016e74:	f1b8 0f00 	cmp.w	r8, #0
 8016e78:	dd07      	ble.n	8016e8a <_strtod_l+0x782>
 8016e7a:	4631      	mov	r1, r6
 8016e7c:	9805      	ldr	r0, [sp, #20]
 8016e7e:	4642      	mov	r2, r8
 8016e80:	f001 ff28 	bl	8018cd4 <__lshift>
 8016e84:	4606      	mov	r6, r0
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d0d9      	beq.n	8016e3e <_strtod_l+0x736>
 8016e8a:	f1b9 0f00 	cmp.w	r9, #0
 8016e8e:	dd08      	ble.n	8016ea2 <_strtod_l+0x79a>
 8016e90:	4629      	mov	r1, r5
 8016e92:	9805      	ldr	r0, [sp, #20]
 8016e94:	464a      	mov	r2, r9
 8016e96:	f001 ff1d 	bl	8018cd4 <__lshift>
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	2800      	cmp	r0, #0
 8016e9e:	f43f ae43 	beq.w	8016b28 <_strtod_l+0x420>
 8016ea2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016ea4:	9805      	ldr	r0, [sp, #20]
 8016ea6:	4632      	mov	r2, r6
 8016ea8:	f001 ff9c 	bl	8018de4 <__mdiff>
 8016eac:	4604      	mov	r4, r0
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	f43f ae3a 	beq.w	8016b28 <_strtod_l+0x420>
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016eba:	60c3      	str	r3, [r0, #12]
 8016ebc:	4629      	mov	r1, r5
 8016ebe:	f001 ff75 	bl	8018dac <__mcmp>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	da4e      	bge.n	8016f64 <_strtod_l+0x85c>
 8016ec6:	ea58 080a 	orrs.w	r8, r8, sl
 8016eca:	d174      	bne.n	8016fb6 <_strtod_l+0x8ae>
 8016ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d170      	bne.n	8016fb6 <_strtod_l+0x8ae>
 8016ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ed8:	0d1b      	lsrs	r3, r3, #20
 8016eda:	051b      	lsls	r3, r3, #20
 8016edc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ee0:	d969      	bls.n	8016fb6 <_strtod_l+0x8ae>
 8016ee2:	6963      	ldr	r3, [r4, #20]
 8016ee4:	b913      	cbnz	r3, 8016eec <_strtod_l+0x7e4>
 8016ee6:	6923      	ldr	r3, [r4, #16]
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	dd64      	ble.n	8016fb6 <_strtod_l+0x8ae>
 8016eec:	4621      	mov	r1, r4
 8016eee:	2201      	movs	r2, #1
 8016ef0:	9805      	ldr	r0, [sp, #20]
 8016ef2:	f001 feef 	bl	8018cd4 <__lshift>
 8016ef6:	4629      	mov	r1, r5
 8016ef8:	4604      	mov	r4, r0
 8016efa:	f001 ff57 	bl	8018dac <__mcmp>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	dd59      	ble.n	8016fb6 <_strtod_l+0x8ae>
 8016f02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f06:	9a06      	ldr	r2, [sp, #24]
 8016f08:	0d1b      	lsrs	r3, r3, #20
 8016f0a:	051b      	lsls	r3, r3, #20
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	d070      	beq.n	8016ff2 <_strtod_l+0x8ea>
 8016f10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016f14:	d86d      	bhi.n	8016ff2 <_strtod_l+0x8ea>
 8016f16:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016f1a:	f67f ae99 	bls.w	8016c50 <_strtod_l+0x548>
 8016f1e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016f50 <_strtod_l+0x848>
 8016f22:	ec4b ab16 	vmov	d6, sl, fp
 8016f26:	4b0e      	ldr	r3, [pc, #56]	@ (8016f60 <_strtod_l+0x858>)
 8016f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f2c:	ee17 2a90 	vmov	r2, s15
 8016f30:	4013      	ands	r3, r2
 8016f32:	ec5b ab17 	vmov	sl, fp, d7
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f47f ae01 	bne.w	8016b3e <_strtod_l+0x436>
 8016f3c:	9a05      	ldr	r2, [sp, #20]
 8016f3e:	2322      	movs	r3, #34	@ 0x22
 8016f40:	6013      	str	r3, [r2, #0]
 8016f42:	e5fc      	b.n	8016b3e <_strtod_l+0x436>
 8016f44:	f3af 8000 	nop.w
 8016f48:	ffc00000 	.word	0xffc00000
 8016f4c:	41dfffff 	.word	0x41dfffff
 8016f50:	00000000 	.word	0x00000000
 8016f54:	39500000 	.word	0x39500000
 8016f58:	0801a638 	.word	0x0801a638
 8016f5c:	fffffc02 	.word	0xfffffc02
 8016f60:	7ff00000 	.word	0x7ff00000
 8016f64:	46d9      	mov	r9, fp
 8016f66:	d15d      	bne.n	8017024 <_strtod_l+0x91c>
 8016f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f6c:	f1b8 0f00 	cmp.w	r8, #0
 8016f70:	d02a      	beq.n	8016fc8 <_strtod_l+0x8c0>
 8016f72:	4aab      	ldr	r2, [pc, #684]	@ (8017220 <_strtod_l+0xb18>)
 8016f74:	4293      	cmp	r3, r2
 8016f76:	d12a      	bne.n	8016fce <_strtod_l+0x8c6>
 8016f78:	9b06      	ldr	r3, [sp, #24]
 8016f7a:	4652      	mov	r2, sl
 8016f7c:	b1fb      	cbz	r3, 8016fbe <_strtod_l+0x8b6>
 8016f7e:	4ba9      	ldr	r3, [pc, #676]	@ (8017224 <_strtod_l+0xb1c>)
 8016f80:	ea0b 0303 	and.w	r3, fp, r3
 8016f84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016f88:	f04f 31ff 	mov.w	r1, #4294967295
 8016f8c:	d81a      	bhi.n	8016fc4 <_strtod_l+0x8bc>
 8016f8e:	0d1b      	lsrs	r3, r3, #20
 8016f90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016f94:	fa01 f303 	lsl.w	r3, r1, r3
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d118      	bne.n	8016fce <_strtod_l+0x8c6>
 8016f9c:	4ba2      	ldr	r3, [pc, #648]	@ (8017228 <_strtod_l+0xb20>)
 8016f9e:	4599      	cmp	r9, r3
 8016fa0:	d102      	bne.n	8016fa8 <_strtod_l+0x8a0>
 8016fa2:	3201      	adds	r2, #1
 8016fa4:	f43f adc0 	beq.w	8016b28 <_strtod_l+0x420>
 8016fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8017224 <_strtod_l+0xb1c>)
 8016faa:	ea09 0303 	and.w	r3, r9, r3
 8016fae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016fb2:	f04f 0a00 	mov.w	sl, #0
 8016fb6:	9b06      	ldr	r3, [sp, #24]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d1b0      	bne.n	8016f1e <_strtod_l+0x816>
 8016fbc:	e5bf      	b.n	8016b3e <_strtod_l+0x436>
 8016fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8016fc2:	e7e9      	b.n	8016f98 <_strtod_l+0x890>
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	e7e7      	b.n	8016f98 <_strtod_l+0x890>
 8016fc8:	ea53 030a 	orrs.w	r3, r3, sl
 8016fcc:	d099      	beq.n	8016f02 <_strtod_l+0x7fa>
 8016fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016fd0:	b1c3      	cbz	r3, 8017004 <_strtod_l+0x8fc>
 8016fd2:	ea13 0f09 	tst.w	r3, r9
 8016fd6:	d0ee      	beq.n	8016fb6 <_strtod_l+0x8ae>
 8016fd8:	9a06      	ldr	r2, [sp, #24]
 8016fda:	4650      	mov	r0, sl
 8016fdc:	4659      	mov	r1, fp
 8016fde:	f1b8 0f00 	cmp.w	r8, #0
 8016fe2:	d013      	beq.n	801700c <_strtod_l+0x904>
 8016fe4:	f7ff fb76 	bl	80166d4 <sulp>
 8016fe8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016fec:	ec5b ab17 	vmov	sl, fp, d7
 8016ff0:	e7e1      	b.n	8016fb6 <_strtod_l+0x8ae>
 8016ff2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016ff6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016ffa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016ffe:	f04f 3aff 	mov.w	sl, #4294967295
 8017002:	e7d8      	b.n	8016fb6 <_strtod_l+0x8ae>
 8017004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017006:	ea13 0f0a 	tst.w	r3, sl
 801700a:	e7e4      	b.n	8016fd6 <_strtod_l+0x8ce>
 801700c:	f7ff fb62 	bl	80166d4 <sulp>
 8017010:	ee39 0b40 	vsub.f64	d0, d9, d0
 8017014:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701c:	ec5b ab10 	vmov	sl, fp, d0
 8017020:	d1c9      	bne.n	8016fb6 <_strtod_l+0x8ae>
 8017022:	e615      	b.n	8016c50 <_strtod_l+0x548>
 8017024:	4629      	mov	r1, r5
 8017026:	4620      	mov	r0, r4
 8017028:	f002 f838 	bl	801909c <__ratio>
 801702c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017030:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017038:	d85d      	bhi.n	80170f6 <_strtod_l+0x9ee>
 801703a:	f1b8 0f00 	cmp.w	r8, #0
 801703e:	d164      	bne.n	801710a <_strtod_l+0xa02>
 8017040:	f1ba 0f00 	cmp.w	sl, #0
 8017044:	d14b      	bne.n	80170de <_strtod_l+0x9d6>
 8017046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801704a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d160      	bne.n	8017114 <_strtod_l+0xa0c>
 8017052:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8017056:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801705a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705e:	d401      	bmi.n	8017064 <_strtod_l+0x95c>
 8017060:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017064:	eeb1 ab48 	vneg.f64	d10, d8
 8017068:	486e      	ldr	r0, [pc, #440]	@ (8017224 <_strtod_l+0xb1c>)
 801706a:	4970      	ldr	r1, [pc, #448]	@ (801722c <_strtod_l+0xb24>)
 801706c:	ea09 0700 	and.w	r7, r9, r0
 8017070:	428f      	cmp	r7, r1
 8017072:	ec53 2b1a 	vmov	r2, r3, d10
 8017076:	d17d      	bne.n	8017174 <_strtod_l+0xa6c>
 8017078:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801707c:	ec4b ab1c 	vmov	d12, sl, fp
 8017080:	eeb0 0b4c 	vmov.f64	d0, d12
 8017084:	f001 ff42 	bl	8018f0c <__ulp>
 8017088:	4866      	ldr	r0, [pc, #408]	@ (8017224 <_strtod_l+0xb1c>)
 801708a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801708e:	ee1c 3a90 	vmov	r3, s25
 8017092:	4a67      	ldr	r2, [pc, #412]	@ (8017230 <_strtod_l+0xb28>)
 8017094:	ea03 0100 	and.w	r1, r3, r0
 8017098:	4291      	cmp	r1, r2
 801709a:	ec5b ab1c 	vmov	sl, fp, d12
 801709e:	d93c      	bls.n	801711a <_strtod_l+0xa12>
 80170a0:	ee19 2a90 	vmov	r2, s19
 80170a4:	4b60      	ldr	r3, [pc, #384]	@ (8017228 <_strtod_l+0xb20>)
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d104      	bne.n	80170b4 <_strtod_l+0x9ac>
 80170aa:	ee19 3a10 	vmov	r3, s18
 80170ae:	3301      	adds	r3, #1
 80170b0:	f43f ad3a 	beq.w	8016b28 <_strtod_l+0x420>
 80170b4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017228 <_strtod_l+0xb20>
 80170b8:	f04f 3aff 	mov.w	sl, #4294967295
 80170bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80170be:	9805      	ldr	r0, [sp, #20]
 80170c0:	f001 fbf0 	bl	80188a4 <_Bfree>
 80170c4:	9805      	ldr	r0, [sp, #20]
 80170c6:	4631      	mov	r1, r6
 80170c8:	f001 fbec 	bl	80188a4 <_Bfree>
 80170cc:	9805      	ldr	r0, [sp, #20]
 80170ce:	4629      	mov	r1, r5
 80170d0:	f001 fbe8 	bl	80188a4 <_Bfree>
 80170d4:	9805      	ldr	r0, [sp, #20]
 80170d6:	4621      	mov	r1, r4
 80170d8:	f001 fbe4 	bl	80188a4 <_Bfree>
 80170dc:	e625      	b.n	8016d2a <_strtod_l+0x622>
 80170de:	f1ba 0f01 	cmp.w	sl, #1
 80170e2:	d103      	bne.n	80170ec <_strtod_l+0x9e4>
 80170e4:	f1bb 0f00 	cmp.w	fp, #0
 80170e8:	f43f adb2 	beq.w	8016c50 <_strtod_l+0x548>
 80170ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80170f0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80170f4:	e7b8      	b.n	8017068 <_strtod_l+0x960>
 80170f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80170fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80170fe:	f1b8 0f00 	cmp.w	r8, #0
 8017102:	d0af      	beq.n	8017064 <_strtod_l+0x95c>
 8017104:	eeb0 ab48 	vmov.f64	d10, d8
 8017108:	e7ae      	b.n	8017068 <_strtod_l+0x960>
 801710a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801710e:	eeb0 8b4a 	vmov.f64	d8, d10
 8017112:	e7a9      	b.n	8017068 <_strtod_l+0x960>
 8017114:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017118:	e7a6      	b.n	8017068 <_strtod_l+0x960>
 801711a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801711e:	9b06      	ldr	r3, [sp, #24]
 8017120:	46d9      	mov	r9, fp
 8017122:	2b00      	cmp	r3, #0
 8017124:	d1ca      	bne.n	80170bc <_strtod_l+0x9b4>
 8017126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801712a:	0d1b      	lsrs	r3, r3, #20
 801712c:	051b      	lsls	r3, r3, #20
 801712e:	429f      	cmp	r7, r3
 8017130:	d1c4      	bne.n	80170bc <_strtod_l+0x9b4>
 8017132:	ec51 0b18 	vmov	r0, r1, d8
 8017136:	f7e9 faff 	bl	8000738 <__aeabi_d2lz>
 801713a:	f7e9 fab7 	bl	80006ac <__aeabi_l2d>
 801713e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8017142:	ec41 0b17 	vmov	d7, r0, r1
 8017146:	ea49 090a 	orr.w	r9, r9, sl
 801714a:	ea59 0908 	orrs.w	r9, r9, r8
 801714e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017152:	d03c      	beq.n	80171ce <_strtod_l+0xac6>
 8017154:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017208 <_strtod_l+0xb00>
 8017158:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017160:	f53f aced 	bmi.w	8016b3e <_strtod_l+0x436>
 8017164:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017210 <_strtod_l+0xb08>
 8017168:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017170:	dda4      	ble.n	80170bc <_strtod_l+0x9b4>
 8017172:	e4e4      	b.n	8016b3e <_strtod_l+0x436>
 8017174:	9906      	ldr	r1, [sp, #24]
 8017176:	b1e1      	cbz	r1, 80171b2 <_strtod_l+0xaaa>
 8017178:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801717c:	d819      	bhi.n	80171b2 <_strtod_l+0xaaa>
 801717e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017186:	d811      	bhi.n	80171ac <_strtod_l+0xaa4>
 8017188:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801718c:	ee18 3a10 	vmov	r3, s16
 8017190:	2b01      	cmp	r3, #1
 8017192:	bf38      	it	cc
 8017194:	2301      	movcc	r3, #1
 8017196:	ee08 3a10 	vmov	s16, r3
 801719a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801719e:	f1b8 0f00 	cmp.w	r8, #0
 80171a2:	d111      	bne.n	80171c8 <_strtod_l+0xac0>
 80171a4:	eeb1 7b48 	vneg.f64	d7, d8
 80171a8:	ec53 2b17 	vmov	r2, r3, d7
 80171ac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80171b0:	1bcb      	subs	r3, r1, r7
 80171b2:	eeb0 0b49 	vmov.f64	d0, d9
 80171b6:	ec43 2b1a 	vmov	d10, r2, r3
 80171ba:	f001 fea7 	bl	8018f0c <__ulp>
 80171be:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80171c2:	ec5b ab19 	vmov	sl, fp, d9
 80171c6:	e7aa      	b.n	801711e <_strtod_l+0xa16>
 80171c8:	eeb0 7b48 	vmov.f64	d7, d8
 80171cc:	e7ec      	b.n	80171a8 <_strtod_l+0xaa0>
 80171ce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017218 <_strtod_l+0xb10>
 80171d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80171d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171da:	f57f af6f 	bpl.w	80170bc <_strtod_l+0x9b4>
 80171de:	e4ae      	b.n	8016b3e <_strtod_l+0x436>
 80171e0:	2300      	movs	r3, #0
 80171e2:	9308      	str	r3, [sp, #32]
 80171e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80171e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80171e8:	6013      	str	r3, [r2, #0]
 80171ea:	f7ff bacc 	b.w	8016786 <_strtod_l+0x7e>
 80171ee:	2a65      	cmp	r2, #101	@ 0x65
 80171f0:	f43f abbc 	beq.w	801696c <_strtod_l+0x264>
 80171f4:	2a45      	cmp	r2, #69	@ 0x45
 80171f6:	f43f abb9 	beq.w	801696c <_strtod_l+0x264>
 80171fa:	2301      	movs	r3, #1
 80171fc:	9306      	str	r3, [sp, #24]
 80171fe:	f7ff bbf0 	b.w	80169e2 <_strtod_l+0x2da>
 8017202:	bf00      	nop
 8017204:	f3af 8000 	nop.w
 8017208:	94a03595 	.word	0x94a03595
 801720c:	3fdfffff 	.word	0x3fdfffff
 8017210:	35afe535 	.word	0x35afe535
 8017214:	3fe00000 	.word	0x3fe00000
 8017218:	94a03595 	.word	0x94a03595
 801721c:	3fcfffff 	.word	0x3fcfffff
 8017220:	000fffff 	.word	0x000fffff
 8017224:	7ff00000 	.word	0x7ff00000
 8017228:	7fefffff 	.word	0x7fefffff
 801722c:	7fe00000 	.word	0x7fe00000
 8017230:	7c9fffff 	.word	0x7c9fffff

08017234 <_strtod_r>:
 8017234:	4b01      	ldr	r3, [pc, #4]	@ (801723c <_strtod_r+0x8>)
 8017236:	f7ff ba67 	b.w	8016708 <_strtod_l>
 801723a:	bf00      	nop
 801723c:	24000114 	.word	0x24000114

08017240 <strtod>:
 8017240:	460a      	mov	r2, r1
 8017242:	4601      	mov	r1, r0
 8017244:	4802      	ldr	r0, [pc, #8]	@ (8017250 <strtod+0x10>)
 8017246:	4b03      	ldr	r3, [pc, #12]	@ (8017254 <strtod+0x14>)
 8017248:	6800      	ldr	r0, [r0, #0]
 801724a:	f7ff ba5d 	b.w	8016708 <_strtod_l>
 801724e:	bf00      	nop
 8017250:	24000280 	.word	0x24000280
 8017254:	24000114 	.word	0x24000114

08017258 <_strtol_l.constprop.0>:
 8017258:	2b24      	cmp	r3, #36	@ 0x24
 801725a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801725e:	4686      	mov	lr, r0
 8017260:	4690      	mov	r8, r2
 8017262:	d801      	bhi.n	8017268 <_strtol_l.constprop.0+0x10>
 8017264:	2b01      	cmp	r3, #1
 8017266:	d106      	bne.n	8017276 <_strtol_l.constprop.0+0x1e>
 8017268:	f000 fedc 	bl	8018024 <__errno>
 801726c:	2316      	movs	r3, #22
 801726e:	6003      	str	r3, [r0, #0]
 8017270:	2000      	movs	r0, #0
 8017272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017276:	4834      	ldr	r0, [pc, #208]	@ (8017348 <_strtol_l.constprop.0+0xf0>)
 8017278:	460d      	mov	r5, r1
 801727a:	462a      	mov	r2, r5
 801727c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017280:	5d06      	ldrb	r6, [r0, r4]
 8017282:	f016 0608 	ands.w	r6, r6, #8
 8017286:	d1f8      	bne.n	801727a <_strtol_l.constprop.0+0x22>
 8017288:	2c2d      	cmp	r4, #45	@ 0x2d
 801728a:	d12d      	bne.n	80172e8 <_strtol_l.constprop.0+0x90>
 801728c:	782c      	ldrb	r4, [r5, #0]
 801728e:	2601      	movs	r6, #1
 8017290:	1c95      	adds	r5, r2, #2
 8017292:	f033 0210 	bics.w	r2, r3, #16
 8017296:	d109      	bne.n	80172ac <_strtol_l.constprop.0+0x54>
 8017298:	2c30      	cmp	r4, #48	@ 0x30
 801729a:	d12a      	bne.n	80172f2 <_strtol_l.constprop.0+0x9a>
 801729c:	782a      	ldrb	r2, [r5, #0]
 801729e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80172a2:	2a58      	cmp	r2, #88	@ 0x58
 80172a4:	d125      	bne.n	80172f2 <_strtol_l.constprop.0+0x9a>
 80172a6:	786c      	ldrb	r4, [r5, #1]
 80172a8:	2310      	movs	r3, #16
 80172aa:	3502      	adds	r5, #2
 80172ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80172b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80172b4:	2200      	movs	r2, #0
 80172b6:	fbbc f9f3 	udiv	r9, ip, r3
 80172ba:	4610      	mov	r0, r2
 80172bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80172c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80172c4:	2f09      	cmp	r7, #9
 80172c6:	d81b      	bhi.n	8017300 <_strtol_l.constprop.0+0xa8>
 80172c8:	463c      	mov	r4, r7
 80172ca:	42a3      	cmp	r3, r4
 80172cc:	dd27      	ble.n	801731e <_strtol_l.constprop.0+0xc6>
 80172ce:	1c57      	adds	r7, r2, #1
 80172d0:	d007      	beq.n	80172e2 <_strtol_l.constprop.0+0x8a>
 80172d2:	4581      	cmp	r9, r0
 80172d4:	d320      	bcc.n	8017318 <_strtol_l.constprop.0+0xc0>
 80172d6:	d101      	bne.n	80172dc <_strtol_l.constprop.0+0x84>
 80172d8:	45a2      	cmp	sl, r4
 80172da:	db1d      	blt.n	8017318 <_strtol_l.constprop.0+0xc0>
 80172dc:	fb00 4003 	mla	r0, r0, r3, r4
 80172e0:	2201      	movs	r2, #1
 80172e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172e6:	e7eb      	b.n	80172c0 <_strtol_l.constprop.0+0x68>
 80172e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80172ea:	bf04      	itt	eq
 80172ec:	782c      	ldrbeq	r4, [r5, #0]
 80172ee:	1c95      	addeq	r5, r2, #2
 80172f0:	e7cf      	b.n	8017292 <_strtol_l.constprop.0+0x3a>
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d1da      	bne.n	80172ac <_strtol_l.constprop.0+0x54>
 80172f6:	2c30      	cmp	r4, #48	@ 0x30
 80172f8:	bf0c      	ite	eq
 80172fa:	2308      	moveq	r3, #8
 80172fc:	230a      	movne	r3, #10
 80172fe:	e7d5      	b.n	80172ac <_strtol_l.constprop.0+0x54>
 8017300:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017304:	2f19      	cmp	r7, #25
 8017306:	d801      	bhi.n	801730c <_strtol_l.constprop.0+0xb4>
 8017308:	3c37      	subs	r4, #55	@ 0x37
 801730a:	e7de      	b.n	80172ca <_strtol_l.constprop.0+0x72>
 801730c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017310:	2f19      	cmp	r7, #25
 8017312:	d804      	bhi.n	801731e <_strtol_l.constprop.0+0xc6>
 8017314:	3c57      	subs	r4, #87	@ 0x57
 8017316:	e7d8      	b.n	80172ca <_strtol_l.constprop.0+0x72>
 8017318:	f04f 32ff 	mov.w	r2, #4294967295
 801731c:	e7e1      	b.n	80172e2 <_strtol_l.constprop.0+0x8a>
 801731e:	1c53      	adds	r3, r2, #1
 8017320:	d108      	bne.n	8017334 <_strtol_l.constprop.0+0xdc>
 8017322:	2322      	movs	r3, #34	@ 0x22
 8017324:	f8ce 3000 	str.w	r3, [lr]
 8017328:	4660      	mov	r0, ip
 801732a:	f1b8 0f00 	cmp.w	r8, #0
 801732e:	d0a0      	beq.n	8017272 <_strtol_l.constprop.0+0x1a>
 8017330:	1e69      	subs	r1, r5, #1
 8017332:	e006      	b.n	8017342 <_strtol_l.constprop.0+0xea>
 8017334:	b106      	cbz	r6, 8017338 <_strtol_l.constprop.0+0xe0>
 8017336:	4240      	negs	r0, r0
 8017338:	f1b8 0f00 	cmp.w	r8, #0
 801733c:	d099      	beq.n	8017272 <_strtol_l.constprop.0+0x1a>
 801733e:	2a00      	cmp	r2, #0
 8017340:	d1f6      	bne.n	8017330 <_strtol_l.constprop.0+0xd8>
 8017342:	f8c8 1000 	str.w	r1, [r8]
 8017346:	e794      	b.n	8017272 <_strtol_l.constprop.0+0x1a>
 8017348:	0801a661 	.word	0x0801a661

0801734c <_strtol_r>:
 801734c:	f7ff bf84 	b.w	8017258 <_strtol_l.constprop.0>

08017350 <strtol>:
 8017350:	4613      	mov	r3, r2
 8017352:	460a      	mov	r2, r1
 8017354:	4601      	mov	r1, r0
 8017356:	4802      	ldr	r0, [pc, #8]	@ (8017360 <strtol+0x10>)
 8017358:	6800      	ldr	r0, [r0, #0]
 801735a:	f7ff bf7d 	b.w	8017258 <_strtol_l.constprop.0>
 801735e:	bf00      	nop
 8017360:	24000280 	.word	0x24000280

08017364 <_scanf_float>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	b087      	sub	sp, #28
 801736a:	4617      	mov	r7, r2
 801736c:	9303      	str	r3, [sp, #12]
 801736e:	688b      	ldr	r3, [r1, #8]
 8017370:	1e5a      	subs	r2, r3, #1
 8017372:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017376:	bf81      	itttt	hi
 8017378:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801737c:	eb03 0b05 	addhi.w	fp, r3, r5
 8017380:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017384:	608b      	strhi	r3, [r1, #8]
 8017386:	680b      	ldr	r3, [r1, #0]
 8017388:	460a      	mov	r2, r1
 801738a:	f04f 0500 	mov.w	r5, #0
 801738e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017392:	f842 3b1c 	str.w	r3, [r2], #28
 8017396:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801739a:	4680      	mov	r8, r0
 801739c:	460c      	mov	r4, r1
 801739e:	bf98      	it	ls
 80173a0:	f04f 0b00 	movls.w	fp, #0
 80173a4:	9201      	str	r2, [sp, #4]
 80173a6:	4616      	mov	r6, r2
 80173a8:	46aa      	mov	sl, r5
 80173aa:	46a9      	mov	r9, r5
 80173ac:	9502      	str	r5, [sp, #8]
 80173ae:	68a2      	ldr	r2, [r4, #8]
 80173b0:	b152      	cbz	r2, 80173c8 <_scanf_float+0x64>
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	781b      	ldrb	r3, [r3, #0]
 80173b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80173b8:	d864      	bhi.n	8017484 <_scanf_float+0x120>
 80173ba:	2b40      	cmp	r3, #64	@ 0x40
 80173bc:	d83c      	bhi.n	8017438 <_scanf_float+0xd4>
 80173be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80173c2:	b2c8      	uxtb	r0, r1
 80173c4:	280e      	cmp	r0, #14
 80173c6:	d93a      	bls.n	801743e <_scanf_float+0xda>
 80173c8:	f1b9 0f00 	cmp.w	r9, #0
 80173cc:	d003      	beq.n	80173d6 <_scanf_float+0x72>
 80173ce:	6823      	ldr	r3, [r4, #0]
 80173d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80173d4:	6023      	str	r3, [r4, #0]
 80173d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80173da:	f1ba 0f01 	cmp.w	sl, #1
 80173de:	f200 8117 	bhi.w	8017610 <_scanf_float+0x2ac>
 80173e2:	9b01      	ldr	r3, [sp, #4]
 80173e4:	429e      	cmp	r6, r3
 80173e6:	f200 8108 	bhi.w	80175fa <_scanf_float+0x296>
 80173ea:	2001      	movs	r0, #1
 80173ec:	b007      	add	sp, #28
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80173f6:	2a0d      	cmp	r2, #13
 80173f8:	d8e6      	bhi.n	80173c8 <_scanf_float+0x64>
 80173fa:	a101      	add	r1, pc, #4	@ (adr r1, 8017400 <_scanf_float+0x9c>)
 80173fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017400:	08017547 	.word	0x08017547
 8017404:	080173c9 	.word	0x080173c9
 8017408:	080173c9 	.word	0x080173c9
 801740c:	080173c9 	.word	0x080173c9
 8017410:	080175a7 	.word	0x080175a7
 8017414:	0801757f 	.word	0x0801757f
 8017418:	080173c9 	.word	0x080173c9
 801741c:	080173c9 	.word	0x080173c9
 8017420:	08017555 	.word	0x08017555
 8017424:	080173c9 	.word	0x080173c9
 8017428:	080173c9 	.word	0x080173c9
 801742c:	080173c9 	.word	0x080173c9
 8017430:	080173c9 	.word	0x080173c9
 8017434:	0801750d 	.word	0x0801750d
 8017438:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801743c:	e7db      	b.n	80173f6 <_scanf_float+0x92>
 801743e:	290e      	cmp	r1, #14
 8017440:	d8c2      	bhi.n	80173c8 <_scanf_float+0x64>
 8017442:	a001      	add	r0, pc, #4	@ (adr r0, 8017448 <_scanf_float+0xe4>)
 8017444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017448:	080174fd 	.word	0x080174fd
 801744c:	080173c9 	.word	0x080173c9
 8017450:	080174fd 	.word	0x080174fd
 8017454:	08017593 	.word	0x08017593
 8017458:	080173c9 	.word	0x080173c9
 801745c:	080174a5 	.word	0x080174a5
 8017460:	080174e3 	.word	0x080174e3
 8017464:	080174e3 	.word	0x080174e3
 8017468:	080174e3 	.word	0x080174e3
 801746c:	080174e3 	.word	0x080174e3
 8017470:	080174e3 	.word	0x080174e3
 8017474:	080174e3 	.word	0x080174e3
 8017478:	080174e3 	.word	0x080174e3
 801747c:	080174e3 	.word	0x080174e3
 8017480:	080174e3 	.word	0x080174e3
 8017484:	2b6e      	cmp	r3, #110	@ 0x6e
 8017486:	d809      	bhi.n	801749c <_scanf_float+0x138>
 8017488:	2b60      	cmp	r3, #96	@ 0x60
 801748a:	d8b2      	bhi.n	80173f2 <_scanf_float+0x8e>
 801748c:	2b54      	cmp	r3, #84	@ 0x54
 801748e:	d07b      	beq.n	8017588 <_scanf_float+0x224>
 8017490:	2b59      	cmp	r3, #89	@ 0x59
 8017492:	d199      	bne.n	80173c8 <_scanf_float+0x64>
 8017494:	2d07      	cmp	r5, #7
 8017496:	d197      	bne.n	80173c8 <_scanf_float+0x64>
 8017498:	2508      	movs	r5, #8
 801749a:	e02c      	b.n	80174f6 <_scanf_float+0x192>
 801749c:	2b74      	cmp	r3, #116	@ 0x74
 801749e:	d073      	beq.n	8017588 <_scanf_float+0x224>
 80174a0:	2b79      	cmp	r3, #121	@ 0x79
 80174a2:	e7f6      	b.n	8017492 <_scanf_float+0x12e>
 80174a4:	6821      	ldr	r1, [r4, #0]
 80174a6:	05c8      	lsls	r0, r1, #23
 80174a8:	d51b      	bpl.n	80174e2 <_scanf_float+0x17e>
 80174aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80174ae:	6021      	str	r1, [r4, #0]
 80174b0:	f109 0901 	add.w	r9, r9, #1
 80174b4:	f1bb 0f00 	cmp.w	fp, #0
 80174b8:	d003      	beq.n	80174c2 <_scanf_float+0x15e>
 80174ba:	3201      	adds	r2, #1
 80174bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174c0:	60a2      	str	r2, [r4, #8]
 80174c2:	68a3      	ldr	r3, [r4, #8]
 80174c4:	3b01      	subs	r3, #1
 80174c6:	60a3      	str	r3, [r4, #8]
 80174c8:	6923      	ldr	r3, [r4, #16]
 80174ca:	3301      	adds	r3, #1
 80174cc:	6123      	str	r3, [r4, #16]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	3b01      	subs	r3, #1
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	607b      	str	r3, [r7, #4]
 80174d6:	f340 8087 	ble.w	80175e8 <_scanf_float+0x284>
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	3301      	adds	r3, #1
 80174de:	603b      	str	r3, [r7, #0]
 80174e0:	e765      	b.n	80173ae <_scanf_float+0x4a>
 80174e2:	eb1a 0105 	adds.w	r1, sl, r5
 80174e6:	f47f af6f 	bne.w	80173c8 <_scanf_float+0x64>
 80174ea:	6822      	ldr	r2, [r4, #0]
 80174ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80174f0:	6022      	str	r2, [r4, #0]
 80174f2:	460d      	mov	r5, r1
 80174f4:	468a      	mov	sl, r1
 80174f6:	f806 3b01 	strb.w	r3, [r6], #1
 80174fa:	e7e2      	b.n	80174c2 <_scanf_float+0x15e>
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	0610      	lsls	r0, r2, #24
 8017500:	f57f af62 	bpl.w	80173c8 <_scanf_float+0x64>
 8017504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017508:	6022      	str	r2, [r4, #0]
 801750a:	e7f4      	b.n	80174f6 <_scanf_float+0x192>
 801750c:	f1ba 0f00 	cmp.w	sl, #0
 8017510:	d10e      	bne.n	8017530 <_scanf_float+0x1cc>
 8017512:	f1b9 0f00 	cmp.w	r9, #0
 8017516:	d10e      	bne.n	8017536 <_scanf_float+0x1d2>
 8017518:	6822      	ldr	r2, [r4, #0]
 801751a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801751e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017522:	d108      	bne.n	8017536 <_scanf_float+0x1d2>
 8017524:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017528:	6022      	str	r2, [r4, #0]
 801752a:	f04f 0a01 	mov.w	sl, #1
 801752e:	e7e2      	b.n	80174f6 <_scanf_float+0x192>
 8017530:	f1ba 0f02 	cmp.w	sl, #2
 8017534:	d055      	beq.n	80175e2 <_scanf_float+0x27e>
 8017536:	2d01      	cmp	r5, #1
 8017538:	d002      	beq.n	8017540 <_scanf_float+0x1dc>
 801753a:	2d04      	cmp	r5, #4
 801753c:	f47f af44 	bne.w	80173c8 <_scanf_float+0x64>
 8017540:	3501      	adds	r5, #1
 8017542:	b2ed      	uxtb	r5, r5
 8017544:	e7d7      	b.n	80174f6 <_scanf_float+0x192>
 8017546:	f1ba 0f01 	cmp.w	sl, #1
 801754a:	f47f af3d 	bne.w	80173c8 <_scanf_float+0x64>
 801754e:	f04f 0a02 	mov.w	sl, #2
 8017552:	e7d0      	b.n	80174f6 <_scanf_float+0x192>
 8017554:	b97d      	cbnz	r5, 8017576 <_scanf_float+0x212>
 8017556:	f1b9 0f00 	cmp.w	r9, #0
 801755a:	f47f af38 	bne.w	80173ce <_scanf_float+0x6a>
 801755e:	6822      	ldr	r2, [r4, #0]
 8017560:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017564:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017568:	f040 8101 	bne.w	801776e <_scanf_float+0x40a>
 801756c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017570:	6022      	str	r2, [r4, #0]
 8017572:	2501      	movs	r5, #1
 8017574:	e7bf      	b.n	80174f6 <_scanf_float+0x192>
 8017576:	2d03      	cmp	r5, #3
 8017578:	d0e2      	beq.n	8017540 <_scanf_float+0x1dc>
 801757a:	2d05      	cmp	r5, #5
 801757c:	e7de      	b.n	801753c <_scanf_float+0x1d8>
 801757e:	2d02      	cmp	r5, #2
 8017580:	f47f af22 	bne.w	80173c8 <_scanf_float+0x64>
 8017584:	2503      	movs	r5, #3
 8017586:	e7b6      	b.n	80174f6 <_scanf_float+0x192>
 8017588:	2d06      	cmp	r5, #6
 801758a:	f47f af1d 	bne.w	80173c8 <_scanf_float+0x64>
 801758e:	2507      	movs	r5, #7
 8017590:	e7b1      	b.n	80174f6 <_scanf_float+0x192>
 8017592:	6822      	ldr	r2, [r4, #0]
 8017594:	0591      	lsls	r1, r2, #22
 8017596:	f57f af17 	bpl.w	80173c8 <_scanf_float+0x64>
 801759a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801759e:	6022      	str	r2, [r4, #0]
 80175a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80175a4:	e7a7      	b.n	80174f6 <_scanf_float+0x192>
 80175a6:	6822      	ldr	r2, [r4, #0]
 80175a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80175ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80175b0:	d006      	beq.n	80175c0 <_scanf_float+0x25c>
 80175b2:	0550      	lsls	r0, r2, #21
 80175b4:	f57f af08 	bpl.w	80173c8 <_scanf_float+0x64>
 80175b8:	f1b9 0f00 	cmp.w	r9, #0
 80175bc:	f000 80d7 	beq.w	801776e <_scanf_float+0x40a>
 80175c0:	0591      	lsls	r1, r2, #22
 80175c2:	bf58      	it	pl
 80175c4:	9902      	ldrpl	r1, [sp, #8]
 80175c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80175ca:	bf58      	it	pl
 80175cc:	eba9 0101 	subpl.w	r1, r9, r1
 80175d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80175d4:	bf58      	it	pl
 80175d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80175da:	6022      	str	r2, [r4, #0]
 80175dc:	f04f 0900 	mov.w	r9, #0
 80175e0:	e789      	b.n	80174f6 <_scanf_float+0x192>
 80175e2:	f04f 0a03 	mov.w	sl, #3
 80175e6:	e786      	b.n	80174f6 <_scanf_float+0x192>
 80175e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80175ec:	4639      	mov	r1, r7
 80175ee:	4640      	mov	r0, r8
 80175f0:	4798      	blx	r3
 80175f2:	2800      	cmp	r0, #0
 80175f4:	f43f aedb 	beq.w	80173ae <_scanf_float+0x4a>
 80175f8:	e6e6      	b.n	80173c8 <_scanf_float+0x64>
 80175fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80175fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017602:	463a      	mov	r2, r7
 8017604:	4640      	mov	r0, r8
 8017606:	4798      	blx	r3
 8017608:	6923      	ldr	r3, [r4, #16]
 801760a:	3b01      	subs	r3, #1
 801760c:	6123      	str	r3, [r4, #16]
 801760e:	e6e8      	b.n	80173e2 <_scanf_float+0x7e>
 8017610:	1e6b      	subs	r3, r5, #1
 8017612:	2b06      	cmp	r3, #6
 8017614:	d824      	bhi.n	8017660 <_scanf_float+0x2fc>
 8017616:	2d02      	cmp	r5, #2
 8017618:	d836      	bhi.n	8017688 <_scanf_float+0x324>
 801761a:	9b01      	ldr	r3, [sp, #4]
 801761c:	429e      	cmp	r6, r3
 801761e:	f67f aee4 	bls.w	80173ea <_scanf_float+0x86>
 8017622:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017626:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801762a:	463a      	mov	r2, r7
 801762c:	4640      	mov	r0, r8
 801762e:	4798      	blx	r3
 8017630:	6923      	ldr	r3, [r4, #16]
 8017632:	3b01      	subs	r3, #1
 8017634:	6123      	str	r3, [r4, #16]
 8017636:	e7f0      	b.n	801761a <_scanf_float+0x2b6>
 8017638:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801763c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8017640:	463a      	mov	r2, r7
 8017642:	4640      	mov	r0, r8
 8017644:	4798      	blx	r3
 8017646:	6923      	ldr	r3, [r4, #16]
 8017648:	3b01      	subs	r3, #1
 801764a:	6123      	str	r3, [r4, #16]
 801764c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017650:	fa5f fa8a 	uxtb.w	sl, sl
 8017654:	f1ba 0f02 	cmp.w	sl, #2
 8017658:	d1ee      	bne.n	8017638 <_scanf_float+0x2d4>
 801765a:	3d03      	subs	r5, #3
 801765c:	b2ed      	uxtb	r5, r5
 801765e:	1b76      	subs	r6, r6, r5
 8017660:	6823      	ldr	r3, [r4, #0]
 8017662:	05da      	lsls	r2, r3, #23
 8017664:	d530      	bpl.n	80176c8 <_scanf_float+0x364>
 8017666:	055b      	lsls	r3, r3, #21
 8017668:	d511      	bpl.n	801768e <_scanf_float+0x32a>
 801766a:	9b01      	ldr	r3, [sp, #4]
 801766c:	429e      	cmp	r6, r3
 801766e:	f67f aebc 	bls.w	80173ea <_scanf_float+0x86>
 8017672:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801767a:	463a      	mov	r2, r7
 801767c:	4640      	mov	r0, r8
 801767e:	4798      	blx	r3
 8017680:	6923      	ldr	r3, [r4, #16]
 8017682:	3b01      	subs	r3, #1
 8017684:	6123      	str	r3, [r4, #16]
 8017686:	e7f0      	b.n	801766a <_scanf_float+0x306>
 8017688:	46aa      	mov	sl, r5
 801768a:	46b3      	mov	fp, r6
 801768c:	e7de      	b.n	801764c <_scanf_float+0x2e8>
 801768e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017692:	6923      	ldr	r3, [r4, #16]
 8017694:	2965      	cmp	r1, #101	@ 0x65
 8017696:	f103 33ff 	add.w	r3, r3, #4294967295
 801769a:	f106 35ff 	add.w	r5, r6, #4294967295
 801769e:	6123      	str	r3, [r4, #16]
 80176a0:	d00c      	beq.n	80176bc <_scanf_float+0x358>
 80176a2:	2945      	cmp	r1, #69	@ 0x45
 80176a4:	d00a      	beq.n	80176bc <_scanf_float+0x358>
 80176a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80176aa:	463a      	mov	r2, r7
 80176ac:	4640      	mov	r0, r8
 80176ae:	4798      	blx	r3
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80176b6:	3b01      	subs	r3, #1
 80176b8:	1eb5      	subs	r5, r6, #2
 80176ba:	6123      	str	r3, [r4, #16]
 80176bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80176c0:	463a      	mov	r2, r7
 80176c2:	4640      	mov	r0, r8
 80176c4:	4798      	blx	r3
 80176c6:	462e      	mov	r6, r5
 80176c8:	6822      	ldr	r2, [r4, #0]
 80176ca:	f012 0210 	ands.w	r2, r2, #16
 80176ce:	d001      	beq.n	80176d4 <_scanf_float+0x370>
 80176d0:	2000      	movs	r0, #0
 80176d2:	e68b      	b.n	80173ec <_scanf_float+0x88>
 80176d4:	7032      	strb	r2, [r6, #0]
 80176d6:	6823      	ldr	r3, [r4, #0]
 80176d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80176dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80176e0:	d11a      	bne.n	8017718 <_scanf_float+0x3b4>
 80176e2:	9b02      	ldr	r3, [sp, #8]
 80176e4:	454b      	cmp	r3, r9
 80176e6:	eba3 0209 	sub.w	r2, r3, r9
 80176ea:	d121      	bne.n	8017730 <_scanf_float+0x3cc>
 80176ec:	9901      	ldr	r1, [sp, #4]
 80176ee:	2200      	movs	r2, #0
 80176f0:	4640      	mov	r0, r8
 80176f2:	f7ff fd9f 	bl	8017234 <_strtod_r>
 80176f6:	9b03      	ldr	r3, [sp, #12]
 80176f8:	6821      	ldr	r1, [r4, #0]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f011 0f02 	tst.w	r1, #2
 8017700:	f103 0204 	add.w	r2, r3, #4
 8017704:	d01f      	beq.n	8017746 <_scanf_float+0x3e2>
 8017706:	9903      	ldr	r1, [sp, #12]
 8017708:	600a      	str	r2, [r1, #0]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	ed83 0b00 	vstr	d0, [r3]
 8017710:	68e3      	ldr	r3, [r4, #12]
 8017712:	3301      	adds	r3, #1
 8017714:	60e3      	str	r3, [r4, #12]
 8017716:	e7db      	b.n	80176d0 <_scanf_float+0x36c>
 8017718:	9b04      	ldr	r3, [sp, #16]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d0e6      	beq.n	80176ec <_scanf_float+0x388>
 801771e:	9905      	ldr	r1, [sp, #20]
 8017720:	230a      	movs	r3, #10
 8017722:	3101      	adds	r1, #1
 8017724:	4640      	mov	r0, r8
 8017726:	f7ff fe11 	bl	801734c <_strtol_r>
 801772a:	9b04      	ldr	r3, [sp, #16]
 801772c:	9e05      	ldr	r6, [sp, #20]
 801772e:	1ac2      	subs	r2, r0, r3
 8017730:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8017734:	429e      	cmp	r6, r3
 8017736:	bf28      	it	cs
 8017738:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801773c:	490d      	ldr	r1, [pc, #52]	@ (8017774 <_scanf_float+0x410>)
 801773e:	4630      	mov	r0, r6
 8017740:	f000 fa0e 	bl	8017b60 <siprintf>
 8017744:	e7d2      	b.n	80176ec <_scanf_float+0x388>
 8017746:	f011 0f04 	tst.w	r1, #4
 801774a:	9903      	ldr	r1, [sp, #12]
 801774c:	600a      	str	r2, [r1, #0]
 801774e:	d1dc      	bne.n	801770a <_scanf_float+0x3a6>
 8017750:	eeb4 0b40 	vcmp.f64	d0, d0
 8017754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017758:	681d      	ldr	r5, [r3, #0]
 801775a:	d705      	bvc.n	8017768 <_scanf_float+0x404>
 801775c:	4806      	ldr	r0, [pc, #24]	@ (8017778 <_scanf_float+0x414>)
 801775e:	f000 fca7 	bl	80180b0 <nanf>
 8017762:	ed85 0a00 	vstr	s0, [r5]
 8017766:	e7d3      	b.n	8017710 <_scanf_float+0x3ac>
 8017768:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801776c:	e7f9      	b.n	8017762 <_scanf_float+0x3fe>
 801776e:	f04f 0900 	mov.w	r9, #0
 8017772:	e630      	b.n	80173d6 <_scanf_float+0x72>
 8017774:	0801a761 	.word	0x0801a761
 8017778:	0801a81a 	.word	0x0801a81a

0801777c <__sflush_r>:
 801777c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017784:	0716      	lsls	r6, r2, #28
 8017786:	4605      	mov	r5, r0
 8017788:	460c      	mov	r4, r1
 801778a:	d454      	bmi.n	8017836 <__sflush_r+0xba>
 801778c:	684b      	ldr	r3, [r1, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	dc02      	bgt.n	8017798 <__sflush_r+0x1c>
 8017792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017794:	2b00      	cmp	r3, #0
 8017796:	dd48      	ble.n	801782a <__sflush_r+0xae>
 8017798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801779a:	2e00      	cmp	r6, #0
 801779c:	d045      	beq.n	801782a <__sflush_r+0xae>
 801779e:	2300      	movs	r3, #0
 80177a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80177a4:	682f      	ldr	r7, [r5, #0]
 80177a6:	6a21      	ldr	r1, [r4, #32]
 80177a8:	602b      	str	r3, [r5, #0]
 80177aa:	d030      	beq.n	801780e <__sflush_r+0x92>
 80177ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80177ae:	89a3      	ldrh	r3, [r4, #12]
 80177b0:	0759      	lsls	r1, r3, #29
 80177b2:	d505      	bpl.n	80177c0 <__sflush_r+0x44>
 80177b4:	6863      	ldr	r3, [r4, #4]
 80177b6:	1ad2      	subs	r2, r2, r3
 80177b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80177ba:	b10b      	cbz	r3, 80177c0 <__sflush_r+0x44>
 80177bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80177be:	1ad2      	subs	r2, r2, r3
 80177c0:	2300      	movs	r3, #0
 80177c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80177c4:	6a21      	ldr	r1, [r4, #32]
 80177c6:	4628      	mov	r0, r5
 80177c8:	47b0      	blx	r6
 80177ca:	1c43      	adds	r3, r0, #1
 80177cc:	89a3      	ldrh	r3, [r4, #12]
 80177ce:	d106      	bne.n	80177de <__sflush_r+0x62>
 80177d0:	6829      	ldr	r1, [r5, #0]
 80177d2:	291d      	cmp	r1, #29
 80177d4:	d82b      	bhi.n	801782e <__sflush_r+0xb2>
 80177d6:	4a2a      	ldr	r2, [pc, #168]	@ (8017880 <__sflush_r+0x104>)
 80177d8:	410a      	asrs	r2, r1
 80177da:	07d6      	lsls	r6, r2, #31
 80177dc:	d427      	bmi.n	801782e <__sflush_r+0xb2>
 80177de:	2200      	movs	r2, #0
 80177e0:	6062      	str	r2, [r4, #4]
 80177e2:	04d9      	lsls	r1, r3, #19
 80177e4:	6922      	ldr	r2, [r4, #16]
 80177e6:	6022      	str	r2, [r4, #0]
 80177e8:	d504      	bpl.n	80177f4 <__sflush_r+0x78>
 80177ea:	1c42      	adds	r2, r0, #1
 80177ec:	d101      	bne.n	80177f2 <__sflush_r+0x76>
 80177ee:	682b      	ldr	r3, [r5, #0]
 80177f0:	b903      	cbnz	r3, 80177f4 <__sflush_r+0x78>
 80177f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80177f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80177f6:	602f      	str	r7, [r5, #0]
 80177f8:	b1b9      	cbz	r1, 801782a <__sflush_r+0xae>
 80177fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80177fe:	4299      	cmp	r1, r3
 8017800:	d002      	beq.n	8017808 <__sflush_r+0x8c>
 8017802:	4628      	mov	r0, r5
 8017804:	f000 fc78 	bl	80180f8 <_free_r>
 8017808:	2300      	movs	r3, #0
 801780a:	6363      	str	r3, [r4, #52]	@ 0x34
 801780c:	e00d      	b.n	801782a <__sflush_r+0xae>
 801780e:	2301      	movs	r3, #1
 8017810:	4628      	mov	r0, r5
 8017812:	47b0      	blx	r6
 8017814:	4602      	mov	r2, r0
 8017816:	1c50      	adds	r0, r2, #1
 8017818:	d1c9      	bne.n	80177ae <__sflush_r+0x32>
 801781a:	682b      	ldr	r3, [r5, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d0c6      	beq.n	80177ae <__sflush_r+0x32>
 8017820:	2b1d      	cmp	r3, #29
 8017822:	d001      	beq.n	8017828 <__sflush_r+0xac>
 8017824:	2b16      	cmp	r3, #22
 8017826:	d11e      	bne.n	8017866 <__sflush_r+0xea>
 8017828:	602f      	str	r7, [r5, #0]
 801782a:	2000      	movs	r0, #0
 801782c:	e022      	b.n	8017874 <__sflush_r+0xf8>
 801782e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017832:	b21b      	sxth	r3, r3
 8017834:	e01b      	b.n	801786e <__sflush_r+0xf2>
 8017836:	690f      	ldr	r7, [r1, #16]
 8017838:	2f00      	cmp	r7, #0
 801783a:	d0f6      	beq.n	801782a <__sflush_r+0xae>
 801783c:	0793      	lsls	r3, r2, #30
 801783e:	680e      	ldr	r6, [r1, #0]
 8017840:	bf08      	it	eq
 8017842:	694b      	ldreq	r3, [r1, #20]
 8017844:	600f      	str	r7, [r1, #0]
 8017846:	bf18      	it	ne
 8017848:	2300      	movne	r3, #0
 801784a:	eba6 0807 	sub.w	r8, r6, r7
 801784e:	608b      	str	r3, [r1, #8]
 8017850:	f1b8 0f00 	cmp.w	r8, #0
 8017854:	dde9      	ble.n	801782a <__sflush_r+0xae>
 8017856:	6a21      	ldr	r1, [r4, #32]
 8017858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801785a:	4643      	mov	r3, r8
 801785c:	463a      	mov	r2, r7
 801785e:	4628      	mov	r0, r5
 8017860:	47b0      	blx	r6
 8017862:	2800      	cmp	r0, #0
 8017864:	dc08      	bgt.n	8017878 <__sflush_r+0xfc>
 8017866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801786a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801786e:	81a3      	strh	r3, [r4, #12]
 8017870:	f04f 30ff 	mov.w	r0, #4294967295
 8017874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017878:	4407      	add	r7, r0
 801787a:	eba8 0800 	sub.w	r8, r8, r0
 801787e:	e7e7      	b.n	8017850 <__sflush_r+0xd4>
 8017880:	dfbffffe 	.word	0xdfbffffe

08017884 <_fflush_r>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	690b      	ldr	r3, [r1, #16]
 8017888:	4605      	mov	r5, r0
 801788a:	460c      	mov	r4, r1
 801788c:	b913      	cbnz	r3, 8017894 <_fflush_r+0x10>
 801788e:	2500      	movs	r5, #0
 8017890:	4628      	mov	r0, r5
 8017892:	bd38      	pop	{r3, r4, r5, pc}
 8017894:	b118      	cbz	r0, 801789e <_fflush_r+0x1a>
 8017896:	6a03      	ldr	r3, [r0, #32]
 8017898:	b90b      	cbnz	r3, 801789e <_fflush_r+0x1a>
 801789a:	f000 f8bb 	bl	8017a14 <__sinit>
 801789e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d0f3      	beq.n	801788e <_fflush_r+0xa>
 80178a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80178a8:	07d0      	lsls	r0, r2, #31
 80178aa:	d404      	bmi.n	80178b6 <_fflush_r+0x32>
 80178ac:	0599      	lsls	r1, r3, #22
 80178ae:	d402      	bmi.n	80178b6 <_fflush_r+0x32>
 80178b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178b2:	f000 fbe2 	bl	801807a <__retarget_lock_acquire_recursive>
 80178b6:	4628      	mov	r0, r5
 80178b8:	4621      	mov	r1, r4
 80178ba:	f7ff ff5f 	bl	801777c <__sflush_r>
 80178be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178c0:	07da      	lsls	r2, r3, #31
 80178c2:	4605      	mov	r5, r0
 80178c4:	d4e4      	bmi.n	8017890 <_fflush_r+0xc>
 80178c6:	89a3      	ldrh	r3, [r4, #12]
 80178c8:	059b      	lsls	r3, r3, #22
 80178ca:	d4e1      	bmi.n	8017890 <_fflush_r+0xc>
 80178cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178ce:	f000 fbd5 	bl	801807c <__retarget_lock_release_recursive>
 80178d2:	e7dd      	b.n	8017890 <_fflush_r+0xc>

080178d4 <fflush>:
 80178d4:	4601      	mov	r1, r0
 80178d6:	b920      	cbnz	r0, 80178e2 <fflush+0xe>
 80178d8:	4a04      	ldr	r2, [pc, #16]	@ (80178ec <fflush+0x18>)
 80178da:	4905      	ldr	r1, [pc, #20]	@ (80178f0 <fflush+0x1c>)
 80178dc:	4805      	ldr	r0, [pc, #20]	@ (80178f4 <fflush+0x20>)
 80178de:	f000 b8b1 	b.w	8017a44 <_fwalk_sglue>
 80178e2:	4b05      	ldr	r3, [pc, #20]	@ (80178f8 <fflush+0x24>)
 80178e4:	6818      	ldr	r0, [r3, #0]
 80178e6:	f7ff bfcd 	b.w	8017884 <_fflush_r>
 80178ea:	bf00      	nop
 80178ec:	24000108 	.word	0x24000108
 80178f0:	08017885 	.word	0x08017885
 80178f4:	24000284 	.word	0x24000284
 80178f8:	24000280 	.word	0x24000280

080178fc <std>:
 80178fc:	2300      	movs	r3, #0
 80178fe:	b510      	push	{r4, lr}
 8017900:	4604      	mov	r4, r0
 8017902:	e9c0 3300 	strd	r3, r3, [r0]
 8017906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801790a:	6083      	str	r3, [r0, #8]
 801790c:	8181      	strh	r1, [r0, #12]
 801790e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017910:	81c2      	strh	r2, [r0, #14]
 8017912:	6183      	str	r3, [r0, #24]
 8017914:	4619      	mov	r1, r3
 8017916:	2208      	movs	r2, #8
 8017918:	305c      	adds	r0, #92	@ 0x5c
 801791a:	f000 fa45 	bl	8017da8 <memset>
 801791e:	4b0d      	ldr	r3, [pc, #52]	@ (8017954 <std+0x58>)
 8017920:	6263      	str	r3, [r4, #36]	@ 0x24
 8017922:	4b0d      	ldr	r3, [pc, #52]	@ (8017958 <std+0x5c>)
 8017924:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017926:	4b0d      	ldr	r3, [pc, #52]	@ (801795c <std+0x60>)
 8017928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801792a:	4b0d      	ldr	r3, [pc, #52]	@ (8017960 <std+0x64>)
 801792c:	6323      	str	r3, [r4, #48]	@ 0x30
 801792e:	4b0d      	ldr	r3, [pc, #52]	@ (8017964 <std+0x68>)
 8017930:	6224      	str	r4, [r4, #32]
 8017932:	429c      	cmp	r4, r3
 8017934:	d006      	beq.n	8017944 <std+0x48>
 8017936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801793a:	4294      	cmp	r4, r2
 801793c:	d002      	beq.n	8017944 <std+0x48>
 801793e:	33d0      	adds	r3, #208	@ 0xd0
 8017940:	429c      	cmp	r4, r3
 8017942:	d105      	bne.n	8017950 <std+0x54>
 8017944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801794c:	f000 bb94 	b.w	8018078 <__retarget_lock_init_recursive>
 8017950:	bd10      	pop	{r4, pc}
 8017952:	bf00      	nop
 8017954:	08017bf5 	.word	0x08017bf5
 8017958:	08017c1b 	.word	0x08017c1b
 801795c:	08017c53 	.word	0x08017c53
 8017960:	08017c77 	.word	0x08017c77
 8017964:	24077540 	.word	0x24077540

08017968 <stdio_exit_handler>:
 8017968:	4a02      	ldr	r2, [pc, #8]	@ (8017974 <stdio_exit_handler+0xc>)
 801796a:	4903      	ldr	r1, [pc, #12]	@ (8017978 <stdio_exit_handler+0x10>)
 801796c:	4803      	ldr	r0, [pc, #12]	@ (801797c <stdio_exit_handler+0x14>)
 801796e:	f000 b869 	b.w	8017a44 <_fwalk_sglue>
 8017972:	bf00      	nop
 8017974:	24000108 	.word	0x24000108
 8017978:	08017885 	.word	0x08017885
 801797c:	24000284 	.word	0x24000284

08017980 <cleanup_stdio>:
 8017980:	6841      	ldr	r1, [r0, #4]
 8017982:	4b0c      	ldr	r3, [pc, #48]	@ (80179b4 <cleanup_stdio+0x34>)
 8017984:	4299      	cmp	r1, r3
 8017986:	b510      	push	{r4, lr}
 8017988:	4604      	mov	r4, r0
 801798a:	d001      	beq.n	8017990 <cleanup_stdio+0x10>
 801798c:	f7ff ff7a 	bl	8017884 <_fflush_r>
 8017990:	68a1      	ldr	r1, [r4, #8]
 8017992:	4b09      	ldr	r3, [pc, #36]	@ (80179b8 <cleanup_stdio+0x38>)
 8017994:	4299      	cmp	r1, r3
 8017996:	d002      	beq.n	801799e <cleanup_stdio+0x1e>
 8017998:	4620      	mov	r0, r4
 801799a:	f7ff ff73 	bl	8017884 <_fflush_r>
 801799e:	68e1      	ldr	r1, [r4, #12]
 80179a0:	4b06      	ldr	r3, [pc, #24]	@ (80179bc <cleanup_stdio+0x3c>)
 80179a2:	4299      	cmp	r1, r3
 80179a4:	d004      	beq.n	80179b0 <cleanup_stdio+0x30>
 80179a6:	4620      	mov	r0, r4
 80179a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179ac:	f7ff bf6a 	b.w	8017884 <_fflush_r>
 80179b0:	bd10      	pop	{r4, pc}
 80179b2:	bf00      	nop
 80179b4:	24077540 	.word	0x24077540
 80179b8:	240775a8 	.word	0x240775a8
 80179bc:	24077610 	.word	0x24077610

080179c0 <global_stdio_init.part.0>:
 80179c0:	b510      	push	{r4, lr}
 80179c2:	4b0b      	ldr	r3, [pc, #44]	@ (80179f0 <global_stdio_init.part.0+0x30>)
 80179c4:	4c0b      	ldr	r4, [pc, #44]	@ (80179f4 <global_stdio_init.part.0+0x34>)
 80179c6:	4a0c      	ldr	r2, [pc, #48]	@ (80179f8 <global_stdio_init.part.0+0x38>)
 80179c8:	601a      	str	r2, [r3, #0]
 80179ca:	4620      	mov	r0, r4
 80179cc:	2200      	movs	r2, #0
 80179ce:	2104      	movs	r1, #4
 80179d0:	f7ff ff94 	bl	80178fc <std>
 80179d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80179d8:	2201      	movs	r2, #1
 80179da:	2109      	movs	r1, #9
 80179dc:	f7ff ff8e 	bl	80178fc <std>
 80179e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80179e4:	2202      	movs	r2, #2
 80179e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179ea:	2112      	movs	r1, #18
 80179ec:	f7ff bf86 	b.w	80178fc <std>
 80179f0:	24077678 	.word	0x24077678
 80179f4:	24077540 	.word	0x24077540
 80179f8:	08017969 	.word	0x08017969

080179fc <__sfp_lock_acquire>:
 80179fc:	4801      	ldr	r0, [pc, #4]	@ (8017a04 <__sfp_lock_acquire+0x8>)
 80179fe:	f000 bb3c 	b.w	801807a <__retarget_lock_acquire_recursive>
 8017a02:	bf00      	nop
 8017a04:	24077681 	.word	0x24077681

08017a08 <__sfp_lock_release>:
 8017a08:	4801      	ldr	r0, [pc, #4]	@ (8017a10 <__sfp_lock_release+0x8>)
 8017a0a:	f000 bb37 	b.w	801807c <__retarget_lock_release_recursive>
 8017a0e:	bf00      	nop
 8017a10:	24077681 	.word	0x24077681

08017a14 <__sinit>:
 8017a14:	b510      	push	{r4, lr}
 8017a16:	4604      	mov	r4, r0
 8017a18:	f7ff fff0 	bl	80179fc <__sfp_lock_acquire>
 8017a1c:	6a23      	ldr	r3, [r4, #32]
 8017a1e:	b11b      	cbz	r3, 8017a28 <__sinit+0x14>
 8017a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a24:	f7ff bff0 	b.w	8017a08 <__sfp_lock_release>
 8017a28:	4b04      	ldr	r3, [pc, #16]	@ (8017a3c <__sinit+0x28>)
 8017a2a:	6223      	str	r3, [r4, #32]
 8017a2c:	4b04      	ldr	r3, [pc, #16]	@ (8017a40 <__sinit+0x2c>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d1f5      	bne.n	8017a20 <__sinit+0xc>
 8017a34:	f7ff ffc4 	bl	80179c0 <global_stdio_init.part.0>
 8017a38:	e7f2      	b.n	8017a20 <__sinit+0xc>
 8017a3a:	bf00      	nop
 8017a3c:	08017981 	.word	0x08017981
 8017a40:	24077678 	.word	0x24077678

08017a44 <_fwalk_sglue>:
 8017a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a48:	4607      	mov	r7, r0
 8017a4a:	4688      	mov	r8, r1
 8017a4c:	4614      	mov	r4, r2
 8017a4e:	2600      	movs	r6, #0
 8017a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a54:	f1b9 0901 	subs.w	r9, r9, #1
 8017a58:	d505      	bpl.n	8017a66 <_fwalk_sglue+0x22>
 8017a5a:	6824      	ldr	r4, [r4, #0]
 8017a5c:	2c00      	cmp	r4, #0
 8017a5e:	d1f7      	bne.n	8017a50 <_fwalk_sglue+0xc>
 8017a60:	4630      	mov	r0, r6
 8017a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a66:	89ab      	ldrh	r3, [r5, #12]
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	d907      	bls.n	8017a7c <_fwalk_sglue+0x38>
 8017a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017a70:	3301      	adds	r3, #1
 8017a72:	d003      	beq.n	8017a7c <_fwalk_sglue+0x38>
 8017a74:	4629      	mov	r1, r5
 8017a76:	4638      	mov	r0, r7
 8017a78:	47c0      	blx	r8
 8017a7a:	4306      	orrs	r6, r0
 8017a7c:	3568      	adds	r5, #104	@ 0x68
 8017a7e:	e7e9      	b.n	8017a54 <_fwalk_sglue+0x10>

08017a80 <iprintf>:
 8017a80:	b40f      	push	{r0, r1, r2, r3}
 8017a82:	b507      	push	{r0, r1, r2, lr}
 8017a84:	4906      	ldr	r1, [pc, #24]	@ (8017aa0 <iprintf+0x20>)
 8017a86:	ab04      	add	r3, sp, #16
 8017a88:	6808      	ldr	r0, [r1, #0]
 8017a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a8e:	6881      	ldr	r1, [r0, #8]
 8017a90:	9301      	str	r3, [sp, #4]
 8017a92:	f001 fed1 	bl	8019838 <_vfiprintf_r>
 8017a96:	b003      	add	sp, #12
 8017a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a9c:	b004      	add	sp, #16
 8017a9e:	4770      	bx	lr
 8017aa0:	24000280 	.word	0x24000280

08017aa4 <_puts_r>:
 8017aa4:	6a03      	ldr	r3, [r0, #32]
 8017aa6:	b570      	push	{r4, r5, r6, lr}
 8017aa8:	6884      	ldr	r4, [r0, #8]
 8017aaa:	4605      	mov	r5, r0
 8017aac:	460e      	mov	r6, r1
 8017aae:	b90b      	cbnz	r3, 8017ab4 <_puts_r+0x10>
 8017ab0:	f7ff ffb0 	bl	8017a14 <__sinit>
 8017ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ab6:	07db      	lsls	r3, r3, #31
 8017ab8:	d405      	bmi.n	8017ac6 <_puts_r+0x22>
 8017aba:	89a3      	ldrh	r3, [r4, #12]
 8017abc:	0598      	lsls	r0, r3, #22
 8017abe:	d402      	bmi.n	8017ac6 <_puts_r+0x22>
 8017ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ac2:	f000 fada 	bl	801807a <__retarget_lock_acquire_recursive>
 8017ac6:	89a3      	ldrh	r3, [r4, #12]
 8017ac8:	0719      	lsls	r1, r3, #28
 8017aca:	d502      	bpl.n	8017ad2 <_puts_r+0x2e>
 8017acc:	6923      	ldr	r3, [r4, #16]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d135      	bne.n	8017b3e <_puts_r+0x9a>
 8017ad2:	4621      	mov	r1, r4
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	f000 f911 	bl	8017cfc <__swsetup_r>
 8017ada:	b380      	cbz	r0, 8017b3e <_puts_r+0x9a>
 8017adc:	f04f 35ff 	mov.w	r5, #4294967295
 8017ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ae2:	07da      	lsls	r2, r3, #31
 8017ae4:	d405      	bmi.n	8017af2 <_puts_r+0x4e>
 8017ae6:	89a3      	ldrh	r3, [r4, #12]
 8017ae8:	059b      	lsls	r3, r3, #22
 8017aea:	d402      	bmi.n	8017af2 <_puts_r+0x4e>
 8017aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aee:	f000 fac5 	bl	801807c <__retarget_lock_release_recursive>
 8017af2:	4628      	mov	r0, r5
 8017af4:	bd70      	pop	{r4, r5, r6, pc}
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	da04      	bge.n	8017b04 <_puts_r+0x60>
 8017afa:	69a2      	ldr	r2, [r4, #24]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	dc17      	bgt.n	8017b30 <_puts_r+0x8c>
 8017b00:	290a      	cmp	r1, #10
 8017b02:	d015      	beq.n	8017b30 <_puts_r+0x8c>
 8017b04:	6823      	ldr	r3, [r4, #0]
 8017b06:	1c5a      	adds	r2, r3, #1
 8017b08:	6022      	str	r2, [r4, #0]
 8017b0a:	7019      	strb	r1, [r3, #0]
 8017b0c:	68a3      	ldr	r3, [r4, #8]
 8017b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017b12:	3b01      	subs	r3, #1
 8017b14:	60a3      	str	r3, [r4, #8]
 8017b16:	2900      	cmp	r1, #0
 8017b18:	d1ed      	bne.n	8017af6 <_puts_r+0x52>
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	da11      	bge.n	8017b42 <_puts_r+0x9e>
 8017b1e:	4622      	mov	r2, r4
 8017b20:	210a      	movs	r1, #10
 8017b22:	4628      	mov	r0, r5
 8017b24:	f000 f8ab 	bl	8017c7e <__swbuf_r>
 8017b28:	3001      	adds	r0, #1
 8017b2a:	d0d7      	beq.n	8017adc <_puts_r+0x38>
 8017b2c:	250a      	movs	r5, #10
 8017b2e:	e7d7      	b.n	8017ae0 <_puts_r+0x3c>
 8017b30:	4622      	mov	r2, r4
 8017b32:	4628      	mov	r0, r5
 8017b34:	f000 f8a3 	bl	8017c7e <__swbuf_r>
 8017b38:	3001      	adds	r0, #1
 8017b3a:	d1e7      	bne.n	8017b0c <_puts_r+0x68>
 8017b3c:	e7ce      	b.n	8017adc <_puts_r+0x38>
 8017b3e:	3e01      	subs	r6, #1
 8017b40:	e7e4      	b.n	8017b0c <_puts_r+0x68>
 8017b42:	6823      	ldr	r3, [r4, #0]
 8017b44:	1c5a      	adds	r2, r3, #1
 8017b46:	6022      	str	r2, [r4, #0]
 8017b48:	220a      	movs	r2, #10
 8017b4a:	701a      	strb	r2, [r3, #0]
 8017b4c:	e7ee      	b.n	8017b2c <_puts_r+0x88>
	...

08017b50 <puts>:
 8017b50:	4b02      	ldr	r3, [pc, #8]	@ (8017b5c <puts+0xc>)
 8017b52:	4601      	mov	r1, r0
 8017b54:	6818      	ldr	r0, [r3, #0]
 8017b56:	f7ff bfa5 	b.w	8017aa4 <_puts_r>
 8017b5a:	bf00      	nop
 8017b5c:	24000280 	.word	0x24000280

08017b60 <siprintf>:
 8017b60:	b40e      	push	{r1, r2, r3}
 8017b62:	b500      	push	{lr}
 8017b64:	b09c      	sub	sp, #112	@ 0x70
 8017b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8017b68:	9002      	str	r0, [sp, #8]
 8017b6a:	9006      	str	r0, [sp, #24]
 8017b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b70:	4809      	ldr	r0, [pc, #36]	@ (8017b98 <siprintf+0x38>)
 8017b72:	9107      	str	r1, [sp, #28]
 8017b74:	9104      	str	r1, [sp, #16]
 8017b76:	4909      	ldr	r1, [pc, #36]	@ (8017b9c <siprintf+0x3c>)
 8017b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b7c:	9105      	str	r1, [sp, #20]
 8017b7e:	6800      	ldr	r0, [r0, #0]
 8017b80:	9301      	str	r3, [sp, #4]
 8017b82:	a902      	add	r1, sp, #8
 8017b84:	f001 fb66 	bl	8019254 <_svfiprintf_r>
 8017b88:	9b02      	ldr	r3, [sp, #8]
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	701a      	strb	r2, [r3, #0]
 8017b8e:	b01c      	add	sp, #112	@ 0x70
 8017b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b94:	b003      	add	sp, #12
 8017b96:	4770      	bx	lr
 8017b98:	24000280 	.word	0x24000280
 8017b9c:	ffff0208 	.word	0xffff0208

08017ba0 <siscanf>:
 8017ba0:	b40e      	push	{r1, r2, r3}
 8017ba2:	b530      	push	{r4, r5, lr}
 8017ba4:	b09c      	sub	sp, #112	@ 0x70
 8017ba6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017ba8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017bac:	f854 5b04 	ldr.w	r5, [r4], #4
 8017bb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017bb4:	9002      	str	r0, [sp, #8]
 8017bb6:	9006      	str	r0, [sp, #24]
 8017bb8:	f7e8 fb92 	bl	80002e0 <strlen>
 8017bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8017bec <siscanf+0x4c>)
 8017bbe:	9003      	str	r0, [sp, #12]
 8017bc0:	9007      	str	r0, [sp, #28]
 8017bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017bc4:	480a      	ldr	r0, [pc, #40]	@ (8017bf0 <siscanf+0x50>)
 8017bc6:	9401      	str	r4, [sp, #4]
 8017bc8:	2300      	movs	r3, #0
 8017bca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017bcc:	9314      	str	r3, [sp, #80]	@ 0x50
 8017bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bd6:	462a      	mov	r2, r5
 8017bd8:	4623      	mov	r3, r4
 8017bda:	a902      	add	r1, sp, #8
 8017bdc:	6800      	ldr	r0, [r0, #0]
 8017bde:	f001 fc8d 	bl	80194fc <__ssvfiscanf_r>
 8017be2:	b01c      	add	sp, #112	@ 0x70
 8017be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017be8:	b003      	add	sp, #12
 8017bea:	4770      	bx	lr
 8017bec:	08017c17 	.word	0x08017c17
 8017bf0:	24000280 	.word	0x24000280

08017bf4 <__sread>:
 8017bf4:	b510      	push	{r4, lr}
 8017bf6:	460c      	mov	r4, r1
 8017bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bfc:	f000 f9de 	bl	8017fbc <_read_r>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	bfab      	itete	ge
 8017c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c06:	89a3      	ldrhlt	r3, [r4, #12]
 8017c08:	181b      	addge	r3, r3, r0
 8017c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017c0e:	bfac      	ite	ge
 8017c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017c12:	81a3      	strhlt	r3, [r4, #12]
 8017c14:	bd10      	pop	{r4, pc}

08017c16 <__seofread>:
 8017c16:	2000      	movs	r0, #0
 8017c18:	4770      	bx	lr

08017c1a <__swrite>:
 8017c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c1e:	461f      	mov	r7, r3
 8017c20:	898b      	ldrh	r3, [r1, #12]
 8017c22:	05db      	lsls	r3, r3, #23
 8017c24:	4605      	mov	r5, r0
 8017c26:	460c      	mov	r4, r1
 8017c28:	4616      	mov	r6, r2
 8017c2a:	d505      	bpl.n	8017c38 <__swrite+0x1e>
 8017c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c30:	2302      	movs	r3, #2
 8017c32:	2200      	movs	r2, #0
 8017c34:	f000 f9b0 	bl	8017f98 <_lseek_r>
 8017c38:	89a3      	ldrh	r3, [r4, #12]
 8017c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c42:	81a3      	strh	r3, [r4, #12]
 8017c44:	4632      	mov	r2, r6
 8017c46:	463b      	mov	r3, r7
 8017c48:	4628      	mov	r0, r5
 8017c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4e:	f000 b9d7 	b.w	8018000 <_write_r>

08017c52 <__sseek>:
 8017c52:	b510      	push	{r4, lr}
 8017c54:	460c      	mov	r4, r1
 8017c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c5a:	f000 f99d 	bl	8017f98 <_lseek_r>
 8017c5e:	1c43      	adds	r3, r0, #1
 8017c60:	89a3      	ldrh	r3, [r4, #12]
 8017c62:	bf15      	itete	ne
 8017c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017c6e:	81a3      	strheq	r3, [r4, #12]
 8017c70:	bf18      	it	ne
 8017c72:	81a3      	strhne	r3, [r4, #12]
 8017c74:	bd10      	pop	{r4, pc}

08017c76 <__sclose>:
 8017c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c7a:	f000 b927 	b.w	8017ecc <_close_r>

08017c7e <__swbuf_r>:
 8017c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c80:	460e      	mov	r6, r1
 8017c82:	4614      	mov	r4, r2
 8017c84:	4605      	mov	r5, r0
 8017c86:	b118      	cbz	r0, 8017c90 <__swbuf_r+0x12>
 8017c88:	6a03      	ldr	r3, [r0, #32]
 8017c8a:	b90b      	cbnz	r3, 8017c90 <__swbuf_r+0x12>
 8017c8c:	f7ff fec2 	bl	8017a14 <__sinit>
 8017c90:	69a3      	ldr	r3, [r4, #24]
 8017c92:	60a3      	str	r3, [r4, #8]
 8017c94:	89a3      	ldrh	r3, [r4, #12]
 8017c96:	071a      	lsls	r2, r3, #28
 8017c98:	d501      	bpl.n	8017c9e <__swbuf_r+0x20>
 8017c9a:	6923      	ldr	r3, [r4, #16]
 8017c9c:	b943      	cbnz	r3, 8017cb0 <__swbuf_r+0x32>
 8017c9e:	4621      	mov	r1, r4
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	f000 f82b 	bl	8017cfc <__swsetup_r>
 8017ca6:	b118      	cbz	r0, 8017cb0 <__swbuf_r+0x32>
 8017ca8:	f04f 37ff 	mov.w	r7, #4294967295
 8017cac:	4638      	mov	r0, r7
 8017cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb0:	6823      	ldr	r3, [r4, #0]
 8017cb2:	6922      	ldr	r2, [r4, #16]
 8017cb4:	1a98      	subs	r0, r3, r2
 8017cb6:	6963      	ldr	r3, [r4, #20]
 8017cb8:	b2f6      	uxtb	r6, r6
 8017cba:	4283      	cmp	r3, r0
 8017cbc:	4637      	mov	r7, r6
 8017cbe:	dc05      	bgt.n	8017ccc <__swbuf_r+0x4e>
 8017cc0:	4621      	mov	r1, r4
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	f7ff fdde 	bl	8017884 <_fflush_r>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	d1ed      	bne.n	8017ca8 <__swbuf_r+0x2a>
 8017ccc:	68a3      	ldr	r3, [r4, #8]
 8017cce:	3b01      	subs	r3, #1
 8017cd0:	60a3      	str	r3, [r4, #8]
 8017cd2:	6823      	ldr	r3, [r4, #0]
 8017cd4:	1c5a      	adds	r2, r3, #1
 8017cd6:	6022      	str	r2, [r4, #0]
 8017cd8:	701e      	strb	r6, [r3, #0]
 8017cda:	6962      	ldr	r2, [r4, #20]
 8017cdc:	1c43      	adds	r3, r0, #1
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	d004      	beq.n	8017cec <__swbuf_r+0x6e>
 8017ce2:	89a3      	ldrh	r3, [r4, #12]
 8017ce4:	07db      	lsls	r3, r3, #31
 8017ce6:	d5e1      	bpl.n	8017cac <__swbuf_r+0x2e>
 8017ce8:	2e0a      	cmp	r6, #10
 8017cea:	d1df      	bne.n	8017cac <__swbuf_r+0x2e>
 8017cec:	4621      	mov	r1, r4
 8017cee:	4628      	mov	r0, r5
 8017cf0:	f7ff fdc8 	bl	8017884 <_fflush_r>
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d0d9      	beq.n	8017cac <__swbuf_r+0x2e>
 8017cf8:	e7d6      	b.n	8017ca8 <__swbuf_r+0x2a>
	...

08017cfc <__swsetup_r>:
 8017cfc:	b538      	push	{r3, r4, r5, lr}
 8017cfe:	4b29      	ldr	r3, [pc, #164]	@ (8017da4 <__swsetup_r+0xa8>)
 8017d00:	4605      	mov	r5, r0
 8017d02:	6818      	ldr	r0, [r3, #0]
 8017d04:	460c      	mov	r4, r1
 8017d06:	b118      	cbz	r0, 8017d10 <__swsetup_r+0x14>
 8017d08:	6a03      	ldr	r3, [r0, #32]
 8017d0a:	b90b      	cbnz	r3, 8017d10 <__swsetup_r+0x14>
 8017d0c:	f7ff fe82 	bl	8017a14 <__sinit>
 8017d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d14:	0719      	lsls	r1, r3, #28
 8017d16:	d422      	bmi.n	8017d5e <__swsetup_r+0x62>
 8017d18:	06da      	lsls	r2, r3, #27
 8017d1a:	d407      	bmi.n	8017d2c <__swsetup_r+0x30>
 8017d1c:	2209      	movs	r2, #9
 8017d1e:	602a      	str	r2, [r5, #0]
 8017d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d24:	81a3      	strh	r3, [r4, #12]
 8017d26:	f04f 30ff 	mov.w	r0, #4294967295
 8017d2a:	e033      	b.n	8017d94 <__swsetup_r+0x98>
 8017d2c:	0758      	lsls	r0, r3, #29
 8017d2e:	d512      	bpl.n	8017d56 <__swsetup_r+0x5a>
 8017d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d32:	b141      	cbz	r1, 8017d46 <__swsetup_r+0x4a>
 8017d34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d38:	4299      	cmp	r1, r3
 8017d3a:	d002      	beq.n	8017d42 <__swsetup_r+0x46>
 8017d3c:	4628      	mov	r0, r5
 8017d3e:	f000 f9db 	bl	80180f8 <_free_r>
 8017d42:	2300      	movs	r3, #0
 8017d44:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d46:	89a3      	ldrh	r3, [r4, #12]
 8017d48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d4c:	81a3      	strh	r3, [r4, #12]
 8017d4e:	2300      	movs	r3, #0
 8017d50:	6063      	str	r3, [r4, #4]
 8017d52:	6923      	ldr	r3, [r4, #16]
 8017d54:	6023      	str	r3, [r4, #0]
 8017d56:	89a3      	ldrh	r3, [r4, #12]
 8017d58:	f043 0308 	orr.w	r3, r3, #8
 8017d5c:	81a3      	strh	r3, [r4, #12]
 8017d5e:	6923      	ldr	r3, [r4, #16]
 8017d60:	b94b      	cbnz	r3, 8017d76 <__swsetup_r+0x7a>
 8017d62:	89a3      	ldrh	r3, [r4, #12]
 8017d64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d6c:	d003      	beq.n	8017d76 <__swsetup_r+0x7a>
 8017d6e:	4621      	mov	r1, r4
 8017d70:	4628      	mov	r0, r5
 8017d72:	f002 f98d 	bl	801a090 <__smakebuf_r>
 8017d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d7a:	f013 0201 	ands.w	r2, r3, #1
 8017d7e:	d00a      	beq.n	8017d96 <__swsetup_r+0x9a>
 8017d80:	2200      	movs	r2, #0
 8017d82:	60a2      	str	r2, [r4, #8]
 8017d84:	6962      	ldr	r2, [r4, #20]
 8017d86:	4252      	negs	r2, r2
 8017d88:	61a2      	str	r2, [r4, #24]
 8017d8a:	6922      	ldr	r2, [r4, #16]
 8017d8c:	b942      	cbnz	r2, 8017da0 <__swsetup_r+0xa4>
 8017d8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017d92:	d1c5      	bne.n	8017d20 <__swsetup_r+0x24>
 8017d94:	bd38      	pop	{r3, r4, r5, pc}
 8017d96:	0799      	lsls	r1, r3, #30
 8017d98:	bf58      	it	pl
 8017d9a:	6962      	ldrpl	r2, [r4, #20]
 8017d9c:	60a2      	str	r2, [r4, #8]
 8017d9e:	e7f4      	b.n	8017d8a <__swsetup_r+0x8e>
 8017da0:	2000      	movs	r0, #0
 8017da2:	e7f7      	b.n	8017d94 <__swsetup_r+0x98>
 8017da4:	24000280 	.word	0x24000280

08017da8 <memset>:
 8017da8:	4402      	add	r2, r0
 8017daa:	4603      	mov	r3, r0
 8017dac:	4293      	cmp	r3, r2
 8017dae:	d100      	bne.n	8017db2 <memset+0xa>
 8017db0:	4770      	bx	lr
 8017db2:	f803 1b01 	strb.w	r1, [r3], #1
 8017db6:	e7f9      	b.n	8017dac <memset+0x4>

08017db8 <strdup>:
 8017db8:	4b02      	ldr	r3, [pc, #8]	@ (8017dc4 <strdup+0xc>)
 8017dba:	4601      	mov	r1, r0
 8017dbc:	6818      	ldr	r0, [r3, #0]
 8017dbe:	f000 b803 	b.w	8017dc8 <_strdup_r>
 8017dc2:	bf00      	nop
 8017dc4:	24000280 	.word	0x24000280

08017dc8 <_strdup_r>:
 8017dc8:	b570      	push	{r4, r5, r6, lr}
 8017dca:	4604      	mov	r4, r0
 8017dcc:	4608      	mov	r0, r1
 8017dce:	460d      	mov	r5, r1
 8017dd0:	f7e8 fa86 	bl	80002e0 <strlen>
 8017dd4:	1c46      	adds	r6, r0, #1
 8017dd6:	4631      	mov	r1, r6
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f7fe fbef 	bl	80165bc <_malloc_r>
 8017dde:	4604      	mov	r4, r0
 8017de0:	b118      	cbz	r0, 8017dea <_strdup_r+0x22>
 8017de2:	4632      	mov	r2, r6
 8017de4:	4629      	mov	r1, r5
 8017de6:	f000 f94a 	bl	801807e <memcpy>
 8017dea:	4620      	mov	r0, r4
 8017dec:	bd70      	pop	{r4, r5, r6, pc}

08017dee <strncmp>:
 8017dee:	b510      	push	{r4, lr}
 8017df0:	b16a      	cbz	r2, 8017e0e <strncmp+0x20>
 8017df2:	3901      	subs	r1, #1
 8017df4:	1884      	adds	r4, r0, r2
 8017df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dfa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d103      	bne.n	8017e0a <strncmp+0x1c>
 8017e02:	42a0      	cmp	r0, r4
 8017e04:	d001      	beq.n	8017e0a <strncmp+0x1c>
 8017e06:	2a00      	cmp	r2, #0
 8017e08:	d1f5      	bne.n	8017df6 <strncmp+0x8>
 8017e0a:	1ad0      	subs	r0, r2, r3
 8017e0c:	bd10      	pop	{r4, pc}
 8017e0e:	4610      	mov	r0, r2
 8017e10:	e7fc      	b.n	8017e0c <strncmp+0x1e>
	...

08017e14 <strtok>:
 8017e14:	4b16      	ldr	r3, [pc, #88]	@ (8017e70 <strtok+0x5c>)
 8017e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e1a:	681f      	ldr	r7, [r3, #0]
 8017e1c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8017e1e:	4605      	mov	r5, r0
 8017e20:	460e      	mov	r6, r1
 8017e22:	b9ec      	cbnz	r4, 8017e60 <strtok+0x4c>
 8017e24:	2050      	movs	r0, #80	@ 0x50
 8017e26:	f7fe fb97 	bl	8016558 <malloc>
 8017e2a:	4602      	mov	r2, r0
 8017e2c:	6478      	str	r0, [r7, #68]	@ 0x44
 8017e2e:	b920      	cbnz	r0, 8017e3a <strtok+0x26>
 8017e30:	4b10      	ldr	r3, [pc, #64]	@ (8017e74 <strtok+0x60>)
 8017e32:	4811      	ldr	r0, [pc, #68]	@ (8017e78 <strtok+0x64>)
 8017e34:	215b      	movs	r1, #91	@ 0x5b
 8017e36:	f000 f941 	bl	80180bc <__assert_func>
 8017e3a:	e9c0 4400 	strd	r4, r4, [r0]
 8017e3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017e42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017e46:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8017e4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8017e4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8017e52:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8017e56:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8017e5a:	6184      	str	r4, [r0, #24]
 8017e5c:	7704      	strb	r4, [r0, #28]
 8017e5e:	6244      	str	r4, [r0, #36]	@ 0x24
 8017e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017e62:	4631      	mov	r1, r6
 8017e64:	4628      	mov	r0, r5
 8017e66:	2301      	movs	r3, #1
 8017e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6c:	f000 b806 	b.w	8017e7c <__strtok_r>
 8017e70:	24000280 	.word	0x24000280
 8017e74:	0801a766 	.word	0x0801a766
 8017e78:	0801a77d 	.word	0x0801a77d

08017e7c <__strtok_r>:
 8017e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e7e:	4604      	mov	r4, r0
 8017e80:	b908      	cbnz	r0, 8017e86 <__strtok_r+0xa>
 8017e82:	6814      	ldr	r4, [r2, #0]
 8017e84:	b144      	cbz	r4, 8017e98 <__strtok_r+0x1c>
 8017e86:	4620      	mov	r0, r4
 8017e88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017e8c:	460f      	mov	r7, r1
 8017e8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017e92:	b91e      	cbnz	r6, 8017e9c <__strtok_r+0x20>
 8017e94:	b965      	cbnz	r5, 8017eb0 <__strtok_r+0x34>
 8017e96:	6015      	str	r5, [r2, #0]
 8017e98:	2000      	movs	r0, #0
 8017e9a:	e005      	b.n	8017ea8 <__strtok_r+0x2c>
 8017e9c:	42b5      	cmp	r5, r6
 8017e9e:	d1f6      	bne.n	8017e8e <__strtok_r+0x12>
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d1f0      	bne.n	8017e86 <__strtok_r+0xa>
 8017ea4:	6014      	str	r4, [r2, #0]
 8017ea6:	7003      	strb	r3, [r0, #0]
 8017ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017eaa:	461c      	mov	r4, r3
 8017eac:	e00c      	b.n	8017ec8 <__strtok_r+0x4c>
 8017eae:	b915      	cbnz	r5, 8017eb6 <__strtok_r+0x3a>
 8017eb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017eb4:	460e      	mov	r6, r1
 8017eb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017eba:	42ab      	cmp	r3, r5
 8017ebc:	d1f7      	bne.n	8017eae <__strtok_r+0x32>
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d0f3      	beq.n	8017eaa <__strtok_r+0x2e>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017ec8:	6014      	str	r4, [r2, #0]
 8017eca:	e7ed      	b.n	8017ea8 <__strtok_r+0x2c>

08017ecc <_close_r>:
 8017ecc:	b538      	push	{r3, r4, r5, lr}
 8017ece:	4d06      	ldr	r5, [pc, #24]	@ (8017ee8 <_close_r+0x1c>)
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	4608      	mov	r0, r1
 8017ed6:	602b      	str	r3, [r5, #0]
 8017ed8:	f7ea faf6 	bl	80024c8 <_close>
 8017edc:	1c43      	adds	r3, r0, #1
 8017ede:	d102      	bne.n	8017ee6 <_close_r+0x1a>
 8017ee0:	682b      	ldr	r3, [r5, #0]
 8017ee2:	b103      	cbz	r3, 8017ee6 <_close_r+0x1a>
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	bd38      	pop	{r3, r4, r5, pc}
 8017ee8:	2407767c 	.word	0x2407767c

08017eec <_reclaim_reent>:
 8017eec:	4b29      	ldr	r3, [pc, #164]	@ (8017f94 <_reclaim_reent+0xa8>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	4283      	cmp	r3, r0
 8017ef2:	b570      	push	{r4, r5, r6, lr}
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	d04b      	beq.n	8017f90 <_reclaim_reent+0xa4>
 8017ef8:	69c3      	ldr	r3, [r0, #28]
 8017efa:	b1ab      	cbz	r3, 8017f28 <_reclaim_reent+0x3c>
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	b16b      	cbz	r3, 8017f1c <_reclaim_reent+0x30>
 8017f00:	2500      	movs	r5, #0
 8017f02:	69e3      	ldr	r3, [r4, #28]
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	5959      	ldr	r1, [r3, r5]
 8017f08:	2900      	cmp	r1, #0
 8017f0a:	d13b      	bne.n	8017f84 <_reclaim_reent+0x98>
 8017f0c:	3504      	adds	r5, #4
 8017f0e:	2d80      	cmp	r5, #128	@ 0x80
 8017f10:	d1f7      	bne.n	8017f02 <_reclaim_reent+0x16>
 8017f12:	69e3      	ldr	r3, [r4, #28]
 8017f14:	4620      	mov	r0, r4
 8017f16:	68d9      	ldr	r1, [r3, #12]
 8017f18:	f000 f8ee 	bl	80180f8 <_free_r>
 8017f1c:	69e3      	ldr	r3, [r4, #28]
 8017f1e:	6819      	ldr	r1, [r3, #0]
 8017f20:	b111      	cbz	r1, 8017f28 <_reclaim_reent+0x3c>
 8017f22:	4620      	mov	r0, r4
 8017f24:	f000 f8e8 	bl	80180f8 <_free_r>
 8017f28:	6961      	ldr	r1, [r4, #20]
 8017f2a:	b111      	cbz	r1, 8017f32 <_reclaim_reent+0x46>
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f000 f8e3 	bl	80180f8 <_free_r>
 8017f32:	69e1      	ldr	r1, [r4, #28]
 8017f34:	b111      	cbz	r1, 8017f3c <_reclaim_reent+0x50>
 8017f36:	4620      	mov	r0, r4
 8017f38:	f000 f8de 	bl	80180f8 <_free_r>
 8017f3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017f3e:	b111      	cbz	r1, 8017f46 <_reclaim_reent+0x5a>
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 f8d9 	bl	80180f8 <_free_r>
 8017f46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f48:	b111      	cbz	r1, 8017f50 <_reclaim_reent+0x64>
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f000 f8d4 	bl	80180f8 <_free_r>
 8017f50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017f52:	b111      	cbz	r1, 8017f5a <_reclaim_reent+0x6e>
 8017f54:	4620      	mov	r0, r4
 8017f56:	f000 f8cf 	bl	80180f8 <_free_r>
 8017f5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017f5c:	b111      	cbz	r1, 8017f64 <_reclaim_reent+0x78>
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f000 f8ca 	bl	80180f8 <_free_r>
 8017f64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017f66:	b111      	cbz	r1, 8017f6e <_reclaim_reent+0x82>
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 f8c5 	bl	80180f8 <_free_r>
 8017f6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017f70:	b111      	cbz	r1, 8017f78 <_reclaim_reent+0x8c>
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 f8c0 	bl	80180f8 <_free_r>
 8017f78:	6a23      	ldr	r3, [r4, #32]
 8017f7a:	b14b      	cbz	r3, 8017f90 <_reclaim_reent+0xa4>
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f82:	4718      	bx	r3
 8017f84:	680e      	ldr	r6, [r1, #0]
 8017f86:	4620      	mov	r0, r4
 8017f88:	f000 f8b6 	bl	80180f8 <_free_r>
 8017f8c:	4631      	mov	r1, r6
 8017f8e:	e7bb      	b.n	8017f08 <_reclaim_reent+0x1c>
 8017f90:	bd70      	pop	{r4, r5, r6, pc}
 8017f92:	bf00      	nop
 8017f94:	24000280 	.word	0x24000280

08017f98 <_lseek_r>:
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4d07      	ldr	r5, [pc, #28]	@ (8017fb8 <_lseek_r+0x20>)
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	4608      	mov	r0, r1
 8017fa0:	4611      	mov	r1, r2
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	602a      	str	r2, [r5, #0]
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	f7ea fab5 	bl	8002516 <_lseek>
 8017fac:	1c43      	adds	r3, r0, #1
 8017fae:	d102      	bne.n	8017fb6 <_lseek_r+0x1e>
 8017fb0:	682b      	ldr	r3, [r5, #0]
 8017fb2:	b103      	cbz	r3, 8017fb6 <_lseek_r+0x1e>
 8017fb4:	6023      	str	r3, [r4, #0]
 8017fb6:	bd38      	pop	{r3, r4, r5, pc}
 8017fb8:	2407767c 	.word	0x2407767c

08017fbc <_read_r>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	4d07      	ldr	r5, [pc, #28]	@ (8017fdc <_read_r+0x20>)
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	4608      	mov	r0, r1
 8017fc4:	4611      	mov	r1, r2
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	602a      	str	r2, [r5, #0]
 8017fca:	461a      	mov	r2, r3
 8017fcc:	f7ea fa5f 	bl	800248e <_read>
 8017fd0:	1c43      	adds	r3, r0, #1
 8017fd2:	d102      	bne.n	8017fda <_read_r+0x1e>
 8017fd4:	682b      	ldr	r3, [r5, #0]
 8017fd6:	b103      	cbz	r3, 8017fda <_read_r+0x1e>
 8017fd8:	6023      	str	r3, [r4, #0]
 8017fda:	bd38      	pop	{r3, r4, r5, pc}
 8017fdc:	2407767c 	.word	0x2407767c

08017fe0 <_sbrk_r>:
 8017fe0:	b538      	push	{r3, r4, r5, lr}
 8017fe2:	4d06      	ldr	r5, [pc, #24]	@ (8017ffc <_sbrk_r+0x1c>)
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	4608      	mov	r0, r1
 8017fea:	602b      	str	r3, [r5, #0]
 8017fec:	f7ea faa0 	bl	8002530 <_sbrk>
 8017ff0:	1c43      	adds	r3, r0, #1
 8017ff2:	d102      	bne.n	8017ffa <_sbrk_r+0x1a>
 8017ff4:	682b      	ldr	r3, [r5, #0]
 8017ff6:	b103      	cbz	r3, 8017ffa <_sbrk_r+0x1a>
 8017ff8:	6023      	str	r3, [r4, #0]
 8017ffa:	bd38      	pop	{r3, r4, r5, pc}
 8017ffc:	2407767c 	.word	0x2407767c

08018000 <_write_r>:
 8018000:	b538      	push	{r3, r4, r5, lr}
 8018002:	4d07      	ldr	r5, [pc, #28]	@ (8018020 <_write_r+0x20>)
 8018004:	4604      	mov	r4, r0
 8018006:	4608      	mov	r0, r1
 8018008:	4611      	mov	r1, r2
 801800a:	2200      	movs	r2, #0
 801800c:	602a      	str	r2, [r5, #0]
 801800e:	461a      	mov	r2, r3
 8018010:	f7e8 feda 	bl	8000dc8 <_write>
 8018014:	1c43      	adds	r3, r0, #1
 8018016:	d102      	bne.n	801801e <_write_r+0x1e>
 8018018:	682b      	ldr	r3, [r5, #0]
 801801a:	b103      	cbz	r3, 801801e <_write_r+0x1e>
 801801c:	6023      	str	r3, [r4, #0]
 801801e:	bd38      	pop	{r3, r4, r5, pc}
 8018020:	2407767c 	.word	0x2407767c

08018024 <__errno>:
 8018024:	4b01      	ldr	r3, [pc, #4]	@ (801802c <__errno+0x8>)
 8018026:	6818      	ldr	r0, [r3, #0]
 8018028:	4770      	bx	lr
 801802a:	bf00      	nop
 801802c:	24000280 	.word	0x24000280

08018030 <__libc_init_array>:
 8018030:	b570      	push	{r4, r5, r6, lr}
 8018032:	4d0d      	ldr	r5, [pc, #52]	@ (8018068 <__libc_init_array+0x38>)
 8018034:	4c0d      	ldr	r4, [pc, #52]	@ (801806c <__libc_init_array+0x3c>)
 8018036:	1b64      	subs	r4, r4, r5
 8018038:	10a4      	asrs	r4, r4, #2
 801803a:	2600      	movs	r6, #0
 801803c:	42a6      	cmp	r6, r4
 801803e:	d109      	bne.n	8018054 <__libc_init_array+0x24>
 8018040:	4d0b      	ldr	r5, [pc, #44]	@ (8018070 <__libc_init_array+0x40>)
 8018042:	4c0c      	ldr	r4, [pc, #48]	@ (8018074 <__libc_init_array+0x44>)
 8018044:	f002 fa16 	bl	801a474 <_init>
 8018048:	1b64      	subs	r4, r4, r5
 801804a:	10a4      	asrs	r4, r4, #2
 801804c:	2600      	movs	r6, #0
 801804e:	42a6      	cmp	r6, r4
 8018050:	d105      	bne.n	801805e <__libc_init_array+0x2e>
 8018052:	bd70      	pop	{r4, r5, r6, pc}
 8018054:	f855 3b04 	ldr.w	r3, [r5], #4
 8018058:	4798      	blx	r3
 801805a:	3601      	adds	r6, #1
 801805c:	e7ee      	b.n	801803c <__libc_init_array+0xc>
 801805e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018062:	4798      	blx	r3
 8018064:	3601      	adds	r6, #1
 8018066:	e7f2      	b.n	801804e <__libc_init_array+0x1e>
 8018068:	0801aa40 	.word	0x0801aa40
 801806c:	0801aa40 	.word	0x0801aa40
 8018070:	0801aa40 	.word	0x0801aa40
 8018074:	0801aa44 	.word	0x0801aa44

08018078 <__retarget_lock_init_recursive>:
 8018078:	4770      	bx	lr

0801807a <__retarget_lock_acquire_recursive>:
 801807a:	4770      	bx	lr

0801807c <__retarget_lock_release_recursive>:
 801807c:	4770      	bx	lr

0801807e <memcpy>:
 801807e:	440a      	add	r2, r1
 8018080:	4291      	cmp	r1, r2
 8018082:	f100 33ff 	add.w	r3, r0, #4294967295
 8018086:	d100      	bne.n	801808a <memcpy+0xc>
 8018088:	4770      	bx	lr
 801808a:	b510      	push	{r4, lr}
 801808c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018094:	4291      	cmp	r1, r2
 8018096:	d1f9      	bne.n	801808c <memcpy+0xe>
 8018098:	bd10      	pop	{r4, pc}
 801809a:	0000      	movs	r0, r0
 801809c:	0000      	movs	r0, r0
	...

080180a0 <nan>:
 80180a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80180a8 <nan+0x8>
 80180a4:	4770      	bx	lr
 80180a6:	bf00      	nop
 80180a8:	00000000 	.word	0x00000000
 80180ac:	7ff80000 	.word	0x7ff80000

080180b0 <nanf>:
 80180b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80180b8 <nanf+0x8>
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop
 80180b8:	7fc00000 	.word	0x7fc00000

080180bc <__assert_func>:
 80180bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80180be:	4614      	mov	r4, r2
 80180c0:	461a      	mov	r2, r3
 80180c2:	4b09      	ldr	r3, [pc, #36]	@ (80180e8 <__assert_func+0x2c>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	4605      	mov	r5, r0
 80180c8:	68d8      	ldr	r0, [r3, #12]
 80180ca:	b954      	cbnz	r4, 80180e2 <__assert_func+0x26>
 80180cc:	4b07      	ldr	r3, [pc, #28]	@ (80180ec <__assert_func+0x30>)
 80180ce:	461c      	mov	r4, r3
 80180d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80180d4:	9100      	str	r1, [sp, #0]
 80180d6:	462b      	mov	r3, r5
 80180d8:	4905      	ldr	r1, [pc, #20]	@ (80180f0 <__assert_func+0x34>)
 80180da:	f001 ffa1 	bl	801a020 <fiprintf>
 80180de:	f002 f8c3 	bl	801a268 <abort>
 80180e2:	4b04      	ldr	r3, [pc, #16]	@ (80180f4 <__assert_func+0x38>)
 80180e4:	e7f4      	b.n	80180d0 <__assert_func+0x14>
 80180e6:	bf00      	nop
 80180e8:	24000280 	.word	0x24000280
 80180ec:	0801a81a 	.word	0x0801a81a
 80180f0:	0801a7ec 	.word	0x0801a7ec
 80180f4:	0801a7df 	.word	0x0801a7df

080180f8 <_free_r>:
 80180f8:	b538      	push	{r3, r4, r5, lr}
 80180fa:	4605      	mov	r5, r0
 80180fc:	2900      	cmp	r1, #0
 80180fe:	d041      	beq.n	8018184 <_free_r+0x8c>
 8018100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018104:	1f0c      	subs	r4, r1, #4
 8018106:	2b00      	cmp	r3, #0
 8018108:	bfb8      	it	lt
 801810a:	18e4      	addlt	r4, r4, r3
 801810c:	f7fe fad6 	bl	80166bc <__malloc_lock>
 8018110:	4a1d      	ldr	r2, [pc, #116]	@ (8018188 <_free_r+0x90>)
 8018112:	6813      	ldr	r3, [r2, #0]
 8018114:	b933      	cbnz	r3, 8018124 <_free_r+0x2c>
 8018116:	6063      	str	r3, [r4, #4]
 8018118:	6014      	str	r4, [r2, #0]
 801811a:	4628      	mov	r0, r5
 801811c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018120:	f7fe bad2 	b.w	80166c8 <__malloc_unlock>
 8018124:	42a3      	cmp	r3, r4
 8018126:	d908      	bls.n	801813a <_free_r+0x42>
 8018128:	6820      	ldr	r0, [r4, #0]
 801812a:	1821      	adds	r1, r4, r0
 801812c:	428b      	cmp	r3, r1
 801812e:	bf01      	itttt	eq
 8018130:	6819      	ldreq	r1, [r3, #0]
 8018132:	685b      	ldreq	r3, [r3, #4]
 8018134:	1809      	addeq	r1, r1, r0
 8018136:	6021      	streq	r1, [r4, #0]
 8018138:	e7ed      	b.n	8018116 <_free_r+0x1e>
 801813a:	461a      	mov	r2, r3
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	b10b      	cbz	r3, 8018144 <_free_r+0x4c>
 8018140:	42a3      	cmp	r3, r4
 8018142:	d9fa      	bls.n	801813a <_free_r+0x42>
 8018144:	6811      	ldr	r1, [r2, #0]
 8018146:	1850      	adds	r0, r2, r1
 8018148:	42a0      	cmp	r0, r4
 801814a:	d10b      	bne.n	8018164 <_free_r+0x6c>
 801814c:	6820      	ldr	r0, [r4, #0]
 801814e:	4401      	add	r1, r0
 8018150:	1850      	adds	r0, r2, r1
 8018152:	4283      	cmp	r3, r0
 8018154:	6011      	str	r1, [r2, #0]
 8018156:	d1e0      	bne.n	801811a <_free_r+0x22>
 8018158:	6818      	ldr	r0, [r3, #0]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	6053      	str	r3, [r2, #4]
 801815e:	4408      	add	r0, r1
 8018160:	6010      	str	r0, [r2, #0]
 8018162:	e7da      	b.n	801811a <_free_r+0x22>
 8018164:	d902      	bls.n	801816c <_free_r+0x74>
 8018166:	230c      	movs	r3, #12
 8018168:	602b      	str	r3, [r5, #0]
 801816a:	e7d6      	b.n	801811a <_free_r+0x22>
 801816c:	6820      	ldr	r0, [r4, #0]
 801816e:	1821      	adds	r1, r4, r0
 8018170:	428b      	cmp	r3, r1
 8018172:	bf04      	itt	eq
 8018174:	6819      	ldreq	r1, [r3, #0]
 8018176:	685b      	ldreq	r3, [r3, #4]
 8018178:	6063      	str	r3, [r4, #4]
 801817a:	bf04      	itt	eq
 801817c:	1809      	addeq	r1, r1, r0
 801817e:	6021      	streq	r1, [r4, #0]
 8018180:	6054      	str	r4, [r2, #4]
 8018182:	e7ca      	b.n	801811a <_free_r+0x22>
 8018184:	bd38      	pop	{r3, r4, r5, pc}
 8018186:	bf00      	nop
 8018188:	2407753c 	.word	0x2407753c

0801818c <rshift>:
 801818c:	6903      	ldr	r3, [r0, #16]
 801818e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018196:	ea4f 1261 	mov.w	r2, r1, asr #5
 801819a:	f100 0414 	add.w	r4, r0, #20
 801819e:	dd45      	ble.n	801822c <rshift+0xa0>
 80181a0:	f011 011f 	ands.w	r1, r1, #31
 80181a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80181a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80181ac:	d10c      	bne.n	80181c8 <rshift+0x3c>
 80181ae:	f100 0710 	add.w	r7, r0, #16
 80181b2:	4629      	mov	r1, r5
 80181b4:	42b1      	cmp	r1, r6
 80181b6:	d334      	bcc.n	8018222 <rshift+0x96>
 80181b8:	1a9b      	subs	r3, r3, r2
 80181ba:	009b      	lsls	r3, r3, #2
 80181bc:	1eea      	subs	r2, r5, #3
 80181be:	4296      	cmp	r6, r2
 80181c0:	bf38      	it	cc
 80181c2:	2300      	movcc	r3, #0
 80181c4:	4423      	add	r3, r4
 80181c6:	e015      	b.n	80181f4 <rshift+0x68>
 80181c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80181cc:	f1c1 0820 	rsb	r8, r1, #32
 80181d0:	40cf      	lsrs	r7, r1
 80181d2:	f105 0e04 	add.w	lr, r5, #4
 80181d6:	46a1      	mov	r9, r4
 80181d8:	4576      	cmp	r6, lr
 80181da:	46f4      	mov	ip, lr
 80181dc:	d815      	bhi.n	801820a <rshift+0x7e>
 80181de:	1a9a      	subs	r2, r3, r2
 80181e0:	0092      	lsls	r2, r2, #2
 80181e2:	3a04      	subs	r2, #4
 80181e4:	3501      	adds	r5, #1
 80181e6:	42ae      	cmp	r6, r5
 80181e8:	bf38      	it	cc
 80181ea:	2200      	movcc	r2, #0
 80181ec:	18a3      	adds	r3, r4, r2
 80181ee:	50a7      	str	r7, [r4, r2]
 80181f0:	b107      	cbz	r7, 80181f4 <rshift+0x68>
 80181f2:	3304      	adds	r3, #4
 80181f4:	1b1a      	subs	r2, r3, r4
 80181f6:	42a3      	cmp	r3, r4
 80181f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80181fc:	bf08      	it	eq
 80181fe:	2300      	moveq	r3, #0
 8018200:	6102      	str	r2, [r0, #16]
 8018202:	bf08      	it	eq
 8018204:	6143      	streq	r3, [r0, #20]
 8018206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801820a:	f8dc c000 	ldr.w	ip, [ip]
 801820e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018212:	ea4c 0707 	orr.w	r7, ip, r7
 8018216:	f849 7b04 	str.w	r7, [r9], #4
 801821a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801821e:	40cf      	lsrs	r7, r1
 8018220:	e7da      	b.n	80181d8 <rshift+0x4c>
 8018222:	f851 cb04 	ldr.w	ip, [r1], #4
 8018226:	f847 cf04 	str.w	ip, [r7, #4]!
 801822a:	e7c3      	b.n	80181b4 <rshift+0x28>
 801822c:	4623      	mov	r3, r4
 801822e:	e7e1      	b.n	80181f4 <rshift+0x68>

08018230 <__hexdig_fun>:
 8018230:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018234:	2b09      	cmp	r3, #9
 8018236:	d802      	bhi.n	801823e <__hexdig_fun+0xe>
 8018238:	3820      	subs	r0, #32
 801823a:	b2c0      	uxtb	r0, r0
 801823c:	4770      	bx	lr
 801823e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018242:	2b05      	cmp	r3, #5
 8018244:	d801      	bhi.n	801824a <__hexdig_fun+0x1a>
 8018246:	3847      	subs	r0, #71	@ 0x47
 8018248:	e7f7      	b.n	801823a <__hexdig_fun+0xa>
 801824a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801824e:	2b05      	cmp	r3, #5
 8018250:	d801      	bhi.n	8018256 <__hexdig_fun+0x26>
 8018252:	3827      	subs	r0, #39	@ 0x27
 8018254:	e7f1      	b.n	801823a <__hexdig_fun+0xa>
 8018256:	2000      	movs	r0, #0
 8018258:	4770      	bx	lr
	...

0801825c <__gethex>:
 801825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018260:	b085      	sub	sp, #20
 8018262:	468a      	mov	sl, r1
 8018264:	9302      	str	r3, [sp, #8]
 8018266:	680b      	ldr	r3, [r1, #0]
 8018268:	9001      	str	r0, [sp, #4]
 801826a:	4690      	mov	r8, r2
 801826c:	1c9c      	adds	r4, r3, #2
 801826e:	46a1      	mov	r9, r4
 8018270:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018274:	2830      	cmp	r0, #48	@ 0x30
 8018276:	d0fa      	beq.n	801826e <__gethex+0x12>
 8018278:	eba9 0303 	sub.w	r3, r9, r3
 801827c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018280:	f7ff ffd6 	bl	8018230 <__hexdig_fun>
 8018284:	4605      	mov	r5, r0
 8018286:	2800      	cmp	r0, #0
 8018288:	d168      	bne.n	801835c <__gethex+0x100>
 801828a:	49a0      	ldr	r1, [pc, #640]	@ (801850c <__gethex+0x2b0>)
 801828c:	2201      	movs	r2, #1
 801828e:	4648      	mov	r0, r9
 8018290:	f7ff fdad 	bl	8017dee <strncmp>
 8018294:	4607      	mov	r7, r0
 8018296:	2800      	cmp	r0, #0
 8018298:	d167      	bne.n	801836a <__gethex+0x10e>
 801829a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801829e:	4626      	mov	r6, r4
 80182a0:	f7ff ffc6 	bl	8018230 <__hexdig_fun>
 80182a4:	2800      	cmp	r0, #0
 80182a6:	d062      	beq.n	801836e <__gethex+0x112>
 80182a8:	4623      	mov	r3, r4
 80182aa:	7818      	ldrb	r0, [r3, #0]
 80182ac:	2830      	cmp	r0, #48	@ 0x30
 80182ae:	4699      	mov	r9, r3
 80182b0:	f103 0301 	add.w	r3, r3, #1
 80182b4:	d0f9      	beq.n	80182aa <__gethex+0x4e>
 80182b6:	f7ff ffbb 	bl	8018230 <__hexdig_fun>
 80182ba:	fab0 f580 	clz	r5, r0
 80182be:	096d      	lsrs	r5, r5, #5
 80182c0:	f04f 0b01 	mov.w	fp, #1
 80182c4:	464a      	mov	r2, r9
 80182c6:	4616      	mov	r6, r2
 80182c8:	3201      	adds	r2, #1
 80182ca:	7830      	ldrb	r0, [r6, #0]
 80182cc:	f7ff ffb0 	bl	8018230 <__hexdig_fun>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	d1f8      	bne.n	80182c6 <__gethex+0x6a>
 80182d4:	498d      	ldr	r1, [pc, #564]	@ (801850c <__gethex+0x2b0>)
 80182d6:	2201      	movs	r2, #1
 80182d8:	4630      	mov	r0, r6
 80182da:	f7ff fd88 	bl	8017dee <strncmp>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d13f      	bne.n	8018362 <__gethex+0x106>
 80182e2:	b944      	cbnz	r4, 80182f6 <__gethex+0x9a>
 80182e4:	1c74      	adds	r4, r6, #1
 80182e6:	4622      	mov	r2, r4
 80182e8:	4616      	mov	r6, r2
 80182ea:	3201      	adds	r2, #1
 80182ec:	7830      	ldrb	r0, [r6, #0]
 80182ee:	f7ff ff9f 	bl	8018230 <__hexdig_fun>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	d1f8      	bne.n	80182e8 <__gethex+0x8c>
 80182f6:	1ba4      	subs	r4, r4, r6
 80182f8:	00a7      	lsls	r7, r4, #2
 80182fa:	7833      	ldrb	r3, [r6, #0]
 80182fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018300:	2b50      	cmp	r3, #80	@ 0x50
 8018302:	d13e      	bne.n	8018382 <__gethex+0x126>
 8018304:	7873      	ldrb	r3, [r6, #1]
 8018306:	2b2b      	cmp	r3, #43	@ 0x2b
 8018308:	d033      	beq.n	8018372 <__gethex+0x116>
 801830a:	2b2d      	cmp	r3, #45	@ 0x2d
 801830c:	d034      	beq.n	8018378 <__gethex+0x11c>
 801830e:	1c71      	adds	r1, r6, #1
 8018310:	2400      	movs	r4, #0
 8018312:	7808      	ldrb	r0, [r1, #0]
 8018314:	f7ff ff8c 	bl	8018230 <__hexdig_fun>
 8018318:	1e43      	subs	r3, r0, #1
 801831a:	b2db      	uxtb	r3, r3
 801831c:	2b18      	cmp	r3, #24
 801831e:	d830      	bhi.n	8018382 <__gethex+0x126>
 8018320:	f1a0 0210 	sub.w	r2, r0, #16
 8018324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018328:	f7ff ff82 	bl	8018230 <__hexdig_fun>
 801832c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018330:	fa5f fc8c 	uxtb.w	ip, ip
 8018334:	f1bc 0f18 	cmp.w	ip, #24
 8018338:	f04f 030a 	mov.w	r3, #10
 801833c:	d91e      	bls.n	801837c <__gethex+0x120>
 801833e:	b104      	cbz	r4, 8018342 <__gethex+0xe6>
 8018340:	4252      	negs	r2, r2
 8018342:	4417      	add	r7, r2
 8018344:	f8ca 1000 	str.w	r1, [sl]
 8018348:	b1ed      	cbz	r5, 8018386 <__gethex+0x12a>
 801834a:	f1bb 0f00 	cmp.w	fp, #0
 801834e:	bf0c      	ite	eq
 8018350:	2506      	moveq	r5, #6
 8018352:	2500      	movne	r5, #0
 8018354:	4628      	mov	r0, r5
 8018356:	b005      	add	sp, #20
 8018358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801835c:	2500      	movs	r5, #0
 801835e:	462c      	mov	r4, r5
 8018360:	e7b0      	b.n	80182c4 <__gethex+0x68>
 8018362:	2c00      	cmp	r4, #0
 8018364:	d1c7      	bne.n	80182f6 <__gethex+0x9a>
 8018366:	4627      	mov	r7, r4
 8018368:	e7c7      	b.n	80182fa <__gethex+0x9e>
 801836a:	464e      	mov	r6, r9
 801836c:	462f      	mov	r7, r5
 801836e:	2501      	movs	r5, #1
 8018370:	e7c3      	b.n	80182fa <__gethex+0x9e>
 8018372:	2400      	movs	r4, #0
 8018374:	1cb1      	adds	r1, r6, #2
 8018376:	e7cc      	b.n	8018312 <__gethex+0xb6>
 8018378:	2401      	movs	r4, #1
 801837a:	e7fb      	b.n	8018374 <__gethex+0x118>
 801837c:	fb03 0002 	mla	r0, r3, r2, r0
 8018380:	e7ce      	b.n	8018320 <__gethex+0xc4>
 8018382:	4631      	mov	r1, r6
 8018384:	e7de      	b.n	8018344 <__gethex+0xe8>
 8018386:	eba6 0309 	sub.w	r3, r6, r9
 801838a:	3b01      	subs	r3, #1
 801838c:	4629      	mov	r1, r5
 801838e:	2b07      	cmp	r3, #7
 8018390:	dc0a      	bgt.n	80183a8 <__gethex+0x14c>
 8018392:	9801      	ldr	r0, [sp, #4]
 8018394:	f000 fa46 	bl	8018824 <_Balloc>
 8018398:	4604      	mov	r4, r0
 801839a:	b940      	cbnz	r0, 80183ae <__gethex+0x152>
 801839c:	4b5c      	ldr	r3, [pc, #368]	@ (8018510 <__gethex+0x2b4>)
 801839e:	4602      	mov	r2, r0
 80183a0:	21e4      	movs	r1, #228	@ 0xe4
 80183a2:	485c      	ldr	r0, [pc, #368]	@ (8018514 <__gethex+0x2b8>)
 80183a4:	f7ff fe8a 	bl	80180bc <__assert_func>
 80183a8:	3101      	adds	r1, #1
 80183aa:	105b      	asrs	r3, r3, #1
 80183ac:	e7ef      	b.n	801838e <__gethex+0x132>
 80183ae:	f100 0a14 	add.w	sl, r0, #20
 80183b2:	2300      	movs	r3, #0
 80183b4:	4655      	mov	r5, sl
 80183b6:	469b      	mov	fp, r3
 80183b8:	45b1      	cmp	r9, r6
 80183ba:	d337      	bcc.n	801842c <__gethex+0x1d0>
 80183bc:	f845 bb04 	str.w	fp, [r5], #4
 80183c0:	eba5 050a 	sub.w	r5, r5, sl
 80183c4:	10ad      	asrs	r5, r5, #2
 80183c6:	6125      	str	r5, [r4, #16]
 80183c8:	4658      	mov	r0, fp
 80183ca:	f000 fb1d 	bl	8018a08 <__hi0bits>
 80183ce:	016d      	lsls	r5, r5, #5
 80183d0:	f8d8 6000 	ldr.w	r6, [r8]
 80183d4:	1a2d      	subs	r5, r5, r0
 80183d6:	42b5      	cmp	r5, r6
 80183d8:	dd54      	ble.n	8018484 <__gethex+0x228>
 80183da:	1bad      	subs	r5, r5, r6
 80183dc:	4629      	mov	r1, r5
 80183de:	4620      	mov	r0, r4
 80183e0:	f000 feae 	bl	8019140 <__any_on>
 80183e4:	4681      	mov	r9, r0
 80183e6:	b178      	cbz	r0, 8018408 <__gethex+0x1ac>
 80183e8:	1e6b      	subs	r3, r5, #1
 80183ea:	1159      	asrs	r1, r3, #5
 80183ec:	f003 021f 	and.w	r2, r3, #31
 80183f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80183f4:	f04f 0901 	mov.w	r9, #1
 80183f8:	fa09 f202 	lsl.w	r2, r9, r2
 80183fc:	420a      	tst	r2, r1
 80183fe:	d003      	beq.n	8018408 <__gethex+0x1ac>
 8018400:	454b      	cmp	r3, r9
 8018402:	dc36      	bgt.n	8018472 <__gethex+0x216>
 8018404:	f04f 0902 	mov.w	r9, #2
 8018408:	4629      	mov	r1, r5
 801840a:	4620      	mov	r0, r4
 801840c:	f7ff febe 	bl	801818c <rshift>
 8018410:	442f      	add	r7, r5
 8018412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018416:	42bb      	cmp	r3, r7
 8018418:	da42      	bge.n	80184a0 <__gethex+0x244>
 801841a:	9801      	ldr	r0, [sp, #4]
 801841c:	4621      	mov	r1, r4
 801841e:	f000 fa41 	bl	80188a4 <_Bfree>
 8018422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018424:	2300      	movs	r3, #0
 8018426:	6013      	str	r3, [r2, #0]
 8018428:	25a3      	movs	r5, #163	@ 0xa3
 801842a:	e793      	b.n	8018354 <__gethex+0xf8>
 801842c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018430:	2a2e      	cmp	r2, #46	@ 0x2e
 8018432:	d012      	beq.n	801845a <__gethex+0x1fe>
 8018434:	2b20      	cmp	r3, #32
 8018436:	d104      	bne.n	8018442 <__gethex+0x1e6>
 8018438:	f845 bb04 	str.w	fp, [r5], #4
 801843c:	f04f 0b00 	mov.w	fp, #0
 8018440:	465b      	mov	r3, fp
 8018442:	7830      	ldrb	r0, [r6, #0]
 8018444:	9303      	str	r3, [sp, #12]
 8018446:	f7ff fef3 	bl	8018230 <__hexdig_fun>
 801844a:	9b03      	ldr	r3, [sp, #12]
 801844c:	f000 000f 	and.w	r0, r0, #15
 8018450:	4098      	lsls	r0, r3
 8018452:	ea4b 0b00 	orr.w	fp, fp, r0
 8018456:	3304      	adds	r3, #4
 8018458:	e7ae      	b.n	80183b8 <__gethex+0x15c>
 801845a:	45b1      	cmp	r9, r6
 801845c:	d8ea      	bhi.n	8018434 <__gethex+0x1d8>
 801845e:	492b      	ldr	r1, [pc, #172]	@ (801850c <__gethex+0x2b0>)
 8018460:	9303      	str	r3, [sp, #12]
 8018462:	2201      	movs	r2, #1
 8018464:	4630      	mov	r0, r6
 8018466:	f7ff fcc2 	bl	8017dee <strncmp>
 801846a:	9b03      	ldr	r3, [sp, #12]
 801846c:	2800      	cmp	r0, #0
 801846e:	d1e1      	bne.n	8018434 <__gethex+0x1d8>
 8018470:	e7a2      	b.n	80183b8 <__gethex+0x15c>
 8018472:	1ea9      	subs	r1, r5, #2
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fe63 	bl	8019140 <__any_on>
 801847a:	2800      	cmp	r0, #0
 801847c:	d0c2      	beq.n	8018404 <__gethex+0x1a8>
 801847e:	f04f 0903 	mov.w	r9, #3
 8018482:	e7c1      	b.n	8018408 <__gethex+0x1ac>
 8018484:	da09      	bge.n	801849a <__gethex+0x23e>
 8018486:	1b75      	subs	r5, r6, r5
 8018488:	4621      	mov	r1, r4
 801848a:	9801      	ldr	r0, [sp, #4]
 801848c:	462a      	mov	r2, r5
 801848e:	f000 fc21 	bl	8018cd4 <__lshift>
 8018492:	1b7f      	subs	r7, r7, r5
 8018494:	4604      	mov	r4, r0
 8018496:	f100 0a14 	add.w	sl, r0, #20
 801849a:	f04f 0900 	mov.w	r9, #0
 801849e:	e7b8      	b.n	8018412 <__gethex+0x1b6>
 80184a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80184a4:	42bd      	cmp	r5, r7
 80184a6:	dd6f      	ble.n	8018588 <__gethex+0x32c>
 80184a8:	1bed      	subs	r5, r5, r7
 80184aa:	42ae      	cmp	r6, r5
 80184ac:	dc34      	bgt.n	8018518 <__gethex+0x2bc>
 80184ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184b2:	2b02      	cmp	r3, #2
 80184b4:	d022      	beq.n	80184fc <__gethex+0x2a0>
 80184b6:	2b03      	cmp	r3, #3
 80184b8:	d024      	beq.n	8018504 <__gethex+0x2a8>
 80184ba:	2b01      	cmp	r3, #1
 80184bc:	d115      	bne.n	80184ea <__gethex+0x28e>
 80184be:	42ae      	cmp	r6, r5
 80184c0:	d113      	bne.n	80184ea <__gethex+0x28e>
 80184c2:	2e01      	cmp	r6, #1
 80184c4:	d10b      	bne.n	80184de <__gethex+0x282>
 80184c6:	9a02      	ldr	r2, [sp, #8]
 80184c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80184cc:	6013      	str	r3, [r2, #0]
 80184ce:	2301      	movs	r3, #1
 80184d0:	6123      	str	r3, [r4, #16]
 80184d2:	f8ca 3000 	str.w	r3, [sl]
 80184d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184d8:	2562      	movs	r5, #98	@ 0x62
 80184da:	601c      	str	r4, [r3, #0]
 80184dc:	e73a      	b.n	8018354 <__gethex+0xf8>
 80184de:	1e71      	subs	r1, r6, #1
 80184e0:	4620      	mov	r0, r4
 80184e2:	f000 fe2d 	bl	8019140 <__any_on>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d1ed      	bne.n	80184c6 <__gethex+0x26a>
 80184ea:	9801      	ldr	r0, [sp, #4]
 80184ec:	4621      	mov	r1, r4
 80184ee:	f000 f9d9 	bl	80188a4 <_Bfree>
 80184f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80184f4:	2300      	movs	r3, #0
 80184f6:	6013      	str	r3, [r2, #0]
 80184f8:	2550      	movs	r5, #80	@ 0x50
 80184fa:	e72b      	b.n	8018354 <__gethex+0xf8>
 80184fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d1f3      	bne.n	80184ea <__gethex+0x28e>
 8018502:	e7e0      	b.n	80184c6 <__gethex+0x26a>
 8018504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018506:	2b00      	cmp	r3, #0
 8018508:	d1dd      	bne.n	80184c6 <__gethex+0x26a>
 801850a:	e7ee      	b.n	80184ea <__gethex+0x28e>
 801850c:	0801a5fc 	.word	0x0801a5fc
 8018510:	0801a81b 	.word	0x0801a81b
 8018514:	0801a82c 	.word	0x0801a82c
 8018518:	1e6f      	subs	r7, r5, #1
 801851a:	f1b9 0f00 	cmp.w	r9, #0
 801851e:	d130      	bne.n	8018582 <__gethex+0x326>
 8018520:	b127      	cbz	r7, 801852c <__gethex+0x2d0>
 8018522:	4639      	mov	r1, r7
 8018524:	4620      	mov	r0, r4
 8018526:	f000 fe0b 	bl	8019140 <__any_on>
 801852a:	4681      	mov	r9, r0
 801852c:	117a      	asrs	r2, r7, #5
 801852e:	2301      	movs	r3, #1
 8018530:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018534:	f007 071f 	and.w	r7, r7, #31
 8018538:	40bb      	lsls	r3, r7
 801853a:	4213      	tst	r3, r2
 801853c:	4629      	mov	r1, r5
 801853e:	4620      	mov	r0, r4
 8018540:	bf18      	it	ne
 8018542:	f049 0902 	orrne.w	r9, r9, #2
 8018546:	f7ff fe21 	bl	801818c <rshift>
 801854a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801854e:	1b76      	subs	r6, r6, r5
 8018550:	2502      	movs	r5, #2
 8018552:	f1b9 0f00 	cmp.w	r9, #0
 8018556:	d047      	beq.n	80185e8 <__gethex+0x38c>
 8018558:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801855c:	2b02      	cmp	r3, #2
 801855e:	d015      	beq.n	801858c <__gethex+0x330>
 8018560:	2b03      	cmp	r3, #3
 8018562:	d017      	beq.n	8018594 <__gethex+0x338>
 8018564:	2b01      	cmp	r3, #1
 8018566:	d109      	bne.n	801857c <__gethex+0x320>
 8018568:	f019 0f02 	tst.w	r9, #2
 801856c:	d006      	beq.n	801857c <__gethex+0x320>
 801856e:	f8da 3000 	ldr.w	r3, [sl]
 8018572:	ea49 0903 	orr.w	r9, r9, r3
 8018576:	f019 0f01 	tst.w	r9, #1
 801857a:	d10e      	bne.n	801859a <__gethex+0x33e>
 801857c:	f045 0510 	orr.w	r5, r5, #16
 8018580:	e032      	b.n	80185e8 <__gethex+0x38c>
 8018582:	f04f 0901 	mov.w	r9, #1
 8018586:	e7d1      	b.n	801852c <__gethex+0x2d0>
 8018588:	2501      	movs	r5, #1
 801858a:	e7e2      	b.n	8018552 <__gethex+0x2f6>
 801858c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801858e:	f1c3 0301 	rsb	r3, r3, #1
 8018592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018596:	2b00      	cmp	r3, #0
 8018598:	d0f0      	beq.n	801857c <__gethex+0x320>
 801859a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801859e:	f104 0314 	add.w	r3, r4, #20
 80185a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80185a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80185aa:	f04f 0c00 	mov.w	ip, #0
 80185ae:	4618      	mov	r0, r3
 80185b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80185b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80185b8:	d01b      	beq.n	80185f2 <__gethex+0x396>
 80185ba:	3201      	adds	r2, #1
 80185bc:	6002      	str	r2, [r0, #0]
 80185be:	2d02      	cmp	r5, #2
 80185c0:	f104 0314 	add.w	r3, r4, #20
 80185c4:	d13c      	bne.n	8018640 <__gethex+0x3e4>
 80185c6:	f8d8 2000 	ldr.w	r2, [r8]
 80185ca:	3a01      	subs	r2, #1
 80185cc:	42b2      	cmp	r2, r6
 80185ce:	d109      	bne.n	80185e4 <__gethex+0x388>
 80185d0:	1171      	asrs	r1, r6, #5
 80185d2:	2201      	movs	r2, #1
 80185d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80185d8:	f006 061f 	and.w	r6, r6, #31
 80185dc:	fa02 f606 	lsl.w	r6, r2, r6
 80185e0:	421e      	tst	r6, r3
 80185e2:	d13a      	bne.n	801865a <__gethex+0x3fe>
 80185e4:	f045 0520 	orr.w	r5, r5, #32
 80185e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185ea:	601c      	str	r4, [r3, #0]
 80185ec:	9b02      	ldr	r3, [sp, #8]
 80185ee:	601f      	str	r7, [r3, #0]
 80185f0:	e6b0      	b.n	8018354 <__gethex+0xf8>
 80185f2:	4299      	cmp	r1, r3
 80185f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80185f8:	d8d9      	bhi.n	80185ae <__gethex+0x352>
 80185fa:	68a3      	ldr	r3, [r4, #8]
 80185fc:	459b      	cmp	fp, r3
 80185fe:	db17      	blt.n	8018630 <__gethex+0x3d4>
 8018600:	6861      	ldr	r1, [r4, #4]
 8018602:	9801      	ldr	r0, [sp, #4]
 8018604:	3101      	adds	r1, #1
 8018606:	f000 f90d 	bl	8018824 <_Balloc>
 801860a:	4681      	mov	r9, r0
 801860c:	b918      	cbnz	r0, 8018616 <__gethex+0x3ba>
 801860e:	4b1a      	ldr	r3, [pc, #104]	@ (8018678 <__gethex+0x41c>)
 8018610:	4602      	mov	r2, r0
 8018612:	2184      	movs	r1, #132	@ 0x84
 8018614:	e6c5      	b.n	80183a2 <__gethex+0x146>
 8018616:	6922      	ldr	r2, [r4, #16]
 8018618:	3202      	adds	r2, #2
 801861a:	f104 010c 	add.w	r1, r4, #12
 801861e:	0092      	lsls	r2, r2, #2
 8018620:	300c      	adds	r0, #12
 8018622:	f7ff fd2c 	bl	801807e <memcpy>
 8018626:	4621      	mov	r1, r4
 8018628:	9801      	ldr	r0, [sp, #4]
 801862a:	f000 f93b 	bl	80188a4 <_Bfree>
 801862e:	464c      	mov	r4, r9
 8018630:	6923      	ldr	r3, [r4, #16]
 8018632:	1c5a      	adds	r2, r3, #1
 8018634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018638:	6122      	str	r2, [r4, #16]
 801863a:	2201      	movs	r2, #1
 801863c:	615a      	str	r2, [r3, #20]
 801863e:	e7be      	b.n	80185be <__gethex+0x362>
 8018640:	6922      	ldr	r2, [r4, #16]
 8018642:	455a      	cmp	r2, fp
 8018644:	dd0b      	ble.n	801865e <__gethex+0x402>
 8018646:	2101      	movs	r1, #1
 8018648:	4620      	mov	r0, r4
 801864a:	f7ff fd9f 	bl	801818c <rshift>
 801864e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018652:	3701      	adds	r7, #1
 8018654:	42bb      	cmp	r3, r7
 8018656:	f6ff aee0 	blt.w	801841a <__gethex+0x1be>
 801865a:	2501      	movs	r5, #1
 801865c:	e7c2      	b.n	80185e4 <__gethex+0x388>
 801865e:	f016 061f 	ands.w	r6, r6, #31
 8018662:	d0fa      	beq.n	801865a <__gethex+0x3fe>
 8018664:	4453      	add	r3, sl
 8018666:	f1c6 0620 	rsb	r6, r6, #32
 801866a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801866e:	f000 f9cb 	bl	8018a08 <__hi0bits>
 8018672:	42b0      	cmp	r0, r6
 8018674:	dbe7      	blt.n	8018646 <__gethex+0x3ea>
 8018676:	e7f0      	b.n	801865a <__gethex+0x3fe>
 8018678:	0801a81b 	.word	0x0801a81b

0801867c <L_shift>:
 801867c:	f1c2 0208 	rsb	r2, r2, #8
 8018680:	0092      	lsls	r2, r2, #2
 8018682:	b570      	push	{r4, r5, r6, lr}
 8018684:	f1c2 0620 	rsb	r6, r2, #32
 8018688:	6843      	ldr	r3, [r0, #4]
 801868a:	6804      	ldr	r4, [r0, #0]
 801868c:	fa03 f506 	lsl.w	r5, r3, r6
 8018690:	432c      	orrs	r4, r5
 8018692:	40d3      	lsrs	r3, r2
 8018694:	6004      	str	r4, [r0, #0]
 8018696:	f840 3f04 	str.w	r3, [r0, #4]!
 801869a:	4288      	cmp	r0, r1
 801869c:	d3f4      	bcc.n	8018688 <L_shift+0xc>
 801869e:	bd70      	pop	{r4, r5, r6, pc}

080186a0 <__match>:
 80186a0:	b530      	push	{r4, r5, lr}
 80186a2:	6803      	ldr	r3, [r0, #0]
 80186a4:	3301      	adds	r3, #1
 80186a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186aa:	b914      	cbnz	r4, 80186b2 <__match+0x12>
 80186ac:	6003      	str	r3, [r0, #0]
 80186ae:	2001      	movs	r0, #1
 80186b0:	bd30      	pop	{r4, r5, pc}
 80186b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80186ba:	2d19      	cmp	r5, #25
 80186bc:	bf98      	it	ls
 80186be:	3220      	addls	r2, #32
 80186c0:	42a2      	cmp	r2, r4
 80186c2:	d0f0      	beq.n	80186a6 <__match+0x6>
 80186c4:	2000      	movs	r0, #0
 80186c6:	e7f3      	b.n	80186b0 <__match+0x10>

080186c8 <__hexnan>:
 80186c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186cc:	680b      	ldr	r3, [r1, #0]
 80186ce:	6801      	ldr	r1, [r0, #0]
 80186d0:	115e      	asrs	r6, r3, #5
 80186d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80186d6:	f013 031f 	ands.w	r3, r3, #31
 80186da:	b087      	sub	sp, #28
 80186dc:	bf18      	it	ne
 80186de:	3604      	addne	r6, #4
 80186e0:	2500      	movs	r5, #0
 80186e2:	1f37      	subs	r7, r6, #4
 80186e4:	4682      	mov	sl, r0
 80186e6:	4690      	mov	r8, r2
 80186e8:	9301      	str	r3, [sp, #4]
 80186ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80186ee:	46b9      	mov	r9, r7
 80186f0:	463c      	mov	r4, r7
 80186f2:	9502      	str	r5, [sp, #8]
 80186f4:	46ab      	mov	fp, r5
 80186f6:	784a      	ldrb	r2, [r1, #1]
 80186f8:	1c4b      	adds	r3, r1, #1
 80186fa:	9303      	str	r3, [sp, #12]
 80186fc:	b342      	cbz	r2, 8018750 <__hexnan+0x88>
 80186fe:	4610      	mov	r0, r2
 8018700:	9105      	str	r1, [sp, #20]
 8018702:	9204      	str	r2, [sp, #16]
 8018704:	f7ff fd94 	bl	8018230 <__hexdig_fun>
 8018708:	2800      	cmp	r0, #0
 801870a:	d151      	bne.n	80187b0 <__hexnan+0xe8>
 801870c:	9a04      	ldr	r2, [sp, #16]
 801870e:	9905      	ldr	r1, [sp, #20]
 8018710:	2a20      	cmp	r2, #32
 8018712:	d818      	bhi.n	8018746 <__hexnan+0x7e>
 8018714:	9b02      	ldr	r3, [sp, #8]
 8018716:	459b      	cmp	fp, r3
 8018718:	dd13      	ble.n	8018742 <__hexnan+0x7a>
 801871a:	454c      	cmp	r4, r9
 801871c:	d206      	bcs.n	801872c <__hexnan+0x64>
 801871e:	2d07      	cmp	r5, #7
 8018720:	dc04      	bgt.n	801872c <__hexnan+0x64>
 8018722:	462a      	mov	r2, r5
 8018724:	4649      	mov	r1, r9
 8018726:	4620      	mov	r0, r4
 8018728:	f7ff ffa8 	bl	801867c <L_shift>
 801872c:	4544      	cmp	r4, r8
 801872e:	d952      	bls.n	80187d6 <__hexnan+0x10e>
 8018730:	2300      	movs	r3, #0
 8018732:	f1a4 0904 	sub.w	r9, r4, #4
 8018736:	f844 3c04 	str.w	r3, [r4, #-4]
 801873a:	f8cd b008 	str.w	fp, [sp, #8]
 801873e:	464c      	mov	r4, r9
 8018740:	461d      	mov	r5, r3
 8018742:	9903      	ldr	r1, [sp, #12]
 8018744:	e7d7      	b.n	80186f6 <__hexnan+0x2e>
 8018746:	2a29      	cmp	r2, #41	@ 0x29
 8018748:	d157      	bne.n	80187fa <__hexnan+0x132>
 801874a:	3102      	adds	r1, #2
 801874c:	f8ca 1000 	str.w	r1, [sl]
 8018750:	f1bb 0f00 	cmp.w	fp, #0
 8018754:	d051      	beq.n	80187fa <__hexnan+0x132>
 8018756:	454c      	cmp	r4, r9
 8018758:	d206      	bcs.n	8018768 <__hexnan+0xa0>
 801875a:	2d07      	cmp	r5, #7
 801875c:	dc04      	bgt.n	8018768 <__hexnan+0xa0>
 801875e:	462a      	mov	r2, r5
 8018760:	4649      	mov	r1, r9
 8018762:	4620      	mov	r0, r4
 8018764:	f7ff ff8a 	bl	801867c <L_shift>
 8018768:	4544      	cmp	r4, r8
 801876a:	d936      	bls.n	80187da <__hexnan+0x112>
 801876c:	f1a8 0204 	sub.w	r2, r8, #4
 8018770:	4623      	mov	r3, r4
 8018772:	f853 1b04 	ldr.w	r1, [r3], #4
 8018776:	f842 1f04 	str.w	r1, [r2, #4]!
 801877a:	429f      	cmp	r7, r3
 801877c:	d2f9      	bcs.n	8018772 <__hexnan+0xaa>
 801877e:	1b3b      	subs	r3, r7, r4
 8018780:	f023 0303 	bic.w	r3, r3, #3
 8018784:	3304      	adds	r3, #4
 8018786:	3401      	adds	r4, #1
 8018788:	3e03      	subs	r6, #3
 801878a:	42b4      	cmp	r4, r6
 801878c:	bf88      	it	hi
 801878e:	2304      	movhi	r3, #4
 8018790:	4443      	add	r3, r8
 8018792:	2200      	movs	r2, #0
 8018794:	f843 2b04 	str.w	r2, [r3], #4
 8018798:	429f      	cmp	r7, r3
 801879a:	d2fb      	bcs.n	8018794 <__hexnan+0xcc>
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	b91b      	cbnz	r3, 80187a8 <__hexnan+0xe0>
 80187a0:	4547      	cmp	r7, r8
 80187a2:	d128      	bne.n	80187f6 <__hexnan+0x12e>
 80187a4:	2301      	movs	r3, #1
 80187a6:	603b      	str	r3, [r7, #0]
 80187a8:	2005      	movs	r0, #5
 80187aa:	b007      	add	sp, #28
 80187ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b0:	3501      	adds	r5, #1
 80187b2:	2d08      	cmp	r5, #8
 80187b4:	f10b 0b01 	add.w	fp, fp, #1
 80187b8:	dd06      	ble.n	80187c8 <__hexnan+0x100>
 80187ba:	4544      	cmp	r4, r8
 80187bc:	d9c1      	bls.n	8018742 <__hexnan+0x7a>
 80187be:	2300      	movs	r3, #0
 80187c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80187c4:	2501      	movs	r5, #1
 80187c6:	3c04      	subs	r4, #4
 80187c8:	6822      	ldr	r2, [r4, #0]
 80187ca:	f000 000f 	and.w	r0, r0, #15
 80187ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80187d2:	6020      	str	r0, [r4, #0]
 80187d4:	e7b5      	b.n	8018742 <__hexnan+0x7a>
 80187d6:	2508      	movs	r5, #8
 80187d8:	e7b3      	b.n	8018742 <__hexnan+0x7a>
 80187da:	9b01      	ldr	r3, [sp, #4]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d0dd      	beq.n	801879c <__hexnan+0xd4>
 80187e0:	f1c3 0320 	rsb	r3, r3, #32
 80187e4:	f04f 32ff 	mov.w	r2, #4294967295
 80187e8:	40da      	lsrs	r2, r3
 80187ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80187ee:	4013      	ands	r3, r2
 80187f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80187f4:	e7d2      	b.n	801879c <__hexnan+0xd4>
 80187f6:	3f04      	subs	r7, #4
 80187f8:	e7d0      	b.n	801879c <__hexnan+0xd4>
 80187fa:	2004      	movs	r0, #4
 80187fc:	e7d5      	b.n	80187aa <__hexnan+0xe2>

080187fe <__ascii_mbtowc>:
 80187fe:	b082      	sub	sp, #8
 8018800:	b901      	cbnz	r1, 8018804 <__ascii_mbtowc+0x6>
 8018802:	a901      	add	r1, sp, #4
 8018804:	b142      	cbz	r2, 8018818 <__ascii_mbtowc+0x1a>
 8018806:	b14b      	cbz	r3, 801881c <__ascii_mbtowc+0x1e>
 8018808:	7813      	ldrb	r3, [r2, #0]
 801880a:	600b      	str	r3, [r1, #0]
 801880c:	7812      	ldrb	r2, [r2, #0]
 801880e:	1e10      	subs	r0, r2, #0
 8018810:	bf18      	it	ne
 8018812:	2001      	movne	r0, #1
 8018814:	b002      	add	sp, #8
 8018816:	4770      	bx	lr
 8018818:	4610      	mov	r0, r2
 801881a:	e7fb      	b.n	8018814 <__ascii_mbtowc+0x16>
 801881c:	f06f 0001 	mvn.w	r0, #1
 8018820:	e7f8      	b.n	8018814 <__ascii_mbtowc+0x16>
	...

08018824 <_Balloc>:
 8018824:	b570      	push	{r4, r5, r6, lr}
 8018826:	69c6      	ldr	r6, [r0, #28]
 8018828:	4604      	mov	r4, r0
 801882a:	460d      	mov	r5, r1
 801882c:	b976      	cbnz	r6, 801884c <_Balloc+0x28>
 801882e:	2010      	movs	r0, #16
 8018830:	f7fd fe92 	bl	8016558 <malloc>
 8018834:	4602      	mov	r2, r0
 8018836:	61e0      	str	r0, [r4, #28]
 8018838:	b920      	cbnz	r0, 8018844 <_Balloc+0x20>
 801883a:	4b18      	ldr	r3, [pc, #96]	@ (801889c <_Balloc+0x78>)
 801883c:	4818      	ldr	r0, [pc, #96]	@ (80188a0 <_Balloc+0x7c>)
 801883e:	216b      	movs	r1, #107	@ 0x6b
 8018840:	f7ff fc3c 	bl	80180bc <__assert_func>
 8018844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018848:	6006      	str	r6, [r0, #0]
 801884a:	60c6      	str	r6, [r0, #12]
 801884c:	69e6      	ldr	r6, [r4, #28]
 801884e:	68f3      	ldr	r3, [r6, #12]
 8018850:	b183      	cbz	r3, 8018874 <_Balloc+0x50>
 8018852:	69e3      	ldr	r3, [r4, #28]
 8018854:	68db      	ldr	r3, [r3, #12]
 8018856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801885a:	b9b8      	cbnz	r0, 801888c <_Balloc+0x68>
 801885c:	2101      	movs	r1, #1
 801885e:	fa01 f605 	lsl.w	r6, r1, r5
 8018862:	1d72      	adds	r2, r6, #5
 8018864:	0092      	lsls	r2, r2, #2
 8018866:	4620      	mov	r0, r4
 8018868:	f001 fd05 	bl	801a276 <_calloc_r>
 801886c:	b160      	cbz	r0, 8018888 <_Balloc+0x64>
 801886e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018872:	e00e      	b.n	8018892 <_Balloc+0x6e>
 8018874:	2221      	movs	r2, #33	@ 0x21
 8018876:	2104      	movs	r1, #4
 8018878:	4620      	mov	r0, r4
 801887a:	f001 fcfc 	bl	801a276 <_calloc_r>
 801887e:	69e3      	ldr	r3, [r4, #28]
 8018880:	60f0      	str	r0, [r6, #12]
 8018882:	68db      	ldr	r3, [r3, #12]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d1e4      	bne.n	8018852 <_Balloc+0x2e>
 8018888:	2000      	movs	r0, #0
 801888a:	bd70      	pop	{r4, r5, r6, pc}
 801888c:	6802      	ldr	r2, [r0, #0]
 801888e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018892:	2300      	movs	r3, #0
 8018894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018898:	e7f7      	b.n	801888a <_Balloc+0x66>
 801889a:	bf00      	nop
 801889c:	0801a766 	.word	0x0801a766
 80188a0:	0801a88c 	.word	0x0801a88c

080188a4 <_Bfree>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	69c6      	ldr	r6, [r0, #28]
 80188a8:	4605      	mov	r5, r0
 80188aa:	460c      	mov	r4, r1
 80188ac:	b976      	cbnz	r6, 80188cc <_Bfree+0x28>
 80188ae:	2010      	movs	r0, #16
 80188b0:	f7fd fe52 	bl	8016558 <malloc>
 80188b4:	4602      	mov	r2, r0
 80188b6:	61e8      	str	r0, [r5, #28]
 80188b8:	b920      	cbnz	r0, 80188c4 <_Bfree+0x20>
 80188ba:	4b09      	ldr	r3, [pc, #36]	@ (80188e0 <_Bfree+0x3c>)
 80188bc:	4809      	ldr	r0, [pc, #36]	@ (80188e4 <_Bfree+0x40>)
 80188be:	218f      	movs	r1, #143	@ 0x8f
 80188c0:	f7ff fbfc 	bl	80180bc <__assert_func>
 80188c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188c8:	6006      	str	r6, [r0, #0]
 80188ca:	60c6      	str	r6, [r0, #12]
 80188cc:	b13c      	cbz	r4, 80188de <_Bfree+0x3a>
 80188ce:	69eb      	ldr	r3, [r5, #28]
 80188d0:	6862      	ldr	r2, [r4, #4]
 80188d2:	68db      	ldr	r3, [r3, #12]
 80188d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188d8:	6021      	str	r1, [r4, #0]
 80188da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80188de:	bd70      	pop	{r4, r5, r6, pc}
 80188e0:	0801a766 	.word	0x0801a766
 80188e4:	0801a88c 	.word	0x0801a88c

080188e8 <__multadd>:
 80188e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188ec:	690d      	ldr	r5, [r1, #16]
 80188ee:	4607      	mov	r7, r0
 80188f0:	460c      	mov	r4, r1
 80188f2:	461e      	mov	r6, r3
 80188f4:	f101 0c14 	add.w	ip, r1, #20
 80188f8:	2000      	movs	r0, #0
 80188fa:	f8dc 3000 	ldr.w	r3, [ip]
 80188fe:	b299      	uxth	r1, r3
 8018900:	fb02 6101 	mla	r1, r2, r1, r6
 8018904:	0c1e      	lsrs	r6, r3, #16
 8018906:	0c0b      	lsrs	r3, r1, #16
 8018908:	fb02 3306 	mla	r3, r2, r6, r3
 801890c:	b289      	uxth	r1, r1
 801890e:	3001      	adds	r0, #1
 8018910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018914:	4285      	cmp	r5, r0
 8018916:	f84c 1b04 	str.w	r1, [ip], #4
 801891a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801891e:	dcec      	bgt.n	80188fa <__multadd+0x12>
 8018920:	b30e      	cbz	r6, 8018966 <__multadd+0x7e>
 8018922:	68a3      	ldr	r3, [r4, #8]
 8018924:	42ab      	cmp	r3, r5
 8018926:	dc19      	bgt.n	801895c <__multadd+0x74>
 8018928:	6861      	ldr	r1, [r4, #4]
 801892a:	4638      	mov	r0, r7
 801892c:	3101      	adds	r1, #1
 801892e:	f7ff ff79 	bl	8018824 <_Balloc>
 8018932:	4680      	mov	r8, r0
 8018934:	b928      	cbnz	r0, 8018942 <__multadd+0x5a>
 8018936:	4602      	mov	r2, r0
 8018938:	4b0c      	ldr	r3, [pc, #48]	@ (801896c <__multadd+0x84>)
 801893a:	480d      	ldr	r0, [pc, #52]	@ (8018970 <__multadd+0x88>)
 801893c:	21ba      	movs	r1, #186	@ 0xba
 801893e:	f7ff fbbd 	bl	80180bc <__assert_func>
 8018942:	6922      	ldr	r2, [r4, #16]
 8018944:	3202      	adds	r2, #2
 8018946:	f104 010c 	add.w	r1, r4, #12
 801894a:	0092      	lsls	r2, r2, #2
 801894c:	300c      	adds	r0, #12
 801894e:	f7ff fb96 	bl	801807e <memcpy>
 8018952:	4621      	mov	r1, r4
 8018954:	4638      	mov	r0, r7
 8018956:	f7ff ffa5 	bl	80188a4 <_Bfree>
 801895a:	4644      	mov	r4, r8
 801895c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018960:	3501      	adds	r5, #1
 8018962:	615e      	str	r6, [r3, #20]
 8018964:	6125      	str	r5, [r4, #16]
 8018966:	4620      	mov	r0, r4
 8018968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801896c:	0801a81b 	.word	0x0801a81b
 8018970:	0801a88c 	.word	0x0801a88c

08018974 <__s2b>:
 8018974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018978:	460c      	mov	r4, r1
 801897a:	4615      	mov	r5, r2
 801897c:	461f      	mov	r7, r3
 801897e:	2209      	movs	r2, #9
 8018980:	3308      	adds	r3, #8
 8018982:	4606      	mov	r6, r0
 8018984:	fb93 f3f2 	sdiv	r3, r3, r2
 8018988:	2100      	movs	r1, #0
 801898a:	2201      	movs	r2, #1
 801898c:	429a      	cmp	r2, r3
 801898e:	db09      	blt.n	80189a4 <__s2b+0x30>
 8018990:	4630      	mov	r0, r6
 8018992:	f7ff ff47 	bl	8018824 <_Balloc>
 8018996:	b940      	cbnz	r0, 80189aa <__s2b+0x36>
 8018998:	4602      	mov	r2, r0
 801899a:	4b19      	ldr	r3, [pc, #100]	@ (8018a00 <__s2b+0x8c>)
 801899c:	4819      	ldr	r0, [pc, #100]	@ (8018a04 <__s2b+0x90>)
 801899e:	21d3      	movs	r1, #211	@ 0xd3
 80189a0:	f7ff fb8c 	bl	80180bc <__assert_func>
 80189a4:	0052      	lsls	r2, r2, #1
 80189a6:	3101      	adds	r1, #1
 80189a8:	e7f0      	b.n	801898c <__s2b+0x18>
 80189aa:	9b08      	ldr	r3, [sp, #32]
 80189ac:	6143      	str	r3, [r0, #20]
 80189ae:	2d09      	cmp	r5, #9
 80189b0:	f04f 0301 	mov.w	r3, #1
 80189b4:	6103      	str	r3, [r0, #16]
 80189b6:	dd16      	ble.n	80189e6 <__s2b+0x72>
 80189b8:	f104 0909 	add.w	r9, r4, #9
 80189bc:	46c8      	mov	r8, r9
 80189be:	442c      	add	r4, r5
 80189c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80189c4:	4601      	mov	r1, r0
 80189c6:	3b30      	subs	r3, #48	@ 0x30
 80189c8:	220a      	movs	r2, #10
 80189ca:	4630      	mov	r0, r6
 80189cc:	f7ff ff8c 	bl	80188e8 <__multadd>
 80189d0:	45a0      	cmp	r8, r4
 80189d2:	d1f5      	bne.n	80189c0 <__s2b+0x4c>
 80189d4:	f1a5 0408 	sub.w	r4, r5, #8
 80189d8:	444c      	add	r4, r9
 80189da:	1b2d      	subs	r5, r5, r4
 80189dc:	1963      	adds	r3, r4, r5
 80189de:	42bb      	cmp	r3, r7
 80189e0:	db04      	blt.n	80189ec <__s2b+0x78>
 80189e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189e6:	340a      	adds	r4, #10
 80189e8:	2509      	movs	r5, #9
 80189ea:	e7f6      	b.n	80189da <__s2b+0x66>
 80189ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189f0:	4601      	mov	r1, r0
 80189f2:	3b30      	subs	r3, #48	@ 0x30
 80189f4:	220a      	movs	r2, #10
 80189f6:	4630      	mov	r0, r6
 80189f8:	f7ff ff76 	bl	80188e8 <__multadd>
 80189fc:	e7ee      	b.n	80189dc <__s2b+0x68>
 80189fe:	bf00      	nop
 8018a00:	0801a81b 	.word	0x0801a81b
 8018a04:	0801a88c 	.word	0x0801a88c

08018a08 <__hi0bits>:
 8018a08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	bf36      	itet	cc
 8018a10:	0403      	lslcc	r3, r0, #16
 8018a12:	2000      	movcs	r0, #0
 8018a14:	2010      	movcc	r0, #16
 8018a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018a1a:	bf3c      	itt	cc
 8018a1c:	021b      	lslcc	r3, r3, #8
 8018a1e:	3008      	addcc	r0, #8
 8018a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018a24:	bf3c      	itt	cc
 8018a26:	011b      	lslcc	r3, r3, #4
 8018a28:	3004      	addcc	r0, #4
 8018a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018a2e:	bf3c      	itt	cc
 8018a30:	009b      	lslcc	r3, r3, #2
 8018a32:	3002      	addcc	r0, #2
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	db05      	blt.n	8018a44 <__hi0bits+0x3c>
 8018a38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018a3c:	f100 0001 	add.w	r0, r0, #1
 8018a40:	bf08      	it	eq
 8018a42:	2020      	moveq	r0, #32
 8018a44:	4770      	bx	lr

08018a46 <__lo0bits>:
 8018a46:	6803      	ldr	r3, [r0, #0]
 8018a48:	4602      	mov	r2, r0
 8018a4a:	f013 0007 	ands.w	r0, r3, #7
 8018a4e:	d00b      	beq.n	8018a68 <__lo0bits+0x22>
 8018a50:	07d9      	lsls	r1, r3, #31
 8018a52:	d421      	bmi.n	8018a98 <__lo0bits+0x52>
 8018a54:	0798      	lsls	r0, r3, #30
 8018a56:	bf49      	itett	mi
 8018a58:	085b      	lsrmi	r3, r3, #1
 8018a5a:	089b      	lsrpl	r3, r3, #2
 8018a5c:	2001      	movmi	r0, #1
 8018a5e:	6013      	strmi	r3, [r2, #0]
 8018a60:	bf5c      	itt	pl
 8018a62:	6013      	strpl	r3, [r2, #0]
 8018a64:	2002      	movpl	r0, #2
 8018a66:	4770      	bx	lr
 8018a68:	b299      	uxth	r1, r3
 8018a6a:	b909      	cbnz	r1, 8018a70 <__lo0bits+0x2a>
 8018a6c:	0c1b      	lsrs	r3, r3, #16
 8018a6e:	2010      	movs	r0, #16
 8018a70:	b2d9      	uxtb	r1, r3
 8018a72:	b909      	cbnz	r1, 8018a78 <__lo0bits+0x32>
 8018a74:	3008      	adds	r0, #8
 8018a76:	0a1b      	lsrs	r3, r3, #8
 8018a78:	0719      	lsls	r1, r3, #28
 8018a7a:	bf04      	itt	eq
 8018a7c:	091b      	lsreq	r3, r3, #4
 8018a7e:	3004      	addeq	r0, #4
 8018a80:	0799      	lsls	r1, r3, #30
 8018a82:	bf04      	itt	eq
 8018a84:	089b      	lsreq	r3, r3, #2
 8018a86:	3002      	addeq	r0, #2
 8018a88:	07d9      	lsls	r1, r3, #31
 8018a8a:	d403      	bmi.n	8018a94 <__lo0bits+0x4e>
 8018a8c:	085b      	lsrs	r3, r3, #1
 8018a8e:	f100 0001 	add.w	r0, r0, #1
 8018a92:	d003      	beq.n	8018a9c <__lo0bits+0x56>
 8018a94:	6013      	str	r3, [r2, #0]
 8018a96:	4770      	bx	lr
 8018a98:	2000      	movs	r0, #0
 8018a9a:	4770      	bx	lr
 8018a9c:	2020      	movs	r0, #32
 8018a9e:	4770      	bx	lr

08018aa0 <__i2b>:
 8018aa0:	b510      	push	{r4, lr}
 8018aa2:	460c      	mov	r4, r1
 8018aa4:	2101      	movs	r1, #1
 8018aa6:	f7ff febd 	bl	8018824 <_Balloc>
 8018aaa:	4602      	mov	r2, r0
 8018aac:	b928      	cbnz	r0, 8018aba <__i2b+0x1a>
 8018aae:	4b05      	ldr	r3, [pc, #20]	@ (8018ac4 <__i2b+0x24>)
 8018ab0:	4805      	ldr	r0, [pc, #20]	@ (8018ac8 <__i2b+0x28>)
 8018ab2:	f240 1145 	movw	r1, #325	@ 0x145
 8018ab6:	f7ff fb01 	bl	80180bc <__assert_func>
 8018aba:	2301      	movs	r3, #1
 8018abc:	6144      	str	r4, [r0, #20]
 8018abe:	6103      	str	r3, [r0, #16]
 8018ac0:	bd10      	pop	{r4, pc}
 8018ac2:	bf00      	nop
 8018ac4:	0801a81b 	.word	0x0801a81b
 8018ac8:	0801a88c 	.word	0x0801a88c

08018acc <__multiply>:
 8018acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad0:	4614      	mov	r4, r2
 8018ad2:	690a      	ldr	r2, [r1, #16]
 8018ad4:	6923      	ldr	r3, [r4, #16]
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	bfa8      	it	ge
 8018ada:	4623      	movge	r3, r4
 8018adc:	460f      	mov	r7, r1
 8018ade:	bfa4      	itt	ge
 8018ae0:	460c      	movge	r4, r1
 8018ae2:	461f      	movge	r7, r3
 8018ae4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018ae8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018aec:	68a3      	ldr	r3, [r4, #8]
 8018aee:	6861      	ldr	r1, [r4, #4]
 8018af0:	eb0a 0609 	add.w	r6, sl, r9
 8018af4:	42b3      	cmp	r3, r6
 8018af6:	b085      	sub	sp, #20
 8018af8:	bfb8      	it	lt
 8018afa:	3101      	addlt	r1, #1
 8018afc:	f7ff fe92 	bl	8018824 <_Balloc>
 8018b00:	b930      	cbnz	r0, 8018b10 <__multiply+0x44>
 8018b02:	4602      	mov	r2, r0
 8018b04:	4b44      	ldr	r3, [pc, #272]	@ (8018c18 <__multiply+0x14c>)
 8018b06:	4845      	ldr	r0, [pc, #276]	@ (8018c1c <__multiply+0x150>)
 8018b08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018b0c:	f7ff fad6 	bl	80180bc <__assert_func>
 8018b10:	f100 0514 	add.w	r5, r0, #20
 8018b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018b18:	462b      	mov	r3, r5
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	4543      	cmp	r3, r8
 8018b1e:	d321      	bcc.n	8018b64 <__multiply+0x98>
 8018b20:	f107 0114 	add.w	r1, r7, #20
 8018b24:	f104 0214 	add.w	r2, r4, #20
 8018b28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018b2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018b30:	9302      	str	r3, [sp, #8]
 8018b32:	1b13      	subs	r3, r2, r4
 8018b34:	3b15      	subs	r3, #21
 8018b36:	f023 0303 	bic.w	r3, r3, #3
 8018b3a:	3304      	adds	r3, #4
 8018b3c:	f104 0715 	add.w	r7, r4, #21
 8018b40:	42ba      	cmp	r2, r7
 8018b42:	bf38      	it	cc
 8018b44:	2304      	movcc	r3, #4
 8018b46:	9301      	str	r3, [sp, #4]
 8018b48:	9b02      	ldr	r3, [sp, #8]
 8018b4a:	9103      	str	r1, [sp, #12]
 8018b4c:	428b      	cmp	r3, r1
 8018b4e:	d80c      	bhi.n	8018b6a <__multiply+0x9e>
 8018b50:	2e00      	cmp	r6, #0
 8018b52:	dd03      	ble.n	8018b5c <__multiply+0x90>
 8018b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d05b      	beq.n	8018c14 <__multiply+0x148>
 8018b5c:	6106      	str	r6, [r0, #16]
 8018b5e:	b005      	add	sp, #20
 8018b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b64:	f843 2b04 	str.w	r2, [r3], #4
 8018b68:	e7d8      	b.n	8018b1c <__multiply+0x50>
 8018b6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8018b6e:	f1ba 0f00 	cmp.w	sl, #0
 8018b72:	d024      	beq.n	8018bbe <__multiply+0xf2>
 8018b74:	f104 0e14 	add.w	lr, r4, #20
 8018b78:	46a9      	mov	r9, r5
 8018b7a:	f04f 0c00 	mov.w	ip, #0
 8018b7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018b82:	f8d9 3000 	ldr.w	r3, [r9]
 8018b86:	fa1f fb87 	uxth.w	fp, r7
 8018b8a:	b29b      	uxth	r3, r3
 8018b8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018b90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018b94:	f8d9 7000 	ldr.w	r7, [r9]
 8018b98:	4463      	add	r3, ip
 8018b9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018b9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8018ba2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018bac:	4572      	cmp	r2, lr
 8018bae:	f849 3b04 	str.w	r3, [r9], #4
 8018bb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018bb6:	d8e2      	bhi.n	8018b7e <__multiply+0xb2>
 8018bb8:	9b01      	ldr	r3, [sp, #4]
 8018bba:	f845 c003 	str.w	ip, [r5, r3]
 8018bbe:	9b03      	ldr	r3, [sp, #12]
 8018bc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018bc4:	3104      	adds	r1, #4
 8018bc6:	f1b9 0f00 	cmp.w	r9, #0
 8018bca:	d021      	beq.n	8018c10 <__multiply+0x144>
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	f104 0c14 	add.w	ip, r4, #20
 8018bd2:	46ae      	mov	lr, r5
 8018bd4:	f04f 0a00 	mov.w	sl, #0
 8018bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8018bdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018be0:	fb09 770b 	mla	r7, r9, fp, r7
 8018be4:	4457      	add	r7, sl
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018bec:	f84e 3b04 	str.w	r3, [lr], #4
 8018bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018bf8:	f8be 3000 	ldrh.w	r3, [lr]
 8018bfc:	fb09 330a 	mla	r3, r9, sl, r3
 8018c00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018c04:	4562      	cmp	r2, ip
 8018c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018c0a:	d8e5      	bhi.n	8018bd8 <__multiply+0x10c>
 8018c0c:	9f01      	ldr	r7, [sp, #4]
 8018c0e:	51eb      	str	r3, [r5, r7]
 8018c10:	3504      	adds	r5, #4
 8018c12:	e799      	b.n	8018b48 <__multiply+0x7c>
 8018c14:	3e01      	subs	r6, #1
 8018c16:	e79b      	b.n	8018b50 <__multiply+0x84>
 8018c18:	0801a81b 	.word	0x0801a81b
 8018c1c:	0801a88c 	.word	0x0801a88c

08018c20 <__pow5mult>:
 8018c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c24:	4615      	mov	r5, r2
 8018c26:	f012 0203 	ands.w	r2, r2, #3
 8018c2a:	4607      	mov	r7, r0
 8018c2c:	460e      	mov	r6, r1
 8018c2e:	d007      	beq.n	8018c40 <__pow5mult+0x20>
 8018c30:	4c25      	ldr	r4, [pc, #148]	@ (8018cc8 <__pow5mult+0xa8>)
 8018c32:	3a01      	subs	r2, #1
 8018c34:	2300      	movs	r3, #0
 8018c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c3a:	f7ff fe55 	bl	80188e8 <__multadd>
 8018c3e:	4606      	mov	r6, r0
 8018c40:	10ad      	asrs	r5, r5, #2
 8018c42:	d03d      	beq.n	8018cc0 <__pow5mult+0xa0>
 8018c44:	69fc      	ldr	r4, [r7, #28]
 8018c46:	b97c      	cbnz	r4, 8018c68 <__pow5mult+0x48>
 8018c48:	2010      	movs	r0, #16
 8018c4a:	f7fd fc85 	bl	8016558 <malloc>
 8018c4e:	4602      	mov	r2, r0
 8018c50:	61f8      	str	r0, [r7, #28]
 8018c52:	b928      	cbnz	r0, 8018c60 <__pow5mult+0x40>
 8018c54:	4b1d      	ldr	r3, [pc, #116]	@ (8018ccc <__pow5mult+0xac>)
 8018c56:	481e      	ldr	r0, [pc, #120]	@ (8018cd0 <__pow5mult+0xb0>)
 8018c58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018c5c:	f7ff fa2e 	bl	80180bc <__assert_func>
 8018c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c64:	6004      	str	r4, [r0, #0]
 8018c66:	60c4      	str	r4, [r0, #12]
 8018c68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c70:	b94c      	cbnz	r4, 8018c86 <__pow5mult+0x66>
 8018c72:	f240 2171 	movw	r1, #625	@ 0x271
 8018c76:	4638      	mov	r0, r7
 8018c78:	f7ff ff12 	bl	8018aa0 <__i2b>
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c82:	4604      	mov	r4, r0
 8018c84:	6003      	str	r3, [r0, #0]
 8018c86:	f04f 0900 	mov.w	r9, #0
 8018c8a:	07eb      	lsls	r3, r5, #31
 8018c8c:	d50a      	bpl.n	8018ca4 <__pow5mult+0x84>
 8018c8e:	4631      	mov	r1, r6
 8018c90:	4622      	mov	r2, r4
 8018c92:	4638      	mov	r0, r7
 8018c94:	f7ff ff1a 	bl	8018acc <__multiply>
 8018c98:	4631      	mov	r1, r6
 8018c9a:	4680      	mov	r8, r0
 8018c9c:	4638      	mov	r0, r7
 8018c9e:	f7ff fe01 	bl	80188a4 <_Bfree>
 8018ca2:	4646      	mov	r6, r8
 8018ca4:	106d      	asrs	r5, r5, #1
 8018ca6:	d00b      	beq.n	8018cc0 <__pow5mult+0xa0>
 8018ca8:	6820      	ldr	r0, [r4, #0]
 8018caa:	b938      	cbnz	r0, 8018cbc <__pow5mult+0x9c>
 8018cac:	4622      	mov	r2, r4
 8018cae:	4621      	mov	r1, r4
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	f7ff ff0b 	bl	8018acc <__multiply>
 8018cb6:	6020      	str	r0, [r4, #0]
 8018cb8:	f8c0 9000 	str.w	r9, [r0]
 8018cbc:	4604      	mov	r4, r0
 8018cbe:	e7e4      	b.n	8018c8a <__pow5mult+0x6a>
 8018cc0:	4630      	mov	r0, r6
 8018cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cc6:	bf00      	nop
 8018cc8:	0801a8e8 	.word	0x0801a8e8
 8018ccc:	0801a766 	.word	0x0801a766
 8018cd0:	0801a88c 	.word	0x0801a88c

08018cd4 <__lshift>:
 8018cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd8:	460c      	mov	r4, r1
 8018cda:	6849      	ldr	r1, [r1, #4]
 8018cdc:	6923      	ldr	r3, [r4, #16]
 8018cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018ce2:	68a3      	ldr	r3, [r4, #8]
 8018ce4:	4607      	mov	r7, r0
 8018ce6:	4691      	mov	r9, r2
 8018ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cec:	f108 0601 	add.w	r6, r8, #1
 8018cf0:	42b3      	cmp	r3, r6
 8018cf2:	db0b      	blt.n	8018d0c <__lshift+0x38>
 8018cf4:	4638      	mov	r0, r7
 8018cf6:	f7ff fd95 	bl	8018824 <_Balloc>
 8018cfa:	4605      	mov	r5, r0
 8018cfc:	b948      	cbnz	r0, 8018d12 <__lshift+0x3e>
 8018cfe:	4602      	mov	r2, r0
 8018d00:	4b28      	ldr	r3, [pc, #160]	@ (8018da4 <__lshift+0xd0>)
 8018d02:	4829      	ldr	r0, [pc, #164]	@ (8018da8 <__lshift+0xd4>)
 8018d04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018d08:	f7ff f9d8 	bl	80180bc <__assert_func>
 8018d0c:	3101      	adds	r1, #1
 8018d0e:	005b      	lsls	r3, r3, #1
 8018d10:	e7ee      	b.n	8018cf0 <__lshift+0x1c>
 8018d12:	2300      	movs	r3, #0
 8018d14:	f100 0114 	add.w	r1, r0, #20
 8018d18:	f100 0210 	add.w	r2, r0, #16
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	4553      	cmp	r3, sl
 8018d20:	db33      	blt.n	8018d8a <__lshift+0xb6>
 8018d22:	6920      	ldr	r0, [r4, #16]
 8018d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d28:	f104 0314 	add.w	r3, r4, #20
 8018d2c:	f019 091f 	ands.w	r9, r9, #31
 8018d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d38:	d02b      	beq.n	8018d92 <__lshift+0xbe>
 8018d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8018d3e:	468a      	mov	sl, r1
 8018d40:	2200      	movs	r2, #0
 8018d42:	6818      	ldr	r0, [r3, #0]
 8018d44:	fa00 f009 	lsl.w	r0, r0, r9
 8018d48:	4310      	orrs	r0, r2
 8018d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8018d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d52:	459c      	cmp	ip, r3
 8018d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8018d58:	d8f3      	bhi.n	8018d42 <__lshift+0x6e>
 8018d5a:	ebac 0304 	sub.w	r3, ip, r4
 8018d5e:	3b15      	subs	r3, #21
 8018d60:	f023 0303 	bic.w	r3, r3, #3
 8018d64:	3304      	adds	r3, #4
 8018d66:	f104 0015 	add.w	r0, r4, #21
 8018d6a:	4584      	cmp	ip, r0
 8018d6c:	bf38      	it	cc
 8018d6e:	2304      	movcc	r3, #4
 8018d70:	50ca      	str	r2, [r1, r3]
 8018d72:	b10a      	cbz	r2, 8018d78 <__lshift+0xa4>
 8018d74:	f108 0602 	add.w	r6, r8, #2
 8018d78:	3e01      	subs	r6, #1
 8018d7a:	4638      	mov	r0, r7
 8018d7c:	612e      	str	r6, [r5, #16]
 8018d7e:	4621      	mov	r1, r4
 8018d80:	f7ff fd90 	bl	80188a4 <_Bfree>
 8018d84:	4628      	mov	r0, r5
 8018d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d8e:	3301      	adds	r3, #1
 8018d90:	e7c5      	b.n	8018d1e <__lshift+0x4a>
 8018d92:	3904      	subs	r1, #4
 8018d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d9c:	459c      	cmp	ip, r3
 8018d9e:	d8f9      	bhi.n	8018d94 <__lshift+0xc0>
 8018da0:	e7ea      	b.n	8018d78 <__lshift+0xa4>
 8018da2:	bf00      	nop
 8018da4:	0801a81b 	.word	0x0801a81b
 8018da8:	0801a88c 	.word	0x0801a88c

08018dac <__mcmp>:
 8018dac:	690a      	ldr	r2, [r1, #16]
 8018dae:	4603      	mov	r3, r0
 8018db0:	6900      	ldr	r0, [r0, #16]
 8018db2:	1a80      	subs	r0, r0, r2
 8018db4:	b530      	push	{r4, r5, lr}
 8018db6:	d10e      	bne.n	8018dd6 <__mcmp+0x2a>
 8018db8:	3314      	adds	r3, #20
 8018dba:	3114      	adds	r1, #20
 8018dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018dcc:	4295      	cmp	r5, r2
 8018dce:	d003      	beq.n	8018dd8 <__mcmp+0x2c>
 8018dd0:	d205      	bcs.n	8018dde <__mcmp+0x32>
 8018dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8018dd6:	bd30      	pop	{r4, r5, pc}
 8018dd8:	42a3      	cmp	r3, r4
 8018dda:	d3f3      	bcc.n	8018dc4 <__mcmp+0x18>
 8018ddc:	e7fb      	b.n	8018dd6 <__mcmp+0x2a>
 8018dde:	2001      	movs	r0, #1
 8018de0:	e7f9      	b.n	8018dd6 <__mcmp+0x2a>
	...

08018de4 <__mdiff>:
 8018de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de8:	4689      	mov	r9, r1
 8018dea:	4606      	mov	r6, r0
 8018dec:	4611      	mov	r1, r2
 8018dee:	4648      	mov	r0, r9
 8018df0:	4614      	mov	r4, r2
 8018df2:	f7ff ffdb 	bl	8018dac <__mcmp>
 8018df6:	1e05      	subs	r5, r0, #0
 8018df8:	d112      	bne.n	8018e20 <__mdiff+0x3c>
 8018dfa:	4629      	mov	r1, r5
 8018dfc:	4630      	mov	r0, r6
 8018dfe:	f7ff fd11 	bl	8018824 <_Balloc>
 8018e02:	4602      	mov	r2, r0
 8018e04:	b928      	cbnz	r0, 8018e12 <__mdiff+0x2e>
 8018e06:	4b3f      	ldr	r3, [pc, #252]	@ (8018f04 <__mdiff+0x120>)
 8018e08:	f240 2137 	movw	r1, #567	@ 0x237
 8018e0c:	483e      	ldr	r0, [pc, #248]	@ (8018f08 <__mdiff+0x124>)
 8018e0e:	f7ff f955 	bl	80180bc <__assert_func>
 8018e12:	2301      	movs	r3, #1
 8018e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018e18:	4610      	mov	r0, r2
 8018e1a:	b003      	add	sp, #12
 8018e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e20:	bfbc      	itt	lt
 8018e22:	464b      	movlt	r3, r9
 8018e24:	46a1      	movlt	r9, r4
 8018e26:	4630      	mov	r0, r6
 8018e28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018e2c:	bfba      	itte	lt
 8018e2e:	461c      	movlt	r4, r3
 8018e30:	2501      	movlt	r5, #1
 8018e32:	2500      	movge	r5, #0
 8018e34:	f7ff fcf6 	bl	8018824 <_Balloc>
 8018e38:	4602      	mov	r2, r0
 8018e3a:	b918      	cbnz	r0, 8018e44 <__mdiff+0x60>
 8018e3c:	4b31      	ldr	r3, [pc, #196]	@ (8018f04 <__mdiff+0x120>)
 8018e3e:	f240 2145 	movw	r1, #581	@ 0x245
 8018e42:	e7e3      	b.n	8018e0c <__mdiff+0x28>
 8018e44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018e48:	6926      	ldr	r6, [r4, #16]
 8018e4a:	60c5      	str	r5, [r0, #12]
 8018e4c:	f109 0310 	add.w	r3, r9, #16
 8018e50:	f109 0514 	add.w	r5, r9, #20
 8018e54:	f104 0e14 	add.w	lr, r4, #20
 8018e58:	f100 0b14 	add.w	fp, r0, #20
 8018e5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018e60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018e64:	9301      	str	r3, [sp, #4]
 8018e66:	46d9      	mov	r9, fp
 8018e68:	f04f 0c00 	mov.w	ip, #0
 8018e6c:	9b01      	ldr	r3, [sp, #4]
 8018e6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018e72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018e76:	9301      	str	r3, [sp, #4]
 8018e78:	fa1f f38a 	uxth.w	r3, sl
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	b283      	uxth	r3, r0
 8018e80:	1acb      	subs	r3, r1, r3
 8018e82:	0c00      	lsrs	r0, r0, #16
 8018e84:	4463      	add	r3, ip
 8018e86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018e8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018e94:	4576      	cmp	r6, lr
 8018e96:	f849 3b04 	str.w	r3, [r9], #4
 8018e9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018e9e:	d8e5      	bhi.n	8018e6c <__mdiff+0x88>
 8018ea0:	1b33      	subs	r3, r6, r4
 8018ea2:	3b15      	subs	r3, #21
 8018ea4:	f023 0303 	bic.w	r3, r3, #3
 8018ea8:	3415      	adds	r4, #21
 8018eaa:	3304      	adds	r3, #4
 8018eac:	42a6      	cmp	r6, r4
 8018eae:	bf38      	it	cc
 8018eb0:	2304      	movcc	r3, #4
 8018eb2:	441d      	add	r5, r3
 8018eb4:	445b      	add	r3, fp
 8018eb6:	461e      	mov	r6, r3
 8018eb8:	462c      	mov	r4, r5
 8018eba:	4544      	cmp	r4, r8
 8018ebc:	d30e      	bcc.n	8018edc <__mdiff+0xf8>
 8018ebe:	f108 0103 	add.w	r1, r8, #3
 8018ec2:	1b49      	subs	r1, r1, r5
 8018ec4:	f021 0103 	bic.w	r1, r1, #3
 8018ec8:	3d03      	subs	r5, #3
 8018eca:	45a8      	cmp	r8, r5
 8018ecc:	bf38      	it	cc
 8018ece:	2100      	movcc	r1, #0
 8018ed0:	440b      	add	r3, r1
 8018ed2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ed6:	b191      	cbz	r1, 8018efe <__mdiff+0x11a>
 8018ed8:	6117      	str	r7, [r2, #16]
 8018eda:	e79d      	b.n	8018e18 <__mdiff+0x34>
 8018edc:	f854 1b04 	ldr.w	r1, [r4], #4
 8018ee0:	46e6      	mov	lr, ip
 8018ee2:	0c08      	lsrs	r0, r1, #16
 8018ee4:	fa1c fc81 	uxtah	ip, ip, r1
 8018ee8:	4471      	add	r1, lr
 8018eea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018eee:	b289      	uxth	r1, r1
 8018ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018ef4:	f846 1b04 	str.w	r1, [r6], #4
 8018ef8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018efc:	e7dd      	b.n	8018eba <__mdiff+0xd6>
 8018efe:	3f01      	subs	r7, #1
 8018f00:	e7e7      	b.n	8018ed2 <__mdiff+0xee>
 8018f02:	bf00      	nop
 8018f04:	0801a81b 	.word	0x0801a81b
 8018f08:	0801a88c 	.word	0x0801a88c

08018f0c <__ulp>:
 8018f0c:	b082      	sub	sp, #8
 8018f0e:	ed8d 0b00 	vstr	d0, [sp]
 8018f12:	9a01      	ldr	r2, [sp, #4]
 8018f14:	4b0f      	ldr	r3, [pc, #60]	@ (8018f54 <__ulp+0x48>)
 8018f16:	4013      	ands	r3, r2
 8018f18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	dc08      	bgt.n	8018f32 <__ulp+0x26>
 8018f20:	425b      	negs	r3, r3
 8018f22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018f26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018f2a:	da04      	bge.n	8018f36 <__ulp+0x2a>
 8018f2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018f30:	4113      	asrs	r3, r2
 8018f32:	2200      	movs	r2, #0
 8018f34:	e008      	b.n	8018f48 <__ulp+0x3c>
 8018f36:	f1a2 0314 	sub.w	r3, r2, #20
 8018f3a:	2b1e      	cmp	r3, #30
 8018f3c:	bfda      	itte	le
 8018f3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018f42:	40da      	lsrle	r2, r3
 8018f44:	2201      	movgt	r2, #1
 8018f46:	2300      	movs	r3, #0
 8018f48:	4619      	mov	r1, r3
 8018f4a:	4610      	mov	r0, r2
 8018f4c:	ec41 0b10 	vmov	d0, r0, r1
 8018f50:	b002      	add	sp, #8
 8018f52:	4770      	bx	lr
 8018f54:	7ff00000 	.word	0x7ff00000

08018f58 <__b2d>:
 8018f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f5c:	6906      	ldr	r6, [r0, #16]
 8018f5e:	f100 0814 	add.w	r8, r0, #20
 8018f62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018f66:	1f37      	subs	r7, r6, #4
 8018f68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018f6c:	4610      	mov	r0, r2
 8018f6e:	f7ff fd4b 	bl	8018a08 <__hi0bits>
 8018f72:	f1c0 0320 	rsb	r3, r0, #32
 8018f76:	280a      	cmp	r0, #10
 8018f78:	600b      	str	r3, [r1, #0]
 8018f7a:	491b      	ldr	r1, [pc, #108]	@ (8018fe8 <__b2d+0x90>)
 8018f7c:	dc15      	bgt.n	8018faa <__b2d+0x52>
 8018f7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8018f82:	fa22 f30c 	lsr.w	r3, r2, ip
 8018f86:	45b8      	cmp	r8, r7
 8018f88:	ea43 0501 	orr.w	r5, r3, r1
 8018f8c:	bf34      	ite	cc
 8018f8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018f92:	2300      	movcs	r3, #0
 8018f94:	3015      	adds	r0, #21
 8018f96:	fa02 f000 	lsl.w	r0, r2, r0
 8018f9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8018f9e:	4303      	orrs	r3, r0
 8018fa0:	461c      	mov	r4, r3
 8018fa2:	ec45 4b10 	vmov	d0, r4, r5
 8018fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018faa:	45b8      	cmp	r8, r7
 8018fac:	bf3a      	itte	cc
 8018fae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018fb2:	f1a6 0708 	subcc.w	r7, r6, #8
 8018fb6:	2300      	movcs	r3, #0
 8018fb8:	380b      	subs	r0, #11
 8018fba:	d012      	beq.n	8018fe2 <__b2d+0x8a>
 8018fbc:	f1c0 0120 	rsb	r1, r0, #32
 8018fc0:	fa23 f401 	lsr.w	r4, r3, r1
 8018fc4:	4082      	lsls	r2, r0
 8018fc6:	4322      	orrs	r2, r4
 8018fc8:	4547      	cmp	r7, r8
 8018fca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018fce:	bf8c      	ite	hi
 8018fd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018fd4:	2200      	movls	r2, #0
 8018fd6:	4083      	lsls	r3, r0
 8018fd8:	40ca      	lsrs	r2, r1
 8018fda:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018fde:	4313      	orrs	r3, r2
 8018fe0:	e7de      	b.n	8018fa0 <__b2d+0x48>
 8018fe2:	ea42 0501 	orr.w	r5, r2, r1
 8018fe6:	e7db      	b.n	8018fa0 <__b2d+0x48>
 8018fe8:	3ff00000 	.word	0x3ff00000

08018fec <__d2b>:
 8018fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ff0:	460f      	mov	r7, r1
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	ec59 8b10 	vmov	r8, r9, d0
 8018ff8:	4616      	mov	r6, r2
 8018ffa:	f7ff fc13 	bl	8018824 <_Balloc>
 8018ffe:	4604      	mov	r4, r0
 8019000:	b930      	cbnz	r0, 8019010 <__d2b+0x24>
 8019002:	4602      	mov	r2, r0
 8019004:	4b23      	ldr	r3, [pc, #140]	@ (8019094 <__d2b+0xa8>)
 8019006:	4824      	ldr	r0, [pc, #144]	@ (8019098 <__d2b+0xac>)
 8019008:	f240 310f 	movw	r1, #783	@ 0x30f
 801900c:	f7ff f856 	bl	80180bc <__assert_func>
 8019010:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019018:	b10d      	cbz	r5, 801901e <__d2b+0x32>
 801901a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801901e:	9301      	str	r3, [sp, #4]
 8019020:	f1b8 0300 	subs.w	r3, r8, #0
 8019024:	d023      	beq.n	801906e <__d2b+0x82>
 8019026:	4668      	mov	r0, sp
 8019028:	9300      	str	r3, [sp, #0]
 801902a:	f7ff fd0c 	bl	8018a46 <__lo0bits>
 801902e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019032:	b1d0      	cbz	r0, 801906a <__d2b+0x7e>
 8019034:	f1c0 0320 	rsb	r3, r0, #32
 8019038:	fa02 f303 	lsl.w	r3, r2, r3
 801903c:	430b      	orrs	r3, r1
 801903e:	40c2      	lsrs	r2, r0
 8019040:	6163      	str	r3, [r4, #20]
 8019042:	9201      	str	r2, [sp, #4]
 8019044:	9b01      	ldr	r3, [sp, #4]
 8019046:	61a3      	str	r3, [r4, #24]
 8019048:	2b00      	cmp	r3, #0
 801904a:	bf0c      	ite	eq
 801904c:	2201      	moveq	r2, #1
 801904e:	2202      	movne	r2, #2
 8019050:	6122      	str	r2, [r4, #16]
 8019052:	b1a5      	cbz	r5, 801907e <__d2b+0x92>
 8019054:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019058:	4405      	add	r5, r0
 801905a:	603d      	str	r5, [r7, #0]
 801905c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019060:	6030      	str	r0, [r6, #0]
 8019062:	4620      	mov	r0, r4
 8019064:	b003      	add	sp, #12
 8019066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801906a:	6161      	str	r1, [r4, #20]
 801906c:	e7ea      	b.n	8019044 <__d2b+0x58>
 801906e:	a801      	add	r0, sp, #4
 8019070:	f7ff fce9 	bl	8018a46 <__lo0bits>
 8019074:	9b01      	ldr	r3, [sp, #4]
 8019076:	6163      	str	r3, [r4, #20]
 8019078:	3020      	adds	r0, #32
 801907a:	2201      	movs	r2, #1
 801907c:	e7e8      	b.n	8019050 <__d2b+0x64>
 801907e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019082:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019086:	6038      	str	r0, [r7, #0]
 8019088:	6918      	ldr	r0, [r3, #16]
 801908a:	f7ff fcbd 	bl	8018a08 <__hi0bits>
 801908e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019092:	e7e5      	b.n	8019060 <__d2b+0x74>
 8019094:	0801a81b 	.word	0x0801a81b
 8019098:	0801a88c 	.word	0x0801a88c

0801909c <__ratio>:
 801909c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	4688      	mov	r8, r1
 80190a2:	4669      	mov	r1, sp
 80190a4:	4681      	mov	r9, r0
 80190a6:	f7ff ff57 	bl	8018f58 <__b2d>
 80190aa:	a901      	add	r1, sp, #4
 80190ac:	4640      	mov	r0, r8
 80190ae:	ec55 4b10 	vmov	r4, r5, d0
 80190b2:	f7ff ff51 	bl	8018f58 <__b2d>
 80190b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80190ba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80190be:	1ad2      	subs	r2, r2, r3
 80190c0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80190c4:	1a5b      	subs	r3, r3, r1
 80190c6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80190ca:	ec57 6b10 	vmov	r6, r7, d0
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	bfd6      	itet	le
 80190d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80190d6:	462a      	movgt	r2, r5
 80190d8:	463a      	movle	r2, r7
 80190da:	46ab      	mov	fp, r5
 80190dc:	46a2      	mov	sl, r4
 80190de:	bfce      	itee	gt
 80190e0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80190e4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80190e8:	ee00 3a90 	vmovle	s1, r3
 80190ec:	ec4b ab17 	vmov	d7, sl, fp
 80190f0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80190f4:	b003      	add	sp, #12
 80190f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190fa <__copybits>:
 80190fa:	3901      	subs	r1, #1
 80190fc:	b570      	push	{r4, r5, r6, lr}
 80190fe:	1149      	asrs	r1, r1, #5
 8019100:	6914      	ldr	r4, [r2, #16]
 8019102:	3101      	adds	r1, #1
 8019104:	f102 0314 	add.w	r3, r2, #20
 8019108:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801910c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019110:	1f05      	subs	r5, r0, #4
 8019112:	42a3      	cmp	r3, r4
 8019114:	d30c      	bcc.n	8019130 <__copybits+0x36>
 8019116:	1aa3      	subs	r3, r4, r2
 8019118:	3b11      	subs	r3, #17
 801911a:	f023 0303 	bic.w	r3, r3, #3
 801911e:	3211      	adds	r2, #17
 8019120:	42a2      	cmp	r2, r4
 8019122:	bf88      	it	hi
 8019124:	2300      	movhi	r3, #0
 8019126:	4418      	add	r0, r3
 8019128:	2300      	movs	r3, #0
 801912a:	4288      	cmp	r0, r1
 801912c:	d305      	bcc.n	801913a <__copybits+0x40>
 801912e:	bd70      	pop	{r4, r5, r6, pc}
 8019130:	f853 6b04 	ldr.w	r6, [r3], #4
 8019134:	f845 6f04 	str.w	r6, [r5, #4]!
 8019138:	e7eb      	b.n	8019112 <__copybits+0x18>
 801913a:	f840 3b04 	str.w	r3, [r0], #4
 801913e:	e7f4      	b.n	801912a <__copybits+0x30>

08019140 <__any_on>:
 8019140:	f100 0214 	add.w	r2, r0, #20
 8019144:	6900      	ldr	r0, [r0, #16]
 8019146:	114b      	asrs	r3, r1, #5
 8019148:	4298      	cmp	r0, r3
 801914a:	b510      	push	{r4, lr}
 801914c:	db11      	blt.n	8019172 <__any_on+0x32>
 801914e:	dd0a      	ble.n	8019166 <__any_on+0x26>
 8019150:	f011 011f 	ands.w	r1, r1, #31
 8019154:	d007      	beq.n	8019166 <__any_on+0x26>
 8019156:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801915a:	fa24 f001 	lsr.w	r0, r4, r1
 801915e:	fa00 f101 	lsl.w	r1, r0, r1
 8019162:	428c      	cmp	r4, r1
 8019164:	d10b      	bne.n	801917e <__any_on+0x3e>
 8019166:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801916a:	4293      	cmp	r3, r2
 801916c:	d803      	bhi.n	8019176 <__any_on+0x36>
 801916e:	2000      	movs	r0, #0
 8019170:	bd10      	pop	{r4, pc}
 8019172:	4603      	mov	r3, r0
 8019174:	e7f7      	b.n	8019166 <__any_on+0x26>
 8019176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801917a:	2900      	cmp	r1, #0
 801917c:	d0f5      	beq.n	801916a <__any_on+0x2a>
 801917e:	2001      	movs	r0, #1
 8019180:	e7f6      	b.n	8019170 <__any_on+0x30>

08019182 <__ascii_wctomb>:
 8019182:	4603      	mov	r3, r0
 8019184:	4608      	mov	r0, r1
 8019186:	b141      	cbz	r1, 801919a <__ascii_wctomb+0x18>
 8019188:	2aff      	cmp	r2, #255	@ 0xff
 801918a:	d904      	bls.n	8019196 <__ascii_wctomb+0x14>
 801918c:	228a      	movs	r2, #138	@ 0x8a
 801918e:	601a      	str	r2, [r3, #0]
 8019190:	f04f 30ff 	mov.w	r0, #4294967295
 8019194:	4770      	bx	lr
 8019196:	700a      	strb	r2, [r1, #0]
 8019198:	2001      	movs	r0, #1
 801919a:	4770      	bx	lr

0801919c <__ssputs_r>:
 801919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191a0:	688e      	ldr	r6, [r1, #8]
 80191a2:	461f      	mov	r7, r3
 80191a4:	42be      	cmp	r6, r7
 80191a6:	680b      	ldr	r3, [r1, #0]
 80191a8:	4682      	mov	sl, r0
 80191aa:	460c      	mov	r4, r1
 80191ac:	4690      	mov	r8, r2
 80191ae:	d82d      	bhi.n	801920c <__ssputs_r+0x70>
 80191b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80191b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80191b8:	d026      	beq.n	8019208 <__ssputs_r+0x6c>
 80191ba:	6965      	ldr	r5, [r4, #20]
 80191bc:	6909      	ldr	r1, [r1, #16]
 80191be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191c2:	eba3 0901 	sub.w	r9, r3, r1
 80191c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80191ca:	1c7b      	adds	r3, r7, #1
 80191cc:	444b      	add	r3, r9
 80191ce:	106d      	asrs	r5, r5, #1
 80191d0:	429d      	cmp	r5, r3
 80191d2:	bf38      	it	cc
 80191d4:	461d      	movcc	r5, r3
 80191d6:	0553      	lsls	r3, r2, #21
 80191d8:	d527      	bpl.n	801922a <__ssputs_r+0x8e>
 80191da:	4629      	mov	r1, r5
 80191dc:	f7fd f9ee 	bl	80165bc <_malloc_r>
 80191e0:	4606      	mov	r6, r0
 80191e2:	b360      	cbz	r0, 801923e <__ssputs_r+0xa2>
 80191e4:	6921      	ldr	r1, [r4, #16]
 80191e6:	464a      	mov	r2, r9
 80191e8:	f7fe ff49 	bl	801807e <memcpy>
 80191ec:	89a3      	ldrh	r3, [r4, #12]
 80191ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80191f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80191f6:	81a3      	strh	r3, [r4, #12]
 80191f8:	6126      	str	r6, [r4, #16]
 80191fa:	6165      	str	r5, [r4, #20]
 80191fc:	444e      	add	r6, r9
 80191fe:	eba5 0509 	sub.w	r5, r5, r9
 8019202:	6026      	str	r6, [r4, #0]
 8019204:	60a5      	str	r5, [r4, #8]
 8019206:	463e      	mov	r6, r7
 8019208:	42be      	cmp	r6, r7
 801920a:	d900      	bls.n	801920e <__ssputs_r+0x72>
 801920c:	463e      	mov	r6, r7
 801920e:	6820      	ldr	r0, [r4, #0]
 8019210:	4632      	mov	r2, r6
 8019212:	4641      	mov	r1, r8
 8019214:	f000 ffeb 	bl	801a1ee <memmove>
 8019218:	68a3      	ldr	r3, [r4, #8]
 801921a:	1b9b      	subs	r3, r3, r6
 801921c:	60a3      	str	r3, [r4, #8]
 801921e:	6823      	ldr	r3, [r4, #0]
 8019220:	4433      	add	r3, r6
 8019222:	6023      	str	r3, [r4, #0]
 8019224:	2000      	movs	r0, #0
 8019226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801922a:	462a      	mov	r2, r5
 801922c:	f001 f837 	bl	801a29e <_realloc_r>
 8019230:	4606      	mov	r6, r0
 8019232:	2800      	cmp	r0, #0
 8019234:	d1e0      	bne.n	80191f8 <__ssputs_r+0x5c>
 8019236:	6921      	ldr	r1, [r4, #16]
 8019238:	4650      	mov	r0, sl
 801923a:	f7fe ff5d 	bl	80180f8 <_free_r>
 801923e:	230c      	movs	r3, #12
 8019240:	f8ca 3000 	str.w	r3, [sl]
 8019244:	89a3      	ldrh	r3, [r4, #12]
 8019246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801924a:	81a3      	strh	r3, [r4, #12]
 801924c:	f04f 30ff 	mov.w	r0, #4294967295
 8019250:	e7e9      	b.n	8019226 <__ssputs_r+0x8a>
	...

08019254 <_svfiprintf_r>:
 8019254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019258:	4698      	mov	r8, r3
 801925a:	898b      	ldrh	r3, [r1, #12]
 801925c:	061b      	lsls	r3, r3, #24
 801925e:	b09d      	sub	sp, #116	@ 0x74
 8019260:	4607      	mov	r7, r0
 8019262:	460d      	mov	r5, r1
 8019264:	4614      	mov	r4, r2
 8019266:	d510      	bpl.n	801928a <_svfiprintf_r+0x36>
 8019268:	690b      	ldr	r3, [r1, #16]
 801926a:	b973      	cbnz	r3, 801928a <_svfiprintf_r+0x36>
 801926c:	2140      	movs	r1, #64	@ 0x40
 801926e:	f7fd f9a5 	bl	80165bc <_malloc_r>
 8019272:	6028      	str	r0, [r5, #0]
 8019274:	6128      	str	r0, [r5, #16]
 8019276:	b930      	cbnz	r0, 8019286 <_svfiprintf_r+0x32>
 8019278:	230c      	movs	r3, #12
 801927a:	603b      	str	r3, [r7, #0]
 801927c:	f04f 30ff 	mov.w	r0, #4294967295
 8019280:	b01d      	add	sp, #116	@ 0x74
 8019282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019286:	2340      	movs	r3, #64	@ 0x40
 8019288:	616b      	str	r3, [r5, #20]
 801928a:	2300      	movs	r3, #0
 801928c:	9309      	str	r3, [sp, #36]	@ 0x24
 801928e:	2320      	movs	r3, #32
 8019290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019294:	f8cd 800c 	str.w	r8, [sp, #12]
 8019298:	2330      	movs	r3, #48	@ 0x30
 801929a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019438 <_svfiprintf_r+0x1e4>
 801929e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80192a2:	f04f 0901 	mov.w	r9, #1
 80192a6:	4623      	mov	r3, r4
 80192a8:	469a      	mov	sl, r3
 80192aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192ae:	b10a      	cbz	r2, 80192b4 <_svfiprintf_r+0x60>
 80192b0:	2a25      	cmp	r2, #37	@ 0x25
 80192b2:	d1f9      	bne.n	80192a8 <_svfiprintf_r+0x54>
 80192b4:	ebba 0b04 	subs.w	fp, sl, r4
 80192b8:	d00b      	beq.n	80192d2 <_svfiprintf_r+0x7e>
 80192ba:	465b      	mov	r3, fp
 80192bc:	4622      	mov	r2, r4
 80192be:	4629      	mov	r1, r5
 80192c0:	4638      	mov	r0, r7
 80192c2:	f7ff ff6b 	bl	801919c <__ssputs_r>
 80192c6:	3001      	adds	r0, #1
 80192c8:	f000 80a7 	beq.w	801941a <_svfiprintf_r+0x1c6>
 80192cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80192ce:	445a      	add	r2, fp
 80192d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80192d2:	f89a 3000 	ldrb.w	r3, [sl]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	f000 809f 	beq.w	801941a <_svfiprintf_r+0x1c6>
 80192dc:	2300      	movs	r3, #0
 80192de:	f04f 32ff 	mov.w	r2, #4294967295
 80192e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192e6:	f10a 0a01 	add.w	sl, sl, #1
 80192ea:	9304      	str	r3, [sp, #16]
 80192ec:	9307      	str	r3, [sp, #28]
 80192ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80192f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80192f4:	4654      	mov	r4, sl
 80192f6:	2205      	movs	r2, #5
 80192f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192fc:	484e      	ldr	r0, [pc, #312]	@ (8019438 <_svfiprintf_r+0x1e4>)
 80192fe:	f7e6 fff7 	bl	80002f0 <memchr>
 8019302:	9a04      	ldr	r2, [sp, #16]
 8019304:	b9d8      	cbnz	r0, 801933e <_svfiprintf_r+0xea>
 8019306:	06d0      	lsls	r0, r2, #27
 8019308:	bf44      	itt	mi
 801930a:	2320      	movmi	r3, #32
 801930c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019310:	0711      	lsls	r1, r2, #28
 8019312:	bf44      	itt	mi
 8019314:	232b      	movmi	r3, #43	@ 0x2b
 8019316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801931a:	f89a 3000 	ldrb.w	r3, [sl]
 801931e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019320:	d015      	beq.n	801934e <_svfiprintf_r+0xfa>
 8019322:	9a07      	ldr	r2, [sp, #28]
 8019324:	4654      	mov	r4, sl
 8019326:	2000      	movs	r0, #0
 8019328:	f04f 0c0a 	mov.w	ip, #10
 801932c:	4621      	mov	r1, r4
 801932e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019332:	3b30      	subs	r3, #48	@ 0x30
 8019334:	2b09      	cmp	r3, #9
 8019336:	d94b      	bls.n	80193d0 <_svfiprintf_r+0x17c>
 8019338:	b1b0      	cbz	r0, 8019368 <_svfiprintf_r+0x114>
 801933a:	9207      	str	r2, [sp, #28]
 801933c:	e014      	b.n	8019368 <_svfiprintf_r+0x114>
 801933e:	eba0 0308 	sub.w	r3, r0, r8
 8019342:	fa09 f303 	lsl.w	r3, r9, r3
 8019346:	4313      	orrs	r3, r2
 8019348:	9304      	str	r3, [sp, #16]
 801934a:	46a2      	mov	sl, r4
 801934c:	e7d2      	b.n	80192f4 <_svfiprintf_r+0xa0>
 801934e:	9b03      	ldr	r3, [sp, #12]
 8019350:	1d19      	adds	r1, r3, #4
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	9103      	str	r1, [sp, #12]
 8019356:	2b00      	cmp	r3, #0
 8019358:	bfbb      	ittet	lt
 801935a:	425b      	neglt	r3, r3
 801935c:	f042 0202 	orrlt.w	r2, r2, #2
 8019360:	9307      	strge	r3, [sp, #28]
 8019362:	9307      	strlt	r3, [sp, #28]
 8019364:	bfb8      	it	lt
 8019366:	9204      	strlt	r2, [sp, #16]
 8019368:	7823      	ldrb	r3, [r4, #0]
 801936a:	2b2e      	cmp	r3, #46	@ 0x2e
 801936c:	d10a      	bne.n	8019384 <_svfiprintf_r+0x130>
 801936e:	7863      	ldrb	r3, [r4, #1]
 8019370:	2b2a      	cmp	r3, #42	@ 0x2a
 8019372:	d132      	bne.n	80193da <_svfiprintf_r+0x186>
 8019374:	9b03      	ldr	r3, [sp, #12]
 8019376:	1d1a      	adds	r2, r3, #4
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	9203      	str	r2, [sp, #12]
 801937c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019380:	3402      	adds	r4, #2
 8019382:	9305      	str	r3, [sp, #20]
 8019384:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019448 <_svfiprintf_r+0x1f4>
 8019388:	7821      	ldrb	r1, [r4, #0]
 801938a:	2203      	movs	r2, #3
 801938c:	4650      	mov	r0, sl
 801938e:	f7e6 ffaf 	bl	80002f0 <memchr>
 8019392:	b138      	cbz	r0, 80193a4 <_svfiprintf_r+0x150>
 8019394:	9b04      	ldr	r3, [sp, #16]
 8019396:	eba0 000a 	sub.w	r0, r0, sl
 801939a:	2240      	movs	r2, #64	@ 0x40
 801939c:	4082      	lsls	r2, r0
 801939e:	4313      	orrs	r3, r2
 80193a0:	3401      	adds	r4, #1
 80193a2:	9304      	str	r3, [sp, #16]
 80193a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193a8:	4824      	ldr	r0, [pc, #144]	@ (801943c <_svfiprintf_r+0x1e8>)
 80193aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80193ae:	2206      	movs	r2, #6
 80193b0:	f7e6 ff9e 	bl	80002f0 <memchr>
 80193b4:	2800      	cmp	r0, #0
 80193b6:	d036      	beq.n	8019426 <_svfiprintf_r+0x1d2>
 80193b8:	4b21      	ldr	r3, [pc, #132]	@ (8019440 <_svfiprintf_r+0x1ec>)
 80193ba:	bb1b      	cbnz	r3, 8019404 <_svfiprintf_r+0x1b0>
 80193bc:	9b03      	ldr	r3, [sp, #12]
 80193be:	3307      	adds	r3, #7
 80193c0:	f023 0307 	bic.w	r3, r3, #7
 80193c4:	3308      	adds	r3, #8
 80193c6:	9303      	str	r3, [sp, #12]
 80193c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193ca:	4433      	add	r3, r6
 80193cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80193ce:	e76a      	b.n	80192a6 <_svfiprintf_r+0x52>
 80193d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80193d4:	460c      	mov	r4, r1
 80193d6:	2001      	movs	r0, #1
 80193d8:	e7a8      	b.n	801932c <_svfiprintf_r+0xd8>
 80193da:	2300      	movs	r3, #0
 80193dc:	3401      	adds	r4, #1
 80193de:	9305      	str	r3, [sp, #20]
 80193e0:	4619      	mov	r1, r3
 80193e2:	f04f 0c0a 	mov.w	ip, #10
 80193e6:	4620      	mov	r0, r4
 80193e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193ec:	3a30      	subs	r2, #48	@ 0x30
 80193ee:	2a09      	cmp	r2, #9
 80193f0:	d903      	bls.n	80193fa <_svfiprintf_r+0x1a6>
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d0c6      	beq.n	8019384 <_svfiprintf_r+0x130>
 80193f6:	9105      	str	r1, [sp, #20]
 80193f8:	e7c4      	b.n	8019384 <_svfiprintf_r+0x130>
 80193fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80193fe:	4604      	mov	r4, r0
 8019400:	2301      	movs	r3, #1
 8019402:	e7f0      	b.n	80193e6 <_svfiprintf_r+0x192>
 8019404:	ab03      	add	r3, sp, #12
 8019406:	9300      	str	r3, [sp, #0]
 8019408:	462a      	mov	r2, r5
 801940a:	4b0e      	ldr	r3, [pc, #56]	@ (8019444 <_svfiprintf_r+0x1f0>)
 801940c:	a904      	add	r1, sp, #16
 801940e:	4638      	mov	r0, r7
 8019410:	f3af 8000 	nop.w
 8019414:	1c42      	adds	r2, r0, #1
 8019416:	4606      	mov	r6, r0
 8019418:	d1d6      	bne.n	80193c8 <_svfiprintf_r+0x174>
 801941a:	89ab      	ldrh	r3, [r5, #12]
 801941c:	065b      	lsls	r3, r3, #25
 801941e:	f53f af2d 	bmi.w	801927c <_svfiprintf_r+0x28>
 8019422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019424:	e72c      	b.n	8019280 <_svfiprintf_r+0x2c>
 8019426:	ab03      	add	r3, sp, #12
 8019428:	9300      	str	r3, [sp, #0]
 801942a:	462a      	mov	r2, r5
 801942c:	4b05      	ldr	r3, [pc, #20]	@ (8019444 <_svfiprintf_r+0x1f0>)
 801942e:	a904      	add	r1, sp, #16
 8019430:	4638      	mov	r0, r7
 8019432:	f000 fb87 	bl	8019b44 <_printf_i>
 8019436:	e7ed      	b.n	8019414 <_svfiprintf_r+0x1c0>
 8019438:	0801a9e8 	.word	0x0801a9e8
 801943c:	0801a9f2 	.word	0x0801a9f2
 8019440:	00000000 	.word	0x00000000
 8019444:	0801919d 	.word	0x0801919d
 8019448:	0801a9ee 	.word	0x0801a9ee

0801944c <_sungetc_r>:
 801944c:	b538      	push	{r3, r4, r5, lr}
 801944e:	1c4b      	adds	r3, r1, #1
 8019450:	4614      	mov	r4, r2
 8019452:	d103      	bne.n	801945c <_sungetc_r+0x10>
 8019454:	f04f 35ff 	mov.w	r5, #4294967295
 8019458:	4628      	mov	r0, r5
 801945a:	bd38      	pop	{r3, r4, r5, pc}
 801945c:	8993      	ldrh	r3, [r2, #12]
 801945e:	f023 0320 	bic.w	r3, r3, #32
 8019462:	8193      	strh	r3, [r2, #12]
 8019464:	6853      	ldr	r3, [r2, #4]
 8019466:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8019468:	b2cd      	uxtb	r5, r1
 801946a:	b18a      	cbz	r2, 8019490 <_sungetc_r+0x44>
 801946c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801946e:	429a      	cmp	r2, r3
 8019470:	dd08      	ble.n	8019484 <_sungetc_r+0x38>
 8019472:	6823      	ldr	r3, [r4, #0]
 8019474:	1e5a      	subs	r2, r3, #1
 8019476:	6022      	str	r2, [r4, #0]
 8019478:	f803 5c01 	strb.w	r5, [r3, #-1]
 801947c:	6863      	ldr	r3, [r4, #4]
 801947e:	3301      	adds	r3, #1
 8019480:	6063      	str	r3, [r4, #4]
 8019482:	e7e9      	b.n	8019458 <_sungetc_r+0xc>
 8019484:	4621      	mov	r1, r4
 8019486:	f000 fe78 	bl	801a17a <__submore>
 801948a:	2800      	cmp	r0, #0
 801948c:	d0f1      	beq.n	8019472 <_sungetc_r+0x26>
 801948e:	e7e1      	b.n	8019454 <_sungetc_r+0x8>
 8019490:	6921      	ldr	r1, [r4, #16]
 8019492:	6822      	ldr	r2, [r4, #0]
 8019494:	b141      	cbz	r1, 80194a8 <_sungetc_r+0x5c>
 8019496:	4291      	cmp	r1, r2
 8019498:	d206      	bcs.n	80194a8 <_sungetc_r+0x5c>
 801949a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801949e:	42a9      	cmp	r1, r5
 80194a0:	d102      	bne.n	80194a8 <_sungetc_r+0x5c>
 80194a2:	3a01      	subs	r2, #1
 80194a4:	6022      	str	r2, [r4, #0]
 80194a6:	e7ea      	b.n	801947e <_sungetc_r+0x32>
 80194a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80194ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80194b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80194b2:	2303      	movs	r3, #3
 80194b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80194b6:	4623      	mov	r3, r4
 80194b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80194bc:	6023      	str	r3, [r4, #0]
 80194be:	2301      	movs	r3, #1
 80194c0:	e7de      	b.n	8019480 <_sungetc_r+0x34>

080194c2 <__ssrefill_r>:
 80194c2:	b510      	push	{r4, lr}
 80194c4:	460c      	mov	r4, r1
 80194c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80194c8:	b169      	cbz	r1, 80194e6 <__ssrefill_r+0x24>
 80194ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80194ce:	4299      	cmp	r1, r3
 80194d0:	d001      	beq.n	80194d6 <__ssrefill_r+0x14>
 80194d2:	f7fe fe11 	bl	80180f8 <_free_r>
 80194d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80194d8:	6063      	str	r3, [r4, #4]
 80194da:	2000      	movs	r0, #0
 80194dc:	6360      	str	r0, [r4, #52]	@ 0x34
 80194de:	b113      	cbz	r3, 80194e6 <__ssrefill_r+0x24>
 80194e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80194e2:	6023      	str	r3, [r4, #0]
 80194e4:	bd10      	pop	{r4, pc}
 80194e6:	6923      	ldr	r3, [r4, #16]
 80194e8:	6023      	str	r3, [r4, #0]
 80194ea:	2300      	movs	r3, #0
 80194ec:	6063      	str	r3, [r4, #4]
 80194ee:	89a3      	ldrh	r3, [r4, #12]
 80194f0:	f043 0320 	orr.w	r3, r3, #32
 80194f4:	81a3      	strh	r3, [r4, #12]
 80194f6:	f04f 30ff 	mov.w	r0, #4294967295
 80194fa:	e7f3      	b.n	80194e4 <__ssrefill_r+0x22>

080194fc <__ssvfiscanf_r>:
 80194fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019500:	460c      	mov	r4, r1
 8019502:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8019506:	2100      	movs	r1, #0
 8019508:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801950c:	49a5      	ldr	r1, [pc, #660]	@ (80197a4 <__ssvfiscanf_r+0x2a8>)
 801950e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8019510:	f10d 0804 	add.w	r8, sp, #4
 8019514:	49a4      	ldr	r1, [pc, #656]	@ (80197a8 <__ssvfiscanf_r+0x2ac>)
 8019516:	4fa5      	ldr	r7, [pc, #660]	@ (80197ac <__ssvfiscanf_r+0x2b0>)
 8019518:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801951c:	4606      	mov	r6, r0
 801951e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8019520:	9300      	str	r3, [sp, #0]
 8019522:	7813      	ldrb	r3, [r2, #0]
 8019524:	2b00      	cmp	r3, #0
 8019526:	f000 8158 	beq.w	80197da <__ssvfiscanf_r+0x2de>
 801952a:	5cf9      	ldrb	r1, [r7, r3]
 801952c:	f011 0108 	ands.w	r1, r1, #8
 8019530:	f102 0501 	add.w	r5, r2, #1
 8019534:	d019      	beq.n	801956a <__ssvfiscanf_r+0x6e>
 8019536:	6863      	ldr	r3, [r4, #4]
 8019538:	2b00      	cmp	r3, #0
 801953a:	dd0f      	ble.n	801955c <__ssvfiscanf_r+0x60>
 801953c:	6823      	ldr	r3, [r4, #0]
 801953e:	781a      	ldrb	r2, [r3, #0]
 8019540:	5cba      	ldrb	r2, [r7, r2]
 8019542:	0712      	lsls	r2, r2, #28
 8019544:	d401      	bmi.n	801954a <__ssvfiscanf_r+0x4e>
 8019546:	462a      	mov	r2, r5
 8019548:	e7eb      	b.n	8019522 <__ssvfiscanf_r+0x26>
 801954a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801954c:	3201      	adds	r2, #1
 801954e:	9245      	str	r2, [sp, #276]	@ 0x114
 8019550:	6862      	ldr	r2, [r4, #4]
 8019552:	3301      	adds	r3, #1
 8019554:	3a01      	subs	r2, #1
 8019556:	6062      	str	r2, [r4, #4]
 8019558:	6023      	str	r3, [r4, #0]
 801955a:	e7ec      	b.n	8019536 <__ssvfiscanf_r+0x3a>
 801955c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801955e:	4621      	mov	r1, r4
 8019560:	4630      	mov	r0, r6
 8019562:	4798      	blx	r3
 8019564:	2800      	cmp	r0, #0
 8019566:	d0e9      	beq.n	801953c <__ssvfiscanf_r+0x40>
 8019568:	e7ed      	b.n	8019546 <__ssvfiscanf_r+0x4a>
 801956a:	2b25      	cmp	r3, #37	@ 0x25
 801956c:	d012      	beq.n	8019594 <__ssvfiscanf_r+0x98>
 801956e:	4699      	mov	r9, r3
 8019570:	6863      	ldr	r3, [r4, #4]
 8019572:	2b00      	cmp	r3, #0
 8019574:	f340 8093 	ble.w	801969e <__ssvfiscanf_r+0x1a2>
 8019578:	6822      	ldr	r2, [r4, #0]
 801957a:	7813      	ldrb	r3, [r2, #0]
 801957c:	454b      	cmp	r3, r9
 801957e:	f040 812c 	bne.w	80197da <__ssvfiscanf_r+0x2de>
 8019582:	6863      	ldr	r3, [r4, #4]
 8019584:	3b01      	subs	r3, #1
 8019586:	6063      	str	r3, [r4, #4]
 8019588:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801958a:	3201      	adds	r2, #1
 801958c:	3301      	adds	r3, #1
 801958e:	6022      	str	r2, [r4, #0]
 8019590:	9345      	str	r3, [sp, #276]	@ 0x114
 8019592:	e7d8      	b.n	8019546 <__ssvfiscanf_r+0x4a>
 8019594:	9141      	str	r1, [sp, #260]	@ 0x104
 8019596:	9143      	str	r1, [sp, #268]	@ 0x10c
 8019598:	7853      	ldrb	r3, [r2, #1]
 801959a:	2b2a      	cmp	r3, #42	@ 0x2a
 801959c:	bf02      	ittt	eq
 801959e:	2310      	moveq	r3, #16
 80195a0:	1c95      	addeq	r5, r2, #2
 80195a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80195a4:	220a      	movs	r2, #10
 80195a6:	46a9      	mov	r9, r5
 80195a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80195ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80195b0:	2b09      	cmp	r3, #9
 80195b2:	d91e      	bls.n	80195f2 <__ssvfiscanf_r+0xf6>
 80195b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80197b0 <__ssvfiscanf_r+0x2b4>
 80195b8:	2203      	movs	r2, #3
 80195ba:	4650      	mov	r0, sl
 80195bc:	f7e6 fe98 	bl	80002f0 <memchr>
 80195c0:	b138      	cbz	r0, 80195d2 <__ssvfiscanf_r+0xd6>
 80195c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80195c4:	eba0 000a 	sub.w	r0, r0, sl
 80195c8:	2301      	movs	r3, #1
 80195ca:	4083      	lsls	r3, r0
 80195cc:	4313      	orrs	r3, r2
 80195ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80195d0:	464d      	mov	r5, r9
 80195d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80195d6:	2b78      	cmp	r3, #120	@ 0x78
 80195d8:	d806      	bhi.n	80195e8 <__ssvfiscanf_r+0xec>
 80195da:	2b57      	cmp	r3, #87	@ 0x57
 80195dc:	d810      	bhi.n	8019600 <__ssvfiscanf_r+0x104>
 80195de:	2b25      	cmp	r3, #37	@ 0x25
 80195e0:	d0c5      	beq.n	801956e <__ssvfiscanf_r+0x72>
 80195e2:	d857      	bhi.n	8019694 <__ssvfiscanf_r+0x198>
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d065      	beq.n	80196b4 <__ssvfiscanf_r+0x1b8>
 80195e8:	2303      	movs	r3, #3
 80195ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80195ec:	230a      	movs	r3, #10
 80195ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80195f0:	e078      	b.n	80196e4 <__ssvfiscanf_r+0x1e8>
 80195f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80195f4:	fb02 1103 	mla	r1, r2, r3, r1
 80195f8:	3930      	subs	r1, #48	@ 0x30
 80195fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80195fc:	464d      	mov	r5, r9
 80195fe:	e7d2      	b.n	80195a6 <__ssvfiscanf_r+0xaa>
 8019600:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8019604:	2a20      	cmp	r2, #32
 8019606:	d8ef      	bhi.n	80195e8 <__ssvfiscanf_r+0xec>
 8019608:	a101      	add	r1, pc, #4	@ (adr r1, 8019610 <__ssvfiscanf_r+0x114>)
 801960a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801960e:	bf00      	nop
 8019610:	080196c3 	.word	0x080196c3
 8019614:	080195e9 	.word	0x080195e9
 8019618:	080195e9 	.word	0x080195e9
 801961c:	0801971d 	.word	0x0801971d
 8019620:	080195e9 	.word	0x080195e9
 8019624:	080195e9 	.word	0x080195e9
 8019628:	080195e9 	.word	0x080195e9
 801962c:	080195e9 	.word	0x080195e9
 8019630:	080195e9 	.word	0x080195e9
 8019634:	080195e9 	.word	0x080195e9
 8019638:	080195e9 	.word	0x080195e9
 801963c:	08019733 	.word	0x08019733
 8019640:	08019719 	.word	0x08019719
 8019644:	0801969b 	.word	0x0801969b
 8019648:	0801969b 	.word	0x0801969b
 801964c:	0801969b 	.word	0x0801969b
 8019650:	080195e9 	.word	0x080195e9
 8019654:	080196d5 	.word	0x080196d5
 8019658:	080195e9 	.word	0x080195e9
 801965c:	080195e9 	.word	0x080195e9
 8019660:	080195e9 	.word	0x080195e9
 8019664:	080195e9 	.word	0x080195e9
 8019668:	08019743 	.word	0x08019743
 801966c:	080196dd 	.word	0x080196dd
 8019670:	080196bb 	.word	0x080196bb
 8019674:	080195e9 	.word	0x080195e9
 8019678:	080195e9 	.word	0x080195e9
 801967c:	0801973f 	.word	0x0801973f
 8019680:	080195e9 	.word	0x080195e9
 8019684:	08019719 	.word	0x08019719
 8019688:	080195e9 	.word	0x080195e9
 801968c:	080195e9 	.word	0x080195e9
 8019690:	080196c3 	.word	0x080196c3
 8019694:	3b45      	subs	r3, #69	@ 0x45
 8019696:	2b02      	cmp	r3, #2
 8019698:	d8a6      	bhi.n	80195e8 <__ssvfiscanf_r+0xec>
 801969a:	2305      	movs	r3, #5
 801969c:	e021      	b.n	80196e2 <__ssvfiscanf_r+0x1e6>
 801969e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80196a0:	4621      	mov	r1, r4
 80196a2:	4630      	mov	r0, r6
 80196a4:	4798      	blx	r3
 80196a6:	2800      	cmp	r0, #0
 80196a8:	f43f af66 	beq.w	8019578 <__ssvfiscanf_r+0x7c>
 80196ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80196ae:	2800      	cmp	r0, #0
 80196b0:	f040 808b 	bne.w	80197ca <__ssvfiscanf_r+0x2ce>
 80196b4:	f04f 30ff 	mov.w	r0, #4294967295
 80196b8:	e08b      	b.n	80197d2 <__ssvfiscanf_r+0x2d6>
 80196ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80196bc:	f042 0220 	orr.w	r2, r2, #32
 80196c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80196c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80196c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80196c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80196ca:	2210      	movs	r2, #16
 80196cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80196ce:	9242      	str	r2, [sp, #264]	@ 0x108
 80196d0:	d902      	bls.n	80196d8 <__ssvfiscanf_r+0x1dc>
 80196d2:	e005      	b.n	80196e0 <__ssvfiscanf_r+0x1e4>
 80196d4:	2300      	movs	r3, #0
 80196d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80196d8:	2303      	movs	r3, #3
 80196da:	e002      	b.n	80196e2 <__ssvfiscanf_r+0x1e6>
 80196dc:	2308      	movs	r3, #8
 80196de:	9342      	str	r3, [sp, #264]	@ 0x108
 80196e0:	2304      	movs	r3, #4
 80196e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80196e4:	6863      	ldr	r3, [r4, #4]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	dd39      	ble.n	801975e <__ssvfiscanf_r+0x262>
 80196ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80196ec:	0659      	lsls	r1, r3, #25
 80196ee:	d404      	bmi.n	80196fa <__ssvfiscanf_r+0x1fe>
 80196f0:	6823      	ldr	r3, [r4, #0]
 80196f2:	781a      	ldrb	r2, [r3, #0]
 80196f4:	5cba      	ldrb	r2, [r7, r2]
 80196f6:	0712      	lsls	r2, r2, #28
 80196f8:	d438      	bmi.n	801976c <__ssvfiscanf_r+0x270>
 80196fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80196fc:	2b02      	cmp	r3, #2
 80196fe:	dc47      	bgt.n	8019790 <__ssvfiscanf_r+0x294>
 8019700:	466b      	mov	r3, sp
 8019702:	4622      	mov	r2, r4
 8019704:	a941      	add	r1, sp, #260	@ 0x104
 8019706:	4630      	mov	r0, r6
 8019708:	f000 fb3c 	bl	8019d84 <_scanf_chars>
 801970c:	2801      	cmp	r0, #1
 801970e:	d064      	beq.n	80197da <__ssvfiscanf_r+0x2de>
 8019710:	2802      	cmp	r0, #2
 8019712:	f47f af18 	bne.w	8019546 <__ssvfiscanf_r+0x4a>
 8019716:	e7c9      	b.n	80196ac <__ssvfiscanf_r+0x1b0>
 8019718:	220a      	movs	r2, #10
 801971a:	e7d7      	b.n	80196cc <__ssvfiscanf_r+0x1d0>
 801971c:	4629      	mov	r1, r5
 801971e:	4640      	mov	r0, r8
 8019720:	f000 fcf2 	bl	801a108 <__sccl>
 8019724:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8019726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801972a:	9341      	str	r3, [sp, #260]	@ 0x104
 801972c:	4605      	mov	r5, r0
 801972e:	2301      	movs	r3, #1
 8019730:	e7d7      	b.n	80196e2 <__ssvfiscanf_r+0x1e6>
 8019732:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8019734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019738:	9341      	str	r3, [sp, #260]	@ 0x104
 801973a:	2300      	movs	r3, #0
 801973c:	e7d1      	b.n	80196e2 <__ssvfiscanf_r+0x1e6>
 801973e:	2302      	movs	r3, #2
 8019740:	e7cf      	b.n	80196e2 <__ssvfiscanf_r+0x1e6>
 8019742:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8019744:	06c3      	lsls	r3, r0, #27
 8019746:	f53f aefe 	bmi.w	8019546 <__ssvfiscanf_r+0x4a>
 801974a:	9b00      	ldr	r3, [sp, #0]
 801974c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801974e:	1d19      	adds	r1, r3, #4
 8019750:	9100      	str	r1, [sp, #0]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	07c0      	lsls	r0, r0, #31
 8019756:	bf4c      	ite	mi
 8019758:	801a      	strhmi	r2, [r3, #0]
 801975a:	601a      	strpl	r2, [r3, #0]
 801975c:	e6f3      	b.n	8019546 <__ssvfiscanf_r+0x4a>
 801975e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019760:	4621      	mov	r1, r4
 8019762:	4630      	mov	r0, r6
 8019764:	4798      	blx	r3
 8019766:	2800      	cmp	r0, #0
 8019768:	d0bf      	beq.n	80196ea <__ssvfiscanf_r+0x1ee>
 801976a:	e79f      	b.n	80196ac <__ssvfiscanf_r+0x1b0>
 801976c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801976e:	3201      	adds	r2, #1
 8019770:	9245      	str	r2, [sp, #276]	@ 0x114
 8019772:	6862      	ldr	r2, [r4, #4]
 8019774:	3a01      	subs	r2, #1
 8019776:	2a00      	cmp	r2, #0
 8019778:	6062      	str	r2, [r4, #4]
 801977a:	dd02      	ble.n	8019782 <__ssvfiscanf_r+0x286>
 801977c:	3301      	adds	r3, #1
 801977e:	6023      	str	r3, [r4, #0]
 8019780:	e7b6      	b.n	80196f0 <__ssvfiscanf_r+0x1f4>
 8019782:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019784:	4621      	mov	r1, r4
 8019786:	4630      	mov	r0, r6
 8019788:	4798      	blx	r3
 801978a:	2800      	cmp	r0, #0
 801978c:	d0b0      	beq.n	80196f0 <__ssvfiscanf_r+0x1f4>
 801978e:	e78d      	b.n	80196ac <__ssvfiscanf_r+0x1b0>
 8019790:	2b04      	cmp	r3, #4
 8019792:	dc0f      	bgt.n	80197b4 <__ssvfiscanf_r+0x2b8>
 8019794:	466b      	mov	r3, sp
 8019796:	4622      	mov	r2, r4
 8019798:	a941      	add	r1, sp, #260	@ 0x104
 801979a:	4630      	mov	r0, r6
 801979c:	f000 fb4c 	bl	8019e38 <_scanf_i>
 80197a0:	e7b4      	b.n	801970c <__ssvfiscanf_r+0x210>
 80197a2:	bf00      	nop
 80197a4:	0801944d 	.word	0x0801944d
 80197a8:	080194c3 	.word	0x080194c3
 80197ac:	0801a661 	.word	0x0801a661
 80197b0:	0801a9ee 	.word	0x0801a9ee
 80197b4:	4b0a      	ldr	r3, [pc, #40]	@ (80197e0 <__ssvfiscanf_r+0x2e4>)
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f43f aec5 	beq.w	8019546 <__ssvfiscanf_r+0x4a>
 80197bc:	466b      	mov	r3, sp
 80197be:	4622      	mov	r2, r4
 80197c0:	a941      	add	r1, sp, #260	@ 0x104
 80197c2:	4630      	mov	r0, r6
 80197c4:	f7fd fdce 	bl	8017364 <_scanf_float>
 80197c8:	e7a0      	b.n	801970c <__ssvfiscanf_r+0x210>
 80197ca:	89a3      	ldrh	r3, [r4, #12]
 80197cc:	065b      	lsls	r3, r3, #25
 80197ce:	f53f af71 	bmi.w	80196b4 <__ssvfiscanf_r+0x1b8>
 80197d2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80197d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197da:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80197dc:	e7f9      	b.n	80197d2 <__ssvfiscanf_r+0x2d6>
 80197de:	bf00      	nop
 80197e0:	08017365 	.word	0x08017365

080197e4 <__sfputc_r>:
 80197e4:	6893      	ldr	r3, [r2, #8]
 80197e6:	3b01      	subs	r3, #1
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	b410      	push	{r4}
 80197ec:	6093      	str	r3, [r2, #8]
 80197ee:	da08      	bge.n	8019802 <__sfputc_r+0x1e>
 80197f0:	6994      	ldr	r4, [r2, #24]
 80197f2:	42a3      	cmp	r3, r4
 80197f4:	db01      	blt.n	80197fa <__sfputc_r+0x16>
 80197f6:	290a      	cmp	r1, #10
 80197f8:	d103      	bne.n	8019802 <__sfputc_r+0x1e>
 80197fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197fe:	f7fe ba3e 	b.w	8017c7e <__swbuf_r>
 8019802:	6813      	ldr	r3, [r2, #0]
 8019804:	1c58      	adds	r0, r3, #1
 8019806:	6010      	str	r0, [r2, #0]
 8019808:	7019      	strb	r1, [r3, #0]
 801980a:	4608      	mov	r0, r1
 801980c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019810:	4770      	bx	lr

08019812 <__sfputs_r>:
 8019812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019814:	4606      	mov	r6, r0
 8019816:	460f      	mov	r7, r1
 8019818:	4614      	mov	r4, r2
 801981a:	18d5      	adds	r5, r2, r3
 801981c:	42ac      	cmp	r4, r5
 801981e:	d101      	bne.n	8019824 <__sfputs_r+0x12>
 8019820:	2000      	movs	r0, #0
 8019822:	e007      	b.n	8019834 <__sfputs_r+0x22>
 8019824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019828:	463a      	mov	r2, r7
 801982a:	4630      	mov	r0, r6
 801982c:	f7ff ffda 	bl	80197e4 <__sfputc_r>
 8019830:	1c43      	adds	r3, r0, #1
 8019832:	d1f3      	bne.n	801981c <__sfputs_r+0xa>
 8019834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019838 <_vfiprintf_r>:
 8019838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801983c:	460d      	mov	r5, r1
 801983e:	b09d      	sub	sp, #116	@ 0x74
 8019840:	4614      	mov	r4, r2
 8019842:	4698      	mov	r8, r3
 8019844:	4606      	mov	r6, r0
 8019846:	b118      	cbz	r0, 8019850 <_vfiprintf_r+0x18>
 8019848:	6a03      	ldr	r3, [r0, #32]
 801984a:	b90b      	cbnz	r3, 8019850 <_vfiprintf_r+0x18>
 801984c:	f7fe f8e2 	bl	8017a14 <__sinit>
 8019850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019852:	07d9      	lsls	r1, r3, #31
 8019854:	d405      	bmi.n	8019862 <_vfiprintf_r+0x2a>
 8019856:	89ab      	ldrh	r3, [r5, #12]
 8019858:	059a      	lsls	r2, r3, #22
 801985a:	d402      	bmi.n	8019862 <_vfiprintf_r+0x2a>
 801985c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801985e:	f7fe fc0c 	bl	801807a <__retarget_lock_acquire_recursive>
 8019862:	89ab      	ldrh	r3, [r5, #12]
 8019864:	071b      	lsls	r3, r3, #28
 8019866:	d501      	bpl.n	801986c <_vfiprintf_r+0x34>
 8019868:	692b      	ldr	r3, [r5, #16]
 801986a:	b99b      	cbnz	r3, 8019894 <_vfiprintf_r+0x5c>
 801986c:	4629      	mov	r1, r5
 801986e:	4630      	mov	r0, r6
 8019870:	f7fe fa44 	bl	8017cfc <__swsetup_r>
 8019874:	b170      	cbz	r0, 8019894 <_vfiprintf_r+0x5c>
 8019876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019878:	07dc      	lsls	r4, r3, #31
 801987a:	d504      	bpl.n	8019886 <_vfiprintf_r+0x4e>
 801987c:	f04f 30ff 	mov.w	r0, #4294967295
 8019880:	b01d      	add	sp, #116	@ 0x74
 8019882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019886:	89ab      	ldrh	r3, [r5, #12]
 8019888:	0598      	lsls	r0, r3, #22
 801988a:	d4f7      	bmi.n	801987c <_vfiprintf_r+0x44>
 801988c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801988e:	f7fe fbf5 	bl	801807c <__retarget_lock_release_recursive>
 8019892:	e7f3      	b.n	801987c <_vfiprintf_r+0x44>
 8019894:	2300      	movs	r3, #0
 8019896:	9309      	str	r3, [sp, #36]	@ 0x24
 8019898:	2320      	movs	r3, #32
 801989a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801989e:	f8cd 800c 	str.w	r8, [sp, #12]
 80198a2:	2330      	movs	r3, #48	@ 0x30
 80198a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019a54 <_vfiprintf_r+0x21c>
 80198a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80198ac:	f04f 0901 	mov.w	r9, #1
 80198b0:	4623      	mov	r3, r4
 80198b2:	469a      	mov	sl, r3
 80198b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198b8:	b10a      	cbz	r2, 80198be <_vfiprintf_r+0x86>
 80198ba:	2a25      	cmp	r2, #37	@ 0x25
 80198bc:	d1f9      	bne.n	80198b2 <_vfiprintf_r+0x7a>
 80198be:	ebba 0b04 	subs.w	fp, sl, r4
 80198c2:	d00b      	beq.n	80198dc <_vfiprintf_r+0xa4>
 80198c4:	465b      	mov	r3, fp
 80198c6:	4622      	mov	r2, r4
 80198c8:	4629      	mov	r1, r5
 80198ca:	4630      	mov	r0, r6
 80198cc:	f7ff ffa1 	bl	8019812 <__sfputs_r>
 80198d0:	3001      	adds	r0, #1
 80198d2:	f000 80a7 	beq.w	8019a24 <_vfiprintf_r+0x1ec>
 80198d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198d8:	445a      	add	r2, fp
 80198da:	9209      	str	r2, [sp, #36]	@ 0x24
 80198dc:	f89a 3000 	ldrb.w	r3, [sl]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	f000 809f 	beq.w	8019a24 <_vfiprintf_r+0x1ec>
 80198e6:	2300      	movs	r3, #0
 80198e8:	f04f 32ff 	mov.w	r2, #4294967295
 80198ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198f0:	f10a 0a01 	add.w	sl, sl, #1
 80198f4:	9304      	str	r3, [sp, #16]
 80198f6:	9307      	str	r3, [sp, #28]
 80198f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80198fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80198fe:	4654      	mov	r4, sl
 8019900:	2205      	movs	r2, #5
 8019902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019906:	4853      	ldr	r0, [pc, #332]	@ (8019a54 <_vfiprintf_r+0x21c>)
 8019908:	f7e6 fcf2 	bl	80002f0 <memchr>
 801990c:	9a04      	ldr	r2, [sp, #16]
 801990e:	b9d8      	cbnz	r0, 8019948 <_vfiprintf_r+0x110>
 8019910:	06d1      	lsls	r1, r2, #27
 8019912:	bf44      	itt	mi
 8019914:	2320      	movmi	r3, #32
 8019916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801991a:	0713      	lsls	r3, r2, #28
 801991c:	bf44      	itt	mi
 801991e:	232b      	movmi	r3, #43	@ 0x2b
 8019920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019924:	f89a 3000 	ldrb.w	r3, [sl]
 8019928:	2b2a      	cmp	r3, #42	@ 0x2a
 801992a:	d015      	beq.n	8019958 <_vfiprintf_r+0x120>
 801992c:	9a07      	ldr	r2, [sp, #28]
 801992e:	4654      	mov	r4, sl
 8019930:	2000      	movs	r0, #0
 8019932:	f04f 0c0a 	mov.w	ip, #10
 8019936:	4621      	mov	r1, r4
 8019938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801993c:	3b30      	subs	r3, #48	@ 0x30
 801993e:	2b09      	cmp	r3, #9
 8019940:	d94b      	bls.n	80199da <_vfiprintf_r+0x1a2>
 8019942:	b1b0      	cbz	r0, 8019972 <_vfiprintf_r+0x13a>
 8019944:	9207      	str	r2, [sp, #28]
 8019946:	e014      	b.n	8019972 <_vfiprintf_r+0x13a>
 8019948:	eba0 0308 	sub.w	r3, r0, r8
 801994c:	fa09 f303 	lsl.w	r3, r9, r3
 8019950:	4313      	orrs	r3, r2
 8019952:	9304      	str	r3, [sp, #16]
 8019954:	46a2      	mov	sl, r4
 8019956:	e7d2      	b.n	80198fe <_vfiprintf_r+0xc6>
 8019958:	9b03      	ldr	r3, [sp, #12]
 801995a:	1d19      	adds	r1, r3, #4
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	9103      	str	r1, [sp, #12]
 8019960:	2b00      	cmp	r3, #0
 8019962:	bfbb      	ittet	lt
 8019964:	425b      	neglt	r3, r3
 8019966:	f042 0202 	orrlt.w	r2, r2, #2
 801996a:	9307      	strge	r3, [sp, #28]
 801996c:	9307      	strlt	r3, [sp, #28]
 801996e:	bfb8      	it	lt
 8019970:	9204      	strlt	r2, [sp, #16]
 8019972:	7823      	ldrb	r3, [r4, #0]
 8019974:	2b2e      	cmp	r3, #46	@ 0x2e
 8019976:	d10a      	bne.n	801998e <_vfiprintf_r+0x156>
 8019978:	7863      	ldrb	r3, [r4, #1]
 801997a:	2b2a      	cmp	r3, #42	@ 0x2a
 801997c:	d132      	bne.n	80199e4 <_vfiprintf_r+0x1ac>
 801997e:	9b03      	ldr	r3, [sp, #12]
 8019980:	1d1a      	adds	r2, r3, #4
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	9203      	str	r2, [sp, #12]
 8019986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801998a:	3402      	adds	r4, #2
 801998c:	9305      	str	r3, [sp, #20]
 801998e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019a64 <_vfiprintf_r+0x22c>
 8019992:	7821      	ldrb	r1, [r4, #0]
 8019994:	2203      	movs	r2, #3
 8019996:	4650      	mov	r0, sl
 8019998:	f7e6 fcaa 	bl	80002f0 <memchr>
 801999c:	b138      	cbz	r0, 80199ae <_vfiprintf_r+0x176>
 801999e:	9b04      	ldr	r3, [sp, #16]
 80199a0:	eba0 000a 	sub.w	r0, r0, sl
 80199a4:	2240      	movs	r2, #64	@ 0x40
 80199a6:	4082      	lsls	r2, r0
 80199a8:	4313      	orrs	r3, r2
 80199aa:	3401      	adds	r4, #1
 80199ac:	9304      	str	r3, [sp, #16]
 80199ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199b2:	4829      	ldr	r0, [pc, #164]	@ (8019a58 <_vfiprintf_r+0x220>)
 80199b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80199b8:	2206      	movs	r2, #6
 80199ba:	f7e6 fc99 	bl	80002f0 <memchr>
 80199be:	2800      	cmp	r0, #0
 80199c0:	d03f      	beq.n	8019a42 <_vfiprintf_r+0x20a>
 80199c2:	4b26      	ldr	r3, [pc, #152]	@ (8019a5c <_vfiprintf_r+0x224>)
 80199c4:	bb1b      	cbnz	r3, 8019a0e <_vfiprintf_r+0x1d6>
 80199c6:	9b03      	ldr	r3, [sp, #12]
 80199c8:	3307      	adds	r3, #7
 80199ca:	f023 0307 	bic.w	r3, r3, #7
 80199ce:	3308      	adds	r3, #8
 80199d0:	9303      	str	r3, [sp, #12]
 80199d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d4:	443b      	add	r3, r7
 80199d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80199d8:	e76a      	b.n	80198b0 <_vfiprintf_r+0x78>
 80199da:	fb0c 3202 	mla	r2, ip, r2, r3
 80199de:	460c      	mov	r4, r1
 80199e0:	2001      	movs	r0, #1
 80199e2:	e7a8      	b.n	8019936 <_vfiprintf_r+0xfe>
 80199e4:	2300      	movs	r3, #0
 80199e6:	3401      	adds	r4, #1
 80199e8:	9305      	str	r3, [sp, #20]
 80199ea:	4619      	mov	r1, r3
 80199ec:	f04f 0c0a 	mov.w	ip, #10
 80199f0:	4620      	mov	r0, r4
 80199f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f6:	3a30      	subs	r2, #48	@ 0x30
 80199f8:	2a09      	cmp	r2, #9
 80199fa:	d903      	bls.n	8019a04 <_vfiprintf_r+0x1cc>
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d0c6      	beq.n	801998e <_vfiprintf_r+0x156>
 8019a00:	9105      	str	r1, [sp, #20]
 8019a02:	e7c4      	b.n	801998e <_vfiprintf_r+0x156>
 8019a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a08:	4604      	mov	r4, r0
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	e7f0      	b.n	80199f0 <_vfiprintf_r+0x1b8>
 8019a0e:	ab03      	add	r3, sp, #12
 8019a10:	9300      	str	r3, [sp, #0]
 8019a12:	462a      	mov	r2, r5
 8019a14:	4b12      	ldr	r3, [pc, #72]	@ (8019a60 <_vfiprintf_r+0x228>)
 8019a16:	a904      	add	r1, sp, #16
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f3af 8000 	nop.w
 8019a1e:	4607      	mov	r7, r0
 8019a20:	1c78      	adds	r0, r7, #1
 8019a22:	d1d6      	bne.n	80199d2 <_vfiprintf_r+0x19a>
 8019a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a26:	07d9      	lsls	r1, r3, #31
 8019a28:	d405      	bmi.n	8019a36 <_vfiprintf_r+0x1fe>
 8019a2a:	89ab      	ldrh	r3, [r5, #12]
 8019a2c:	059a      	lsls	r2, r3, #22
 8019a2e:	d402      	bmi.n	8019a36 <_vfiprintf_r+0x1fe>
 8019a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a32:	f7fe fb23 	bl	801807c <__retarget_lock_release_recursive>
 8019a36:	89ab      	ldrh	r3, [r5, #12]
 8019a38:	065b      	lsls	r3, r3, #25
 8019a3a:	f53f af1f 	bmi.w	801987c <_vfiprintf_r+0x44>
 8019a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a40:	e71e      	b.n	8019880 <_vfiprintf_r+0x48>
 8019a42:	ab03      	add	r3, sp, #12
 8019a44:	9300      	str	r3, [sp, #0]
 8019a46:	462a      	mov	r2, r5
 8019a48:	4b05      	ldr	r3, [pc, #20]	@ (8019a60 <_vfiprintf_r+0x228>)
 8019a4a:	a904      	add	r1, sp, #16
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	f000 f879 	bl	8019b44 <_printf_i>
 8019a52:	e7e4      	b.n	8019a1e <_vfiprintf_r+0x1e6>
 8019a54:	0801a9e8 	.word	0x0801a9e8
 8019a58:	0801a9f2 	.word	0x0801a9f2
 8019a5c:	00000000 	.word	0x00000000
 8019a60:	08019813 	.word	0x08019813
 8019a64:	0801a9ee 	.word	0x0801a9ee

08019a68 <_printf_common>:
 8019a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a6c:	4616      	mov	r6, r2
 8019a6e:	4698      	mov	r8, r3
 8019a70:	688a      	ldr	r2, [r1, #8]
 8019a72:	690b      	ldr	r3, [r1, #16]
 8019a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	bfb8      	it	lt
 8019a7c:	4613      	movlt	r3, r2
 8019a7e:	6033      	str	r3, [r6, #0]
 8019a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019a84:	4607      	mov	r7, r0
 8019a86:	460c      	mov	r4, r1
 8019a88:	b10a      	cbz	r2, 8019a8e <_printf_common+0x26>
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	6033      	str	r3, [r6, #0]
 8019a8e:	6823      	ldr	r3, [r4, #0]
 8019a90:	0699      	lsls	r1, r3, #26
 8019a92:	bf42      	ittt	mi
 8019a94:	6833      	ldrmi	r3, [r6, #0]
 8019a96:	3302      	addmi	r3, #2
 8019a98:	6033      	strmi	r3, [r6, #0]
 8019a9a:	6825      	ldr	r5, [r4, #0]
 8019a9c:	f015 0506 	ands.w	r5, r5, #6
 8019aa0:	d106      	bne.n	8019ab0 <_printf_common+0x48>
 8019aa2:	f104 0a19 	add.w	sl, r4, #25
 8019aa6:	68e3      	ldr	r3, [r4, #12]
 8019aa8:	6832      	ldr	r2, [r6, #0]
 8019aaa:	1a9b      	subs	r3, r3, r2
 8019aac:	42ab      	cmp	r3, r5
 8019aae:	dc26      	bgt.n	8019afe <_printf_common+0x96>
 8019ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019ab4:	6822      	ldr	r2, [r4, #0]
 8019ab6:	3b00      	subs	r3, #0
 8019ab8:	bf18      	it	ne
 8019aba:	2301      	movne	r3, #1
 8019abc:	0692      	lsls	r2, r2, #26
 8019abe:	d42b      	bmi.n	8019b18 <_printf_common+0xb0>
 8019ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019ac4:	4641      	mov	r1, r8
 8019ac6:	4638      	mov	r0, r7
 8019ac8:	47c8      	blx	r9
 8019aca:	3001      	adds	r0, #1
 8019acc:	d01e      	beq.n	8019b0c <_printf_common+0xa4>
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	6922      	ldr	r2, [r4, #16]
 8019ad2:	f003 0306 	and.w	r3, r3, #6
 8019ad6:	2b04      	cmp	r3, #4
 8019ad8:	bf02      	ittt	eq
 8019ada:	68e5      	ldreq	r5, [r4, #12]
 8019adc:	6833      	ldreq	r3, [r6, #0]
 8019ade:	1aed      	subeq	r5, r5, r3
 8019ae0:	68a3      	ldr	r3, [r4, #8]
 8019ae2:	bf0c      	ite	eq
 8019ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ae8:	2500      	movne	r5, #0
 8019aea:	4293      	cmp	r3, r2
 8019aec:	bfc4      	itt	gt
 8019aee:	1a9b      	subgt	r3, r3, r2
 8019af0:	18ed      	addgt	r5, r5, r3
 8019af2:	2600      	movs	r6, #0
 8019af4:	341a      	adds	r4, #26
 8019af6:	42b5      	cmp	r5, r6
 8019af8:	d11a      	bne.n	8019b30 <_printf_common+0xc8>
 8019afa:	2000      	movs	r0, #0
 8019afc:	e008      	b.n	8019b10 <_printf_common+0xa8>
 8019afe:	2301      	movs	r3, #1
 8019b00:	4652      	mov	r2, sl
 8019b02:	4641      	mov	r1, r8
 8019b04:	4638      	mov	r0, r7
 8019b06:	47c8      	blx	r9
 8019b08:	3001      	adds	r0, #1
 8019b0a:	d103      	bne.n	8019b14 <_printf_common+0xac>
 8019b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b14:	3501      	adds	r5, #1
 8019b16:	e7c6      	b.n	8019aa6 <_printf_common+0x3e>
 8019b18:	18e1      	adds	r1, r4, r3
 8019b1a:	1c5a      	adds	r2, r3, #1
 8019b1c:	2030      	movs	r0, #48	@ 0x30
 8019b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019b22:	4422      	add	r2, r4
 8019b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019b2c:	3302      	adds	r3, #2
 8019b2e:	e7c7      	b.n	8019ac0 <_printf_common+0x58>
 8019b30:	2301      	movs	r3, #1
 8019b32:	4622      	mov	r2, r4
 8019b34:	4641      	mov	r1, r8
 8019b36:	4638      	mov	r0, r7
 8019b38:	47c8      	blx	r9
 8019b3a:	3001      	adds	r0, #1
 8019b3c:	d0e6      	beq.n	8019b0c <_printf_common+0xa4>
 8019b3e:	3601      	adds	r6, #1
 8019b40:	e7d9      	b.n	8019af6 <_printf_common+0x8e>
	...

08019b44 <_printf_i>:
 8019b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b48:	7e0f      	ldrb	r7, [r1, #24]
 8019b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019b4c:	2f78      	cmp	r7, #120	@ 0x78
 8019b4e:	4691      	mov	r9, r2
 8019b50:	4680      	mov	r8, r0
 8019b52:	460c      	mov	r4, r1
 8019b54:	469a      	mov	sl, r3
 8019b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019b5a:	d807      	bhi.n	8019b6c <_printf_i+0x28>
 8019b5c:	2f62      	cmp	r7, #98	@ 0x62
 8019b5e:	d80a      	bhi.n	8019b76 <_printf_i+0x32>
 8019b60:	2f00      	cmp	r7, #0
 8019b62:	f000 80d2 	beq.w	8019d0a <_printf_i+0x1c6>
 8019b66:	2f58      	cmp	r7, #88	@ 0x58
 8019b68:	f000 80b9 	beq.w	8019cde <_printf_i+0x19a>
 8019b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019b74:	e03a      	b.n	8019bec <_printf_i+0xa8>
 8019b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019b7a:	2b15      	cmp	r3, #21
 8019b7c:	d8f6      	bhi.n	8019b6c <_printf_i+0x28>
 8019b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8019b84 <_printf_i+0x40>)
 8019b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b84:	08019bdd 	.word	0x08019bdd
 8019b88:	08019bf1 	.word	0x08019bf1
 8019b8c:	08019b6d 	.word	0x08019b6d
 8019b90:	08019b6d 	.word	0x08019b6d
 8019b94:	08019b6d 	.word	0x08019b6d
 8019b98:	08019b6d 	.word	0x08019b6d
 8019b9c:	08019bf1 	.word	0x08019bf1
 8019ba0:	08019b6d 	.word	0x08019b6d
 8019ba4:	08019b6d 	.word	0x08019b6d
 8019ba8:	08019b6d 	.word	0x08019b6d
 8019bac:	08019b6d 	.word	0x08019b6d
 8019bb0:	08019cf1 	.word	0x08019cf1
 8019bb4:	08019c1b 	.word	0x08019c1b
 8019bb8:	08019cab 	.word	0x08019cab
 8019bbc:	08019b6d 	.word	0x08019b6d
 8019bc0:	08019b6d 	.word	0x08019b6d
 8019bc4:	08019d13 	.word	0x08019d13
 8019bc8:	08019b6d 	.word	0x08019b6d
 8019bcc:	08019c1b 	.word	0x08019c1b
 8019bd0:	08019b6d 	.word	0x08019b6d
 8019bd4:	08019b6d 	.word	0x08019b6d
 8019bd8:	08019cb3 	.word	0x08019cb3
 8019bdc:	6833      	ldr	r3, [r6, #0]
 8019bde:	1d1a      	adds	r2, r3, #4
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	6032      	str	r2, [r6, #0]
 8019be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019bec:	2301      	movs	r3, #1
 8019bee:	e09d      	b.n	8019d2c <_printf_i+0x1e8>
 8019bf0:	6833      	ldr	r3, [r6, #0]
 8019bf2:	6820      	ldr	r0, [r4, #0]
 8019bf4:	1d19      	adds	r1, r3, #4
 8019bf6:	6031      	str	r1, [r6, #0]
 8019bf8:	0606      	lsls	r6, r0, #24
 8019bfa:	d501      	bpl.n	8019c00 <_printf_i+0xbc>
 8019bfc:	681d      	ldr	r5, [r3, #0]
 8019bfe:	e003      	b.n	8019c08 <_printf_i+0xc4>
 8019c00:	0645      	lsls	r5, r0, #25
 8019c02:	d5fb      	bpl.n	8019bfc <_printf_i+0xb8>
 8019c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019c08:	2d00      	cmp	r5, #0
 8019c0a:	da03      	bge.n	8019c14 <_printf_i+0xd0>
 8019c0c:	232d      	movs	r3, #45	@ 0x2d
 8019c0e:	426d      	negs	r5, r5
 8019c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019c14:	4859      	ldr	r0, [pc, #356]	@ (8019d7c <_printf_i+0x238>)
 8019c16:	230a      	movs	r3, #10
 8019c18:	e011      	b.n	8019c3e <_printf_i+0xfa>
 8019c1a:	6821      	ldr	r1, [r4, #0]
 8019c1c:	6833      	ldr	r3, [r6, #0]
 8019c1e:	0608      	lsls	r0, r1, #24
 8019c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c24:	d402      	bmi.n	8019c2c <_printf_i+0xe8>
 8019c26:	0649      	lsls	r1, r1, #25
 8019c28:	bf48      	it	mi
 8019c2a:	b2ad      	uxthmi	r5, r5
 8019c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8019c2e:	4853      	ldr	r0, [pc, #332]	@ (8019d7c <_printf_i+0x238>)
 8019c30:	6033      	str	r3, [r6, #0]
 8019c32:	bf14      	ite	ne
 8019c34:	230a      	movne	r3, #10
 8019c36:	2308      	moveq	r3, #8
 8019c38:	2100      	movs	r1, #0
 8019c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019c3e:	6866      	ldr	r6, [r4, #4]
 8019c40:	60a6      	str	r6, [r4, #8]
 8019c42:	2e00      	cmp	r6, #0
 8019c44:	bfa2      	ittt	ge
 8019c46:	6821      	ldrge	r1, [r4, #0]
 8019c48:	f021 0104 	bicge.w	r1, r1, #4
 8019c4c:	6021      	strge	r1, [r4, #0]
 8019c4e:	b90d      	cbnz	r5, 8019c54 <_printf_i+0x110>
 8019c50:	2e00      	cmp	r6, #0
 8019c52:	d04b      	beq.n	8019cec <_printf_i+0x1a8>
 8019c54:	4616      	mov	r6, r2
 8019c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8019c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8019c5e:	5dc7      	ldrb	r7, [r0, r7]
 8019c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019c64:	462f      	mov	r7, r5
 8019c66:	42bb      	cmp	r3, r7
 8019c68:	460d      	mov	r5, r1
 8019c6a:	d9f4      	bls.n	8019c56 <_printf_i+0x112>
 8019c6c:	2b08      	cmp	r3, #8
 8019c6e:	d10b      	bne.n	8019c88 <_printf_i+0x144>
 8019c70:	6823      	ldr	r3, [r4, #0]
 8019c72:	07df      	lsls	r7, r3, #31
 8019c74:	d508      	bpl.n	8019c88 <_printf_i+0x144>
 8019c76:	6923      	ldr	r3, [r4, #16]
 8019c78:	6861      	ldr	r1, [r4, #4]
 8019c7a:	4299      	cmp	r1, r3
 8019c7c:	bfde      	ittt	le
 8019c7e:	2330      	movle	r3, #48	@ 0x30
 8019c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019c88:	1b92      	subs	r2, r2, r6
 8019c8a:	6122      	str	r2, [r4, #16]
 8019c8c:	f8cd a000 	str.w	sl, [sp]
 8019c90:	464b      	mov	r3, r9
 8019c92:	aa03      	add	r2, sp, #12
 8019c94:	4621      	mov	r1, r4
 8019c96:	4640      	mov	r0, r8
 8019c98:	f7ff fee6 	bl	8019a68 <_printf_common>
 8019c9c:	3001      	adds	r0, #1
 8019c9e:	d14a      	bne.n	8019d36 <_printf_i+0x1f2>
 8019ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca4:	b004      	add	sp, #16
 8019ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019caa:	6823      	ldr	r3, [r4, #0]
 8019cac:	f043 0320 	orr.w	r3, r3, #32
 8019cb0:	6023      	str	r3, [r4, #0]
 8019cb2:	4833      	ldr	r0, [pc, #204]	@ (8019d80 <_printf_i+0x23c>)
 8019cb4:	2778      	movs	r7, #120	@ 0x78
 8019cb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019cba:	6823      	ldr	r3, [r4, #0]
 8019cbc:	6831      	ldr	r1, [r6, #0]
 8019cbe:	061f      	lsls	r7, r3, #24
 8019cc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8019cc4:	d402      	bmi.n	8019ccc <_printf_i+0x188>
 8019cc6:	065f      	lsls	r7, r3, #25
 8019cc8:	bf48      	it	mi
 8019cca:	b2ad      	uxthmi	r5, r5
 8019ccc:	6031      	str	r1, [r6, #0]
 8019cce:	07d9      	lsls	r1, r3, #31
 8019cd0:	bf44      	itt	mi
 8019cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8019cd6:	6023      	strmi	r3, [r4, #0]
 8019cd8:	b11d      	cbz	r5, 8019ce2 <_printf_i+0x19e>
 8019cda:	2310      	movs	r3, #16
 8019cdc:	e7ac      	b.n	8019c38 <_printf_i+0xf4>
 8019cde:	4827      	ldr	r0, [pc, #156]	@ (8019d7c <_printf_i+0x238>)
 8019ce0:	e7e9      	b.n	8019cb6 <_printf_i+0x172>
 8019ce2:	6823      	ldr	r3, [r4, #0]
 8019ce4:	f023 0320 	bic.w	r3, r3, #32
 8019ce8:	6023      	str	r3, [r4, #0]
 8019cea:	e7f6      	b.n	8019cda <_printf_i+0x196>
 8019cec:	4616      	mov	r6, r2
 8019cee:	e7bd      	b.n	8019c6c <_printf_i+0x128>
 8019cf0:	6833      	ldr	r3, [r6, #0]
 8019cf2:	6825      	ldr	r5, [r4, #0]
 8019cf4:	6961      	ldr	r1, [r4, #20]
 8019cf6:	1d18      	adds	r0, r3, #4
 8019cf8:	6030      	str	r0, [r6, #0]
 8019cfa:	062e      	lsls	r6, r5, #24
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	d501      	bpl.n	8019d04 <_printf_i+0x1c0>
 8019d00:	6019      	str	r1, [r3, #0]
 8019d02:	e002      	b.n	8019d0a <_printf_i+0x1c6>
 8019d04:	0668      	lsls	r0, r5, #25
 8019d06:	d5fb      	bpl.n	8019d00 <_printf_i+0x1bc>
 8019d08:	8019      	strh	r1, [r3, #0]
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	6123      	str	r3, [r4, #16]
 8019d0e:	4616      	mov	r6, r2
 8019d10:	e7bc      	b.n	8019c8c <_printf_i+0x148>
 8019d12:	6833      	ldr	r3, [r6, #0]
 8019d14:	1d1a      	adds	r2, r3, #4
 8019d16:	6032      	str	r2, [r6, #0]
 8019d18:	681e      	ldr	r6, [r3, #0]
 8019d1a:	6862      	ldr	r2, [r4, #4]
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	4630      	mov	r0, r6
 8019d20:	f7e6 fae6 	bl	80002f0 <memchr>
 8019d24:	b108      	cbz	r0, 8019d2a <_printf_i+0x1e6>
 8019d26:	1b80      	subs	r0, r0, r6
 8019d28:	6060      	str	r0, [r4, #4]
 8019d2a:	6863      	ldr	r3, [r4, #4]
 8019d2c:	6123      	str	r3, [r4, #16]
 8019d2e:	2300      	movs	r3, #0
 8019d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d34:	e7aa      	b.n	8019c8c <_printf_i+0x148>
 8019d36:	6923      	ldr	r3, [r4, #16]
 8019d38:	4632      	mov	r2, r6
 8019d3a:	4649      	mov	r1, r9
 8019d3c:	4640      	mov	r0, r8
 8019d3e:	47d0      	blx	sl
 8019d40:	3001      	adds	r0, #1
 8019d42:	d0ad      	beq.n	8019ca0 <_printf_i+0x15c>
 8019d44:	6823      	ldr	r3, [r4, #0]
 8019d46:	079b      	lsls	r3, r3, #30
 8019d48:	d413      	bmi.n	8019d72 <_printf_i+0x22e>
 8019d4a:	68e0      	ldr	r0, [r4, #12]
 8019d4c:	9b03      	ldr	r3, [sp, #12]
 8019d4e:	4298      	cmp	r0, r3
 8019d50:	bfb8      	it	lt
 8019d52:	4618      	movlt	r0, r3
 8019d54:	e7a6      	b.n	8019ca4 <_printf_i+0x160>
 8019d56:	2301      	movs	r3, #1
 8019d58:	4632      	mov	r2, r6
 8019d5a:	4649      	mov	r1, r9
 8019d5c:	4640      	mov	r0, r8
 8019d5e:	47d0      	blx	sl
 8019d60:	3001      	adds	r0, #1
 8019d62:	d09d      	beq.n	8019ca0 <_printf_i+0x15c>
 8019d64:	3501      	adds	r5, #1
 8019d66:	68e3      	ldr	r3, [r4, #12]
 8019d68:	9903      	ldr	r1, [sp, #12]
 8019d6a:	1a5b      	subs	r3, r3, r1
 8019d6c:	42ab      	cmp	r3, r5
 8019d6e:	dcf2      	bgt.n	8019d56 <_printf_i+0x212>
 8019d70:	e7eb      	b.n	8019d4a <_printf_i+0x206>
 8019d72:	2500      	movs	r5, #0
 8019d74:	f104 0619 	add.w	r6, r4, #25
 8019d78:	e7f5      	b.n	8019d66 <_printf_i+0x222>
 8019d7a:	bf00      	nop
 8019d7c:	0801a9f9 	.word	0x0801a9f9
 8019d80:	0801aa0a 	.word	0x0801aa0a

08019d84 <_scanf_chars>:
 8019d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d88:	4615      	mov	r5, r2
 8019d8a:	688a      	ldr	r2, [r1, #8]
 8019d8c:	4680      	mov	r8, r0
 8019d8e:	460c      	mov	r4, r1
 8019d90:	b932      	cbnz	r2, 8019da0 <_scanf_chars+0x1c>
 8019d92:	698a      	ldr	r2, [r1, #24]
 8019d94:	2a00      	cmp	r2, #0
 8019d96:	bf14      	ite	ne
 8019d98:	f04f 32ff 	movne.w	r2, #4294967295
 8019d9c:	2201      	moveq	r2, #1
 8019d9e:	608a      	str	r2, [r1, #8]
 8019da0:	6822      	ldr	r2, [r4, #0]
 8019da2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8019e34 <_scanf_chars+0xb0>
 8019da6:	06d1      	lsls	r1, r2, #27
 8019da8:	bf5f      	itttt	pl
 8019daa:	681a      	ldrpl	r2, [r3, #0]
 8019dac:	1d11      	addpl	r1, r2, #4
 8019dae:	6019      	strpl	r1, [r3, #0]
 8019db0:	6816      	ldrpl	r6, [r2, #0]
 8019db2:	2700      	movs	r7, #0
 8019db4:	69a0      	ldr	r0, [r4, #24]
 8019db6:	b188      	cbz	r0, 8019ddc <_scanf_chars+0x58>
 8019db8:	2801      	cmp	r0, #1
 8019dba:	d107      	bne.n	8019dcc <_scanf_chars+0x48>
 8019dbc:	682b      	ldr	r3, [r5, #0]
 8019dbe:	781a      	ldrb	r2, [r3, #0]
 8019dc0:	6963      	ldr	r3, [r4, #20]
 8019dc2:	5c9b      	ldrb	r3, [r3, r2]
 8019dc4:	b953      	cbnz	r3, 8019ddc <_scanf_chars+0x58>
 8019dc6:	2f00      	cmp	r7, #0
 8019dc8:	d031      	beq.n	8019e2e <_scanf_chars+0xaa>
 8019dca:	e022      	b.n	8019e12 <_scanf_chars+0x8e>
 8019dcc:	2802      	cmp	r0, #2
 8019dce:	d120      	bne.n	8019e12 <_scanf_chars+0x8e>
 8019dd0:	682b      	ldr	r3, [r5, #0]
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019dd8:	071b      	lsls	r3, r3, #28
 8019dda:	d41a      	bmi.n	8019e12 <_scanf_chars+0x8e>
 8019ddc:	6823      	ldr	r3, [r4, #0]
 8019dde:	06da      	lsls	r2, r3, #27
 8019de0:	bf5e      	ittt	pl
 8019de2:	682b      	ldrpl	r3, [r5, #0]
 8019de4:	781b      	ldrbpl	r3, [r3, #0]
 8019de6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019dea:	682a      	ldr	r2, [r5, #0]
 8019dec:	686b      	ldr	r3, [r5, #4]
 8019dee:	3201      	adds	r2, #1
 8019df0:	602a      	str	r2, [r5, #0]
 8019df2:	68a2      	ldr	r2, [r4, #8]
 8019df4:	3b01      	subs	r3, #1
 8019df6:	3a01      	subs	r2, #1
 8019df8:	606b      	str	r3, [r5, #4]
 8019dfa:	3701      	adds	r7, #1
 8019dfc:	60a2      	str	r2, [r4, #8]
 8019dfe:	b142      	cbz	r2, 8019e12 <_scanf_chars+0x8e>
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	dcd7      	bgt.n	8019db4 <_scanf_chars+0x30>
 8019e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019e08:	4629      	mov	r1, r5
 8019e0a:	4640      	mov	r0, r8
 8019e0c:	4798      	blx	r3
 8019e0e:	2800      	cmp	r0, #0
 8019e10:	d0d0      	beq.n	8019db4 <_scanf_chars+0x30>
 8019e12:	6823      	ldr	r3, [r4, #0]
 8019e14:	f013 0310 	ands.w	r3, r3, #16
 8019e18:	d105      	bne.n	8019e26 <_scanf_chars+0xa2>
 8019e1a:	68e2      	ldr	r2, [r4, #12]
 8019e1c:	3201      	adds	r2, #1
 8019e1e:	60e2      	str	r2, [r4, #12]
 8019e20:	69a2      	ldr	r2, [r4, #24]
 8019e22:	b102      	cbz	r2, 8019e26 <_scanf_chars+0xa2>
 8019e24:	7033      	strb	r3, [r6, #0]
 8019e26:	6923      	ldr	r3, [r4, #16]
 8019e28:	443b      	add	r3, r7
 8019e2a:	6123      	str	r3, [r4, #16]
 8019e2c:	2000      	movs	r0, #0
 8019e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e32:	bf00      	nop
 8019e34:	0801a661 	.word	0x0801a661

08019e38 <_scanf_i>:
 8019e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e3c:	4698      	mov	r8, r3
 8019e3e:	4b74      	ldr	r3, [pc, #464]	@ (801a010 <_scanf_i+0x1d8>)
 8019e40:	460c      	mov	r4, r1
 8019e42:	4682      	mov	sl, r0
 8019e44:	4616      	mov	r6, r2
 8019e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e4a:	b087      	sub	sp, #28
 8019e4c:	ab03      	add	r3, sp, #12
 8019e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e52:	4b70      	ldr	r3, [pc, #448]	@ (801a014 <_scanf_i+0x1dc>)
 8019e54:	69a1      	ldr	r1, [r4, #24]
 8019e56:	4a70      	ldr	r2, [pc, #448]	@ (801a018 <_scanf_i+0x1e0>)
 8019e58:	2903      	cmp	r1, #3
 8019e5a:	bf08      	it	eq
 8019e5c:	461a      	moveq	r2, r3
 8019e5e:	68a3      	ldr	r3, [r4, #8]
 8019e60:	9201      	str	r2, [sp, #4]
 8019e62:	1e5a      	subs	r2, r3, #1
 8019e64:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019e68:	bf88      	it	hi
 8019e6a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019e6e:	4627      	mov	r7, r4
 8019e70:	bf82      	ittt	hi
 8019e72:	eb03 0905 	addhi.w	r9, r3, r5
 8019e76:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019e7a:	60a3      	strhi	r3, [r4, #8]
 8019e7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019e80:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8019e84:	bf98      	it	ls
 8019e86:	f04f 0900 	movls.w	r9, #0
 8019e8a:	6023      	str	r3, [r4, #0]
 8019e8c:	463d      	mov	r5, r7
 8019e8e:	f04f 0b00 	mov.w	fp, #0
 8019e92:	6831      	ldr	r1, [r6, #0]
 8019e94:	ab03      	add	r3, sp, #12
 8019e96:	7809      	ldrb	r1, [r1, #0]
 8019e98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019e9c:	2202      	movs	r2, #2
 8019e9e:	f7e6 fa27 	bl	80002f0 <memchr>
 8019ea2:	b328      	cbz	r0, 8019ef0 <_scanf_i+0xb8>
 8019ea4:	f1bb 0f01 	cmp.w	fp, #1
 8019ea8:	d159      	bne.n	8019f5e <_scanf_i+0x126>
 8019eaa:	6862      	ldr	r2, [r4, #4]
 8019eac:	b92a      	cbnz	r2, 8019eba <_scanf_i+0x82>
 8019eae:	6822      	ldr	r2, [r4, #0]
 8019eb0:	2108      	movs	r1, #8
 8019eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019eb6:	6061      	str	r1, [r4, #4]
 8019eb8:	6022      	str	r2, [r4, #0]
 8019eba:	6822      	ldr	r2, [r4, #0]
 8019ebc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8019ec0:	6022      	str	r2, [r4, #0]
 8019ec2:	68a2      	ldr	r2, [r4, #8]
 8019ec4:	1e51      	subs	r1, r2, #1
 8019ec6:	60a1      	str	r1, [r4, #8]
 8019ec8:	b192      	cbz	r2, 8019ef0 <_scanf_i+0xb8>
 8019eca:	6832      	ldr	r2, [r6, #0]
 8019ecc:	1c51      	adds	r1, r2, #1
 8019ece:	6031      	str	r1, [r6, #0]
 8019ed0:	7812      	ldrb	r2, [r2, #0]
 8019ed2:	f805 2b01 	strb.w	r2, [r5], #1
 8019ed6:	6872      	ldr	r2, [r6, #4]
 8019ed8:	3a01      	subs	r2, #1
 8019eda:	2a00      	cmp	r2, #0
 8019edc:	6072      	str	r2, [r6, #4]
 8019ede:	dc07      	bgt.n	8019ef0 <_scanf_i+0xb8>
 8019ee0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8019ee4:	4631      	mov	r1, r6
 8019ee6:	4650      	mov	r0, sl
 8019ee8:	4790      	blx	r2
 8019eea:	2800      	cmp	r0, #0
 8019eec:	f040 8085 	bne.w	8019ffa <_scanf_i+0x1c2>
 8019ef0:	f10b 0b01 	add.w	fp, fp, #1
 8019ef4:	f1bb 0f03 	cmp.w	fp, #3
 8019ef8:	d1cb      	bne.n	8019e92 <_scanf_i+0x5a>
 8019efa:	6863      	ldr	r3, [r4, #4]
 8019efc:	b90b      	cbnz	r3, 8019f02 <_scanf_i+0xca>
 8019efe:	230a      	movs	r3, #10
 8019f00:	6063      	str	r3, [r4, #4]
 8019f02:	6863      	ldr	r3, [r4, #4]
 8019f04:	4945      	ldr	r1, [pc, #276]	@ (801a01c <_scanf_i+0x1e4>)
 8019f06:	6960      	ldr	r0, [r4, #20]
 8019f08:	1ac9      	subs	r1, r1, r3
 8019f0a:	f000 f8fd 	bl	801a108 <__sccl>
 8019f0e:	f04f 0b00 	mov.w	fp, #0
 8019f12:	68a3      	ldr	r3, [r4, #8]
 8019f14:	6822      	ldr	r2, [r4, #0]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d03d      	beq.n	8019f96 <_scanf_i+0x15e>
 8019f1a:	6831      	ldr	r1, [r6, #0]
 8019f1c:	6960      	ldr	r0, [r4, #20]
 8019f1e:	f891 c000 	ldrb.w	ip, [r1]
 8019f22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019f26:	2800      	cmp	r0, #0
 8019f28:	d035      	beq.n	8019f96 <_scanf_i+0x15e>
 8019f2a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8019f2e:	d124      	bne.n	8019f7a <_scanf_i+0x142>
 8019f30:	0510      	lsls	r0, r2, #20
 8019f32:	d522      	bpl.n	8019f7a <_scanf_i+0x142>
 8019f34:	f10b 0b01 	add.w	fp, fp, #1
 8019f38:	f1b9 0f00 	cmp.w	r9, #0
 8019f3c:	d003      	beq.n	8019f46 <_scanf_i+0x10e>
 8019f3e:	3301      	adds	r3, #1
 8019f40:	f109 39ff 	add.w	r9, r9, #4294967295
 8019f44:	60a3      	str	r3, [r4, #8]
 8019f46:	6873      	ldr	r3, [r6, #4]
 8019f48:	3b01      	subs	r3, #1
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	6073      	str	r3, [r6, #4]
 8019f4e:	dd1b      	ble.n	8019f88 <_scanf_i+0x150>
 8019f50:	6833      	ldr	r3, [r6, #0]
 8019f52:	3301      	adds	r3, #1
 8019f54:	6033      	str	r3, [r6, #0]
 8019f56:	68a3      	ldr	r3, [r4, #8]
 8019f58:	3b01      	subs	r3, #1
 8019f5a:	60a3      	str	r3, [r4, #8]
 8019f5c:	e7d9      	b.n	8019f12 <_scanf_i+0xda>
 8019f5e:	f1bb 0f02 	cmp.w	fp, #2
 8019f62:	d1ae      	bne.n	8019ec2 <_scanf_i+0x8a>
 8019f64:	6822      	ldr	r2, [r4, #0]
 8019f66:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8019f6a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019f6e:	d1bf      	bne.n	8019ef0 <_scanf_i+0xb8>
 8019f70:	2110      	movs	r1, #16
 8019f72:	6061      	str	r1, [r4, #4]
 8019f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019f78:	e7a2      	b.n	8019ec0 <_scanf_i+0x88>
 8019f7a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8019f7e:	6022      	str	r2, [r4, #0]
 8019f80:	780b      	ldrb	r3, [r1, #0]
 8019f82:	f805 3b01 	strb.w	r3, [r5], #1
 8019f86:	e7de      	b.n	8019f46 <_scanf_i+0x10e>
 8019f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019f8c:	4631      	mov	r1, r6
 8019f8e:	4650      	mov	r0, sl
 8019f90:	4798      	blx	r3
 8019f92:	2800      	cmp	r0, #0
 8019f94:	d0df      	beq.n	8019f56 <_scanf_i+0x11e>
 8019f96:	6823      	ldr	r3, [r4, #0]
 8019f98:	05d9      	lsls	r1, r3, #23
 8019f9a:	d50d      	bpl.n	8019fb8 <_scanf_i+0x180>
 8019f9c:	42bd      	cmp	r5, r7
 8019f9e:	d909      	bls.n	8019fb4 <_scanf_i+0x17c>
 8019fa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019fa8:	4632      	mov	r2, r6
 8019faa:	4650      	mov	r0, sl
 8019fac:	4798      	blx	r3
 8019fae:	f105 39ff 	add.w	r9, r5, #4294967295
 8019fb2:	464d      	mov	r5, r9
 8019fb4:	42bd      	cmp	r5, r7
 8019fb6:	d028      	beq.n	801a00a <_scanf_i+0x1d2>
 8019fb8:	6822      	ldr	r2, [r4, #0]
 8019fba:	f012 0210 	ands.w	r2, r2, #16
 8019fbe:	d113      	bne.n	8019fe8 <_scanf_i+0x1b0>
 8019fc0:	702a      	strb	r2, [r5, #0]
 8019fc2:	6863      	ldr	r3, [r4, #4]
 8019fc4:	9e01      	ldr	r6, [sp, #4]
 8019fc6:	4639      	mov	r1, r7
 8019fc8:	4650      	mov	r0, sl
 8019fca:	47b0      	blx	r6
 8019fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8019fd0:	6821      	ldr	r1, [r4, #0]
 8019fd2:	1d1a      	adds	r2, r3, #4
 8019fd4:	f8c8 2000 	str.w	r2, [r8]
 8019fd8:	f011 0f20 	tst.w	r1, #32
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	d00f      	beq.n	801a000 <_scanf_i+0x1c8>
 8019fe0:	6018      	str	r0, [r3, #0]
 8019fe2:	68e3      	ldr	r3, [r4, #12]
 8019fe4:	3301      	adds	r3, #1
 8019fe6:	60e3      	str	r3, [r4, #12]
 8019fe8:	6923      	ldr	r3, [r4, #16]
 8019fea:	1bed      	subs	r5, r5, r7
 8019fec:	445d      	add	r5, fp
 8019fee:	442b      	add	r3, r5
 8019ff0:	6123      	str	r3, [r4, #16]
 8019ff2:	2000      	movs	r0, #0
 8019ff4:	b007      	add	sp, #28
 8019ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ffa:	f04f 0b00 	mov.w	fp, #0
 8019ffe:	e7ca      	b.n	8019f96 <_scanf_i+0x15e>
 801a000:	07ca      	lsls	r2, r1, #31
 801a002:	bf4c      	ite	mi
 801a004:	8018      	strhmi	r0, [r3, #0]
 801a006:	6018      	strpl	r0, [r3, #0]
 801a008:	e7eb      	b.n	8019fe2 <_scanf_i+0x1aa>
 801a00a:	2001      	movs	r0, #1
 801a00c:	e7f2      	b.n	8019ff4 <_scanf_i+0x1bc>
 801a00e:	bf00      	nop
 801a010:	0801a58c 	.word	0x0801a58c
 801a014:	0801734d 	.word	0x0801734d
 801a018:	0801a3d9 	.word	0x0801a3d9
 801a01c:	0801aa2b 	.word	0x0801aa2b

0801a020 <fiprintf>:
 801a020:	b40e      	push	{r1, r2, r3}
 801a022:	b503      	push	{r0, r1, lr}
 801a024:	4601      	mov	r1, r0
 801a026:	ab03      	add	r3, sp, #12
 801a028:	4805      	ldr	r0, [pc, #20]	@ (801a040 <fiprintf+0x20>)
 801a02a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a02e:	6800      	ldr	r0, [r0, #0]
 801a030:	9301      	str	r3, [sp, #4]
 801a032:	f7ff fc01 	bl	8019838 <_vfiprintf_r>
 801a036:	b002      	add	sp, #8
 801a038:	f85d eb04 	ldr.w	lr, [sp], #4
 801a03c:	b003      	add	sp, #12
 801a03e:	4770      	bx	lr
 801a040:	24000280 	.word	0x24000280

0801a044 <__swhatbuf_r>:
 801a044:	b570      	push	{r4, r5, r6, lr}
 801a046:	460c      	mov	r4, r1
 801a048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a04c:	2900      	cmp	r1, #0
 801a04e:	b096      	sub	sp, #88	@ 0x58
 801a050:	4615      	mov	r5, r2
 801a052:	461e      	mov	r6, r3
 801a054:	da0d      	bge.n	801a072 <__swhatbuf_r+0x2e>
 801a056:	89a3      	ldrh	r3, [r4, #12]
 801a058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a05c:	f04f 0100 	mov.w	r1, #0
 801a060:	bf14      	ite	ne
 801a062:	2340      	movne	r3, #64	@ 0x40
 801a064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a068:	2000      	movs	r0, #0
 801a06a:	6031      	str	r1, [r6, #0]
 801a06c:	602b      	str	r3, [r5, #0]
 801a06e:	b016      	add	sp, #88	@ 0x58
 801a070:	bd70      	pop	{r4, r5, r6, pc}
 801a072:	466a      	mov	r2, sp
 801a074:	f000 f8d6 	bl	801a224 <_fstat_r>
 801a078:	2800      	cmp	r0, #0
 801a07a:	dbec      	blt.n	801a056 <__swhatbuf_r+0x12>
 801a07c:	9901      	ldr	r1, [sp, #4]
 801a07e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a086:	4259      	negs	r1, r3
 801a088:	4159      	adcs	r1, r3
 801a08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a08e:	e7eb      	b.n	801a068 <__swhatbuf_r+0x24>

0801a090 <__smakebuf_r>:
 801a090:	898b      	ldrh	r3, [r1, #12]
 801a092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a094:	079d      	lsls	r5, r3, #30
 801a096:	4606      	mov	r6, r0
 801a098:	460c      	mov	r4, r1
 801a09a:	d507      	bpl.n	801a0ac <__smakebuf_r+0x1c>
 801a09c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a0a0:	6023      	str	r3, [r4, #0]
 801a0a2:	6123      	str	r3, [r4, #16]
 801a0a4:	2301      	movs	r3, #1
 801a0a6:	6163      	str	r3, [r4, #20]
 801a0a8:	b003      	add	sp, #12
 801a0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ac:	ab01      	add	r3, sp, #4
 801a0ae:	466a      	mov	r2, sp
 801a0b0:	f7ff ffc8 	bl	801a044 <__swhatbuf_r>
 801a0b4:	9f00      	ldr	r7, [sp, #0]
 801a0b6:	4605      	mov	r5, r0
 801a0b8:	4639      	mov	r1, r7
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	f7fc fa7e 	bl	80165bc <_malloc_r>
 801a0c0:	b948      	cbnz	r0, 801a0d6 <__smakebuf_r+0x46>
 801a0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0c6:	059a      	lsls	r2, r3, #22
 801a0c8:	d4ee      	bmi.n	801a0a8 <__smakebuf_r+0x18>
 801a0ca:	f023 0303 	bic.w	r3, r3, #3
 801a0ce:	f043 0302 	orr.w	r3, r3, #2
 801a0d2:	81a3      	strh	r3, [r4, #12]
 801a0d4:	e7e2      	b.n	801a09c <__smakebuf_r+0xc>
 801a0d6:	89a3      	ldrh	r3, [r4, #12]
 801a0d8:	6020      	str	r0, [r4, #0]
 801a0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a0de:	81a3      	strh	r3, [r4, #12]
 801a0e0:	9b01      	ldr	r3, [sp, #4]
 801a0e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a0e6:	b15b      	cbz	r3, 801a100 <__smakebuf_r+0x70>
 801a0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	f000 f8ab 	bl	801a248 <_isatty_r>
 801a0f2:	b128      	cbz	r0, 801a100 <__smakebuf_r+0x70>
 801a0f4:	89a3      	ldrh	r3, [r4, #12]
 801a0f6:	f023 0303 	bic.w	r3, r3, #3
 801a0fa:	f043 0301 	orr.w	r3, r3, #1
 801a0fe:	81a3      	strh	r3, [r4, #12]
 801a100:	89a3      	ldrh	r3, [r4, #12]
 801a102:	431d      	orrs	r5, r3
 801a104:	81a5      	strh	r5, [r4, #12]
 801a106:	e7cf      	b.n	801a0a8 <__smakebuf_r+0x18>

0801a108 <__sccl>:
 801a108:	b570      	push	{r4, r5, r6, lr}
 801a10a:	780b      	ldrb	r3, [r1, #0]
 801a10c:	4604      	mov	r4, r0
 801a10e:	2b5e      	cmp	r3, #94	@ 0x5e
 801a110:	bf0b      	itete	eq
 801a112:	784b      	ldrbeq	r3, [r1, #1]
 801a114:	1c4a      	addne	r2, r1, #1
 801a116:	1c8a      	addeq	r2, r1, #2
 801a118:	2100      	movne	r1, #0
 801a11a:	bf08      	it	eq
 801a11c:	2101      	moveq	r1, #1
 801a11e:	3801      	subs	r0, #1
 801a120:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801a124:	f800 1f01 	strb.w	r1, [r0, #1]!
 801a128:	42a8      	cmp	r0, r5
 801a12a:	d1fb      	bne.n	801a124 <__sccl+0x1c>
 801a12c:	b90b      	cbnz	r3, 801a132 <__sccl+0x2a>
 801a12e:	1e50      	subs	r0, r2, #1
 801a130:	bd70      	pop	{r4, r5, r6, pc}
 801a132:	f081 0101 	eor.w	r1, r1, #1
 801a136:	54e1      	strb	r1, [r4, r3]
 801a138:	4610      	mov	r0, r2
 801a13a:	4602      	mov	r2, r0
 801a13c:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a140:	2d2d      	cmp	r5, #45	@ 0x2d
 801a142:	d005      	beq.n	801a150 <__sccl+0x48>
 801a144:	2d5d      	cmp	r5, #93	@ 0x5d
 801a146:	d016      	beq.n	801a176 <__sccl+0x6e>
 801a148:	2d00      	cmp	r5, #0
 801a14a:	d0f1      	beq.n	801a130 <__sccl+0x28>
 801a14c:	462b      	mov	r3, r5
 801a14e:	e7f2      	b.n	801a136 <__sccl+0x2e>
 801a150:	7846      	ldrb	r6, [r0, #1]
 801a152:	2e5d      	cmp	r6, #93	@ 0x5d
 801a154:	d0fa      	beq.n	801a14c <__sccl+0x44>
 801a156:	42b3      	cmp	r3, r6
 801a158:	dcf8      	bgt.n	801a14c <__sccl+0x44>
 801a15a:	3002      	adds	r0, #2
 801a15c:	461a      	mov	r2, r3
 801a15e:	3201      	adds	r2, #1
 801a160:	4296      	cmp	r6, r2
 801a162:	54a1      	strb	r1, [r4, r2]
 801a164:	dcfb      	bgt.n	801a15e <__sccl+0x56>
 801a166:	1af2      	subs	r2, r6, r3
 801a168:	3a01      	subs	r2, #1
 801a16a:	1c5d      	adds	r5, r3, #1
 801a16c:	42b3      	cmp	r3, r6
 801a16e:	bfa8      	it	ge
 801a170:	2200      	movge	r2, #0
 801a172:	18ab      	adds	r3, r5, r2
 801a174:	e7e1      	b.n	801a13a <__sccl+0x32>
 801a176:	4610      	mov	r0, r2
 801a178:	e7da      	b.n	801a130 <__sccl+0x28>

0801a17a <__submore>:
 801a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a17e:	460c      	mov	r4, r1
 801a180:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a186:	4299      	cmp	r1, r3
 801a188:	d11d      	bne.n	801a1c6 <__submore+0x4c>
 801a18a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801a18e:	f7fc fa15 	bl	80165bc <_malloc_r>
 801a192:	b918      	cbnz	r0, 801a19c <__submore+0x22>
 801a194:	f04f 30ff 	mov.w	r0, #4294967295
 801a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a19c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a1a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 801a1a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801a1a6:	6360      	str	r0, [r4, #52]	@ 0x34
 801a1a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801a1ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a1b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801a1b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a1b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801a1bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801a1c0:	6020      	str	r0, [r4, #0]
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	e7e8      	b.n	801a198 <__submore+0x1e>
 801a1c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801a1c8:	0077      	lsls	r7, r6, #1
 801a1ca:	463a      	mov	r2, r7
 801a1cc:	f000 f867 	bl	801a29e <_realloc_r>
 801a1d0:	4605      	mov	r5, r0
 801a1d2:	2800      	cmp	r0, #0
 801a1d4:	d0de      	beq.n	801a194 <__submore+0x1a>
 801a1d6:	eb00 0806 	add.w	r8, r0, r6
 801a1da:	4601      	mov	r1, r0
 801a1dc:	4632      	mov	r2, r6
 801a1de:	4640      	mov	r0, r8
 801a1e0:	f7fd ff4d 	bl	801807e <memcpy>
 801a1e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801a1e8:	f8c4 8000 	str.w	r8, [r4]
 801a1ec:	e7e9      	b.n	801a1c2 <__submore+0x48>

0801a1ee <memmove>:
 801a1ee:	4288      	cmp	r0, r1
 801a1f0:	b510      	push	{r4, lr}
 801a1f2:	eb01 0402 	add.w	r4, r1, r2
 801a1f6:	d902      	bls.n	801a1fe <memmove+0x10>
 801a1f8:	4284      	cmp	r4, r0
 801a1fa:	4623      	mov	r3, r4
 801a1fc:	d807      	bhi.n	801a20e <memmove+0x20>
 801a1fe:	1e43      	subs	r3, r0, #1
 801a200:	42a1      	cmp	r1, r4
 801a202:	d008      	beq.n	801a216 <memmove+0x28>
 801a204:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a208:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a20c:	e7f8      	b.n	801a200 <memmove+0x12>
 801a20e:	4402      	add	r2, r0
 801a210:	4601      	mov	r1, r0
 801a212:	428a      	cmp	r2, r1
 801a214:	d100      	bne.n	801a218 <memmove+0x2a>
 801a216:	bd10      	pop	{r4, pc}
 801a218:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a21c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a220:	e7f7      	b.n	801a212 <memmove+0x24>
	...

0801a224 <_fstat_r>:
 801a224:	b538      	push	{r3, r4, r5, lr}
 801a226:	4d07      	ldr	r5, [pc, #28]	@ (801a244 <_fstat_r+0x20>)
 801a228:	2300      	movs	r3, #0
 801a22a:	4604      	mov	r4, r0
 801a22c:	4608      	mov	r0, r1
 801a22e:	4611      	mov	r1, r2
 801a230:	602b      	str	r3, [r5, #0]
 801a232:	f7e8 f955 	bl	80024e0 <_fstat>
 801a236:	1c43      	adds	r3, r0, #1
 801a238:	d102      	bne.n	801a240 <_fstat_r+0x1c>
 801a23a:	682b      	ldr	r3, [r5, #0]
 801a23c:	b103      	cbz	r3, 801a240 <_fstat_r+0x1c>
 801a23e:	6023      	str	r3, [r4, #0]
 801a240:	bd38      	pop	{r3, r4, r5, pc}
 801a242:	bf00      	nop
 801a244:	2407767c 	.word	0x2407767c

0801a248 <_isatty_r>:
 801a248:	b538      	push	{r3, r4, r5, lr}
 801a24a:	4d06      	ldr	r5, [pc, #24]	@ (801a264 <_isatty_r+0x1c>)
 801a24c:	2300      	movs	r3, #0
 801a24e:	4604      	mov	r4, r0
 801a250:	4608      	mov	r0, r1
 801a252:	602b      	str	r3, [r5, #0]
 801a254:	f7e8 f954 	bl	8002500 <_isatty>
 801a258:	1c43      	adds	r3, r0, #1
 801a25a:	d102      	bne.n	801a262 <_isatty_r+0x1a>
 801a25c:	682b      	ldr	r3, [r5, #0]
 801a25e:	b103      	cbz	r3, 801a262 <_isatty_r+0x1a>
 801a260:	6023      	str	r3, [r4, #0]
 801a262:	bd38      	pop	{r3, r4, r5, pc}
 801a264:	2407767c 	.word	0x2407767c

0801a268 <abort>:
 801a268:	b508      	push	{r3, lr}
 801a26a:	2006      	movs	r0, #6
 801a26c:	f000 f8de 	bl	801a42c <raise>
 801a270:	2001      	movs	r0, #1
 801a272:	f7e8 f901 	bl	8002478 <_exit>

0801a276 <_calloc_r>:
 801a276:	b570      	push	{r4, r5, r6, lr}
 801a278:	fba1 5402 	umull	r5, r4, r1, r2
 801a27c:	b93c      	cbnz	r4, 801a28e <_calloc_r+0x18>
 801a27e:	4629      	mov	r1, r5
 801a280:	f7fc f99c 	bl	80165bc <_malloc_r>
 801a284:	4606      	mov	r6, r0
 801a286:	b928      	cbnz	r0, 801a294 <_calloc_r+0x1e>
 801a288:	2600      	movs	r6, #0
 801a28a:	4630      	mov	r0, r6
 801a28c:	bd70      	pop	{r4, r5, r6, pc}
 801a28e:	220c      	movs	r2, #12
 801a290:	6002      	str	r2, [r0, #0]
 801a292:	e7f9      	b.n	801a288 <_calloc_r+0x12>
 801a294:	462a      	mov	r2, r5
 801a296:	4621      	mov	r1, r4
 801a298:	f7fd fd86 	bl	8017da8 <memset>
 801a29c:	e7f5      	b.n	801a28a <_calloc_r+0x14>

0801a29e <_realloc_r>:
 801a29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a2:	4680      	mov	r8, r0
 801a2a4:	4615      	mov	r5, r2
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	b921      	cbnz	r1, 801a2b4 <_realloc_r+0x16>
 801a2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ae:	4611      	mov	r1, r2
 801a2b0:	f7fc b984 	b.w	80165bc <_malloc_r>
 801a2b4:	b92a      	cbnz	r2, 801a2c2 <_realloc_r+0x24>
 801a2b6:	f7fd ff1f 	bl	80180f8 <_free_r>
 801a2ba:	2400      	movs	r4, #0
 801a2bc:	4620      	mov	r0, r4
 801a2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2c2:	f000 f8cf 	bl	801a464 <_malloc_usable_size_r>
 801a2c6:	4285      	cmp	r5, r0
 801a2c8:	4606      	mov	r6, r0
 801a2ca:	d802      	bhi.n	801a2d2 <_realloc_r+0x34>
 801a2cc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a2d0:	d8f4      	bhi.n	801a2bc <_realloc_r+0x1e>
 801a2d2:	4629      	mov	r1, r5
 801a2d4:	4640      	mov	r0, r8
 801a2d6:	f7fc f971 	bl	80165bc <_malloc_r>
 801a2da:	4607      	mov	r7, r0
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	d0ec      	beq.n	801a2ba <_realloc_r+0x1c>
 801a2e0:	42b5      	cmp	r5, r6
 801a2e2:	462a      	mov	r2, r5
 801a2e4:	4621      	mov	r1, r4
 801a2e6:	bf28      	it	cs
 801a2e8:	4632      	movcs	r2, r6
 801a2ea:	f7fd fec8 	bl	801807e <memcpy>
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	4640      	mov	r0, r8
 801a2f2:	f7fd ff01 	bl	80180f8 <_free_r>
 801a2f6:	463c      	mov	r4, r7
 801a2f8:	e7e0      	b.n	801a2bc <_realloc_r+0x1e>
	...

0801a2fc <_strtoul_l.constprop.0>:
 801a2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a300:	4e34      	ldr	r6, [pc, #208]	@ (801a3d4 <_strtoul_l.constprop.0+0xd8>)
 801a302:	4686      	mov	lr, r0
 801a304:	460d      	mov	r5, r1
 801a306:	4628      	mov	r0, r5
 801a308:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a30c:	5d37      	ldrb	r7, [r6, r4]
 801a30e:	f017 0708 	ands.w	r7, r7, #8
 801a312:	d1f8      	bne.n	801a306 <_strtoul_l.constprop.0+0xa>
 801a314:	2c2d      	cmp	r4, #45	@ 0x2d
 801a316:	d12f      	bne.n	801a378 <_strtoul_l.constprop.0+0x7c>
 801a318:	782c      	ldrb	r4, [r5, #0]
 801a31a:	2701      	movs	r7, #1
 801a31c:	1c85      	adds	r5, r0, #2
 801a31e:	f033 0010 	bics.w	r0, r3, #16
 801a322:	d109      	bne.n	801a338 <_strtoul_l.constprop.0+0x3c>
 801a324:	2c30      	cmp	r4, #48	@ 0x30
 801a326:	d12c      	bne.n	801a382 <_strtoul_l.constprop.0+0x86>
 801a328:	7828      	ldrb	r0, [r5, #0]
 801a32a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a32e:	2858      	cmp	r0, #88	@ 0x58
 801a330:	d127      	bne.n	801a382 <_strtoul_l.constprop.0+0x86>
 801a332:	786c      	ldrb	r4, [r5, #1]
 801a334:	2310      	movs	r3, #16
 801a336:	3502      	adds	r5, #2
 801a338:	f04f 38ff 	mov.w	r8, #4294967295
 801a33c:	2600      	movs	r6, #0
 801a33e:	fbb8 f8f3 	udiv	r8, r8, r3
 801a342:	fb03 f908 	mul.w	r9, r3, r8
 801a346:	ea6f 0909 	mvn.w	r9, r9
 801a34a:	4630      	mov	r0, r6
 801a34c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a350:	f1bc 0f09 	cmp.w	ip, #9
 801a354:	d81c      	bhi.n	801a390 <_strtoul_l.constprop.0+0x94>
 801a356:	4664      	mov	r4, ip
 801a358:	42a3      	cmp	r3, r4
 801a35a:	dd2a      	ble.n	801a3b2 <_strtoul_l.constprop.0+0xb6>
 801a35c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a360:	d007      	beq.n	801a372 <_strtoul_l.constprop.0+0x76>
 801a362:	4580      	cmp	r8, r0
 801a364:	d322      	bcc.n	801a3ac <_strtoul_l.constprop.0+0xb0>
 801a366:	d101      	bne.n	801a36c <_strtoul_l.constprop.0+0x70>
 801a368:	45a1      	cmp	r9, r4
 801a36a:	db1f      	blt.n	801a3ac <_strtoul_l.constprop.0+0xb0>
 801a36c:	fb00 4003 	mla	r0, r0, r3, r4
 801a370:	2601      	movs	r6, #1
 801a372:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a376:	e7e9      	b.n	801a34c <_strtoul_l.constprop.0+0x50>
 801a378:	2c2b      	cmp	r4, #43	@ 0x2b
 801a37a:	bf04      	itt	eq
 801a37c:	782c      	ldrbeq	r4, [r5, #0]
 801a37e:	1c85      	addeq	r5, r0, #2
 801a380:	e7cd      	b.n	801a31e <_strtoul_l.constprop.0+0x22>
 801a382:	2b00      	cmp	r3, #0
 801a384:	d1d8      	bne.n	801a338 <_strtoul_l.constprop.0+0x3c>
 801a386:	2c30      	cmp	r4, #48	@ 0x30
 801a388:	bf0c      	ite	eq
 801a38a:	2308      	moveq	r3, #8
 801a38c:	230a      	movne	r3, #10
 801a38e:	e7d3      	b.n	801a338 <_strtoul_l.constprop.0+0x3c>
 801a390:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a394:	f1bc 0f19 	cmp.w	ip, #25
 801a398:	d801      	bhi.n	801a39e <_strtoul_l.constprop.0+0xa2>
 801a39a:	3c37      	subs	r4, #55	@ 0x37
 801a39c:	e7dc      	b.n	801a358 <_strtoul_l.constprop.0+0x5c>
 801a39e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a3a2:	f1bc 0f19 	cmp.w	ip, #25
 801a3a6:	d804      	bhi.n	801a3b2 <_strtoul_l.constprop.0+0xb6>
 801a3a8:	3c57      	subs	r4, #87	@ 0x57
 801a3aa:	e7d5      	b.n	801a358 <_strtoul_l.constprop.0+0x5c>
 801a3ac:	f04f 36ff 	mov.w	r6, #4294967295
 801a3b0:	e7df      	b.n	801a372 <_strtoul_l.constprop.0+0x76>
 801a3b2:	1c73      	adds	r3, r6, #1
 801a3b4:	d106      	bne.n	801a3c4 <_strtoul_l.constprop.0+0xc8>
 801a3b6:	2322      	movs	r3, #34	@ 0x22
 801a3b8:	f8ce 3000 	str.w	r3, [lr]
 801a3bc:	4630      	mov	r0, r6
 801a3be:	b932      	cbnz	r2, 801a3ce <_strtoul_l.constprop.0+0xd2>
 801a3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3c4:	b107      	cbz	r7, 801a3c8 <_strtoul_l.constprop.0+0xcc>
 801a3c6:	4240      	negs	r0, r0
 801a3c8:	2a00      	cmp	r2, #0
 801a3ca:	d0f9      	beq.n	801a3c0 <_strtoul_l.constprop.0+0xc4>
 801a3cc:	b106      	cbz	r6, 801a3d0 <_strtoul_l.constprop.0+0xd4>
 801a3ce:	1e69      	subs	r1, r5, #1
 801a3d0:	6011      	str	r1, [r2, #0]
 801a3d2:	e7f5      	b.n	801a3c0 <_strtoul_l.constprop.0+0xc4>
 801a3d4:	0801a661 	.word	0x0801a661

0801a3d8 <_strtoul_r>:
 801a3d8:	f7ff bf90 	b.w	801a2fc <_strtoul_l.constprop.0>

0801a3dc <_raise_r>:
 801a3dc:	291f      	cmp	r1, #31
 801a3de:	b538      	push	{r3, r4, r5, lr}
 801a3e0:	4605      	mov	r5, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	d904      	bls.n	801a3f0 <_raise_r+0x14>
 801a3e6:	2316      	movs	r3, #22
 801a3e8:	6003      	str	r3, [r0, #0]
 801a3ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ee:	bd38      	pop	{r3, r4, r5, pc}
 801a3f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a3f2:	b112      	cbz	r2, 801a3fa <_raise_r+0x1e>
 801a3f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a3f8:	b94b      	cbnz	r3, 801a40e <_raise_r+0x32>
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	f000 f830 	bl	801a460 <_getpid_r>
 801a400:	4622      	mov	r2, r4
 801a402:	4601      	mov	r1, r0
 801a404:	4628      	mov	r0, r5
 801a406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a40a:	f000 b817 	b.w	801a43c <_kill_r>
 801a40e:	2b01      	cmp	r3, #1
 801a410:	d00a      	beq.n	801a428 <_raise_r+0x4c>
 801a412:	1c59      	adds	r1, r3, #1
 801a414:	d103      	bne.n	801a41e <_raise_r+0x42>
 801a416:	2316      	movs	r3, #22
 801a418:	6003      	str	r3, [r0, #0]
 801a41a:	2001      	movs	r0, #1
 801a41c:	e7e7      	b.n	801a3ee <_raise_r+0x12>
 801a41e:	2100      	movs	r1, #0
 801a420:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a424:	4620      	mov	r0, r4
 801a426:	4798      	blx	r3
 801a428:	2000      	movs	r0, #0
 801a42a:	e7e0      	b.n	801a3ee <_raise_r+0x12>

0801a42c <raise>:
 801a42c:	4b02      	ldr	r3, [pc, #8]	@ (801a438 <raise+0xc>)
 801a42e:	4601      	mov	r1, r0
 801a430:	6818      	ldr	r0, [r3, #0]
 801a432:	f7ff bfd3 	b.w	801a3dc <_raise_r>
 801a436:	bf00      	nop
 801a438:	24000280 	.word	0x24000280

0801a43c <_kill_r>:
 801a43c:	b538      	push	{r3, r4, r5, lr}
 801a43e:	4d07      	ldr	r5, [pc, #28]	@ (801a45c <_kill_r+0x20>)
 801a440:	2300      	movs	r3, #0
 801a442:	4604      	mov	r4, r0
 801a444:	4608      	mov	r0, r1
 801a446:	4611      	mov	r1, r2
 801a448:	602b      	str	r3, [r5, #0]
 801a44a:	f7e8 f805 	bl	8002458 <_kill>
 801a44e:	1c43      	adds	r3, r0, #1
 801a450:	d102      	bne.n	801a458 <_kill_r+0x1c>
 801a452:	682b      	ldr	r3, [r5, #0]
 801a454:	b103      	cbz	r3, 801a458 <_kill_r+0x1c>
 801a456:	6023      	str	r3, [r4, #0]
 801a458:	bd38      	pop	{r3, r4, r5, pc}
 801a45a:	bf00      	nop
 801a45c:	2407767c 	.word	0x2407767c

0801a460 <_getpid_r>:
 801a460:	f7e7 bff2 	b.w	8002448 <_getpid>

0801a464 <_malloc_usable_size_r>:
 801a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a468:	1f18      	subs	r0, r3, #4
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	bfbc      	itt	lt
 801a46e:	580b      	ldrlt	r3, [r1, r0]
 801a470:	18c0      	addlt	r0, r0, r3
 801a472:	4770      	bx	lr

0801a474 <_init>:
 801a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a476:	bf00      	nop
 801a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a47a:	bc08      	pop	{r3}
 801a47c:	469e      	mov	lr, r3
 801a47e:	4770      	bx	lr

0801a480 <_fini>:
 801a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a482:	bf00      	nop
 801a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a486:	bc08      	pop	{r3}
 801a488:	469e      	mov	lr, r3
 801a48a:	4770      	bx	lr
