
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08019d28  08019d28  0001ad28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a288  0801a288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a290  0801a290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a294  0801a294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  0801a298  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006bb4  240002d0  0801a568  0001c2d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006e84  0801a568  0001ce84  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037d32  00000000  00000000  0001c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006b9c  00000000  00000000  00054030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002918  00000000  00000000  0005abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fcb  00000000  00000000  0005d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000aa3c  00000000  00000000  0005f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038ff8  00000000  00000000  00069eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d006  00000000  00000000  000a2ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021feed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c50c  00000000  00000000  0021ff30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0022c43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019d0c 	.word	0x08019d0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08019d0c 	.word	0x08019d0c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <Process_GGA_Sentence>:
#include "gps_tools.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

bool Process_GGA_Sentence(const char *gga_sentence, GPS_Data *gps_data) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	gps_data->valid = false;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

    // Check if it is a GGA sentence
    if (strncmp(gga_sentence, "$GPGGA", 6) != 0) {
 8000a78:	2206      	movs	r2, #6
 8000a7a:	4975      	ldr	r1, [pc, #468]	@ (8000c50 <Process_GGA_Sentence+0x1e8>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f016 fcc4 	bl	801740a <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <Process_GGA_Sentence+0x24>
        return false; // Not a GGA sentence
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e0dc      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Find the end of the sentence (length of checksum is always 2 characters + '*')
	const char *end_of_sentence = gga_sentence + strlen(gga_sentence) - 3;
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fc27 	bl	80002e0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	3b03      	subs	r3, #3
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]

	// Extract and calculate checksum
	uint8_t calculated_checksum = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e009      	b.n	8000abe <Process_GGA_Sentence+0x56>
		calculated_checksum ^= *p;
 8000aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aba:	3301      	adds	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3f1      	bcc.n	8000aaa <Process_GGA_Sentence+0x42>
	}

    // Convert the provided checksum to an integer
    uint8_t provided_checksum = (uint8_t)strtol(end_of_sentence + 1, NULL, 16);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f016 f8fe 	bl	8016cd0 <strtol>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]

    // Validate the checksum
    if (calculated_checksum != provided_checksum) {
 8000ad8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d001      	beq.n	8000ae6 <Process_GGA_Sentence+0x7e>
        return false; // Checksum mismatch
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e0af      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Process the GGA fields
    char *token;
    char *nmea_copy = strdup(gga_sentence);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f016 fc74 	bl	80173d4 <strdup>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
    token = strtok(nmea_copy, ",");
 8000af0:	4958      	ldr	r1, [pc, #352]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f016 fc9c 	bl	8017430 <strtok>
 8000af8:	6278      	str	r0, [r7, #36]	@ 0x24

    int field_number = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    float raw_latitude = 0.0;
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    float raw_longitude = 0.0;
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
    char lat_dir = 'N';
 8000b0a:	234e      	movs	r3, #78	@ 0x4e
 8000b0c:	75fb      	strb	r3, [r7, #23]
    char lon_dir = 'E';
 8000b0e:	2345      	movs	r3, #69	@ 0x45
 8000b10:	75bb      	strb	r3, [r7, #22]

    while (token != NULL) {
 8000b12:	e076      	b.n	8000c02 <Process_GGA_Sentence+0x19a>
        switch (field_number) {
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d86a      	bhi.n	8000bf2 <Process_GGA_Sentence+0x18a>
 8000b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <Process_GGA_Sentence+0xbc>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b41 	.word	0x08000b41
 8000b28:	08000b67 	.word	0x08000b67
 8000b2c:	08000b83 	.word	0x08000b83
 8000b30:	08000b93 	.word	0x08000b93
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bd3 	.word	0x08000bd3
            case 1: // Timestamp
                if (*token) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d04b      	beq.n	8000be0 <Process_GGA_Sentence+0x178>
                    sscanf(token, "%2d%2d%f", &gps_data->hours, &gps_data->minutes, &gps_data->seconds);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f103 020c 	add.w	r2, r3, #12
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f103 0110 	add.w	r1, r3, #16
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3314      	adds	r3, #20
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	493e      	ldr	r1, [pc, #248]	@ (8000c58 <Process_GGA_Sentence+0x1f0>)
 8000b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b60:	f016 fbc0 	bl	80172e4 <siscanf>
                }
                break;
 8000b64:	e03c      	b.n	8000be0 <Process_GGA_Sentence+0x178>
            case 2: // Latitude
                if (*token) {
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <Process_GGA_Sentence+0x17c>
                    raw_latitude = atof(token);
 8000b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b70:	f015 f9aa 	bl	8015ec8 <atof>
 8000b74:	eeb0 7b40 	vmov.f64	d7, d0
 8000b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7c:	edc7 7a07 	vstr	s15, [r7, #28]
                }
                break;
 8000b80:	e030      	b.n	8000be4 <Process_GGA_Sentence+0x17c>
            case 3: // Latitude direction (N/S)
                if (*token) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02e      	beq.n	8000be8 <Process_GGA_Sentence+0x180>
                    lat_dir = *token;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8000b90:	e02a      	b.n	8000be8 <Process_GGA_Sentence+0x180>
            case 4: // Longitude
                if (*token) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <Process_GGA_Sentence+0x184>
                    raw_longitude = atof(token);
 8000b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b9c:	f015 f994 	bl	8015ec8 <atof>
 8000ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	edc7 7a06 	vstr	s15, [r7, #24]
                }
                break;
 8000bac:	e01e      	b.n	8000bec <Process_GGA_Sentence+0x184>
            case 5: // Longitude direction (E/W)
                if (*token) {
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01c      	beq.n	8000bf0 <Process_GGA_Sentence+0x188>
                    lon_dir = *token;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75bb      	strb	r3, [r7, #22]
                }
                break;
 8000bbc:	e018      	b.n	8000bf0 <Process_GGA_Sentence+0x188>
            case 6: // Fix status
                gps_data->valid = (*token != '0');
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b30      	cmp	r3, #48	@ 0x30
 8000bc4:	bf14      	ite	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	2300      	moveq	r3, #0
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
                break;
 8000bd0:	e00f      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
            case 7: // Number of satellites
				gps_data->num_satellites = atoi(token);
 8000bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000bd4:	f015 f97b 	bl	8015ece <atoi>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	619a      	str	r2, [r3, #24]
				break;
 8000bde:	e008      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be0:	bf00      	nop
 8000be2:	e006      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be4:	bf00      	nop
 8000be6:	e004      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be8:	bf00      	nop
 8000bea:	e002      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bf0:	bf00      	nop
        }
        token = strtok(NULL, ",");
 8000bf2:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f016 fc1b 	bl	8017430 <strtok>
 8000bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        field_number++;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
    while (token != NULL) {
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d185      	bne.n	8000b14 <Process_GGA_Sentence+0xac>
    }

    free(nmea_copy);
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f015 f96d 	bl	8015ee8 <free>

    // Convert to decimal format if the sentence is valid
    if (gps_data->valid) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <Process_GGA_Sentence+0x1da>
        gps_data->latitude = convert_to_decimal(raw_latitude, lat_dir);
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c1e:	f000 f81f 	bl	8000c60 <convert_to_decimal>
 8000c22:	eef0 7a40 	vmov.f32	s15, s0
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	edc3 7a01 	vstr	s15, [r3, #4]
        gps_data->longitude = convert_to_decimal(raw_longitude, lon_dir);
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c34:	f000 f814 	bl	8000c60 <convert_to_decimal>
 8000c38:	eef0 7a40 	vmov.f32	s15, s0
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return gps_data->valid;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08019d28 	.word	0x08019d28
 8000c54:	08019d30 	.word	0x08019d30
 8000c58:	08019d34 	.word	0x08019d34
 8000c5c:	00000000 	.word	0x00000000

08000c60 <convert_to_decimal>:

float convert_to_decimal(float nmea_coordinate, char direction) {
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	70fb      	strb	r3, [r7, #3]
    int degrees = (int)(nmea_coordinate / 100);
 8000c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c72:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000d00 <convert_to_decimal+0xa0>
 8000c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
 8000c82:	613b      	str	r3, [r7, #16]
    float minutes = nmea_coordinate - (degrees * 100);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2264      	movs	r2, #100	@ 0x64
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9c:	edc7 7a03 	vstr	s15, [r7, #12]
    float decimal = degrees + minutes / 60.0;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb2:	ed9f 4b11 	vldr	d4, [pc, #68]	@ 8000cf8 <convert_to_decimal+0x98>
 8000cb6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (direction == 'S' || direction == 'W') {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b53      	cmp	r3, #83	@ 0x53
 8000cca:	d002      	beq.n	8000cd2 <convert_to_decimal+0x72>
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b57      	cmp	r3, #87	@ 0x57
 8000cd0:	d105      	bne.n	8000cde <convert_to_decimal+0x7e>
        decimal *= -1;
 8000cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd6:	eef1 7a67 	vneg.f32	s15, s15
 8000cda:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return decimal;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	ee07 3a90 	vmov	s15, r3
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	404e0000 	.word	0x404e0000
 8000d00:	42c80000 	.word	0x42c80000

08000d04 <LSM303AGR_Init>:
 *      Author: Tyler
 */

#include "lsm303agr.h"

HAL_StatusTypeDef LSM303AGR_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // set accelerometer to 50Hz, normal power mode, all axes enabled
    data = 0x57; // 01010111
 8000d0c:	2357      	movs	r3, #87	@ 0x57
 8000d0e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, REG_CTRL_REG1_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2220      	movs	r2, #32
 8000d22:	2132      	movs	r1, #50	@ 0x32
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f004 fb0f 	bl	8005348 <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <LSM303AGR_Init+0x30>
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e014      	b.n	8000d5e <LSM303AGR_Init+0x5a>
    }

    // set magnetometer to 50Hz, normal power mode, continuous read
    data = 0x88; // 10001000
 8000d34:	2388      	movs	r3, #136	@ 0x88
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, CFG_REG_A_M, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2260      	movs	r2, #96	@ 0x60
 8000d4a:	2132      	movs	r1, #50	@ 0x32
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f004 fafb 	bl	8005348 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <LSM303AGR_Init+0x58>
            return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LSM303AGR_Init+0x5a>
        }
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

    // Trigger LTDC to refresh the display
    HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);  // Assuming hltdc is the LTDC handle
}

int _write(int file, char *ptr, int len) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);  // Transmit data via USB CDC
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f014 fc15 	bl	80155a8 <CDC_Transmit_FS>
    return len;
 8000d7e:	687b      	ldr	r3, [r7, #4]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d8c:	f000 fcf4 	bl	8001778 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f001 fc5c 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f834 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fb46 	bl	8001428 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000d9c:	f000 fb1c 	bl	80013d8 <MX_BDMA_Init>
  MX_LTDC_Init();
 8000da0:	f000 f8ee 	bl	8000f80 <MX_LTDC_Init>
  MX_SPI1_Init();
 8000da4:	f000 f9ca 	bl	800113c <MX_SPI1_Init>
  MX_I2C4_Init();
 8000da8:	f000 f8aa 	bl	8000f00 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000dac:	f000 f99a 	bl	80010e4 <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8000db0:	f000 fa1a 	bl	80011e8 <MX_TIM1_Init>
  MX_UART8_Init();
 8000db4:	f000 fac4 	bl	8001340 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();          // Initialize USB CDC
 8000db8:	f014 fb36 	bl	8015428 <MX_USB_DEVICE_Init>

  // start receiving data on UART8 via interrupt, one byte at a time
  HAL_UART_Receive_IT(&huart8, (uint8_t*)rx_buffer, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	490a      	ldr	r1, [pc, #40]	@ (8000de8 <main+0x60>)
 8000dc0:	480a      	ldr	r0, [pc, #40]	@ (8000dec <main+0x64>)
 8000dc2:	f00b feed 	bl	800cba0 <HAL_UART_Receive_IT>

  LSM303AGR_Init(&hi2c4);
 8000dc6:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <main+0x68>)
 8000dc8:	f7ff ff9c 	bl	8000d04 <LSM303AGR_Init>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dcc:	f011 fdcc 	bl	8012968 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <main+0x6c>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <main+0x70>)
 8000dd6:	f011 fe11 	bl	80129fc <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <main+0x74>)
 8000dde:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de0:	f011 fde6 	bl	80129b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <main+0x5c>
 8000de8:	24000690 	.word	0x24000690
 8000dec:	240005f8 	.word	0x240005f8
 8000df0:	240002ec 	.word	0x240002ec
 8000df4:	08019dec 	.word	0x08019dec
 8000df8:	08001711 	.word	0x08001711
 8000dfc:	2400068c 	.word	0x2400068c

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09c      	sub	sp, #112	@ 0x70
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0a:	224c      	movs	r2, #76	@ 0x4c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f016 fad7 	bl	80173c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f016 fad1 	bl	80173c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f007 fc27 	bl	8008674 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <SystemClock_Config+0xf8>)
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	4a32      	ldr	r2, [pc, #200]	@ (8000ef8 <SystemClock_Config+0xf8>)
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e36:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <SystemClock_Config+0xf8>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <SystemClock_Config+0xfc>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e48:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <SystemClock_Config+0xfc>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <SystemClock_Config+0xfc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5c:	bf00      	nop
 8000e5e:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <SystemClock_Config+0xfc>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e6a:	d1f8      	bne.n	8000e5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2340      	movs	r3, #64	@ 0x40
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e86:	2305      	movs	r3, #5
 8000e88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000e8a:	2330      	movs	r3, #48	@ 0x30
 8000e8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f007 fce6 	bl	800887c <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000eb6:	f000 fc9a 	bl	80017ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	233f      	movs	r3, #63	@ 0x3f
 8000ebc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ece:	2340      	movs	r3, #64	@ 0x40
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 f926 	bl	8009130 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000eea:	f000 fc80 	bl	80017ee <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3770      	adds	r7, #112	@ 0x70
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	58000400 	.word	0x58000400
 8000efc:	58024800 	.word	0x58024800

08000f00 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <MX_I2C4_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f7c <MX_I2C4_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f3c:	f004 f968 	bl	8005210 <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 fc52 	bl	80017ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f4e:	f005 fdb3 	bl	8006ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 fc49 	bl	80017ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f60:	f005 fdf5 	bl	8006b4e <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fc40 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240002ec 	.word	0x240002ec
 8000f78:	58001c00 	.word	0x58001c00
 8000f7c:	00707cbb 	.word	0x00707cbb

08000f80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09a      	sub	sp, #104	@ 0x68
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f8a:	2234      	movs	r2, #52	@ 0x34
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f016 fa17 	bl	80173c2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2234      	movs	r2, #52	@ 0x34
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f016 fa11 	bl	80173c2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fa2:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <MX_LTDC_Init+0x160>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fac:	4b4b      	ldr	r3, [pc, #300]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000fbe:	4b47      	ldr	r3, [pc, #284]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000fc4:	4b45      	ldr	r3, [pc, #276]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fca:	4b44      	ldr	r3, [pc, #272]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fcc:	220e      	movs	r2, #14
 8000fce:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 494;
 8000fd6:	4b41      	ldr	r3, [pc, #260]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fd8:	f44f 72f7 	mov.w	r2, #494	@ 0x1ee
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000fde:	4b3f      	ldr	r3, [pc, #252]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fe0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 500;
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000fe8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000ff0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ff6:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001006:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <MX_LTDC_Init+0x15c>)
 8001010:	f005 fdea 	bl	8006be8 <HAL_LTDC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800101a:	f000 fbe8 	bl	80017ee <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800102e:	2302      	movs	r3, #2
 8001030:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800103a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001040:	2305      	movs	r3, #5
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001062:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	481c      	ldr	r0, [pc, #112]	@ (80010dc <MX_LTDC_Init+0x15c>)
 800106c:	f005 fe8c 	bl	8006d88 <HAL_LTDC_ConfigLayer>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001076:	f000 fbba 	bl	80017ee <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800109c:	2305      	movs	r3, #5
 800109e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	2201      	movs	r2, #1
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_LTDC_Init+0x15c>)
 80010c6:	f005 fe5f 	bl	8006d88 <HAL_LTDC_ConfigLayer>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80010d0:	f000 fb8d 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3768      	adds	r7, #104	@ 0x68
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	24000430 	.word	0x24000430
 80010e0:	50001000 	.word	0x50001000

080010e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <MX_QUADSPI_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 80010f0:	22ff      	movs	r2, #255	@ 0xff
 80010f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 8001102:	2201      	movs	r2, #1
 8001104:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_QUADSPI_Init+0x50>)
 8001120:	f007 faf2 	bl	8008708 <HAL_QSPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800112a:	f000 fb60 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240004d8 	.word	0x240004d8
 8001138:	52005000 	.word	0x52005000

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001142:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <MX_SPI1_Init+0xa8>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001168:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800116c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_SPI1_Init+0xa4>)
 80011cc:	f00a f9aa 	bl	800b524 <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 fb0a 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24000524 	.word	0x24000524
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b09a      	sub	sp, #104	@ 0x68
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	222c      	movs	r2, #44	@ 0x2c
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f016 f8cd 	bl	80173c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001228:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <MX_TIM1_Init+0x150>)
 800122a:	4a44      	ldr	r2, [pc, #272]	@ (800133c <MX_TIM1_Init+0x154>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001230:	2201      	movs	r2, #1
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b40      	ldr	r3, [pc, #256]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800123a:	4b3f      	ldr	r3, [pc, #252]	@ (8001338 <MX_TIM1_Init+0x150>)
 800123c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001248:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <MX_TIM1_Init+0x150>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001254:	4838      	ldr	r0, [pc, #224]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001256:	f00a faa4 	bl	800b7a2 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001260:	f000 fac5 	bl	80017ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001268:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800126e:	4619      	mov	r1, r3
 8001270:	4831      	ldr	r0, [pc, #196]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001272:	f00a fde1 	bl	800be38 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800127c:	f000 fab7 	bl	80017ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001280:	482d      	ldr	r0, [pc, #180]	@ (8001338 <MX_TIM1_Init+0x150>)
 8001282:	f00a fb5d 	bl	800b940 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800128c:	f000 faaf 	bl	80017ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4825      	ldr	r0, [pc, #148]	@ (8001338 <MX_TIM1_Init+0x150>)
 80012a4:	f00b fb02 	bl	800c8ac <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ae:	f000 fa9e 	bl	80017ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	@ 0x60
 80012b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4818      	ldr	r0, [pc, #96]	@ (8001338 <MX_TIM1_Init+0x150>)
 80012d8:	f00a fc9a 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012e2:	f000 fa84 	bl	80017ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001308:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_TIM1_Init+0x150>)
 800131c:	f00b fb54 	bl	800c9c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001326:	f000 fa62 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800132a:	4803      	ldr	r0, [pc, #12]	@ (8001338 <MX_TIM1_Init+0x150>)
 800132c:	f000 feba 	bl	80020a4 <HAL_TIM_MspPostInit>

}
 8001330:	bf00      	nop
 8001332:	3768      	adds	r7, #104	@ 0x68
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	240005ac 	.word	0x240005ac
 800133c:	40010000 	.word	0x40010000

08001340 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <MX_UART8_Init+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_UART8_Init+0x90>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_UART8_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_UART8_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_UART8_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_UART8_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001388:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_UART8_Init+0x90>)
 800138a:	f00b fbb9 	bl	800cb00 <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fa2b 	bl	80017ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001398:	2100      	movs	r1, #0
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_UART8_Init+0x90>)
 800139c:	f00d fe85 	bl	800f0aa <HAL_UARTEx_SetTxFifoThreshold>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80013a6:	f000 fa22 	bl	80017ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <MX_UART8_Init+0x90>)
 80013ae:	f00d feba 	bl	800f126 <HAL_UARTEx_SetRxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 fa19 	bl	80017ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_UART8_Init+0x90>)
 80013be:	f00d fe3b 	bl	800f038 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fa11 	bl	80017ee <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	240005f8 	.word	0x240005f8
 80013d4:	40007c00 	.word	0x40007c00

080013d8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_BDMA_Init+0x4c>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <MX_BDMA_Init+0x4c>)
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_BDMA_Init+0x4c>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	2081      	movs	r0, #129	@ 0x81
 8001402:	f001 fa67 	bl	80028d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001406:	2081      	movs	r0, #129	@ 0x81
 8001408:	f001 fa7e 	bl	8002908 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2105      	movs	r1, #5
 8001410:	2082      	movs	r0, #130	@ 0x82
 8001412:	f001 fa5f 	bl	80028d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8001416:	2082      	movs	r0, #130	@ 0x82
 8001418:	f001 fa76 	bl	8002908 <HAL_NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58024400 	.word	0x58024400

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143e:	4b81      	ldr	r3, [pc, #516]	@ (8001644 <MX_GPIO_Init+0x21c>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a7f      	ldr	r2, [pc, #508]	@ (8001644 <MX_GPIO_Init+0x21c>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b7d      	ldr	r3, [pc, #500]	@ (8001644 <MX_GPIO_Init+0x21c>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145c:	4b79      	ldr	r3, [pc, #484]	@ (8001644 <MX_GPIO_Init+0x21c>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a78      	ldr	r2, [pc, #480]	@ (8001644 <MX_GPIO_Init+0x21c>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <MX_GPIO_Init+0x21c>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b72      	ldr	r3, [pc, #456]	@ (8001644 <MX_GPIO_Init+0x21c>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a70      	ldr	r2, [pc, #448]	@ (8001644 <MX_GPIO_Init+0x21c>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b6e      	ldr	r3, [pc, #440]	@ (8001644 <MX_GPIO_Init+0x21c>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b6a      	ldr	r3, [pc, #424]	@ (8001644 <MX_GPIO_Init+0x21c>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a69      	ldr	r2, [pc, #420]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b66      	ldr	r3, [pc, #408]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	4a61      	ldr	r2, [pc, #388]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	4a5a      	ldr	r2, [pc, #360]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e4:	4b57      	ldr	r3, [pc, #348]	@ (8001644 <MX_GPIO_Init+0x21c>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_PA2_Pin|LCD_CS_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f24c 0104 	movw	r1, #49156	@ 0xc004
 80014f8:	4853      	ldr	r0, [pc, #332]	@ (8001648 <MX_GPIO_Init+0x220>)
 80014fa:	f003 fe6f 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_PC4_GPIO_Port, TP_PC4_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2110      	movs	r1, #16
 8001502:	4852      	ldr	r0, [pc, #328]	@ (800164c <MX_GPIO_Init+0x224>)
 8001504:	f003 fe6a 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800150e:	4850      	ldr	r0, [pc, #320]	@ (8001650 <MX_GPIO_Init+0x228>)
 8001510:	f003 fe64 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|GPS_ON_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800151a:	484e      	ldr	r0, [pc, #312]	@ (8001654 <MX_GPIO_Init+0x22c>)
 800151c:	f003 fe5e 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TP_PA2_Pin LCD_CS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = TP_PA2_Pin|LCD_CS_Pin|LORA_NSS_Pin;
 8001520:	f24c 0304 	movw	r3, #49156	@ 0xc004
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4843      	ldr	r0, [pc, #268]	@ (8001648 <MX_GPIO_Init+0x220>)
 800153a:	f003 fc9f 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_PC4_Pin */
  GPIO_InitStruct.Pin = TP_PC4_Pin;
 800153e:	2310      	movs	r3, #16
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TP_PC4_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	483d      	ldr	r0, [pc, #244]	@ (800164c <MX_GPIO_Init+0x224>)
 8001556:	f003 fc91 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800155a:	2320      	movs	r3, #32
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4837      	ldr	r0, [pc, #220]	@ (800164c <MX_GPIO_Init+0x224>)
 800156e:	f003 fc85 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4831      	ldr	r0, [pc, #196]	@ (8001650 <MX_GPIO_Init+0x228>)
 800158c:	f003 fc76 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin GPS_ON_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|GPS_ON_Pin;
 8001590:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	482a      	ldr	r0, [pc, #168]	@ (8001654 <MX_GPIO_Init+0x22c>)
 80015aa:	f003 fc67 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_BUSY_Pin;
 80015ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4824      	ldr	r0, [pc, #144]	@ (8001654 <MX_GPIO_Init+0x22c>)
 80015c4:	f003 fc5a 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MAG_Pin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80015c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	481d      	ldr	r0, [pc, #116]	@ (8001654 <MX_GPIO_Init+0x22c>)
 80015e0:	f003 fc4c 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : XL_INT0_Pin XL_INT1_Pin */
  GPIO_InitStruct.Pin = XL_INT0_Pin|XL_INT1_Pin;
 80015e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4817      	ldr	r0, [pc, #92]	@ (8001658 <MX_GPIO_Init+0x230>)
 80015fc:	f003 fc3e 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT_STAT_Pin FG_NALERT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin|FG_NALERT_Pin;
 8001600:	2330      	movs	r3, #48	@ 0x30
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4811      	ldr	r0, [pc, #68]	@ (8001658 <MX_GPIO_Init+0x230>)
 8001614:	f003 fc32 	bl	8004e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;    // Alternate Function Push-Pull
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;        // No Pull-up or Pull-down
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Adjust speed as needed
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1; // TIM1_CH1 is mapped to AF1
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_GPIO_Init+0x228>)
 8001636:	f003 fc21 	bl	8004e7c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	@ 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	58024400 	.word	0x58024400
 8001648:	58020000 	.word	0x58020000
 800164c:	58020800 	.word	0x58020800
 8001650:	58021000 	.word	0x58021000
 8001654:	58020400 	.word	0x58020400
 8001658:	58020c00 	.word	0x58020c00

0800165c <Blink_PC4>:

/* USER CODE BEGIN 4 */

void Blink_PC4(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, TP_PC4_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <Blink_PC4+0x28>)
 8001666:	f003 fdb9 	bl	80051dc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f001 f84a 	bl	8002704 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, TP_PC4_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <Blink_PC4+0x28>)
 8001676:	f003 fdb1 	bl	80051dc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800167a:	2064      	movs	r0, #100	@ 0x64
 800167c:	f001 f842 	bl	8002704 <HAL_Delay>

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58020800 	.word	0x58020800

08001688 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] == '$') {
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_UART_RxCpltCallback+0x78>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b24      	cmp	r3, #36	@ 0x24
 8001696:	d103      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0x18>
		// Start of a new GGA sentence, reset the index
		gga_index = 0;
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e025      	b.n	80016ec <HAL_UART_RxCpltCallback+0x64>
	} else if (rx_buffer[0] == '\r') {
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_UART_RxCpltCallback+0x78>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b0d      	cmp	r3, #13
 80016a6:	d10e      	bne.n	80016c6 <HAL_UART_RxCpltCallback+0x3e>
//		if (gga_index < GGA_BUFFER_SIZE) {
//			gga_buffer[gga_index] = '\0'; // Null-terminate for string processing
//		}

		// Process the complete GGA sentence
		bool success = Process_GGA_Sentence(gga_buffer, &gps_data);
 80016a8:	4917      	ldr	r1, [pc, #92]	@ (8001708 <HAL_UART_RxCpltCallback+0x80>)
 80016aa:	4818      	ldr	r0, [pc, #96]	@ (800170c <HAL_UART_RxCpltCallback+0x84>)
 80016ac:	f7ff f9dc 	bl	8000a68 <Process_GGA_Sentence>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
		if (success) Blink_PC4();
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_UART_RxCpltCallback+0x36>
 80016ba:	f7ff ffcf 	bl	800165c <Blink_PC4>

		// Reset the index to start a new sentence
		gga_index = 0;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e012      	b.n	80016ec <HAL_UART_RxCpltCallback+0x64>
	} else if (gga_index < GGA_BUFFER_SIZE) {
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b63      	cmp	r3, #99	@ 0x63
 80016cc:	d80b      	bhi.n	80016e6 <HAL_UART_RxCpltCallback+0x5e>
		// accumulate the received character if we haven't reached the buffer size
		gga_buffer[gga_index++] = rx_buffer[0];
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	b2d1      	uxtb	r1, r2
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 80016d8:	7011      	strb	r1, [r2, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_UART_RxCpltCallback+0x78>)
 80016de:	7819      	ldrb	r1, [r3, #0]
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_UART_RxCpltCallback+0x84>)
 80016e2:	5499      	strb	r1, [r3, r2]
 80016e4:	e002      	b.n	80016ec <HAL_UART_RxCpltCallback+0x64>
	} else {
		// there's something wrong, reset the index to 0 to start the data buffer over
		gga_index = 0;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_UART_RxCpltCallback+0x7c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	}

	// re-enable the interrupt to receive the next byte
	HAL_UART_Receive_IT(huart, rx_buffer, 1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	4904      	ldr	r1, [pc, #16]	@ (8001700 <HAL_UART_RxCpltCallback+0x78>)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f00b fa55 	bl	800cba0 <HAL_UART_Receive_IT>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000690 	.word	0x24000690
 8001704:	240006f8 	.word	0x240006f8
 8001708:	240006fc 	.word	0x240006fc
 800170c:	24000694 	.word	0x24000694

08001710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001718:	f013 fe86 	bl	8015428 <MX_USB_DEVICE_Init>
//		} else {
//			Blink_PC4();
//			Blink_PC4();
//		}
		MAX17048_BatteryData battery_data;
		if (MAX17048_Read_Battery(&hi2c4, &battery_data) == HAL_OK) {
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	4812      	ldr	r0, [pc, #72]	@ (800176c <StartDefaultTask+0x5c>)
 8001724:	f000 f86a 	bl	80017fc <MAX17048_Read_Battery>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d114      	bne.n	8001758 <StartDefaultTask+0x48>
			Blink_PC4();
 800172e:	f7ff ff95 	bl	800165c <Blink_PC4>
			printf("state of charge: %d%%\r\n", (int)battery_data.soc);
 8001732:	edd7 7a02 	vldr	s15, [r7, #8]
 8001736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173a:	ee17 1a90 	vmov	r1, s15
 800173e:	480c      	ldr	r0, [pc, #48]	@ (8001770 <StartDefaultTask+0x60>)
 8001740:	f015 fd9e 	bl	8017280 <iprintf>
			printf("charge rate: %d%%/hour\r\n", (int)battery_data.chg_rate);
 8001744:	edd7 7a03 	vldr	s15, [r7, #12]
 8001748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174c:	ee17 1a90 	vmov	r1, s15
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <StartDefaultTask+0x64>)
 8001752:	f015 fd95 	bl	8017280 <iprintf>
 8001756:	e003      	b.n	8001760 <StartDefaultTask+0x50>

		} else {
			Blink_PC4();
 8001758:	f7ff ff80 	bl	800165c <Blink_PC4>
			Blink_PC4();
 800175c:	f7ff ff7e 	bl	800165c <Blink_PC4>
		}
		HAL_Delay(600);
 8001760:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001764:	f000 ffce 	bl	8002704 <HAL_Delay>
	{
 8001768:	e7d8      	b.n	800171c <StartDefaultTask+0xc>
 800176a:	bf00      	nop
 800176c:	240002ec 	.word	0x240002ec
 8001770:	08019d4c 	.word	0x08019d4c
 8001774:	08019d64 	.word	0x08019d64

08001778 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800178a:	f001 f8cb 	bl	8002924 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001792:	2300      	movs	r3, #0
 8001794:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800179a:	231f      	movs	r3, #31
 800179c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800179e:	2387      	movs	r3, #135	@ 0x87
 80017a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017a6:	2300      	movs	r3, #0
 80017a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017ba:	463b      	mov	r3, r7
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 f8e9 	bl	8002994 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017c2:	2004      	movs	r0, #4
 80017c4:	f001 f8c6 	bl	8002954 <HAL_MPU_Enable>

}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e0:	d101      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017e2:	f000 ff6f 	bl	80026c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f2:	b672      	cpsid	i
}
 80017f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <Error_Handler+0x8>
	...

080017fc <MAX17048_Read_Battery>:
 *      Author: Tyler
 */

#include "max17048.h"

HAL_StatusTypeDef MAX17048_Read_Battery(I2C_HandleTypeDef *hi2c, MAX17048_BatteryData *data) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int16_t signed_combined;  // Use signed 16-bit for CRATE
    uint16_t combined;

    // Read SOC register
    if (HAL_I2C_Mem_Read(hi2c, ADDRESS_FG, REG_SOC, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100) != HAL_OK) {
 8001806:	2364      	movs	r3, #100	@ 0x64
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2302      	movs	r3, #2
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2301      	movs	r3, #1
 8001816:	2204      	movs	r2, #4
 8001818:	216c      	movs	r1, #108	@ 0x6c
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f003 fea8 	bl	8005570 <HAL_I2C_Mem_Read>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MAX17048_Read_Battery+0x2e>
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e03a      	b.n	80018a0 <MAX17048_Read_Battery+0xa4>
    }

    combined = (buffer[0] << 8) | buffer[1];
 800182a:	7a3b      	ldrb	r3, [r7, #8]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	7a7b      	ldrb	r3, [r7, #9]
 8001832:	b21b      	sxth	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b21b      	sxth	r3, r3
 8001838:	81fb      	strh	r3, [r7, #14]
    data->soc = (float)combined / 256.0f;
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001844:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80018a8 <MAX17048_Read_Battery+0xac>
 8001848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a00 	vstr	s15, [r3]

    // Read charge rate register (CRATE)
    if (HAL_I2C_Mem_Read(hi2c, ADDRESS_FG, REG_CRATE, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100) != HAL_OK) {
 8001852:	2364      	movs	r3, #100	@ 0x64
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2302      	movs	r3, #2
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	2216      	movs	r2, #22
 8001864:	216c      	movs	r1, #108	@ 0x6c
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f003 fe82 	bl	8005570 <HAL_I2C_Mem_Read>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MAX17048_Read_Battery+0x7a>
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e014      	b.n	80018a0 <MAX17048_Read_Battery+0xa4>
    }

    // Combine the bytes and interpret as a signed 16-bit integer
    signed_combined = (int16_t)((buffer[0] << 8) | buffer[1]);
 8001876:	7a3b      	ldrb	r3, [r7, #8]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	7a7b      	ldrb	r3, [r7, #9]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	81bb      	strh	r3, [r7, #12]

    // Apply scaling factor
    data->chg_rate = (float)signed_combined * 0.208f;
 8001884:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80018ac <MAX17048_Read_Battery+0xb0>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edc3 7a01 	vstr	s15, [r3, #4]

    return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	43800000 	.word	0x43800000
 80018ac:	3e54fdf4 	.word	0x3e54fdf4

080018b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_MspInit+0x38>)
 80018b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_MspInit+0x38>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_MspInit+0x38>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	210f      	movs	r1, #15
 80018d8:	f06f 0001 	mvn.w	r0, #1
 80018dc:	f000 fffa 	bl	80028d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	58024400 	.word	0x58024400

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0ba      	sub	sp, #232	@ 0xe8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	22c0      	movs	r2, #192	@ 0xc0
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f015 fd58 	bl	80173c2 <memset>
  if(hi2c->Instance==I2C4)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a59      	ldr	r2, [pc, #356]	@ (8001a7c <HAL_I2C_MspInit+0x190>)
 8001918:	4293      	cmp	r3, r2
 800191a:	f040 80ab 	bne.w	8001a74 <HAL_I2C_MspInit+0x188>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800191e:	f04f 0210 	mov.w	r2, #16
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4618      	mov	r0, r3
 8001936:	f007 ffc9 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001940:	f7ff ff55 	bl	80017ee <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001944:	4b4e      	ldr	r3, [pc, #312]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 8001946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001954:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001962:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001970:	2301      	movs	r3, #1
 8001972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800197c:	2304      	movs	r3, #4
 800197e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001986:	4619      	mov	r1, r3
 8001988:	483e      	ldr	r0, [pc, #248]	@ (8001a84 <HAL_I2C_MspInit+0x198>)
 800198a:	f003 fa77 	bl	8004e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800198e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 8001990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001994:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 8001996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800199a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800199e:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <HAL_I2C_MspInit+0x194>)
 80019a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 80019ac:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019ae:	4a37      	ldr	r2, [pc, #220]	@ (8001a8c <HAL_I2C_MspInit+0x1a0>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 80019b2:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019b4:	220d      	movs	r2, #13
 80019b6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b8:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019be:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ca:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80019e4:	4828      	ldr	r0, [pc, #160]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019e6:	f001 f815 	bl	8002a14 <HAL_DMA_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 80019f0:	f7ff fefd 	bl	80017ee <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a24      	ldr	r2, [pc, #144]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019fa:	4a23      	ldr	r2, [pc, #140]	@ (8001a88 <HAL_I2C_MspInit+0x19c>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a02:	4a24      	ldr	r2, [pc, #144]	@ (8001a94 <HAL_I2C_MspInit+0x1a8>)
 8001a04:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a08:	220e      	movs	r2, #14
 8001a0a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001a38:	4815      	ldr	r0, [pc, #84]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a3a:	f000 ffeb 	bl	8002a14 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_MspInit+0x15c>
    {
      Error_Handler();
 8001a44:	f7ff fed3 	bl	80017ee <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a4e:	4a10      	ldr	r2, [pc, #64]	@ (8001a90 <HAL_I2C_MspInit+0x1a4>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2105      	movs	r1, #5
 8001a58:	205f      	movs	r0, #95	@ 0x5f
 8001a5a:	f000 ff3b 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001a5e:	205f      	movs	r0, #95	@ 0x5f
 8001a60:	f000 ff52 	bl	8002908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	2060      	movs	r0, #96	@ 0x60
 8001a6a:	f000 ff33 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001a6e:	2060      	movs	r0, #96	@ 0x60
 8001a70:	f000 ff4a 	bl	8002908 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001a74:	bf00      	nop
 8001a76:	37e8      	adds	r7, #232	@ 0xe8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58001c00 	.word	0x58001c00
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020c00 	.word	0x58020c00
 8001a88:	24000340 	.word	0x24000340
 8001a8c:	58025408 	.word	0x58025408
 8001a90:	240003b8 	.word	0x240003b8
 8001a94:	5802541c 	.word	0x5802541c

08001a98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0be      	sub	sp, #248	@ 0xf8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	22c0      	movs	r2, #192	@ 0xc0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f015 fc82 	bl	80173c2 <memset>
  if(hltdc->Instance==LTDC)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8d      	ldr	r2, [pc, #564]	@ (8001cf8 <HAL_LTDC_MspInit+0x260>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f040 8112 	bne.w	8001cee <HAL_LTDC_MspInit+0x256>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001aca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 6;
 8001ada:	2306      	movs	r3, #6
 8001adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af4:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 fee4 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001b0a:	f7ff fe70 	bl	80017ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b14:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001b1e:	4b77      	ldr	r3, [pc, #476]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b73      	ldr	r3, [pc, #460]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b32:	4a72      	ldr	r2, [pc, #456]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b50:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5a:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	4b64      	ldr	r3, [pc, #400]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6e:	4a63      	ldr	r2, [pc, #396]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b78:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b96:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba4:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001baa:	4a54      	ldr	r2, [pc, #336]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb4:	4b51      	ldr	r3, [pc, #324]	@ (8001cfc <HAL_LTDC_MspInit+0x264>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_B3
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	23c1      	movs	r3, #193	@ 0xc1
 8001bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bda:	230e      	movs	r3, #14
 8001bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4846      	ldr	r0, [pc, #280]	@ (8001d00 <HAL_LTDC_MspInit+0x268>)
 8001be8:	f003 f948 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bec:	2378      	movs	r3, #120	@ 0x78
 8001bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c04:	230e      	movs	r3, #14
 8001c06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	483c      	ldr	r0, [pc, #240]	@ (8001d04 <HAL_LTDC_MspInit+0x26c>)
 8001c12:	f003 f933 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4833      	ldr	r0, [pc, #204]	@ (8001d08 <HAL_LTDC_MspInit+0x270>)
 8001c3c:	f003 f91e 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001c40:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c5a:	230e      	movs	r3, #14
 8001c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4829      	ldr	r0, [pc, #164]	@ (8001d0c <HAL_LTDC_MspInit+0x274>)
 8001c68:	f003 f908 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001c6c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c86:	230e      	movs	r3, #14
 8001c88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c90:	4619      	mov	r1, r3
 8001c92:	481d      	ldr	r0, [pc, #116]	@ (8001d08 <HAL_LTDC_MspInit+0x270>)
 8001c94:	f003 f8f2 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001cb2:	230d      	movs	r3, #13
 8001cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4811      	ldr	r0, [pc, #68]	@ (8001d04 <HAL_LTDC_MspInit+0x26c>)
 8001cc0:	f003 f8dc 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cdc:	230e      	movs	r3, #14
 8001cde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <HAL_LTDC_MspInit+0x278>)
 8001cea:	f003 f8c7 	bl	8004e7c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001cee:	bf00      	nop
 8001cf0:	37f8      	adds	r7, #248	@ 0xf8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	50001000 	.word	0x50001000
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58020800 	.word	0x58020800
 8001d04:	58020000 	.word	0x58020000
 8001d08:	58020400 	.word	0x58020400
 8001d0c:	58021000 	.word	0x58021000
 8001d10:	58020c00 	.word	0x58020c00

08001d14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0be      	sub	sp, #248	@ 0xf8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	22c0      	movs	r2, #192	@ 0xc0
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f015 fb44 	bl	80173c2 <memset>
  if(hqspi->Instance==QUADSPI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f28 <HAL_QSPI_MspInit+0x214>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 80ec 	bne.w	8001f1e <HAL_QSPI_MspInit+0x20a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 fdb6 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001d66:	f7ff fd42 	bl	80017ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d6a:	4b70      	ldr	r3, [pc, #448]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d70:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d76:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d88:	4b68      	ldr	r3, [pc, #416]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	4a67      	ldr	r2, [pc, #412]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d98:	4b64      	ldr	r3, [pc, #400]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b61      	ldr	r3, [pc, #388]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	4a5f      	ldr	r2, [pc, #380]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd4:	4b55      	ldr	r3, [pc, #340]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b52      	ldr	r3, [pc, #328]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	4a50      	ldr	r2, [pc, #320]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e00:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	4a49      	ldr	r2, [pc, #292]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e10:	4b46      	ldr	r3, [pc, #280]	@ (8001f2c <HAL_QSPI_MspInit+0x218>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e36:	2309      	movs	r3, #9
 8001e38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e40:	4619      	mov	r1, r3
 8001e42:	483b      	ldr	r0, [pc, #236]	@ (8001f30 <HAL_QSPI_MspInit+0x21c>)
 8001e44:	f003 f81a 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e60:	2309      	movs	r3, #9
 8001e62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4831      	ldr	r0, [pc, #196]	@ (8001f34 <HAL_QSPI_MspInit+0x220>)
 8001e6e:	f003 f805 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e72:	2304      	movs	r3, #4
 8001e74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4828      	ldr	r0, [pc, #160]	@ (8001f38 <HAL_QSPI_MspInit+0x224>)
 8001e98:	f002 fff0 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481e      	ldr	r0, [pc, #120]	@ (8001f3c <HAL_QSPI_MspInit+0x228>)
 8001ec4:	f002 ffda 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4814      	ldr	r0, [pc, #80]	@ (8001f40 <HAL_QSPI_MspInit+0x22c>)
 8001ef0:	f002 ffc4 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef4:	2340      	movs	r3, #64	@ 0x40
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <HAL_QSPI_MspInit+0x224>)
 8001f1a:	f002 ffaf 	bl	8004e7c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001f1e:	bf00      	nop
 8001f20:	37f8      	adds	r7, #248	@ 0xf8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	52005000 	.word	0x52005000
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58021000 	.word	0x58021000
 8001f34:	58020000 	.word	0x58020000
 8001f38:	58020400 	.word	0x58020400
 8001f3c:	58020c00 	.word	0x58020c00
 8001f40:	58020800 	.word	0x58020800

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0bc      	sub	sp, #240	@ 0xf0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	22c0      	movs	r2, #192	@ 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f015 fa2c 	bl	80173c2 <memset>
  if(hspi->Instance==SPI1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a38      	ldr	r2, [pc, #224]	@ (8002050 <HAL_SPI_MspInit+0x10c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d168      	bne.n	8002046 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f007 fc9f 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f94:	f7ff fc2b 	bl	80017ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	4a25      	ldr	r2, [pc, #148]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc6:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	4a1e      	ldr	r2, [pc, #120]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_SPI_MspInit+0x110>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200a:	2305      	movs	r3, #5
 800200c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002014:	4619      	mov	r1, r3
 8002016:	4810      	ldr	r0, [pc, #64]	@ (8002058 <HAL_SPI_MspInit+0x114>)
 8002018:	f002 ff30 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800201c:	2318      	movs	r3, #24
 800201e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002034:	2305      	movs	r3, #5
 8002036:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800203e:	4619      	mov	r1, r3
 8002040:	4806      	ldr	r0, [pc, #24]	@ (800205c <HAL_SPI_MspInit+0x118>)
 8002042:	f002 ff1b 	bl	8004e7c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002046:	bf00      	nop
 8002048:	37f0      	adds	r7, #240	@ 0xf0
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40013000 	.word	0x40013000
 8002054:	58024400 	.word	0x58024400
 8002058:	58020000 	.word	0x58020000
 800205c:	58020400 	.word	0x58020400

08002060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0b      	ldr	r2, [pc, #44]	@ (800209c <HAL_TIM_Base_MspInit+0x3c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_TIM_Base_MspInit+0x40>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002078:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <HAL_TIM_Base_MspInit+0x40>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <HAL_TIM_Base_MspInit+0x40>)
 8002084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40010000 	.word	0x40010000
 80020a0:	58024400 	.word	0x58024400

080020a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <HAL_TIM_MspPostInit+0x6c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d11f      	bne.n	8002106 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <HAL_TIM_MspPostInit+0x70>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	4a11      	ldr	r2, [pc, #68]	@ (8002114 <HAL_TIM_MspPostInit+0x70>)
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <HAL_TIM_MspPostInit+0x70>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80020e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <HAL_TIM_MspPostInit+0x74>)
 8002102:	f002 febb 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	58024400 	.word	0x58024400
 8002118:	58021000 	.word	0x58021000

0800211c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0ba      	sub	sp, #232	@ 0xe8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	22c0      	movs	r2, #192	@ 0xc0
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f015 f940 	bl	80173c2 <memset>
  if(huart->Instance==UART8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <HAL_UART_MspInit+0xd4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d14d      	bne.n	80021e8 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800214c:	f04f 0202 	mov.w	r2, #2
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4618      	mov	r0, r3
 8002164:	f007 fbb2 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800216e:	f7ff fb3e 	bl	80017ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002172:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 8002174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002178:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 800217a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800217e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 8002184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	4a17      	ldr	r2, [pc, #92]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <HAL_UART_MspInit+0xd8>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80021c6:	2308      	movs	r3, #8
 80021c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4809      	ldr	r0, [pc, #36]	@ (80021f8 <HAL_UART_MspInit+0xdc>)
 80021d4:	f002 fe52 	bl	8004e7c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2105      	movs	r1, #5
 80021dc:	2053      	movs	r0, #83	@ 0x53
 80021de:	f000 fb79 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80021e2:	2053      	movs	r0, #83	@ 0x53
 80021e4:	f000 fb90 	bl	8002908 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 80021e8:	bf00      	nop
 80021ea:	37e8      	adds	r7, #232	@ 0xe8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40007c00 	.word	0x40007c00
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58021000 	.word	0x58021000

080021fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b090      	sub	sp, #64	@ 0x40
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	d827      	bhi.n	800225a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800220a:	2200      	movs	r2, #0
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fb60 	bl	80028d4 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 fb77 	bl	8002908 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800221a:	4a29      	ldr	r2, [pc, #164]	@ (80022c0 <HAL_InitTick+0xc4>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002220:	4b28      	ldr	r3, [pc, #160]	@ (80022c4 <HAL_InitTick+0xc8>)
 8002222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002226:	4a27      	ldr	r2, [pc, #156]	@ (80022c4 <HAL_InitTick+0xc8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <HAL_InitTick+0xc8>)
 8002232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223e:	f107 0210 	add.w	r2, r7, #16
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f007 fafd 	bl	8009848 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_InitTick+0x6a>
 8002258:	e001      	b.n	800225e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e02c      	b.n	80022b8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800225e:	f007 fac7 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 8002262:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002264:	e004      	b.n	8002270 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002266:	f007 fac3 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800226a:	4603      	mov	r3, r0
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_InitTick+0xcc>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	3b01      	subs	r3, #1
 800227c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800227e:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_InitTick+0xd0>)
 8002280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002284:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002286:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HAL_InitTick+0xd0>)
 8002288:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800228c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800228e:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <HAL_InitTick+0xd0>)
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002294:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_InitTick+0xd0>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_InitTick+0xd0>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80022a0:	480a      	ldr	r0, [pc, #40]	@ (80022cc <HAL_InitTick+0xd0>)
 80022a2:	f009 fa7e 	bl	800b7a2 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80022ac:	4807      	ldr	r0, [pc, #28]	@ (80022cc <HAL_InitTick+0xd0>)
 80022ae:	f009 facf 	bl	800b850 <HAL_TIM_Base_Start_IT>
 80022b2:	4603      	mov	r3, r0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3740      	adds	r7, #64	@ 0x40
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	24000008 	.word	0x24000008
 80022c4:	58024400 	.word	0x58024400
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	24000718 	.word	0x24000718

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <NMI_Handler+0x4>

080022d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <MemManage_Handler+0x4>

080022e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <TIM2_IRQHandler+0x10>)
 800230e:	f009 fb78 	bl	800ba02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24000718 	.word	0x24000718

0800231c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <UART8_IRQHandler+0x10>)
 8002322:	f00a fc89 	bl	800cc38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	240005f8 	.word	0x240005f8

08002330 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <I2C4_EV_IRQHandler+0x10>)
 8002336:	f003 fa35 	bl	80057a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	240002ec 	.word	0x240002ec

08002344 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <I2C4_ER_IRQHandler+0x10>)
 800234a:	f003 fa45 	bl	80057d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	240002ec 	.word	0x240002ec

08002358 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <OTG_FS_IRQHandler+0x10>)
 800235e:	f005 f82c 	bl	80073ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	24006634 	.word	0x24006634

0800236c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <BDMA_Channel0_IRQHandler+0x10>)
 8002372:	f001 fc0f 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24000340 	.word	0x24000340

08002380 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <BDMA_Channel1_IRQHandler+0x10>)
 8002386:	f001 fc05 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	240003b8 	.word	0x240003b8

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_kill>:

int _kill(int pid, int sig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ae:	f015 f947 	bl	8017640 <__errno>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2216      	movs	r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
  return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_exit>:

void _exit (int status)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ffe7 	bl	80023a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <_exit+0x12>

080023da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00a      	b.n	8002402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ec:	f3af 8000 	nop.w
 80023f0:	4601      	mov	r1, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf0      	blt.n	80023ec <_read+0x12>
  }

  return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243c:	605a      	str	r2, [r3, #4]
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_isatty>:

int _isatty(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f015 f8c8 	bl	8017640 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	24080000 	.word	0x24080000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	24000764 	.word	0x24000764
 80024e4:	24006e88 	.word	0x24006e88

080024e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024ec:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <SystemInit+0xe4>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	4a36      	ldr	r2, [pc, #216]	@ (80025cc <SystemInit+0xe4>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <SystemInit+0xe8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	2b06      	cmp	r3, #6
 8002506:	d807      	bhi.n	8002518 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <SystemInit+0xe8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 030f 	bic.w	r3, r3, #15
 8002510:	4a2f      	ldr	r2, [pc, #188]	@ (80025d0 <SystemInit+0xe8>)
 8002512:	f043 0307 	orr.w	r3, r3, #7
 8002516:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002518:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <SystemInit+0xec>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2d      	ldr	r2, [pc, #180]	@ (80025d4 <SystemInit+0xec>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <SystemInit+0xec>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <SystemInit+0xec>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4929      	ldr	r1, [pc, #164]	@ (80025d4 <SystemInit+0xec>)
 8002530:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <SystemInit+0xf0>)
 8002532:	4013      	ands	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002536:	4b26      	ldr	r3, [pc, #152]	@ (80025d0 <SystemInit+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002542:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <SystemInit+0xe8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 030f 	bic.w	r3, r3, #15
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <SystemInit+0xe8>)
 800254c:	f043 0307 	orr.w	r3, r3, #7
 8002550:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <SystemInit+0xec>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002558:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <SystemInit+0xec>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800255e:	4b1d      	ldr	r3, [pc, #116]	@ (80025d4 <SystemInit+0xec>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <SystemInit+0xec>)
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <SystemInit+0xf4>)
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800256a:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <SystemInit+0xec>)
 800256c:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <SystemInit+0xf8>)
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <SystemInit+0xec>)
 8002572:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <SystemInit+0xfc>)
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002576:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <SystemInit+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800257c:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <SystemInit+0xec>)
 800257e:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <SystemInit+0xfc>)
 8002580:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <SystemInit+0xec>)
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <SystemInit+0xec>)
 800258a:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <SystemInit+0xfc>)
 800258c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <SystemInit+0xec>)
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002594:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <SystemInit+0xec>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0e      	ldr	r2, [pc, #56]	@ (80025d4 <SystemInit+0xec>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <SystemInit+0xec>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <SystemInit+0x100>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <SystemInit+0x104>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025b2:	d202      	bcs.n	80025ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <SystemInit+0x108>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <SystemInit+0x10c>)
 80025bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00
 80025d0:	52002000 	.word	0x52002000
 80025d4:	58024400 	.word	0x58024400
 80025d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80025dc:	02020200 	.word	0x02020200
 80025e0:	01ff0000 	.word	0x01ff0000
 80025e4:	01010280 	.word	0x01010280
 80025e8:	5c001000 	.word	0x5c001000
 80025ec:	ffff0000 	.word	0xffff0000
 80025f0:	51008108 	.word	0x51008108
 80025f4:	52004000 	.word	0x52004000

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025fc:	f7ff ff74 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	@ (8002638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	@ (8002644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002626:	f015 f811 	bl	801764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7fe fbad 	bl	8000d88 <main>
  bx  lr
 800262e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002638:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 800263c:	0801a298 	.word	0x0801a298
  ldr r2, =_sbss
 8002640:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8002644:	24006e84 	.word	0x24006e84

08002648 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC3_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002652:	2003      	movs	r0, #3
 8002654:	f000 f933 	bl	80028be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002658:	f006 ff20 	bl	800949c <HAL_RCC_GetSysClockFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_Init+0x68>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	4913      	ldr	r1, [pc, #76]	@ (80026b8 <HAL_Init+0x6c>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_Init+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_Init+0x6c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_Init+0x70>)
 800268e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x74>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	200f      	movs	r0, #15
 8002698:	f7ff fdb0 	bl	80021fc <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e002      	b.n	80026ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a6:	f7ff f903 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08019e10 	.word	0x08019e10
 80026bc:	24000004 	.word	0x24000004
 80026c0:	24000000 	.word	0x24000000

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2400000c 	.word	0x2400000c
 80026e8:	24000768 	.word	0x24000768

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	24000768 	.word	0x24000768

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2400000c 	.word	0x2400000c

0800274c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_GetREVID+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0c1b      	lsrs	r3, r3, #16
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	5c001000 	.word	0x5c001000

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00
 80027a8:	05fa0000 	.word	0x05fa0000

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff4c 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e2:	f7ff ff63 	bl	80027ac <__NVIC_GetPriorityGrouping>
 80028e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	6978      	ldr	r0, [r7, #20]
 80028ee:	f7ff ffb3 	bl	8002858 <NVIC_EncodePriority>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff82 	bl	8002804 <__NVIC_SetPriority>
}
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff56 	bl	80027c8 <__NVIC_EnableIRQ>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002928:	f3bf 8f5f 	dmb	sy
}
 800292c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <HAL_MPU_Disable+0x28>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	4a06      	ldr	r2, [pc, #24]	@ (800294c <HAL_MPU_Disable+0x28>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002938:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_MPU_Disable+0x2c>)
 800293c:	2200      	movs	r2, #0
 800293e:	605a      	str	r2, [r3, #4]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00
 8002950:	e000ed90 	.word	0xe000ed90

08002954 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800295c:	4a0b      	ldr	r2, [pc, #44]	@ (800298c <HAL_MPU_Enable+0x38>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_MPU_Enable+0x3c>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	4a09      	ldr	r2, [pc, #36]	@ (8002990 <HAL_MPU_Enable+0x3c>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002970:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002972:	f3bf 8f4f 	dsb	sy
}
 8002976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002978:	f3bf 8f6f 	isb	sy
}
 800297c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed90 	.word	0xe000ed90
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	785a      	ldrb	r2, [r3, #1]
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_MPU_ConfigRegion+0x7c>)
 80029a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_MPU_ConfigRegion+0x7c>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_MPU_ConfigRegion+0x7c>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_MPU_ConfigRegion+0x7c>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7b1b      	ldrb	r3, [r3, #12]
 80029bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7adb      	ldrb	r3, [r3, #11]
 80029c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7a9b      	ldrb	r3, [r3, #10]
 80029ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7b5b      	ldrb	r3, [r3, #13]
 80029d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7b9b      	ldrb	r3, [r3, #14]
 80029da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7bdb      	ldrb	r3, [r3, #15]
 80029e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7a5b      	ldrb	r3, [r3, #9]
 80029ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7a1b      	ldrb	r3, [r3, #8]
 80029f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a00:	6113      	str	r3, [r2, #16]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed90 	.word	0xe000ed90

08002a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fe66 	bl	80026ec <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e316      	b.n	800305a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a66      	ldr	r2, [pc, #408]	@ (8002bcc <HAL_DMA_Init+0x1b8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04a      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a65      	ldr	r2, [pc, #404]	@ (8002bd0 <HAL_DMA_Init+0x1bc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d045      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a63      	ldr	r2, [pc, #396]	@ (8002bd4 <HAL_DMA_Init+0x1c0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a62      	ldr	r2, [pc, #392]	@ (8002bd8 <HAL_DMA_Init+0x1c4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03b      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a60      	ldr	r2, [pc, #384]	@ (8002bdc <HAL_DMA_Init+0x1c8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5f      	ldr	r2, [pc, #380]	@ (8002be0 <HAL_DMA_Init+0x1cc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <HAL_DMA_Init+0x1d0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02c      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5c      	ldr	r2, [pc, #368]	@ (8002be8 <HAL_DMA_Init+0x1d4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d027      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5a      	ldr	r2, [pc, #360]	@ (8002bec <HAL_DMA_Init+0x1d8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a59      	ldr	r2, [pc, #356]	@ (8002bf0 <HAL_DMA_Init+0x1dc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01d      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_DMA_Init+0x1e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a56      	ldr	r2, [pc, #344]	@ (8002bf8 <HAL_DMA_Init+0x1e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a54      	ldr	r2, [pc, #336]	@ (8002bfc <HAL_DMA_Init+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_DMA_Init+0x1ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a51      	ldr	r2, [pc, #324]	@ (8002c04 <HAL_DMA_Init+0x1f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_DMA_Init+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Init+0xbc>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_Init+0xbe>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 813b 	beq.w	8002d4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a37      	ldr	r2, [pc, #220]	@ (8002bcc <HAL_DMA_Init+0x1b8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04a      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a36      	ldr	r2, [pc, #216]	@ (8002bd0 <HAL_DMA_Init+0x1bc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d045      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	@ (8002bd4 <HAL_DMA_Init+0x1c0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_DMA_Init+0x1c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03b      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <HAL_DMA_Init+0x1c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d036      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <HAL_DMA_Init+0x1cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2e      	ldr	r2, [pc, #184]	@ (8002be4 <HAL_DMA_Init+0x1d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02c      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	@ (8002be8 <HAL_DMA_Init+0x1d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bec <HAL_DMA_Init+0x1d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf0 <HAL_DMA_Init+0x1dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01d      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <HAL_DMA_Init+0x1e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <HAL_DMA_Init+0x1e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_DMA_Init+0x1e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_DMA_Init+0x1ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_DMA_Init+0x1f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_DMA_Init+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <HAL_DMA_Init+0x186>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e007      	b.n	8002baa <HAL_DMA_Init+0x196>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002baa:	e02f      	b.n	8002c0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bac:	f7ff fd9e 	bl	80026ec <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d928      	bls.n	8002c0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e246      	b.n	800305a <HAL_DMA_Init+0x646>
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1c8      	bne.n	8002bac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_DMA_Init+0x420>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c70:	4b71      	ldr	r3, [pc, #452]	@ (8002e38 <HAL_DMA_Init+0x424>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b71      	ldr	r3, [pc, #452]	@ (8002e3c <HAL_DMA_Init+0x428>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c7c:	d328      	bcc.n	8002cd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b28      	cmp	r3, #40	@ 0x28
 8002c84:	d903      	bls.n	8002c8e <HAL_DMA_Init+0x27a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c8c:	d917      	bls.n	8002cbe <HAL_DMA_Init+0x2aa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c94:	d903      	bls.n	8002c9e <HAL_DMA_Init+0x28a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b42      	cmp	r3, #66	@ 0x42
 8002c9c:	d90f      	bls.n	8002cbe <HAL_DMA_Init+0x2aa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b46      	cmp	r3, #70	@ 0x46
 8002ca4:	d903      	bls.n	8002cae <HAL_DMA_Init+0x29a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b48      	cmp	r3, #72	@ 0x48
 8002cac:	d907      	bls.n	8002cbe <HAL_DMA_Init+0x2aa>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002cb4:	d905      	bls.n	8002cc2 <HAL_DMA_Init+0x2ae>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b52      	cmp	r3, #82	@ 0x52
 8002cbc:	d801      	bhi.n	8002cc2 <HAL_DMA_Init+0x2ae>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Init+0x2b0>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d117      	bne.n	8002d2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f001 ff2b 	bl	8004b68 <DMA_CheckFifoParam>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2240      	movs	r2, #64	@ 0x40
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e197      	b.n	800305a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 fe66 	bl	8004a04 <DMA_CalcBaseAndBitshift>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	223f      	movs	r2, #63	@ 0x3f
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e0cd      	b.n	8002eea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3b      	ldr	r2, [pc, #236]	@ (8002e40 <HAL_DMA_Init+0x42c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a39      	ldr	r2, [pc, #228]	@ (8002e44 <HAL_DMA_Init+0x430>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a38      	ldr	r2, [pc, #224]	@ (8002e48 <HAL_DMA_Init+0x434>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a36      	ldr	r2, [pc, #216]	@ (8002e4c <HAL_DMA_Init+0x438>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a35      	ldr	r2, [pc, #212]	@ (8002e50 <HAL_DMA_Init+0x43c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <HAL_DMA_Init+0x440>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a32      	ldr	r2, [pc, #200]	@ (8002e58 <HAL_DMA_Init+0x444>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_Init+0x38a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	@ (8002e5c <HAL_DMA_Init+0x448>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_DMA_Init+0x38e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_Init+0x390>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8097 	beq.w	8002ed8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <HAL_DMA_Init+0x42c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d021      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_DMA_Init+0x430>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01c      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_DMA_Init+0x434>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d017      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_DMA_Init+0x438>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d012      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_DMA_Init+0x43c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00d      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_DMA_Init+0x440>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d008      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_DMA_Init+0x444>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_Init+0x3e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_DMA_Init+0x448>)
 8002df6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <HAL_DMA_Init+0x44c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d021      	beq.n	8002e64 <HAL_DMA_Init+0x450>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d102      	bne.n	8002e2e <HAL_DMA_Init+0x41a>
 8002e28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e2c:	e01b      	b.n	8002e66 <HAL_DMA_Init+0x452>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e019      	b.n	8002e66 <HAL_DMA_Init+0x452>
 8002e32:	bf00      	nop
 8002e34:	fe10803f 	.word	0xfe10803f
 8002e38:	5c001000 	.word	0x5c001000
 8002e3c:	ffff0000 	.word	0xffff0000
 8002e40:	58025408 	.word	0x58025408
 8002e44:	5802541c 	.word	0x5802541c
 8002e48:	58025430 	.word	0x58025430
 8002e4c:	58025444 	.word	0x58025444
 8002e50:	58025458 	.word	0x58025458
 8002e54:	5802546c 	.word	0x5802546c
 8002e58:	58025480 	.word	0x58025480
 8002e5c:	58025494 	.word	0x58025494
 8002e60:	fffe000f 	.word	0xfffe000f
 8002e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003064 <HAL_DMA_Init+0x650>)
 8002eac:	4413      	add	r3, r2
 8002eae:	4a6e      	ldr	r2, [pc, #440]	@ (8003068 <HAL_DMA_Init+0x654>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f001 fda1 	bl	8004a04 <DMA_CalcBaseAndBitshift>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2201      	movs	r2, #1
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	e008      	b.n	8002eea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2240      	movs	r2, #64	@ 0x40
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0b7      	b.n	800305a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5f      	ldr	r2, [pc, #380]	@ (800306c <HAL_DMA_Init+0x658>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d072      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8003070 <HAL_DMA_Init+0x65c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d06d      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5c      	ldr	r2, [pc, #368]	@ (8003074 <HAL_DMA_Init+0x660>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d068      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003078 <HAL_DMA_Init+0x664>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d063      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a59      	ldr	r2, [pc, #356]	@ (800307c <HAL_DMA_Init+0x668>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d05e      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a57      	ldr	r2, [pc, #348]	@ (8003080 <HAL_DMA_Init+0x66c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d059      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a56      	ldr	r2, [pc, #344]	@ (8003084 <HAL_DMA_Init+0x670>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d054      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a54      	ldr	r2, [pc, #336]	@ (8003088 <HAL_DMA_Init+0x674>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04f      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a53      	ldr	r2, [pc, #332]	@ (800308c <HAL_DMA_Init+0x678>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a51      	ldr	r2, [pc, #324]	@ (8003090 <HAL_DMA_Init+0x67c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a50      	ldr	r2, [pc, #320]	@ (8003094 <HAL_DMA_Init+0x680>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003098 <HAL_DMA_Init+0x684>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4d      	ldr	r2, [pc, #308]	@ (800309c <HAL_DMA_Init+0x688>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a4b      	ldr	r2, [pc, #300]	@ (80030a0 <HAL_DMA_Init+0x68c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80030a4 <HAL_DMA_Init+0x690>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a48      	ldr	r2, [pc, #288]	@ (80030a8 <HAL_DMA_Init+0x694>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a47      	ldr	r2, [pc, #284]	@ (80030ac <HAL_DMA_Init+0x698>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a45      	ldr	r2, [pc, #276]	@ (80030b0 <HAL_DMA_Init+0x69c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a44      	ldr	r2, [pc, #272]	@ (80030b4 <HAL_DMA_Init+0x6a0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a42      	ldr	r2, [pc, #264]	@ (80030b8 <HAL_DMA_Init+0x6a4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a41      	ldr	r2, [pc, #260]	@ (80030bc <HAL_DMA_Init+0x6a8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80030c0 <HAL_DMA_Init+0x6ac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3e      	ldr	r2, [pc, #248]	@ (80030c4 <HAL_DMA_Init+0x6b0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80030c8 <HAL_DMA_Init+0x6b4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_DMA_Init+0x5ca>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Init+0x5cc>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d032      	beq.n	800304a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 fe3b 	bl	8004c60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b80      	cmp	r3, #128	@ 0x80
 8002ff0:	d102      	bne.n	8002ff8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800300c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_DMA_Init+0x624>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d80c      	bhi.n	8003038 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 feb8 	bl	8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e008      	b.n	800304a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	a7fdabf8 	.word	0xa7fdabf8
 8003068:	cccccccd 	.word	0xcccccccd
 800306c:	40020010 	.word	0x40020010
 8003070:	40020028 	.word	0x40020028
 8003074:	40020040 	.word	0x40020040
 8003078:	40020058 	.word	0x40020058
 800307c:	40020070 	.word	0x40020070
 8003080:	40020088 	.word	0x40020088
 8003084:	400200a0 	.word	0x400200a0
 8003088:	400200b8 	.word	0x400200b8
 800308c:	40020410 	.word	0x40020410
 8003090:	40020428 	.word	0x40020428
 8003094:	40020440 	.word	0x40020440
 8003098:	40020458 	.word	0x40020458
 800309c:	40020470 	.word	0x40020470
 80030a0:	40020488 	.word	0x40020488
 80030a4:	400204a0 	.word	0x400204a0
 80030a8:	400204b8 	.word	0x400204b8
 80030ac:	58025408 	.word	0x58025408
 80030b0:	5802541c 	.word	0x5802541c
 80030b4:	58025430 	.word	0x58025430
 80030b8:	58025444 	.word	0x58025444
 80030bc:	58025458 	.word	0x58025458
 80030c0:	5802546c 	.word	0x5802546c
 80030c4:	58025480 	.word	0x58025480
 80030c8:	58025494 	.word	0x58025494

080030cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff fb0a 	bl	80026ec <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e2dc      	b.n	800369e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d008      	beq.n	8003102 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	@ 0x80
 80030f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e2cd      	b.n	800369e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a76      	ldr	r2, [pc, #472]	@ (80032e0 <HAL_DMA_Abort+0x214>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d04a      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a74      	ldr	r2, [pc, #464]	@ (80032e4 <HAL_DMA_Abort+0x218>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d045      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a73      	ldr	r2, [pc, #460]	@ (80032e8 <HAL_DMA_Abort+0x21c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d040      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a71      	ldr	r2, [pc, #452]	@ (80032ec <HAL_DMA_Abort+0x220>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d03b      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a70      	ldr	r2, [pc, #448]	@ (80032f0 <HAL_DMA_Abort+0x224>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d036      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6e      	ldr	r2, [pc, #440]	@ (80032f4 <HAL_DMA_Abort+0x228>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d031      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6d      	ldr	r2, [pc, #436]	@ (80032f8 <HAL_DMA_Abort+0x22c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d02c      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <HAL_DMA_Abort+0x230>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d027      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <HAL_DMA_Abort+0x234>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	@ (8003304 <HAL_DMA_Abort+0x238>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01d      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <HAL_DMA_Abort+0x23c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	@ (800330c <HAL_DMA_Abort+0x240>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a64      	ldr	r2, [pc, #400]	@ (8003310 <HAL_DMA_Abort+0x244>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a62      	ldr	r2, [pc, #392]	@ (8003314 <HAL_DMA_Abort+0x248>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d009      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a61      	ldr	r2, [pc, #388]	@ (8003318 <HAL_DMA_Abort+0x24c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <HAL_DMA_Abort+0xd6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5f      	ldr	r2, [pc, #380]	@ (800331c <HAL_DMA_Abort+0x250>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_Abort+0xda>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_DMA_Abort+0xdc>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 021e 	bic.w	r2, r2, #30
 80031ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e00a      	b.n	80031ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 020e 	bic.w	r2, r2, #14
 80031e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3c      	ldr	r2, [pc, #240]	@ (80032e0 <HAL_DMA_Abort+0x214>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d072      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3a      	ldr	r2, [pc, #232]	@ (80032e4 <HAL_DMA_Abort+0x218>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d06d      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a39      	ldr	r2, [pc, #228]	@ (80032e8 <HAL_DMA_Abort+0x21c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d068      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <HAL_DMA_Abort+0x220>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d063      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a36      	ldr	r2, [pc, #216]	@ (80032f0 <HAL_DMA_Abort+0x224>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d05e      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a34      	ldr	r2, [pc, #208]	@ (80032f4 <HAL_DMA_Abort+0x228>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d059      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a33      	ldr	r2, [pc, #204]	@ (80032f8 <HAL_DMA_Abort+0x22c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d054      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a31      	ldr	r2, [pc, #196]	@ (80032fc <HAL_DMA_Abort+0x230>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04f      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a30      	ldr	r2, [pc, #192]	@ (8003300 <HAL_DMA_Abort+0x234>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2e      	ldr	r2, [pc, #184]	@ (8003304 <HAL_DMA_Abort+0x238>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2d      	ldr	r2, [pc, #180]	@ (8003308 <HAL_DMA_Abort+0x23c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2b      	ldr	r2, [pc, #172]	@ (800330c <HAL_DMA_Abort+0x240>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <HAL_DMA_Abort+0x244>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a28      	ldr	r2, [pc, #160]	@ (8003314 <HAL_DMA_Abort+0x248>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a27      	ldr	r2, [pc, #156]	@ (8003318 <HAL_DMA_Abort+0x24c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a25      	ldr	r2, [pc, #148]	@ (800331c <HAL_DMA_Abort+0x250>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a24      	ldr	r2, [pc, #144]	@ (8003320 <HAL_DMA_Abort+0x254>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a22      	ldr	r2, [pc, #136]	@ (8003324 <HAL_DMA_Abort+0x258>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a21      	ldr	r2, [pc, #132]	@ (8003328 <HAL_DMA_Abort+0x25c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	@ (800332c <HAL_DMA_Abort+0x260>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003330 <HAL_DMA_Abort+0x264>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_DMA_Abort+0x268>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003338 <HAL_DMA_Abort+0x26c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_DMA_Abort+0x270>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d132      	bne.n	8003340 <HAL_DMA_Abort+0x274>
 80032da:	2301      	movs	r3, #1
 80032dc:	e031      	b.n	8003342 <HAL_DMA_Abort+0x276>
 80032de:	bf00      	nop
 80032e0:	40020010 	.word	0x40020010
 80032e4:	40020028 	.word	0x40020028
 80032e8:	40020040 	.word	0x40020040
 80032ec:	40020058 	.word	0x40020058
 80032f0:	40020070 	.word	0x40020070
 80032f4:	40020088 	.word	0x40020088
 80032f8:	400200a0 	.word	0x400200a0
 80032fc:	400200b8 	.word	0x400200b8
 8003300:	40020410 	.word	0x40020410
 8003304:	40020428 	.word	0x40020428
 8003308:	40020440 	.word	0x40020440
 800330c:	40020458 	.word	0x40020458
 8003310:	40020470 	.word	0x40020470
 8003314:	40020488 	.word	0x40020488
 8003318:	400204a0 	.word	0x400204a0
 800331c:	400204b8 	.word	0x400204b8
 8003320:	58025408 	.word	0x58025408
 8003324:	5802541c 	.word	0x5802541c
 8003328:	58025430 	.word	0x58025430
 800332c:	58025444 	.word	0x58025444
 8003330:	58025458 	.word	0x58025458
 8003334:	5802546c 	.word	0x5802546c
 8003338:	58025480 	.word	0x58025480
 800333c:	58025494 	.word	0x58025494
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6d      	ldr	r2, [pc, #436]	@ (8003510 <HAL_DMA_Abort+0x444>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d04a      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a6b      	ldr	r2, [pc, #428]	@ (8003514 <HAL_DMA_Abort+0x448>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d045      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6a      	ldr	r2, [pc, #424]	@ (8003518 <HAL_DMA_Abort+0x44c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d040      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a68      	ldr	r2, [pc, #416]	@ (800351c <HAL_DMA_Abort+0x450>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d03b      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a67      	ldr	r2, [pc, #412]	@ (8003520 <HAL_DMA_Abort+0x454>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d036      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	@ (8003524 <HAL_DMA_Abort+0x458>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d031      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a64      	ldr	r2, [pc, #400]	@ (8003528 <HAL_DMA_Abort+0x45c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d02c      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a62      	ldr	r2, [pc, #392]	@ (800352c <HAL_DMA_Abort+0x460>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d027      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a61      	ldr	r2, [pc, #388]	@ (8003530 <HAL_DMA_Abort+0x464>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003534 <HAL_DMA_Abort+0x468>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01d      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5e      	ldr	r2, [pc, #376]	@ (8003538 <HAL_DMA_Abort+0x46c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5c      	ldr	r2, [pc, #368]	@ (800353c <HAL_DMA_Abort+0x470>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003540 <HAL_DMA_Abort+0x474>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a59      	ldr	r2, [pc, #356]	@ (8003544 <HAL_DMA_Abort+0x478>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a58      	ldr	r2, [pc, #352]	@ (8003548 <HAL_DMA_Abort+0x47c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_DMA_Abort+0x32a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a56      	ldr	r2, [pc, #344]	@ (800354c <HAL_DMA_Abort+0x480>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d108      	bne.n	8003408 <HAL_DMA_Abort+0x33c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e007      	b.n	8003418 <HAL_DMA_Abort+0x34c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003418:	e013      	b.n	8003442 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341a:	f7ff f967 	bl	80026ec <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b05      	cmp	r3, #5
 8003426:	d90c      	bls.n	8003442 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2203      	movs	r2, #3
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e12d      	b.n	800369e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2f      	ldr	r2, [pc, #188]	@ (8003510 <HAL_DMA_Abort+0x444>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2d      	ldr	r2, [pc, #180]	@ (8003514 <HAL_DMA_Abort+0x448>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2c      	ldr	r2, [pc, #176]	@ (8003518 <HAL_DMA_Abort+0x44c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_DMA_Abort+0x450>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_DMA_Abort+0x454>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <HAL_DMA_Abort+0x458>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a26      	ldr	r2, [pc, #152]	@ (8003528 <HAL_DMA_Abort+0x45c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a24      	ldr	r2, [pc, #144]	@ (800352c <HAL_DMA_Abort+0x460>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <HAL_DMA_Abort+0x464>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <HAL_DMA_Abort+0x468>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_DMA_Abort+0x46c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <HAL_DMA_Abort+0x470>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_DMA_Abort+0x474>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <HAL_DMA_Abort+0x478>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_DMA_Abort+0x47c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort+0x422>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_DMA_Abort+0x480>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Abort+0x426>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_Abort+0x428>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02b      	beq.n	8003550 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	223f      	movs	r2, #63	@ 0x3f
 8003508:	409a      	lsls	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	e02a      	b.n	8003566 <HAL_DMA_Abort+0x49a>
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2201      	movs	r2, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4f      	ldr	r2, [pc, #316]	@ (80036a8 <HAL_DMA_Abort+0x5dc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d072      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4d      	ldr	r2, [pc, #308]	@ (80036ac <HAL_DMA_Abort+0x5e0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d06d      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4c      	ldr	r2, [pc, #304]	@ (80036b0 <HAL_DMA_Abort+0x5e4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d068      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a4a      	ldr	r2, [pc, #296]	@ (80036b4 <HAL_DMA_Abort+0x5e8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d063      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a49      	ldr	r2, [pc, #292]	@ (80036b8 <HAL_DMA_Abort+0x5ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d05e      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a47      	ldr	r2, [pc, #284]	@ (80036bc <HAL_DMA_Abort+0x5f0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d059      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <HAL_DMA_Abort+0x5f4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d054      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a44      	ldr	r2, [pc, #272]	@ (80036c4 <HAL_DMA_Abort+0x5f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04f      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a43      	ldr	r2, [pc, #268]	@ (80036c8 <HAL_DMA_Abort+0x5fc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d04a      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a41      	ldr	r2, [pc, #260]	@ (80036cc <HAL_DMA_Abort+0x600>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d045      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a40      	ldr	r2, [pc, #256]	@ (80036d0 <HAL_DMA_Abort+0x604>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d040      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3e      	ldr	r2, [pc, #248]	@ (80036d4 <HAL_DMA_Abort+0x608>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d03b      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a3d      	ldr	r2, [pc, #244]	@ (80036d8 <HAL_DMA_Abort+0x60c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d036      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3b      	ldr	r2, [pc, #236]	@ (80036dc <HAL_DMA_Abort+0x610>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d031      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3a      	ldr	r2, [pc, #232]	@ (80036e0 <HAL_DMA_Abort+0x614>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d02c      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a38      	ldr	r2, [pc, #224]	@ (80036e4 <HAL_DMA_Abort+0x618>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d027      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a37      	ldr	r2, [pc, #220]	@ (80036e8 <HAL_DMA_Abort+0x61c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a35      	ldr	r2, [pc, #212]	@ (80036ec <HAL_DMA_Abort+0x620>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_DMA_Abort+0x624>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_DMA_Abort+0x628>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a31      	ldr	r2, [pc, #196]	@ (80036f8 <HAL_DMA_Abort+0x62c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2f      	ldr	r2, [pc, #188]	@ (80036fc <HAL_DMA_Abort+0x630>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2e      	ldr	r2, [pc, #184]	@ (8003700 <HAL_DMA_Abort+0x634>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2c      	ldr	r2, [pc, #176]	@ (8003704 <HAL_DMA_Abort+0x638>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_DMA_Abort+0x58e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_DMA_Abort+0x590>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d015      	beq.n	800368c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003668:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800367c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003680:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800368a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	58025408 	.word	0x58025408
 80036ec:	5802541c 	.word	0x5802541c
 80036f0:	58025430 	.word	0x58025430
 80036f4:	58025444 	.word	0x58025444
 80036f8:	58025458 	.word	0x58025458
 80036fc:	5802546c 	.word	0x5802546c
 8003700:	58025480 	.word	0x58025480
 8003704:	58025494 	.word	0x58025494

08003708 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e237      	b.n	8003b8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2280      	movs	r2, #128	@ 0x80
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e22c      	b.n	8003b8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5c      	ldr	r2, [pc, #368]	@ (80038a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04a      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5b      	ldr	r2, [pc, #364]	@ (80038ac <HAL_DMA_Abort_IT+0x1a4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d045      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a59      	ldr	r2, [pc, #356]	@ (80038b0 <HAL_DMA_Abort_IT+0x1a8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a58      	ldr	r2, [pc, #352]	@ (80038b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d03b      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a56      	ldr	r2, [pc, #344]	@ (80038b8 <HAL_DMA_Abort_IT+0x1b0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d036      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a55      	ldr	r2, [pc, #340]	@ (80038bc <HAL_DMA_Abort_IT+0x1b4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a53      	ldr	r2, [pc, #332]	@ (80038c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02c      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a52      	ldr	r2, [pc, #328]	@ (80038c4 <HAL_DMA_Abort_IT+0x1bc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a50      	ldr	r2, [pc, #320]	@ (80038c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4f      	ldr	r2, [pc, #316]	@ (80038cc <HAL_DMA_Abort_IT+0x1c4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4d      	ldr	r2, [pc, #308]	@ (80038d0 <HAL_DMA_Abort_IT+0x1c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a4c      	ldr	r2, [pc, #304]	@ (80038d4 <HAL_DMA_Abort_IT+0x1cc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a4a      	ldr	r2, [pc, #296]	@ (80038d8 <HAL_DMA_Abort_IT+0x1d0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <HAL_DMA_Abort_IT+0x1d4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a47      	ldr	r2, [pc, #284]	@ (80038e0 <HAL_DMA_Abort_IT+0x1d8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a46      	ldr	r2, [pc, #280]	@ (80038e4 <HAL_DMA_Abort_IT+0x1dc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Abort_IT+0xcc>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_DMA_Abort_IT+0xce>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8086 	beq.w	80038e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2204      	movs	r2, #4
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	@ (80038a8 <HAL_DMA_Abort_IT+0x1a0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2e      	ldr	r2, [pc, #184]	@ (80038ac <HAL_DMA_Abort_IT+0x1a4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <HAL_DMA_Abort_IT+0x1a8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2b      	ldr	r2, [pc, #172]	@ (80038b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a28      	ldr	r2, [pc, #160]	@ (80038bc <HAL_DMA_Abort_IT+0x1b4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a26      	ldr	r2, [pc, #152]	@ (80038c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a25      	ldr	r2, [pc, #148]	@ (80038c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a23      	ldr	r2, [pc, #140]	@ (80038c8 <HAL_DMA_Abort_IT+0x1c0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	@ (80038cc <HAL_DMA_Abort_IT+0x1c4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a20      	ldr	r2, [pc, #128]	@ (80038d0 <HAL_DMA_Abort_IT+0x1c8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_DMA_Abort_IT+0x1d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Abort_IT+0x17c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <HAL_DMA_Abort_IT+0x18e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e178      	b.n	8003b88 <HAL_DMA_Abort_IT+0x480>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e16f      	b.n	8003b88 <HAL_DMA_Abort_IT+0x480>
 80038a8:	40020010 	.word	0x40020010
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40020040 	.word	0x40020040
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40020070 	.word	0x40020070
 80038bc:	40020088 	.word	0x40020088
 80038c0:	400200a0 	.word	0x400200a0
 80038c4:	400200b8 	.word	0x400200b8
 80038c8:	40020410 	.word	0x40020410
 80038cc:	40020428 	.word	0x40020428
 80038d0:	40020440 	.word	0x40020440
 80038d4:	40020458 	.word	0x40020458
 80038d8:	40020470 	.word	0x40020470
 80038dc:	40020488 	.word	0x40020488
 80038e0:	400204a0 	.word	0x400204a0
 80038e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3a8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3ac>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d045      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a69      	ldr	r2, [pc, #420]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3b0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d040      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a68      	ldr	r2, [pc, #416]	@ (8003abc <HAL_DMA_Abort_IT+0x3b4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d03b      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a66      	ldr	r2, [pc, #408]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3b8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d036      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3bc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d031      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a63      	ldr	r2, [pc, #396]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3c0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02c      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a62      	ldr	r2, [pc, #392]	@ (8003acc <HAL_DMA_Abort_IT+0x3c4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d027      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a60      	ldr	r2, [pc, #384]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3c8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d022      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3cc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01d      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad8 <HAL_DMA_Abort_IT+0x3d0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a5c      	ldr	r2, [pc, #368]	@ (8003adc <HAL_DMA_Abort_IT+0x3d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5a      	ldr	r2, [pc, #360]	@ (8003ae0 <HAL_DMA_Abort_IT+0x3d8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a59      	ldr	r2, [pc, #356]	@ (8003ae4 <HAL_DMA_Abort_IT+0x3dc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a57      	ldr	r2, [pc, #348]	@ (8003ae8 <HAL_DMA_Abort_IT+0x3e0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_Abort_IT+0x290>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a56      	ldr	r2, [pc, #344]	@ (8003aec <HAL_DMA_Abort_IT+0x3e4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <HAL_DMA_Abort_IT+0x2a2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e007      	b.n	80039ba <HAL_DMA_Abort_IT+0x2b2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3a8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d072      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3ac>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d06d      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a39      	ldr	r2, [pc, #228]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3b0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d068      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <HAL_DMA_Abort_IT+0x3b4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d063      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a36      	ldr	r2, [pc, #216]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3b8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d05e      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a34      	ldr	r2, [pc, #208]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3bc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d059      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a33      	ldr	r2, [pc, #204]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3c0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d054      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a31      	ldr	r2, [pc, #196]	@ (8003acc <HAL_DMA_Abort_IT+0x3c4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04f      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a30      	ldr	r2, [pc, #192]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3cc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad8 <HAL_DMA_Abort_IT+0x3d0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003adc <HAL_DMA_Abort_IT+0x3d4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae0 <HAL_DMA_Abort_IT+0x3d8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <HAL_DMA_Abort_IT+0x3dc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ae8 <HAL_DMA_Abort_IT+0x3e0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a25      	ldr	r2, [pc, #148]	@ (8003aec <HAL_DMA_Abort_IT+0x3e4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a24      	ldr	r2, [pc, #144]	@ (8003af0 <HAL_DMA_Abort_IT+0x3e8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a22      	ldr	r2, [pc, #136]	@ (8003af4 <HAL_DMA_Abort_IT+0x3ec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a21      	ldr	r2, [pc, #132]	@ (8003af8 <HAL_DMA_Abort_IT+0x3f0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <HAL_DMA_Abort_IT+0x3f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	@ (8003b00 <HAL_DMA_Abort_IT+0x3f8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_DMA_Abort_IT+0x3fc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b08 <HAL_DMA_Abort_IT+0x400>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x3a2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <HAL_DMA_Abort_IT+0x404>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d132      	bne.n	8003b10 <HAL_DMA_Abort_IT+0x408>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e031      	b.n	8003b12 <HAL_DMA_Abort_IT+0x40a>
 8003aae:	bf00      	nop
 8003ab0:	40020010 	.word	0x40020010
 8003ab4:	40020028 	.word	0x40020028
 8003ab8:	40020040 	.word	0x40020040
 8003abc:	40020058 	.word	0x40020058
 8003ac0:	40020070 	.word	0x40020070
 8003ac4:	40020088 	.word	0x40020088
 8003ac8:	400200a0 	.word	0x400200a0
 8003acc:	400200b8 	.word	0x400200b8
 8003ad0:	40020410 	.word	0x40020410
 8003ad4:	40020428 	.word	0x40020428
 8003ad8:	40020440 	.word	0x40020440
 8003adc:	40020458 	.word	0x40020458
 8003ae0:	40020470 	.word	0x40020470
 8003ae4:	40020488 	.word	0x40020488
 8003ae8:	400204a0 	.word	0x400204a0
 8003aec:	400204b8 	.word	0x400204b8
 8003af0:	58025408 	.word	0x58025408
 8003af4:	5802541c 	.word	0x5802541c
 8003af8:	58025430 	.word	0x58025430
 8003afc:	58025444 	.word	0x58025444
 8003b00:	58025458 	.word	0x58025458
 8003b04:	5802546c 	.word	0x5802546c
 8003b08:	58025480 	.word	0x58025480
 8003b0c:	58025494 	.word	0x58025494
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop

08003b94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ba0:	4b67      	ldr	r3, [pc, #412]	@ (8003d40 <HAL_DMA_IRQHandler+0x1ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	@ (8003d44 <HAL_DMA_IRQHandler+0x1b0>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5f      	ldr	r2, [pc, #380]	@ (8003d48 <HAL_DMA_IRQHandler+0x1b4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d4c <HAL_DMA_IRQHandler+0x1b8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5c      	ldr	r2, [pc, #368]	@ (8003d50 <HAL_DMA_IRQHandler+0x1bc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d54 <HAL_DMA_IRQHandler+0x1c0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a59      	ldr	r2, [pc, #356]	@ (8003d58 <HAL_DMA_IRQHandler+0x1c4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	@ (8003d5c <HAL_DMA_IRQHandler+0x1c8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a56      	ldr	r2, [pc, #344]	@ (8003d60 <HAL_DMA_IRQHandler+0x1cc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a54      	ldr	r2, [pc, #336]	@ (8003d64 <HAL_DMA_IRQHandler+0x1d0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a53      	ldr	r2, [pc, #332]	@ (8003d68 <HAL_DMA_IRQHandler+0x1d4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a51      	ldr	r2, [pc, #324]	@ (8003d6c <HAL_DMA_IRQHandler+0x1d8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a50      	ldr	r2, [pc, #320]	@ (8003d70 <HAL_DMA_IRQHandler+0x1dc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4e      	ldr	r2, [pc, #312]	@ (8003d74 <HAL_DMA_IRQHandler+0x1e0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a4d      	ldr	r2, [pc, #308]	@ (8003d78 <HAL_DMA_IRQHandler+0x1e4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d7c <HAL_DMA_IRQHandler+0x1e8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_DMA_IRQHandler+0x1ec>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a48      	ldr	r2, [pc, #288]	@ (8003d84 <HAL_DMA_IRQHandler+0x1f0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_DMA_IRQHandler+0xd6>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 842b 	beq.w	80044c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80a2 	beq.w	8003dcc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d48 <HAL_DMA_IRQHandler+0x1b4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	@ (8003d4c <HAL_DMA_IRQHandler+0x1b8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d50 <HAL_DMA_IRQHandler+0x1bc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <HAL_DMA_IRQHandler+0x1c0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d03b      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	@ (8003d58 <HAL_DMA_IRQHandler+0x1c4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d036      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <HAL_DMA_IRQHandler+0x1c8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d031      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	@ (8003d60 <HAL_DMA_IRQHandler+0x1cc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <HAL_DMA_IRQHandler+0x1d0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d027      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_DMA_IRQHandler+0x1d4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <HAL_DMA_IRQHandler+0x1d8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <HAL_DMA_IRQHandler+0x1dc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <HAL_DMA_IRQHandler+0x1e0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <HAL_DMA_IRQHandler+0x1e4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d7c <HAL_DMA_IRQHandler+0x1e8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_DMA_IRQHandler+0x1ec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <HAL_DMA_IRQHandler+0x1f0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d12f      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x1f4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e02e      	b.n	8003d9c <HAL_DMA_IRQHandler+0x208>
 8003d3e:	bf00      	nop
 8003d40:	24000000 	.word	0x24000000
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2208      	movs	r2, #8
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d06e      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a69      	ldr	r2, [pc, #420]	@ (8003f8c <HAL_DMA_IRQHandler+0x3f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a67      	ldr	r2, [pc, #412]	@ (8003f90 <HAL_DMA_IRQHandler+0x3fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a66      	ldr	r2, [pc, #408]	@ (8003f94 <HAL_DMA_IRQHandler+0x400>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a64      	ldr	r2, [pc, #400]	@ (8003f98 <HAL_DMA_IRQHandler+0x404>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a63      	ldr	r2, [pc, #396]	@ (8003f9c <HAL_DMA_IRQHandler+0x408>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a61      	ldr	r2, [pc, #388]	@ (8003fa0 <HAL_DMA_IRQHandler+0x40c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a60      	ldr	r2, [pc, #384]	@ (8003fa4 <HAL_DMA_IRQHandler+0x410>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa8 <HAL_DMA_IRQHandler+0x414>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5d      	ldr	r2, [pc, #372]	@ (8003fac <HAL_DMA_IRQHandler+0x418>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5b      	ldr	r2, [pc, #364]	@ (8003fb0 <HAL_DMA_IRQHandler+0x41c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb4 <HAL_DMA_IRQHandler+0x420>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a58      	ldr	r2, [pc, #352]	@ (8003fb8 <HAL_DMA_IRQHandler+0x424>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a57      	ldr	r2, [pc, #348]	@ (8003fbc <HAL_DMA_IRQHandler+0x428>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a55      	ldr	r2, [pc, #340]	@ (8003fc0 <HAL_DMA_IRQHandler+0x42c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a54      	ldr	r2, [pc, #336]	@ (8003fc4 <HAL_DMA_IRQHandler+0x430>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	@ (8003fc8 <HAL_DMA_IRQHandler+0x434>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10a      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x304>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e003      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	f043 0202 	orr.w	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2204      	movs	r2, #4
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 808f 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <HAL_DMA_IRQHandler+0x3f8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f90 <HAL_DMA_IRQHandler+0x3fc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a29      	ldr	r2, [pc, #164]	@ (8003f94 <HAL_DMA_IRQHandler+0x400>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	@ (8003f98 <HAL_DMA_IRQHandler+0x404>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a26      	ldr	r2, [pc, #152]	@ (8003f9c <HAL_DMA_IRQHandler+0x408>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	@ (8003fa0 <HAL_DMA_IRQHandler+0x40c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a23      	ldr	r2, [pc, #140]	@ (8003fa4 <HAL_DMA_IRQHandler+0x410>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a21      	ldr	r2, [pc, #132]	@ (8003fa8 <HAL_DMA_IRQHandler+0x414>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	@ (8003fac <HAL_DMA_IRQHandler+0x418>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <HAL_DMA_IRQHandler+0x41c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <HAL_DMA_IRQHandler+0x420>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <HAL_DMA_IRQHandler+0x424>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <HAL_DMA_IRQHandler+0x428>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <HAL_DMA_IRQHandler+0x42c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	@ (8003fc4 <HAL_DMA_IRQHandler+0x430>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_DMA_IRQHandler+0x434>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12a      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x438>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e023      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x440>
 8003f8c:	40020010 	.word	0x40020010
 8003f90:	40020028 	.word	0x40020028
 8003f94:	40020040 	.word	0x40020040
 8003f98:	40020058 	.word	0x40020058
 8003f9c:	40020070 	.word	0x40020070
 8003fa0:	40020088 	.word	0x40020088
 8003fa4:	400200a0 	.word	0x400200a0
 8003fa8:	400200b8 	.word	0x400200b8
 8003fac:	40020410 	.word	0x40020410
 8003fb0:	40020428 	.word	0x40020428
 8003fb4:	40020440 	.word	0x40020440
 8003fb8:	40020458 	.word	0x40020458
 8003fbc:	40020470 	.word	0x40020470
 8003fc0:	40020488 	.word	0x40020488
 8003fc4:	400204a0 	.word	0x400204a0
 8003fc8:	400204b8 	.word	0x400204b8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	409a      	lsls	r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a6 	beq.w	8004156 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a85      	ldr	r2, [pc, #532]	@ (8004224 <HAL_DMA_IRQHandler+0x690>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a83      	ldr	r2, [pc, #524]	@ (8004228 <HAL_DMA_IRQHandler+0x694>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a82      	ldr	r2, [pc, #520]	@ (800422c <HAL_DMA_IRQHandler+0x698>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a80      	ldr	r2, [pc, #512]	@ (8004230 <HAL_DMA_IRQHandler+0x69c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7f      	ldr	r2, [pc, #508]	@ (8004234 <HAL_DMA_IRQHandler+0x6a0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7d      	ldr	r2, [pc, #500]	@ (8004238 <HAL_DMA_IRQHandler+0x6a4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7c      	ldr	r2, [pc, #496]	@ (800423c <HAL_DMA_IRQHandler+0x6a8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7a      	ldr	r2, [pc, #488]	@ (8004240 <HAL_DMA_IRQHandler+0x6ac>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a79      	ldr	r2, [pc, #484]	@ (8004244 <HAL_DMA_IRQHandler+0x6b0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a77      	ldr	r2, [pc, #476]	@ (8004248 <HAL_DMA_IRQHandler+0x6b4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a76      	ldr	r2, [pc, #472]	@ (800424c <HAL_DMA_IRQHandler+0x6b8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a74      	ldr	r2, [pc, #464]	@ (8004250 <HAL_DMA_IRQHandler+0x6bc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	@ (8004254 <HAL_DMA_IRQHandler+0x6c0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a71      	ldr	r2, [pc, #452]	@ (8004258 <HAL_DMA_IRQHandler+0x6c4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a70      	ldr	r2, [pc, #448]	@ (800425c <HAL_DMA_IRQHandler+0x6c8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004260 <HAL_DMA_IRQHandler+0x6cc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10a      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x52c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e009      	b.n	80040d4 <HAL_DMA_IRQHandler+0x540>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d03e      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2210      	movs	r2, #16
 80040e2:	409a      	lsls	r2, r3
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d024      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e01f      	b.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01b      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e016      	b.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0208 	bic.w	r2, r2, #8
 8004144:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2220      	movs	r2, #32
 8004160:	409a      	lsls	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8110 	beq.w	800438c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <HAL_DMA_IRQHandler+0x690>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d04a      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2b      	ldr	r2, [pc, #172]	@ (8004228 <HAL_DMA_IRQHandler+0x694>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d045      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a29      	ldr	r2, [pc, #164]	@ (800422c <HAL_DMA_IRQHandler+0x698>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d040      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a28      	ldr	r2, [pc, #160]	@ (8004230 <HAL_DMA_IRQHandler+0x69c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d03b      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a26      	ldr	r2, [pc, #152]	@ (8004234 <HAL_DMA_IRQHandler+0x6a0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d036      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a25      	ldr	r2, [pc, #148]	@ (8004238 <HAL_DMA_IRQHandler+0x6a4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d031      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a23      	ldr	r2, [pc, #140]	@ (800423c <HAL_DMA_IRQHandler+0x6a8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02c      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_DMA_IRQHandler+0x6ac>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d027      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a20      	ldr	r2, [pc, #128]	@ (8004244 <HAL_DMA_IRQHandler+0x6b0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d022      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004248 <HAL_DMA_IRQHandler+0x6b4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01d      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <HAL_DMA_IRQHandler+0x6b8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d018      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <HAL_DMA_IRQHandler+0x6bc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <HAL_DMA_IRQHandler+0x6c0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00e      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <HAL_DMA_IRQHandler+0x6c4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d009      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <HAL_DMA_IRQHandler+0x6c8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <HAL_DMA_IRQHandler+0x6cc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d12b      	bne.n	8004264 <HAL_DMA_IRQHandler+0x6d0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e02a      	b.n	8004278 <HAL_DMA_IRQHandler+0x6e4>
 8004222:	bf00      	nop
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8087 	beq.w	800438c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2220      	movs	r2, #32
 8004288:	409a      	lsls	r2, r3
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b04      	cmp	r3, #4
 8004298:	d139      	bne.n	800430e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0216 	bic.w	r2, r2, #22
 80042a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <HAL_DMA_IRQHandler+0x736>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0208 	bic.w	r2, r2, #8
 80042d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	223f      	movs	r2, #63	@ 0x3f
 80042e4:	409a      	lsls	r2, r3
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 834a 	beq.w	8004998 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
          }
          return;
 800430c:	e344      	b.n	8004998 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02c      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
 800433a:	e027      	b.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e01e      	b.n	800438c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0210 	bic.w	r2, r2, #16
 800436a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8306 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8088 	beq.w	80044b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	@ (800459c <HAL_DMA_IRQHandler+0xa08>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a79      	ldr	r2, [pc, #484]	@ (80045a0 <HAL_DMA_IRQHandler+0xa0c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a77      	ldr	r2, [pc, #476]	@ (80045a4 <HAL_DMA_IRQHandler+0xa10>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a76      	ldr	r2, [pc, #472]	@ (80045a8 <HAL_DMA_IRQHandler+0xa14>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d03b      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a74      	ldr	r2, [pc, #464]	@ (80045ac <HAL_DMA_IRQHandler+0xa18>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_DMA_IRQHandler+0xa1c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a71      	ldr	r2, [pc, #452]	@ (80045b4 <HAL_DMA_IRQHandler+0xa20>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <HAL_DMA_IRQHandler+0xa24>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <HAL_DMA_IRQHandler+0xa28>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6d      	ldr	r2, [pc, #436]	@ (80045c0 <HAL_DMA_IRQHandler+0xa2c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_DMA_IRQHandler+0xa30>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6a      	ldr	r2, [pc, #424]	@ (80045c8 <HAL_DMA_IRQHandler+0xa34>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a68      	ldr	r2, [pc, #416]	@ (80045cc <HAL_DMA_IRQHandler+0xa38>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a67      	ldr	r2, [pc, #412]	@ (80045d0 <HAL_DMA_IRQHandler+0xa3c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	@ (80045d4 <HAL_DMA_IRQHandler+0xa40>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a64      	ldr	r2, [pc, #400]	@ (80045d8 <HAL_DMA_IRQHandler+0xa44>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d108      	bne.n	800445e <HAL_DMA_IRQHandler+0x8ca>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e007      	b.n	800446e <HAL_DMA_IRQHandler+0x8da>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004476:	429a      	cmp	r2, r3
 8004478:	d307      	bcc.n	800448a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f2      	bne.n	800446e <HAL_DMA_IRQHandler+0x8da>
 8004488:	e000      	b.n	800448c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800448a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80044a2:	e003      	b.n	80044ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8272 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e26c      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a43      	ldr	r2, [pc, #268]	@ (80045dc <HAL_DMA_IRQHandler+0xa48>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a42      	ldr	r2, [pc, #264]	@ (80045e0 <HAL_DMA_IRQHandler+0xa4c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a40      	ldr	r2, [pc, #256]	@ (80045e4 <HAL_DMA_IRQHandler+0xa50>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3f      	ldr	r2, [pc, #252]	@ (80045e8 <HAL_DMA_IRQHandler+0xa54>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a3d      	ldr	r2, [pc, #244]	@ (80045ec <HAL_DMA_IRQHandler+0xa58>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3c      	ldr	r2, [pc, #240]	@ (80045f0 <HAL_DMA_IRQHandler+0xa5c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3a      	ldr	r2, [pc, #232]	@ (80045f4 <HAL_DMA_IRQHandler+0xa60>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_DMA_IRQHandler+0x984>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a39      	ldr	r2, [pc, #228]	@ (80045f8 <HAL_DMA_IRQHandler+0xa64>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_DMA_IRQHandler+0x988>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_DMA_IRQHandler+0x98a>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 823f 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2204      	movs	r2, #4
 8004536:	409a      	lsls	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80cd 	beq.w	80046dc <HAL_DMA_IRQHandler+0xb48>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80c7 	beq.w	80046dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2204      	movs	r2, #4
 8004558:	409a      	lsls	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d049      	beq.n	80045fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8210 	beq.w	800499c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004584:	e20a      	b.n	800499c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8206 	beq.w	800499c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004598:	e200      	b.n	800499c <HAL_DMA_IRQHandler+0xe08>
 800459a:	bf00      	nop
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430
 80045e8:	58025444 	.word	0x58025444
 80045ec:	58025458 	.word	0x58025458
 80045f0:	5802546c 	.word	0x5802546c
 80045f4:	58025480 	.word	0x58025480
 80045f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d160      	bne.n	80046c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7f      	ldr	r2, [pc, #508]	@ (8004808 <HAL_DMA_IRQHandler+0xc74>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04a      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7d      	ldr	r2, [pc, #500]	@ (800480c <HAL_DMA_IRQHandler+0xc78>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d045      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7c      	ldr	r2, [pc, #496]	@ (8004810 <HAL_DMA_IRQHandler+0xc7c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d040      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7a      	ldr	r2, [pc, #488]	@ (8004814 <HAL_DMA_IRQHandler+0xc80>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d03b      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a79      	ldr	r2, [pc, #484]	@ (8004818 <HAL_DMA_IRQHandler+0xc84>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d036      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a77      	ldr	r2, [pc, #476]	@ (800481c <HAL_DMA_IRQHandler+0xc88>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d031      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a76      	ldr	r2, [pc, #472]	@ (8004820 <HAL_DMA_IRQHandler+0xc8c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d02c      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a74      	ldr	r2, [pc, #464]	@ (8004824 <HAL_DMA_IRQHandler+0xc90>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d027      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a73      	ldr	r2, [pc, #460]	@ (8004828 <HAL_DMA_IRQHandler+0xc94>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a71      	ldr	r2, [pc, #452]	@ (800482c <HAL_DMA_IRQHandler+0xc98>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a70      	ldr	r2, [pc, #448]	@ (8004830 <HAL_DMA_IRQHandler+0xc9c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6e      	ldr	r2, [pc, #440]	@ (8004834 <HAL_DMA_IRQHandler+0xca0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6d      	ldr	r2, [pc, #436]	@ (8004838 <HAL_DMA_IRQHandler+0xca4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6b      	ldr	r2, [pc, #428]	@ (800483c <HAL_DMA_IRQHandler+0xca8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_DMA_IRQHandler+0xcac>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb12>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <HAL_DMA_IRQHandler+0xcb0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <HAL_DMA_IRQHandler+0xb24>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0208 	bic.w	r2, r2, #8
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e007      	b.n	80046c8 <HAL_DMA_IRQHandler+0xb34>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8165 	beq.w	800499c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046da:	e15f      	b.n	800499c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2202      	movs	r2, #2
 80046e6:	409a      	lsls	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80c5 	beq.w	800487c <HAL_DMA_IRQHandler+0xce8>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80bf 	beq.w	800487c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2202      	movs	r2, #2
 8004708:	409a      	lsls	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 813a 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004734:	e134      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8130 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004748:	e12a      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 8089 	bne.w	8004868 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2b      	ldr	r2, [pc, #172]	@ (8004808 <HAL_DMA_IRQHandler+0xc74>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a29      	ldr	r2, [pc, #164]	@ (800480c <HAL_DMA_IRQHandler+0xc78>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a28      	ldr	r2, [pc, #160]	@ (8004810 <HAL_DMA_IRQHandler+0xc7c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <HAL_DMA_IRQHandler+0xc80>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a25      	ldr	r2, [pc, #148]	@ (8004818 <HAL_DMA_IRQHandler+0xc84>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	@ (800481c <HAL_DMA_IRQHandler+0xc88>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <HAL_DMA_IRQHandler+0xc8c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_DMA_IRQHandler+0xc90>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <HAL_DMA_IRQHandler+0xc94>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	@ (800482c <HAL_DMA_IRQHandler+0xc98>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	@ (8004830 <HAL_DMA_IRQHandler+0xc9c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_DMA_IRQHandler+0xca0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <HAL_DMA_IRQHandler+0xca4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a17      	ldr	r2, [pc, #92]	@ (800483c <HAL_DMA_IRQHandler+0xca8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <HAL_DMA_IRQHandler+0xcac>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xc62>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <HAL_DMA_IRQHandler+0xcb0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d128      	bne.n	8004848 <HAL_DMA_IRQHandler+0xcb4>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0214 	bic.w	r2, r2, #20
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e027      	b.n	8004858 <HAL_DMA_IRQHandler+0xcc4>
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 020a 	bic.w	r2, r2, #10
 8004856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8097 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800487a:	e091      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2208      	movs	r2, #8
 8004886:	409a      	lsls	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8088 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe0e>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8082 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <HAL_DMA_IRQHandler+0xe14>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d04a      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	@ (80049ac <HAL_DMA_IRQHandler+0xe18>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d045      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	@ (80049b0 <HAL_DMA_IRQHandler+0xe1c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d040      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	@ (80049b4 <HAL_DMA_IRQHandler+0xe20>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d03b      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <HAL_DMA_IRQHandler+0xe24>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d036      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <HAL_DMA_IRQHandler+0xe28>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d031      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_DMA_IRQHandler+0xe2c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d02c      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a36      	ldr	r2, [pc, #216]	@ (80049c4 <HAL_DMA_IRQHandler+0xe30>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d027      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a35      	ldr	r2, [pc, #212]	@ (80049c8 <HAL_DMA_IRQHandler+0xe34>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a33      	ldr	r2, [pc, #204]	@ (80049cc <HAL_DMA_IRQHandler+0xe38>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01d      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a32      	ldr	r2, [pc, #200]	@ (80049d0 <HAL_DMA_IRQHandler+0xe3c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a30      	ldr	r2, [pc, #192]	@ (80049d4 <HAL_DMA_IRQHandler+0xe40>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2f      	ldr	r2, [pc, #188]	@ (80049d8 <HAL_DMA_IRQHandler+0xe44>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <HAL_DMA_IRQHandler+0xe48>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_DMA_IRQHandler+0xe4c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_DMA_IRQHandler+0xdaa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2a      	ldr	r2, [pc, #168]	@ (80049e4 <HAL_DMA_IRQHandler+0xe50>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <HAL_DMA_IRQHandler+0xdbc>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 021c 	bic.w	r2, r2, #28
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e007      	b.n	8004960 <HAL_DMA_IRQHandler+0xdcc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020e 	bic.w	r2, r2, #14
 800495e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e004      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8

080049e8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049f6:	b2db      	uxtb	r3, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a42      	ldr	r2, [pc, #264]	@ (8004b1c <DMA_CalcBaseAndBitshift+0x118>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a41      	ldr	r2, [pc, #260]	@ (8004b20 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <DMA_CalcBaseAndBitshift+0x120>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b28 <DMA_CalcBaseAndBitshift+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3c      	ldr	r2, [pc, #240]	@ (8004b2c <DMA_CalcBaseAndBitshift+0x128>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3b      	ldr	r2, [pc, #236]	@ (8004b30 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a39      	ldr	r2, [pc, #228]	@ (8004b34 <DMA_CalcBaseAndBitshift+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a38      	ldr	r2, [pc, #224]	@ (8004b38 <DMA_CalcBaseAndBitshift+0x134>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a36      	ldr	r2, [pc, #216]	@ (8004b3c <DMA_CalcBaseAndBitshift+0x138>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a35      	ldr	r2, [pc, #212]	@ (8004b40 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a33      	ldr	r2, [pc, #204]	@ (8004b44 <DMA_CalcBaseAndBitshift+0x140>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a32      	ldr	r2, [pc, #200]	@ (8004b48 <DMA_CalcBaseAndBitshift+0x144>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	@ (8004b4c <DMA_CalcBaseAndBitshift+0x148>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2f      	ldr	r2, [pc, #188]	@ (8004b50 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b54 <DMA_CalcBaseAndBitshift+0x150>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b58 <DMA_CalcBaseAndBitshift+0x154>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <DMA_CalcBaseAndBitshift+0xac>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <DMA_CalcBaseAndBitshift+0xae>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d024      	beq.n	8004b00 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3b10      	subs	r3, #16
 8004abe:	4a27      	ldr	r2, [pc, #156]	@ (8004b5c <DMA_CalcBaseAndBitshift+0x158>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	4a24      	ldr	r2, [pc, #144]	@ (8004b60 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d908      	bls.n	8004af0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b64 <DMA_CalcBaseAndBitshift+0x160>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aee:	e00d      	b.n	8004b0c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <DMA_CalcBaseAndBitshift+0x160>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004afe:	e005      	b.n	8004b0c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
 8004b5c:	aaaaaaab 	.word	0xaaaaaaab
 8004b60:	08019e20 	.word	0x08019e20
 8004b64:	fffffc00 	.word	0xfffffc00

08004b68 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d120      	bne.n	8004bbe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d858      	bhi.n	8004c36 <DMA_CheckFifoParam+0xce>
 8004b84:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <DMA_CheckFifoParam+0x24>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004baf 	.word	0x08004baf
 8004b94:	08004b9d 	.word	0x08004b9d
 8004b98:	08004c37 	.word	0x08004c37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d048      	beq.n	8004c3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bac:	e045      	b.n	8004c3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bb6:	d142      	bne.n	8004c3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bbc:	e03f      	b.n	8004c3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc6:	d123      	bne.n	8004c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d838      	bhi.n	8004c42 <DMA_CheckFifoParam+0xda>
 8004bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <DMA_CheckFifoParam+0x70>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bef 	.word	0x08004bef
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	08004c01 	.word	0x08004c01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
        break;
 8004bec:	e030      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d025      	beq.n	8004c46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bfe:	e022      	b.n	8004c46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c08:	d11f      	bne.n	8004c4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c0e:	e01c      	b.n	8004c4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d902      	bls.n	8004c1e <DMA_CheckFifoParam+0xb6>
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d003      	beq.n	8004c24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c1c:	e018      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
        break;
 8004c22:	e015      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
    break;
 8004c34:	e00b      	b.n	8004c4e <DMA_CheckFifoParam+0xe6>
        break;
 8004c36:	bf00      	nop
 8004c38:	e00a      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e008      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3e:	bf00      	nop
 8004c40:	e006      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
    break;
 8004c4e:	bf00      	nop
    }
  }

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a38      	ldr	r2, [pc, #224]	@ (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a36      	ldr	r2, [pc, #216]	@ (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a35      	ldr	r2, [pc, #212]	@ (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a33      	ldr	r2, [pc, #204]	@ (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a32      	ldr	r2, [pc, #200]	@ (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a30      	ldr	r2, [pc, #192]	@ (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3b08      	subs	r3, #8
 8004cd0:	4a28      	ldr	r2, [pc, #160]	@ (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a24      	ldr	r2, [pc, #144]	@ (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004cec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cfc:	e024      	b.n	8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3b10      	subs	r3, #16
 8004d06:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4a1c      	ldr	r2, [pc, #112]	@ (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d806      	bhi.n	8004d26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d902      	bls.n	8004d26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3308      	adds	r3, #8
 8004d24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	@ (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	58025408 	.word	0x58025408
 8004d58:	5802541c 	.word	0x5802541c
 8004d5c:	58025430 	.word	0x58025430
 8004d60:	58025444 	.word	0x58025444
 8004d64:	58025458 	.word	0x58025458
 8004d68:	5802546c 	.word	0x5802546c
 8004d6c:	58025480 	.word	0x58025480
 8004d70:	58025494 	.word	0x58025494
 8004d74:	cccccccd 	.word	0xcccccccd
 8004d78:	16009600 	.word	0x16009600
 8004d7c:	58025880 	.word	0x58025880
 8004d80:	aaaaaaab 	.word	0xaaaaaaab
 8004d84:	400204b8 	.word	0x400204b8
 8004d88:	4002040f 	.word	0x4002040f
 8004d8c:	10008200 	.word	0x10008200
 8004d90:	40020880 	.word	0x40020880

08004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04a      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d847      	bhi.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a25      	ldr	r2, [pc, #148]	@ (8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a24      	ldr	r2, [pc, #144]	@ (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01d      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a22      	ldr	r2, [pc, #136]	@ (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	@ (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4b17      	ldr	r3, [pc, #92]	@ (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e1e:	e009      	b.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e32:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	2201      	movs	r2, #1
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	58025408 	.word	0x58025408
 8004e50:	5802541c 	.word	0x5802541c
 8004e54:	58025430 	.word	0x58025430
 8004e58:	58025444 	.word	0x58025444
 8004e5c:	58025458 	.word	0x58025458
 8004e60:	5802546c 	.word	0x5802546c
 8004e64:	58025480 	.word	0x58025480
 8004e68:	58025494 	.word	0x58025494
 8004e6c:	1600963f 	.word	0x1600963f
 8004e70:	58025940 	.word	0x58025940
 8004e74:	1000823f 	.word	0x1000823f
 8004e78:	40020940 	.word	0x40020940

08004e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	@ 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e8a:	4b89      	ldr	r3, [pc, #548]	@ (80050b0 <HAL_GPIO_Init+0x234>)
 8004e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e8e:	e194      	b.n	80051ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	2101      	movs	r1, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8186 	beq.w	80051b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d005      	beq.n	8004ec0 <HAL_GPIO_Init+0x44>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d130      	bne.n	8004f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2203      	movs	r2, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 0201 	and.w	r2, r3, #1
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d017      	beq.n	8004f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	2203      	movs	r2, #3
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d123      	bne.n	8004fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	08da      	lsrs	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3208      	adds	r2, #8
 8004f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	220f      	movs	r2, #15
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	08da      	lsrs	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3208      	adds	r2, #8
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0203 	and.w	r2, r3, #3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80e0 	beq.w	80051b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80050b4 <HAL_GPIO_Init+0x238>)
 8004ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80050b4 <HAL_GPIO_Init+0x238>)
 8004ffc:	f043 0302 	orr.w	r3, r3, #2
 8005000:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <HAL_GPIO_Init+0x238>)
 8005006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005012:	4a29      	ldr	r2, [pc, #164]	@ (80050b8 <HAL_GPIO_Init+0x23c>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a20      	ldr	r2, [pc, #128]	@ (80050bc <HAL_GPIO_Init+0x240>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d052      	beq.n	80050e4 <HAL_GPIO_Init+0x268>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1f      	ldr	r2, [pc, #124]	@ (80050c0 <HAL_GPIO_Init+0x244>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_GPIO_Init+0x22e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1e      	ldr	r2, [pc, #120]	@ (80050c4 <HAL_GPIO_Init+0x248>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <HAL_GPIO_Init+0x22a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <HAL_GPIO_Init+0x24c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d025      	beq.n	80050a2 <HAL_GPIO_Init+0x226>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <HAL_GPIO_Init+0x250>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <HAL_GPIO_Init+0x222>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <HAL_GPIO_Init+0x254>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d019      	beq.n	800509a <HAL_GPIO_Init+0x21e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_GPIO_Init+0x258>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_GPIO_Init+0x21a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <HAL_GPIO_Init+0x25c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00d      	beq.n	8005092 <HAL_GPIO_Init+0x216>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <HAL_GPIO_Init+0x260>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <HAL_GPIO_Init+0x212>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a17      	ldr	r2, [pc, #92]	@ (80050e0 <HAL_GPIO_Init+0x264>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d101      	bne.n	800508a <HAL_GPIO_Init+0x20e>
 8005086:	2309      	movs	r3, #9
 8005088:	e02d      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 800508a:	230a      	movs	r3, #10
 800508c:	e02b      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 800508e:	2308      	movs	r3, #8
 8005090:	e029      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 8005092:	2307      	movs	r3, #7
 8005094:	e027      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 8005096:	2306      	movs	r3, #6
 8005098:	e025      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 800509a:	2305      	movs	r3, #5
 800509c:	e023      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 800509e:	2304      	movs	r3, #4
 80050a0:	e021      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e01f      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e01d      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e01b      	b.n	80050e6 <HAL_GPIO_Init+0x26a>
 80050ae:	bf00      	nop
 80050b0:	58000080 	.word	0x58000080
 80050b4:	58024400 	.word	0x58024400
 80050b8:	58000400 	.word	0x58000400
 80050bc:	58020000 	.word	0x58020000
 80050c0:	58020400 	.word	0x58020400
 80050c4:	58020800 	.word	0x58020800
 80050c8:	58020c00 	.word	0x58020c00
 80050cc:	58021000 	.word	0x58021000
 80050d0:	58021400 	.word	0x58021400
 80050d4:	58021800 	.word	0x58021800
 80050d8:	58021c00 	.word	0x58021c00
 80050dc:	58022000 	.word	0x58022000
 80050e0:	58022400 	.word	0x58022400
 80050e4:	2300      	movs	r3, #0
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	f002 0203 	and.w	r2, r2, #3
 80050ec:	0092      	lsls	r2, r2, #2
 80050ee:	4093      	lsls	r3, r2
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050f6:	4938      	ldr	r1, [pc, #224]	@ (80051d8 <HAL_GPIO_Init+0x35c>)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	3302      	adds	r3, #2
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800512a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3301      	adds	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f ae63 	bne.w	8004e90 <HAL_GPIO_Init+0x14>
  }
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3724      	adds	r7, #36	@ 0x24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	58000400 	.word	0x58000400

080051dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
 80051e8:	4613      	mov	r3, r2
 80051ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051ec:	787b      	ldrb	r3, [r7, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f2:	887a      	ldrh	r2, [r7, #2]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051f8:	e003      	b.n	8005202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	041a      	lsls	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e08b      	b.n	800533a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc fb58 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2224      	movs	r2, #36	@ 0x24
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0201 	bic.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	e006      	b.n	8005298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d108      	bne.n	80052b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	e007      	b.n	80052c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <HAL_I2C_Init+0x134>)
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	02008000 	.word	0x02008000

08005348 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	817b      	strh	r3, [r7, #10]
 800535a:	460b      	mov	r3, r1
 800535c:	813b      	strh	r3, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b20      	cmp	r3, #32
 800536c:	f040 80f9 	bne.w	8005562 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_I2C_Mem_Write+0x34>
 8005376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005382:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0ed      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_I2C_Mem_Write+0x4e>
 8005392:	2302      	movs	r3, #2
 8005394:	e0e6      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800539e:	f7fd f9a5 	bl	80026ec <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	2319      	movs	r3, #25
 80053aa:	2201      	movs	r2, #1
 80053ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f001 f92e 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0d1      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2221      	movs	r2, #33	@ 0x21
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2240      	movs	r2, #64	@ 0x40
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053e8:	88f8      	ldrh	r0, [r7, #6]
 80053ea:	893a      	ldrh	r2, [r7, #8]
 80053ec:	8979      	ldrh	r1, [r7, #10]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	4603      	mov	r3, r0
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fb81 	bl	8005b00 <I2C_RequestMemoryWrite>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0a9      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	2bff      	cmp	r3, #255	@ 0xff
 8005418:	d90e      	bls.n	8005438 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	22ff      	movs	r2, #255	@ 0xff
 800541e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005424:	b2da      	uxtb	r2, r3
 8005426:	8979      	ldrh	r1, [r7, #10]
 8005428:	2300      	movs	r3, #0
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f001 fab1 	bl	8006998 <I2C_TransferConfig>
 8005436:	e00f      	b.n	8005458 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005446:	b2da      	uxtb	r2, r3
 8005448:	8979      	ldrh	r1, [r7, #10]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f001 faa0 	bl	8006998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f001 f931 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e07b      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d034      	beq.n	8005510 <HAL_I2C_Mem_Write+0x1c8>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d130      	bne.n	8005510 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	2200      	movs	r2, #0
 80054b6:	2180      	movs	r1, #128	@ 0x80
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f001 f8aa 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04d      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2bff      	cmp	r3, #255	@ 0xff
 80054d0:	d90e      	bls.n	80054f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	22ff      	movs	r2, #255	@ 0xff
 80054d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	8979      	ldrh	r1, [r7, #10]
 80054e0:	2300      	movs	r3, #0
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f001 fa55 	bl	8006998 <I2C_TransferConfig>
 80054ee:	e00f      	b.n	8005510 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	8979      	ldrh	r1, [r7, #10]
 8005502:	2300      	movs	r3, #0
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f001 fa44 	bl	8006998 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d19e      	bne.n	8005458 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f001 f917 	bl	8006752 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e01a      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2220      	movs	r2, #32
 8005534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <HAL_I2C_Mem_Write+0x224>)
 8005542:	400b      	ands	r3, r1
 8005544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	fe00e800 	.word	0xfe00e800

08005570 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	461a      	mov	r2, r3
 800557e:	4603      	mov	r3, r0
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	460b      	mov	r3, r1
 8005584:	813b      	strh	r3, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	f040 80fd 	bne.w	8005792 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_I2C_Mem_Read+0x34>
 800559e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0f1      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_I2C_Mem_Read+0x4e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0ea      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055c6:	f7fd f891 	bl	80026ec <HAL_GetTick>
 80055ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2319      	movs	r3, #25
 80055d2:	2201      	movs	r2, #1
 80055d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f001 f81a 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0d5      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2222      	movs	r2, #34	@ 0x22
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005610:	88f8      	ldrh	r0, [r7, #6]
 8005612:	893a      	ldrh	r2, [r7, #8]
 8005614:	8979      	ldrh	r1, [r7, #10]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4603      	mov	r3, r0
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fac1 	bl	8005ba8 <I2C_RequestMemoryRead>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0ad      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2bff      	cmp	r3, #255	@ 0xff
 8005640:	d90e      	bls.n	8005660 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	22ff      	movs	r2, #255	@ 0xff
 8005646:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564c:	b2da      	uxtb	r2, r3
 800564e:	8979      	ldrh	r1, [r7, #10]
 8005650:	4b52      	ldr	r3, [pc, #328]	@ (800579c <HAL_I2C_Mem_Read+0x22c>)
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f001 f99d 	bl	8006998 <I2C_TransferConfig>
 800565e:	e00f      	b.n	8005680 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566e:	b2da      	uxtb	r2, r3
 8005670:	8979      	ldrh	r1, [r7, #10]
 8005672:	4b4a      	ldr	r3, [pc, #296]	@ (800579c <HAL_I2C_Mem_Read+0x22c>)
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f001 f98c 	bl	8006998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005686:	2200      	movs	r2, #0
 8005688:	2104      	movs	r1, #4
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 ffc1 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07c      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d034      	beq.n	8005740 <HAL_I2C_Mem_Read+0x1d0>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d130      	bne.n	8005740 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	2200      	movs	r2, #0
 80056e6:	2180      	movs	r1, #128	@ 0x80
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 ff92 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e04d      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2bff      	cmp	r3, #255	@ 0xff
 8005700:	d90e      	bls.n	8005720 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	@ 0xff
 8005706:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	b2da      	uxtb	r2, r3
 800570e:	8979      	ldrh	r1, [r7, #10]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f001 f93d 	bl	8006998 <I2C_TransferConfig>
 800571e:	e00f      	b.n	8005740 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f001 f92c 	bl	8006998 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d19a      	bne.n	8005680 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 ffff 	bl	8006752 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e01a      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2220      	movs	r2, #32
 8005764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <HAL_I2C_Mem_Read+0x230>)
 8005772:	400b      	ands	r3, r1
 8005774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e000      	b.n	8005794 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
  }
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	80002400 	.word	0x80002400
 80057a0:	fe00e800 	.word	0xfe00e800

080057a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
  }
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00f      	beq.n	800581a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005818:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f043 0208 	orr.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005842:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00f      	beq.n	800586e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585c:	f043 0202 	orr.w	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800586c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 030b 	and.w	r3, r3, #11
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fd6d 	bl	8006360 <I2C_ITError>
  }
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
 80058c2:	4613      	mov	r3, r2
 80058c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b086      	sub	sp, #24
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <I2C_Slave_ISR_IT+0x24>
 800592e:	2302      	movs	r3, #2
 8005930:	e0e2      	b.n	8005af8 <I2C_Slave_ISR_IT+0x1ea>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fa5d 	bl	8005e10 <I2C_ITSlaveCplt>
 8005956:	e0ca      	b.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04b      	beq.n	80059fa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005968:	2b00      	cmp	r3, #0
 800596a:	d046      	beq.n	80059fa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d128      	bne.n	80059c8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b28      	cmp	r3, #40	@ 0x28
 8005980:	d108      	bne.n	8005994 <I2C_Slave_ISR_IT+0x86>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005988:	d104      	bne.n	8005994 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800598a:	6939      	ldr	r1, [r7, #16]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fc93 	bl	80062b8 <I2C_ITListenCplt>
 8005992:	e031      	b.n	80059f8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b29      	cmp	r3, #41	@ 0x29
 800599e:	d10e      	bne.n	80059be <I2C_Slave_ISR_IT+0xb0>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059a6:	d00a      	beq.n	80059be <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2210      	movs	r2, #16
 80059ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fdec 	bl	800658e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f9ce 	bl	8005d58 <I2C_ITSlaveSeqCplt>
 80059bc:	e01c      	b.n	80059f8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2210      	movs	r2, #16
 80059c4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80059c6:	e08f      	b.n	8005ae8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <I2C_Slave_ISR_IT+0xdc>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e8:	d17e      	bne.n	8005ae8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fcb5 	bl	8006360 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80059f6:	e077      	b.n	8005ae8 <I2C_Slave_ISR_IT+0x1da>
 80059f8:	e076      	b.n	8005ae8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02f      	beq.n	8005a64 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d02a      	beq.n	8005a64 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d14b      	bne.n	8005aec <I2C_Slave_ISR_IT+0x1de>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a5a:	d047      	beq.n	8005aec <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f97b 	bl	8005d58 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005a62:	e043      	b.n	8005aec <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005a78:	6939      	ldr	r1, [r7, #16]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f8e8 	bl	8005c50 <I2C_ITAddrCplt>
 8005a80:	e035      	b.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d030      	beq.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02b      	beq.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d018      	beq.n	8005ad2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ad0:	e00d      	b.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ad8:	d002      	beq.n	8005ae0 <I2C_Slave_ISR_IT+0x1d2>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f939 	bl	8005d58 <I2C_ITSlaveSeqCplt>
 8005ae6:	e002      	b.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005aec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	817b      	strh	r3, [r7, #10]
 8005b12:	460b      	mov	r3, r1
 8005b14:	813b      	strh	r3, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	8979      	ldrh	r1, [r7, #10]
 8005b20:	4b20      	ldr	r3, [pc, #128]	@ (8005ba4 <I2C_RequestMemoryWrite+0xa4>)
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 ff35 	bl	8006998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fdc6 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e02c      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b52:	e015      	b.n	8005b80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fdac 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e012      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b76:	893b      	ldrh	r3, [r7, #8]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2180      	movs	r1, #128	@ 0x80
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fd41 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	80002000 	.word	0x80002000

08005ba8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	8979      	ldrh	r1, [r7, #10]
 8005bc8:	4b20      	ldr	r3, [pc, #128]	@ (8005c4c <I2C_RequestMemoryRead+0xa4>)
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fee2 	bl	8006998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	69b9      	ldr	r1, [r7, #24]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fd73 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e02c      	b.n	8005c42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bee:	893b      	ldrh	r3, [r7, #8]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bf8:	e015      	b.n	8005c26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bfa:	893b      	ldrh	r3, [r7, #8]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fd59 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e012      	b.n	8005c42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2140      	movs	r1, #64	@ 0x40
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fcee 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	80002000 	.word	0x80002000

08005c50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c66:	2b28      	cmp	r3, #40	@ 0x28
 8005c68:	d16a      	bne.n	8005d40 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005c88:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c96:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ca4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d138      	bne.n	8005d20 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	89bb      	ldrh	r3, [r7, #12]
 8005cb6:	4053      	eors	r3, r2
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f003 0306 	and.w	r3, r3, #6
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11c      	bne.n	8005cfc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d13b      	bne.n	8005d50 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cee:	89ba      	ldrh	r2, [r7, #12]
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fdde 	bl	80058b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cfa:	e029      	b.n	8005d50 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fe79 	bl	80069fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d12:	89ba      	ldrh	r2, [r7, #12]
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fdcc 	bl	80058b6 <HAL_I2C_AddrCallback>
}
 8005d1e:	e017      	b.n	8005d50 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fe69 	bl	80069fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d32:	89ba      	ldrh	r2, [r7, #12]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fdbc 	bl	80058b6 <HAL_I2C_AddrCallback>
}
 8005d3e:	e007      	b.n	8005d50 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00c      	b.n	8005da6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005da4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b29      	cmp	r3, #41	@ 0x29
 8005db0:	d112      	bne.n	8005dd8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2228      	movs	r2, #40	@ 0x28
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2221      	movs	r2, #33	@ 0x21
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fe1a 	bl	80069fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fd5c 	bl	800588e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dd6:	e017      	b.n	8005e08 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005de2:	d111      	bne.n	8005e08 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2228      	movs	r2, #40	@ 0x28
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2222      	movs	r2, #34	@ 0x22
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005df2:	2102      	movs	r1, #2
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fe01 	bl	80069fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fd4d 	bl	80058a2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	2b21      	cmp	r3, #33	@ 0x21
 8005e40:	d002      	beq.n	8005e48 <I2C_ITSlaveCplt+0x38>
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	2b29      	cmp	r3, #41	@ 0x29
 8005e46:	d108      	bne.n	8005e5a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e48:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fdd5 	bl	80069fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2221      	movs	r2, #33	@ 0x21
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e58:	e019      	b.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	2b22      	cmp	r3, #34	@ 0x22
 8005e5e:	d002      	beq.n	8005e66 <I2C_ITSlaveCplt+0x56>
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e64:	d108      	bne.n	8005e78 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e66:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fdc6 	bl	80069fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2222      	movs	r2, #34	@ 0x22
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e76:	e00a      	b.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	2b28      	cmp	r3, #40	@ 0x28
 8005e7c:	d107      	bne.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005e7e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fdba 	bl	80069fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <I2C_ITSlaveCplt+0x298>)
 8005eaa:	400b      	ands	r3, r1
 8005eac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb6d 	bl	800658e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07a      	beq.n	8005fb4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ecc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8111 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a73      	ldr	r2, [pc, #460]	@ (80060ac <I2C_ITSlaveCplt+0x29c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d059      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a71      	ldr	r2, [pc, #452]	@ (80060b0 <I2C_ITSlaveCplt+0x2a0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d053      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80060b4 <I2C_ITSlaveCplt+0x2a4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d04d      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a6d      	ldr	r2, [pc, #436]	@ (80060b8 <I2C_ITSlaveCplt+0x2a8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d047      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80060bc <I2C_ITSlaveCplt+0x2ac>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d041      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a69      	ldr	r2, [pc, #420]	@ (80060c0 <I2C_ITSlaveCplt+0x2b0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a67      	ldr	r2, [pc, #412]	@ (80060c4 <I2C_ITSlaveCplt+0x2b4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d035      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a65      	ldr	r2, [pc, #404]	@ (80060c8 <I2C_ITSlaveCplt+0x2b8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d02f      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a63      	ldr	r2, [pc, #396]	@ (80060cc <I2C_ITSlaveCplt+0x2bc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d029      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a61      	ldr	r2, [pc, #388]	@ (80060d0 <I2C_ITSlaveCplt+0x2c0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d023      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	@ (80060d4 <I2C_ITSlaveCplt+0x2c4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5d      	ldr	r2, [pc, #372]	@ (80060d8 <I2C_ITSlaveCplt+0x2c8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d017      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80060dc <I2C_ITSlaveCplt+0x2cc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d011      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a59      	ldr	r2, [pc, #356]	@ (80060e0 <I2C_ITSlaveCplt+0x2d0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a57      	ldr	r2, [pc, #348]	@ (80060e4 <I2C_ITSlaveCplt+0x2d4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d005      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a55      	ldr	r2, [pc, #340]	@ (80060e8 <I2C_ITSlaveCplt+0x2d8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d105      	bne.n	8005fa4 <I2C_ITSlaveCplt+0x194>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	e004      	b.n	8005fae <I2C_ITSlaveCplt+0x19e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005fb2:	e0a2      	b.n	80060fa <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 809d 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8090 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a32      	ldr	r2, [pc, #200]	@ (80060ac <I2C_ITSlaveCplt+0x29c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d059      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a30      	ldr	r2, [pc, #192]	@ (80060b0 <I2C_ITSlaveCplt+0x2a0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d053      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80060b4 <I2C_ITSlaveCplt+0x2a4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04d      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <I2C_ITSlaveCplt+0x2a8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d047      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <I2C_ITSlaveCplt+0x2ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d041      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a28      	ldr	r2, [pc, #160]	@ (80060c0 <I2C_ITSlaveCplt+0x2b0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a26      	ldr	r2, [pc, #152]	@ (80060c4 <I2C_ITSlaveCplt+0x2b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d035      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a24      	ldr	r2, [pc, #144]	@ (80060c8 <I2C_ITSlaveCplt+0x2b8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02f      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a22      	ldr	r2, [pc, #136]	@ (80060cc <I2C_ITSlaveCplt+0x2bc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d029      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a20      	ldr	r2, [pc, #128]	@ (80060d0 <I2C_ITSlaveCplt+0x2c0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d023      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1e      	ldr	r2, [pc, #120]	@ (80060d4 <I2C_ITSlaveCplt+0x2c4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <I2C_ITSlaveCplt+0x2c8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d017      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <I2C_ITSlaveCplt+0x2cc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d011      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <I2C_ITSlaveCplt+0x2d0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a16      	ldr	r2, [pc, #88]	@ (80060e4 <I2C_ITSlaveCplt+0x2d4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d005      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a14      	ldr	r2, [pc, #80]	@ (80060e8 <I2C_ITSlaveCplt+0x2d8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d128      	bne.n	80060ec <I2C_ITSlaveCplt+0x2dc>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	e027      	b.n	80060f6 <I2C_ITSlaveCplt+0x2e6>
 80060a6:	bf00      	nop
 80060a8:	fe00e800 	.word	0xfe00e800
 80060ac:	40020010 	.word	0x40020010
 80060b0:	40020028 	.word	0x40020028
 80060b4:	40020040 	.word	0x40020040
 80060b8:	40020058 	.word	0x40020058
 80060bc:	40020070 	.word	0x40020070
 80060c0:	40020088 	.word	0x40020088
 80060c4:	400200a0 	.word	0x400200a0
 80060c8:	400200b8 	.word	0x400200b8
 80060cc:	40020410 	.word	0x40020410
 80060d0:	40020428 	.word	0x40020428
 80060d4:	40020440 	.word	0x40020440
 80060d8:	40020458 	.word	0x40020458
 80060dc:	40020470 	.word	0x40020470
 80060e0:	40020488 	.word	0x40020488
 80060e4:	400204a0 	.word	0x400204a0
 80060e8:	400204b8 	.word	0x400204b8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b00      	cmp	r3, #0
 8006164:	d049      	beq.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800616c:	2b00      	cmp	r3, #0
 800616e:	d044      	beq.n	80061fa <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d128      	bne.n	80061cc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b28      	cmp	r3, #40	@ 0x28
 8006184:	d108      	bne.n	8006198 <I2C_ITSlaveCplt+0x388>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800618c:	d104      	bne.n	8006198 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f891 	bl	80062b8 <I2C_ITListenCplt>
 8006196:	e030      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b29      	cmp	r3, #41	@ 0x29
 80061a2:	d10e      	bne.n	80061c2 <I2C_ITSlaveCplt+0x3b2>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061aa:	d00a      	beq.n	80061c2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2210      	movs	r2, #16
 80061b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9ea 	bl	800658e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fdcc 	bl	8005d58 <I2C_ITSlaveSeqCplt>
 80061c0:	e01b      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2210      	movs	r2, #16
 80061c8:	61da      	str	r2, [r3, #28]
 80061ca:	e016      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d8:	f043 0204 	orr.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <I2C_ITSlaveCplt+0x3de>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061ec:	d105      	bne.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8b3 	bl	8006360 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620c:	2b00      	cmp	r3, #0
 800620e:	d010      	beq.n	8006232 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8a2 	bl	8006360 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b28      	cmp	r3, #40	@ 0x28
 8006226:	d141      	bne.n	80062ac <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006228:	6979      	ldr	r1, [r7, #20]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f844 	bl	80062b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006230:	e03c      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800623a:	d014      	beq.n	8006266 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff fd8b 	bl	8005d58 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <I2C_ITSlaveCplt+0x4a4>)
 8006246:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fb37 	bl	80058d2 <HAL_I2C_ListenCpltCallback>
}
 8006264:	e022      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b22      	cmp	r3, #34	@ 0x22
 8006270:	d10e      	bne.n	8006290 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fb0a 	bl	80058a2 <HAL_I2C_SlaveRxCpltCallback>
}
 800628e:	e00d      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff faf1 	bl	800588e <HAL_I2C_SlaveTxCpltCallback>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	ffff0000 	.word	0xffff0000

080062b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a25      	ldr	r2, [pc, #148]	@ (800635c <I2C_ITListenCplt+0xa4>)
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d022      	beq.n	8006334 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632c:	f043 0204 	orr.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006334:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb5f 	bl	80069fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2210      	movs	r2, #16
 8006344:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fabf 	bl	80058d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	ffff0000 	.word	0xffff0000

08006360 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006370:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a6d      	ldr	r2, [pc, #436]	@ (8006534 <I2C_ITError+0x1d4>)
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b28      	cmp	r3, #40	@ 0x28
 8006396:	d005      	beq.n	80063a4 <I2C_ITError+0x44>
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b29      	cmp	r3, #41	@ 0x29
 800639c:	d002      	beq.n	80063a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a2:	d10b      	bne.n	80063bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063a4:	2103      	movs	r1, #3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fb28 	bl	80069fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2228      	movs	r2, #40	@ 0x28
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a60      	ldr	r2, [pc, #384]	@ (8006538 <I2C_ITError+0x1d8>)
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80063ba:	e030      	b.n	800641e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb1b 	bl	80069fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8e1 	bl	800658e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d01f      	beq.n	8006418 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d114      	bne.n	8006418 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d109      	bne.n	8006410 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2210      	movs	r2, #16
 8006402:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2220      	movs	r2, #32
 8006416:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	2b00      	cmp	r3, #0
 800642a:	d039      	beq.n	80064a0 <I2C_ITError+0x140>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b11      	cmp	r3, #17
 8006430:	d002      	beq.n	8006438 <I2C_ITError+0xd8>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b21      	cmp	r3, #33	@ 0x21
 8006436:	d133      	bne.n	80064a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006446:	d107      	bne.n	8006458 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006456:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fac3 	bl	80049e8 <HAL_DMA_GetState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d017      	beq.n	8006498 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	4a33      	ldr	r2, [pc, #204]	@ (800653c <I2C_ITError+0x1dc>)
 800646e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	4618      	mov	r0, r3
 800647e:	f7fd f943 	bl	8003708 <HAL_DMA_Abort_IT>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d04d      	beq.n	8006524 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006492:	4610      	mov	r0, r2
 8006494:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006496:	e045      	b.n	8006524 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f851 	bl	8006540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800649e:	e041      	b.n	8006524 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d039      	beq.n	800651c <I2C_ITError+0x1bc>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b12      	cmp	r3, #18
 80064ac:	d002      	beq.n	80064b4 <I2C_ITError+0x154>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b22      	cmp	r3, #34	@ 0x22
 80064b2:	d133      	bne.n	800651c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c2:	d107      	bne.n	80064d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fa85 	bl	80049e8 <HAL_DMA_GetState>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d017      	beq.n	8006514 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	4a14      	ldr	r2, [pc, #80]	@ (800653c <I2C_ITError+0x1dc>)
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fd f905 	bl	8003708 <HAL_DMA_Abort_IT>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800650e:	4610      	mov	r0, r2
 8006510:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006512:	e009      	b.n	8006528 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f813 	bl	8006540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800651a:	e005      	b.n	8006528 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f80f 	bl	8006540 <I2C_TreatErrorCallback>
  }
}
 8006522:	e002      	b.n	800652a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006528:	bf00      	nop
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	ffff0000 	.word	0xffff0000
 8006538:	0800590f 	.word	0x0800590f
 800653c:	080065d7 	.word	0x080065d7

08006540 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b60      	cmp	r3, #96	@ 0x60
 8006552:	d10e      	bne.n	8006572 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff f9c5 	bl	80058fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006570:	e009      	b.n	8006586 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff f9b0 	bl	80058e6 <HAL_I2C_ErrorCallback>
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d103      	bne.n	80065ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d007      	beq.n	80065ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	619a      	str	r2, [r3, #24]
  }
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	2200      	movs	r2, #0
 80065f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	2200      	movs	r2, #0
 8006602:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ff9b 	bl	8006540 <I2C_TreatErrorCallback>
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006622:	e03b      	b.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f8d5 	bl	80067d8 <I2C_IsErrorOccurred>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e041      	b.n	80066bc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d02d      	beq.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006640:	f7fc f854 	bl	80026ec <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d122      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d113      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e00f      	b.n	80066bc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d0b4      	beq.n	8006624 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066d0:	e033      	b.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f87e 	bl	80067d8 <I2C_IsErrorOccurred>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e031      	b.n	800674a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d025      	beq.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fb fffd 	bl	80026ec <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11a      	bne.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d013      	beq.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e007      	b.n	800674a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d1c4      	bne.n	80066d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675e:	e02f      	b.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f837 	bl	80067d8 <I2C_IsErrorOccurred>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e02d      	b.n	80067d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006774:	f7fb ffba 	bl	80026ec <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d11a      	bne.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b20      	cmp	r3, #32
 8006796:	d013      	beq.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e007      	b.n	80067d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d1c8      	bne.n	8006760 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	@ 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d068      	beq.n	80068d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2210      	movs	r2, #16
 800680a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800680c:	e049      	b.n	80068a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d045      	beq.n	80068a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fb ff69 	bl	80026ec <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <I2C_IsErrorOccurred+0x54>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d13a      	bne.n	80068a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800683e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800684a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684e:	d121      	bne.n	8006894 <I2C_IsErrorOccurred+0xbc>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006856:	d01d      	beq.n	8006894 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	2b20      	cmp	r3, #32
 800685c:	d01a      	beq.n	8006894 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800686c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800686e:	f7fb ff3d 	bl	80026ec <HAL_GetTick>
 8006872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006874:	e00e      	b.n	8006894 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006876:	f7fb ff39 	bl	80026ec <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b19      	cmp	r3, #25
 8006882:	d907      	bls.n	8006894 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	f043 0320 	orr.w	r3, r3, #32
 800688a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006892:	e006      	b.n	80068a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d1e9      	bne.n	8006876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d003      	beq.n	80068b8 <I2C_IsErrorOccurred+0xe0>
 80068b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0aa      	beq.n	800680e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2220      	movs	r2, #32
 80068c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800691a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	f043 0302 	orr.w	r3, r3, #2
 8006932:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800693c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01c      	beq.n	8006986 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fe1e 	bl	800658e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <I2C_IsErrorOccurred+0x1bc>)
 800695e:	400b      	ands	r3, r1
 8006960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	431a      	orrs	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	@ 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	fe00e800 	.word	0xfe00e800

08006998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	817b      	strh	r3, [r7, #10]
 80069a6:	4613      	mov	r3, r2
 80069a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069aa:	897b      	ldrh	r3, [r7, #10]
 80069ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069b0:	7a7b      	ldrb	r3, [r7, #9]
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	0d5b      	lsrs	r3, r3, #21
 80069d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80069d6:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <I2C_TransferConfig+0x60>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	43db      	mvns	r3, r3
 80069dc:	ea02 0103 	and.w	r1, r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	03ff63ff 	.word	0x03ff63ff

080069fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a0c:	887b      	ldrh	r3, [r7, #2]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006a1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a2a:	2b28      	cmp	r3, #40	@ 0x28
 8006a2c:	d003      	beq.n	8006a36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006a34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006a46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a54:	2b28      	cmp	r3, #40	@ 0x28
 8006a56:	d003      	beq.n	8006a60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da03      	bge.n	8006a70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a70:	887b      	ldrh	r3, [r7, #2]
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d103      	bne.n	8006a7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a7e:	887b      	ldrh	r3, [r7, #2]
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d103      	bne.n	8006a8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f043 0320 	orr.w	r3, r3, #32
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a8c:	887b      	ldrh	r3, [r7, #2]
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d103      	bne.n	8006a9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	43da      	mvns	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d138      	bne.n	8006b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e032      	b.n	8006b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2224      	movs	r2, #36	@ 0x24
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6819      	ldr	r1, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d139      	bne.n	8006bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e033      	b.n	8006bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2224      	movs	r2, #36	@ 0x24
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0bf      	b.n	8006d7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fa ff42 	bl	8001a98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6999      	ldr	r1, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6899      	ldr	r1, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d84 <HAL_LTDC_Init+0x19c>)
 8006c5c:	400b      	ands	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6899      	ldr	r1, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68d9      	ldr	r1, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4b3e      	ldr	r3, [pc, #248]	@ (8006d84 <HAL_LTDC_Init+0x19c>)
 8006c8a:	400b      	ands	r3, r1
 8006c8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68d9      	ldr	r1, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6919      	ldr	r1, [r3, #16]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <HAL_LTDC_Init+0x19c>)
 8006cb8:	400b      	ands	r3, r1
 8006cba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	041b      	lsls	r3, r3, #16
 8006cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6919      	ldr	r1, [r3, #16]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6959      	ldr	r1, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b27      	ldr	r3, [pc, #156]	@ (8006d84 <HAL_LTDC_Init+0x19c>)
 8006ce6:	400b      	ands	r3, r1
 8006ce8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6959      	ldr	r1, [r3, #20]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0206 	orr.w	r2, r2, #6
 8006d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	f000f800 	.word	0xf000f800

08006d88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d88:	b5b0      	push	{r4, r5, r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_LTDC_ConfigLayer+0x1a>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e02c      	b.n	8006dfc <HAL_LTDC_ConfigLayer+0x74>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2134      	movs	r1, #52	@ 0x34
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f811 	bl	8006e04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2201      	movs	r2, #1
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bdb0      	pop	{r4, r5, r7, pc}

08006e04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	@ 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e20:	4413      	add	r3, r2
 8006e22:	041b      	lsls	r3, r3, #16
 8006e24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	01db      	lsls	r3, r3, #7
 8006e30:	4413      	add	r3, r2
 8006e32:	3384      	adds	r3, #132	@ 0x84
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	01d2      	lsls	r2, r2, #7
 8006e40:	440a      	add	r2, r1
 8006e42:	3284      	adds	r2, #132	@ 0x84
 8006e44:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006e48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e5a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e5c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	01db      	lsls	r3, r3, #7
 8006e68:	440b      	add	r3, r1
 8006e6a:	3384      	adds	r3, #132	@ 0x84
 8006e6c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e82:	4413      	add	r3, r2
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	01db      	lsls	r3, r3, #7
 8006e92:	4413      	add	r3, r2
 8006e94:	3384      	adds	r3, #132	@ 0x84
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	01d2      	lsls	r2, r2, #7
 8006ea2:	440a      	add	r2, r1
 8006ea4:	3284      	adds	r2, #132	@ 0x84
 8006ea6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006eaa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eba:	4413      	add	r3, r2
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	01db      	lsls	r3, r3, #7
 8006ec8:	440b      	add	r3, r1
 8006eca:	3384      	adds	r3, #132	@ 0x84
 8006ecc:	4619      	mov	r1, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	01db      	lsls	r3, r3, #7
 8006ede:	4413      	add	r3, r2
 8006ee0:	3384      	adds	r3, #132	@ 0x84
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	01d2      	lsls	r2, r2, #7
 8006eee:	440a      	add	r2, r1
 8006ef0:	3284      	adds	r2, #132	@ 0x84
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	01db      	lsls	r3, r3, #7
 8006f02:	4413      	add	r3, r2
 8006f04:	3384      	adds	r3, #132	@ 0x84
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	061b      	lsls	r3, r3, #24
 8006f28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	01db      	lsls	r3, r3, #7
 8006f34:	4413      	add	r3, r2
 8006f36:	3384      	adds	r3, #132	@ 0x84
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	01db      	lsls	r3, r3, #7
 8006f44:	4413      	add	r3, r2
 8006f46:	3384      	adds	r3, #132	@ 0x84
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f54:	461a      	mov	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	01db      	lsls	r3, r3, #7
 8006f68:	440b      	add	r3, r1
 8006f6a:	3384      	adds	r3, #132	@ 0x84
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	01db      	lsls	r3, r3, #7
 8006f7e:	4413      	add	r3, r2
 8006f80:	3384      	adds	r3, #132	@ 0x84
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	01d2      	lsls	r2, r2, #7
 8006f8e:	440a      	add	r2, r1
 8006f90:	3284      	adds	r2, #132	@ 0x84
 8006f92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	01db      	lsls	r3, r3, #7
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3384      	adds	r3, #132	@ 0x84
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	01db      	lsls	r3, r3, #7
 8006fb8:	4413      	add	r3, r2
 8006fba:	3384      	adds	r3, #132	@ 0x84
 8006fbc:	69da      	ldr	r2, [r3, #28]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	01db      	lsls	r3, r3, #7
 8006fc8:	440b      	add	r3, r1
 8006fca:	3384      	adds	r3, #132	@ 0x84
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4b58      	ldr	r3, [pc, #352]	@ (8007130 <LTDC_SetConfig+0x32c>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	6809      	ldr	r1, [r1, #0]
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	01c9      	lsls	r1, r1, #7
 8006fe6:	4401      	add	r1, r0
 8006fe8:	3184      	adds	r1, #132	@ 0x84
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4413      	add	r3, r2
 8006ffa:	3384      	adds	r3, #132	@ 0x84
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	01db      	lsls	r3, r3, #7
 8007008:	4413      	add	r3, r2
 800700a:	3384      	adds	r3, #132	@ 0x84
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	01db      	lsls	r3, r3, #7
 800701c:	4413      	add	r3, r2
 800701e:	3384      	adds	r3, #132	@ 0x84
 8007020:	461a      	mov	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007030:	2304      	movs	r3, #4
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e01b      	b.n	800706e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d102      	bne.n	8007044 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800703e:	2303      	movs	r3, #3
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	e014      	b.n	800706e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b04      	cmp	r3, #4
 800704a:	d00b      	beq.n	8007064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007050:	2b02      	cmp	r3, #2
 8007052:	d007      	beq.n	8007064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007058:	2b03      	cmp	r3, #3
 800705a:	d003      	beq.n	8007064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007060:	2b07      	cmp	r3, #7
 8007062:	d102      	bne.n	800706a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007064:	2302      	movs	r3, #2
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	e001      	b.n	800706e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800706a:	2301      	movs	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	01db      	lsls	r3, r3, #7
 8007078:	4413      	add	r3, r2
 800707a:	3384      	adds	r3, #132	@ 0x84
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	6812      	ldr	r2, [r2, #0]
 8007082:	4611      	mov	r1, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	01d2      	lsls	r2, r2, #7
 8007088:	440a      	add	r2, r1
 800708a:	3284      	adds	r2, #132	@ 0x84
 800708c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	fb02 f303 	mul.w	r3, r2, r3
 800709c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	1acb      	subs	r3, r1, r3
 80070a8:	69f9      	ldr	r1, [r7, #28]
 80070aa:	fb01 f303 	mul.w	r3, r1, r3
 80070ae:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80070b0:	68f9      	ldr	r1, [r7, #12]
 80070b2:	6809      	ldr	r1, [r1, #0]
 80070b4:	4608      	mov	r0, r1
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	01c9      	lsls	r1, r1, #7
 80070ba:	4401      	add	r1, r0
 80070bc:	3184      	adds	r1, #132	@ 0x84
 80070be:	4313      	orrs	r3, r2
 80070c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	01db      	lsls	r3, r3, #7
 80070cc:	4413      	add	r3, r2
 80070ce:	3384      	adds	r3, #132	@ 0x84
 80070d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	01db      	lsls	r3, r3, #7
 80070dc:	440b      	add	r3, r1
 80070de:	3384      	adds	r3, #132	@ 0x84
 80070e0:	4619      	mov	r1, r3
 80070e2:	4b14      	ldr	r3, [pc, #80]	@ (8007134 <LTDC_SetConfig+0x330>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	01db      	lsls	r3, r3, #7
 80070f2:	4413      	add	r3, r2
 80070f4:	3384      	adds	r3, #132	@ 0x84
 80070f6:	461a      	mov	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	01db      	lsls	r3, r3, #7
 8007108:	4413      	add	r3, r2
 800710a:	3384      	adds	r3, #132	@ 0x84
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	4611      	mov	r1, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	01d2      	lsls	r2, r2, #7
 8007118:	440a      	add	r2, r1
 800711a:	3284      	adds	r2, #132	@ 0x84
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	6013      	str	r3, [r2, #0]
}
 8007122:	bf00      	nop
 8007124:	3724      	adds	r7, #36	@ 0x24
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	fffff8f8 	.word	0xfffff8f8
 8007134:	fffff800 	.word	0xfffff800

08007138 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af02      	add	r7, sp, #8
 800713e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e0fe      	b.n	8007348 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f00e fb6a 	bl	8015838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2203      	movs	r2, #3
 8007168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f008 f98a 	bl	800f48a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	7c1a      	ldrb	r2, [r3, #16]
 800717e:	f88d 2000 	strb.w	r2, [sp]
 8007182:	3304      	adds	r3, #4
 8007184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007186:	f008 f85b 	bl	800f240 <USB_CoreInit>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0d5      	b.n	8007348 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f008 f982 	bl	800f4ac <USB_SetCurrentMode>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e0c6      	b.n	8007348 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	e04a      	b.n	8007256 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80071c0:	7bfa      	ldrb	r2, [r7, #15]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	3315      	adds	r3, #21
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3314      	adds	r3, #20
 80071e4:	7bfa      	ldrb	r2, [r7, #15]
 80071e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	b298      	uxth	r0, r3
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	332e      	adds	r3, #46	@ 0x2e
 80071fc:	4602      	mov	r2, r0
 80071fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007200:	7bfa      	ldrb	r2, [r7, #15]
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	3318      	adds	r3, #24
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007214:	7bfa      	ldrb	r2, [r7, #15]
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	331c      	adds	r3, #28
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	3320      	adds	r3, #32
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	3324      	adds	r3, #36	@ 0x24
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3301      	adds	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	7bfa      	ldrb	r2, [r7, #15]
 800725c:	429a      	cmp	r2, r3
 800725e:	d3af      	bcc.n	80071c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
 8007264:	e044      	b.n	80072f0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007266:	7bfa      	ldrb	r2, [r7, #15]
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800727c:	7bfa      	ldrb	r2, [r7, #15]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007292:	7bfa      	ldrb	r2, [r7, #15]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072a8:	7bfa      	ldrb	r2, [r7, #15]
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	3301      	adds	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	791b      	ldrb	r3, [r3, #4]
 80072f4:	7bfa      	ldrb	r2, [r7, #15]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d3b5      	bcc.n	8007266 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7c1a      	ldrb	r2, [r3, #16]
 8007302:	f88d 2000 	strb.w	r2, [sp]
 8007306:	3304      	adds	r3, #4
 8007308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800730a:	f008 f91b 	bl	800f544 <USB_DevInit>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e013      	b.n	8007348 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7b1b      	ldrb	r3, [r3, #12]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d102      	bne.n	800733c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 f96c 	bl	8008614 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f009 f95a 	bl	80105fa <USB_DevDisconnect>

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_PCD_Start+0x1c>
 8007368:	2302      	movs	r3, #2
 800736a:	e022      	b.n	80073b2 <HAL_PCD_Start+0x62>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007384:	2b01      	cmp	r3, #1
 8007386:	d105      	bne.n	8007394 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f008 f865 	bl	800f468 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f009 f908 	bl	80105b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073ba:	b590      	push	{r4, r7, lr}
 80073bc:	b08d      	sub	sp, #52	@ 0x34
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f009 f9c6 	bl	8010762 <USB_GetMode>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 84b9 	bne.w	8007d50 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f009 f92a 	bl	801063c <USB_ReadInterrupts>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 84af 	beq.w	8007d4e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	0a1b      	lsrs	r3, r3, #8
 80073fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f009 f917 	bl	801063c <USB_ReadInterrupts>
 800740e:	4603      	mov	r3, r0
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d107      	bne.n	8007428 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695a      	ldr	r2, [r3, #20]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f002 0202 	and.w	r2, r2, #2
 8007426:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f009 f905 	bl	801063c <USB_ReadInterrupts>
 8007432:	4603      	mov	r3, r0
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b10      	cmp	r3, #16
 800743a:	d161      	bne.n	8007500 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0210 	bic.w	r2, r2, #16
 800744a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	3304      	adds	r3, #4
 800746a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	0c5b      	lsrs	r3, r3, #17
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2b02      	cmp	r3, #2
 8007476:	d124      	bne.n	80074c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800747e:	4013      	ands	r3, r2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d035      	beq.n	80074f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	091b      	lsrs	r3, r3, #4
 800748c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800748e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6a38      	ldr	r0, [r7, #32]
 8007498:	f008 ff3c 	bl	8010314 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a8:	441a      	add	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	695a      	ldr	r2, [r3, #20]
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ba:	441a      	add	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	615a      	str	r2, [r3, #20]
 80074c0:	e016      	b.n	80074f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	0c5b      	lsrs	r3, r3, #17
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d110      	bne.n	80074f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074d4:	2208      	movs	r2, #8
 80074d6:	4619      	mov	r1, r3
 80074d8:	6a38      	ldr	r0, [r7, #32]
 80074da:	f008 ff1b 	bl	8010314 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	695a      	ldr	r2, [r3, #20]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ea:	441a      	add	r2, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0210 	orr.w	r2, r2, #16
 80074fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f009 f899 	bl	801063c <USB_ReadInterrupts>
 800750a:	4603      	mov	r3, r0
 800750c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007510:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007514:	f040 80a7 	bne.w	8007666 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f009 f89e 	bl	8010662 <USB_ReadDevAllOutEpInterrupt>
 8007526:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007528:	e099      	b.n	800765e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 808e 	beq.w	8007652 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f009 f8c2 	bl	80106ca <USB_ReadDevOutEPInterrupt>
 8007546:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00c      	beq.n	800756c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755e:	461a      	mov	r2, r3
 8007560:	2301      	movs	r3, #1
 8007562:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fece 	bl	8008308 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00c      	beq.n	8007590 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	461a      	mov	r2, r3
 8007584:	2308      	movs	r3, #8
 8007586:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007588:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 ffa4 	bl	80084d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	461a      	mov	r2, r3
 80075a8:	2310      	movs	r3, #16
 80075aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d030      	beq.n	8007618 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075be:	2b80      	cmp	r3, #128	@ 0x80
 80075c0:	d109      	bne.n	80075d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80075d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	4613      	mov	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	3304      	adds	r3, #4
 80075ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	78db      	ldrb	r3, [r3, #3]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d108      	bne.n	8007606 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f00e fa4f 	bl	8015aa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	2302      	movs	r3, #2
 8007616:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762e:	461a      	mov	r2, r3
 8007630:	2320      	movs	r3, #32
 8007632:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764a:	461a      	mov	r2, r3
 800764c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007650:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007660:	2b00      	cmp	r3, #0
 8007662:	f47f af62 	bne.w	800752a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f008 ffe6 	bl	801063c <USB_ReadInterrupts>
 8007670:	4603      	mov	r3, r0
 8007672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007676:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800767a:	f040 80db 	bne.w	8007834 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f009 f807 	bl	8010696 <USB_ReadDevAllInEpInterrupt>
 8007688:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800768e:	e0cd      	b.n	800782c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80c2 	beq.w	8007820 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f009 f82d 	bl	8010706 <USB_ReadDevInEPInterrupt>
 80076ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d057      	beq.n	8007768 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	2201      	movs	r2, #1
 80076c0:	fa02 f303 	lsl.w	r3, r2, r3
 80076c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	43db      	mvns	r3, r3
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076d8:	4013      	ands	r3, r2
 80076da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	461a      	mov	r2, r3
 80076ea:	2301      	movs	r3, #1
 80076ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	799b      	ldrb	r3, [r3, #6]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d132      	bne.n	800775c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fa:	4613      	mov	r3, r2
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3320      	adds	r3, #32
 8007706:	6819      	ldr	r1, [r3, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800770c:	4613      	mov	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4403      	add	r3, r0
 8007716:	331c      	adds	r3, #28
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4419      	add	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	4613      	mov	r3, r2
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4403      	add	r3, r0
 800772a:	3320      	adds	r3, #32
 800772c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d113      	bne.n	800775c <HAL_PCD_IRQHandler+0x3a2>
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	3324      	adds	r3, #36	@ 0x24
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d108      	bne.n	800775c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007754:	461a      	mov	r2, r3
 8007756:	2101      	movs	r1, #1
 8007758:	f009 f836 	bl	80107c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f00e f919 	bl	801599a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777e:	461a      	mov	r2, r3
 8007780:	2308      	movs	r3, #8
 8007782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	d008      	beq.n	80077a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779a:	461a      	mov	r2, r3
 800779c:	2310      	movs	r3, #16
 800779e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	461a      	mov	r2, r3
 80077b8:	2340      	movs	r3, #64	@ 0x40
 80077ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d023      	beq.n	800780e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80077c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077c8:	6a38      	ldr	r0, [r7, #32]
 80077ca:	f008 f819 	bl	800f800 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80077ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	3310      	adds	r3, #16
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	78db      	ldrb	r3, [r3, #3]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d108      	bne.n	80077fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f00e f966 	bl	8015ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007808:	461a      	mov	r2, r3
 800780a:	2302      	movs	r3, #2
 800780c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fce8 	bl	80081f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	3301      	adds	r3, #1
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	f47f af2e 	bne.w	8007690 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f008 feff 	bl	801063c <USB_ReadInterrupts>
 800783e:	4603      	mov	r3, r0
 8007840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007848:	d122      	bne.n	8007890 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007864:	2b01      	cmp	r3, #1
 8007866:	d108      	bne.n	800787a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fef2 	bl	800865c <HAL_PCDEx_LPM_Callback>
 8007878:	e002      	b.n	8007880 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f00e f904 	bl	8015a88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800788e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f008 fed1 	bl	801063c <USB_ReadInterrupts>
 800789a:	4603      	mov	r3, r0
 800789c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a4:	d112      	bne.n	80078cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d102      	bne.n	80078bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f00e f8c0 	bl	8015a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80078ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f008 feb3 	bl	801063c <USB_ReadInterrupts>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078e0:	d121      	bne.n	8007926 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80078f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d111      	bne.n	8007920 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790a:	089b      	lsrs	r3, r3, #2
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007916:	2101      	movs	r1, #1
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fe9f 	bl	800865c <HAL_PCDEx_LPM_Callback>
 800791e:	e002      	b.n	8007926 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f00e f88b 	bl	8015a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f008 fe86 	bl	801063c <USB_ReadInterrupts>
 8007930:	4603      	mov	r3, r0
 8007932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793a:	f040 80b7 	bne.w	8007aac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2110      	movs	r1, #16
 8007958:	4618      	mov	r0, r3
 800795a:	f007 ff51 	bl	800f800 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007962:	e046      	b.n	80079f2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007976:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007996:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a4:	461a      	mov	r2, r3
 80079a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	3301      	adds	r3, #1
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d3b2      	bcc.n	8007964 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a0c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007a10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7bdb      	ldrb	r3, [r3, #15]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d016      	beq.n	8007a48 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a2a:	f043 030b 	orr.w	r3, r3, #11
 8007a2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a40:	f043 030b 	orr.w	r3, r3, #11
 8007a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a46:	e015      	b.n	8007a74 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4e:	695a      	ldr	r2, [r3, #20]
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a56:	4619      	mov	r1, r3
 8007a58:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a6e:	f043 030b 	orr.w	r3, r3, #11
 8007a72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007a86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a96:	461a      	mov	r2, r3
 8007a98:	f008 fe96 	bl	80107c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f008 fdc3 	bl	801063c <USB_ReadInterrupts>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ac0:	d123      	bne.n	8007b0a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f008 fe5a 	bl	8010780 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f007 ff0e 	bl	800f8f2 <USB_GetDevSpeed>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681c      	ldr	r4, [r3, #0]
 8007ae2:	f001 fe55 	bl	8009790 <HAL_RCC_GetHCLKFreq>
 8007ae6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007aec:	461a      	mov	r2, r3
 8007aee:	4620      	mov	r0, r4
 8007af0:	f007 fc18 	bl	800f324 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f00d ff78 	bl	80159ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f008 fd94 	bl	801063c <USB_ReadInterrupts>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d10a      	bne.n	8007b34 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f00d ff55 	bl	80159ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f002 0208 	and.w	r2, r2, #8
 8007b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f008 fd7f 	bl	801063c <USB_ReadInterrupts>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b44:	2b80      	cmp	r3, #128	@ 0x80
 8007b46:	d123      	bne.n	8007b90 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b54:	2301      	movs	r3, #1
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b58:	e014      	b.n	8007b84 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5e:	4613      	mov	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d105      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb08 	bl	800818e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	791b      	ldrb	r3, [r3, #4]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d3e4      	bcc.n	8007b5a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f008 fd51 	bl	801063c <USB_ReadInterrupts>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba4:	d13c      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007baa:	e02b      	b.n	8007c04 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3318      	adds	r3, #24
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d115      	bne.n	8007bfe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007bd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da12      	bge.n	8007bfe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	3317      	adds	r3, #23
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fac8 	bl	800818e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	3301      	adds	r3, #1
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d3cd      	bcc.n	8007bac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f008 fd09 	bl	801063c <USB_ReadInterrupts>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c34:	d156      	bne.n	8007ce4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c36:	2301      	movs	r3, #1
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c3a:	e045      	b.n	8007cc8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d12e      	bne.n	8007cc2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	da2b      	bge.n	8007cc2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007c76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d121      	bne.n	8007cc2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007c90:	2201      	movs	r2, #1
 8007c92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cbe:	6053      	str	r3, [r2, #4]
            break;
 8007cc0:	e008      	b.n	8007cd4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	791b      	ldrb	r3, [r3, #4]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d3b3      	bcc.n	8007c3c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f008 fca7 	bl	801063c <USB_ReadInterrupts>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf8:	d10a      	bne.n	8007d10 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f00d fef6 	bl	8015aec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f008 fc91 	bl	801063c <USB_ReadInterrupts>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d115      	bne.n	8007d50 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f00d fee6 	bl	8015b08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6859      	ldr	r1, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	e000      	b.n	8007d50 <HAL_PCD_IRQHandler+0x996>
      return;
 8007d4e:	bf00      	nop
    }
  }
}
 8007d50:	3734      	adds	r7, #52	@ 0x34
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}

08007d56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_PCD_SetAddress+0x1a>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e012      	b.n	8007d96 <HAL_PCD_SetAddress+0x40>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f008 fbf0 	bl	801056c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	461a      	mov	r2, r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	70fb      	strb	r3, [r7, #3]
 8007db0:	460b      	mov	r3, r1
 8007db2:	803b      	strh	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da0f      	bge.n	8007de4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	4613      	mov	r3, r2
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	3310      	adds	r3, #16
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3304      	adds	r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	705a      	strb	r2, [r3, #1]
 8007de2:	e00f      	b.n	8007e04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	f003 020f 	and.w	r2, r3, #15
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4413      	add	r3, r2
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007e10:	883a      	ldrh	r2, [r7, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	78ba      	ldrb	r2, [r7, #2]
 8007e1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e2e:	78bb      	ldrb	r3, [r7, #2]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d102      	bne.n	8007e3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_PCD_EP_Open+0xaa>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e00e      	b.n	8007e66 <HAL_PCD_EP_Open+0xc8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f007 fd70 	bl	800f93c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da0f      	bge.n	8007ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	f003 020f 	and.w	r2, r3, #15
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	3310      	adds	r3, #16
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4413      	add	r3, r2
 8007e96:	3304      	adds	r3, #4
 8007e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	705a      	strb	r2, [r3, #1]
 8007ea0:	e00f      	b.n	8007ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_PCD_EP_Close+0x6e>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e00e      	b.n	8007efa <HAL_PCD_EP_Close+0x8c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f007 fdae 	bl	800fa4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	3304      	adds	r3, #4
 8007f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	799b      	ldrb	r3, [r3, #6]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d102      	bne.n	8007f5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	799b      	ldrb	r3, [r3, #6]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	f007 fe4b 	bl	800fc04 <USB_EPStartXfer>

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	f003 020f 	and.w	r2, r3, #15
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007f9a:	681b      	ldr	r3, [r3, #0]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	f003 020f 	and.w	r2, r3, #15
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	3310      	adds	r3, #16
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	799b      	ldrb	r3, [r3, #6]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d102      	bne.n	8008002 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	799b      	ldrb	r3, [r3, #6]
 800800a:	461a      	mov	r2, r3
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	f007 fdf9 	bl	800fc04 <USB_EPStartXfer>

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	7912      	ldrb	r2, [r2, #4]
 8008032:	4293      	cmp	r3, r2
 8008034:	d901      	bls.n	800803a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e04f      	b.n	80080da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800803a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da0f      	bge.n	8008062 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	4613      	mov	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	3310      	adds	r3, #16
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	3304      	adds	r3, #4
 8008058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	705a      	strb	r2, [r3, #1]
 8008060:	e00d      	b.n	800807e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	3304      	adds	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	b2da      	uxtb	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_PCD_EP_SetStall+0x82>
 800809a:	2302      	movs	r3, #2
 800809c:	e01d      	b.n	80080da <HAL_PCD_EP_SetStall+0xbe>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f008 f989 	bl	80103c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7999      	ldrb	r1, [r3, #6]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080ca:	461a      	mov	r2, r3
 80080cc:	f008 fb7c 	bl	80107c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7912      	ldrb	r2, [r2, #4]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d901      	bls.n	8008100 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e042      	b.n	8008186 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da0f      	bge.n	8008128 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	4613      	mov	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	3310      	adds	r3, #16
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4413      	add	r3, r2
 800811c:	3304      	adds	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2201      	movs	r2, #1
 8008124:	705a      	strb	r2, [r3, #1]
 8008126:	e00f      	b.n	8008148 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	f003 020f 	and.w	r2, r3, #15
 800812e:	4613      	mov	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	3304      	adds	r3, #4
 8008140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	b2da      	uxtb	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_PCD_EP_ClrStall+0x86>
 8008164:	2302      	movs	r3, #2
 8008166:	e00e      	b.n	8008186 <HAL_PCD_EP_ClrStall+0xa4>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	4618      	mov	r0, r3
 8008178:	f008 f992 	bl	80104a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800819a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	da0c      	bge.n	80081bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	f003 020f 	and.w	r2, r3, #15
 80081a8:	4613      	mov	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	3310      	adds	r3, #16
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4413      	add	r3, r2
 80081b6:	3304      	adds	r3, #4
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e00c      	b.n	80081d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	3304      	adds	r3, #4
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	4618      	mov	r0, r3
 80081de:	f007 ffb1 	bl	8010144 <USB_EPStopXfer>
 80081e2:	4603      	mov	r3, r0
 80081e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80081e6:	7afb      	ldrb	r3, [r7, #11]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	@ 0x28
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	3310      	adds	r3, #16
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d901      	bls.n	8008228 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e06b      	b.n	8008300 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	69fa      	ldr	r2, [r7, #28]
 800823a:	429a      	cmp	r2, r3
 800823c:	d902      	bls.n	8008244 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3303      	adds	r3, #3
 8008248:	089b      	lsrs	r3, r3, #2
 800824a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800824c:	e02a      	b.n	80082a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	429a      	cmp	r2, r3
 8008262:	d902      	bls.n	800826a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	3303      	adds	r3, #3
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	68d9      	ldr	r1, [r3, #12]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4603      	mov	r3, r0
 8008286:	6978      	ldr	r0, [r7, #20]
 8008288:	f008 f806 	bl	8010298 <USB_WritePacket>

    ep->xfer_buff  += len;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	441a      	add	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	441a      	add	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d809      	bhi.n	80082ce <PCD_WriteEmptyTxFifo+0xde>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d203      	bcs.n	80082ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1bf      	bne.n	800824e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d811      	bhi.n	80082fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2201      	movs	r2, #1
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	43db      	mvns	r3, r3
 80082f4:	6939      	ldr	r1, [r7, #16]
 80082f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082fa:	4013      	ands	r3, r2
 80082fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	333c      	adds	r3, #60	@ 0x3c
 8008320:	3304      	adds	r3, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	799b      	ldrb	r3, [r3, #6]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d17b      	bne.n	8008436 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d015      	beq.n	8008374 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	4a61      	ldr	r2, [pc, #388]	@ (80084d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	f240 80b9 	bls.w	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80b3 	beq.w	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836a:	461a      	mov	r2, r3
 800836c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008370:	6093      	str	r3, [r2, #8]
 8008372:	e0a7      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838a:	461a      	mov	r2, r3
 800838c:	2320      	movs	r3, #32
 800838e:	6093      	str	r3, [r2, #8]
 8008390:	e098      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	f040 8093 	bne.w	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4a4b      	ldr	r2, [pc, #300]	@ (80084d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d90f      	bls.n	80083c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083bc:	461a      	mov	r2, r3
 80083be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c2:	6093      	str	r3, [r2, #8]
 80083c4:	e07e      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4613      	mov	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	0159      	lsls	r1, r3, #5
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	440b      	add	r3, r1
 80083e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d114      	bne.n	8008428 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008410:	461a      	mov	r2, r3
 8008412:	2101      	movs	r1, #1
 8008414:	f008 f9d8 	bl	80107c8 <USB_EP0_OutStart>
 8008418:	e006      	b.n	8008428 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	441a      	add	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f00d fa98 	bl	8015964 <HAL_PCD_DataOutStageCallback>
 8008434:	e046      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d124      	bne.n	8008488 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008454:	461a      	mov	r2, r3
 8008456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845a:	6093      	str	r3, [r2, #8]
 800845c:	e032      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	461a      	mov	r2, r3
 8008476:	2320      	movs	r3, #32
 8008478:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f00d fa6f 	bl	8015964 <HAL_PCD_DataOutStageCallback>
 8008486:	e01d      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d114      	bne.n	80084b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d108      	bne.n	80084b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084b0:	461a      	mov	r2, r3
 80084b2:	2100      	movs	r1, #0
 80084b4:	f008 f988 	bl	80107c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f00d fa50 	bl	8015964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	4f54300a 	.word	0x4f54300a
 80084d4:	4f54310a 	.word	0x4f54310a

080084d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	333c      	adds	r3, #60	@ 0x3c
 80084f0:	3304      	adds	r3, #4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <PCD_EP_OutSetupPacket_int+0x88>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d90e      	bls.n	800852c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	461a      	mov	r2, r3
 8008526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f00d fa07 	bl	8015940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <PCD_EP_OutSetupPacket_int+0x88>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d90c      	bls.n	8008554 <PCD_EP_OutSetupPacket_int+0x7c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	799b      	ldrb	r3, [r3, #6]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d108      	bne.n	8008554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800854c:	461a      	mov	r2, r3
 800854e:	2101      	movs	r1, #1
 8008550:	f008 f93a 	bl	80107c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	4f54300a 	.word	0x4f54300a

08008564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
 8008570:	4613      	mov	r3, r2
 8008572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d107      	bne.n	8008592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008582:	883b      	ldrh	r3, [r7, #0]
 8008584:	0419      	lsls	r1, r3, #16
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	430a      	orrs	r2, r1
 800858e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008590:	e028      	b.n	80085e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
 80085a4:	e00d      	b.n	80085c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	3340      	adds	r3, #64	@ 0x40
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	4413      	add	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	3301      	adds	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
 80085c2:	7bfa      	ldrb	r2, [r7, #15]
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d3ec      	bcc.n	80085a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80085cc:	883b      	ldrh	r3, [r7, #0]
 80085ce:	0418      	lsls	r0, r3, #16
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4302      	orrs	r2, r0
 80085dc:	3340      	adds	r3, #64	@ 0x40
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	887a      	ldrh	r2, [r7, #2]
 8008604:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <HAL_PCDEx_ActivateLPM+0x44>)
 8008644:	4313      	orrs	r3, r2
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	10000003 	.word	0x10000003

0800865c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800867c:	4b19      	ldr	r3, [pc, #100]	@ (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d00a      	beq.n	800869e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008688:	4b16      	ldr	r3, [pc, #88]	@ (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d001      	beq.n	800869a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e01f      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	e01d      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800869e:	4b11      	ldr	r3, [pc, #68]	@ (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f023 0207 	bic.w	r2, r3, #7
 80086a6:	490f      	ldr	r1, [pc, #60]	@ (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086ae:	f7fa f81d 	bl	80026ec <HAL_GetTick>
 80086b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086b4:	e009      	b.n	80086ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086b6:	f7fa f819 	bl	80026ec <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086c4:	d901      	bls.n	80086ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e007      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086ca:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086d6:	d1ee      	bne.n	80086b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	58024800 	.word	0x58024800

080086e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	4a04      	ldr	r2, [pc, #16]	@ (8008704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80086f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086f6:	60d3      	str	r3, [r2, #12]
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	58024800 	.word	0x58024800

08008708 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008710:	f7f9 ffec 	bl	80026ec <HAL_GetTick>
 8008714:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e05f      	b.n	80087e0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d107      	bne.n	800873c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7f9 faf1 	bl	8001d14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008732:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f85a 	bl	80087f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	3b01      	subs	r3, #1
 800874c:	021a      	lsls	r2, r3, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	2120      	movs	r1, #32
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f852 	bl	800880c <QSPI_WaitFlagStateUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d135      	bne.n	80087de <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	4b1b      	ldr	r3, [pc, #108]	@ (80087e8 <HAL_QSPI_Init+0xe0>)
 800877a:	4013      	ands	r3, r2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6852      	ldr	r2, [r2, #4]
 8008780:	0611      	lsls	r1, r2, #24
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	68d2      	ldr	r2, [r2, #12]
 8008786:	4311      	orrs	r1, r2
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	69d2      	ldr	r2, [r2, #28]
 800878c:	4311      	orrs	r1, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6a12      	ldr	r2, [r2, #32]
 8008792:	4311      	orrs	r1, r2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	430b      	orrs	r3, r1
 800879a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	4b12      	ldr	r3, [pc, #72]	@ (80087ec <HAL_QSPI_Init+0xe4>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6912      	ldr	r2, [r2, #16]
 80087aa:	0411      	lsls	r1, r2, #16
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6952      	ldr	r2, [r2, #20]
 80087b0:	4311      	orrs	r1, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6992      	ldr	r2, [r2, #24]
 80087b6:	4311      	orrs	r1, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	430b      	orrs	r3, r1
 80087be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80087de:	7afb      	ldrb	r3, [r7, #11]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	00ffff2f 	.word	0x00ffff2f
 80087ec:	ffe0f8fe 	.word	0xffe0f8fe

080087f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800881c:	e01a      	b.n	8008854 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d016      	beq.n	8008854 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008826:	f7f9 ff61 	bl	80026ec <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	429a      	cmp	r2, r3
 8008834:	d302      	bcc.n	800883c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2204      	movs	r2, #4
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008848:	f043 0201 	orr.w	r2, r3, #1
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e00e      	b.n	8008872 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4013      	ands	r3, r2
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf14      	ite	ne
 8008862:	2301      	movne	r3, #1
 8008864:	2300      	moveq	r3, #0
 8008866:	b2db      	uxtb	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	429a      	cmp	r2, r3
 800886e:	d1d6      	bne.n	800881e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08c      	sub	sp, #48	@ 0x30
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f000 bc48 	b.w	8009120 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8088 	beq.w	80089ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800889e:	4b99      	ldr	r3, [pc, #612]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088a8:	4b96      	ldr	r3, [pc, #600]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d007      	beq.n	80088c4 <HAL_RCC_OscConfig+0x48>
 80088b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b6:	2b18      	cmp	r3, #24
 80088b8:	d111      	bne.n	80088de <HAL_RCC_OscConfig+0x62>
 80088ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d10c      	bne.n	80088de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c4:	4b8f      	ldr	r3, [pc, #572]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d06d      	beq.n	80089ac <HAL_RCC_OscConfig+0x130>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d169      	bne.n	80089ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f000 bc21 	b.w	8009120 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088e6:	d106      	bne.n	80088f6 <HAL_RCC_OscConfig+0x7a>
 80088e8:	4b86      	ldr	r3, [pc, #536]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a85      	ldr	r2, [pc, #532]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80088ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e02e      	b.n	8008954 <HAL_RCC_OscConfig+0xd8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <HAL_RCC_OscConfig+0x9c>
 80088fe:	4b81      	ldr	r3, [pc, #516]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a80      	ldr	r2, [pc, #512]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	4b7e      	ldr	r3, [pc, #504]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a7d      	ldr	r2, [pc, #500]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008910:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	e01d      	b.n	8008954 <HAL_RCC_OscConfig+0xd8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008920:	d10c      	bne.n	800893c <HAL_RCC_OscConfig+0xc0>
 8008922:	4b78      	ldr	r3, [pc, #480]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a77      	ldr	r2, [pc, #476]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	4b75      	ldr	r3, [pc, #468]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a74      	ldr	r2, [pc, #464]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	e00b      	b.n	8008954 <HAL_RCC_OscConfig+0xd8>
 800893c:	4b71      	ldr	r3, [pc, #452]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a70      	ldr	r2, [pc, #448]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	4b6e      	ldr	r3, [pc, #440]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6d      	ldr	r2, [pc, #436]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 800894e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7f9 fec6 	bl	80026ec <HAL_GetTick>
 8008960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008964:	f7f9 fec2 	bl	80026ec <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b64      	cmp	r3, #100	@ 0x64
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e3d4      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008976:	4b63      	ldr	r3, [pc, #396]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f0      	beq.n	8008964 <HAL_RCC_OscConfig+0xe8>
 8008982:	e014      	b.n	80089ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008984:	f7f9 feb2 	bl	80026ec <HAL_GetTick>
 8008988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800898c:	f7f9 feae 	bl	80026ec <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b64      	cmp	r3, #100	@ 0x64
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e3c0      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800899e:	4b59      	ldr	r3, [pc, #356]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f0      	bne.n	800898c <HAL_RCC_OscConfig+0x110>
 80089aa:	e000      	b.n	80089ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80ca 	beq.w	8008b50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089bc:	4b51      	ldr	r3, [pc, #324]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80089c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <HAL_RCC_OscConfig+0x166>
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	2b18      	cmp	r3, #24
 80089d6:	d156      	bne.n	8008a86 <HAL_RCC_OscConfig+0x20a>
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d151      	bne.n	8008a86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089e2:	4b48      	ldr	r3, [pc, #288]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_RCC_OscConfig+0x17e>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e392      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089fa:	4b42      	ldr	r3, [pc, #264]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f023 0219 	bic.w	r2, r3, #25
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	493f      	ldr	r1, [pc, #252]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7f9 fe6e 	bl	80026ec <HAL_GetTick>
 8008a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a14:	f7f9 fe6a 	bl	80026ec <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e37c      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a26:	4b37      	ldr	r3, [pc, #220]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a32:	f7f9 fe8b 	bl	800274c <HAL_GetREVID>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d817      	bhi.n	8008a70 <HAL_RCC_OscConfig+0x1f4>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b40      	cmp	r3, #64	@ 0x40
 8008a46:	d108      	bne.n	8008a5a <HAL_RCC_OscConfig+0x1de>
 8008a48:	4b2e      	ldr	r3, [pc, #184]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a50:	4a2c      	ldr	r2, [pc, #176]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a58:	e07a      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	031b      	lsls	r3, r3, #12
 8008a68:	4926      	ldr	r1, [pc, #152]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a6e:	e06f      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a70:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	061b      	lsls	r3, r3, #24
 8008a7e:	4921      	ldr	r1, [pc, #132]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a84:	e064      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d047      	beq.n	8008b1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f023 0219 	bic.w	r2, r3, #25
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	491a      	ldr	r1, [pc, #104]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7f9 fe24 	bl	80026ec <HAL_GetTick>
 8008aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aa8:	f7f9 fe20 	bl	80026ec <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e332      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac6:	f7f9 fe41 	bl	800274c <HAL_GetREVID>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d819      	bhi.n	8008b08 <HAL_RCC_OscConfig+0x28c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	2b40      	cmp	r3, #64	@ 0x40
 8008ada:	d108      	bne.n	8008aee <HAL_RCC_OscConfig+0x272>
 8008adc:	4b09      	ldr	r3, [pc, #36]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ae4:	4a07      	ldr	r2, [pc, #28]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aea:	6053      	str	r3, [r2, #4]
 8008aec:	e030      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
 8008aee:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	031b      	lsls	r3, r3, #12
 8008afc:	4901      	ldr	r1, [pc, #4]	@ (8008b04 <HAL_RCC_OscConfig+0x288>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	604b      	str	r3, [r1, #4]
 8008b02:	e025      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
 8008b04:	58024400 	.word	0x58024400
 8008b08:	4b9a      	ldr	r3, [pc, #616]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	061b      	lsls	r3, r3, #24
 8008b16:	4997      	ldr	r1, [pc, #604]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	604b      	str	r3, [r1, #4]
 8008b1c:	e018      	b.n	8008b50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b1e:	4b95      	ldr	r3, [pc, #596]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a94      	ldr	r2, [pc, #592]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b24:	f023 0301 	bic.w	r3, r3, #1
 8008b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2a:	f7f9 fddf 	bl	80026ec <HAL_GetTick>
 8008b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b32:	f7f9 fddb 	bl	80026ec <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e2ed      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b44:	4b8b      	ldr	r3, [pc, #556]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f0      	bne.n	8008b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 80a9 	beq.w	8008cb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b5e:	4b85      	ldr	r3, [pc, #532]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b68:	4b82      	ldr	r3, [pc, #520]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b08      	cmp	r3, #8
 8008b72:	d007      	beq.n	8008b84 <HAL_RCC_OscConfig+0x308>
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b18      	cmp	r3, #24
 8008b78:	d13a      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x374>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f003 0303 	and.w	r3, r3, #3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d135      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b84:	4b7b      	ldr	r3, [pc, #492]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_OscConfig+0x320>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b80      	cmp	r3, #128	@ 0x80
 8008b96:	d001      	beq.n	8008b9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e2c1      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b9c:	f7f9 fdd6 	bl	800274c <HAL_GetREVID>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d817      	bhi.n	8008bda <HAL_RCC_OscConfig+0x35e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d108      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x348>
 8008bb2:	4b70      	ldr	r3, [pc, #448]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008bba:	4a6e      	ldr	r2, [pc, #440]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc2:	e075      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	069b      	lsls	r3, r3, #26
 8008bd2:	4968      	ldr	r1, [pc, #416]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bd8:	e06a      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bda:	4b66      	ldr	r3, [pc, #408]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	4962      	ldr	r1, [pc, #392]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bee:	e05f      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d042      	beq.n	8008c7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c04:	f7f9 fd72 	bl	80026ec <HAL_GetTick>
 8008c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c0c:	f7f9 fd6e 	bl	80026ec <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e280      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c1e:	4b55      	ldr	r3, [pc, #340]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0f0      	beq.n	8008c0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c2a:	f7f9 fd8f 	bl	800274c <HAL_GetREVID>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d817      	bhi.n	8008c68 <HAL_RCC_OscConfig+0x3ec>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d108      	bne.n	8008c52 <HAL_RCC_OscConfig+0x3d6>
 8008c40:	4b4c      	ldr	r3, [pc, #304]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008c48:	4a4a      	ldr	r2, [pc, #296]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c4e:	6053      	str	r3, [r2, #4]
 8008c50:	e02e      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
 8008c52:	4b48      	ldr	r3, [pc, #288]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	069b      	lsls	r3, r3, #26
 8008c60:	4944      	ldr	r1, [pc, #272]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	604b      	str	r3, [r1, #4]
 8008c66:	e023      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
 8008c68:	4b42      	ldr	r3, [pc, #264]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	493f      	ldr	r1, [pc, #252]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60cb      	str	r3, [r1, #12]
 8008c7c:	e018      	b.n	8008cb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a3c      	ldr	r2, [pc, #240]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7f9 fd2f 	bl	80026ec <HAL_GetTick>
 8008c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c92:	f7f9 fd2b 	bl	80026ec <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e23d      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ca4:	4b33      	ldr	r3, [pc, #204]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d036      	beq.n	8008d2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d019      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd0:	f7f9 fd0c 	bl	80026ec <HAL_GetTick>
 8008cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cd8:	f7f9 fd08 	bl	80026ec <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e21a      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cea:	4b22      	ldr	r3, [pc, #136]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f0      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x45c>
 8008cf6:	e018      	b.n	8008d2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008cfe:	f023 0301 	bic.w	r3, r3, #1
 8008d02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d04:	f7f9 fcf2 	bl	80026ec <HAL_GetTick>
 8008d08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d0c:	f7f9 fcee 	bl	80026ec <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e200      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f0      	bne.n	8008d0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d039      	beq.n	8008daa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01c      	beq.n	8008d78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a0c      	ldr	r2, [pc, #48]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d4a:	f7f9 fccf 	bl	80026ec <HAL_GetTick>
 8008d4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d50:	e008      	b.n	8008d64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d52:	f7f9 fccb 	bl	80026ec <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e1dd      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d64:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <HAL_RCC_OscConfig+0x4f8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <HAL_RCC_OscConfig+0x4d6>
 8008d70:	e01b      	b.n	8008daa <HAL_RCC_OscConfig+0x52e>
 8008d72:	bf00      	nop
 8008d74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d78:	4b9b      	ldr	r3, [pc, #620]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a9a      	ldr	r2, [pc, #616]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008d7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d84:	f7f9 fcb2 	bl	80026ec <HAL_GetTick>
 8008d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d8c:	f7f9 fcae 	bl	80026ec <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e1c0      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d9e:	4b92      	ldr	r3, [pc, #584]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f0      	bne.n	8008d8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 8081 	beq.w	8008eba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008db8:	4b8c      	ldr	r3, [pc, #560]	@ (8008fec <HAL_RCC_OscConfig+0x770>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a8b      	ldr	r2, [pc, #556]	@ (8008fec <HAL_RCC_OscConfig+0x770>)
 8008dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dc4:	f7f9 fc92 	bl	80026ec <HAL_GetTick>
 8008dc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dcc:	f7f9 fc8e 	bl	80026ec <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b64      	cmp	r3, #100	@ 0x64
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e1a0      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dde:	4b83      	ldr	r3, [pc, #524]	@ (8008fec <HAL_RCC_OscConfig+0x770>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0f0      	beq.n	8008dcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d106      	bne.n	8008e00 <HAL_RCC_OscConfig+0x584>
 8008df2:	4b7d      	ldr	r3, [pc, #500]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df6:	4a7c      	ldr	r2, [pc, #496]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dfe:	e02d      	b.n	8008e5c <HAL_RCC_OscConfig+0x5e0>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10c      	bne.n	8008e22 <HAL_RCC_OscConfig+0x5a6>
 8008e08:	4b77      	ldr	r3, [pc, #476]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0c:	4a76      	ldr	r2, [pc, #472]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e14:	4b74      	ldr	r3, [pc, #464]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e18:	4a73      	ldr	r2, [pc, #460]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e1a:	f023 0304 	bic.w	r3, r3, #4
 8008e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e20:	e01c      	b.n	8008e5c <HAL_RCC_OscConfig+0x5e0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d10c      	bne.n	8008e44 <HAL_RCC_OscConfig+0x5c8>
 8008e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e30:	f043 0304 	orr.w	r3, r3, #4
 8008e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e36:	4b6c      	ldr	r3, [pc, #432]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e42:	e00b      	b.n	8008e5c <HAL_RCC_OscConfig+0x5e0>
 8008e44:	4b68      	ldr	r3, [pc, #416]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e48:	4a67      	ldr	r2, [pc, #412]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e50:	4b65      	ldr	r3, [pc, #404]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e54:	4a64      	ldr	r2, [pc, #400]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e56:	f023 0304 	bic.w	r3, r3, #4
 8008e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d015      	beq.n	8008e90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e64:	f7f9 fc42 	bl	80026ec <HAL_GetTick>
 8008e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6c:	f7f9 fc3e 	bl	80026ec <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e14e      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e82:	4b59      	ldr	r3, [pc, #356]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0ee      	beq.n	8008e6c <HAL_RCC_OscConfig+0x5f0>
 8008e8e:	e014      	b.n	8008eba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e90:	f7f9 fc2c 	bl	80026ec <HAL_GetTick>
 8008e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e96:	e00a      	b.n	8008eae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e98:	f7f9 fc28 	bl	80026ec <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e138      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008eae:	4b4e      	ldr	r3, [pc, #312]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ee      	bne.n	8008e98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 812d 	beq.w	800911e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ec4:	4b48      	ldr	r3, [pc, #288]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ecc:	2b18      	cmp	r3, #24
 8008ece:	f000 80bd 	beq.w	800904c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	f040 809e 	bne.w	8009018 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008edc:	4b42      	ldr	r3, [pc, #264]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a41      	ldr	r2, [pc, #260]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee8:	f7f9 fc00 	bl	80026ec <HAL_GetTick>
 8008eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef0:	f7f9 fbfc 	bl	80026ec <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e10e      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f02:	4b39      	ldr	r3, [pc, #228]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f0e:	4b36      	ldr	r3, [pc, #216]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f12:	4b37      	ldr	r3, [pc, #220]	@ (8008ff0 <HAL_RCC_OscConfig+0x774>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f1e:	0112      	lsls	r2, r2, #4
 8008f20:	430a      	orrs	r2, r1
 8008f22:	4931      	ldr	r1, [pc, #196]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f36:	3b01      	subs	r3, #1
 8008f38:	025b      	lsls	r3, r3, #9
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	3b01      	subs	r3, #1
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f50:	3b01      	subs	r3, #1
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f58:	4923      	ldr	r1, [pc, #140]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f5e:	4b22      	ldr	r3, [pc, #136]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	4a21      	ldr	r2, [pc, #132]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f6e:	4b21      	ldr	r3, [pc, #132]	@ (8008ff4 <HAL_RCC_OscConfig+0x778>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008f76:	00d2      	lsls	r2, r2, #3
 8008f78:	491b      	ldr	r1, [pc, #108]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f82:	f023 020c 	bic.w	r2, r3, #12
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	4917      	ldr	r1, [pc, #92]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f90:	4b15      	ldr	r3, [pc, #84]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	f023 0202 	bic.w	r2, r3, #2
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9c:	4912      	ldr	r1, [pc, #72]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fa2:	4b11      	ldr	r3, [pc, #68]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa6:	4a10      	ldr	r2, [pc, #64]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fae:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fba:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008fc6:	4b08      	ldr	r3, [pc, #32]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fca:	4a07      	ldr	r2, [pc, #28]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fcc:	f043 0301 	orr.w	r3, r3, #1
 8008fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fd2:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a04      	ldr	r2, [pc, #16]	@ (8008fe8 <HAL_RCC_OscConfig+0x76c>)
 8008fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fde:	f7f9 fb85 	bl	80026ec <HAL_GetTick>
 8008fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe4:	e011      	b.n	800900a <HAL_RCC_OscConfig+0x78e>
 8008fe6:	bf00      	nop
 8008fe8:	58024400 	.word	0x58024400
 8008fec:	58024800 	.word	0x58024800
 8008ff0:	fffffc0c 	.word	0xfffffc0c
 8008ff4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ff8:	f7f9 fb78 	bl	80026ec <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e08a      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800900a:	4b47      	ldr	r3, [pc, #284]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x77c>
 8009016:	e082      	b.n	800911e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009018:	4b43      	ldr	r3, [pc, #268]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a42      	ldr	r2, [pc, #264]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 800901e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009024:	f7f9 fb62 	bl	80026ec <HAL_GetTick>
 8009028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800902c:	f7f9 fb5e 	bl	80026ec <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e070      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800903e:	4b3a      	ldr	r3, [pc, #232]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f0      	bne.n	800902c <HAL_RCC_OscConfig+0x7b0>
 800904a:	e068      	b.n	800911e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800904c:	4b36      	ldr	r3, [pc, #216]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 800904e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009050:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009052:	4b35      	ldr	r3, [pc, #212]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009056:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905c:	2b01      	cmp	r3, #1
 800905e:	d031      	beq.n	80090c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f003 0203 	and.w	r2, r3, #3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800906a:	429a      	cmp	r2, r3
 800906c:	d12a      	bne.n	80090c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	091b      	lsrs	r3, r3, #4
 8009072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800907a:	429a      	cmp	r2, r3
 800907c:	d122      	bne.n	80090c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009088:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d11a      	bne.n	80090c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	0a5b      	lsrs	r3, r3, #9
 8009092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800909c:	429a      	cmp	r2, r3
 800909e:	d111      	bne.n	80090c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	0c1b      	lsrs	r3, r3, #16
 80090a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d108      	bne.n	80090c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	0e1b      	lsrs	r3, r3, #24
 80090b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d001      	beq.n	80090c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e02b      	b.n	8009120 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80090c8:	4b17      	ldr	r3, [pc, #92]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 80090ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d01f      	beq.n	800911e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80090de:	4b12      	ldr	r3, [pc, #72]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	4a11      	ldr	r2, [pc, #68]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 80090e4:	f023 0301 	bic.w	r3, r3, #1
 80090e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090ea:	f7f9 faff 	bl	80026ec <HAL_GetTick>
 80090ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80090f0:	bf00      	nop
 80090f2:	f7f9 fafb 	bl	80026ec <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d0f9      	beq.n	80090f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 8009100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009102:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <HAL_RCC_OscConfig+0x8b0>)
 8009104:	4013      	ands	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800910a:	00d2      	lsls	r2, r2, #3
 800910c:	4906      	ldr	r1, [pc, #24]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 800910e:	4313      	orrs	r3, r2
 8009110:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009112:	4b05      	ldr	r3, [pc, #20]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a04      	ldr	r2, [pc, #16]	@ (8009128 <HAL_RCC_OscConfig+0x8ac>)
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	@ 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	58024400 	.word	0x58024400
 800912c:	ffff0007 	.word	0xffff0007

08009130 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e19c      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009144:	4b8a      	ldr	r3, [pc, #552]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d910      	bls.n	8009174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009152:	4b87      	ldr	r3, [pc, #540]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f023 020f 	bic.w	r2, r3, #15
 800915a:	4985      	ldr	r1, [pc, #532]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	4313      	orrs	r3, r2
 8009160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b83      	ldr	r3, [pc, #524]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e184      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d010      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	4b7b      	ldr	r3, [pc, #492]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800918c:	429a      	cmp	r2, r3
 800918e:	d908      	bls.n	80091a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009190:	4b78      	ldr	r3, [pc, #480]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	4975      	ldr	r1, [pc, #468]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0308 	and.w	r3, r3, #8
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d010      	beq.n	80091d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	4b70      	ldr	r3, [pc, #448]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d908      	bls.n	80091d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091be:	4b6d      	ldr	r3, [pc, #436]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	496a      	ldr	r1, [pc, #424]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d010      	beq.n	80091fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699a      	ldr	r2, [r3, #24]
 80091e0:	4b64      	ldr	r3, [pc, #400]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d908      	bls.n	80091fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091ec:	4b61      	ldr	r3, [pc, #388]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	495e      	ldr	r1, [pc, #376]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	2b00      	cmp	r3, #0
 8009208:	d010      	beq.n	800922c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69da      	ldr	r2, [r3, #28]
 800920e:	4b59      	ldr	r3, [pc, #356]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009216:	429a      	cmp	r2, r3
 8009218:	d908      	bls.n	800922c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800921a:	4b56      	ldr	r3, [pc, #344]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	4953      	ldr	r1, [pc, #332]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009228:	4313      	orrs	r3, r2
 800922a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d010      	beq.n	800925a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	4b4d      	ldr	r3, [pc, #308]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	429a      	cmp	r2, r3
 8009246:	d908      	bls.n	800925a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009248:	4b4a      	ldr	r3, [pc, #296]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	f023 020f 	bic.w	r2, r3, #15
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	4947      	ldr	r1, [pc, #284]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009256:	4313      	orrs	r3, r2
 8009258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d055      	beq.n	8009312 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009266:	4b43      	ldr	r3, [pc, #268]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4940      	ldr	r1, [pc, #256]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009274:	4313      	orrs	r3, r2
 8009276:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d107      	bne.n	8009290 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009280:	4b3c      	ldr	r3, [pc, #240]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d121      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e0f6      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b03      	cmp	r3, #3
 8009296:	d107      	bne.n	80092a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009298:	4b36      	ldr	r3, [pc, #216]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d115      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0ea      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092b0:	4b30      	ldr	r3, [pc, #192]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d109      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e0de      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0d6      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092d0:	4b28      	ldr	r3, [pc, #160]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f023 0207 	bic.w	r2, r3, #7
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4925      	ldr	r1, [pc, #148]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e2:	f7f9 fa03 	bl	80026ec <HAL_GetTick>
 80092e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e8:	e00a      	b.n	8009300 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ea:	f7f9 f9ff 	bl	80026ec <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e0be      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009300:	4b1c      	ldr	r3, [pc, #112]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	429a      	cmp	r2, r3
 8009310:	d1eb      	bne.n	80092ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d010      	beq.n	8009340 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	4b14      	ldr	r3, [pc, #80]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	429a      	cmp	r2, r3
 800932c:	d208      	bcs.n	8009340 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800932e:	4b11      	ldr	r3, [pc, #68]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	f023 020f 	bic.w	r2, r3, #15
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	490e      	ldr	r1, [pc, #56]	@ (8009374 <HAL_RCC_ClockConfig+0x244>)
 800933c:	4313      	orrs	r3, r2
 800933e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009340:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d214      	bcs.n	8009378 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800934e:	4b08      	ldr	r3, [pc, #32]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f023 020f 	bic.w	r2, r3, #15
 8009356:	4906      	ldr	r1, [pc, #24]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	4313      	orrs	r3, r2
 800935c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <HAL_RCC_ClockConfig+0x240>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d005      	beq.n	8009378 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e086      	b.n	800947e <HAL_RCC_ClockConfig+0x34e>
 8009370:	52002000 	.word	0x52002000
 8009374:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d010      	beq.n	80093a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	4b3f      	ldr	r3, [pc, #252]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009390:	429a      	cmp	r2, r3
 8009392:	d208      	bcs.n	80093a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009394:	4b3c      	ldr	r3, [pc, #240]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	4939      	ldr	r1, [pc, #228]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d010      	beq.n	80093d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	4b34      	ldr	r3, [pc, #208]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093be:	429a      	cmp	r2, r3
 80093c0:	d208      	bcs.n	80093d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093c2:	4b31      	ldr	r3, [pc, #196]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	492e      	ldr	r1, [pc, #184]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699a      	ldr	r2, [r3, #24]
 80093e4:	4b28      	ldr	r3, [pc, #160]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d208      	bcs.n	8009402 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093f0:	4b25      	ldr	r3, [pc, #148]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	4922      	ldr	r1, [pc, #136]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	69da      	ldr	r2, [r3, #28]
 8009412:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800941a:	429a      	cmp	r2, r3
 800941c:	d208      	bcs.n	8009430 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800941e:	4b1a      	ldr	r3, [pc, #104]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	4917      	ldr	r1, [pc, #92]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 800942c:	4313      	orrs	r3, r2
 800942e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009430:	f000 f834 	bl	800949c <HAL_RCC_GetSysClockFreq>
 8009434:	4602      	mov	r2, r0
 8009436:	4b14      	ldr	r3, [pc, #80]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	0a1b      	lsrs	r3, r3, #8
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	4912      	ldr	r1, [pc, #72]	@ (800948c <HAL_RCC_ClockConfig+0x35c>)
 8009442:	5ccb      	ldrb	r3, [r1, r3]
 8009444:	f003 031f 	and.w	r3, r3, #31
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
 800944c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800944e:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <HAL_RCC_ClockConfig+0x358>)
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	4a0d      	ldr	r2, [pc, #52]	@ (800948c <HAL_RCC_ClockConfig+0x35c>)
 8009458:	5cd3      	ldrb	r3, [r2, r3]
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
 8009464:	4a0a      	ldr	r2, [pc, #40]	@ (8009490 <HAL_RCC_ClockConfig+0x360>)
 8009466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009468:	4a0a      	ldr	r2, [pc, #40]	@ (8009494 <HAL_RCC_ClockConfig+0x364>)
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800946e:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <HAL_RCC_ClockConfig+0x368>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f7f8 fec2 	bl	80021fc <HAL_InitTick>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
 800948c:	08019e10 	.word	0x08019e10
 8009490:	24000004 	.word	0x24000004
 8009494:	24000000 	.word	0x24000000
 8009498:	24000008 	.word	0x24000008

0800949c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800949c:	b480      	push	{r7}
 800949e:	b089      	sub	sp, #36	@ 0x24
 80094a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a2:	4bb3      	ldr	r3, [pc, #716]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094aa:	2b18      	cmp	r3, #24
 80094ac:	f200 8155 	bhi.w	800975a <HAL_RCC_GetSysClockFreq+0x2be>
 80094b0:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	0800951d 	.word	0x0800951d
 80094bc:	0800975b 	.word	0x0800975b
 80094c0:	0800975b 	.word	0x0800975b
 80094c4:	0800975b 	.word	0x0800975b
 80094c8:	0800975b 	.word	0x0800975b
 80094cc:	0800975b 	.word	0x0800975b
 80094d0:	0800975b 	.word	0x0800975b
 80094d4:	0800975b 	.word	0x0800975b
 80094d8:	08009543 	.word	0x08009543
 80094dc:	0800975b 	.word	0x0800975b
 80094e0:	0800975b 	.word	0x0800975b
 80094e4:	0800975b 	.word	0x0800975b
 80094e8:	0800975b 	.word	0x0800975b
 80094ec:	0800975b 	.word	0x0800975b
 80094f0:	0800975b 	.word	0x0800975b
 80094f4:	0800975b 	.word	0x0800975b
 80094f8:	08009549 	.word	0x08009549
 80094fc:	0800975b 	.word	0x0800975b
 8009500:	0800975b 	.word	0x0800975b
 8009504:	0800975b 	.word	0x0800975b
 8009508:	0800975b 	.word	0x0800975b
 800950c:	0800975b 	.word	0x0800975b
 8009510:	0800975b 	.word	0x0800975b
 8009514:	0800975b 	.word	0x0800975b
 8009518:	0800954f 	.word	0x0800954f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800951c:	4b94      	ldr	r3, [pc, #592]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009528:	4b91      	ldr	r3, [pc, #580]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	4a90      	ldr	r2, [pc, #576]	@ (8009774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009534:	fa22 f303 	lsr.w	r3, r2, r3
 8009538:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800953a:	e111      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800953c:	4b8d      	ldr	r3, [pc, #564]	@ (8009774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800953e:	61bb      	str	r3, [r7, #24]
      break;
 8009540:	e10e      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009542:	4b8d      	ldr	r3, [pc, #564]	@ (8009778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009544:	61bb      	str	r3, [r7, #24]
      break;
 8009546:	e10b      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009548:	4b8c      	ldr	r3, [pc, #560]	@ (800977c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800954a:	61bb      	str	r3, [r7, #24]
      break;
 800954c:	e108      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800954e:	4b88      	ldr	r3, [pc, #544]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009558:	4b85      	ldr	r3, [pc, #532]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	091b      	lsrs	r3, r3, #4
 800955e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009562:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009564:	4b82      	ldr	r3, [pc, #520]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800956e:	4b80      	ldr	r3, [pc, #512]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	fb02 f303 	mul.w	r3, r2, r3
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80e1 	beq.w	8009754 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b02      	cmp	r3, #2
 8009596:	f000 8083 	beq.w	80096a0 <HAL_RCC_GetSysClockFreq+0x204>
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b02      	cmp	r3, #2
 800959e:	f200 80a1 	bhi.w	80096e4 <HAL_RCC_GetSysClockFreq+0x248>
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <HAL_RCC_GetSysClockFreq+0x114>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d056      	beq.n	800965c <HAL_RCC_GetSysClockFreq+0x1c0>
 80095ae:	e099      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d02d      	beq.n	8009618 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	08db      	lsrs	r3, r3, #3
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	4a6b      	ldr	r2, [pc, #428]	@ (8009774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095c8:	fa22 f303 	lsr.w	r3, r2, r3
 80095cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	ee07 3a90 	vmov	s15, r3
 80095d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e6:	4b62      	ldr	r3, [pc, #392]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800960a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009612:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009616:	e087      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009784 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962a:	4b51      	ldr	r3, [pc, #324]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963a:	ed97 6a02 	vldr	s12, [r7, #8]
 800963e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800965a:	e065      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009666:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800966a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966e:	4b40      	ldr	r3, [pc, #256]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009682:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800969e:	e043      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800978c <HAL_RCC_GetSysClockFreq+0x2f0>
 80096ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ba:	ee07 3a90 	vmov	s15, r3
 80096be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096e2:	e021      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009788 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009706:	ed97 6a02 	vldr	s12, [r7, #8]
 800970a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800970e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800971a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009726:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009728:	4b11      	ldr	r3, [pc, #68]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800972a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972c:	0a5b      	lsrs	r3, r3, #9
 800972e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009732:	3301      	adds	r3, #1
 8009734:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009740:	edd7 6a07 	vldr	s13, [r7, #28]
 8009744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974c:	ee17 3a90 	vmov	r3, s15
 8009750:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009752:	e005      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	61bb      	str	r3, [r7, #24]
      break;
 8009758:	e002      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800975a:	4b07      	ldr	r3, [pc, #28]	@ (8009778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800975c:	61bb      	str	r3, [r7, #24]
      break;
 800975e:	bf00      	nop
  }

  return sysclockfreq;
 8009760:	69bb      	ldr	r3, [r7, #24]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3724      	adds	r7, #36	@ 0x24
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	58024400 	.word	0x58024400
 8009774:	03d09000 	.word	0x03d09000
 8009778:	003d0900 	.word	0x003d0900
 800977c:	017d7840 	.word	0x017d7840
 8009780:	46000000 	.word	0x46000000
 8009784:	4c742400 	.word	0x4c742400
 8009788:	4a742400 	.word	0x4a742400
 800978c:	4bbebc20 	.word	0x4bbebc20

08009790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009796:	f7ff fe81 	bl	800949c <HAL_RCC_GetSysClockFreq>
 800979a:	4602      	mov	r2, r0
 800979c:	4b10      	ldr	r3, [pc, #64]	@ (80097e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	490f      	ldr	r1, [pc, #60]	@ (80097e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80097a8:	5ccb      	ldrb	r3, [r1, r3]
 80097aa:	f003 031f 	and.w	r3, r3, #31
 80097ae:	fa22 f303 	lsr.w	r3, r2, r3
 80097b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097b4:	4b0a      	ldr	r3, [pc, #40]	@ (80097e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	4a09      	ldr	r2, [pc, #36]	@ (80097e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80097be:	5cd3      	ldrb	r3, [r2, r3]
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ca:	4a07      	ldr	r2, [pc, #28]	@ (80097e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ce:	4a07      	ldr	r2, [pc, #28]	@ (80097ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097d4:	4b04      	ldr	r3, [pc, #16]	@ (80097e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097d6:	681b      	ldr	r3, [r3, #0]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	58024400 	.word	0x58024400
 80097e4:	08019e10 	.word	0x08019e10
 80097e8:	24000004 	.word	0x24000004
 80097ec:	24000000 	.word	0x24000000

080097f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097f4:	f7ff ffcc 	bl	8009790 <HAL_RCC_GetHCLKFreq>
 80097f8:	4602      	mov	r2, r0
 80097fa:	4b06      	ldr	r3, [pc, #24]	@ (8009814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	091b      	lsrs	r3, r3, #4
 8009800:	f003 0307 	and.w	r3, r3, #7
 8009804:	4904      	ldr	r1, [pc, #16]	@ (8009818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009806:	5ccb      	ldrb	r3, [r1, r3]
 8009808:	f003 031f 	and.w	r3, r3, #31
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009810:	4618      	mov	r0, r3
 8009812:	bd80      	pop	{r7, pc}
 8009814:	58024400 	.word	0x58024400
 8009818:	08019e10 	.word	0x08019e10

0800981c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009820:	f7ff ffb6 	bl	8009790 <HAL_RCC_GetHCLKFreq>
 8009824:	4602      	mov	r2, r0
 8009826:	4b06      	ldr	r3, [pc, #24]	@ (8009840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	4904      	ldr	r1, [pc, #16]	@ (8009844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009832:	5ccb      	ldrb	r3, [r1, r3]
 8009834:	f003 031f 	and.w	r3, r3, #31
 8009838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800983c:	4618      	mov	r0, r3
 800983e:	bd80      	pop	{r7, pc}
 8009840:	58024400 	.word	0x58024400
 8009844:	08019e10 	.word	0x08019e10

08009848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	223f      	movs	r2, #63	@ 0x3f
 8009856:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009858:	4b1a      	ldr	r3, [pc, #104]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f003 0207 	and.w	r2, r3, #7
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009864:	4b17      	ldr	r3, [pc, #92]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009870:	4b14      	ldr	r3, [pc, #80]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	f003 020f 	and.w	r2, r3, #15
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800987c:	4b11      	ldr	r3, [pc, #68]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009894:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80098a0:	4b08      	ldr	r3, [pc, #32]	@ (80098c4 <HAL_RCC_GetClockConfig+0x7c>)
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80098ac:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <HAL_RCC_GetClockConfig+0x80>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 020f 	and.w	r2, r3, #15
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	601a      	str	r2, [r3, #0]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	58024400 	.word	0x58024400
 80098c8:	52002000 	.word	0x52002000

080098cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d0:	b0ca      	sub	sp, #296	@ 0x128
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098de:	2300      	movs	r3, #0
 80098e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80098f0:	2500      	movs	r5, #0
 80098f2:	ea54 0305 	orrs.w	r3, r4, r5
 80098f6:	d049      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009902:	d02f      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009904:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009908:	d828      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800990a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800990e:	d01a      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009914:	d822      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800991a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800991e:	d007      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009920:	e01c      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009922:	4bb8      	ldr	r3, [pc, #736]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4ab7      	ldr	r2, [pc, #732]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800992e:	e01a      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009934:	3308      	adds	r3, #8
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fc8f 	bl	800b25c <RCCEx_PLL2_Config>
 800993e:	4603      	mov	r3, r0
 8009940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009944:	e00f      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994a:	3328      	adds	r3, #40	@ 0x28
 800994c:	2102      	movs	r1, #2
 800994e:	4618      	mov	r0, r3
 8009950:	f001 fd36 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009954:	4603      	mov	r3, r0
 8009956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800995a:	e004      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009962:	e000      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800996e:	4ba5      	ldr	r3, [pc, #660]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009972:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800997c:	4aa1      	ldr	r2, [pc, #644]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800997e:	430b      	orrs	r3, r1
 8009980:	6513      	str	r3, [r2, #80]	@ 0x50
 8009982:	e003      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800998c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009998:	f04f 0900 	mov.w	r9, #0
 800999c:	ea58 0309 	orrs.w	r3, r8, r9
 80099a0:	d047      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d82a      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80099ac:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099c9 	.word	0x080099c9
 80099b8:	080099d7 	.word	0x080099d7
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	08009a0b 	.word	0x08009a0b
 80099c4:	08009a0b 	.word	0x08009a0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c8:	4b8e      	ldr	r3, [pc, #568]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099cc:	4a8d      	ldr	r2, [pc, #564]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d4:	e01a      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099da:	3308      	adds	r3, #8
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fc3c 	bl	800b25c <RCCEx_PLL2_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099ea:	e00f      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f0:	3328      	adds	r3, #40	@ 0x28
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fce3 	bl	800b3c0 <RCCEx_PLL3_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a00:	e004      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a08:	e000      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a14:	4b7b      	ldr	r3, [pc, #492]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a18:	f023 0107 	bic.w	r1, r3, #7
 8009a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a22:	4a78      	ldr	r2, [pc, #480]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a28:	e003      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	ea5a 030b 	orrs.w	r3, sl, fp
 8009a46:	d04c      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a52:	d030      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a58:	d829      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a5c:	d02d      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a60:	d825      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a62:	2b80      	cmp	r3, #128	@ 0x80
 8009a64:	d018      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009a66:	2b80      	cmp	r3, #128	@ 0x80
 8009a68:	d821      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009a6e:	2b40      	cmp	r3, #64	@ 0x40
 8009a70:	d007      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009a72:	e01c      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a74:	4b63      	ldr	r3, [pc, #396]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a62      	ldr	r2, [pc, #392]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a80:	e01c      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a86:	3308      	adds	r3, #8
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 fbe6 	bl	800b25c <RCCEx_PLL2_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a96:	e011      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9c:	3328      	adds	r3, #40	@ 0x28
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fc8d 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009aac:	e006      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ab4:	e002      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009ab6:	bf00      	nop
 8009ab8:	e000      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ad8:	e003      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009aee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009af2:	2300      	movs	r3, #0
 8009af4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009af8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009afc:	460b      	mov	r3, r1
 8009afe:	4313      	orrs	r3, r2
 8009b00:	d053      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b0e:	d035      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009b10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b14:	d82e      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b1a:	d031      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009b1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b20:	d828      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b26:	d01a      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b2c:	d822      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009b32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b36:	d007      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009b38:	e01c      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3a:	4b32      	ldr	r3, [pc, #200]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a31      	ldr	r2, [pc, #196]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b46:	e01c      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fb83 	bl	800b25c <RCCEx_PLL2_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b5c:	e011      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	3328      	adds	r3, #40	@ 0x28
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fc2a 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b72:	e006      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b7a:	e002      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b7c:	bf00      	nop
 8009b7e:	e000      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ba0:	e003      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009bc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	d056      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009bd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bd6:	d038      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bdc:	d831      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009be2:	d034      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009be4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009be8:	d82b      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bee:	d01d      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bf4:	d825      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d006      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009c00:	e01f      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009c02:	bf00      	nop
 8009c04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c08:	4ba2      	ldr	r3, [pc, #648]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	4aa1      	ldr	r2, [pc, #644]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c14:	e01c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fb1c 	bl	800b25c <RCCEx_PLL2_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c2a:	e011      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	3328      	adds	r3, #40	@ 0x28
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fbc3 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c40:	e006      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c48:	e002      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009c4a:	bf00      	nop
 8009c4c:	e000      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10b      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c58:	4b8e      	ldr	r3, [pc, #568]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009c68:	4a8a      	ldr	r2, [pc, #552]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c6e:	e003      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009c84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009c8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d03a      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c9e:	2b30      	cmp	r3, #48	@ 0x30
 8009ca0:	d01f      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009ca2:	2b30      	cmp	r3, #48	@ 0x30
 8009ca4:	d819      	bhi.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	d00c      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d815      	bhi.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d019      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	d111      	bne.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb6:	4b77      	ldr	r3, [pc, #476]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cba:	4a76      	ldr	r2, [pc, #472]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009cc2:	e011      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc8:	3308      	adds	r3, #8
 8009cca:	2102      	movs	r1, #2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fac5 	bl	800b25c <RCCEx_PLL2_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009cd8:	e006      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ce0:	e002      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009ce2:	bf00      	nop
 8009ce4:	e000      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009cf0:	4b68      	ldr	r3, [pc, #416]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfe:	4a65      	ldr	r2, [pc, #404]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d00:	430b      	orrs	r3, r1
 8009d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d04:	e003      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	d051      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d38:	d035      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d3e:	d82e      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d44:	d031      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009d46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d4a:	d828      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d50:	d01a      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d56:	d822      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d60:	d007      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009d62:	e01c      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d64:	4b4b      	ldr	r3, [pc, #300]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	4a4a      	ldr	r2, [pc, #296]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d70:	e01c      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	3308      	adds	r3, #8
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 fa6e 	bl	800b25c <RCCEx_PLL2_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d86:	e011      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d8c:	3328      	adds	r3, #40	@ 0x28
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 fb15 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d9c:	e006      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009da4:	e002      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009db4:	4b37      	ldr	r3, [pc, #220]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dc2:	4a34      	ldr	r2, [pc, #208]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dc8:	e003      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009de8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009dec:	460b      	mov	r3, r1
 8009dee:	4313      	orrs	r3, r2
 8009df0:	d056      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009dfc:	d033      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009dfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e02:	d82c      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e08:	d02f      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009e0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e0e:	d826      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e14:	d02b      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009e16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e1a:	d820      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e20:	d012      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e26:	d81a      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d022      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e30:	d115      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e36:	3308      	adds	r3, #8
 8009e38:	2101      	movs	r1, #1
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fa0e 	bl	800b25c <RCCEx_PLL2_Config>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e46:	e015      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4c:	3328      	adds	r3, #40	@ 0x28
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fab5 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e5c:	e00a      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e64:	e006      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e66:	bf00      	nop
 8009e68:	e004      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e6a:	bf00      	nop
 8009e6c:	e002      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e6e:	bf00      	nop
 8009e70:	e000      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10d      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e7c:	4b05      	ldr	r3, [pc, #20]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e8a:	4a02      	ldr	r2, [pc, #8]	@ (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e90:	e006      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009e92:	bf00      	nop
 8009e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009eb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d055      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ecc:	d033      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ed2:	d82c      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed8:	d02f      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ede:	d826      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ee0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ee4:	d02b      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009ee6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009eea:	d820      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef0:	d012      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef6:	d81a      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d022      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f00:	d115      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	3308      	adds	r3, #8
 8009f08:	2101      	movs	r1, #1
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f001 f9a6 	bl	800b25c <RCCEx_PLL2_Config>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f16:	e015      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1c:	3328      	adds	r3, #40	@ 0x28
 8009f1e:	2101      	movs	r1, #1
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 fa4d 	bl	800b3c0 <RCCEx_PLL3_Config>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f2c:	e00a      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f34:	e006      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f36:	bf00      	nop
 8009f38:	e004      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f3a:	bf00      	nop
 8009f3c:	e002      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f3e:	bf00      	nop
 8009f40:	e000      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f4c:	4ba3      	ldr	r3, [pc, #652]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f5c:	4a9f      	ldr	r2, [pc, #636]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f62:	e003      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d037      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f96:	d00e      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f9c:	d816      	bhi.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d018      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fa6:	d111      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa8:	4b8c      	ldr	r3, [pc, #560]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4a8b      	ldr	r2, [pc, #556]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fb4:	e00f      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fba:	3308      	adds	r3, #8
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 f94c 	bl	800b25c <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fca:	e004      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009fde:	4b7f      	ldr	r3, [pc, #508]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fec:	4a7b      	ldr	r2, [pc, #492]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fee:	430b      	orrs	r3, r1
 8009ff0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ff2:	e003      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a012:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a016:	460b      	mov	r3, r1
 800a018:	4313      	orrs	r3, r2
 800a01a:	d039      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a022:	2b03      	cmp	r3, #3
 800a024:	d81c      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a026:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a069 	.word	0x0800a069
 800a030:	0800a03d 	.word	0x0800a03d
 800a034:	0800a04b 	.word	0x0800a04b
 800a038:	0800a069 	.word	0x0800a069
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03c:	4b67      	ldr	r3, [pc, #412]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a040:	4a66      	ldr	r2, [pc, #408]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a048:	e00f      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04e:	3308      	adds	r3, #8
 800a050:	2102      	movs	r1, #2
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f902 	bl	800b25c <RCCEx_PLL2_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a05e:	e004      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a066:	e000      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a06a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a072:	4b5a      	ldr	r3, [pc, #360]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a076:	f023 0103 	bic.w	r1, r3, #3
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a080:	4a56      	ldr	r2, [pc, #344]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a082:	430b      	orrs	r3, r1
 800a084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a086:	e003      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a09c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a0a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f000 809f 	beq.w	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a4a      	ldr	r2, [pc, #296]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0be:	f7f8 fb15 	bl	80026ec <HAL_GetTick>
 800a0c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0c6:	e00b      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0c8:	f7f8 fb10 	bl	80026ec <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b64      	cmp	r3, #100	@ 0x64
 800a0d6:	d903      	bls.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0de:	e005      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ed      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d179      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a0f4:	4b39      	ldr	r3, [pc, #228]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a100:	4053      	eors	r3, r2
 800a102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a106:	2b00      	cmp	r3, #0
 800a108:	d015      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a10a:	4b34      	ldr	r3, [pc, #208]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a10e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a112:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a116:	4b31      	ldr	r3, [pc, #196]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a11a:	4a30      	ldr	r2, [pc, #192]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a11c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a120:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a122:	4b2e      	ldr	r3, [pc, #184]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a126:	4a2d      	ldr	r2, [pc, #180]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a12c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a12e:	4a2b      	ldr	r2, [pc, #172]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a134:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a13e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a142:	d118      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a144:	f7f8 fad2 	bl	80026ec <HAL_GetTick>
 800a148:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a14c:	e00d      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a14e:	f7f8 facd 	bl	80026ec <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a158:	1ad2      	subs	r2, r2, r3
 800a15a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a15e:	429a      	cmp	r2, r3
 800a160:	d903      	bls.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a168:	e005      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a16a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0eb      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d129      	bne.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a18a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a18e:	d10e      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a190:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a1a0:	091a      	lsrs	r2, r3, #4
 800a1a2:	4b10      	ldr	r3, [pc, #64]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	6113      	str	r3, [r2, #16]
 800a1ac:	e005      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1b8:	6113      	str	r3, [r2, #16]
 800a1ba:	4b08      	ldr	r3, [pc, #32]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ca:	4a04      	ldr	r2, [pc, #16]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1d0:	e00e      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a1da:	e009      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a1dc:	58024400 	.word	0x58024400
 800a1e0:	58024800 	.word	0x58024800
 800a1e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f002 0301 	and.w	r3, r2, #1
 800a1fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a200:	2300      	movs	r3, #0
 800a202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a206:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f000 8089 	beq.w	800a324 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a218:	2b28      	cmp	r3, #40	@ 0x28
 800a21a:	d86b      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a21c:	a201      	add	r2, pc, #4	@ (adr r2, 800a224 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a2fd 	.word	0x0800a2fd
 800a228:	0800a2f5 	.word	0x0800a2f5
 800a22c:	0800a2f5 	.word	0x0800a2f5
 800a230:	0800a2f5 	.word	0x0800a2f5
 800a234:	0800a2f5 	.word	0x0800a2f5
 800a238:	0800a2f5 	.word	0x0800a2f5
 800a23c:	0800a2f5 	.word	0x0800a2f5
 800a240:	0800a2f5 	.word	0x0800a2f5
 800a244:	0800a2c9 	.word	0x0800a2c9
 800a248:	0800a2f5 	.word	0x0800a2f5
 800a24c:	0800a2f5 	.word	0x0800a2f5
 800a250:	0800a2f5 	.word	0x0800a2f5
 800a254:	0800a2f5 	.word	0x0800a2f5
 800a258:	0800a2f5 	.word	0x0800a2f5
 800a25c:	0800a2f5 	.word	0x0800a2f5
 800a260:	0800a2f5 	.word	0x0800a2f5
 800a264:	0800a2df 	.word	0x0800a2df
 800a268:	0800a2f5 	.word	0x0800a2f5
 800a26c:	0800a2f5 	.word	0x0800a2f5
 800a270:	0800a2f5 	.word	0x0800a2f5
 800a274:	0800a2f5 	.word	0x0800a2f5
 800a278:	0800a2f5 	.word	0x0800a2f5
 800a27c:	0800a2f5 	.word	0x0800a2f5
 800a280:	0800a2f5 	.word	0x0800a2f5
 800a284:	0800a2fd 	.word	0x0800a2fd
 800a288:	0800a2f5 	.word	0x0800a2f5
 800a28c:	0800a2f5 	.word	0x0800a2f5
 800a290:	0800a2f5 	.word	0x0800a2f5
 800a294:	0800a2f5 	.word	0x0800a2f5
 800a298:	0800a2f5 	.word	0x0800a2f5
 800a29c:	0800a2f5 	.word	0x0800a2f5
 800a2a0:	0800a2f5 	.word	0x0800a2f5
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a2f5 	.word	0x0800a2f5
 800a2ac:	0800a2f5 	.word	0x0800a2f5
 800a2b0:	0800a2f5 	.word	0x0800a2f5
 800a2b4:	0800a2f5 	.word	0x0800a2f5
 800a2b8:	0800a2f5 	.word	0x0800a2f5
 800a2bc:	0800a2f5 	.word	0x0800a2f5
 800a2c0:	0800a2f5 	.word	0x0800a2f5
 800a2c4:	0800a2fd 	.word	0x0800a2fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 ffc3 	bl	800b25c <RCCEx_PLL2_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	3328      	adds	r3, #40	@ 0x28
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 f86a 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a306:	4bbf      	ldr	r3, [pc, #764]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a30a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a314:	4abb      	ldr	r2, [pc, #748]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6553      	str	r3, [r2, #84]	@ 0x54
 800a31a:	e003      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f002 0302 	and.w	r3, r2, #2
 800a330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a334:	2300      	movs	r3, #0
 800a336:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a33a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a33e:	460b      	mov	r3, r1
 800a340:	4313      	orrs	r3, r2
 800a342:	d041      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d824      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a34e:	a201      	add	r2, pc, #4	@ (adr r2, 800a354 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a3a1 	.word	0x0800a3a1
 800a358:	0800a36d 	.word	0x0800a36d
 800a35c:	0800a383 	.word	0x0800a383
 800a360:	0800a3a1 	.word	0x0800a3a1
 800a364:	0800a3a1 	.word	0x0800a3a1
 800a368:	0800a3a1 	.word	0x0800a3a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a370:	3308      	adds	r3, #8
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f000 ff71 	bl	800b25c <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a380:	e00f      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a386:	3328      	adds	r3, #40	@ 0x28
 800a388:	2101      	movs	r1, #1
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 f818 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a396:	e004      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a39e:	e000      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3aa:	4b96      	ldr	r3, [pc, #600]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ae:	f023 0107 	bic.w	r1, r3, #7
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3b8:	4a92      	ldr	r2, [pc, #584]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3ba:	430b      	orrs	r3, r1
 800a3bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3be:	e003      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f002 0304 	and.w	r3, r2, #4
 800a3d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	d044      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3f0:	2b05      	cmp	r3, #5
 800a3f2:	d825      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fa:	bf00      	nop
 800a3fc:	0800a449 	.word	0x0800a449
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a42b 	.word	0x0800a42b
 800a408:	0800a449 	.word	0x0800a449
 800a40c:	0800a449 	.word	0x0800a449
 800a410:	0800a449 	.word	0x0800a449
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a418:	3308      	adds	r3, #8
 800a41a:	2101      	movs	r1, #1
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 ff1d 	bl	800b25c <RCCEx_PLL2_Config>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a428:	e00f      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a42e:	3328      	adds	r3, #40	@ 0x28
 800a430:	2101      	movs	r1, #1
 800a432:	4618      	mov	r0, r3
 800a434:	f000 ffc4 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a43e:	e004      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a446:	e000      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a452:	4b6c      	ldr	r3, [pc, #432]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a456:	f023 0107 	bic.w	r1, r3, #7
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a462:	4a68      	ldr	r2, [pc, #416]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a464:	430b      	orrs	r3, r1
 800a466:	6593      	str	r3, [r2, #88]	@ 0x58
 800a468:	e003      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a46e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f002 0320 	and.w	r3, r2, #32
 800a47e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a482:	2300      	movs	r3, #0
 800a484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a48c:	460b      	mov	r3, r1
 800a48e:	4313      	orrs	r3, r2
 800a490:	d055      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a49e:	d033      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a4a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4a4:	d82c      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4aa:	d02f      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b0:	d826      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4b6:	d02b      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a4b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4bc:	d820      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c2:	d012      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a4c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c8:	d81a      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d022      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a4ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4d2:	d115      	bne.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d8:	3308      	adds	r3, #8
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 febd 	bl	800b25c <RCCEx_PLL2_Config>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4e8:	e015      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ee:	3328      	adds	r3, #40	@ 0x28
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 ff64 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4fe:	e00a      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a506:	e006      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a508:	bf00      	nop
 800a50a:	e004      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a50c:	bf00      	nop
 800a50e:	e002      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a510:	bf00      	nop
 800a512:	e000      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a514:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10b      	bne.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a51e:	4b39      	ldr	r3, [pc, #228]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a522:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52e:	4a35      	ldr	r2, [pc, #212]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a530:	430b      	orrs	r3, r1
 800a532:	6553      	str	r3, [r2, #84]	@ 0x54
 800a534:	e003      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a53a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a54a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a54e:	2300      	movs	r3, #0
 800a550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a554:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a558:	460b      	mov	r3, r1
 800a55a:	4313      	orrs	r3, r2
 800a55c:	d058      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a566:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a56a:	d033      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a56c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a570:	d82c      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a576:	d02f      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57c:	d826      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a57e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a582:	d02b      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a588:	d820      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a58a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a58e:	d012      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a594:	d81a      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d022      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a59a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a59e:	d115      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fe57 	bl	800b25c <RCCEx_PLL2_Config>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5b4:	e015      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ba:	3328      	adds	r3, #40	@ 0x28
 800a5bc:	2102      	movs	r1, #2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fefe 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5ca:	e00a      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5d2:	e006      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5d4:	bf00      	nop
 800a5d6:	e004      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5d8:	bf00      	nop
 800a5da:	e002      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5dc:	bf00      	nop
 800a5de:	e000      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10e      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5ea:	4b06      	ldr	r3, [pc, #24]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5fa:	4a02      	ldr	r2, [pc, #8]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800a600:	e006      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a602:	bf00      	nop
 800a604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a60c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a61c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a620:	2300      	movs	r3, #0
 800a622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a626:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a62a:	460b      	mov	r3, r1
 800a62c:	4313      	orrs	r3, r2
 800a62e:	d055      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a634:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a638:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a63c:	d033      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a63e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a642:	d82c      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a648:	d02f      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a64a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a64e:	d826      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a650:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a654:	d02b      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a656:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a65a:	d820      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a65c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a660:	d012      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a666:	d81a      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d022      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a66c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a670:	d115      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a676:	3308      	adds	r3, #8
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fdee 	bl	800b25c <RCCEx_PLL2_Config>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a686:	e015      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a68c:	3328      	adds	r3, #40	@ 0x28
 800a68e:	2102      	movs	r1, #2
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fe95 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a69c:	e00a      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6a4:	e006      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a6a6:	bf00      	nop
 800a6a8:	e004      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e002      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a6ae:	bf00      	nop
 800a6b0:	e000      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a6b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6bc:	4ba1      	ldr	r3, [pc, #644]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a6cc:	4a9d      	ldr	r2, [pc, #628]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6d2:	e003      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f002 0308 	and.w	r3, r2, #8
 800a6e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	d01e      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a708:	d10c      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a70e:	3328      	adds	r3, #40	@ 0x28
 800a710:	2102      	movs	r1, #2
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fe54 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a724:	4b87      	ldr	r3, [pc, #540]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a728:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a734:	4a83      	ldr	r2, [pc, #524]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a736:	430b      	orrs	r3, r1
 800a738:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f002 0310 	and.w	r3, r2, #16
 800a746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a74a:	2300      	movs	r3, #0
 800a74c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a750:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a754:	460b      	mov	r3, r1
 800a756:	4313      	orrs	r3, r2
 800a758:	d01e      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a766:	d10c      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76c:	3328      	adds	r3, #40	@ 0x28
 800a76e:	2102      	movs	r1, #2
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fe25 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a782:	4b70      	ldr	r3, [pc, #448]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a786:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a792:	4a6c      	ldr	r2, [pc, #432]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a794:	430b      	orrs	r3, r1
 800a796:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a7a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d03e      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7c4:	d022      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a7c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ca:	d81b      	bhi.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a7d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7d4:	d00b      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a7d6:	e015      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7dc:	3308      	adds	r3, #8
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fd3b 	bl	800b25c <RCCEx_PLL2_Config>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a7ec:	e00f      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f2:	3328      	adds	r3, #40	@ 0x28
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fde2 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a802:	e004      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a80a:	e000      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a80e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a816:	4b4b      	ldr	r3, [pc, #300]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a826:	4a47      	ldr	r2, [pc, #284]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a828:	430b      	orrs	r3, r1
 800a82a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a82c:	e003      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a842:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a844:	2300      	movs	r3, #0
 800a846:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a848:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a84c:	460b      	mov	r3, r1
 800a84e:	4313      	orrs	r3, r2
 800a850:	d03b      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a85e:	d01f      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a860:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a864:	d818      	bhi.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a86a:	d003      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a86c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a870:	d007      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a872:	e011      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a874:	4b33      	ldr	r3, [pc, #204]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a878:	4a32      	ldr	r2, [pc, #200]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a87a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a87e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a880:	e00f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a886:	3328      	adds	r3, #40	@ 0x28
 800a888:	2101      	movs	r1, #1
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fd98 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a896:	e004      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a89e:	e000      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10b      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8aa:	4b26      	ldr	r3, [pc, #152]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ba:	4a22      	ldr	r2, [pc, #136]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8bc:	430b      	orrs	r3, r1
 800a8be:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8c0:	e003      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a8d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8d8:	2300      	movs	r3, #0
 800a8da:	677b      	str	r3, [r7, #116]	@ 0x74
 800a8dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	d034      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f4:	d007      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a8f6:	e011      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f8:	4b12      	ldr	r3, [pc, #72]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fc:	4a11      	ldr	r2, [pc, #68]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a904:	e00e      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90a:	3308      	adds	r3, #8
 800a90c:	2102      	movs	r1, #2
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fca4 	bl	800b25c <RCCEx_PLL2_Config>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a91a:	e003      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a922:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10d      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a930:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93a:	4a02      	ldr	r2, [pc, #8]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a93c:	430b      	orrs	r3, r1
 800a93e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a940:	e006      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a942:	bf00      	nop
 800a944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a94c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a95c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a95e:	2300      	movs	r3, #0
 800a960:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a962:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a966:	460b      	mov	r3, r1
 800a968:	4313      	orrs	r3, r2
 800a96a:	d00c      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a970:	3328      	adds	r3, #40	@ 0x28
 800a972:	2102      	movs	r1, #2
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fd23 	bl	800b3c0 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a992:	663b      	str	r3, [r7, #96]	@ 0x60
 800a994:	2300      	movs	r3, #0
 800a996:	667b      	str	r3, [r7, #100]	@ 0x64
 800a998:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a99c:	460b      	mov	r3, r1
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	d038      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9ae:	d018      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a9b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9b4:	d811      	bhi.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a9b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ba:	d014      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a9bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c0:	d80b      	bhi.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d011      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a9c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ca:	d106      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9cc:	4bc3      	ldr	r3, [pc, #780]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d0:	4ac2      	ldr	r2, [pc, #776]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a9d8:	e008      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9e0:	e004      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9e2:	bf00      	nop
 800a9e4:	e002      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9e6:	bf00      	nop
 800a9e8:	e000      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10b      	bne.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9f4:	4bb9      	ldr	r3, [pc, #740]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa04:	4ab5      	ldr	r2, [pc, #724]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa0a:	e003      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aa20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa22:	2300      	movs	r3, #0
 800aa24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	d009      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa30:	4baa      	ldr	r3, [pc, #680]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa3e:	4aa7      	ldr	r2, [pc, #668]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aa44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800aa50:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa52:	2300      	movs	r3, #0
 800aa54:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d00a      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aa60:	4b9e      	ldr	r3, [pc, #632]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800aa70:	4a9a      	ldr	r2, [pc, #616]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa72:	430b      	orrs	r3, r1
 800aa74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aa82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa84:	2300      	movs	r3, #0
 800aa86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	d009      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa92:	4b92      	ldr	r3, [pc, #584]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa0:	4a8e      	ldr	r2, [pc, #568]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aab2:	643b      	str	r3, [r7, #64]	@ 0x40
 800aab4:	2300      	movs	r3, #0
 800aab6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aab8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aabc:	460b      	mov	r3, r1
 800aabe:	4313      	orrs	r3, r2
 800aac0:	d00e      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aac2:	4b86      	ldr	r3, [pc, #536]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	4a85      	ldr	r2, [pc, #532]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aac8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aacc:	6113      	str	r3, [r2, #16]
 800aace:	4b83      	ldr	r3, [pc, #524]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aad0:	6919      	ldr	r1, [r3, #16]
 800aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aada:	4a80      	ldr	r2, [pc, #512]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aadc:	430b      	orrs	r3, r1
 800aade:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aaec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	d009      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aafc:	4b77      	ldr	r3, [pc, #476]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aafe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ab04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab0a:	4a74      	ldr	r2, [pc, #464]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab0c:	430b      	orrs	r3, r1
 800ab0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ab1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab1e:	2300      	movs	r3, #0
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ab26:	460b      	mov	r3, r1
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	d00a      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab2c:	4b6b      	ldr	r3, [pc, #428]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ab34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab3c:	4a67      	ldr	r2, [pc, #412]	@ (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab3e:	430b      	orrs	r3, r1
 800ab40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	d011      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab62:	3308      	adds	r3, #8
 800ab64:	2100      	movs	r1, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fb78 	bl	800b25c <RCCEx_PLL2_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	6239      	str	r1, [r7, #32]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	d011      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba2:	3308      	adds	r3, #8
 800aba4:	2101      	movs	r1, #1
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fb58 	bl	800b25c <RCCEx_PLL2_Config>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800abb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	2100      	movs	r1, #0
 800abcc:	61b9      	str	r1, [r7, #24]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	61fb      	str	r3, [r7, #28]
 800abd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d011      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe2:	3308      	adds	r3, #8
 800abe4:	2102      	movs	r1, #2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fb38 	bl	800b25c <RCCEx_PLL2_Config>
 800abec:	4603      	mov	r3, r0
 800abee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800abf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	6139      	str	r1, [r7, #16]
 800ac0e:	f003 0308 	and.w	r3, r3, #8
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	d011      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac22:	3328      	adds	r3, #40	@ 0x28
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fbca 	bl	800b3c0 <RCCEx_PLL3_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ac32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	f003 0310 	and.w	r3, r3, #16
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	d011      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac62:	3328      	adds	r3, #40	@ 0x28
 800ac64:	2101      	movs	r1, #1
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fbaa 	bl	800b3c0 <RCCEx_PLL3_Config>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ac72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6039      	str	r1, [r7, #0]
 800ac8e:	f003 0320 	and.w	r3, r3, #32
 800ac92:	607b      	str	r3, [r7, #4]
 800ac94:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	d011      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca2:	3328      	adds	r3, #40	@ 0x28
 800aca4:	2102      	movs	r1, #2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fb8a 	bl	800b3c0 <RCCEx_PLL3_Config>
 800acac:	4603      	mov	r3, r0
 800acae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800acb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800acc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	e000      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800acd6:	46bd      	mov	sp, r7
 800acd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acdc:	58024400 	.word	0x58024400

0800ace0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ace4:	f7fe fd54 	bl	8009790 <HAL_RCC_GetHCLKFreq>
 800ace8:	4602      	mov	r2, r0
 800acea:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	091b      	lsrs	r3, r3, #4
 800acf0:	f003 0307 	and.w	r3, r3, #7
 800acf4:	4904      	ldr	r1, [pc, #16]	@ (800ad08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800acf6:	5ccb      	ldrb	r3, [r1, r3]
 800acf8:	f003 031f 	and.w	r3, r3, #31
 800acfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	58024400 	.word	0x58024400
 800ad08:	08019e10 	.word	0x08019e10

0800ad0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b089      	sub	sp, #36	@ 0x24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad14:	4ba1      	ldr	r3, [pc, #644]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad1e:	4b9f      	ldr	r3, [pc, #636]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	0b1b      	lsrs	r3, r3, #12
 800ad24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad2a:	4b9c      	ldr	r3, [pc, #624]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2e:	091b      	lsrs	r3, r3, #4
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad36:	4b99      	ldr	r3, [pc, #612]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad3a:	08db      	lsrs	r3, r3, #3
 800ad3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	fb02 f303 	mul.w	r3, r2, r3
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 8111 	beq.w	800af7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	f000 8083 	beq.w	800ae68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	f200 80a1 	bhi.w	800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d056      	beq.n	800ae24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad76:	e099      	b.n	800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad78:	4b88      	ldr	r3, [pc, #544]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0320 	and.w	r3, r3, #32
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d02d      	beq.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad84:	4b85      	ldr	r3, [pc, #532]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	08db      	lsrs	r3, r3, #3
 800ad8a:	f003 0303 	and.w	r3, r3, #3
 800ad8e:	4a84      	ldr	r2, [pc, #528]	@ (800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad90:	fa22 f303 	lsr.w	r3, r2, r3
 800ad94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	ee07 3a90 	vmov	s15, r3
 800ad9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adae:	4b7b      	ldr	r3, [pc, #492]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800adc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adde:	e087      	b.n	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800adee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adf2:	4b6a      	ldr	r3, [pc, #424]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae22:	e065      	b.n	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800afac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae36:	4b59      	ldr	r3, [pc, #356]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae66:	e043      	b.n	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7a:	4b48      	ldr	r3, [pc, #288]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeaa:	e021      	b.n	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800afac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aeba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebe:	4b37      	ldr	r3, [pc, #220]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aece:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aef0:	4b2a      	ldr	r3, [pc, #168]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef4:	0a5b      	lsrs	r3, r3, #9
 800aef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af16:	ee17 2a90 	vmov	r2, s15
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af1e:	4b1f      	ldr	r3, [pc, #124]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af22:	0c1b      	lsrs	r3, r3, #16
 800af24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af38:	edd7 6a07 	vldr	s13, [r7, #28]
 800af3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af44:	ee17 2a90 	vmov	r2, s15
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800af4c:	4b13      	ldr	r3, [pc, #76]	@ (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af50:	0e1b      	lsrs	r3, r3, #24
 800af52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af66:	edd7 6a07 	vldr	s13, [r7, #28]
 800af6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af72:	ee17 2a90 	vmov	r2, s15
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af7a:	e008      	b.n	800af8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	609a      	str	r2, [r3, #8]
}
 800af8e:	bf00      	nop
 800af90:	3724      	adds	r7, #36	@ 0x24
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	58024400 	.word	0x58024400
 800afa0:	03d09000 	.word	0x03d09000
 800afa4:	46000000 	.word	0x46000000
 800afa8:	4c742400 	.word	0x4c742400
 800afac:	4a742400 	.word	0x4a742400
 800afb0:	4bbebc20 	.word	0x4bbebc20

0800afb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b089      	sub	sp, #36	@ 0x24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afbc:	4ba1      	ldr	r3, [pc, #644]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800afc6:	4b9f      	ldr	r3, [pc, #636]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afca:	0d1b      	lsrs	r3, r3, #20
 800afcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800afd2:	4b9c      	ldr	r3, [pc, #624]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800afde:	4b99      	ldr	r3, [pc, #612]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afe2:	08db      	lsrs	r3, r3, #3
 800afe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	fb02 f303 	mul.w	r3, r2, r3
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8111 	beq.w	800b224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b02      	cmp	r3, #2
 800b006:	f000 8083 	beq.w	800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	f200 80a1 	bhi.w	800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d056      	beq.n	800b0cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b01e:	e099      	b.n	800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b020:	4b88      	ldr	r3, [pc, #544]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d02d      	beq.n	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b02c:	4b85      	ldr	r3, [pc, #532]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	08db      	lsrs	r3, r3, #3
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	4a84      	ldr	r2, [pc, #528]	@ (800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b038:	fa22 f303 	lsr.w	r3, r2, r3
 800b03c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b7b      	ldr	r3, [pc, #492]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b086:	e087      	b.n	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b6a      	ldr	r3, [pc, #424]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ca:	e065      	b.n	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b59      	ldr	r3, [pc, #356]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10e:	e043      	b.n	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b48      	ldr	r3, [pc, #288]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a03 	vldr	s12, [r7, #12]
 800b136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b152:	e021      	b.n	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b37      	ldr	r3, [pc, #220]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b198:	4b2a      	ldr	r3, [pc, #168]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19c:	0a5b      	lsrs	r3, r3, #9
 800b19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1be:	ee17 2a90 	vmov	r2, s15
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ca:	0c1b      	lsrs	r3, r3, #16
 800b1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ec:	ee17 2a90 	vmov	r2, s15
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b1f4:	4b13      	ldr	r3, [pc, #76]	@ (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f8:	0e1b      	lsrs	r3, r3, #24
 800b1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1fe:	ee07 3a90 	vmov	s15, r3
 800b202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b21a:	ee17 2a90 	vmov	r2, s15
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b222:	e008      	b.n	800b236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	609a      	str	r2, [r3, #8]
}
 800b236:	bf00      	nop
 800b238:	3724      	adds	r7, #36	@ 0x24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
 800b248:	03d09000 	.word	0x03d09000
 800b24c:	46000000 	.word	0x46000000
 800b250:	4c742400 	.word	0x4c742400
 800b254:	4a742400 	.word	0x4a742400
 800b258:	4bbebc20 	.word	0x4bbebc20

0800b25c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b26a:	4b53      	ldr	r3, [pc, #332]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	2b03      	cmp	r3, #3
 800b274:	d101      	bne.n	800b27a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e099      	b.n	800b3ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b27a:	4b4f      	ldr	r3, [pc, #316]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a4e      	ldr	r2, [pc, #312]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b280:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b286:	f7f7 fa31 	bl	80026ec <HAL_GetTick>
 800b28a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b28c:	e008      	b.n	800b2a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b28e:	f7f7 fa2d 	bl	80026ec <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d901      	bls.n	800b2a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e086      	b.n	800b3ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b2a0:	4b45      	ldr	r3, [pc, #276]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f0      	bne.n	800b28e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b2ac:	4b42      	ldr	r3, [pc, #264]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	031b      	lsls	r3, r3, #12
 800b2ba:	493f      	ldr	r1, [pc, #252]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	628b      	str	r3, [r1, #40]	@ 0x28
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	025b      	lsls	r3, r3, #9
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	041b      	lsls	r3, r3, #16
 800b2de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	061b      	lsls	r3, r3, #24
 800b2ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b2f0:	4931      	ldr	r1, [pc, #196]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2f6:	4b30      	ldr	r3, [pc, #192]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	492d      	ldr	r1, [pc, #180]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b304:	4313      	orrs	r3, r2
 800b306:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b308:	4b2b      	ldr	r3, [pc, #172]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30c:	f023 0220 	bic.w	r2, r3, #32
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	4928      	ldr	r1, [pc, #160]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b316:	4313      	orrs	r3, r2
 800b318:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b31a:	4b27      	ldr	r3, [pc, #156]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31e:	4a26      	ldr	r2, [pc, #152]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b320:	f023 0310 	bic.w	r3, r3, #16
 800b324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b326:	4b24      	ldr	r3, [pc, #144]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b32a:	4b24      	ldr	r3, [pc, #144]	@ (800b3bc <RCCEx_PLL2_Config+0x160>)
 800b32c:	4013      	ands	r3, r2
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	69d2      	ldr	r2, [r2, #28]
 800b332:	00d2      	lsls	r2, r2, #3
 800b334:	4920      	ldr	r1, [pc, #128]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b336:	4313      	orrs	r3, r2
 800b338:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b33a:	4b1f      	ldr	r3, [pc, #124]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33e:	4a1e      	ldr	r2, [pc, #120]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b340:	f043 0310 	orr.w	r3, r3, #16
 800b344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b34c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	4a19      	ldr	r2, [pc, #100]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b352:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b358:	e00f      	b.n	800b37a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d106      	bne.n	800b36e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b360:	4b15      	ldr	r3, [pc, #84]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b364:	4a14      	ldr	r2, [pc, #80]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b36a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b36c:	e005      	b.n	800b37a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b36e:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	4a11      	ldr	r2, [pc, #68]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b378:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b37a:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b386:	f7f7 f9b1 	bl	80026ec <HAL_GetTick>
 800b38a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b38c:	e008      	b.n	800b3a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b38e:	f7f7 f9ad 	bl	80026ec <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d901      	bls.n	800b3a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e006      	b.n	800b3ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <RCCEx_PLL2_Config+0x15c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0f0      	beq.n	800b38e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	58024400 	.word	0x58024400
 800b3bc:	ffff0007 	.word	0xffff0007

0800b3c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3ce:	4b53      	ldr	r3, [pc, #332]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d101      	bne.n	800b3de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e099      	b.n	800b512 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3de:	4b4f      	ldr	r3, [pc, #316]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a4e      	ldr	r2, [pc, #312]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b3e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ea:	f7f7 f97f 	bl	80026ec <HAL_GetTick>
 800b3ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3f0:	e008      	b.n	800b404 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3f2:	f7f7 f97b 	bl	80026ec <HAL_GetTick>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d901      	bls.n	800b404 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e086      	b.n	800b512 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b404:	4b45      	ldr	r3, [pc, #276]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1f0      	bne.n	800b3f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b410:	4b42      	ldr	r3, [pc, #264]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b414:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	051b      	lsls	r3, r3, #20
 800b41e:	493f      	ldr	r1, [pc, #252]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b420:	4313      	orrs	r3, r2
 800b422:	628b      	str	r3, [r1, #40]	@ 0x28
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	3b01      	subs	r3, #1
 800b42a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	3b01      	subs	r3, #1
 800b434:	025b      	lsls	r3, r3, #9
 800b436:	b29b      	uxth	r3, r3
 800b438:	431a      	orrs	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	3b01      	subs	r3, #1
 800b440:	041b      	lsls	r3, r3, #16
 800b442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b446:	431a      	orrs	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	061b      	lsls	r3, r3, #24
 800b450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b454:	4931      	ldr	r1, [pc, #196]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b456:	4313      	orrs	r3, r2
 800b458:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b45a:	4b30      	ldr	r3, [pc, #192]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	492d      	ldr	r1, [pc, #180]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b468:	4313      	orrs	r3, r2
 800b46a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b46c:	4b2b      	ldr	r3, [pc, #172]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b470:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	4928      	ldr	r1, [pc, #160]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b47e:	4b27      	ldr	r3, [pc, #156]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b482:	4a26      	ldr	r2, [pc, #152]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b48a:	4b24      	ldr	r3, [pc, #144]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b48c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b48e:	4b24      	ldr	r3, [pc, #144]	@ (800b520 <RCCEx_PLL3_Config+0x160>)
 800b490:	4013      	ands	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	69d2      	ldr	r2, [r2, #28]
 800b496:	00d2      	lsls	r2, r2, #3
 800b498:	4920      	ldr	r1, [pc, #128]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b49e:	4b1f      	ldr	r3, [pc, #124]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b4b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b4:	4a19      	ldr	r2, [pc, #100]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b4ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4bc:	e00f      	b.n	800b4de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d106      	bne.n	800b4d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b4c4:	4b15      	ldr	r3, [pc, #84]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c8:	4a14      	ldr	r2, [pc, #80]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4d0:	e005      	b.n	800b4de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b4d2:	4b12      	ldr	r3, [pc, #72]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d6:	4a11      	ldr	r2, [pc, #68]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b4dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b4de:	4b0f      	ldr	r3, [pc, #60]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b4e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ea:	f7f7 f8ff 	bl	80026ec <HAL_GetTick>
 800b4ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4f0:	e008      	b.n	800b504 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4f2:	f7f7 f8fb 	bl	80026ec <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d901      	bls.n	800b504 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e006      	b.n	800b512 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b504:	4b05      	ldr	r3, [pc, #20]	@ (800b51c <RCCEx_PLL3_Config+0x15c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0f0      	beq.n	800b4f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b510:	7bfb      	ldrb	r3, [r7, #15]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	ffff0007 	.word	0xffff0007

0800b524 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e10f      	b.n	800b756 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a87      	ldr	r2, [pc, #540]	@ (800b760 <HAL_SPI_Init+0x23c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d00f      	beq.n	800b566 <HAL_SPI_Init+0x42>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a86      	ldr	r2, [pc, #536]	@ (800b764 <HAL_SPI_Init+0x240>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00a      	beq.n	800b566 <HAL_SPI_Init+0x42>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a84      	ldr	r2, [pc, #528]	@ (800b768 <HAL_SPI_Init+0x244>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d005      	beq.n	800b566 <HAL_SPI_Init+0x42>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	2b0f      	cmp	r3, #15
 800b560:	d901      	bls.n	800b566 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e0f7      	b.n	800b756 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f900 	bl	800b76c <SPI_GetPacketSize>
 800b56c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a7b      	ldr	r2, [pc, #492]	@ (800b760 <HAL_SPI_Init+0x23c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00c      	beq.n	800b592 <HAL_SPI_Init+0x6e>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a79      	ldr	r2, [pc, #484]	@ (800b764 <HAL_SPI_Init+0x240>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d007      	beq.n	800b592 <HAL_SPI_Init+0x6e>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a78      	ldr	r2, [pc, #480]	@ (800b768 <HAL_SPI_Init+0x244>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d002      	beq.n	800b592 <HAL_SPI_Init+0x6e>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b08      	cmp	r3, #8
 800b590:	d811      	bhi.n	800b5b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b596:	4a72      	ldr	r2, [pc, #456]	@ (800b760 <HAL_SPI_Init+0x23c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d009      	beq.n	800b5b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a70      	ldr	r2, [pc, #448]	@ (800b764 <HAL_SPI_Init+0x240>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d004      	beq.n	800b5b0 <HAL_SPI_Init+0x8c>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a6f      	ldr	r2, [pc, #444]	@ (800b768 <HAL_SPI_Init+0x244>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d104      	bne.n	800b5ba <HAL_SPI_Init+0x96>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b10      	cmp	r3, #16
 800b5b4:	d901      	bls.n	800b5ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e0cd      	b.n	800b756 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7f6 fcb8 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 0201 	bic.w	r2, r2, #1
 800b5ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b5f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b600:	d119      	bne.n	800b636 <HAL_SPI_Init+0x112>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b60a:	d103      	bne.n	800b614 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b610:	2b00      	cmp	r3, #0
 800b612:	d008      	beq.n	800b626 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10c      	bne.n	800b636 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b624:	d107      	bne.n	800b636 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b634:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00f      	beq.n	800b662 <HAL_SPI_Init+0x13e>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2b06      	cmp	r3, #6
 800b648:	d90b      	bls.n	800b662 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	e007      	b.n	800b672 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b670:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	69da      	ldr	r2, [r3, #28]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67a:	431a      	orrs	r2, r3
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b684:	ea42 0103 	orr.w	r1, r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69c:	431a      	orrs	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	431a      	orrs	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	431a      	orrs	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6d2:	ea42 0103 	orr.w	r1, r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d113      	bne.n	800b712 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b710:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f022 0201 	bic.w	r2, r2, #1
 800b720:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40013000 	.word	0x40013000
 800b764:	40003800 	.word	0x40003800
 800b768:	40003c00 	.word	0x40003c00

0800b76c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	3307      	adds	r3, #7
 800b78a:	08db      	lsrs	r3, r3, #3
 800b78c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e049      	b.n	800b848 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7f6 fc49 	bl	8002060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f000 fc49 	bl	800c078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b01      	cmp	r3, #1
 800b862:	d001      	beq.n	800b868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e054      	b.n	800b912 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2202      	movs	r2, #2
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f042 0201 	orr.w	r2, r2, #1
 800b87e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a26      	ldr	r2, [pc, #152]	@ (800b920 <HAL_TIM_Base_Start_IT+0xd0>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d022      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b892:	d01d      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a22      	ldr	r2, [pc, #136]	@ (800b924 <HAL_TIM_Base_Start_IT+0xd4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d018      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a21      	ldr	r2, [pc, #132]	@ (800b928 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d013      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b92c <HAL_TIM_Base_Start_IT+0xdc>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00e      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b930 <HAL_TIM_Base_Start_IT+0xe0>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d009      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b934 <HAL_TIM_Base_Start_IT+0xe4>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <HAL_TIM_Base_Start_IT+0x80>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800b938 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d115      	bne.n	800b8fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	4b19      	ldr	r3, [pc, #100]	@ (800b93c <HAL_TIM_Base_Start_IT+0xec>)
 800b8d8:	4013      	ands	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b06      	cmp	r3, #6
 800b8e0:	d015      	beq.n	800b90e <HAL_TIM_Base_Start_IT+0xbe>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8e8:	d011      	beq.n	800b90e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0201 	orr.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8fa:	e008      	b.n	800b90e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f042 0201 	orr.w	r2, r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e000      	b.n	800b910 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	40010000 	.word	0x40010000
 800b924:	40000400 	.word	0x40000400
 800b928:	40000800 	.word	0x40000800
 800b92c:	40000c00 	.word	0x40000c00
 800b930:	40010400 	.word	0x40010400
 800b934:	40001800 	.word	0x40001800
 800b938:	40014000 	.word	0x40014000
 800b93c:	00010007 	.word	0x00010007

0800b940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e049      	b.n	800b9e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f841 	bl	800b9ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f000 fb7a 	bl	800c078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f003 0302 	and.w	r3, r3, #2
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d020      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d01b      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f06f 0202 	mvn.w	r2, #2
 800ba36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 faf5 	bl	800c03c <HAL_TIM_IC_CaptureCallback>
 800ba52:	e005      	b.n	800ba60 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fae7 	bl	800c028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 faf8 	bl	800c050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d020      	beq.n	800bab2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01b      	beq.n	800bab2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f06f 0204 	mvn.w	r2, #4
 800ba82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2202      	movs	r2, #2
 800ba88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 facf 	bl	800c03c <HAL_TIM_IC_CaptureCallback>
 800ba9e:	e005      	b.n	800baac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fac1 	bl	800c028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fad2 	bl	800c050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f003 0308 	and.w	r3, r3, #8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d020      	beq.n	800bafe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f003 0308 	and.w	r3, r3, #8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01b      	beq.n	800bafe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f06f 0208 	mvn.w	r2, #8
 800bace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2204      	movs	r2, #4
 800bad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 faa9 	bl	800c03c <HAL_TIM_IC_CaptureCallback>
 800baea:	e005      	b.n	800baf8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fa9b 	bl	800c028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 faac 	bl	800c050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	f003 0310 	and.w	r3, r3, #16
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d020      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f003 0310 	and.w	r3, r3, #16
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01b      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f06f 0210 	mvn.w	r2, #16
 800bb1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2208      	movs	r2, #8
 800bb20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fa83 	bl	800c03c <HAL_TIM_IC_CaptureCallback>
 800bb36:	e005      	b.n	800bb44 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fa75 	bl	800c028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa86 	bl	800c050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00c      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d007      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f06f 0201 	mvn.w	r2, #1
 800bb66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7f5 fe31 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d104      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00c      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d007      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 ff9e 	bl	800cad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00c      	beq.n	800bbc0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d007      	beq.n	800bbc0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 ff96 	bl	800caec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00c      	beq.n	800bbe4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d007      	beq.n	800bbe4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fa40 	bl	800c064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	f003 0320 	and.w	r3, r3, #32
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f003 0320 	and.w	r3, r3, #32
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d007      	beq.n	800bc08 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f06f 0220 	mvn.w	r2, #32
 800bc00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 ff5e 	bl	800cac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc08:	bf00      	nop
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d101      	bne.n	800bc2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e0ff      	b.n	800be2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b14      	cmp	r3, #20
 800bc3a:	f200 80f0 	bhi.w	800be1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc44:	0800bc99 	.word	0x0800bc99
 800bc48:	0800be1f 	.word	0x0800be1f
 800bc4c:	0800be1f 	.word	0x0800be1f
 800bc50:	0800be1f 	.word	0x0800be1f
 800bc54:	0800bcd9 	.word	0x0800bcd9
 800bc58:	0800be1f 	.word	0x0800be1f
 800bc5c:	0800be1f 	.word	0x0800be1f
 800bc60:	0800be1f 	.word	0x0800be1f
 800bc64:	0800bd1b 	.word	0x0800bd1b
 800bc68:	0800be1f 	.word	0x0800be1f
 800bc6c:	0800be1f 	.word	0x0800be1f
 800bc70:	0800be1f 	.word	0x0800be1f
 800bc74:	0800bd5b 	.word	0x0800bd5b
 800bc78:	0800be1f 	.word	0x0800be1f
 800bc7c:	0800be1f 	.word	0x0800be1f
 800bc80:	0800be1f 	.word	0x0800be1f
 800bc84:	0800bd9d 	.word	0x0800bd9d
 800bc88:	0800be1f 	.word	0x0800be1f
 800bc8c:	0800be1f 	.word	0x0800be1f
 800bc90:	0800be1f 	.word	0x0800be1f
 800bc94:	0800bddd 	.word	0x0800bddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68b9      	ldr	r1, [r7, #8]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fa90 	bl	800c1c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	699a      	ldr	r2, [r3, #24]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f042 0208 	orr.w	r2, r2, #8
 800bcb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	699a      	ldr	r2, [r3, #24]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 0204 	bic.w	r2, r2, #4
 800bcc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6999      	ldr	r1, [r3, #24]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	691a      	ldr	r2, [r3, #16]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	619a      	str	r2, [r3, #24]
      break;
 800bcd6:	e0a5      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fb00 	bl	800c2e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	699a      	ldr	r2, [r3, #24]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699a      	ldr	r2, [r3, #24]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6999      	ldr	r1, [r3, #24]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	021a      	lsls	r2, r3, #8
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	619a      	str	r2, [r3, #24]
      break;
 800bd18:	e084      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fb69 	bl	800c3f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69da      	ldr	r2, [r3, #28]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f042 0208 	orr.w	r2, r2, #8
 800bd34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	69da      	ldr	r2, [r3, #28]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f022 0204 	bic.w	r2, r2, #4
 800bd44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	69d9      	ldr	r1, [r3, #28]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	691a      	ldr	r2, [r3, #16]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	61da      	str	r2, [r3, #28]
      break;
 800bd58:	e064      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68b9      	ldr	r1, [r7, #8]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fbd1 	bl	800c508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	69da      	ldr	r2, [r3, #28]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69da      	ldr	r2, [r3, #28]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	69d9      	ldr	r1, [r3, #28]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	021a      	lsls	r2, r3, #8
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	61da      	str	r2, [r3, #28]
      break;
 800bd9a:	e043      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fc1a 	bl	800c5dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f042 0208 	orr.w	r2, r2, #8
 800bdb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0204 	bic.w	r2, r2, #4
 800bdc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bdda:	e023      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fc5e 	bl	800c6a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	021a      	lsls	r2, r3, #8
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800be1c:	e002      	b.n	800be24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	75fb      	strb	r3, [r7, #23]
      break;
 800be22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop

0800be38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d101      	bne.n	800be54 <HAL_TIM_ConfigClockSource+0x1c>
 800be50:	2302      	movs	r3, #2
 800be52:	e0dc      	b.n	800c00e <HAL_TIM_ConfigClockSource+0x1d6>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2202      	movs	r2, #2
 800be60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	4b6a      	ldr	r3, [pc, #424]	@ (800c018 <HAL_TIM_ConfigClockSource+0x1e0>)
 800be70:	4013      	ands	r3, r2
 800be72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a64      	ldr	r2, [pc, #400]	@ (800c01c <HAL_TIM_ConfigClockSource+0x1e4>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	f000 80a9 	beq.w	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800be90:	4a62      	ldr	r2, [pc, #392]	@ (800c01c <HAL_TIM_ConfigClockSource+0x1e4>)
 800be92:	4293      	cmp	r3, r2
 800be94:	f200 80ae 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800be98:	4a61      	ldr	r2, [pc, #388]	@ (800c020 <HAL_TIM_ConfigClockSource+0x1e8>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	f000 80a1 	beq.w	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bea0:	4a5f      	ldr	r2, [pc, #380]	@ (800c020 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	f200 80a6 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bea8:	4a5e      	ldr	r2, [pc, #376]	@ (800c024 <HAL_TIM_ConfigClockSource+0x1ec>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	f000 8099 	beq.w	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800beb0:	4a5c      	ldr	r2, [pc, #368]	@ (800c024 <HAL_TIM_ConfigClockSource+0x1ec>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	f200 809e 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800beb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bebc:	f000 8091 	beq.w	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bec0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bec4:	f200 8096 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800becc:	f000 8089 	beq.w	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bed4:	f200 808e 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bedc:	d03e      	beq.n	800bf5c <HAL_TIM_ConfigClockSource+0x124>
 800bede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bee2:	f200 8087 	bhi.w	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beea:	f000 8086 	beq.w	800bffa <HAL_TIM_ConfigClockSource+0x1c2>
 800beee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bef2:	d87f      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bef4:	2b70      	cmp	r3, #112	@ 0x70
 800bef6:	d01a      	beq.n	800bf2e <HAL_TIM_ConfigClockSource+0xf6>
 800bef8:	2b70      	cmp	r3, #112	@ 0x70
 800befa:	d87b      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800befc:	2b60      	cmp	r3, #96	@ 0x60
 800befe:	d050      	beq.n	800bfa2 <HAL_TIM_ConfigClockSource+0x16a>
 800bf00:	2b60      	cmp	r3, #96	@ 0x60
 800bf02:	d877      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf04:	2b50      	cmp	r3, #80	@ 0x50
 800bf06:	d03c      	beq.n	800bf82 <HAL_TIM_ConfigClockSource+0x14a>
 800bf08:	2b50      	cmp	r3, #80	@ 0x50
 800bf0a:	d873      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf0c:	2b40      	cmp	r3, #64	@ 0x40
 800bf0e:	d058      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x18a>
 800bf10:	2b40      	cmp	r3, #64	@ 0x40
 800bf12:	d86f      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf14:	2b30      	cmp	r3, #48	@ 0x30
 800bf16:	d064      	beq.n	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf18:	2b30      	cmp	r3, #48	@ 0x30
 800bf1a:	d86b      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	d060      	beq.n	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	d867      	bhi.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d05c      	beq.n	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf28:	2b10      	cmp	r3, #16
 800bf2a:	d05a      	beq.n	800bfe2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf2c:	e062      	b.n	800bff4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf3e:	f000 fc95 	bl	800c86c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	609a      	str	r2, [r3, #8]
      break;
 800bf5a:	e04f      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf6c:	f000 fc7e 	bl	800c86c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689a      	ldr	r2, [r3, #8]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf7e:	609a      	str	r2, [r3, #8]
      break;
 800bf80:	e03c      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f000 fbee 	bl	800c770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2150      	movs	r1, #80	@ 0x50
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 fc48 	bl	800c830 <TIM_ITRx_SetConfig>
      break;
 800bfa0:	e02c      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f000 fc0d 	bl	800c7ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2160      	movs	r1, #96	@ 0x60
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 fc38 	bl	800c830 <TIM_ITRx_SetConfig>
      break;
 800bfc0:	e01c      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f000 fbce 	bl	800c770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2140      	movs	r1, #64	@ 0x40
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fc28 	bl	800c830 <TIM_ITRx_SetConfig>
      break;
 800bfe0:	e00c      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f000 fc1f 	bl	800c830 <TIM_ITRx_SetConfig>
      break;
 800bff2:	e003      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	73fb      	strb	r3, [r7, #15]
      break;
 800bff8:	e000      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	ffceff88 	.word	0xffceff88
 800c01c:	00100040 	.word	0x00100040
 800c020:	00100030 	.word	0x00100030
 800c024:	00100020 	.word	0x00100020

0800c028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a46      	ldr	r2, [pc, #280]	@ (800c1a4 <TIM_Base_SetConfig+0x12c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d013      	beq.n	800c0b8 <TIM_Base_SetConfig+0x40>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c096:	d00f      	beq.n	800c0b8 <TIM_Base_SetConfig+0x40>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a43      	ldr	r2, [pc, #268]	@ (800c1a8 <TIM_Base_SetConfig+0x130>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d00b      	beq.n	800c0b8 <TIM_Base_SetConfig+0x40>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a42      	ldr	r2, [pc, #264]	@ (800c1ac <TIM_Base_SetConfig+0x134>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d007      	beq.n	800c0b8 <TIM_Base_SetConfig+0x40>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a41      	ldr	r2, [pc, #260]	@ (800c1b0 <TIM_Base_SetConfig+0x138>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d003      	beq.n	800c0b8 <TIM_Base_SetConfig+0x40>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a40      	ldr	r2, [pc, #256]	@ (800c1b4 <TIM_Base_SetConfig+0x13c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d108      	bne.n	800c0ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a35      	ldr	r2, [pc, #212]	@ (800c1a4 <TIM_Base_SetConfig+0x12c>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d01f      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0d8:	d01b      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a32      	ldr	r2, [pc, #200]	@ (800c1a8 <TIM_Base_SetConfig+0x130>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d017      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a31      	ldr	r2, [pc, #196]	@ (800c1ac <TIM_Base_SetConfig+0x134>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d013      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a30      	ldr	r2, [pc, #192]	@ (800c1b0 <TIM_Base_SetConfig+0x138>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d00f      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c1b4 <TIM_Base_SetConfig+0x13c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00b      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a2e      	ldr	r2, [pc, #184]	@ (800c1b8 <TIM_Base_SetConfig+0x140>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d007      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a2d      	ldr	r2, [pc, #180]	@ (800c1bc <TIM_Base_SetConfig+0x144>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d003      	beq.n	800c112 <TIM_Base_SetConfig+0x9a>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a2c      	ldr	r2, [pc, #176]	@ (800c1c0 <TIM_Base_SetConfig+0x148>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d108      	bne.n	800c124 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4313      	orrs	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a16      	ldr	r2, [pc, #88]	@ (800c1a4 <TIM_Base_SetConfig+0x12c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00f      	beq.n	800c170 <TIM_Base_SetConfig+0xf8>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a18      	ldr	r2, [pc, #96]	@ (800c1b4 <TIM_Base_SetConfig+0x13c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00b      	beq.n	800c170 <TIM_Base_SetConfig+0xf8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a17      	ldr	r2, [pc, #92]	@ (800c1b8 <TIM_Base_SetConfig+0x140>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d007      	beq.n	800c170 <TIM_Base_SetConfig+0xf8>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a16      	ldr	r2, [pc, #88]	@ (800c1bc <TIM_Base_SetConfig+0x144>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d003      	beq.n	800c170 <TIM_Base_SetConfig+0xf8>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a15      	ldr	r2, [pc, #84]	@ (800c1c0 <TIM_Base_SetConfig+0x148>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d103      	bne.n	800c178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	691a      	ldr	r2, [r3, #16]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b01      	cmp	r3, #1
 800c188:	d105      	bne.n	800c196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	f023 0201 	bic.w	r2, r3, #1
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	611a      	str	r2, [r3, #16]
  }
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	40010000 	.word	0x40010000
 800c1a8:	40000400 	.word	0x40000400
 800c1ac:	40000800 	.word	0x40000800
 800c1b0:	40000c00 	.word	0x40000c00
 800c1b4:	40010400 	.word	0x40010400
 800c1b8:	40014000 	.word	0x40014000
 800c1bc:	40014400 	.word	0x40014400
 800c1c0:	40014800 	.word	0x40014800

0800c1c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	f023 0201 	bic.w	r2, r3, #1
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	4b37      	ldr	r3, [pc, #220]	@ (800c2cc <TIM_OC1_SetConfig+0x108>)
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	4313      	orrs	r3, r2
 800c204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f023 0302 	bic.w	r3, r3, #2
 800c20c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	4313      	orrs	r3, r2
 800c216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a2d      	ldr	r2, [pc, #180]	@ (800c2d0 <TIM_OC1_SetConfig+0x10c>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00f      	beq.n	800c240 <TIM_OC1_SetConfig+0x7c>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a2c      	ldr	r2, [pc, #176]	@ (800c2d4 <TIM_OC1_SetConfig+0x110>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d00b      	beq.n	800c240 <TIM_OC1_SetConfig+0x7c>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a2b      	ldr	r2, [pc, #172]	@ (800c2d8 <TIM_OC1_SetConfig+0x114>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d007      	beq.n	800c240 <TIM_OC1_SetConfig+0x7c>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a2a      	ldr	r2, [pc, #168]	@ (800c2dc <TIM_OC1_SetConfig+0x118>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d003      	beq.n	800c240 <TIM_OC1_SetConfig+0x7c>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a29      	ldr	r2, [pc, #164]	@ (800c2e0 <TIM_OC1_SetConfig+0x11c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d10c      	bne.n	800c25a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	f023 0308 	bic.w	r3, r3, #8
 800c246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	4313      	orrs	r3, r2
 800c250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f023 0304 	bic.w	r3, r3, #4
 800c258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d0 <TIM_OC1_SetConfig+0x10c>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d00f      	beq.n	800c282 <TIM_OC1_SetConfig+0xbe>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a1b      	ldr	r2, [pc, #108]	@ (800c2d4 <TIM_OC1_SetConfig+0x110>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d00b      	beq.n	800c282 <TIM_OC1_SetConfig+0xbe>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a1a      	ldr	r2, [pc, #104]	@ (800c2d8 <TIM_OC1_SetConfig+0x114>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d007      	beq.n	800c282 <TIM_OC1_SetConfig+0xbe>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a19      	ldr	r2, [pc, #100]	@ (800c2dc <TIM_OC1_SetConfig+0x118>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d003      	beq.n	800c282 <TIM_OC1_SetConfig+0xbe>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a18      	ldr	r2, [pc, #96]	@ (800c2e0 <TIM_OC1_SetConfig+0x11c>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d111      	bne.n	800c2a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	4313      	orrs	r3, r2
 800c29a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	621a      	str	r2, [r3, #32]
}
 800c2c0:	bf00      	nop
 800c2c2:	371c      	adds	r7, #28
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	fffeff8f 	.word	0xfffeff8f
 800c2d0:	40010000 	.word	0x40010000
 800c2d4:	40010400 	.word	0x40010400
 800c2d8:	40014000 	.word	0x40014000
 800c2dc:	40014400 	.word	0x40014400
 800c2e0:	40014800 	.word	0x40014800

0800c2e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	f023 0210 	bic.w	r2, r3, #16
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	4b34      	ldr	r3, [pc, #208]	@ (800c3e0 <TIM_OC2_SetConfig+0xfc>)
 800c310:	4013      	ands	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	021b      	lsls	r3, r3, #8
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4313      	orrs	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f023 0320 	bic.w	r3, r3, #32
 800c32e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	011b      	lsls	r3, r3, #4
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	4313      	orrs	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a29      	ldr	r2, [pc, #164]	@ (800c3e4 <TIM_OC2_SetConfig+0x100>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d003      	beq.n	800c34c <TIM_OC2_SetConfig+0x68>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a28      	ldr	r2, [pc, #160]	@ (800c3e8 <TIM_OC2_SetConfig+0x104>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d10d      	bne.n	800c368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3e4 <TIM_OC2_SetConfig+0x100>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00f      	beq.n	800c390 <TIM_OC2_SetConfig+0xac>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a1d      	ldr	r2, [pc, #116]	@ (800c3e8 <TIM_OC2_SetConfig+0x104>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d00b      	beq.n	800c390 <TIM_OC2_SetConfig+0xac>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a1c      	ldr	r2, [pc, #112]	@ (800c3ec <TIM_OC2_SetConfig+0x108>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d007      	beq.n	800c390 <TIM_OC2_SetConfig+0xac>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a1b      	ldr	r2, [pc, #108]	@ (800c3f0 <TIM_OC2_SetConfig+0x10c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d003      	beq.n	800c390 <TIM_OC2_SetConfig+0xac>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a1a      	ldr	r2, [pc, #104]	@ (800c3f4 <TIM_OC2_SetConfig+0x110>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d113      	bne.n	800c3b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c39e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	621a      	str	r2, [r3, #32]
}
 800c3d2:	bf00      	nop
 800c3d4:	371c      	adds	r7, #28
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	feff8fff 	.word	0xfeff8fff
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	40010400 	.word	0x40010400
 800c3ec:	40014000 	.word	0x40014000
 800c3f0:	40014400 	.word	0x40014400
 800c3f4:	40014800 	.word	0x40014800

0800c3f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	4b33      	ldr	r3, [pc, #204]	@ (800c4f0 <TIM_OC3_SetConfig+0xf8>)
 800c424:	4013      	ands	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f023 0303 	bic.w	r3, r3, #3
 800c42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	021b      	lsls	r3, r3, #8
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a28      	ldr	r2, [pc, #160]	@ (800c4f4 <TIM_OC3_SetConfig+0xfc>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d003      	beq.n	800c45e <TIM_OC3_SetConfig+0x66>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a27      	ldr	r2, [pc, #156]	@ (800c4f8 <TIM_OC3_SetConfig+0x100>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d10d      	bne.n	800c47a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	4313      	orrs	r3, r2
 800c470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f4 <TIM_OC3_SetConfig+0xfc>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00f      	beq.n	800c4a2 <TIM_OC3_SetConfig+0xaa>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f8 <TIM_OC3_SetConfig+0x100>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00b      	beq.n	800c4a2 <TIM_OC3_SetConfig+0xaa>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a1b      	ldr	r2, [pc, #108]	@ (800c4fc <TIM_OC3_SetConfig+0x104>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d007      	beq.n	800c4a2 <TIM_OC3_SetConfig+0xaa>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a1a      	ldr	r2, [pc, #104]	@ (800c500 <TIM_OC3_SetConfig+0x108>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d003      	beq.n	800c4a2 <TIM_OC3_SetConfig+0xaa>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a19      	ldr	r2, [pc, #100]	@ (800c504 <TIM_OC3_SetConfig+0x10c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d113      	bne.n	800c4ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	621a      	str	r2, [r3, #32]
}
 800c4e4:	bf00      	nop
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	fffeff8f 	.word	0xfffeff8f
 800c4f4:	40010000 	.word	0x40010000
 800c4f8:	40010400 	.word	0x40010400
 800c4fc:	40014000 	.word	0x40014000
 800c500:	40014400 	.word	0x40014400
 800c504:	40014800 	.word	0x40014800

0800c508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c508:	b480      	push	{r7}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4b24      	ldr	r3, [pc, #144]	@ (800c5c4 <TIM_OC4_SetConfig+0xbc>)
 800c534:	4013      	ands	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	031b      	lsls	r3, r3, #12
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a19      	ldr	r2, [pc, #100]	@ (800c5c8 <TIM_OC4_SetConfig+0xc0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d00f      	beq.n	800c588 <TIM_OC4_SetConfig+0x80>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a18      	ldr	r2, [pc, #96]	@ (800c5cc <TIM_OC4_SetConfig+0xc4>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00b      	beq.n	800c588 <TIM_OC4_SetConfig+0x80>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a17      	ldr	r2, [pc, #92]	@ (800c5d0 <TIM_OC4_SetConfig+0xc8>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d007      	beq.n	800c588 <TIM_OC4_SetConfig+0x80>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a16      	ldr	r2, [pc, #88]	@ (800c5d4 <TIM_OC4_SetConfig+0xcc>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d003      	beq.n	800c588 <TIM_OC4_SetConfig+0x80>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a15      	ldr	r2, [pc, #84]	@ (800c5d8 <TIM_OC4_SetConfig+0xd0>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d109      	bne.n	800c59c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c58e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	019b      	lsls	r3, r3, #6
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	4313      	orrs	r3, r2
 800c59a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	621a      	str	r2, [r3, #32]
}
 800c5b6:	bf00      	nop
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	feff8fff 	.word	0xfeff8fff
 800c5c8:	40010000 	.word	0x40010000
 800c5cc:	40010400 	.word	0x40010400
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40014400 	.word	0x40014400
 800c5d8:	40014800 	.word	0x40014800

0800c5dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	4b21      	ldr	r3, [pc, #132]	@ (800c68c <TIM_OC5_SetConfig+0xb0>)
 800c608:	4013      	ands	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	4313      	orrs	r3, r2
 800c614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c61c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	041b      	lsls	r3, r3, #16
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4313      	orrs	r3, r2
 800c628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a18      	ldr	r2, [pc, #96]	@ (800c690 <TIM_OC5_SetConfig+0xb4>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d00f      	beq.n	800c652 <TIM_OC5_SetConfig+0x76>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a17      	ldr	r2, [pc, #92]	@ (800c694 <TIM_OC5_SetConfig+0xb8>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d00b      	beq.n	800c652 <TIM_OC5_SetConfig+0x76>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a16      	ldr	r2, [pc, #88]	@ (800c698 <TIM_OC5_SetConfig+0xbc>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d007      	beq.n	800c652 <TIM_OC5_SetConfig+0x76>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a15      	ldr	r2, [pc, #84]	@ (800c69c <TIM_OC5_SetConfig+0xc0>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d003      	beq.n	800c652 <TIM_OC5_SetConfig+0x76>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a14      	ldr	r2, [pc, #80]	@ (800c6a0 <TIM_OC5_SetConfig+0xc4>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d109      	bne.n	800c666 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	021b      	lsls	r3, r3, #8
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	4313      	orrs	r3, r2
 800c664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	621a      	str	r2, [r3, #32]
}
 800c680:	bf00      	nop
 800c682:	371c      	adds	r7, #28
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	fffeff8f 	.word	0xfffeff8f
 800c690:	40010000 	.word	0x40010000
 800c694:	40010400 	.word	0x40010400
 800c698:	40014000 	.word	0x40014000
 800c69c:	40014400 	.word	0x40014400
 800c6a0:	40014800 	.word	0x40014800

0800c6a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a1b      	ldr	r3, [r3, #32]
 800c6b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4b22      	ldr	r3, [pc, #136]	@ (800c758 <TIM_OC6_SetConfig+0xb4>)
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	021b      	lsls	r3, r3, #8
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	051b      	lsls	r3, r3, #20
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a19      	ldr	r2, [pc, #100]	@ (800c75c <TIM_OC6_SetConfig+0xb8>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00f      	beq.n	800c71c <TIM_OC6_SetConfig+0x78>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a18      	ldr	r2, [pc, #96]	@ (800c760 <TIM_OC6_SetConfig+0xbc>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d00b      	beq.n	800c71c <TIM_OC6_SetConfig+0x78>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a17      	ldr	r2, [pc, #92]	@ (800c764 <TIM_OC6_SetConfig+0xc0>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d007      	beq.n	800c71c <TIM_OC6_SetConfig+0x78>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a16      	ldr	r2, [pc, #88]	@ (800c768 <TIM_OC6_SetConfig+0xc4>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d003      	beq.n	800c71c <TIM_OC6_SetConfig+0x78>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a15      	ldr	r2, [pc, #84]	@ (800c76c <TIM_OC6_SetConfig+0xc8>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d109      	bne.n	800c730 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	029b      	lsls	r3, r3, #10
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	621a      	str	r2, [r3, #32]
}
 800c74a:	bf00      	nop
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	feff8fff 	.word	0xfeff8fff
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	f023 0201 	bic.w	r2, r3, #1
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c79a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	011b      	lsls	r3, r3, #4
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f023 030a 	bic.w	r3, r3, #10
 800c7ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	621a      	str	r2, [r3, #32]
}
 800c7c2:	bf00      	nop
 800c7c4:	371c      	adds	r7, #28
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b087      	sub	sp, #28
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	60f8      	str	r0, [r7, #12]
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	f023 0210 	bic.w	r2, r3, #16
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	031b      	lsls	r3, r3, #12
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	4313      	orrs	r3, r2
 800c802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c80a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	4313      	orrs	r3, r2
 800c814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	621a      	str	r2, [r3, #32]
}
 800c822:	bf00      	nop
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
	...

0800c830 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4b09      	ldr	r3, [pc, #36]	@ (800c868 <TIM_ITRx_SetConfig+0x38>)
 800c844:	4013      	ands	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	f043 0307 	orr.w	r3, r3, #7
 800c852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	609a      	str	r2, [r3, #8]
}
 800c85a:	bf00      	nop
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	ffcfff8f 	.word	0xffcfff8f

0800c86c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
 800c878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	021a      	lsls	r2, r3, #8
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	431a      	orrs	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	4313      	orrs	r3, r2
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	609a      	str	r2, [r3, #8]
}
 800c8a0:	bf00      	nop
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d101      	bne.n	800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e06d      	b.n	800c9a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a30      	ldr	r2, [pc, #192]	@ (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d004      	beq.n	800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a2f      	ldr	r2, [pc, #188]	@ (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d108      	bne.n	800c90a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c8fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	4313      	orrs	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c910:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4313      	orrs	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a20      	ldr	r2, [pc, #128]	@ (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d022      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c936:	d01d      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d018      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d013      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a1a      	ldr	r2, [pc, #104]	@ (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d00e      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a15      	ldr	r2, [pc, #84]	@ (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d009      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a16      	ldr	r2, [pc, #88]	@ (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d004      	beq.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a15      	ldr	r2, [pc, #84]	@ (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d10c      	bne.n	800c98e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c97a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	4313      	orrs	r3, r2
 800c984:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	40010000 	.word	0x40010000
 800c9b0:	40010400 	.word	0x40010400
 800c9b4:	40000400 	.word	0x40000400
 800c9b8:	40000800 	.word	0x40000800
 800c9bc:	40000c00 	.word	0x40000c00
 800c9c0:	40001800 	.word	0x40001800
 800c9c4:	40014000 	.word	0x40014000

0800c9c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e065      	b.n	800cab0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	041b      	lsls	r3, r3, #16
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a16      	ldr	r2, [pc, #88]	@ (800cabc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d004      	beq.n	800ca72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a14      	ldr	r2, [pc, #80]	@ (800cac0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d115      	bne.n	800ca9e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7c:	051b      	lsls	r3, r3, #20
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	40010000 	.word	0x40010000
 800cac0:	40010400 	.word	0x40010400

0800cac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e042      	b.n	800cb98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d106      	bne.n	800cb2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7f5 faf9 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2224      	movs	r2, #36	@ 0x24
 800cb2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f022 0201 	bic.w	r2, r2, #1
 800cb40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 f9b6 	bl	800debc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fc4b 	bl	800d3ec <UART_SetConfig>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e01b      	b.n	800cb98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	689a      	ldr	r2, [r3, #8]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f042 0201 	orr.w	r2, r2, #1
 800cb8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f001 fa35 	bl	800e000 <UART_CheckIdleState>
 800cb96:	4603      	mov	r3, r0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08a      	sub	sp, #40	@ 0x28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	d137      	bne.n	800cc28 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <HAL_UART_Receive_IT+0x24>
 800cbbe:	88fb      	ldrh	r3, [r7, #6]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e030      	b.n	800cc2a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a18      	ldr	r2, [pc, #96]	@ (800cc34 <HAL_UART_Receive_IT+0x94>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d01f      	beq.n	800cc18 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d018      	beq.n	800cc18 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	613b      	str	r3, [r7, #16]
   return(result);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cbfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc04:	623b      	str	r3, [r7, #32]
 800cc06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	69f9      	ldr	r1, [r7, #28]
 800cc0a:	6a3a      	ldr	r2, [r7, #32]
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e6      	bne.n	800cbe6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f001 fb06 	bl	800e230 <UART_Start_Receive_IT>
 800cc24:	4603      	mov	r3, r0
 800cc26:	e000      	b.n	800cc2a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cc28:	2302      	movs	r3, #2
  }
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3728      	adds	r7, #40	@ 0x28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	58000c00 	.word	0x58000c00

0800cc38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b0ba      	sub	sp, #232	@ 0xe8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cc62:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cc66:	4013      	ands	r3, r2
 800cc68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cc6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d11b      	bne.n	800ccac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc78:	f003 0320 	and.w	r3, r3, #32
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d015      	beq.n	800ccac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc84:	f003 0320 	and.w	r3, r3, #32
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d105      	bne.n	800cc98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d009      	beq.n	800ccac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 8377 	beq.w	800d390 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	4798      	blx	r3
      }
      return;
 800ccaa:	e371      	b.n	800d390 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ccac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 8123 	beq.w	800cefc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ccb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ccba:	4b8d      	ldr	r3, [pc, #564]	@ (800cef0 <HAL_UART_IRQHandler+0x2b8>)
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d106      	bne.n	800ccd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ccc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ccc6:	4b8b      	ldr	r3, [pc, #556]	@ (800cef4 <HAL_UART_IRQHandler+0x2bc>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8116 	beq.w	800cefc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ccd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d011      	beq.n	800cd00 <HAL_UART_IRQHandler+0xc8>
 800ccdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2201      	movs	r2, #1
 800ccee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccf6:	f043 0201 	orr.w	r2, r3, #1
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d011      	beq.n	800cd30 <HAL_UART_IRQHandler+0xf8>
 800cd0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00b      	beq.n	800cd30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd26:	f043 0204 	orr.w	r2, r3, #4
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd34:	f003 0304 	and.w	r3, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d011      	beq.n	800cd60 <HAL_UART_IRQHandler+0x128>
 800cd3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00b      	beq.n	800cd60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd56:	f043 0202 	orr.w	r2, r3, #2
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd64:	f003 0308 	and.w	r3, r3, #8
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d017      	beq.n	800cd9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd70:	f003 0320 	and.w	r3, r3, #32
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d105      	bne.n	800cd84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cd78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cd7c:	4b5c      	ldr	r3, [pc, #368]	@ (800cef0 <HAL_UART_IRQHandler+0x2b8>)
 800cd7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2208      	movs	r2, #8
 800cd8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd92:	f043 0208 	orr.w	r2, r3, #8
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cda0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d012      	beq.n	800cdce <HAL_UART_IRQHandler+0x196>
 800cda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00c      	beq.n	800cdce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdc4:	f043 0220 	orr.w	r2, r3, #32
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 82dd 	beq.w	800d394 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdde:	f003 0320 	and.w	r3, r3, #32
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d013      	beq.n	800ce0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cde6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdea:	f003 0320 	and.w	r3, r3, #32
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d007      	beq.n	800ce0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce22:	2b40      	cmp	r3, #64	@ 0x40
 800ce24:	d005      	beq.n	800ce32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d054      	beq.n	800cedc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f001 fb1e 	bl	800e474 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce42:	2b40      	cmp	r3, #64	@ 0x40
 800ce44:	d146      	bne.n	800ced4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce54:	e853 3f00 	ldrex	r3, [r3]
 800ce58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ce5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3308      	adds	r3, #8
 800ce6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ce72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ce76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ce7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ce8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1d9      	bne.n	800ce46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d017      	beq.n	800cecc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cea2:	4a15      	ldr	r2, [pc, #84]	@ (800cef8 <HAL_UART_IRQHandler+0x2c0>)
 800cea4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f6 fc2b 	bl	8003708 <HAL_DMA_Abort_IT>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d019      	beq.n	800ceec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cec6:	4610      	mov	r0, r2
 800cec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceca:	e00f      	b.n	800ceec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fa77 	bl	800d3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ced2:	e00b      	b.n	800ceec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fa73 	bl	800d3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceda:	e007      	b.n	800ceec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fa6f 	bl	800d3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ceea:	e253      	b.n	800d394 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceec:	bf00      	nop
    return;
 800ceee:	e251      	b.n	800d394 <HAL_UART_IRQHandler+0x75c>
 800cef0:	10000001 	.word	0x10000001
 800cef4:	04000120 	.word	0x04000120
 800cef8:	0800e541 	.word	0x0800e541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	f040 81e7 	bne.w	800d2d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf0a:	f003 0310 	and.w	r3, r3, #16
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 81e0 	beq.w	800d2d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf18:	f003 0310 	and.w	r3, r3, #16
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 81d9 	beq.w	800d2d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2210      	movs	r2, #16
 800cf28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf34:	2b40      	cmp	r3, #64	@ 0x40
 800cf36:	f040 8151 	bne.w	800d1dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a96      	ldr	r2, [pc, #600]	@ (800d19c <HAL_UART_IRQHandler+0x564>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d068      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a93      	ldr	r2, [pc, #588]	@ (800d1a0 <HAL_UART_IRQHandler+0x568>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d061      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a91      	ldr	r2, [pc, #580]	@ (800d1a4 <HAL_UART_IRQHandler+0x56c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d05a      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a8e      	ldr	r2, [pc, #568]	@ (800d1a8 <HAL_UART_IRQHandler+0x570>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d053      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a8c      	ldr	r2, [pc, #560]	@ (800d1ac <HAL_UART_IRQHandler+0x574>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d04c      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a89      	ldr	r2, [pc, #548]	@ (800d1b0 <HAL_UART_IRQHandler+0x578>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d045      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a87      	ldr	r2, [pc, #540]	@ (800d1b4 <HAL_UART_IRQHandler+0x57c>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d03e      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a84      	ldr	r2, [pc, #528]	@ (800d1b8 <HAL_UART_IRQHandler+0x580>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d037      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a82      	ldr	r2, [pc, #520]	@ (800d1bc <HAL_UART_IRQHandler+0x584>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d030      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a7f      	ldr	r2, [pc, #508]	@ (800d1c0 <HAL_UART_IRQHandler+0x588>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d029      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a7d      	ldr	r2, [pc, #500]	@ (800d1c4 <HAL_UART_IRQHandler+0x58c>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d022      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a7a      	ldr	r2, [pc, #488]	@ (800d1c8 <HAL_UART_IRQHandler+0x590>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d01b      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a78      	ldr	r2, [pc, #480]	@ (800d1cc <HAL_UART_IRQHandler+0x594>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d014      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a75      	ldr	r2, [pc, #468]	@ (800d1d0 <HAL_UART_IRQHandler+0x598>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d00d      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a73      	ldr	r2, [pc, #460]	@ (800d1d4 <HAL_UART_IRQHandler+0x59c>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d006      	beq.n	800d01a <HAL_UART_IRQHandler+0x3e2>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a70      	ldr	r2, [pc, #448]	@ (800d1d8 <HAL_UART_IRQHandler+0x5a0>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d106      	bne.n	800d028 <HAL_UART_IRQHandler+0x3f0>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	b29b      	uxth	r3, r3
 800d026:	e005      	b.n	800d034 <HAL_UART_IRQHandler+0x3fc>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b29b      	uxth	r3, r3
 800d034:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 81ab 	beq.w	800d398 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d048:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d04c:	429a      	cmp	r2, r3
 800d04e:	f080 81a3 	bcs.w	800d398 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d068:	f000 8087 	beq.w	800d17a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d078:	e853 3f00 	ldrex	r3, [r3]
 800d07c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d09a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1da      	bne.n	800d06c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3308      	adds	r3, #8
 800d0bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0c0:	e853 3f00 	ldrex	r3, [r3]
 800d0c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d0c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0c8:	f023 0301 	bic.w	r3, r3, #1
 800d0cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d0da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d0de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d0e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d0e6:	e841 2300 	strex	r3, r2, [r1]
 800d0ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d0ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1e1      	bne.n	800d0b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0fc:	e853 3f00 	ldrex	r3, [r3]
 800d100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3308      	adds	r3, #8
 800d112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d116:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d118:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d11c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d11e:	e841 2300 	strex	r3, r2, [r1]
 800d122:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1e3      	bne.n	800d0f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2220      	movs	r2, #32
 800d12e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d140:	e853 3f00 	ldrex	r3, [r3]
 800d144:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d148:	f023 0310 	bic.w	r3, r3, #16
 800d14c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d15a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d15c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d162:	e841 2300 	strex	r3, r2, [r1]
 800d166:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1e4      	bne.n	800d138 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d174:	4618      	mov	r0, r3
 800d176:	f7f5 ffa9 	bl	80030cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2202      	movs	r2, #2
 800d17e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	b29b      	uxth	r3, r3
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f91d 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d19a:	e0fd      	b.n	800d398 <HAL_UART_IRQHandler+0x760>
 800d19c:	40020010 	.word	0x40020010
 800d1a0:	40020028 	.word	0x40020028
 800d1a4:	40020040 	.word	0x40020040
 800d1a8:	40020058 	.word	0x40020058
 800d1ac:	40020070 	.word	0x40020070
 800d1b0:	40020088 	.word	0x40020088
 800d1b4:	400200a0 	.word	0x400200a0
 800d1b8:	400200b8 	.word	0x400200b8
 800d1bc:	40020410 	.word	0x40020410
 800d1c0:	40020428 	.word	0x40020428
 800d1c4:	40020440 	.word	0x40020440
 800d1c8:	40020458 	.word	0x40020458
 800d1cc:	40020470 	.word	0x40020470
 800d1d0:	40020488 	.word	0x40020488
 800d1d4:	400204a0 	.word	0x400204a0
 800d1d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 80cf 	beq.w	800d39c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d202:	2b00      	cmp	r3, #0
 800d204:	f000 80ca 	beq.w	800d39c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d21c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	461a      	mov	r2, r3
 800d226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d22c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d232:	e841 2300 	strex	r3, r2, [r1]
 800d236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1e4      	bne.n	800d208 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3308      	adds	r3, #8
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	623b      	str	r3, [r7, #32]
   return(result);
 800d24e:	6a3a      	ldr	r2, [r7, #32]
 800d250:	4b55      	ldr	r3, [pc, #340]	@ (800d3a8 <HAL_UART_IRQHandler+0x770>)
 800d252:	4013      	ands	r3, r2
 800d254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3308      	adds	r3, #8
 800d25e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d262:	633a      	str	r2, [r7, #48]	@ 0x30
 800d264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26a:	e841 2300 	strex	r3, r2, [r1]
 800d26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e3      	bne.n	800d23e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2220      	movs	r2, #32
 800d27a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	60fb      	str	r3, [r7, #12]
   return(result);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0310 	bic.w	r3, r3, #16
 800d29e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d2ac:	61fb      	str	r3, [r7, #28]
 800d2ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	69b9      	ldr	r1, [r7, #24]
 800d2b2:	69fa      	ldr	r2, [r7, #28]
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e4      	bne.n	800d28a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f881 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2d2:	e063      	b.n	800d39c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00e      	beq.n	800d2fe <HAL_UART_IRQHandler+0x6c6>
 800d2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d008      	beq.n	800d2fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 fe80 	bl	800effc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2fc:	e051      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d306:	2b00      	cmp	r3, #0
 800d308:	d014      	beq.n	800d334 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d312:	2b00      	cmp	r3, #0
 800d314:	d105      	bne.n	800d322 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d31a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d008      	beq.n	800d334 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d326:	2b00      	cmp	r3, #0
 800d328:	d03a      	beq.n	800d3a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	4798      	blx	r3
    }
    return;
 800d332:	e035      	b.n	800d3a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d009      	beq.n	800d354 <HAL_UART_IRQHandler+0x71c>
 800d340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f90d 	bl	800e56c <UART_EndTransmit_IT>
    return;
 800d352:	e026      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d009      	beq.n	800d374 <HAL_UART_IRQHandler+0x73c>
 800d360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 fe59 	bl	800f024 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d372:	e016      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d010      	beq.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
 800d380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d384:	2b00      	cmp	r3, #0
 800d386:	da0c      	bge.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f001 fe41 	bl	800f010 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d38e:	e008      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d390:	bf00      	nop
 800d392:	e006      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800d394:	bf00      	nop
 800d396:	e004      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d398:	bf00      	nop
 800d39a:	e002      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d39c:	bf00      	nop
 800d39e:	e000      	b.n	800d3a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800d3a0:	bf00      	nop
  }
}
 800d3a2:	37e8      	adds	r7, #232	@ 0xe8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	effffffe 	.word	0xeffffffe

0800d3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d3c8:	bf00      	nop
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3f0:	b092      	sub	sp, #72	@ 0x48
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	431a      	orrs	r2, r3
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	431a      	orrs	r2, r3
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	4313      	orrs	r3, r2
 800d412:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	4bbe      	ldr	r3, [pc, #760]	@ (800d714 <UART_SetConfig+0x328>)
 800d41c:	4013      	ands	r3, r2
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	6812      	ldr	r2, [r2, #0]
 800d422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d424:	430b      	orrs	r3, r1
 800d426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	68da      	ldr	r2, [r3, #12]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4ab3      	ldr	r2, [pc, #716]	@ (800d718 <UART_SetConfig+0x32c>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d004      	beq.n	800d458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d454:	4313      	orrs	r3, r2
 800d456:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	689a      	ldr	r2, [r3, #8]
 800d45e:	4baf      	ldr	r3, [pc, #700]	@ (800d71c <UART_SetConfig+0x330>)
 800d460:	4013      	ands	r3, r2
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	6812      	ldr	r2, [r2, #0]
 800d466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d468:	430b      	orrs	r3, r1
 800d46a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d472:	f023 010f 	bic.w	r1, r3, #15
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	430a      	orrs	r2, r1
 800d480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4aa6      	ldr	r2, [pc, #664]	@ (800d720 <UART_SetConfig+0x334>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d177      	bne.n	800d57c <UART_SetConfig+0x190>
 800d48c:	4ba5      	ldr	r3, [pc, #660]	@ (800d724 <UART_SetConfig+0x338>)
 800d48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d494:	2b28      	cmp	r3, #40	@ 0x28
 800d496:	d86d      	bhi.n	800d574 <UART_SetConfig+0x188>
 800d498:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a0 <UART_SetConfig+0xb4>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d545 	.word	0x0800d545
 800d4a4:	0800d575 	.word	0x0800d575
 800d4a8:	0800d575 	.word	0x0800d575
 800d4ac:	0800d575 	.word	0x0800d575
 800d4b0:	0800d575 	.word	0x0800d575
 800d4b4:	0800d575 	.word	0x0800d575
 800d4b8:	0800d575 	.word	0x0800d575
 800d4bc:	0800d575 	.word	0x0800d575
 800d4c0:	0800d54d 	.word	0x0800d54d
 800d4c4:	0800d575 	.word	0x0800d575
 800d4c8:	0800d575 	.word	0x0800d575
 800d4cc:	0800d575 	.word	0x0800d575
 800d4d0:	0800d575 	.word	0x0800d575
 800d4d4:	0800d575 	.word	0x0800d575
 800d4d8:	0800d575 	.word	0x0800d575
 800d4dc:	0800d575 	.word	0x0800d575
 800d4e0:	0800d555 	.word	0x0800d555
 800d4e4:	0800d575 	.word	0x0800d575
 800d4e8:	0800d575 	.word	0x0800d575
 800d4ec:	0800d575 	.word	0x0800d575
 800d4f0:	0800d575 	.word	0x0800d575
 800d4f4:	0800d575 	.word	0x0800d575
 800d4f8:	0800d575 	.word	0x0800d575
 800d4fc:	0800d575 	.word	0x0800d575
 800d500:	0800d55d 	.word	0x0800d55d
 800d504:	0800d575 	.word	0x0800d575
 800d508:	0800d575 	.word	0x0800d575
 800d50c:	0800d575 	.word	0x0800d575
 800d510:	0800d575 	.word	0x0800d575
 800d514:	0800d575 	.word	0x0800d575
 800d518:	0800d575 	.word	0x0800d575
 800d51c:	0800d575 	.word	0x0800d575
 800d520:	0800d565 	.word	0x0800d565
 800d524:	0800d575 	.word	0x0800d575
 800d528:	0800d575 	.word	0x0800d575
 800d52c:	0800d575 	.word	0x0800d575
 800d530:	0800d575 	.word	0x0800d575
 800d534:	0800d575 	.word	0x0800d575
 800d538:	0800d575 	.word	0x0800d575
 800d53c:	0800d575 	.word	0x0800d575
 800d540:	0800d56d 	.word	0x0800d56d
 800d544:	2301      	movs	r3, #1
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e222      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d54c:	2304      	movs	r3, #4
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d552:	e21e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d554:	2308      	movs	r3, #8
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d55a:	e21a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d55c:	2310      	movs	r3, #16
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d562:	e216      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d564:	2320      	movs	r3, #32
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d56a:	e212      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d56c:	2340      	movs	r3, #64	@ 0x40
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d572:	e20e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d574:	2380      	movs	r3, #128	@ 0x80
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57a:	e20a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a69      	ldr	r2, [pc, #420]	@ (800d728 <UART_SetConfig+0x33c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d130      	bne.n	800d5e8 <UART_SetConfig+0x1fc>
 800d586:	4b67      	ldr	r3, [pc, #412]	@ (800d724 <UART_SetConfig+0x338>)
 800d588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d58a:	f003 0307 	and.w	r3, r3, #7
 800d58e:	2b05      	cmp	r3, #5
 800d590:	d826      	bhi.n	800d5e0 <UART_SetConfig+0x1f4>
 800d592:	a201      	add	r2, pc, #4	@ (adr r2, 800d598 <UART_SetConfig+0x1ac>)
 800d594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d598:	0800d5b1 	.word	0x0800d5b1
 800d59c:	0800d5b9 	.word	0x0800d5b9
 800d5a0:	0800d5c1 	.word	0x0800d5c1
 800d5a4:	0800d5c9 	.word	0x0800d5c9
 800d5a8:	0800d5d1 	.word	0x0800d5d1
 800d5ac:	0800d5d9 	.word	0x0800d5d9
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e1ec      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5b8:	2304      	movs	r3, #4
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e1e8      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5c0:	2308      	movs	r3, #8
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e1e4      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5c8:	2310      	movs	r3, #16
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e1e0      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5d0:	2320      	movs	r3, #32
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5d6:	e1dc      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5d8:	2340      	movs	r3, #64	@ 0x40
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5de:	e1d8      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5e0:	2380      	movs	r3, #128	@ 0x80
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e6:	e1d4      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a4f      	ldr	r2, [pc, #316]	@ (800d72c <UART_SetConfig+0x340>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d130      	bne.n	800d654 <UART_SetConfig+0x268>
 800d5f2:	4b4c      	ldr	r3, [pc, #304]	@ (800d724 <UART_SetConfig+0x338>)
 800d5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	2b05      	cmp	r3, #5
 800d5fc:	d826      	bhi.n	800d64c <UART_SetConfig+0x260>
 800d5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d604 <UART_SetConfig+0x218>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d61d 	.word	0x0800d61d
 800d608:	0800d625 	.word	0x0800d625
 800d60c:	0800d62d 	.word	0x0800d62d
 800d610:	0800d635 	.word	0x0800d635
 800d614:	0800d63d 	.word	0x0800d63d
 800d618:	0800d645 	.word	0x0800d645
 800d61c:	2300      	movs	r3, #0
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e1b6      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d624:	2304      	movs	r3, #4
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e1b2      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d62c:	2308      	movs	r3, #8
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e1ae      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d634:	2310      	movs	r3, #16
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e1aa      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d63c:	2320      	movs	r3, #32
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d642:	e1a6      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d644:	2340      	movs	r3, #64	@ 0x40
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e1a2      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d64c:	2380      	movs	r3, #128	@ 0x80
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e19e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a35      	ldr	r2, [pc, #212]	@ (800d730 <UART_SetConfig+0x344>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d130      	bne.n	800d6c0 <UART_SetConfig+0x2d4>
 800d65e:	4b31      	ldr	r3, [pc, #196]	@ (800d724 <UART_SetConfig+0x338>)
 800d660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	2b05      	cmp	r3, #5
 800d668:	d826      	bhi.n	800d6b8 <UART_SetConfig+0x2cc>
 800d66a:	a201      	add	r2, pc, #4	@ (adr r2, 800d670 <UART_SetConfig+0x284>)
 800d66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d670:	0800d689 	.word	0x0800d689
 800d674:	0800d691 	.word	0x0800d691
 800d678:	0800d699 	.word	0x0800d699
 800d67c:	0800d6a1 	.word	0x0800d6a1
 800d680:	0800d6a9 	.word	0x0800d6a9
 800d684:	0800d6b1 	.word	0x0800d6b1
 800d688:	2300      	movs	r3, #0
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e180      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d690:	2304      	movs	r3, #4
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d696:	e17c      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d698:	2308      	movs	r3, #8
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69e:	e178      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6a0:	2310      	movs	r3, #16
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a6:	e174      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6a8:	2320      	movs	r3, #32
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ae:	e170      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6b0:	2340      	movs	r3, #64	@ 0x40
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6b6:	e16c      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6b8:	2380      	movs	r3, #128	@ 0x80
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6be:	e168      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800d734 <UART_SetConfig+0x348>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d142      	bne.n	800d750 <UART_SetConfig+0x364>
 800d6ca:	4b16      	ldr	r3, [pc, #88]	@ (800d724 <UART_SetConfig+0x338>)
 800d6cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ce:	f003 0307 	and.w	r3, r3, #7
 800d6d2:	2b05      	cmp	r3, #5
 800d6d4:	d838      	bhi.n	800d748 <UART_SetConfig+0x35c>
 800d6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6dc <UART_SetConfig+0x2f0>)
 800d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6dc:	0800d6f5 	.word	0x0800d6f5
 800d6e0:	0800d6fd 	.word	0x0800d6fd
 800d6e4:	0800d705 	.word	0x0800d705
 800d6e8:	0800d70d 	.word	0x0800d70d
 800d6ec:	0800d739 	.word	0x0800d739
 800d6f0:	0800d741 	.word	0x0800d741
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fa:	e14a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d6fc:	2304      	movs	r3, #4
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d702:	e146      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d704:	2308      	movs	r3, #8
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70a:	e142      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d70c:	2310      	movs	r3, #16
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e13e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d714:	cfff69f3 	.word	0xcfff69f3
 800d718:	58000c00 	.word	0x58000c00
 800d71c:	11fff4ff 	.word	0x11fff4ff
 800d720:	40011000 	.word	0x40011000
 800d724:	58024400 	.word	0x58024400
 800d728:	40004400 	.word	0x40004400
 800d72c:	40004800 	.word	0x40004800
 800d730:	40004c00 	.word	0x40004c00
 800d734:	40005000 	.word	0x40005000
 800d738:	2320      	movs	r3, #32
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73e:	e128      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d740:	2340      	movs	r3, #64	@ 0x40
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d746:	e124      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d748:	2380      	movs	r3, #128	@ 0x80
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74e:	e120      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4acb      	ldr	r2, [pc, #812]	@ (800da84 <UART_SetConfig+0x698>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d176      	bne.n	800d848 <UART_SetConfig+0x45c>
 800d75a:	4bcb      	ldr	r3, [pc, #812]	@ (800da88 <UART_SetConfig+0x69c>)
 800d75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d75e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d762:	2b28      	cmp	r3, #40	@ 0x28
 800d764:	d86c      	bhi.n	800d840 <UART_SetConfig+0x454>
 800d766:	a201      	add	r2, pc, #4	@ (adr r2, 800d76c <UART_SetConfig+0x380>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d811 	.word	0x0800d811
 800d770:	0800d841 	.word	0x0800d841
 800d774:	0800d841 	.word	0x0800d841
 800d778:	0800d841 	.word	0x0800d841
 800d77c:	0800d841 	.word	0x0800d841
 800d780:	0800d841 	.word	0x0800d841
 800d784:	0800d841 	.word	0x0800d841
 800d788:	0800d841 	.word	0x0800d841
 800d78c:	0800d819 	.word	0x0800d819
 800d790:	0800d841 	.word	0x0800d841
 800d794:	0800d841 	.word	0x0800d841
 800d798:	0800d841 	.word	0x0800d841
 800d79c:	0800d841 	.word	0x0800d841
 800d7a0:	0800d841 	.word	0x0800d841
 800d7a4:	0800d841 	.word	0x0800d841
 800d7a8:	0800d841 	.word	0x0800d841
 800d7ac:	0800d821 	.word	0x0800d821
 800d7b0:	0800d841 	.word	0x0800d841
 800d7b4:	0800d841 	.word	0x0800d841
 800d7b8:	0800d841 	.word	0x0800d841
 800d7bc:	0800d841 	.word	0x0800d841
 800d7c0:	0800d841 	.word	0x0800d841
 800d7c4:	0800d841 	.word	0x0800d841
 800d7c8:	0800d841 	.word	0x0800d841
 800d7cc:	0800d829 	.word	0x0800d829
 800d7d0:	0800d841 	.word	0x0800d841
 800d7d4:	0800d841 	.word	0x0800d841
 800d7d8:	0800d841 	.word	0x0800d841
 800d7dc:	0800d841 	.word	0x0800d841
 800d7e0:	0800d841 	.word	0x0800d841
 800d7e4:	0800d841 	.word	0x0800d841
 800d7e8:	0800d841 	.word	0x0800d841
 800d7ec:	0800d831 	.word	0x0800d831
 800d7f0:	0800d841 	.word	0x0800d841
 800d7f4:	0800d841 	.word	0x0800d841
 800d7f8:	0800d841 	.word	0x0800d841
 800d7fc:	0800d841 	.word	0x0800d841
 800d800:	0800d841 	.word	0x0800d841
 800d804:	0800d841 	.word	0x0800d841
 800d808:	0800d841 	.word	0x0800d841
 800d80c:	0800d839 	.word	0x0800d839
 800d810:	2301      	movs	r3, #1
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d816:	e0bc      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d818:	2304      	movs	r3, #4
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81e:	e0b8      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d820:	2308      	movs	r3, #8
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e0b4      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d828:	2310      	movs	r3, #16
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e0b0      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d830:	2320      	movs	r3, #32
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e0ac      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d838:	2340      	movs	r3, #64	@ 0x40
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e0a8      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d840:	2380      	movs	r3, #128	@ 0x80
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e0a4      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a8f      	ldr	r2, [pc, #572]	@ (800da8c <UART_SetConfig+0x6a0>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d130      	bne.n	800d8b4 <UART_SetConfig+0x4c8>
 800d852:	4b8d      	ldr	r3, [pc, #564]	@ (800da88 <UART_SetConfig+0x69c>)
 800d854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d856:	f003 0307 	and.w	r3, r3, #7
 800d85a:	2b05      	cmp	r3, #5
 800d85c:	d826      	bhi.n	800d8ac <UART_SetConfig+0x4c0>
 800d85e:	a201      	add	r2, pc, #4	@ (adr r2, 800d864 <UART_SetConfig+0x478>)
 800d860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d864:	0800d87d 	.word	0x0800d87d
 800d868:	0800d885 	.word	0x0800d885
 800d86c:	0800d88d 	.word	0x0800d88d
 800d870:	0800d895 	.word	0x0800d895
 800d874:	0800d89d 	.word	0x0800d89d
 800d878:	0800d8a5 	.word	0x0800d8a5
 800d87c:	2300      	movs	r3, #0
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d882:	e086      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d884:	2304      	movs	r3, #4
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88a:	e082      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d88c:	2308      	movs	r3, #8
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e07e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d894:	2310      	movs	r3, #16
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e07a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d89c:	2320      	movs	r3, #32
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e076      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d8a4:	2340      	movs	r3, #64	@ 0x40
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e072      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d8ac:	2380      	movs	r3, #128	@ 0x80
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e06e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a75      	ldr	r2, [pc, #468]	@ (800da90 <UART_SetConfig+0x6a4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d130      	bne.n	800d920 <UART_SetConfig+0x534>
 800d8be:	4b72      	ldr	r3, [pc, #456]	@ (800da88 <UART_SetConfig+0x69c>)
 800d8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8c2:	f003 0307 	and.w	r3, r3, #7
 800d8c6:	2b05      	cmp	r3, #5
 800d8c8:	d826      	bhi.n	800d918 <UART_SetConfig+0x52c>
 800d8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d8d0 <UART_SetConfig+0x4e4>)
 800d8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d0:	0800d8e9 	.word	0x0800d8e9
 800d8d4:	0800d8f1 	.word	0x0800d8f1
 800d8d8:	0800d8f9 	.word	0x0800d8f9
 800d8dc:	0800d901 	.word	0x0800d901
 800d8e0:	0800d909 	.word	0x0800d909
 800d8e4:	0800d911 	.word	0x0800d911
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e050      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e04c      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d8f8:	2308      	movs	r3, #8
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e048      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d900:	2310      	movs	r3, #16
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e044      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d908:	2320      	movs	r3, #32
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e040      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d910:	2340      	movs	r3, #64	@ 0x40
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e03c      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d918:	2380      	movs	r3, #128	@ 0x80
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e038      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a5b      	ldr	r2, [pc, #364]	@ (800da94 <UART_SetConfig+0x6a8>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d130      	bne.n	800d98c <UART_SetConfig+0x5a0>
 800d92a:	4b57      	ldr	r3, [pc, #348]	@ (800da88 <UART_SetConfig+0x69c>)
 800d92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	2b05      	cmp	r3, #5
 800d934:	d826      	bhi.n	800d984 <UART_SetConfig+0x598>
 800d936:	a201      	add	r2, pc, #4	@ (adr r2, 800d93c <UART_SetConfig+0x550>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d955 	.word	0x0800d955
 800d940:	0800d95d 	.word	0x0800d95d
 800d944:	0800d965 	.word	0x0800d965
 800d948:	0800d96d 	.word	0x0800d96d
 800d94c:	0800d975 	.word	0x0800d975
 800d950:	0800d97d 	.word	0x0800d97d
 800d954:	2302      	movs	r3, #2
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95a:	e01a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d95c:	2304      	movs	r3, #4
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d962:	e016      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d964:	2308      	movs	r3, #8
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96a:	e012      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d96c:	2310      	movs	r3, #16
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e00e      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d974:	2320      	movs	r3, #32
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e00a      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d97c:	2340      	movs	r3, #64	@ 0x40
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d982:	e006      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d984:	2380      	movs	r3, #128	@ 0x80
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e002      	b.n	800d992 <UART_SetConfig+0x5a6>
 800d98c:	2380      	movs	r3, #128	@ 0x80
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a3f      	ldr	r2, [pc, #252]	@ (800da94 <UART_SetConfig+0x6a8>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	f040 80f8 	bne.w	800db8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d99e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	dc46      	bgt.n	800da34 <UART_SetConfig+0x648>
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	f2c0 8082 	blt.w	800dab0 <UART_SetConfig+0x6c4>
 800d9ac:	3b02      	subs	r3, #2
 800d9ae:	2b1e      	cmp	r3, #30
 800d9b0:	d87e      	bhi.n	800dab0 <UART_SetConfig+0x6c4>
 800d9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b8 <UART_SetConfig+0x5cc>)
 800d9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b8:	0800da3b 	.word	0x0800da3b
 800d9bc:	0800dab1 	.word	0x0800dab1
 800d9c0:	0800da43 	.word	0x0800da43
 800d9c4:	0800dab1 	.word	0x0800dab1
 800d9c8:	0800dab1 	.word	0x0800dab1
 800d9cc:	0800dab1 	.word	0x0800dab1
 800d9d0:	0800da53 	.word	0x0800da53
 800d9d4:	0800dab1 	.word	0x0800dab1
 800d9d8:	0800dab1 	.word	0x0800dab1
 800d9dc:	0800dab1 	.word	0x0800dab1
 800d9e0:	0800dab1 	.word	0x0800dab1
 800d9e4:	0800dab1 	.word	0x0800dab1
 800d9e8:	0800dab1 	.word	0x0800dab1
 800d9ec:	0800dab1 	.word	0x0800dab1
 800d9f0:	0800da63 	.word	0x0800da63
 800d9f4:	0800dab1 	.word	0x0800dab1
 800d9f8:	0800dab1 	.word	0x0800dab1
 800d9fc:	0800dab1 	.word	0x0800dab1
 800da00:	0800dab1 	.word	0x0800dab1
 800da04:	0800dab1 	.word	0x0800dab1
 800da08:	0800dab1 	.word	0x0800dab1
 800da0c:	0800dab1 	.word	0x0800dab1
 800da10:	0800dab1 	.word	0x0800dab1
 800da14:	0800dab1 	.word	0x0800dab1
 800da18:	0800dab1 	.word	0x0800dab1
 800da1c:	0800dab1 	.word	0x0800dab1
 800da20:	0800dab1 	.word	0x0800dab1
 800da24:	0800dab1 	.word	0x0800dab1
 800da28:	0800dab1 	.word	0x0800dab1
 800da2c:	0800dab1 	.word	0x0800dab1
 800da30:	0800daa3 	.word	0x0800daa3
 800da34:	2b40      	cmp	r3, #64	@ 0x40
 800da36:	d037      	beq.n	800daa8 <UART_SetConfig+0x6bc>
 800da38:	e03a      	b.n	800dab0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800da3a:	f7fd f951 	bl	800ace0 <HAL_RCCEx_GetD3PCLK1Freq>
 800da3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da40:	e03c      	b.n	800dabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da46:	4618      	mov	r0, r3
 800da48:	f7fd f960 	bl	800ad0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da50:	e034      	b.n	800dabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da52:	f107 0318 	add.w	r3, r7, #24
 800da56:	4618      	mov	r0, r3
 800da58:	f7fd faac 	bl	800afb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da60:	e02c      	b.n	800dabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da62:	4b09      	ldr	r3, [pc, #36]	@ (800da88 <UART_SetConfig+0x69c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 0320 	and.w	r3, r3, #32
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d016      	beq.n	800da9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da6e:	4b06      	ldr	r3, [pc, #24]	@ (800da88 <UART_SetConfig+0x69c>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	08db      	lsrs	r3, r3, #3
 800da74:	f003 0303 	and.w	r3, r3, #3
 800da78:	4a07      	ldr	r2, [pc, #28]	@ (800da98 <UART_SetConfig+0x6ac>)
 800da7a:	fa22 f303 	lsr.w	r3, r2, r3
 800da7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da80:	e01c      	b.n	800dabc <UART_SetConfig+0x6d0>
 800da82:	bf00      	nop
 800da84:	40011400 	.word	0x40011400
 800da88:	58024400 	.word	0x58024400
 800da8c:	40007800 	.word	0x40007800
 800da90:	40007c00 	.word	0x40007c00
 800da94:	58000c00 	.word	0x58000c00
 800da98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800da9c:	4b9d      	ldr	r3, [pc, #628]	@ (800dd14 <UART_SetConfig+0x928>)
 800da9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa0:	e00c      	b.n	800dabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800daa2:	4b9d      	ldr	r3, [pc, #628]	@ (800dd18 <UART_SetConfig+0x92c>)
 800daa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa6:	e009      	b.n	800dabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800daac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daae:	e005      	b.n	800dabc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dab0:	2300      	movs	r3, #0
 800dab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800daba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dabc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 81de 	beq.w	800de80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dac8:	4a94      	ldr	r2, [pc, #592]	@ (800dd1c <UART_SetConfig+0x930>)
 800daca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dace:	461a      	mov	r2, r3
 800dad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dad2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dad6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	4613      	mov	r3, r2
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	4413      	add	r3, r2
 800dae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d305      	bcc.n	800daf4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800daee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d903      	bls.n	800dafc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dafa:	e1c1      	b.n	800de80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafe:	2200      	movs	r2, #0
 800db00:	60bb      	str	r3, [r7, #8]
 800db02:	60fa      	str	r2, [r7, #12]
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db08:	4a84      	ldr	r2, [pc, #528]	@ (800dd1c <UART_SetConfig+0x930>)
 800db0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	2200      	movs	r2, #0
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	607a      	str	r2, [r7, #4]
 800db16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db1e:	f7f2 fdf3 	bl	8000708 <__aeabi_uldivmod>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	4610      	mov	r0, r2
 800db28:	4619      	mov	r1, r3
 800db2a:	f04f 0200 	mov.w	r2, #0
 800db2e:	f04f 0300 	mov.w	r3, #0
 800db32:	020b      	lsls	r3, r1, #8
 800db34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db38:	0202      	lsls	r2, r0, #8
 800db3a:	6979      	ldr	r1, [r7, #20]
 800db3c:	6849      	ldr	r1, [r1, #4]
 800db3e:	0849      	lsrs	r1, r1, #1
 800db40:	2000      	movs	r0, #0
 800db42:	460c      	mov	r4, r1
 800db44:	4605      	mov	r5, r0
 800db46:	eb12 0804 	adds.w	r8, r2, r4
 800db4a:	eb43 0905 	adc.w	r9, r3, r5
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	469a      	mov	sl, r3
 800db56:	4693      	mov	fp, r2
 800db58:	4652      	mov	r2, sl
 800db5a:	465b      	mov	r3, fp
 800db5c:	4640      	mov	r0, r8
 800db5e:	4649      	mov	r1, r9
 800db60:	f7f2 fdd2 	bl	8000708 <__aeabi_uldivmod>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4613      	mov	r3, r2
 800db6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db72:	d308      	bcc.n	800db86 <UART_SetConfig+0x79a>
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db7a:	d204      	bcs.n	800db86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db82:	60da      	str	r2, [r3, #12]
 800db84:	e17c      	b.n	800de80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800db8c:	e178      	b.n	800de80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db96:	f040 80c5 	bne.w	800dd24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800db9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db9e:	2b20      	cmp	r3, #32
 800dba0:	dc48      	bgt.n	800dc34 <UART_SetConfig+0x848>
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	db7b      	blt.n	800dc9e <UART_SetConfig+0x8b2>
 800dba6:	2b20      	cmp	r3, #32
 800dba8:	d879      	bhi.n	800dc9e <UART_SetConfig+0x8b2>
 800dbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb0 <UART_SetConfig+0x7c4>)
 800dbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb0:	0800dc3b 	.word	0x0800dc3b
 800dbb4:	0800dc43 	.word	0x0800dc43
 800dbb8:	0800dc9f 	.word	0x0800dc9f
 800dbbc:	0800dc9f 	.word	0x0800dc9f
 800dbc0:	0800dc4b 	.word	0x0800dc4b
 800dbc4:	0800dc9f 	.word	0x0800dc9f
 800dbc8:	0800dc9f 	.word	0x0800dc9f
 800dbcc:	0800dc9f 	.word	0x0800dc9f
 800dbd0:	0800dc5b 	.word	0x0800dc5b
 800dbd4:	0800dc9f 	.word	0x0800dc9f
 800dbd8:	0800dc9f 	.word	0x0800dc9f
 800dbdc:	0800dc9f 	.word	0x0800dc9f
 800dbe0:	0800dc9f 	.word	0x0800dc9f
 800dbe4:	0800dc9f 	.word	0x0800dc9f
 800dbe8:	0800dc9f 	.word	0x0800dc9f
 800dbec:	0800dc9f 	.word	0x0800dc9f
 800dbf0:	0800dc6b 	.word	0x0800dc6b
 800dbf4:	0800dc9f 	.word	0x0800dc9f
 800dbf8:	0800dc9f 	.word	0x0800dc9f
 800dbfc:	0800dc9f 	.word	0x0800dc9f
 800dc00:	0800dc9f 	.word	0x0800dc9f
 800dc04:	0800dc9f 	.word	0x0800dc9f
 800dc08:	0800dc9f 	.word	0x0800dc9f
 800dc0c:	0800dc9f 	.word	0x0800dc9f
 800dc10:	0800dc9f 	.word	0x0800dc9f
 800dc14:	0800dc9f 	.word	0x0800dc9f
 800dc18:	0800dc9f 	.word	0x0800dc9f
 800dc1c:	0800dc9f 	.word	0x0800dc9f
 800dc20:	0800dc9f 	.word	0x0800dc9f
 800dc24:	0800dc9f 	.word	0x0800dc9f
 800dc28:	0800dc9f 	.word	0x0800dc9f
 800dc2c:	0800dc9f 	.word	0x0800dc9f
 800dc30:	0800dc91 	.word	0x0800dc91
 800dc34:	2b40      	cmp	r3, #64	@ 0x40
 800dc36:	d02e      	beq.n	800dc96 <UART_SetConfig+0x8aa>
 800dc38:	e031      	b.n	800dc9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc3a:	f7fb fdd9 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800dc3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc40:	e033      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc42:	f7fb fdeb 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800dc46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc48:	e02f      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fd f85c 	bl	800ad0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc58:	e027      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc5a:	f107 0318 	add.w	r3, r7, #24
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fd f9a8 	bl	800afb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc68:	e01f      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc6a:	4b2d      	ldr	r3, [pc, #180]	@ (800dd20 <UART_SetConfig+0x934>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc76:	4b2a      	ldr	r3, [pc, #168]	@ (800dd20 <UART_SetConfig+0x934>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	08db      	lsrs	r3, r3, #3
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	4a24      	ldr	r2, [pc, #144]	@ (800dd14 <UART_SetConfig+0x928>)
 800dc82:	fa22 f303 	lsr.w	r3, r2, r3
 800dc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc88:	e00f      	b.n	800dcaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dc8a:	4b22      	ldr	r3, [pc, #136]	@ (800dd14 <UART_SetConfig+0x928>)
 800dc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc8e:	e00c      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc90:	4b21      	ldr	r3, [pc, #132]	@ (800dd18 <UART_SetConfig+0x92c>)
 800dc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc94:	e009      	b.n	800dcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc9c:	e005      	b.n	800dcaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 80e7 	beq.w	800de80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb6:	4a19      	ldr	r2, [pc, #100]	@ (800dd1c <UART_SetConfig+0x930>)
 800dcb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc4:	005a      	lsls	r2, r3, #1
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	085b      	lsrs	r3, r3, #1
 800dccc:	441a      	add	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	2b0f      	cmp	r3, #15
 800dcdc:	d916      	bls.n	800dd0c <UART_SetConfig+0x920>
 800dcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dce4:	d212      	bcs.n	800dd0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	f023 030f 	bic.w	r3, r3, #15
 800dcee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf2:	085b      	lsrs	r3, r3, #1
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dd08:	60da      	str	r2, [r3, #12]
 800dd0a:	e0b9      	b.n	800de80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd12:	e0b5      	b.n	800de80 <UART_SetConfig+0xa94>
 800dd14:	03d09000 	.word	0x03d09000
 800dd18:	003d0900 	.word	0x003d0900
 800dd1c:	08019e28 	.word	0x08019e28
 800dd20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd28:	2b20      	cmp	r3, #32
 800dd2a:	dc49      	bgt.n	800ddc0 <UART_SetConfig+0x9d4>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db7c      	blt.n	800de2a <UART_SetConfig+0xa3e>
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	d87a      	bhi.n	800de2a <UART_SetConfig+0xa3e>
 800dd34:	a201      	add	r2, pc, #4	@ (adr r2, 800dd3c <UART_SetConfig+0x950>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800ddc7 	.word	0x0800ddc7
 800dd40:	0800ddcf 	.word	0x0800ddcf
 800dd44:	0800de2b 	.word	0x0800de2b
 800dd48:	0800de2b 	.word	0x0800de2b
 800dd4c:	0800ddd7 	.word	0x0800ddd7
 800dd50:	0800de2b 	.word	0x0800de2b
 800dd54:	0800de2b 	.word	0x0800de2b
 800dd58:	0800de2b 	.word	0x0800de2b
 800dd5c:	0800dde7 	.word	0x0800dde7
 800dd60:	0800de2b 	.word	0x0800de2b
 800dd64:	0800de2b 	.word	0x0800de2b
 800dd68:	0800de2b 	.word	0x0800de2b
 800dd6c:	0800de2b 	.word	0x0800de2b
 800dd70:	0800de2b 	.word	0x0800de2b
 800dd74:	0800de2b 	.word	0x0800de2b
 800dd78:	0800de2b 	.word	0x0800de2b
 800dd7c:	0800ddf7 	.word	0x0800ddf7
 800dd80:	0800de2b 	.word	0x0800de2b
 800dd84:	0800de2b 	.word	0x0800de2b
 800dd88:	0800de2b 	.word	0x0800de2b
 800dd8c:	0800de2b 	.word	0x0800de2b
 800dd90:	0800de2b 	.word	0x0800de2b
 800dd94:	0800de2b 	.word	0x0800de2b
 800dd98:	0800de2b 	.word	0x0800de2b
 800dd9c:	0800de2b 	.word	0x0800de2b
 800dda0:	0800de2b 	.word	0x0800de2b
 800dda4:	0800de2b 	.word	0x0800de2b
 800dda8:	0800de2b 	.word	0x0800de2b
 800ddac:	0800de2b 	.word	0x0800de2b
 800ddb0:	0800de2b 	.word	0x0800de2b
 800ddb4:	0800de2b 	.word	0x0800de2b
 800ddb8:	0800de2b 	.word	0x0800de2b
 800ddbc:	0800de1d 	.word	0x0800de1d
 800ddc0:	2b40      	cmp	r3, #64	@ 0x40
 800ddc2:	d02e      	beq.n	800de22 <UART_SetConfig+0xa36>
 800ddc4:	e031      	b.n	800de2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddc6:	f7fb fd13 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800ddca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddcc:	e033      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddce:	f7fb fd25 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800ddd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddd4:	e02f      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fc ff96 	bl	800ad0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dde4:	e027      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dde6:	f107 0318 	add.w	r3, r7, #24
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fd f8e2 	bl	800afb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddf4:	e01f      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddf6:	4b2d      	ldr	r3, [pc, #180]	@ (800deac <UART_SetConfig+0xac0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0320 	and.w	r3, r3, #32
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de02:	4b2a      	ldr	r3, [pc, #168]	@ (800deac <UART_SetConfig+0xac0>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	08db      	lsrs	r3, r3, #3
 800de08:	f003 0303 	and.w	r3, r3, #3
 800de0c:	4a28      	ldr	r2, [pc, #160]	@ (800deb0 <UART_SetConfig+0xac4>)
 800de0e:	fa22 f303 	lsr.w	r3, r2, r3
 800de12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de14:	e00f      	b.n	800de36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800de16:	4b26      	ldr	r3, [pc, #152]	@ (800deb0 <UART_SetConfig+0xac4>)
 800de18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de1a:	e00c      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de1c:	4b25      	ldr	r3, [pc, #148]	@ (800deb4 <UART_SetConfig+0xac8>)
 800de1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de20:	e009      	b.n	800de36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de28:	e005      	b.n	800de36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de34:	bf00      	nop
    }

    if (pclk != 0U)
 800de36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d021      	beq.n	800de80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de40:	4a1d      	ldr	r2, [pc, #116]	@ (800deb8 <UART_SetConfig+0xacc>)
 800de42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de46:	461a      	mov	r2, r3
 800de48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	441a      	add	r2, r3
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de62:	2b0f      	cmp	r3, #15
 800de64:	d909      	bls.n	800de7a <UART_SetConfig+0xa8e>
 800de66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de6c:	d205      	bcs.n	800de7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de70:	b29a      	uxth	r2, r3
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	60da      	str	r2, [r3, #12]
 800de78:	e002      	b.n	800de80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2201      	movs	r2, #1
 800de84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2200      	movs	r2, #0
 800de94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2200      	movs	r2, #0
 800de9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800de9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3748      	adds	r7, #72	@ 0x48
 800dea4:	46bd      	mov	sp, r7
 800dea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800deaa:	bf00      	nop
 800deac:	58024400 	.word	0x58024400
 800deb0:	03d09000 	.word	0x03d09000
 800deb4:	003d0900 	.word	0x003d0900
 800deb8:	08019e28 	.word	0x08019e28

0800debc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00a      	beq.n	800dee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	430a      	orrs	r2, r1
 800dee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	430a      	orrs	r2, r1
 800df06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0c:	f003 0302 	and.w	r3, r3, #2
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00a      	beq.n	800df2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df2e:	f003 0304 	and.w	r3, r3, #4
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	430a      	orrs	r2, r1
 800df4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df50:	f003 0310 	and.w	r3, r3, #16
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00a      	beq.n	800df6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	430a      	orrs	r2, r1
 800df6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	430a      	orrs	r2, r1
 800df8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d01a      	beq.n	800dfd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfba:	d10a      	bne.n	800dfd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	605a      	str	r2, [r3, #4]
  }
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b098      	sub	sp, #96	@ 0x60
 800e004:	af02      	add	r7, sp, #8
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e010:	f7f4 fb6c 	bl	80026ec <HAL_GetTick>
 800e014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f003 0308 	and.w	r3, r3, #8
 800e020:	2b08      	cmp	r3, #8
 800e022:	d12f      	bne.n	800e084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e02c:	2200      	movs	r2, #0
 800e02e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f88e 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d022      	beq.n	800e084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	e853 3f00 	ldrex	r3, [r3]
 800e04a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e052:	653b      	str	r3, [r7, #80]	@ 0x50
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	461a      	mov	r2, r3
 800e05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e05c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e05e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e064:	e841 2300 	strex	r3, r2, [r1]
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e6      	bne.n	800e03e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2220      	movs	r2, #32
 800e074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e080:	2303      	movs	r3, #3
 800e082:	e063      	b.n	800e14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 0304 	and.w	r3, r3, #4
 800e08e:	2b04      	cmp	r3, #4
 800e090:	d149      	bne.n	800e126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e09a:	2200      	movs	r2, #0
 800e09c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f857 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d03c      	beq.n	800e126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	e853 3f00 	ldrex	r3, [r3]
 800e0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d2:	e841 2300 	strex	r3, r2, [r1]
 800e0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e6      	bne.n	800e0ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	e853 3f00 	ldrex	r3, [r3]
 800e0ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f023 0301 	bic.w	r3, r3, #1
 800e0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0fe:	61fa      	str	r2, [r7, #28]
 800e100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e102:	69b9      	ldr	r1, [r7, #24]
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	e841 2300 	strex	r3, r2, [r1]
 800e10a:	617b      	str	r3, [r7, #20]
   return(result);
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1e5      	bne.n	800e0de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2220      	movs	r2, #32
 800e116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e122:	2303      	movs	r3, #3
 800e124:	e012      	b.n	800e14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2220      	movs	r2, #32
 800e12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2220      	movs	r2, #32
 800e132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3758      	adds	r7, #88	@ 0x58
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e164:	e04f      	b.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16c:	d04b      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e16e:	f7f4 fabd 	bl	80026ec <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d302      	bcc.n	800e184 <UART_WaitOnFlagUntilTimeout+0x30>
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e04e      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f003 0304 	and.w	r3, r3, #4
 800e192:	2b00      	cmp	r3, #0
 800e194:	d037      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b80      	cmp	r3, #128	@ 0x80
 800e19a:	d034      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	2b40      	cmp	r3, #64	@ 0x40
 800e1a0:	d031      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	d110      	bne.n	800e1d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2208      	movs	r2, #8
 800e1b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 f95b 	bl	800e474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e029      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1e0:	d111      	bne.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 f941 	bl	800e474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e202:	2303      	movs	r3, #3
 800e204:	e00f      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	69da      	ldr	r2, [r3, #28]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	4013      	ands	r3, r2
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	429a      	cmp	r2, r3
 800e214:	bf0c      	ite	eq
 800e216:	2301      	moveq	r3, #1
 800e218:	2300      	movne	r3, #0
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	461a      	mov	r2, r3
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	429a      	cmp	r2, r3
 800e222:	d0a0      	beq.n	800e166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e230:	b480      	push	{r7}
 800e232:	b0a3      	sub	sp, #140	@ 0x8c
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4613      	mov	r3, r2
 800e23c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	88fa      	ldrh	r2, [r7, #6]
 800e248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	88fa      	ldrh	r2, [r7, #6]
 800e250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e262:	d10e      	bne.n	800e282 <UART_Start_Receive_IT+0x52>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d105      	bne.n	800e278 <UART_Start_Receive_IT+0x48>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e272:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e276:	e02d      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	22ff      	movs	r2, #255	@ 0xff
 800e27c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e280:	e028      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10d      	bne.n	800e2a6 <UART_Start_Receive_IT+0x76>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d104      	bne.n	800e29c <UART_Start_Receive_IT+0x6c>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	22ff      	movs	r2, #255	@ 0xff
 800e296:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e29a:	e01b      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	227f      	movs	r2, #127	@ 0x7f
 800e2a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e2a4:	e016      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2ae:	d10d      	bne.n	800e2cc <UART_Start_Receive_IT+0x9c>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d104      	bne.n	800e2c2 <UART_Start_Receive_IT+0x92>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	227f      	movs	r2, #127	@ 0x7f
 800e2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e2c0:	e008      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	223f      	movs	r2, #63	@ 0x3f
 800e2c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e2ca:	e003      	b.n	800e2d4 <UART_Start_Receive_IT+0xa4>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2222      	movs	r2, #34	@ 0x22
 800e2e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2ee:	e853 3f00 	ldrex	r3, [r3]
 800e2f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e2f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2f6:	f043 0301 	orr.w	r3, r3, #1
 800e2fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3308      	adds	r3, #8
 800e304:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e308:	673a      	str	r2, [r7, #112]	@ 0x70
 800e30a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e30e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e310:	e841 2300 	strex	r3, r2, [r1]
 800e314:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1e3      	bne.n	800e2e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e324:	d14f      	bne.n	800e3c6 <UART_Start_Receive_IT+0x196>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e32c:	88fa      	ldrh	r2, [r7, #6]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d349      	bcc.n	800e3c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e33a:	d107      	bne.n	800e34c <UART_Start_Receive_IT+0x11c>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d103      	bne.n	800e34c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4a47      	ldr	r2, [pc, #284]	@ (800e464 <UART_Start_Receive_IT+0x234>)
 800e348:	675a      	str	r2, [r3, #116]	@ 0x74
 800e34a:	e002      	b.n	800e352 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4a46      	ldr	r2, [pc, #280]	@ (800e468 <UART_Start_Receive_IT+0x238>)
 800e350:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d01a      	beq.n	800e390 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e362:	e853 3f00 	ldrex	r3, [r3]
 800e366:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e36a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e36e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e37c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e37e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e380:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e382:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e384:	e841 2300 	strex	r3, r2, [r1]
 800e388:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d1e4      	bne.n	800e35a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e39a:	e853 3f00 	ldrex	r3, [r3]
 800e39e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e3b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e3b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e5      	bne.n	800e390 <UART_Start_Receive_IT+0x160>
 800e3c4:	e046      	b.n	800e454 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3ce:	d107      	bne.n	800e3e0 <UART_Start_Receive_IT+0x1b0>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d103      	bne.n	800e3e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	4a24      	ldr	r2, [pc, #144]	@ (800e46c <UART_Start_Receive_IT+0x23c>)
 800e3dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e3de:	e002      	b.n	800e3e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	4a23      	ldr	r2, [pc, #140]	@ (800e470 <UART_Start_Receive_IT+0x240>)
 800e3e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d019      	beq.n	800e422 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f6:	e853 3f00 	ldrex	r3, [r3]
 800e3fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e402:	677b      	str	r3, [r7, #116]	@ 0x74
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	461a      	mov	r2, r3
 800e40a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e40e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e414:	e841 2300 	strex	r3, r2, [r1]
 800e418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e6      	bne.n	800e3ee <UART_Start_Receive_IT+0x1be>
 800e420:	e018      	b.n	800e454 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	e853 3f00 	ldrex	r3, [r3]
 800e42e:	613b      	str	r3, [r7, #16]
   return(result);
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	f043 0320 	orr.w	r3, r3, #32
 800e436:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	461a      	mov	r2, r3
 800e43e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e440:	623b      	str	r3, [r7, #32]
 800e442:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e444:	69f9      	ldr	r1, [r7, #28]
 800e446:	6a3a      	ldr	r2, [r7, #32]
 800e448:	e841 2300 	strex	r3, r2, [r1]
 800e44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1e6      	bne.n	800e422 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	378c      	adds	r7, #140	@ 0x8c
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	0800ec95 	.word	0x0800ec95
 800e468:	0800e935 	.word	0x0800e935
 800e46c:	0800e77d 	.word	0x0800e77d
 800e470:	0800e5c5 	.word	0x0800e5c5

0800e474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b095      	sub	sp, #84	@ 0x54
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e484:	e853 3f00 	ldrex	r3, [r3]
 800e488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	461a      	mov	r2, r3
 800e498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e49a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e49c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e4a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4a2:	e841 2300 	strex	r3, r2, [r1]
 800e4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1e6      	bne.n	800e47c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3308      	adds	r3, #8
 800e4b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	e853 3f00 	ldrex	r3, [r3]
 800e4bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	4b1e      	ldr	r3, [pc, #120]	@ (800e53c <UART_EndRxTransfer+0xc8>)
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e5      	bne.n	800e4ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d118      	bne.n	800e51c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	e853 3f00 	ldrex	r3, [r3]
 800e4f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f023 0310 	bic.w	r3, r3, #16
 800e4fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	461a      	mov	r2, r3
 800e506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e508:	61bb      	str	r3, [r7, #24]
 800e50a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50c:	6979      	ldr	r1, [r7, #20]
 800e50e:	69ba      	ldr	r2, [r7, #24]
 800e510:	e841 2300 	strex	r3, r2, [r1]
 800e514:	613b      	str	r3, [r7, #16]
   return(result);
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e6      	bne.n	800e4ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2220      	movs	r2, #32
 800e520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e530:	bf00      	nop
 800e532:	3754      	adds	r7, #84	@ 0x54
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	effffffe 	.word	0xeffffffe

0800e540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e54c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f7fe ff2e 	bl	800d3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b088      	sub	sp, #32
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	e853 3f00 	ldrex	r3, [r3]
 800e580:	60bb      	str	r3, [r7, #8]
   return(result);
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e588:	61fb      	str	r3, [r7, #28]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	461a      	mov	r2, r3
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	61bb      	str	r3, [r7, #24]
 800e594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	6979      	ldr	r1, [r7, #20]
 800e598:	69ba      	ldr	r2, [r7, #24]
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	613b      	str	r3, [r7, #16]
   return(result);
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e6      	bne.n	800e574 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7fe fef9 	bl	800d3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5ba:	bf00      	nop
 800e5bc:	3720      	adds	r7, #32
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
	...

0800e5c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b09c      	sub	sp, #112	@ 0x70
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5dc:	2b22      	cmp	r3, #34	@ 0x22
 800e5de:	f040 80be 	bne.w	800e75e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e5ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e5f0:	b2d9      	uxtb	r1, r3
 800e5f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5fc:	400a      	ands	r2, r1
 800e5fe:	b2d2      	uxtb	r2, r2
 800e600:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e612:	b29b      	uxth	r3, r3
 800e614:	3b01      	subs	r3, #1
 800e616:	b29a      	uxth	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e624:	b29b      	uxth	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	f040 80a1 	bne.w	800e76e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e634:	e853 3f00 	ldrex	r3, [r3]
 800e638:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e63a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e63c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e640:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e64a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e64c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e650:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e652:	e841 2300 	strex	r3, r2, [r1]
 800e656:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1e6      	bne.n	800e62c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e668:	e853 3f00 	ldrex	r3, [r3]
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e670:	f023 0301 	bic.w	r3, r3, #1
 800e674:	667b      	str	r3, [r7, #100]	@ 0x64
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3308      	adds	r3, #8
 800e67c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e67e:	647a      	str	r2, [r7, #68]	@ 0x44
 800e680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e686:	e841 2300 	strex	r3, r2, [r1]
 800e68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1e5      	bne.n	800e65e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2220      	movs	r2, #32
 800e696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a33      	ldr	r2, [pc, #204]	@ (800e778 <UART_RxISR_8BIT+0x1b4>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d01f      	beq.n	800e6f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d018      	beq.n	800e6f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c6:	e853 3f00 	ldrex	r3, [r3]
 800e6ca:	623b      	str	r3, [r7, #32]
   return(result);
 800e6cc:	6a3b      	ldr	r3, [r7, #32]
 800e6ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e6d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e6de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6e4:	e841 2300 	strex	r3, r2, [r1]
 800e6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1e6      	bne.n	800e6be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d12e      	bne.n	800e756 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f023 0310 	bic.w	r3, r3, #16
 800e712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e71c:	61fb      	str	r3, [r7, #28]
 800e71e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	69b9      	ldr	r1, [r7, #24]
 800e722:	69fa      	ldr	r2, [r7, #28]
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	617b      	str	r3, [r7, #20]
   return(result);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e6      	bne.n	800e6fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	69db      	ldr	r3, [r3, #28]
 800e736:	f003 0310 	and.w	r3, r3, #16
 800e73a:	2b10      	cmp	r3, #16
 800e73c:	d103      	bne.n	800e746 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2210      	movs	r2, #16
 800e744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7fe fe40 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e754:	e00b      	b.n	800e76e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7f2 ff96 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 800e75c:	e007      	b.n	800e76e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	699a      	ldr	r2, [r3, #24]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f042 0208 	orr.w	r2, r2, #8
 800e76c:	619a      	str	r2, [r3, #24]
}
 800e76e:	bf00      	nop
 800e770:	3770      	adds	r7, #112	@ 0x70
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	58000c00 	.word	0x58000c00

0800e77c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b09c      	sub	sp, #112	@ 0x70
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e78a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e794:	2b22      	cmp	r3, #34	@ 0x22
 800e796:	f040 80be 	bne.w	800e916 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e7aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e7ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7be:	1c9a      	adds	r2, r3, #2
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f040 80a1 	bne.w	800e926 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7ec:	e853 3f00 	ldrex	r3, [r3]
 800e7f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	461a      	mov	r2, r3
 800e800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e802:	657b      	str	r3, [r7, #84]	@ 0x54
 800e804:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e806:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e80a:	e841 2300 	strex	r3, r2, [r1]
 800e80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1e6      	bne.n	800e7e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	3308      	adds	r3, #8
 800e81c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e820:	e853 3f00 	ldrex	r3, [r3]
 800e824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e828:	f023 0301 	bic.w	r3, r3, #1
 800e82c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3308      	adds	r3, #8
 800e834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e836:	643a      	str	r2, [r7, #64]	@ 0x40
 800e838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e83c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e83e:	e841 2300 	strex	r3, r2, [r1]
 800e842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1e5      	bne.n	800e816 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2220      	movs	r2, #32
 800e84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a33      	ldr	r2, [pc, #204]	@ (800e930 <UART_RxISR_16BIT+0x1b4>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d01f      	beq.n	800e8a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e872:	2b00      	cmp	r3, #0
 800e874:	d018      	beq.n	800e8a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	e853 3f00 	ldrex	r3, [r3]
 800e882:	61fb      	str	r3, [r7, #28]
   return(result);
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	461a      	mov	r2, r3
 800e892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e896:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e89a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e89c:	e841 2300 	strex	r3, r2, [r1]
 800e8a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1e6      	bne.n	800e876 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d12e      	bne.n	800e90e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	e853 3f00 	ldrex	r3, [r3]
 800e8c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f023 0310 	bic.w	r3, r3, #16
 800e8ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8d4:	61bb      	str	r3, [r7, #24]
 800e8d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d8:	6979      	ldr	r1, [r7, #20]
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	e841 2300 	strex	r3, r2, [r1]
 800e8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e6      	bne.n	800e8b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	69db      	ldr	r3, [r3, #28]
 800e8ee:	f003 0310 	and.w	r3, r3, #16
 800e8f2:	2b10      	cmp	r3, #16
 800e8f4:	d103      	bne.n	800e8fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2210      	movs	r2, #16
 800e8fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e904:	4619      	mov	r1, r3
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7fe fd64 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e90c:	e00b      	b.n	800e926 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7f2 feba 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 800e914:	e007      	b.n	800e926 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	699a      	ldr	r2, [r3, #24]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f042 0208 	orr.w	r2, r2, #8
 800e924:	619a      	str	r2, [r3, #24]
}
 800e926:	bf00      	nop
 800e928:	3770      	adds	r7, #112	@ 0x70
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	58000c00 	.word	0x58000c00

0800e934 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b0ac      	sub	sp, #176	@ 0xb0
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e942:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	69db      	ldr	r3, [r3, #28]
 800e94c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e96a:	2b22      	cmp	r3, #34	@ 0x22
 800e96c:	f040 8180 	bne.w	800ec70 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e976:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e97a:	e123      	b.n	800ebc4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e982:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e986:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e98a:	b2d9      	uxtb	r1, r3
 800e98c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e990:	b2da      	uxtb	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e996:	400a      	ands	r2, r1
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9a0:	1c5a      	adds	r2, r3, #1
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	69db      	ldr	r3, [r3, #28]
 800e9be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d053      	beq.n	800ea76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d011      	beq.n	800e9fe <UART_RxISR_8BIT_FIFOEN+0xca>
 800e9da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00b      	beq.n	800e9fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9f4:	f043 0201 	orr.w	r2, r3, #1
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea02:	f003 0302 	and.w	r3, r3, #2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d011      	beq.n	800ea2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ea0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00b      	beq.n	800ea2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea24:	f043 0204 	orr.w	r2, r3, #4
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea32:	f003 0304 	and.w	r3, r3, #4
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d011      	beq.n	800ea5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ea3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00b      	beq.n	800ea5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2204      	movs	r2, #4
 800ea4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea54:	f043 0202 	orr.w	r2, r3, #2
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d006      	beq.n	800ea76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7fe fca9 	bl	800d3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f040 80a0 	bne.w	800ebc4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea8c:	e853 3f00 	ldrex	r3, [r3]
 800ea90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ea92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eaa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eaa8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eaac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800eab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e4      	bne.n	800ea84 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eac4:	e853 3f00 	ldrex	r3, [r3]
 800eac8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800eaca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eacc:	4b6e      	ldr	r3, [pc, #440]	@ (800ec88 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800eace:	4013      	ands	r3, r2
 800ead0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3308      	adds	r3, #8
 800eada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eade:	66ba      	str	r2, [r7, #104]	@ 0x68
 800eae0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800eae4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800eae6:	e841 2300 	strex	r3, r2, [r1]
 800eaea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800eaec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1e3      	bne.n	800eaba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2220      	movs	r2, #32
 800eaf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a60      	ldr	r2, [pc, #384]	@ (800ec8c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d021      	beq.n	800eb54 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d01a      	beq.n	800eb54 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb26:	e853 3f00 	ldrex	r3, [r3]
 800eb2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eb2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eb40:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb42:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb48:	e841 2300 	strex	r3, r2, [r1]
 800eb4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eb4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1e4      	bne.n	800eb1e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d130      	bne.n	800ebbe <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb72:	f023 0310 	bic.w	r3, r3, #16
 800eb76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb84:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb8c:	e841 2300 	strex	r3, r2, [r1]
 800eb90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1e4      	bne.n	800eb62 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	f003 0310 	and.w	r3, r3, #16
 800eba2:	2b10      	cmp	r3, #16
 800eba4:	d103      	bne.n	800ebae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2210      	movs	r2, #16
 800ebac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7fe fc0c 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
 800ebbc:	e002      	b.n	800ebc4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7f2 fd62 	bl	8001688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebc4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d006      	beq.n	800ebda <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ebcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebd0:	f003 0320 	and.w	r3, r3, #32
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f47f aed1 	bne.w	800e97c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebe0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ebe4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d049      	beq.n	800ec80 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ebf2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d242      	bcs.n	800ec80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3308      	adds	r3, #8
 800ec00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	3308      	adds	r3, #8
 800ec1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ec1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec26:	e841 2300 	strex	r3, r2, [r1]
 800ec2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1e3      	bne.n	800ebfa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a16      	ldr	r2, [pc, #88]	@ (800ec90 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ec36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	e853 3f00 	ldrex	r3, [r3]
 800ec44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	f043 0320 	orr.w	r3, r3, #32
 800ec4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ec5a:	61bb      	str	r3, [r7, #24]
 800ec5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5e:	6979      	ldr	r1, [r7, #20]
 800ec60:	69ba      	ldr	r2, [r7, #24]
 800ec62:	e841 2300 	strex	r3, r2, [r1]
 800ec66:	613b      	str	r3, [r7, #16]
   return(result);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1e4      	bne.n	800ec38 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec6e:	e007      	b.n	800ec80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	699a      	ldr	r2, [r3, #24]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f042 0208 	orr.w	r2, r2, #8
 800ec7e:	619a      	str	r2, [r3, #24]
}
 800ec80:	bf00      	nop
 800ec82:	37b0      	adds	r7, #176	@ 0xb0
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	effffffe 	.word	0xeffffffe
 800ec8c:	58000c00 	.word	0x58000c00
 800ec90:	0800e5c5 	.word	0x0800e5c5

0800ec94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b0ae      	sub	sp, #184	@ 0xb8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eca2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecca:	2b22      	cmp	r3, #34	@ 0x22
 800eccc:	f040 8184 	bne.w	800efd8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ecd6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ecda:	e127      	b.n	800ef2c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ecee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ecf2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ecfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed04:	1c9a      	adds	r2, r3, #2
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	3b01      	subs	r3, #1
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	69db      	ldr	r3, [r3, #28]
 800ed22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ed26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d053      	beq.n	800edda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d011      	beq.n	800ed62 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ed3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00b      	beq.n	800ed62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed58:	f043 0201 	orr.w	r2, r3, #1
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed66:	f003 0302 	and.w	r3, r3, #2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d011      	beq.n	800ed92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ed6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00b      	beq.n	800ed92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2202      	movs	r2, #2
 800ed80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed88:	f043 0204 	orr.w	r2, r3, #4
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed96:	f003 0304 	and.w	r3, r3, #4
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d011      	beq.n	800edc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ed9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00b      	beq.n	800edc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2204      	movs	r2, #4
 800edb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edb8:	f043 0202 	orr.w	r2, r3, #2
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d006      	beq.n	800edda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7fe faf7 	bl	800d3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f040 80a2 	bne.w	800ef2c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800edf0:	e853 3f00 	ldrex	r3, [r3]
 800edf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800edf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800edf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800edfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	461a      	mov	r2, r3
 800ee06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ee12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ee16:	e841 2300 	strex	r3, r2, [r1]
 800ee1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ee1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1e2      	bne.n	800ede8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ee32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ee34:	4b6e      	ldr	r3, [pc, #440]	@ (800eff0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ee36:	4013      	ands	r3, r2
 800ee38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3308      	adds	r3, #8
 800ee42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ee46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ee48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ee4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ee4e:	e841 2300 	strex	r3, r2, [r1]
 800ee52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ee54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e3      	bne.n	800ee22 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2220      	movs	r2, #32
 800ee5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a60      	ldr	r2, [pc, #384]	@ (800eff4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d021      	beq.n	800eebc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d01a      	beq.n	800eebc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee8e:	e853 3f00 	ldrex	r3, [r3]
 800ee92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	461a      	mov	r2, r3
 800eea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eeaa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eeae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eeb0:	e841 2300 	strex	r3, r2, [r1]
 800eeb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eeb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1e4      	bne.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d130      	bne.n	800ef26 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed2:	e853 3f00 	ldrex	r3, [r3]
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeda:	f023 0310 	bic.w	r3, r3, #16
 800eede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eeec:	647b      	str	r3, [r7, #68]	@ 0x44
 800eeee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eef4:	e841 2300 	strex	r3, r2, [r1]
 800eef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e4      	bne.n	800eeca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	f003 0310 	and.w	r3, r3, #16
 800ef0a:	2b10      	cmp	r3, #16
 800ef0c:	d103      	bne.n	800ef16 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2210      	movs	r2, #16
 800ef14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7fe fa58 	bl	800d3d4 <HAL_UARTEx_RxEventCallback>
 800ef24:	e002      	b.n	800ef2c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7f2 fbae 	bl	8001688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d006      	beq.n	800ef42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ef34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef38:	f003 0320 	and.w	r3, r3, #32
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f47f aecd 	bne.w	800ecdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef48:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ef4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d049      	beq.n	800efe8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d242      	bcs.n	800efe8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3308      	adds	r3, #8
 800ef68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef6c:	e853 3f00 	ldrex	r3, [r3]
 800ef70:	623b      	str	r3, [r7, #32]
   return(result);
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ef78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	3308      	adds	r3, #8
 800ef82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ef86:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef8e:	e841 2300 	strex	r3, r2, [r1]
 800ef92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1e3      	bne.n	800ef62 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a16      	ldr	r2, [pc, #88]	@ (800eff8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ef9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	e853 3f00 	ldrex	r3, [r3]
 800efac:	60fb      	str	r3, [r7, #12]
   return(result);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f043 0320 	orr.w	r3, r3, #32
 800efb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	461a      	mov	r2, r3
 800efbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800efc2:	61fb      	str	r3, [r7, #28]
 800efc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc6:	69b9      	ldr	r1, [r7, #24]
 800efc8:	69fa      	ldr	r2, [r7, #28]
 800efca:	e841 2300 	strex	r3, r2, [r1]
 800efce:	617b      	str	r3, [r7, #20]
   return(result);
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1e4      	bne.n	800efa0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efd6:	e007      	b.n	800efe8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	699a      	ldr	r2, [r3, #24]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0208 	orr.w	r2, r2, #8
 800efe6:	619a      	str	r2, [r3, #24]
}
 800efe8:	bf00      	nop
 800efea:	37b8      	adds	r7, #184	@ 0xb8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	effffffe 	.word	0xeffffffe
 800eff4:	58000c00 	.word	0x58000c00
 800eff8:	0800e77d 	.word	0x0800e77d

0800effc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f004:	bf00      	nop
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f018:	bf00      	nop
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f02c:	bf00      	nop
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f046:	2b01      	cmp	r3, #1
 800f048:	d101      	bne.n	800f04e <HAL_UARTEx_DisableFifoMode+0x16>
 800f04a:	2302      	movs	r3, #2
 800f04c:	e027      	b.n	800f09e <HAL_UARTEx_DisableFifoMode+0x66>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2224      	movs	r2, #36	@ 0x24
 800f05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f022 0201 	bic.w	r2, r2, #1
 800f074:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f07c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2220      	movs	r2, #32
 800f090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b084      	sub	sp, #16
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d101      	bne.n	800f0c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f0be:	2302      	movs	r3, #2
 800f0c0:	e02d      	b.n	800f11e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2224      	movs	r2, #36	@ 0x24
 800f0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f022 0201 	bic.w	r2, r2, #1
 800f0e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f850 	bl	800f1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
 800f12e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f136:	2b01      	cmp	r3, #1
 800f138:	d101      	bne.n	800f13e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f13a:	2302      	movs	r3, #2
 800f13c:	e02d      	b.n	800f19a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2201      	movs	r2, #1
 800f142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2224      	movs	r2, #36	@ 0x24
 800f14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f022 0201 	bic.w	r2, r2, #1
 800f164:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	430a      	orrs	r2, r1
 800f178:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f812 	bl	800f1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d108      	bne.n	800f1c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f1c4:	e031      	b.n	800f22a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f1c6:	2310      	movs	r3, #16
 800f1c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f1ca:	2310      	movs	r3, #16
 800f1cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	0e5b      	lsrs	r3, r3, #25
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	f003 0307 	and.w	r3, r3, #7
 800f1dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	0f5b      	lsrs	r3, r3, #29
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	f003 0307 	and.w	r3, r3, #7
 800f1ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
 800f1f0:	7b3a      	ldrb	r2, [r7, #12]
 800f1f2:	4911      	ldr	r1, [pc, #68]	@ (800f238 <UARTEx_SetNbDataToProcess+0x94>)
 800f1f4:	5c8a      	ldrb	r2, [r1, r2]
 800f1f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f1fa:	7b3a      	ldrb	r2, [r7, #12]
 800f1fc:	490f      	ldr	r1, [pc, #60]	@ (800f23c <UARTEx_SetNbDataToProcess+0x98>)
 800f1fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f200:	fb93 f3f2 	sdiv	r3, r3, r2
 800f204:	b29a      	uxth	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
 800f20e:	7b7a      	ldrb	r2, [r7, #13]
 800f210:	4909      	ldr	r1, [pc, #36]	@ (800f238 <UARTEx_SetNbDataToProcess+0x94>)
 800f212:	5c8a      	ldrb	r2, [r1, r2]
 800f214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f218:	7b7a      	ldrb	r2, [r7, #13]
 800f21a:	4908      	ldr	r1, [pc, #32]	@ (800f23c <UARTEx_SetNbDataToProcess+0x98>)
 800f21c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f21e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f222:	b29a      	uxth	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f22a:	bf00      	nop
 800f22c:	3714      	adds	r7, #20
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	08019e40 	.word	0x08019e40
 800f23c:	08019e48 	.word	0x08019e48

0800f240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f240:	b084      	sub	sp, #16
 800f242:	b580      	push	{r7, lr}
 800f244:	b084      	sub	sp, #16
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	f107 001c 	add.w	r0, r7, #28
 800f24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f252:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f256:	2b01      	cmp	r3, #1
 800f258:	d121      	bne.n	800f29e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f25e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68da      	ldr	r2, [r3, #12]
 800f26a:	4b2c      	ldr	r3, [pc, #176]	@ (800f31c <USB_CoreInit+0xdc>)
 800f26c:	4013      	ands	r3, r2
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f27e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f282:	2b01      	cmp	r3, #1
 800f284:	d105      	bne.n	800f292 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 faf6 	bl	8010884 <USB_CoreReset>
 800f298:	4603      	mov	r3, r0
 800f29a:	73fb      	strb	r3, [r7, #15]
 800f29c:	e01b      	b.n	800f2d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f001 faea 	bl	8010884 <USB_CoreReset>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f2b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d106      	bne.n	800f2ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800f2c8:	e005      	b.n	800f2d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f2d6:	7fbb      	ldrb	r3, [r7, #30]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d116      	bne.n	800f30a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f320 <USB_CoreInit+0xe0>)
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f043 0206 	orr.w	r2, r3, #6
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f043 0220 	orr.w	r2, r3, #32
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f316:	b004      	add	sp, #16
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	ffbdffbf 	.word	0xffbdffbf
 800f320:	03ee0000 	.word	0x03ee0000

0800f324 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f324:	b480      	push	{r7}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	4613      	mov	r3, r2
 800f330:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f332:	79fb      	ldrb	r3, [r7, #7]
 800f334:	2b02      	cmp	r3, #2
 800f336:	d165      	bne.n	800f404 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	4a41      	ldr	r2, [pc, #260]	@ (800f440 <USB_SetTurnaroundTime+0x11c>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d906      	bls.n	800f34e <USB_SetTurnaroundTime+0x2a>
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	4a40      	ldr	r2, [pc, #256]	@ (800f444 <USB_SetTurnaroundTime+0x120>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d202      	bcs.n	800f34e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f348:	230f      	movs	r3, #15
 800f34a:	617b      	str	r3, [r7, #20]
 800f34c:	e062      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	4a3c      	ldr	r2, [pc, #240]	@ (800f444 <USB_SetTurnaroundTime+0x120>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d306      	bcc.n	800f364 <USB_SetTurnaroundTime+0x40>
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	4a3b      	ldr	r2, [pc, #236]	@ (800f448 <USB_SetTurnaroundTime+0x124>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d202      	bcs.n	800f364 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f35e:	230e      	movs	r3, #14
 800f360:	617b      	str	r3, [r7, #20]
 800f362:	e057      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	4a38      	ldr	r2, [pc, #224]	@ (800f448 <USB_SetTurnaroundTime+0x124>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d306      	bcc.n	800f37a <USB_SetTurnaroundTime+0x56>
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	4a37      	ldr	r2, [pc, #220]	@ (800f44c <USB_SetTurnaroundTime+0x128>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d202      	bcs.n	800f37a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f374:	230d      	movs	r3, #13
 800f376:	617b      	str	r3, [r7, #20]
 800f378:	e04c      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	4a33      	ldr	r2, [pc, #204]	@ (800f44c <USB_SetTurnaroundTime+0x128>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d306      	bcc.n	800f390 <USB_SetTurnaroundTime+0x6c>
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	4a32      	ldr	r2, [pc, #200]	@ (800f450 <USB_SetTurnaroundTime+0x12c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d802      	bhi.n	800f390 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f38a:	230c      	movs	r3, #12
 800f38c:	617b      	str	r3, [r7, #20]
 800f38e:	e041      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	4a2f      	ldr	r2, [pc, #188]	@ (800f450 <USB_SetTurnaroundTime+0x12c>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d906      	bls.n	800f3a6 <USB_SetTurnaroundTime+0x82>
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	4a2e      	ldr	r2, [pc, #184]	@ (800f454 <USB_SetTurnaroundTime+0x130>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d802      	bhi.n	800f3a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f3a0:	230b      	movs	r3, #11
 800f3a2:	617b      	str	r3, [r7, #20]
 800f3a4:	e036      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	4a2a      	ldr	r2, [pc, #168]	@ (800f454 <USB_SetTurnaroundTime+0x130>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d906      	bls.n	800f3bc <USB_SetTurnaroundTime+0x98>
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	4a29      	ldr	r2, [pc, #164]	@ (800f458 <USB_SetTurnaroundTime+0x134>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d802      	bhi.n	800f3bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f3b6:	230a      	movs	r3, #10
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	e02b      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	4a26      	ldr	r2, [pc, #152]	@ (800f458 <USB_SetTurnaroundTime+0x134>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d906      	bls.n	800f3d2 <USB_SetTurnaroundTime+0xae>
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	4a25      	ldr	r2, [pc, #148]	@ (800f45c <USB_SetTurnaroundTime+0x138>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d202      	bcs.n	800f3d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f3cc:	2309      	movs	r3, #9
 800f3ce:	617b      	str	r3, [r7, #20]
 800f3d0:	e020      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	4a21      	ldr	r2, [pc, #132]	@ (800f45c <USB_SetTurnaroundTime+0x138>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d306      	bcc.n	800f3e8 <USB_SetTurnaroundTime+0xc4>
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	4a20      	ldr	r2, [pc, #128]	@ (800f460 <USB_SetTurnaroundTime+0x13c>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d802      	bhi.n	800f3e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f3e2:	2308      	movs	r3, #8
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	e015      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	4a1d      	ldr	r2, [pc, #116]	@ (800f460 <USB_SetTurnaroundTime+0x13c>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d906      	bls.n	800f3fe <USB_SetTurnaroundTime+0xda>
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	4a1c      	ldr	r2, [pc, #112]	@ (800f464 <USB_SetTurnaroundTime+0x140>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d202      	bcs.n	800f3fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f3f8:	2307      	movs	r3, #7
 800f3fa:	617b      	str	r3, [r7, #20]
 800f3fc:	e00a      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f3fe:	2306      	movs	r3, #6
 800f400:	617b      	str	r3, [r7, #20]
 800f402:	e007      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d102      	bne.n	800f410 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f40a:	2309      	movs	r3, #9
 800f40c:	617b      	str	r3, [r7, #20]
 800f40e:	e001      	b.n	800f414 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f410:	2309      	movs	r3, #9
 800f412:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	68da      	ldr	r2, [r3, #12]
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	029b      	lsls	r3, r3, #10
 800f428:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f42c:	431a      	orrs	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	371c      	adds	r7, #28
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	00d8acbf 	.word	0x00d8acbf
 800f444:	00e4e1c0 	.word	0x00e4e1c0
 800f448:	00f42400 	.word	0x00f42400
 800f44c:	01067380 	.word	0x01067380
 800f450:	011a499f 	.word	0x011a499f
 800f454:	01312cff 	.word	0x01312cff
 800f458:	014ca43f 	.word	0x014ca43f
 800f45c:	016e3600 	.word	0x016e3600
 800f460:	01a6ab1f 	.word	0x01a6ab1f
 800f464:	01e84800 	.word	0x01e84800

0800f468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	f043 0201 	orr.w	r2, r3, #1
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	370c      	adds	r7, #12
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b083      	sub	sp, #12
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	f023 0201 	bic.w	r2, r3, #1
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d115      	bne.n	800f4fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f4da:	200a      	movs	r0, #10
 800f4dc:	f7f3 f912 	bl	8002704 <HAL_Delay>
      ms += 10U;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	330a      	adds	r3, #10
 800f4e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f001 f93b 	bl	8010762 <USB_GetMode>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d01e      	beq.n	800f530 <USB_SetCurrentMode+0x84>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800f4f6:	d9f0      	bls.n	800f4da <USB_SetCurrentMode+0x2e>
 800f4f8:	e01a      	b.n	800f530 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f4fa:	78fb      	ldrb	r3, [r7, #3]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d115      	bne.n	800f52c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f50c:	200a      	movs	r0, #10
 800f50e:	f7f3 f8f9 	bl	8002704 <HAL_Delay>
      ms += 10U;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	330a      	adds	r3, #10
 800f516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f001 f922 	bl	8010762 <USB_GetMode>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d005      	beq.n	800f530 <USB_SetCurrentMode+0x84>
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2bc7      	cmp	r3, #199	@ 0xc7
 800f528:	d9f0      	bls.n	800f50c <USB_SetCurrentMode+0x60>
 800f52a:	e001      	b.n	800f530 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	e005      	b.n	800f53c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2bc8      	cmp	r3, #200	@ 0xc8
 800f534:	d101      	bne.n	800f53a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f536:	2301      	movs	r3, #1
 800f538:	e000      	b.n	800f53c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f544:	b084      	sub	sp, #16
 800f546:	b580      	push	{r7, lr}
 800f548:	b086      	sub	sp, #24
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f55e:	2300      	movs	r3, #0
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	e009      	b.n	800f578 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	3340      	adds	r3, #64	@ 0x40
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	2200      	movs	r2, #0
 800f570:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	3301      	adds	r3, #1
 800f576:	613b      	str	r3, [r7, #16]
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2b0e      	cmp	r3, #14
 800f57c:	d9f2      	bls.n	800f564 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f57e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f582:	2b00      	cmp	r3, #0
 800f584:	d11c      	bne.n	800f5c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f594:	f043 0302 	orr.w	r3, r3, #2
 800f598:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
 800f5be:	e005      	b.n	800f5cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f5d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d10d      	bne.n	800f5fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d104      	bne.n	800f5f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 f968 	bl	800f8c0 <USB_SetDevSpeed>
 800f5f0:	e008      	b.n	800f604 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f963 	bl	800f8c0 <USB_SetDevSpeed>
 800f5fa:	e003      	b.n	800f604 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f5fc:	2103      	movs	r1, #3
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 f95e 	bl	800f8c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f604:	2110      	movs	r1, #16
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 f8fa 	bl	800f800 <USB_FlushTxFifo>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d001      	beq.n	800f616 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f612:	2301      	movs	r3, #1
 800f614:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 f924 	bl	800f864 <USB_FlushRxFifo>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f62c:	461a      	mov	r2, r3
 800f62e:	2300      	movs	r3, #0
 800f630:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f638:	461a      	mov	r2, r3
 800f63a:	2300      	movs	r3, #0
 800f63c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f644:	461a      	mov	r2, r3
 800f646:	2300      	movs	r3, #0
 800f648:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f64a:	2300      	movs	r3, #0
 800f64c:	613b      	str	r3, [r7, #16]
 800f64e:	e043      	b.n	800f6d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f666:	d118      	bne.n	800f69a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10a      	bne.n	800f684 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	015a      	lsls	r2, r3, #5
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f67a:	461a      	mov	r2, r3
 800f67c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e013      	b.n	800f6ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f690:	461a      	mov	r2, r3
 800f692:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	e008      	b.n	800f6ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	015a      	lsls	r2, r3, #5
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	015a      	lsls	r2, r3, #5
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f6d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	613b      	str	r3, [r7, #16]
 800f6d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f6dc:	461a      	mov	r2, r3
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d3b5      	bcc.n	800f650 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	613b      	str	r3, [r7, #16]
 800f6e8:	e043      	b.n	800f772 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	015a      	lsls	r2, r3, #5
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f700:	d118      	bne.n	800f734 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	015a      	lsls	r2, r3, #5
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4413      	add	r3, r2
 800f710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f714:	461a      	mov	r2, r3
 800f716:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f71a:	6013      	str	r3, [r2, #0]
 800f71c:	e013      	b.n	800f746 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	015a      	lsls	r2, r3, #5
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	4413      	add	r3, r2
 800f726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f72a:	461a      	mov	r2, r3
 800f72c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	e008      	b.n	800f746 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	015a      	lsls	r2, r3, #5
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	4413      	add	r3, r2
 800f73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f740:	461a      	mov	r2, r3
 800f742:	2300      	movs	r3, #0
 800f744:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	015a      	lsls	r2, r3, #5
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	4413      	add	r3, r2
 800f74e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f752:	461a      	mov	r2, r3
 800f754:	2300      	movs	r3, #0
 800f756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	015a      	lsls	r2, r3, #5
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4413      	add	r3, r2
 800f760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f764:	461a      	mov	r2, r3
 800f766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f76a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	3301      	adds	r3, #1
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f776:	461a      	mov	r2, r3
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d3b5      	bcc.n	800f6ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f78c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f790:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f79e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f7a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d105      	bne.n	800f7b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	f043 0210 	orr.w	r2, r3, #16
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	699a      	ldr	r2, [r3, #24]
 800f7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f7f8 <USB_DevInit+0x2b4>)
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f7c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d005      	beq.n	800f7d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	f043 0208 	orr.w	r2, r3, #8
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f7d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d105      	bne.n	800f7e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	699a      	ldr	r2, [r3, #24]
 800f7e0:	4b06      	ldr	r3, [pc, #24]	@ (800f7fc <USB_DevInit+0x2b8>)
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3718      	adds	r7, #24
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f7f4:	b004      	add	sp, #16
 800f7f6:	4770      	bx	lr
 800f7f8:	803c3800 	.word	0x803c3800
 800f7fc:	40000004 	.word	0x40000004

0800f800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f800:	b480      	push	{r7}
 800f802:	b085      	sub	sp, #20
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3301      	adds	r3, #1
 800f812:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f81a:	d901      	bls.n	800f820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f81c:	2303      	movs	r3, #3
 800f81e:	e01b      	b.n	800f858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	daf2      	bge.n	800f80e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	019b      	lsls	r3, r3, #6
 800f830:	f043 0220 	orr.w	r2, r3, #32
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3301      	adds	r3, #1
 800f83c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f844:	d901      	bls.n	800f84a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f846:	2303      	movs	r3, #3
 800f848:	e006      	b.n	800f858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	f003 0320 	and.w	r3, r3, #32
 800f852:	2b20      	cmp	r3, #32
 800f854:	d0f0      	beq.n	800f838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f86c:	2300      	movs	r3, #0
 800f86e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3301      	adds	r3, #1
 800f874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f87c:	d901      	bls.n	800f882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e018      	b.n	800f8b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	2b00      	cmp	r3, #0
 800f888:	daf2      	bge.n	800f870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2210      	movs	r2, #16
 800f892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	3301      	adds	r3, #1
 800f898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f8a0:	d901      	bls.n	800f8a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	e006      	b.n	800f8b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	691b      	ldr	r3, [r3, #16]
 800f8aa:	f003 0310 	and.w	r3, r3, #16
 800f8ae:	2b10      	cmp	r3, #16
 800f8b0:	d0f0      	beq.n	800f894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b087      	sub	sp, #28
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	f003 0306 	and.w	r3, r3, #6
 800f90a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d102      	bne.n	800f918 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f912:	2300      	movs	r3, #0
 800f914:	75fb      	strb	r3, [r7, #23]
 800f916:	e00a      	b.n	800f92e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d002      	beq.n	800f924 <USB_GetDevSpeed+0x32>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b06      	cmp	r3, #6
 800f922:	d102      	bne.n	800f92a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f924:	2302      	movs	r3, #2
 800f926:	75fb      	strb	r3, [r7, #23]
 800f928:	e001      	b.n	800f92e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f92a:	230f      	movs	r3, #15
 800f92c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f930:	4618      	mov	r0, r3
 800f932:	371c      	adds	r7, #28
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	785b      	ldrb	r3, [r3, #1]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d139      	bne.n	800f9cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f95e:	69da      	ldr	r2, [r3, #28]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f003 030f 	and.w	r3, r3, #15
 800f968:	2101      	movs	r1, #1
 800f96a:	fa01 f303 	lsl.w	r3, r1, r3
 800f96e:	b29b      	uxth	r3, r3
 800f970:	68f9      	ldr	r1, [r7, #12]
 800f972:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f976:	4313      	orrs	r3, r2
 800f978:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	4413      	add	r3, r2
 800f982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d153      	bne.n	800fa38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	015a      	lsls	r2, r3, #5
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	4413      	add	r3, r2
 800f998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	791b      	ldrb	r3, [r3, #4]
 800f9aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f9ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	059b      	lsls	r3, r3, #22
 800f9b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	0159      	lsls	r1, r3, #5
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	440b      	add	r3, r1
 800f9be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	4b20      	ldr	r3, [pc, #128]	@ (800fa48 <USB_ActivateEndpoint+0x10c>)
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	600b      	str	r3, [r1, #0]
 800f9ca:	e035      	b.n	800fa38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9d2:	69da      	ldr	r2, [r3, #28]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f003 030f 	and.w	r3, r3, #15
 800f9dc:	2101      	movs	r1, #1
 800f9de:	fa01 f303 	lsl.w	r3, r1, r3
 800f9e2:	041b      	lsls	r3, r3, #16
 800f9e4:	68f9      	ldr	r1, [r7, #12]
 800f9e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	015a      	lsls	r2, r3, #5
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d119      	bne.n	800fa38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	015a      	lsls	r2, r3, #5
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	791b      	ldrb	r3, [r3, #4]
 800fa1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fa20:	430b      	orrs	r3, r1
 800fa22:	431a      	orrs	r2, r3
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	0159      	lsls	r1, r3, #5
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	440b      	add	r3, r1
 800fa2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa30:	4619      	mov	r1, r3
 800fa32:	4b05      	ldr	r3, [pc, #20]	@ (800fa48 <USB_ActivateEndpoint+0x10c>)
 800fa34:	4313      	orrs	r3, r2
 800fa36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	10008000 	.word	0x10008000

0800fa4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	785b      	ldrb	r3, [r3, #1]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d161      	bne.n	800fb2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa7e:	d11f      	bne.n	800fac0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	015a      	lsls	r2, r3, #5
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4413      	add	r3, r2
 800fa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	0151      	lsls	r1, r2, #5
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	440a      	add	r2, r1
 800fa96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fa9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	015a      	lsls	r2, r3, #5
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4413      	add	r3, r2
 800faa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68ba      	ldr	r2, [r7, #8]
 800fab0:	0151      	lsls	r1, r2, #5
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	440a      	add	r2, r1
 800fab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800faba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fabe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f003 030f 	and.w	r3, r3, #15
 800fad0:	2101      	movs	r1, #1
 800fad2:	fa01 f303 	lsl.w	r3, r1, r3
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	43db      	mvns	r3, r3
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fae0:	4013      	ands	r3, r2
 800fae2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faea:	69da      	ldr	r2, [r3, #28]
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	f003 030f 	and.w	r3, r3, #15
 800faf4:	2101      	movs	r1, #1
 800faf6:	fa01 f303 	lsl.w	r3, r1, r3
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	43db      	mvns	r3, r3
 800fafe:	68f9      	ldr	r1, [r7, #12]
 800fb00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb04:	4013      	ands	r3, r2
 800fb06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	015a      	lsls	r2, r3, #5
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	4413      	add	r3, r2
 800fb10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	0159      	lsls	r1, r3, #5
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	440b      	add	r3, r1
 800fb1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb22:	4619      	mov	r1, r3
 800fb24:	4b35      	ldr	r3, [pc, #212]	@ (800fbfc <USB_DeactivateEndpoint+0x1b0>)
 800fb26:	4013      	ands	r3, r2
 800fb28:	600b      	str	r3, [r1, #0]
 800fb2a:	e060      	b.n	800fbee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fb3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fb42:	d11f      	bne.n	800fb84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	015a      	lsls	r2, r3, #5
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	0151      	lsls	r1, r2, #5
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	440a      	add	r2, r1
 800fb5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fb62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	0151      	lsls	r1, r2, #5
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	440a      	add	r2, r1
 800fb7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fb82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	f003 030f 	and.w	r3, r3, #15
 800fb94:	2101      	movs	r1, #1
 800fb96:	fa01 f303 	lsl.w	r3, r1, r3
 800fb9a:	041b      	lsls	r3, r3, #16
 800fb9c:	43db      	mvns	r3, r3
 800fb9e:	68f9      	ldr	r1, [r7, #12]
 800fba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fba4:	4013      	ands	r3, r2
 800fba6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbae:	69da      	ldr	r2, [r3, #28]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	f003 030f 	and.w	r3, r3, #15
 800fbb8:	2101      	movs	r1, #1
 800fbba:	fa01 f303 	lsl.w	r3, r1, r3
 800fbbe:	041b      	lsls	r3, r3, #16
 800fbc0:	43db      	mvns	r3, r3
 800fbc2:	68f9      	ldr	r1, [r7, #12]
 800fbc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fbc8:	4013      	ands	r3, r2
 800fbca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	015a      	lsls	r2, r3, #5
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	0159      	lsls	r1, r3, #5
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	440b      	add	r3, r1
 800fbe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4b05      	ldr	r3, [pc, #20]	@ (800fc00 <USB_DeactivateEndpoint+0x1b4>)
 800fbea:	4013      	ands	r3, r2
 800fbec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fbee:	2300      	movs	r3, #0
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3714      	adds	r7, #20
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr
 800fbfc:	ec337800 	.word	0xec337800
 800fc00:	eff37800 	.word	0xeff37800

0800fc04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08a      	sub	sp, #40	@ 0x28
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	785b      	ldrb	r3, [r3, #1]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	f040 8181 	bne.w	800ff28 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d132      	bne.n	800fc94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	015a      	lsls	r2, r3, #5
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	4413      	add	r3, r2
 800fc36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc3a:	691a      	ldr	r2, [r3, #16]
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	0159      	lsls	r1, r3, #5
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	440b      	add	r3, r1
 800fc44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc48:	4619      	mov	r1, r3
 800fc4a:	4ba5      	ldr	r3, [pc, #660]	@ (800fee0 <USB_EPStartXfer+0x2dc>)
 800fc4c:	4013      	ands	r3, r2
 800fc4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	69ba      	ldr	r2, [r7, #24]
 800fc60:	0151      	lsls	r1, r2, #5
 800fc62:	69fa      	ldr	r2, [r7, #28]
 800fc64:	440a      	add	r2, r1
 800fc66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	015a      	lsls	r2, r3, #5
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	4413      	add	r3, r2
 800fc78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc7c:	691a      	ldr	r2, [r3, #16]
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	0159      	lsls	r1, r3, #5
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	440b      	add	r3, r1
 800fc86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4b95      	ldr	r3, [pc, #596]	@ (800fee4 <USB_EPStartXfer+0x2e0>)
 800fc8e:	4013      	ands	r3, r2
 800fc90:	610b      	str	r3, [r1, #16]
 800fc92:	e092      	b.n	800fdba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	015a      	lsls	r2, r3, #5
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca0:	691a      	ldr	r2, [r3, #16]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	0159      	lsls	r1, r3, #5
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	440b      	add	r3, r1
 800fcaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4b8c      	ldr	r3, [pc, #560]	@ (800fee4 <USB_EPStartXfer+0x2e0>)
 800fcb2:	4013      	ands	r3, r2
 800fcb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	015a      	lsls	r2, r3, #5
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcc2:	691a      	ldr	r2, [r3, #16]
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	0159      	lsls	r1, r3, #5
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	440b      	add	r3, r1
 800fccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4b83      	ldr	r3, [pc, #524]	@ (800fee0 <USB_EPStartXfer+0x2dc>)
 800fcd4:	4013      	ands	r3, r2
 800fcd6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d11a      	bne.n	800fd14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	691a      	ldr	r2, [r3, #16]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d903      	bls.n	800fcf2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	689a      	ldr	r2, [r3, #8]
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	015a      	lsls	r2, r3, #5
 800fcf6:	69fb      	ldr	r3, [r7, #28]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	0151      	lsls	r1, r2, #5
 800fd04:	69fa      	ldr	r2, [r7, #28]
 800fd06:	440a      	add	r2, r1
 800fd08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fd10:	6113      	str	r3, [r2, #16]
 800fd12:	e01b      	b.n	800fd4c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd20:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	6919      	ldr	r1, [r3, #16]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	440b      	add	r3, r1
 800fd2c:	1e59      	subs	r1, r3, #1
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd36:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fd38:	4b6b      	ldr	r3, [pc, #428]	@ (800fee8 <USB_EPStartXfer+0x2e4>)
 800fd3a:	400b      	ands	r3, r1
 800fd3c:	69b9      	ldr	r1, [r7, #24]
 800fd3e:	0148      	lsls	r0, r1, #5
 800fd40:	69f9      	ldr	r1, [r7, #28]
 800fd42:	4401      	add	r1, r0
 800fd44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	015a      	lsls	r2, r3, #5
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	4413      	add	r3, r2
 800fd54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd58:	691a      	ldr	r2, [r3, #16]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd62:	69b9      	ldr	r1, [r7, #24]
 800fd64:	0148      	lsls	r0, r1, #5
 800fd66:	69f9      	ldr	r1, [r7, #28]
 800fd68:	4401      	add	r1, r0
 800fd6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	791b      	ldrb	r3, [r3, #4]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d11f      	bne.n	800fdba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	69ba      	ldr	r2, [r7, #24]
 800fd8a:	0151      	lsls	r1, r2, #5
 800fd8c:	69fa      	ldr	r2, [r7, #28]
 800fd8e:	440a      	add	r2, r1
 800fd90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd94:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fd98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	015a      	lsls	r2, r3, #5
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	4413      	add	r3, r2
 800fda2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	0151      	lsls	r1, r2, #5
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	440a      	add	r2, r1
 800fdb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fdb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d14b      	bne.n	800fe58 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d009      	beq.n	800fddc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fdc8:	69bb      	ldr	r3, [r7, #24]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	791b      	ldrb	r3, [r3, #4]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d128      	bne.n	800fe36 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d110      	bne.n	800fe16 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	015a      	lsls	r2, r3, #5
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	69ba      	ldr	r2, [r7, #24]
 800fe04:	0151      	lsls	r1, r2, #5
 800fe06:	69fa      	ldr	r2, [r7, #28]
 800fe08:	440a      	add	r2, r1
 800fe0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	e00f      	b.n	800fe36 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	015a      	lsls	r2, r3, #5
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	69ba      	ldr	r2, [r7, #24]
 800fe26:	0151      	lsls	r1, r2, #5
 800fe28:	69fa      	ldr	r2, [r7, #28]
 800fe2a:	440a      	add	r2, r1
 800fe2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	015a      	lsls	r2, r3, #5
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	69ba      	ldr	r2, [r7, #24]
 800fe46:	0151      	lsls	r1, r2, #5
 800fe48:	69fa      	ldr	r2, [r7, #28]
 800fe4a:	440a      	add	r2, r1
 800fe4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fe54:	6013      	str	r3, [r2, #0]
 800fe56:	e16a      	b.n	801012e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	015a      	lsls	r2, r3, #5
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	4413      	add	r3, r2
 800fe60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	69ba      	ldr	r2, [r7, #24]
 800fe68:	0151      	lsls	r1, r2, #5
 800fe6a:	69fa      	ldr	r2, [r7, #28]
 800fe6c:	440a      	add	r2, r1
 800fe6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fe76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	791b      	ldrb	r3, [r3, #4]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d015      	beq.n	800feac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 8152 	beq.w	801012e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	f003 030f 	and.w	r3, r3, #15
 800fe9a:	2101      	movs	r1, #1
 800fe9c:	fa01 f303 	lsl.w	r3, r1, r3
 800fea0:	69f9      	ldr	r1, [r7, #28]
 800fea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fea6:	4313      	orrs	r3, r2
 800fea8:	634b      	str	r3, [r1, #52]	@ 0x34
 800feaa:	e140      	b.n	801012e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d117      	bne.n	800feec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	015a      	lsls	r2, r3, #5
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	4413      	add	r3, r2
 800fec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	69ba      	ldr	r2, [r7, #24]
 800fecc:	0151      	lsls	r1, r2, #5
 800fece:	69fa      	ldr	r2, [r7, #28]
 800fed0:	440a      	add	r2, r1
 800fed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	e016      	b.n	800ff0c <USB_EPStartXfer+0x308>
 800fede:	bf00      	nop
 800fee0:	e007ffff 	.word	0xe007ffff
 800fee4:	fff80000 	.word	0xfff80000
 800fee8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	015a      	lsls	r2, r3, #5
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	4413      	add	r3, r2
 800fef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	0151      	lsls	r1, r2, #5
 800fefe:	69fa      	ldr	r2, [r7, #28]
 800ff00:	440a      	add	r2, r1
 800ff02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ff0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	68d9      	ldr	r1, [r3, #12]
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	781a      	ldrb	r2, [r3, #0]
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	691b      	ldr	r3, [r3, #16]
 800ff18:	b298      	uxth	r0, r3
 800ff1a:	79fb      	ldrb	r3, [r7, #7]
 800ff1c:	9300      	str	r3, [sp, #0]
 800ff1e:	4603      	mov	r3, r0
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f000 f9b9 	bl	8010298 <USB_WritePacket>
 800ff26:	e102      	b.n	801012e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff34:	691a      	ldr	r2, [r3, #16]
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	0159      	lsls	r1, r3, #5
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	440b      	add	r3, r1
 800ff3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff42:	4619      	mov	r1, r3
 800ff44:	4b7c      	ldr	r3, [pc, #496]	@ (8010138 <USB_EPStartXfer+0x534>)
 800ff46:	4013      	ands	r3, r2
 800ff48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff56:	691a      	ldr	r2, [r3, #16]
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	0159      	lsls	r1, r3, #5
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	440b      	add	r3, r1
 800ff60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff64:	4619      	mov	r1, r3
 800ff66:	4b75      	ldr	r3, [pc, #468]	@ (801013c <USB_EPStartXfer+0x538>)
 800ff68:	4013      	ands	r3, r2
 800ff6a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d12f      	bne.n	800ffd2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d003      	beq.n	800ff82 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	689a      	ldr	r2, [r3, #8]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	689a      	ldr	r2, [r3, #8]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	015a      	lsls	r2, r3, #5
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	4413      	add	r3, r2
 800ff92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff96:	691a      	ldr	r2, [r3, #16]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	6a1b      	ldr	r3, [r3, #32]
 800ff9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffa0:	69b9      	ldr	r1, [r7, #24]
 800ffa2:	0148      	lsls	r0, r1, #5
 800ffa4:	69f9      	ldr	r1, [r7, #28]
 800ffa6:	4401      	add	r1, r0
 800ffa8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ffac:	4313      	orrs	r3, r2
 800ffae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	015a      	lsls	r2, r3, #5
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	69ba      	ldr	r2, [r7, #24]
 800ffc0:	0151      	lsls	r1, r2, #5
 800ffc2:	69fa      	ldr	r2, [r7, #28]
 800ffc4:	440a      	add	r2, r1
 800ffc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ffca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ffce:	6113      	str	r3, [r2, #16]
 800ffd0:	e05f      	b.n	8010092 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d123      	bne.n	8010022 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	015a      	lsls	r2, r3, #5
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffe6:	691a      	ldr	r2, [r3, #16]
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fff0:	69b9      	ldr	r1, [r7, #24]
 800fff2:	0148      	lsls	r0, r1, #5
 800fff4:	69f9      	ldr	r1, [r7, #28]
 800fff6:	4401      	add	r1, r0
 800fff8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fffc:	4313      	orrs	r3, r2
 800fffe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	015a      	lsls	r2, r3, #5
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	4413      	add	r3, r2
 8010008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	69ba      	ldr	r2, [r7, #24]
 8010010:	0151      	lsls	r1, r2, #5
 8010012:	69fa      	ldr	r2, [r7, #28]
 8010014:	440a      	add	r2, r1
 8010016:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801001a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801001e:	6113      	str	r3, [r2, #16]
 8010020:	e037      	b.n	8010092 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	691a      	ldr	r2, [r3, #16]
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	4413      	add	r3, r2
 801002c:	1e5a      	subs	r2, r3, #1
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	fbb2 f3f3 	udiv	r3, r2, r3
 8010036:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	8afa      	ldrh	r2, [r7, #22]
 801003e:	fb03 f202 	mul.w	r2, r3, r2
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010052:	691a      	ldr	r2, [r3, #16]
 8010054:	8afb      	ldrh	r3, [r7, #22]
 8010056:	04d9      	lsls	r1, r3, #19
 8010058:	4b39      	ldr	r3, [pc, #228]	@ (8010140 <USB_EPStartXfer+0x53c>)
 801005a:	400b      	ands	r3, r1
 801005c:	69b9      	ldr	r1, [r7, #24]
 801005e:	0148      	lsls	r0, r1, #5
 8010060:	69f9      	ldr	r1, [r7, #28]
 8010062:	4401      	add	r1, r0
 8010064:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010068:	4313      	orrs	r3, r2
 801006a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010078:	691a      	ldr	r2, [r3, #16]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010082:	69b9      	ldr	r1, [r7, #24]
 8010084:	0148      	lsls	r0, r1, #5
 8010086:	69f9      	ldr	r1, [r7, #28]
 8010088:	4401      	add	r1, r0
 801008a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801008e:	4313      	orrs	r3, r2
 8010090:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d10d      	bne.n	80100b4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d009      	beq.n	80100b4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	68d9      	ldr	r1, [r3, #12]
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	015a      	lsls	r2, r3, #5
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	4413      	add	r3, r2
 80100ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100b0:	460a      	mov	r2, r1
 80100b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	791b      	ldrb	r3, [r3, #4]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d128      	bne.n	801010e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d110      	bne.n	80100ee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	015a      	lsls	r2, r3, #5
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	4413      	add	r3, r2
 80100d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	69ba      	ldr	r2, [r7, #24]
 80100dc:	0151      	lsls	r1, r2, #5
 80100de:	69fa      	ldr	r2, [r7, #28]
 80100e0:	440a      	add	r2, r1
 80100e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80100e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	e00f      	b.n	801010e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	015a      	lsls	r2, r3, #5
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	4413      	add	r3, r2
 80100f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	0151      	lsls	r1, r2, #5
 8010100:	69fa      	ldr	r2, [r7, #28]
 8010102:	440a      	add	r2, r1
 8010104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801010c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	015a      	lsls	r2, r3, #5
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	4413      	add	r3, r2
 8010116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	69ba      	ldr	r2, [r7, #24]
 801011e:	0151      	lsls	r1, r2, #5
 8010120:	69fa      	ldr	r2, [r7, #28]
 8010122:	440a      	add	r2, r1
 8010124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801012c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3720      	adds	r7, #32
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	fff80000 	.word	0xfff80000
 801013c:	e007ffff 	.word	0xe007ffff
 8010140:	1ff80000 	.word	0x1ff80000

08010144 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801014e:	2300      	movs	r3, #0
 8010150:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010152:	2300      	movs	r3, #0
 8010154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	785b      	ldrb	r3, [r3, #1]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d14a      	bne.n	80101f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801017a:	f040 8086 	bne.w	801028a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	015a      	lsls	r2, r3, #5
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	4413      	add	r3, r2
 8010188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	683a      	ldr	r2, [r7, #0]
 8010190:	7812      	ldrb	r2, [r2, #0]
 8010192:	0151      	lsls	r1, r2, #5
 8010194:	693a      	ldr	r2, [r7, #16]
 8010196:	440a      	add	r2, r1
 8010198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801019c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80101a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	015a      	lsls	r2, r3, #5
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	4413      	add	r3, r2
 80101ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	7812      	ldrb	r2, [r2, #0]
 80101b6:	0151      	lsls	r1, r2, #5
 80101b8:	693a      	ldr	r2, [r7, #16]
 80101ba:	440a      	add	r2, r1
 80101bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80101c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	3301      	adds	r3, #1
 80101ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d902      	bls.n	80101dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80101d6:	2301      	movs	r3, #1
 80101d8:	75fb      	strb	r3, [r7, #23]
          break;
 80101da:	e056      	b.n	801028a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	015a      	lsls	r2, r3, #5
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	4413      	add	r3, r2
 80101e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80101f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80101f4:	d0e7      	beq.n	80101c6 <USB_EPStopXfer+0x82>
 80101f6:	e048      	b.n	801028a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	015a      	lsls	r2, r3, #5
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	4413      	add	r3, r2
 8010202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801020c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010210:	d13b      	bne.n	801028a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	015a      	lsls	r2, r3, #5
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	4413      	add	r3, r2
 801021c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	7812      	ldrb	r2, [r2, #0]
 8010226:	0151      	lsls	r1, r2, #5
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	440a      	add	r2, r1
 801022c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010230:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010234:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	015a      	lsls	r2, r3, #5
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	4413      	add	r3, r2
 8010240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	7812      	ldrb	r2, [r2, #0]
 801024a:	0151      	lsls	r1, r2, #5
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	440a      	add	r2, r1
 8010250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010254:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010258:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	3301      	adds	r3, #1
 801025e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010266:	4293      	cmp	r3, r2
 8010268:	d902      	bls.n	8010270 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801026a:	2301      	movs	r3, #1
 801026c:	75fb      	strb	r3, [r7, #23]
          break;
 801026e:	e00c      	b.n	801028a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	015a      	lsls	r2, r3, #5
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	4413      	add	r3, r2
 801027a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010288:	d0e7      	beq.n	801025a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801028a:	7dfb      	ldrb	r3, [r7, #23]
}
 801028c:	4618      	mov	r0, r3
 801028e:	371c      	adds	r7, #28
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010298:	b480      	push	{r7}
 801029a:	b089      	sub	sp, #36	@ 0x24
 801029c:	af00      	add	r7, sp, #0
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	4611      	mov	r1, r2
 80102a4:	461a      	mov	r2, r3
 80102a6:	460b      	mov	r3, r1
 80102a8:	71fb      	strb	r3, [r7, #7]
 80102aa:	4613      	mov	r3, r2
 80102ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80102b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d123      	bne.n	8010306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80102be:	88bb      	ldrh	r3, [r7, #4]
 80102c0:	3303      	adds	r3, #3
 80102c2:	089b      	lsrs	r3, r3, #2
 80102c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80102c6:	2300      	movs	r3, #0
 80102c8:	61bb      	str	r3, [r7, #24]
 80102ca:	e018      	b.n	80102fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	031a      	lsls	r2, r3, #12
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	4413      	add	r3, r2
 80102d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80102d8:	461a      	mov	r2, r3
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	3301      	adds	r3, #1
 80102e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	3301      	adds	r3, #1
 80102ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	3301      	adds	r3, #1
 80102f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	3301      	adds	r3, #1
 80102f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	3301      	adds	r3, #1
 80102fc:	61bb      	str	r3, [r7, #24]
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	429a      	cmp	r2, r3
 8010304:	d3e2      	bcc.n	80102cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	3724      	adds	r7, #36	@ 0x24
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010314:	b480      	push	{r7}
 8010316:	b08b      	sub	sp, #44	@ 0x2c
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	4613      	mov	r3, r2
 8010320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801032a:	88fb      	ldrh	r3, [r7, #6]
 801032c:	089b      	lsrs	r3, r3, #2
 801032e:	b29b      	uxth	r3, r3
 8010330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010332:	88fb      	ldrh	r3, [r7, #6]
 8010334:	f003 0303 	and.w	r3, r3, #3
 8010338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801033a:	2300      	movs	r3, #0
 801033c:	623b      	str	r3, [r7, #32]
 801033e:	e014      	b.n	801036a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034a:	601a      	str	r2, [r3, #0]
    pDest++;
 801034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034e:	3301      	adds	r3, #1
 8010350:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010354:	3301      	adds	r3, #1
 8010356:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035a:	3301      	adds	r3, #1
 801035c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801035e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010360:	3301      	adds	r3, #1
 8010362:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010364:	6a3b      	ldr	r3, [r7, #32]
 8010366:	3301      	adds	r3, #1
 8010368:	623b      	str	r3, [r7, #32]
 801036a:	6a3a      	ldr	r2, [r7, #32]
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	429a      	cmp	r2, r3
 8010370:	d3e6      	bcc.n	8010340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010372:	8bfb      	ldrh	r3, [r7, #30]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d01e      	beq.n	80103b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010378:	2300      	movs	r3, #0
 801037a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010382:	461a      	mov	r2, r3
 8010384:	f107 0310 	add.w	r3, r7, #16
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	b2db      	uxtb	r3, r3
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	fa22 f303 	lsr.w	r3, r2, r3
 8010398:	b2da      	uxtb	r2, r3
 801039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039c:	701a      	strb	r2, [r3, #0]
      i++;
 801039e:	6a3b      	ldr	r3, [r7, #32]
 80103a0:	3301      	adds	r3, #1
 80103a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80103a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a6:	3301      	adds	r3, #1
 80103a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80103aa:	8bfb      	ldrh	r3, [r7, #30]
 80103ac:	3b01      	subs	r3, #1
 80103ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80103b0:	8bfb      	ldrh	r3, [r7, #30]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1ea      	bne.n	801038c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80103b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	372c      	adds	r7, #44	@ 0x2c
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	785b      	ldrb	r3, [r3, #1]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d12c      	bne.n	801043a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	015a      	lsls	r2, r3, #5
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	4413      	add	r3, r2
 80103e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	db12      	blt.n	8010418 <USB_EPSetStall+0x54>
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00f      	beq.n	8010418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	015a      	lsls	r2, r3, #5
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4413      	add	r3, r2
 8010400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	0151      	lsls	r1, r2, #5
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	440a      	add	r2, r1
 801040e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010412:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	015a      	lsls	r2, r3, #5
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4413      	add	r3, r2
 8010420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	0151      	lsls	r1, r2, #5
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	440a      	add	r2, r1
 801042e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010432:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010436:	6013      	str	r3, [r2, #0]
 8010438:	e02b      	b.n	8010492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	015a      	lsls	r2, r3, #5
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	4413      	add	r3, r2
 8010442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	db12      	blt.n	8010472 <USB_EPSetStall+0xae>
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00f      	beq.n	8010472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	015a      	lsls	r2, r3, #5
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	0151      	lsls	r1, r2, #5
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	440a      	add	r2, r1
 8010468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801046c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	015a      	lsls	r2, r3, #5
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	4413      	add	r3, r2
 801047a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	68ba      	ldr	r2, [r7, #8]
 8010482:	0151      	lsls	r1, r2, #5
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	440a      	add	r2, r1
 8010488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801048c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	3714      	adds	r7, #20
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	785b      	ldrb	r3, [r3, #1]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d128      	bne.n	801050e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	015a      	lsls	r2, r3, #5
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4413      	add	r3, r2
 80104c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	0151      	lsls	r1, r2, #5
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	440a      	add	r2, r1
 80104d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80104da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	791b      	ldrb	r3, [r3, #4]
 80104e0:	2b03      	cmp	r3, #3
 80104e2:	d003      	beq.n	80104ec <USB_EPClearStall+0x4c>
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	791b      	ldrb	r3, [r3, #4]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d138      	bne.n	801055e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	0151      	lsls	r1, r2, #5
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	440a      	add	r2, r1
 8010502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	e027      	b.n	801055e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	015a      	lsls	r2, r3, #5
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	4413      	add	r3, r2
 8010516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68ba      	ldr	r2, [r7, #8]
 801051e:	0151      	lsls	r1, r2, #5
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	440a      	add	r2, r1
 8010524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010528:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801052c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	791b      	ldrb	r3, [r3, #4]
 8010532:	2b03      	cmp	r3, #3
 8010534:	d003      	beq.n	801053e <USB_EPClearStall+0x9e>
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	791b      	ldrb	r3, [r3, #4]
 801053a:	2b02      	cmp	r3, #2
 801053c:	d10f      	bne.n	801055e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	015a      	lsls	r2, r3, #5
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	4413      	add	r3, r2
 8010546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	0151      	lsls	r1, r2, #5
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	440a      	add	r2, r1
 8010554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801055c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3714      	adds	r7, #20
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801058a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801058e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	78fb      	ldrb	r3, [r7, #3]
 801059a:	011b      	lsls	r3, r3, #4
 801059c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80105a0:	68f9      	ldr	r1, [r7, #12]
 80105a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80105a6:	4313      	orrs	r3, r2
 80105a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b085      	sub	sp, #20
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80105d2:	f023 0303 	bic.w	r3, r3, #3
 80105d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80105e6:	f023 0302 	bic.w	r3, r3, #2
 80105ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010614:	f023 0303 	bic.w	r3, r3, #3
 8010618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010628:	f043 0302 	orr.w	r3, r3, #2
 801062c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3714      	adds	r7, #20
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801063c:	b480      	push	{r7}
 801063e:	b085      	sub	sp, #20
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	695b      	ldr	r3, [r3, #20]
 8010648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	4013      	ands	r3, r2
 8010652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010654:	68fb      	ldr	r3, [r7, #12]
}
 8010656:	4618      	mov	r0, r3
 8010658:	3714      	adds	r7, #20
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010662:	b480      	push	{r7}
 8010664:	b085      	sub	sp, #20
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801067e:	69db      	ldr	r3, [r3, #28]
 8010680:	68ba      	ldr	r2, [r7, #8]
 8010682:	4013      	ands	r3, r2
 8010684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	0c1b      	lsrs	r3, r3, #16
}
 801068a:	4618      	mov	r0, r3
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr

08010696 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010696:	b480      	push	{r7}
 8010698:	b085      	sub	sp, #20
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106b2:	69db      	ldr	r3, [r3, #28]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	4013      	ands	r3, r2
 80106b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	b29b      	uxth	r3, r3
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3714      	adds	r7, #20
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr

080106ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80106ca:	b480      	push	{r7}
 80106cc:	b085      	sub	sp, #20
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	460b      	mov	r3, r1
 80106d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80106da:	78fb      	ldrb	r3, [r7, #3]
 80106dc:	015a      	lsls	r2, r3, #5
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	4413      	add	r3, r2
 80106e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106f0:	695b      	ldr	r3, [r3, #20]
 80106f2:	68ba      	ldr	r2, [r7, #8]
 80106f4:	4013      	ands	r3, r2
 80106f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80106f8:	68bb      	ldr	r3, [r7, #8]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3714      	adds	r7, #20
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010706:	b480      	push	{r7}
 8010708:	b087      	sub	sp, #28
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	460b      	mov	r3, r1
 8010710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010728:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801072a:	78fb      	ldrb	r3, [r7, #3]
 801072c:	f003 030f 	and.w	r3, r3, #15
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	fa22 f303 	lsr.w	r3, r2, r3
 8010736:	01db      	lsls	r3, r3, #7
 8010738:	b2db      	uxtb	r3, r3
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	4313      	orrs	r3, r2
 801073e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010740:	78fb      	ldrb	r3, [r7, #3]
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	4413      	add	r3, r2
 8010748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	4013      	ands	r3, r2
 8010752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010754:	68bb      	ldr	r3, [r7, #8]
}
 8010756:	4618      	mov	r0, r3
 8010758:	371c      	adds	r7, #28
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010762:	b480      	push	{r7}
 8010764:	b083      	sub	sp, #12
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	695b      	ldr	r3, [r3, #20]
 801076e:	f003 0301 	and.w	r3, r3, #1
}
 8010772:	4618      	mov	r0, r3
 8010774:	370c      	adds	r7, #12
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr
	...

08010780 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010780:	b480      	push	{r7}
 8010782:	b085      	sub	sp, #20
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801079a:	4619      	mov	r1, r3
 801079c:	4b09      	ldr	r3, [pc, #36]	@ (80107c4 <USB_ActivateSetup+0x44>)
 801079e:	4013      	ands	r3, r2
 80107a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80107b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr
 80107c4:	fffff800 	.word	0xfffff800

080107c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b087      	sub	sp, #28
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	460b      	mov	r3, r1
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	333c      	adds	r3, #60	@ 0x3c
 80107de:	3304      	adds	r3, #4
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	4a26      	ldr	r2, [pc, #152]	@ (8010880 <USB_EP0_OutStart+0xb8>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d90a      	bls.n	8010802 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80107f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80107fc:	d101      	bne.n	8010802 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	e037      	b.n	8010872 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010808:	461a      	mov	r2, r3
 801080a:	2300      	movs	r3, #0
 801080c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801081c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	697a      	ldr	r2, [r7, #20]
 801082c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010830:	f043 0318 	orr.w	r3, r3, #24
 8010834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801083c:	691b      	ldr	r3, [r3, #16]
 801083e:	697a      	ldr	r2, [r7, #20]
 8010840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010844:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010848:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801084a:	7afb      	ldrb	r3, [r7, #11]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d10f      	bne.n	8010870 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010856:	461a      	mov	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801086a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801086e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	371c      	adds	r7, #28
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	4f54300a 	.word	0x4f54300a

08010884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801088c:	2300      	movs	r3, #0
 801088e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	3301      	adds	r3, #1
 8010894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801089c:	d901      	bls.n	80108a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801089e:	2303      	movs	r3, #3
 80108a0:	e01b      	b.n	80108da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	daf2      	bge.n	8010890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80108aa:	2300      	movs	r3, #0
 80108ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	691b      	ldr	r3, [r3, #16]
 80108b2:	f043 0201 	orr.w	r2, r3, #1
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	3301      	adds	r3, #1
 80108be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108c6:	d901      	bls.n	80108cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80108c8:	2303      	movs	r3, #3
 80108ca:	e006      	b.n	80108da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	f003 0301 	and.w	r3, r3, #1
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d0f0      	beq.n	80108ba <USB_CoreReset+0x36>

  return HAL_OK;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
	...

080108e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80108f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80108f8:	f005 faa2 	bl	8015e40 <USBD_static_malloc>
 80108fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d109      	bne.n	8010918 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	32b0      	adds	r2, #176	@ 0xb0
 801090e:	2100      	movs	r1, #0
 8010910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010914:	2302      	movs	r3, #2
 8010916:	e0d4      	b.n	8010ac2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010918:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801091c:	2100      	movs	r1, #0
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f006 fd4f 	bl	80173c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	32b0      	adds	r2, #176	@ 0xb0
 801092e:	68f9      	ldr	r1, [r7, #12]
 8010930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	32b0      	adds	r2, #176	@ 0xb0
 801093e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	7c1b      	ldrb	r3, [r3, #16]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d138      	bne.n	80109c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010950:	4b5e      	ldr	r3, [pc, #376]	@ (8010acc <USBD_CDC_Init+0x1e4>)
 8010952:	7819      	ldrb	r1, [r3, #0]
 8010954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010958:	2202      	movs	r2, #2
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f005 f94d 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010960:	4b5a      	ldr	r3, [pc, #360]	@ (8010acc <USBD_CDC_Init+0x1e4>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f003 020f 	and.w	r2, r3, #15
 8010968:	6879      	ldr	r1, [r7, #4]
 801096a:	4613      	mov	r3, r2
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	4413      	add	r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	440b      	add	r3, r1
 8010974:	3324      	adds	r3, #36	@ 0x24
 8010976:	2201      	movs	r2, #1
 8010978:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801097a:	4b55      	ldr	r3, [pc, #340]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 801097c:	7819      	ldrb	r1, [r3, #0]
 801097e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010982:	2202      	movs	r2, #2
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f005 f938 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801098a:	4b51      	ldr	r3, [pc, #324]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	f003 020f 	and.w	r2, r3, #15
 8010992:	6879      	ldr	r1, [r7, #4]
 8010994:	4613      	mov	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4413      	add	r3, r2
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	440b      	add	r3, r1
 801099e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109a2:	2201      	movs	r2, #1
 80109a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80109a6:	4b4b      	ldr	r3, [pc, #300]	@ (8010ad4 <USBD_CDC_Init+0x1ec>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f003 020f 	and.w	r2, r3, #15
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	4613      	mov	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	440b      	add	r3, r1
 80109ba:	3326      	adds	r3, #38	@ 0x26
 80109bc:	2210      	movs	r2, #16
 80109be:	801a      	strh	r2, [r3, #0]
 80109c0:	e035      	b.n	8010a2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80109c2:	4b42      	ldr	r3, [pc, #264]	@ (8010acc <USBD_CDC_Init+0x1e4>)
 80109c4:	7819      	ldrb	r1, [r3, #0]
 80109c6:	2340      	movs	r3, #64	@ 0x40
 80109c8:	2202      	movs	r2, #2
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f005 f915 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80109d0:	4b3e      	ldr	r3, [pc, #248]	@ (8010acc <USBD_CDC_Init+0x1e4>)
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	f003 020f 	and.w	r2, r3, #15
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	4613      	mov	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4413      	add	r3, r2
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	440b      	add	r3, r1
 80109e4:	3324      	adds	r3, #36	@ 0x24
 80109e6:	2201      	movs	r2, #1
 80109e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80109ea:	4b39      	ldr	r3, [pc, #228]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 80109ec:	7819      	ldrb	r1, [r3, #0]
 80109ee:	2340      	movs	r3, #64	@ 0x40
 80109f0:	2202      	movs	r2, #2
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f005 f901 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80109f8:	4b35      	ldr	r3, [pc, #212]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	f003 020f 	and.w	r2, r3, #15
 8010a00:	6879      	ldr	r1, [r7, #4]
 8010a02:	4613      	mov	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	4413      	add	r3, r2
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	440b      	add	r3, r1
 8010a0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a10:	2201      	movs	r2, #1
 8010a12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010a14:	4b2f      	ldr	r3, [pc, #188]	@ (8010ad4 <USBD_CDC_Init+0x1ec>)
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f003 020f 	and.w	r2, r3, #15
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	4413      	add	r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	440b      	add	r3, r1
 8010a28:	3326      	adds	r3, #38	@ 0x26
 8010a2a:	2210      	movs	r2, #16
 8010a2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010a2e:	4b29      	ldr	r3, [pc, #164]	@ (8010ad4 <USBD_CDC_Init+0x1ec>)
 8010a30:	7819      	ldrb	r1, [r3, #0]
 8010a32:	2308      	movs	r3, #8
 8010a34:	2203      	movs	r2, #3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f005 f8df 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010a3c:	4b25      	ldr	r3, [pc, #148]	@ (8010ad4 <USBD_CDC_Init+0x1ec>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	f003 020f 	and.w	r2, r3, #15
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	4613      	mov	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	440b      	add	r3, r1
 8010a50:	3324      	adds	r3, #36	@ 0x24
 8010a52:	2201      	movs	r2, #1
 8010a54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	33b0      	adds	r3, #176	@ 0xb0
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2200      	movs	r2, #0
 8010a76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d101      	bne.n	8010a90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010a8c:	2302      	movs	r3, #2
 8010a8e:	e018      	b.n	8010ac2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	7c1b      	ldrb	r3, [r3, #16]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10a      	bne.n	8010aae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010a98:	4b0d      	ldr	r3, [pc, #52]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 8010a9a:	7819      	ldrb	r1, [r3, #0]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f005 f996 	bl	8015dd8 <USBD_LL_PrepareReceive>
 8010aac:	e008      	b.n	8010ac0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010aae:	4b08      	ldr	r3, [pc, #32]	@ (8010ad0 <USBD_CDC_Init+0x1e8>)
 8010ab0:	7819      	ldrb	r1, [r3, #0]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010ab8:	2340      	movs	r3, #64	@ 0x40
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f005 f98c 	bl	8015dd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3710      	adds	r7, #16
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	24000097 	.word	0x24000097
 8010ad0:	24000098 	.word	0x24000098
 8010ad4:	24000099 	.word	0x24000099

08010ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8010bd0 <USBD_CDC_DeInit+0xf8>)
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	4619      	mov	r1, r3
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f005 f8ab 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010af0:	4b37      	ldr	r3, [pc, #220]	@ (8010bd0 <USBD_CDC_DeInit+0xf8>)
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	f003 020f 	and.w	r2, r3, #15
 8010af8:	6879      	ldr	r1, [r7, #4]
 8010afa:	4613      	mov	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	4413      	add	r3, r2
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	440b      	add	r3, r1
 8010b04:	3324      	adds	r3, #36	@ 0x24
 8010b06:	2200      	movs	r2, #0
 8010b08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010b0a:	4b32      	ldr	r3, [pc, #200]	@ (8010bd4 <USBD_CDC_DeInit+0xfc>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	4619      	mov	r1, r3
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f005 f898 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010b16:	4b2f      	ldr	r3, [pc, #188]	@ (8010bd4 <USBD_CDC_DeInit+0xfc>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	f003 020f 	and.w	r2, r3, #15
 8010b1e:	6879      	ldr	r1, [r7, #4]
 8010b20:	4613      	mov	r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	440b      	add	r3, r1
 8010b2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b2e:	2200      	movs	r2, #0
 8010b30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010b32:	4b29      	ldr	r3, [pc, #164]	@ (8010bd8 <USBD_CDC_DeInit+0x100>)
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	4619      	mov	r1, r3
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f005 f884 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010b3e:	4b26      	ldr	r3, [pc, #152]	@ (8010bd8 <USBD_CDC_DeInit+0x100>)
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	f003 020f 	and.w	r2, r3, #15
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4413      	add	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	440b      	add	r3, r1
 8010b52:	3324      	adds	r3, #36	@ 0x24
 8010b54:	2200      	movs	r2, #0
 8010b56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010b58:	4b1f      	ldr	r3, [pc, #124]	@ (8010bd8 <USBD_CDC_DeInit+0x100>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	f003 020f 	and.w	r2, r3, #15
 8010b60:	6879      	ldr	r1, [r7, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	4413      	add	r3, r2
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3326      	adds	r3, #38	@ 0x26
 8010b6e:	2200      	movs	r2, #0
 8010b70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	32b0      	adds	r2, #176	@ 0xb0
 8010b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d01f      	beq.n	8010bc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	33b0      	adds	r3, #176	@ 0xb0
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4413      	add	r3, r2
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	32b0      	adds	r2, #176	@ 0xb0
 8010ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f005 f958 	bl	8015e5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	32b0      	adds	r2, #176	@ 0xb0
 8010bb6:	2100      	movs	r1, #0
 8010bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	24000097 	.word	0x24000097
 8010bd4:	24000098 	.word	0x24000098
 8010bd8:	24000099 	.word	0x24000099

08010bdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	32b0      	adds	r2, #176	@ 0xb0
 8010bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d101      	bne.n	8010c0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010c08:	2303      	movs	r3, #3
 8010c0a:	e0bf      	b.n	8010d8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d050      	beq.n	8010cba <USBD_CDC_Setup+0xde>
 8010c18:	2b20      	cmp	r3, #32
 8010c1a:	f040 80af 	bne.w	8010d7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	88db      	ldrh	r3, [r3, #6]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d03a      	beq.n	8010c9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	b25b      	sxtb	r3, r3
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	da1b      	bge.n	8010c68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	33b0      	adds	r3, #176	@ 0xb0
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	4413      	add	r3, r2
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010c46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010c48:	683a      	ldr	r2, [r7, #0]
 8010c4a:	88d2      	ldrh	r2, [r2, #6]
 8010c4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	88db      	ldrh	r3, [r3, #6]
 8010c52:	2b07      	cmp	r3, #7
 8010c54:	bf28      	it	cs
 8010c56:	2307      	movcs	r3, #7
 8010c58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	89fa      	ldrh	r2, [r7, #14]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f001 fdbd 	bl	80127e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010c66:	e090      	b.n	8010d8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	785a      	ldrb	r2, [r3, #1]
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	88db      	ldrh	r3, [r3, #6]
 8010c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8010c78:	d803      	bhi.n	8010c82 <USBD_CDC_Setup+0xa6>
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	88db      	ldrh	r3, [r3, #6]
 8010c7e:	b2da      	uxtb	r2, r3
 8010c80:	e000      	b.n	8010c84 <USBD_CDC_Setup+0xa8>
 8010c82:	2240      	movs	r2, #64	@ 0x40
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010c8a:	6939      	ldr	r1, [r7, #16]
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010c92:	461a      	mov	r2, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f001 fdcf 	bl	8012838 <USBD_CtlPrepareRx>
      break;
 8010c9a:	e076      	b.n	8010d8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	33b0      	adds	r3, #176	@ 0xb0
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	7850      	ldrb	r0, [r2, #1]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	4798      	blx	r3
      break;
 8010cb8:	e067      	b.n	8010d8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	785b      	ldrb	r3, [r3, #1]
 8010cbe:	2b0b      	cmp	r3, #11
 8010cc0:	d851      	bhi.n	8010d66 <USBD_CDC_Setup+0x18a>
 8010cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8010cc8 <USBD_CDC_Setup+0xec>)
 8010cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc8:	08010cf9 	.word	0x08010cf9
 8010ccc:	08010d75 	.word	0x08010d75
 8010cd0:	08010d67 	.word	0x08010d67
 8010cd4:	08010d67 	.word	0x08010d67
 8010cd8:	08010d67 	.word	0x08010d67
 8010cdc:	08010d67 	.word	0x08010d67
 8010ce0:	08010d67 	.word	0x08010d67
 8010ce4:	08010d67 	.word	0x08010d67
 8010ce8:	08010d67 	.word	0x08010d67
 8010cec:	08010d67 	.word	0x08010d67
 8010cf0:	08010d23 	.word	0x08010d23
 8010cf4:	08010d4d 	.word	0x08010d4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b03      	cmp	r3, #3
 8010d02:	d107      	bne.n	8010d14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010d04:	f107 030a 	add.w	r3, r7, #10
 8010d08:	2202      	movs	r2, #2
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f001 fd67 	bl	80127e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d12:	e032      	b.n	8010d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010d14:	6839      	ldr	r1, [r7, #0]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f001 fce5 	bl	80126e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8010d20:	e02b      	b.n	8010d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	2b03      	cmp	r3, #3
 8010d2c:	d107      	bne.n	8010d3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010d2e:	f107 030d 	add.w	r3, r7, #13
 8010d32:	2201      	movs	r2, #1
 8010d34:	4619      	mov	r1, r3
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f001 fd52 	bl	80127e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d3c:	e01d      	b.n	8010d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f001 fcd0 	bl	80126e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d46:	2303      	movs	r3, #3
 8010d48:	75fb      	strb	r3, [r7, #23]
          break;
 8010d4a:	e016      	b.n	8010d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d00f      	beq.n	8010d78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010d58:	6839      	ldr	r1, [r7, #0]
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f001 fcc3 	bl	80126e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d60:	2303      	movs	r3, #3
 8010d62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010d64:	e008      	b.n	8010d78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f001 fcbc 	bl	80126e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	75fb      	strb	r3, [r7, #23]
          break;
 8010d72:	e002      	b.n	8010d7a <USBD_CDC_Setup+0x19e>
          break;
 8010d74:	bf00      	nop
 8010d76:	e008      	b.n	8010d8a <USBD_CDC_Setup+0x1ae>
          break;
 8010d78:	bf00      	nop
      }
      break;
 8010d7a:	e006      	b.n	8010d8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f001 fcb1 	bl	80126e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010d84:	2303      	movs	r3, #3
 8010d86:	75fb      	strb	r3, [r7, #23]
      break;
 8010d88:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	32b0      	adds	r2, #176	@ 0xb0
 8010db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d101      	bne.n	8010dbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010dba:	2303      	movs	r3, #3
 8010dbc:	e065      	b.n	8010e8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	32b0      	adds	r2, #176	@ 0xb0
 8010dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010dce:	78fb      	ldrb	r3, [r7, #3]
 8010dd0:	f003 020f 	and.w	r2, r3, #15
 8010dd4:	6879      	ldr	r1, [r7, #4]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	440b      	add	r3, r1
 8010de0:	3318      	adds	r3, #24
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d02f      	beq.n	8010e48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010de8:	78fb      	ldrb	r3, [r7, #3]
 8010dea:	f003 020f 	and.w	r2, r3, #15
 8010dee:	6879      	ldr	r1, [r7, #4]
 8010df0:	4613      	mov	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	440b      	add	r3, r1
 8010dfa:	3318      	adds	r3, #24
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	78fb      	ldrb	r3, [r7, #3]
 8010e00:	f003 010f 	and.w	r1, r3, #15
 8010e04:	68f8      	ldr	r0, [r7, #12]
 8010e06:	460b      	mov	r3, r1
 8010e08:	00db      	lsls	r3, r3, #3
 8010e0a:	440b      	add	r3, r1
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4403      	add	r3, r0
 8010e10:	331c      	adds	r3, #28
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	fbb2 f1f3 	udiv	r1, r2, r3
 8010e18:	fb01 f303 	mul.w	r3, r1, r3
 8010e1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d112      	bne.n	8010e48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010e22:	78fb      	ldrb	r3, [r7, #3]
 8010e24:	f003 020f 	and.w	r2, r3, #15
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	4413      	add	r3, r2
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	440b      	add	r3, r1
 8010e34:	3318      	adds	r3, #24
 8010e36:	2200      	movs	r2, #0
 8010e38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010e3a:	78f9      	ldrb	r1, [r7, #3]
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	2200      	movs	r2, #0
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f004 ffa8 	bl	8015d96 <USBD_LL_Transmit>
 8010e46:	e01f      	b.n	8010e88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	33b0      	adds	r3, #176	@ 0xb0
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4413      	add	r3, r2
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	691b      	ldr	r3, [r3, #16]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d010      	beq.n	8010e88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	33b0      	adds	r3, #176	@ 0xb0
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	4413      	add	r3, r2
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010e84:	78fa      	ldrb	r2, [r7, #3]
 8010e86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3710      	adds	r7, #16
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b084      	sub	sp, #16
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	32b0      	adds	r2, #176	@ 0xb0
 8010ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	32b0      	adds	r2, #176	@ 0xb0
 8010eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	e01a      	b.n	8010efa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010ec4:	78fb      	ldrb	r3, [r7, #3]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f004 ffa6 	bl	8015e1a <USBD_LL_GetRxDataSize>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	33b0      	adds	r3, #176	@ 0xb0
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	4413      	add	r3, r2
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b084      	sub	sp, #16
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	32b0      	adds	r2, #176	@ 0xb0
 8010f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d101      	bne.n	8010f24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010f20:	2303      	movs	r3, #3
 8010f22:	e024      	b.n	8010f6e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	33b0      	adds	r3, #176	@ 0xb0
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	4413      	add	r3, r2
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d019      	beq.n	8010f6c <USBD_CDC_EP0_RxReady+0x6a>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010f3e:	2bff      	cmp	r3, #255	@ 0xff
 8010f40:	d014      	beq.n	8010f6c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	33b0      	adds	r3, #176	@ 0xb0
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	4413      	add	r3, r2
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010f5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010f62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	22ff      	movs	r2, #255	@ 0xff
 8010f68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
	...

08010f78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010f80:	2182      	movs	r1, #130	@ 0x82
 8010f82:	4818      	ldr	r0, [pc, #96]	@ (8010fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f84:	f000 fd4f 	bl	8011a26 <USBD_GetEpDesc>
 8010f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	4815      	ldr	r0, [pc, #84]	@ (8010fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f8e:	f000 fd4a 	bl	8011a26 <USBD_GetEpDesc>
 8010f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010f94:	2181      	movs	r1, #129	@ 0x81
 8010f96:	4813      	ldr	r0, [pc, #76]	@ (8010fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f98:	f000 fd45 	bl	8011a26 <USBD_GetEpDesc>
 8010f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2210      	movs	r2, #16
 8010fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d006      	beq.n	8010fbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010fb8:	711a      	strb	r2, [r3, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d006      	beq.n	8010fd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010fcc:	711a      	strb	r2, [r3, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2243      	movs	r2, #67	@ 0x43
 8010fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010fd8:	4b02      	ldr	r3, [pc, #8]	@ (8010fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	24000054 	.word	0x24000054

08010fe8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b086      	sub	sp, #24
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ff0:	2182      	movs	r1, #130	@ 0x82
 8010ff2:	4818      	ldr	r0, [pc, #96]	@ (8011054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ff4:	f000 fd17 	bl	8011a26 <USBD_GetEpDesc>
 8010ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	4815      	ldr	r0, [pc, #84]	@ (8011054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ffe:	f000 fd12 	bl	8011a26 <USBD_GetEpDesc>
 8011002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011004:	2181      	movs	r1, #129	@ 0x81
 8011006:	4813      	ldr	r0, [pc, #76]	@ (8011054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011008:	f000 fd0d 	bl	8011a26 <USBD_GetEpDesc>
 801100c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d002      	beq.n	801101a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	2210      	movs	r2, #16
 8011018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d006      	beq.n	801102e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2200      	movs	r2, #0
 8011024:	711a      	strb	r2, [r3, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	f042 0202 	orr.w	r2, r2, #2
 801102c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d006      	beq.n	8011042 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2200      	movs	r2, #0
 8011038:	711a      	strb	r2, [r3, #4]
 801103a:	2200      	movs	r2, #0
 801103c:	f042 0202 	orr.w	r2, r2, #2
 8011040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2243      	movs	r2, #67	@ 0x43
 8011046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011048:	4b02      	ldr	r3, [pc, #8]	@ (8011054 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801104a:	4618      	mov	r0, r3
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	24000054 	.word	0x24000054

08011058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011060:	2182      	movs	r1, #130	@ 0x82
 8011062:	4818      	ldr	r0, [pc, #96]	@ (80110c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011064:	f000 fcdf 	bl	8011a26 <USBD_GetEpDesc>
 8011068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801106a:	2101      	movs	r1, #1
 801106c:	4815      	ldr	r0, [pc, #84]	@ (80110c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801106e:	f000 fcda 	bl	8011a26 <USBD_GetEpDesc>
 8011072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011074:	2181      	movs	r1, #129	@ 0x81
 8011076:	4813      	ldr	r0, [pc, #76]	@ (80110c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011078:	f000 fcd5 	bl	8011a26 <USBD_GetEpDesc>
 801107c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	2210      	movs	r2, #16
 8011088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d006      	beq.n	801109e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	2200      	movs	r2, #0
 8011094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011098:	711a      	strb	r2, [r3, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d006      	beq.n	80110b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80110ac:	711a      	strb	r2, [r3, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2243      	movs	r2, #67	@ 0x43
 80110b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80110b8:	4b02      	ldr	r3, [pc, #8]	@ (80110c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	24000054 	.word	0x24000054

080110c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	220a      	movs	r2, #10
 80110d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80110d6:	4b03      	ldr	r3, [pc, #12]	@ (80110e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80110d8:	4618      	mov	r0, r3
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	24000010 	.word	0x24000010

080110e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b083      	sub	sp, #12
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e009      	b.n	8011110 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	33b0      	adds	r3, #176	@ 0xb0
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	4413      	add	r3, r2
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801110e:	2300      	movs	r3, #0
}
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801111c:	b480      	push	{r7}
 801111e:	b087      	sub	sp, #28
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	32b0      	adds	r2, #176	@ 0xb0
 8011132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011136:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d101      	bne.n	8011142 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801113e:	2303      	movs	r3, #3
 8011140:	e008      	b.n	8011154 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	371c      	adds	r7, #28
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	32b0      	adds	r2, #176	@ 0xb0
 8011174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011178:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d101      	bne.n	8011184 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011180:	2303      	movs	r3, #3
 8011182:	e004      	b.n	801118e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
	...

0801119c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	32b0      	adds	r2, #176	@ 0xb0
 80111ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80111b4:	2301      	movs	r3, #1
 80111b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80111be:	2303      	movs	r3, #3
 80111c0:	e025      	b.n	801120e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d11f      	bne.n	801120c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80111d4:	4b10      	ldr	r3, [pc, #64]	@ (8011218 <USBD_CDC_TransmitPacket+0x7c>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	f003 020f 	and.w	r2, r3, #15
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	4613      	mov	r3, r2
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4403      	add	r3, r0
 80111ee:	3318      	adds	r3, #24
 80111f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80111f2:	4b09      	ldr	r3, [pc, #36]	@ (8011218 <USBD_CDC_TransmitPacket+0x7c>)
 80111f4:	7819      	ldrb	r1, [r3, #0]
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f004 fdc7 	bl	8015d96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011208:	2300      	movs	r3, #0
 801120a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801120c:	7bfb      	ldrb	r3, [r7, #15]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	24000097 	.word	0x24000097

0801121c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	32b0      	adds	r2, #176	@ 0xb0
 801122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011232:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	32b0      	adds	r2, #176	@ 0xb0
 801123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d101      	bne.n	801124a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011246:	2303      	movs	r3, #3
 8011248:	e018      	b.n	801127c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	7c1b      	ldrb	r3, [r3, #16]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d10a      	bne.n	8011268 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011252:	4b0c      	ldr	r3, [pc, #48]	@ (8011284 <USBD_CDC_ReceivePacket+0x68>)
 8011254:	7819      	ldrb	r1, [r3, #0]
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801125c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f004 fdb9 	bl	8015dd8 <USBD_LL_PrepareReceive>
 8011266:	e008      	b.n	801127a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011268:	4b06      	ldr	r3, [pc, #24]	@ (8011284 <USBD_CDC_ReceivePacket+0x68>)
 801126a:	7819      	ldrb	r1, [r3, #0]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011272:	2340      	movs	r3, #64	@ 0x40
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f004 fdaf 	bl	8015dd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801127a:	2300      	movs	r3, #0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	24000098 	.word	0x24000098

08011288 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	4613      	mov	r3, r2
 8011294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d101      	bne.n	80112a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801129c:	2303      	movs	r3, #3
 801129e:	e01f      	b.n	80112e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2200      	movs	r2, #0
 80112a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2200      	movs	r2, #0
 80112ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d003      	beq.n	80112c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	68ba      	ldr	r2, [r7, #8]
 80112c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2201      	movs	r2, #1
 80112ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	79fa      	ldrb	r2, [r7, #7]
 80112d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f004 fc25 	bl	8015b24 <USBD_LL_Init>
 80112da:	4603      	mov	r3, r0
 80112dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80112f2:	2300      	movs	r3, #0
 80112f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80112fc:	2303      	movs	r3, #3
 80112fe:	e025      	b.n	801134c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	683a      	ldr	r2, [r7, #0]
 8011304:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	32ae      	adds	r2, #174	@ 0xae
 8011312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011318:	2b00      	cmp	r3, #0
 801131a:	d00f      	beq.n	801133c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	32ae      	adds	r2, #174	@ 0xae
 8011326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801132c:	f107 020e 	add.w	r2, r7, #14
 8011330:	4610      	mov	r0, r2
 8011332:	4798      	blx	r3
 8011334:	4602      	mov	r2, r0
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011342:	1c5a      	adds	r2, r3, #1
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f004 fc31 	bl	8015bc4 <USBD_LL_Start>
 8011362:	4603      	mov	r3, r0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011374:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011376:	4618      	mov	r0, r3
 8011378:	370c      	adds	r7, #12
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr

08011382 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011382:	b580      	push	{r7, lr}
 8011384:	b084      	sub	sp, #16
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
 801138a:	460b      	mov	r3, r1
 801138c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801138e:	2300      	movs	r3, #0
 8011390:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011398:	2b00      	cmp	r3, #0
 801139a:	d009      	beq.n	80113b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	78fa      	ldrb	r2, [r7, #3]
 80113a6:	4611      	mov	r1, r2
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	4798      	blx	r3
 80113ac:	4603      	mov	r3, r0
 80113ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80113b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b084      	sub	sp, #16
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80113c6:	2300      	movs	r3, #0
 80113c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	78fa      	ldrb	r2, [r7, #3]
 80113d4:	4611      	mov	r1, r2
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	4798      	blx	r3
 80113da:	4603      	mov	r3, r0
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d001      	beq.n	80113e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80113e0:	2303      	movs	r3, #3
 80113e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80113e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b084      	sub	sp, #16
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
 80113f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	4618      	mov	r0, r3
 8011402:	f001 f936 	bl	8012672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2201      	movs	r2, #1
 801140a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011414:	461a      	mov	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011422:	f003 031f 	and.w	r3, r3, #31
 8011426:	2b02      	cmp	r3, #2
 8011428:	d01a      	beq.n	8011460 <USBD_LL_SetupStage+0x72>
 801142a:	2b02      	cmp	r3, #2
 801142c:	d822      	bhi.n	8011474 <USBD_LL_SetupStage+0x86>
 801142e:	2b00      	cmp	r3, #0
 8011430:	d002      	beq.n	8011438 <USBD_LL_SetupStage+0x4a>
 8011432:	2b01      	cmp	r3, #1
 8011434:	d00a      	beq.n	801144c <USBD_LL_SetupStage+0x5e>
 8011436:	e01d      	b.n	8011474 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801143e:	4619      	mov	r1, r3
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 fb63 	bl	8011b0c <USBD_StdDevReq>
 8011446:	4603      	mov	r3, r0
 8011448:	73fb      	strb	r3, [r7, #15]
      break;
 801144a:	e020      	b.n	801148e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011452:	4619      	mov	r1, r3
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fbcb 	bl	8011bf0 <USBD_StdItfReq>
 801145a:	4603      	mov	r3, r0
 801145c:	73fb      	strb	r3, [r7, #15]
      break;
 801145e:	e016      	b.n	801148e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 fc2d 	bl	8011cc8 <USBD_StdEPReq>
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
      break;
 8011472:	e00c      	b.n	801148e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801147a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801147e:	b2db      	uxtb	r3, r3
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f004 fbfe 	bl	8015c84 <USBD_LL_StallEP>
 8011488:	4603      	mov	r3, r0
 801148a:	73fb      	strb	r3, [r7, #15]
      break;
 801148c:	bf00      	nop
  }

  return ret;
 801148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011490:	4618      	mov	r0, r3
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	460b      	mov	r3, r1
 80114a2:	607a      	str	r2, [r7, #4]
 80114a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80114a6:	2300      	movs	r3, #0
 80114a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80114aa:	7afb      	ldrb	r3, [r7, #11]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d16e      	bne.n	801158e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80114b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80114be:	2b03      	cmp	r3, #3
 80114c0:	f040 8098 	bne.w	80115f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	689a      	ldr	r2, [r3, #8]
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d913      	bls.n	80114f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	1ad2      	subs	r2, r2, r3
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	68da      	ldr	r2, [r3, #12]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	4293      	cmp	r3, r2
 80114e8:	bf28      	it	cs
 80114ea:	4613      	movcs	r3, r2
 80114ec:	461a      	mov	r2, r3
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f001 f9be 	bl	8012872 <USBD_CtlContinueRx>
 80114f6:	e07d      	b.n	80115f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80114fe:	f003 031f 	and.w	r3, r3, #31
 8011502:	2b02      	cmp	r3, #2
 8011504:	d014      	beq.n	8011530 <USBD_LL_DataOutStage+0x98>
 8011506:	2b02      	cmp	r3, #2
 8011508:	d81d      	bhi.n	8011546 <USBD_LL_DataOutStage+0xae>
 801150a:	2b00      	cmp	r3, #0
 801150c:	d002      	beq.n	8011514 <USBD_LL_DataOutStage+0x7c>
 801150e:	2b01      	cmp	r3, #1
 8011510:	d003      	beq.n	801151a <USBD_LL_DataOutStage+0x82>
 8011512:	e018      	b.n	8011546 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011514:	2300      	movs	r3, #0
 8011516:	75bb      	strb	r3, [r7, #22]
            break;
 8011518:	e018      	b.n	801154c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011520:	b2db      	uxtb	r3, r3
 8011522:	4619      	mov	r1, r3
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 fa64 	bl	80119f2 <USBD_CoreFindIF>
 801152a:	4603      	mov	r3, r0
 801152c:	75bb      	strb	r3, [r7, #22]
            break;
 801152e:	e00d      	b.n	801154c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011536:	b2db      	uxtb	r3, r3
 8011538:	4619      	mov	r1, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f000 fa66 	bl	8011a0c <USBD_CoreFindEP>
 8011540:	4603      	mov	r3, r0
 8011542:	75bb      	strb	r3, [r7, #22]
            break;
 8011544:	e002      	b.n	801154c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	75bb      	strb	r3, [r7, #22]
            break;
 801154a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801154c:	7dbb      	ldrb	r3, [r7, #22]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d119      	bne.n	8011586 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b03      	cmp	r3, #3
 801155c:	d113      	bne.n	8011586 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801155e:	7dba      	ldrb	r2, [r7, #22]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	32ae      	adds	r2, #174	@ 0xae
 8011564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00b      	beq.n	8011586 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801156e:	7dba      	ldrb	r2, [r7, #22]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011576:	7dba      	ldrb	r2, [r7, #22]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	32ae      	adds	r2, #174	@ 0xae
 801157c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011580:	691b      	ldr	r3, [r3, #16]
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f001 f984 	bl	8012894 <USBD_CtlSendStatus>
 801158c:	e032      	b.n	80115f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801158e:	7afb      	ldrb	r3, [r7, #11]
 8011590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011594:	b2db      	uxtb	r3, r3
 8011596:	4619      	mov	r1, r3
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f000 fa37 	bl	8011a0c <USBD_CoreFindEP>
 801159e:	4603      	mov	r3, r0
 80115a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80115a2:	7dbb      	ldrb	r3, [r7, #22]
 80115a4:	2bff      	cmp	r3, #255	@ 0xff
 80115a6:	d025      	beq.n	80115f4 <USBD_LL_DataOutStage+0x15c>
 80115a8:	7dbb      	ldrb	r3, [r7, #22]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d122      	bne.n	80115f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d117      	bne.n	80115ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80115ba:	7dba      	ldrb	r2, [r7, #22]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	32ae      	adds	r2, #174	@ 0xae
 80115c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d00f      	beq.n	80115ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80115ca:	7dba      	ldrb	r2, [r7, #22]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80115d2:	7dba      	ldrb	r2, [r7, #22]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	32ae      	adds	r2, #174	@ 0xae
 80115d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115dc:	699b      	ldr	r3, [r3, #24]
 80115de:	7afa      	ldrb	r2, [r7, #11]
 80115e0:	4611      	mov	r1, r2
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	4798      	blx	r3
 80115e6:	4603      	mov	r3, r0
 80115e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80115ea:	7dfb      	ldrb	r3, [r7, #23]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80115f0:	7dfb      	ldrb	r3, [r7, #23]
 80115f2:	e000      	b.n	80115f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b086      	sub	sp, #24
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	460b      	mov	r3, r1
 8011608:	607a      	str	r2, [r7, #4]
 801160a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801160c:	7afb      	ldrb	r3, [r7, #11]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d16f      	bne.n	80116f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	3314      	adds	r3, #20
 8011616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801161e:	2b02      	cmp	r3, #2
 8011620:	d15a      	bne.n	80116d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	689a      	ldr	r2, [r3, #8]
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	429a      	cmp	r2, r3
 801162c:	d914      	bls.n	8011658 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	689a      	ldr	r2, [r3, #8]
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	1ad2      	subs	r2, r2, r3
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	461a      	mov	r2, r3
 8011642:	6879      	ldr	r1, [r7, #4]
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f001 f8e6 	bl	8012816 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801164a:	2300      	movs	r3, #0
 801164c:	2200      	movs	r2, #0
 801164e:	2100      	movs	r1, #0
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f004 fbc1 	bl	8015dd8 <USBD_LL_PrepareReceive>
 8011656:	e03f      	b.n	80116d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	68da      	ldr	r2, [r3, #12]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	429a      	cmp	r2, r3
 8011662:	d11c      	bne.n	801169e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	685a      	ldr	r2, [r3, #4]
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801166c:	429a      	cmp	r2, r3
 801166e:	d316      	bcc.n	801169e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801167a:	429a      	cmp	r2, r3
 801167c:	d20f      	bcs.n	801169e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801167e:	2200      	movs	r2, #0
 8011680:	2100      	movs	r1, #0
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f001 f8c7 	bl	8012816 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2200      	movs	r2, #0
 801168c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011690:	2300      	movs	r3, #0
 8011692:	2200      	movs	r2, #0
 8011694:	2100      	movs	r1, #0
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f004 fb9e 	bl	8015dd8 <USBD_LL_PrepareReceive>
 801169c:	e01c      	b.n	80116d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d10f      	bne.n	80116ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d009      	beq.n	80116ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80116ca:	2180      	movs	r1, #128	@ 0x80
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f004 fad9 	bl	8015c84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f001 f8f1 	bl	80128ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d03a      	beq.n	8011758 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f7ff fe42 	bl	801136c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80116f0:	e032      	b.n	8011758 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80116f2:	7afb      	ldrb	r3, [r7, #11]
 80116f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	4619      	mov	r1, r3
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f000 f985 	bl	8011a0c <USBD_CoreFindEP>
 8011702:	4603      	mov	r3, r0
 8011704:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011706:	7dfb      	ldrb	r3, [r7, #23]
 8011708:	2bff      	cmp	r3, #255	@ 0xff
 801170a:	d025      	beq.n	8011758 <USBD_LL_DataInStage+0x15a>
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d122      	bne.n	8011758 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011718:	b2db      	uxtb	r3, r3
 801171a:	2b03      	cmp	r3, #3
 801171c:	d11c      	bne.n	8011758 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801171e:	7dfa      	ldrb	r2, [r7, #23]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	32ae      	adds	r2, #174	@ 0xae
 8011724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d014      	beq.n	8011758 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801172e:	7dfa      	ldrb	r2, [r7, #23]
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011736:	7dfa      	ldrb	r2, [r7, #23]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	32ae      	adds	r2, #174	@ 0xae
 801173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011740:	695b      	ldr	r3, [r3, #20]
 8011742:	7afa      	ldrb	r2, [r7, #11]
 8011744:	4611      	mov	r1, r2
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	4798      	blx	r3
 801174a:	4603      	mov	r3, r0
 801174c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801174e:	7dbb      	ldrb	r3, [r7, #22]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011754:	7dbb      	ldrb	r3, [r7, #22]
 8011756:	e000      	b.n	801175a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011758:	2300      	movs	r3, #0
}
 801175a:	4618      	mov	r0, r3
 801175c:	3718      	adds	r7, #24
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801176a:	2300      	movs	r3, #0
 801176c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2200      	movs	r2, #0
 8011790:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801179a:	2b00      	cmp	r3, #0
 801179c:	d014      	beq.n	80117c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00e      	beq.n	80117c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	6852      	ldr	r2, [r2, #4]
 80117b6:	b2d2      	uxtb	r2, r2
 80117b8:	4611      	mov	r1, r2
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	4798      	blx	r3
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d001      	beq.n	80117c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80117c4:	2303      	movs	r3, #3
 80117c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117c8:	2340      	movs	r3, #64	@ 0x40
 80117ca:	2200      	movs	r2, #0
 80117cc:	2100      	movs	r1, #0
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f004 fa13 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2201      	movs	r2, #1
 80117d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2240      	movs	r2, #64	@ 0x40
 80117e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117e4:	2340      	movs	r3, #64	@ 0x40
 80117e6:	2200      	movs	r2, #0
 80117e8:	2180      	movs	r1, #128	@ 0x80
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f004 fa05 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2201      	movs	r2, #1
 80117f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2240      	movs	r2, #64	@ 0x40
 80117fa:	621a      	str	r2, [r3, #32]

  return ret;
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011806:	b480      	push	{r7}
 8011808:	b083      	sub	sp, #12
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
 801180e:	460b      	mov	r3, r1
 8011810:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	78fa      	ldrb	r2, [r7, #3]
 8011816:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011826:	b480      	push	{r7}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2b04      	cmp	r3, #4
 8011838:	d006      	beq.n	8011848 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011840:	b2da      	uxtb	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2204      	movs	r2, #4
 801184c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	370c      	adds	r7, #12
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr

0801185e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801185e:	b480      	push	{r7}
 8011860:	b083      	sub	sp, #12
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b04      	cmp	r3, #4
 8011870:	d106      	bne.n	8011880 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011878:	b2da      	uxtb	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801189c:	b2db      	uxtb	r3, r3
 801189e:	2b03      	cmp	r3, #3
 80118a0:	d110      	bne.n	80118c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00b      	beq.n	80118c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118b2:	69db      	ldr	r3, [r3, #28]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d005      	beq.n	80118c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118be:	69db      	ldr	r3, [r3, #28]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	460b      	mov	r3, r1
 80118d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	32ae      	adds	r2, #174	@ 0xae
 80118e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d101      	bne.n	80118f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80118ec:	2303      	movs	r3, #3
 80118ee:	e01c      	b.n	801192a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	2b03      	cmp	r3, #3
 80118fa:	d115      	bne.n	8011928 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	32ae      	adds	r2, #174	@ 0xae
 8011906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d00b      	beq.n	8011928 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	32ae      	adds	r2, #174	@ 0xae
 801191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801191e:	6a1b      	ldr	r3, [r3, #32]
 8011920:	78fa      	ldrb	r2, [r7, #3]
 8011922:	4611      	mov	r1, r2
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
 801193a:	460b      	mov	r3, r1
 801193c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	32ae      	adds	r2, #174	@ 0xae
 8011948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d101      	bne.n	8011954 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011950:	2303      	movs	r3, #3
 8011952:	e01c      	b.n	801198e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b03      	cmp	r3, #3
 801195e:	d115      	bne.n	801198c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	32ae      	adds	r2, #174	@ 0xae
 801196a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00b      	beq.n	801198c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	32ae      	adds	r2, #174	@ 0xae
 801197e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011984:	78fa      	ldrb	r2, [r7, #3]
 8011986:	4611      	mov	r1, r2
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011996:	b480      	push	{r7}
 8011998:	b083      	sub	sp, #12
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801199e:	2300      	movs	r3, #0
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80119b4:	2300      	movs	r3, #0
 80119b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2201      	movs	r2, #1
 80119bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00e      	beq.n	80119e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	6852      	ldr	r2, [r2, #4]
 80119d6:	b2d2      	uxtb	r2, r2
 80119d8:	4611      	mov	r1, r2
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	4798      	blx	r3
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80119e4:	2303      	movs	r3, #3
 80119e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80119f2:	b480      	push	{r7}
 80119f4:	b083      	sub	sp, #12
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	460b      	mov	r3, r1
 80119fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80119fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	460b      	mov	r3, r1
 8011a16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011a18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	370c      	adds	r7, #12
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr

08011a26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b086      	sub	sp, #24
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
 8011a2e:	460b      	mov	r3, r1
 8011a30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	885b      	ldrh	r3, [r3, #2]
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	7812      	ldrb	r2, [r2, #0]
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d91f      	bls.n	8011a8c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011a52:	e013      	b.n	8011a7c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011a54:	f107 030a 	add.w	r3, r7, #10
 8011a58:	4619      	mov	r1, r3
 8011a5a:	6978      	ldr	r0, [r7, #20]
 8011a5c:	f000 f81b 	bl	8011a96 <USBD_GetNextDesc>
 8011a60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	785b      	ldrb	r3, [r3, #1]
 8011a66:	2b05      	cmp	r3, #5
 8011a68:	d108      	bne.n	8011a7c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	789b      	ldrb	r3, [r3, #2]
 8011a72:	78fa      	ldrb	r2, [r7, #3]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d008      	beq.n	8011a8a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	885b      	ldrh	r3, [r3, #2]
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	897b      	ldrh	r3, [r7, #10]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d8e5      	bhi.n	8011a54 <USBD_GetEpDesc+0x2e>
 8011a88:	e000      	b.n	8011a8c <USBD_GetEpDesc+0x66>
          break;
 8011a8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011a8c:	693b      	ldr	r3, [r7, #16]
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3718      	adds	r7, #24
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b085      	sub	sp, #20
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	881b      	ldrh	r3, [r3, #0]
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	7812      	ldrb	r2, [r2, #0]
 8011aac:	4413      	add	r3, r2
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	461a      	mov	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4413      	add	r3, r2
 8011abe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3714      	adds	r7, #20
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011acc:	4770      	bx	lr

08011ace <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ace:	b480      	push	{r7}
 8011ad0:	b087      	sub	sp, #28
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011aec:	8a3b      	ldrh	r3, [r7, #16]
 8011aee:	021b      	lsls	r3, r3, #8
 8011af0:	b21a      	sxth	r2, r3
 8011af2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	b21b      	sxth	r3, r3
 8011afa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011afc:	89fb      	ldrh	r3, [r7, #14]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	371c      	adds	r7, #28
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr
	...

08011b0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b16:	2300      	movs	r3, #0
 8011b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011b22:	2b40      	cmp	r3, #64	@ 0x40
 8011b24:	d005      	beq.n	8011b32 <USBD_StdDevReq+0x26>
 8011b26:	2b40      	cmp	r3, #64	@ 0x40
 8011b28:	d857      	bhi.n	8011bda <USBD_StdDevReq+0xce>
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00f      	beq.n	8011b4e <USBD_StdDevReq+0x42>
 8011b2e:	2b20      	cmp	r3, #32
 8011b30:	d153      	bne.n	8011bda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	32ae      	adds	r2, #174	@ 0xae
 8011b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b40:	689b      	ldr	r3, [r3, #8]
 8011b42:	6839      	ldr	r1, [r7, #0]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	4798      	blx	r3
 8011b48:	4603      	mov	r3, r0
 8011b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b4c:	e04a      	b.n	8011be4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	785b      	ldrb	r3, [r3, #1]
 8011b52:	2b09      	cmp	r3, #9
 8011b54:	d83b      	bhi.n	8011bce <USBD_StdDevReq+0xc2>
 8011b56:	a201      	add	r2, pc, #4	@ (adr r2, 8011b5c <USBD_StdDevReq+0x50>)
 8011b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b5c:	08011bb1 	.word	0x08011bb1
 8011b60:	08011bc5 	.word	0x08011bc5
 8011b64:	08011bcf 	.word	0x08011bcf
 8011b68:	08011bbb 	.word	0x08011bbb
 8011b6c:	08011bcf 	.word	0x08011bcf
 8011b70:	08011b8f 	.word	0x08011b8f
 8011b74:	08011b85 	.word	0x08011b85
 8011b78:	08011bcf 	.word	0x08011bcf
 8011b7c:	08011ba7 	.word	0x08011ba7
 8011b80:	08011b99 	.word	0x08011b99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011b84:	6839      	ldr	r1, [r7, #0]
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fa3c 	bl	8012004 <USBD_GetDescriptor>
          break;
 8011b8c:	e024      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 fbcb 	bl	801232c <USBD_SetAddress>
          break;
 8011b96:	e01f      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 fc0a 	bl	80123b4 <USBD_SetConfig>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8011ba4:	e018      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 fcad 	bl	8012508 <USBD_GetConfig>
          break;
 8011bae:	e013      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f000 fcde 	bl	8012574 <USBD_GetStatus>
          break;
 8011bb8:	e00e      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011bba:	6839      	ldr	r1, [r7, #0]
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 fd0d 	bl	80125dc <USBD_SetFeature>
          break;
 8011bc2:	e009      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011bc4:	6839      	ldr	r1, [r7, #0]
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 fd31 	bl	801262e <USBD_ClrFeature>
          break;
 8011bcc:	e004      	b.n	8011bd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011bce:	6839      	ldr	r1, [r7, #0]
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f000 fd88 	bl	80126e6 <USBD_CtlError>
          break;
 8011bd6:	bf00      	nop
      }
      break;
 8011bd8:	e004      	b.n	8011be4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fd82 	bl	80126e6 <USBD_CtlError>
      break;
 8011be2:	bf00      	nop
  }

  return ret;
 8011be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop

08011bf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c06:	2b40      	cmp	r3, #64	@ 0x40
 8011c08:	d005      	beq.n	8011c16 <USBD_StdItfReq+0x26>
 8011c0a:	2b40      	cmp	r3, #64	@ 0x40
 8011c0c:	d852      	bhi.n	8011cb4 <USBD_StdItfReq+0xc4>
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d001      	beq.n	8011c16 <USBD_StdItfReq+0x26>
 8011c12:	2b20      	cmp	r3, #32
 8011c14:	d14e      	bne.n	8011cb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d840      	bhi.n	8011ca6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	889b      	ldrh	r3, [r3, #4]
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d836      	bhi.n	8011c9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	889b      	ldrh	r3, [r3, #4]
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff fedb 	bl	80119f2 <USBD_CoreFindIF>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011c40:	7bbb      	ldrb	r3, [r7, #14]
 8011c42:	2bff      	cmp	r3, #255	@ 0xff
 8011c44:	d01d      	beq.n	8011c82 <USBD_StdItfReq+0x92>
 8011c46:	7bbb      	ldrb	r3, [r7, #14]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d11a      	bne.n	8011c82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011c4c:	7bba      	ldrb	r2, [r7, #14]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	32ae      	adds	r2, #174	@ 0xae
 8011c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00f      	beq.n	8011c7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011c5c:	7bba      	ldrb	r2, [r7, #14]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011c64:	7bba      	ldrb	r2, [r7, #14]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	32ae      	adds	r2, #174	@ 0xae
 8011c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	4798      	blx	r3
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c7a:	e004      	b.n	8011c86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011c7c:	2303      	movs	r3, #3
 8011c7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c80:	e001      	b.n	8011c86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011c82:	2303      	movs	r3, #3
 8011c84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	88db      	ldrh	r3, [r3, #6]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d110      	bne.n	8011cb0 <USBD_StdItfReq+0xc0>
 8011c8e:	7bfb      	ldrb	r3, [r7, #15]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d10d      	bne.n	8011cb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fdfd 	bl	8012894 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011c9a:	e009      	b.n	8011cb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011c9c:	6839      	ldr	r1, [r7, #0]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 fd21 	bl	80126e6 <USBD_CtlError>
          break;
 8011ca4:	e004      	b.n	8011cb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011ca6:	6839      	ldr	r1, [r7, #0]
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f000 fd1c 	bl	80126e6 <USBD_CtlError>
          break;
 8011cae:	e000      	b.n	8011cb2 <USBD_StdItfReq+0xc2>
          break;
 8011cb0:	bf00      	nop
      }
      break;
 8011cb2:	e004      	b.n	8011cbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fd15 	bl	80126e6 <USBD_CtlError>
      break;
 8011cbc:	bf00      	nop
  }

  return ret;
 8011cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	889b      	ldrh	r3, [r3, #4]
 8011cda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ce4:	2b40      	cmp	r3, #64	@ 0x40
 8011ce6:	d007      	beq.n	8011cf8 <USBD_StdEPReq+0x30>
 8011ce8:	2b40      	cmp	r3, #64	@ 0x40
 8011cea:	f200 817f 	bhi.w	8011fec <USBD_StdEPReq+0x324>
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d02a      	beq.n	8011d48 <USBD_StdEPReq+0x80>
 8011cf2:	2b20      	cmp	r3, #32
 8011cf4:	f040 817a 	bne.w	8011fec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011cf8:	7bbb      	ldrb	r3, [r7, #14]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7ff fe85 	bl	8011a0c <USBD_CoreFindEP>
 8011d02:	4603      	mov	r3, r0
 8011d04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d06:	7b7b      	ldrb	r3, [r7, #13]
 8011d08:	2bff      	cmp	r3, #255	@ 0xff
 8011d0a:	f000 8174 	beq.w	8011ff6 <USBD_StdEPReq+0x32e>
 8011d0e:	7b7b      	ldrb	r3, [r7, #13]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f040 8170 	bne.w	8011ff6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011d16:	7b7a      	ldrb	r2, [r7, #13]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011d1e:	7b7a      	ldrb	r2, [r7, #13]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	32ae      	adds	r2, #174	@ 0xae
 8011d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d28:	689b      	ldr	r3, [r3, #8]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f000 8163 	beq.w	8011ff6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011d30:	7b7a      	ldrb	r2, [r7, #13]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	32ae      	adds	r2, #174	@ 0xae
 8011d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	4798      	blx	r3
 8011d42:	4603      	mov	r3, r0
 8011d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011d46:	e156      	b.n	8011ff6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	785b      	ldrb	r3, [r3, #1]
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	d008      	beq.n	8011d62 <USBD_StdEPReq+0x9a>
 8011d50:	2b03      	cmp	r3, #3
 8011d52:	f300 8145 	bgt.w	8011fe0 <USBD_StdEPReq+0x318>
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 809b 	beq.w	8011e92 <USBD_StdEPReq+0x1ca>
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d03c      	beq.n	8011dda <USBD_StdEPReq+0x112>
 8011d60:	e13e      	b.n	8011fe0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	2b02      	cmp	r3, #2
 8011d6c:	d002      	beq.n	8011d74 <USBD_StdEPReq+0xac>
 8011d6e:	2b03      	cmp	r3, #3
 8011d70:	d016      	beq.n	8011da0 <USBD_StdEPReq+0xd8>
 8011d72:	e02c      	b.n	8011dce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d74:	7bbb      	ldrb	r3, [r7, #14]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00d      	beq.n	8011d96 <USBD_StdEPReq+0xce>
 8011d7a:	7bbb      	ldrb	r3, [r7, #14]
 8011d7c:	2b80      	cmp	r3, #128	@ 0x80
 8011d7e:	d00a      	beq.n	8011d96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d80:	7bbb      	ldrb	r3, [r7, #14]
 8011d82:	4619      	mov	r1, r3
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f003 ff7d 	bl	8015c84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d8a:	2180      	movs	r1, #128	@ 0x80
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f003 ff79 	bl	8015c84 <USBD_LL_StallEP>
 8011d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011d94:	e020      	b.n	8011dd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fca4 	bl	80126e6 <USBD_CtlError>
              break;
 8011d9e:	e01b      	b.n	8011dd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	885b      	ldrh	r3, [r3, #2]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d10e      	bne.n	8011dc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011da8:	7bbb      	ldrb	r3, [r7, #14]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d00b      	beq.n	8011dc6 <USBD_StdEPReq+0xfe>
 8011dae:	7bbb      	ldrb	r3, [r7, #14]
 8011db0:	2b80      	cmp	r3, #128	@ 0x80
 8011db2:	d008      	beq.n	8011dc6 <USBD_StdEPReq+0xfe>
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	88db      	ldrh	r3, [r3, #6]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d104      	bne.n	8011dc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011dbc:	7bbb      	ldrb	r3, [r7, #14]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f003 ff5f 	bl	8015c84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 fd64 	bl	8012894 <USBD_CtlSendStatus>

              break;
 8011dcc:	e004      	b.n	8011dd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011dce:	6839      	ldr	r1, [r7, #0]
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 fc88 	bl	80126e6 <USBD_CtlError>
              break;
 8011dd6:	bf00      	nop
          }
          break;
 8011dd8:	e107      	b.n	8011fea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d002      	beq.n	8011dec <USBD_StdEPReq+0x124>
 8011de6:	2b03      	cmp	r3, #3
 8011de8:	d016      	beq.n	8011e18 <USBD_StdEPReq+0x150>
 8011dea:	e04b      	b.n	8011e84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011dec:	7bbb      	ldrb	r3, [r7, #14]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00d      	beq.n	8011e0e <USBD_StdEPReq+0x146>
 8011df2:	7bbb      	ldrb	r3, [r7, #14]
 8011df4:	2b80      	cmp	r3, #128	@ 0x80
 8011df6:	d00a      	beq.n	8011e0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011df8:	7bbb      	ldrb	r3, [r7, #14]
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f003 ff41 	bl	8015c84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e02:	2180      	movs	r1, #128	@ 0x80
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f003 ff3d 	bl	8015c84 <USBD_LL_StallEP>
 8011e0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011e0c:	e040      	b.n	8011e90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011e0e:	6839      	ldr	r1, [r7, #0]
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 fc68 	bl	80126e6 <USBD_CtlError>
              break;
 8011e16:	e03b      	b.n	8011e90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	885b      	ldrh	r3, [r3, #2]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d136      	bne.n	8011e8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011e20:	7bbb      	ldrb	r3, [r7, #14]
 8011e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d004      	beq.n	8011e34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011e2a:	7bbb      	ldrb	r3, [r7, #14]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f003 ff47 	bl	8015cc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 fd2d 	bl	8012894 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011e3a:	7bbb      	ldrb	r3, [r7, #14]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7ff fde4 	bl	8011a0c <USBD_CoreFindEP>
 8011e44:	4603      	mov	r3, r0
 8011e46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e48:	7b7b      	ldrb	r3, [r7, #13]
 8011e4a:	2bff      	cmp	r3, #255	@ 0xff
 8011e4c:	d01f      	beq.n	8011e8e <USBD_StdEPReq+0x1c6>
 8011e4e:	7b7b      	ldrb	r3, [r7, #13]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d11c      	bne.n	8011e8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011e54:	7b7a      	ldrb	r2, [r7, #13]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011e5c:	7b7a      	ldrb	r2, [r7, #13]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	32ae      	adds	r2, #174	@ 0xae
 8011e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d010      	beq.n	8011e8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011e6c:	7b7a      	ldrb	r2, [r7, #13]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	32ae      	adds	r2, #174	@ 0xae
 8011e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	4798      	blx	r3
 8011e7e:	4603      	mov	r3, r0
 8011e80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011e82:	e004      	b.n	8011e8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f000 fc2d 	bl	80126e6 <USBD_CtlError>
              break;
 8011e8c:	e000      	b.n	8011e90 <USBD_StdEPReq+0x1c8>
              break;
 8011e8e:	bf00      	nop
          }
          break;
 8011e90:	e0ab      	b.n	8011fea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d002      	beq.n	8011ea4 <USBD_StdEPReq+0x1dc>
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d032      	beq.n	8011f08 <USBD_StdEPReq+0x240>
 8011ea2:	e097      	b.n	8011fd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ea4:	7bbb      	ldrb	r3, [r7, #14]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d007      	beq.n	8011eba <USBD_StdEPReq+0x1f2>
 8011eaa:	7bbb      	ldrb	r3, [r7, #14]
 8011eac:	2b80      	cmp	r3, #128	@ 0x80
 8011eae:	d004      	beq.n	8011eba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011eb0:	6839      	ldr	r1, [r7, #0]
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 fc17 	bl	80126e6 <USBD_CtlError>
                break;
 8011eb8:	e091      	b.n	8011fde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	da0b      	bge.n	8011eda <USBD_StdEPReq+0x212>
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
 8011ec4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	3310      	adds	r3, #16
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	e00b      	b.n	8011ef2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011eda:	7bbb      	ldrb	r3, [r7, #14]
 8011edc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ee0:	4613      	mov	r3, r2
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	4413      	add	r3, r2
 8011ee6:	009b      	lsls	r3, r3, #2
 8011ee8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	4413      	add	r3, r2
 8011ef0:	3304      	adds	r3, #4
 8011ef2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	2202      	movs	r2, #2
 8011efe:	4619      	mov	r1, r3
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 fc6d 	bl	80127e0 <USBD_CtlSendData>
              break;
 8011f06:	e06a      	b.n	8011fde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da11      	bge.n	8011f34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011f10:	7bbb      	ldrb	r3, [r7, #14]
 8011f12:	f003 020f 	and.w	r2, r3, #15
 8011f16:	6879      	ldr	r1, [r7, #4]
 8011f18:	4613      	mov	r3, r2
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	4413      	add	r3, r2
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	440b      	add	r3, r1
 8011f22:	3324      	adds	r3, #36	@ 0x24
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d117      	bne.n	8011f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 fbda 	bl	80126e6 <USBD_CtlError>
                  break;
 8011f32:	e054      	b.n	8011fde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f34:	7bbb      	ldrb	r3, [r7, #14]
 8011f36:	f003 020f 	and.w	r2, r3, #15
 8011f3a:	6879      	ldr	r1, [r7, #4]
 8011f3c:	4613      	mov	r3, r2
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4413      	add	r3, r2
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	440b      	add	r3, r1
 8011f46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d104      	bne.n	8011f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 fbc7 	bl	80126e6 <USBD_CtlError>
                  break;
 8011f58:	e041      	b.n	8011fde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	da0b      	bge.n	8011f7a <USBD_StdEPReq+0x2b2>
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011f68:	4613      	mov	r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4413      	add	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	3310      	adds	r3, #16
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	4413      	add	r3, r2
 8011f76:	3304      	adds	r3, #4
 8011f78:	e00b      	b.n	8011f92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011f7a:	7bbb      	ldrb	r3, [r7, #14]
 8011f7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f80:	4613      	mov	r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4413      	add	r3, r2
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	4413      	add	r3, r2
 8011f90:	3304      	adds	r3, #4
 8011f92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f94:	7bbb      	ldrb	r3, [r7, #14]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <USBD_StdEPReq+0x2d8>
 8011f9a:	7bbb      	ldrb	r3, [r7, #14]
 8011f9c:	2b80      	cmp	r3, #128	@ 0x80
 8011f9e:	d103      	bne.n	8011fa8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	601a      	str	r2, [r3, #0]
 8011fa6:	e00e      	b.n	8011fc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	4619      	mov	r1, r3
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f003 fea7 	bl	8015d00 <USBD_LL_IsStallEP>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	e002      	b.n	8011fc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2202      	movs	r2, #2
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 fc07 	bl	80127e0 <USBD_CtlSendData>
              break;
 8011fd2:	e004      	b.n	8011fde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011fd4:	6839      	ldr	r1, [r7, #0]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 fb85 	bl	80126e6 <USBD_CtlError>
              break;
 8011fdc:	bf00      	nop
          }
          break;
 8011fde:	e004      	b.n	8011fea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011fe0:	6839      	ldr	r1, [r7, #0]
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f000 fb7f 	bl	80126e6 <USBD_CtlError>
          break;
 8011fe8:	bf00      	nop
      }
      break;
 8011fea:	e005      	b.n	8011ff8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 fb79 	bl	80126e6 <USBD_CtlError>
      break;
 8011ff4:	e000      	b.n	8011ff8 <USBD_StdEPReq+0x330>
      break;
 8011ff6:	bf00      	nop
  }

  return ret;
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
	...

08012004 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801200e:	2300      	movs	r3, #0
 8012010:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012016:	2300      	movs	r3, #0
 8012018:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	885b      	ldrh	r3, [r3, #2]
 801201e:	0a1b      	lsrs	r3, r3, #8
 8012020:	b29b      	uxth	r3, r3
 8012022:	3b01      	subs	r3, #1
 8012024:	2b0e      	cmp	r3, #14
 8012026:	f200 8152 	bhi.w	80122ce <USBD_GetDescriptor+0x2ca>
 801202a:	a201      	add	r2, pc, #4	@ (adr r2, 8012030 <USBD_GetDescriptor+0x2c>)
 801202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012030:	080120a1 	.word	0x080120a1
 8012034:	080120b9 	.word	0x080120b9
 8012038:	080120f9 	.word	0x080120f9
 801203c:	080122cf 	.word	0x080122cf
 8012040:	080122cf 	.word	0x080122cf
 8012044:	0801226f 	.word	0x0801226f
 8012048:	0801229b 	.word	0x0801229b
 801204c:	080122cf 	.word	0x080122cf
 8012050:	080122cf 	.word	0x080122cf
 8012054:	080122cf 	.word	0x080122cf
 8012058:	080122cf 	.word	0x080122cf
 801205c:	080122cf 	.word	0x080122cf
 8012060:	080122cf 	.word	0x080122cf
 8012064:	080122cf 	.word	0x080122cf
 8012068:	0801206d 	.word	0x0801206d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012072:	69db      	ldr	r3, [r3, #28]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d00b      	beq.n	8012090 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	7c12      	ldrb	r2, [r2, #16]
 8012084:	f107 0108 	add.w	r1, r7, #8
 8012088:	4610      	mov	r0, r2
 801208a:	4798      	blx	r3
 801208c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801208e:	e126      	b.n	80122de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 fb27 	bl	80126e6 <USBD_CtlError>
        err++;
 8012098:	7afb      	ldrb	r3, [r7, #11]
 801209a:	3301      	adds	r3, #1
 801209c:	72fb      	strb	r3, [r7, #11]
      break;
 801209e:	e11e      	b.n	80122de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	7c12      	ldrb	r2, [r2, #16]
 80120ac:	f107 0108 	add.w	r1, r7, #8
 80120b0:	4610      	mov	r0, r2
 80120b2:	4798      	blx	r3
 80120b4:	60f8      	str	r0, [r7, #12]
      break;
 80120b6:	e112      	b.n	80122de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	7c1b      	ldrb	r3, [r3, #16]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10d      	bne.n	80120dc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120c8:	f107 0208 	add.w	r2, r7, #8
 80120cc:	4610      	mov	r0, r2
 80120ce:	4798      	blx	r3
 80120d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	3301      	adds	r3, #1
 80120d6:	2202      	movs	r2, #2
 80120d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80120da:	e100      	b.n	80122de <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e4:	f107 0208 	add.w	r2, r7, #8
 80120e8:	4610      	mov	r0, r2
 80120ea:	4798      	blx	r3
 80120ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	3301      	adds	r3, #1
 80120f2:	2202      	movs	r2, #2
 80120f4:	701a      	strb	r2, [r3, #0]
      break;
 80120f6:	e0f2      	b.n	80122de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	885b      	ldrh	r3, [r3, #2]
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	2b05      	cmp	r3, #5
 8012100:	f200 80ac 	bhi.w	801225c <USBD_GetDescriptor+0x258>
 8012104:	a201      	add	r2, pc, #4	@ (adr r2, 801210c <USBD_GetDescriptor+0x108>)
 8012106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210a:	bf00      	nop
 801210c:	08012125 	.word	0x08012125
 8012110:	08012159 	.word	0x08012159
 8012114:	0801218d 	.word	0x0801218d
 8012118:	080121c1 	.word	0x080121c1
 801211c:	080121f5 	.word	0x080121f5
 8012120:	08012229 	.word	0x08012229
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00b      	beq.n	8012148 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	7c12      	ldrb	r2, [r2, #16]
 801213c:	f107 0108 	add.w	r1, r7, #8
 8012140:	4610      	mov	r0, r2
 8012142:	4798      	blx	r3
 8012144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012146:	e091      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 facb 	bl	80126e6 <USBD_CtlError>
            err++;
 8012150:	7afb      	ldrb	r3, [r7, #11]
 8012152:	3301      	adds	r3, #1
 8012154:	72fb      	strb	r3, [r7, #11]
          break;
 8012156:	e089      	b.n	801226c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d00b      	beq.n	801217c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	7c12      	ldrb	r2, [r2, #16]
 8012170:	f107 0108 	add.w	r1, r7, #8
 8012174:	4610      	mov	r0, r2
 8012176:	4798      	blx	r3
 8012178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801217a:	e077      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 fab1 	bl	80126e6 <USBD_CtlError>
            err++;
 8012184:	7afb      	ldrb	r3, [r7, #11]
 8012186:	3301      	adds	r3, #1
 8012188:	72fb      	strb	r3, [r7, #11]
          break;
 801218a:	e06f      	b.n	801226c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00b      	beq.n	80121b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	7c12      	ldrb	r2, [r2, #16]
 80121a4:	f107 0108 	add.w	r1, r7, #8
 80121a8:	4610      	mov	r0, r2
 80121aa:	4798      	blx	r3
 80121ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121ae:	e05d      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 fa97 	bl	80126e6 <USBD_CtlError>
            err++;
 80121b8:	7afb      	ldrb	r3, [r7, #11]
 80121ba:	3301      	adds	r3, #1
 80121bc:	72fb      	strb	r3, [r7, #11]
          break;
 80121be:	e055      	b.n	801226c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00b      	beq.n	80121e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	7c12      	ldrb	r2, [r2, #16]
 80121d8:	f107 0108 	add.w	r1, r7, #8
 80121dc:	4610      	mov	r0, r2
 80121de:	4798      	blx	r3
 80121e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121e2:	e043      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 fa7d 	bl	80126e6 <USBD_CtlError>
            err++;
 80121ec:	7afb      	ldrb	r3, [r7, #11]
 80121ee:	3301      	adds	r3, #1
 80121f0:	72fb      	strb	r3, [r7, #11]
          break;
 80121f2:	e03b      	b.n	801226c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d00b      	beq.n	8012218 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012206:	695b      	ldr	r3, [r3, #20]
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	7c12      	ldrb	r2, [r2, #16]
 801220c:	f107 0108 	add.w	r1, r7, #8
 8012210:	4610      	mov	r0, r2
 8012212:	4798      	blx	r3
 8012214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012216:	e029      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fa63 	bl	80126e6 <USBD_CtlError>
            err++;
 8012220:	7afb      	ldrb	r3, [r7, #11]
 8012222:	3301      	adds	r3, #1
 8012224:	72fb      	strb	r3, [r7, #11]
          break;
 8012226:	e021      	b.n	801226c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801222e:	699b      	ldr	r3, [r3, #24]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00b      	beq.n	801224c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801223a:	699b      	ldr	r3, [r3, #24]
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	7c12      	ldrb	r2, [r2, #16]
 8012240:	f107 0108 	add.w	r1, r7, #8
 8012244:	4610      	mov	r0, r2
 8012246:	4798      	blx	r3
 8012248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801224a:	e00f      	b.n	801226c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fa49 	bl	80126e6 <USBD_CtlError>
            err++;
 8012254:	7afb      	ldrb	r3, [r7, #11]
 8012256:	3301      	adds	r3, #1
 8012258:	72fb      	strb	r3, [r7, #11]
          break;
 801225a:	e007      	b.n	801226c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801225c:	6839      	ldr	r1, [r7, #0]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fa41 	bl	80126e6 <USBD_CtlError>
          err++;
 8012264:	7afb      	ldrb	r3, [r7, #11]
 8012266:	3301      	adds	r3, #1
 8012268:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801226a:	bf00      	nop
      }
      break;
 801226c:	e037      	b.n	80122de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	7c1b      	ldrb	r3, [r3, #16]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d109      	bne.n	801228a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801227c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801227e:	f107 0208 	add.w	r2, r7, #8
 8012282:	4610      	mov	r0, r2
 8012284:	4798      	blx	r3
 8012286:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012288:	e029      	b.n	80122de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fa2a 	bl	80126e6 <USBD_CtlError>
        err++;
 8012292:	7afb      	ldrb	r3, [r7, #11]
 8012294:	3301      	adds	r3, #1
 8012296:	72fb      	strb	r3, [r7, #11]
      break;
 8012298:	e021      	b.n	80122de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	7c1b      	ldrb	r3, [r3, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d10d      	bne.n	80122be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122aa:	f107 0208 	add.w	r2, r7, #8
 80122ae:	4610      	mov	r0, r2
 80122b0:	4798      	blx	r3
 80122b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	3301      	adds	r3, #1
 80122b8:	2207      	movs	r2, #7
 80122ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122bc:	e00f      	b.n	80122de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80122be:	6839      	ldr	r1, [r7, #0]
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 fa10 	bl	80126e6 <USBD_CtlError>
        err++;
 80122c6:	7afb      	ldrb	r3, [r7, #11]
 80122c8:	3301      	adds	r3, #1
 80122ca:	72fb      	strb	r3, [r7, #11]
      break;
 80122cc:	e007      	b.n	80122de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 fa08 	bl	80126e6 <USBD_CtlError>
      err++;
 80122d6:	7afb      	ldrb	r3, [r7, #11]
 80122d8:	3301      	adds	r3, #1
 80122da:	72fb      	strb	r3, [r7, #11]
      break;
 80122dc:	bf00      	nop
  }

  if (err != 0U)
 80122de:	7afb      	ldrb	r3, [r7, #11]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d11e      	bne.n	8012322 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	88db      	ldrh	r3, [r3, #6]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d016      	beq.n	801231a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80122ec:	893b      	ldrh	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00e      	beq.n	8012310 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	88da      	ldrh	r2, [r3, #6]
 80122f6:	893b      	ldrh	r3, [r7, #8]
 80122f8:	4293      	cmp	r3, r2
 80122fa:	bf28      	it	cs
 80122fc:	4613      	movcs	r3, r2
 80122fe:	b29b      	uxth	r3, r3
 8012300:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012302:	893b      	ldrh	r3, [r7, #8]
 8012304:	461a      	mov	r2, r3
 8012306:	68f9      	ldr	r1, [r7, #12]
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 fa69 	bl	80127e0 <USBD_CtlSendData>
 801230e:	e009      	b.n	8012324 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012310:	6839      	ldr	r1, [r7, #0]
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f9e7 	bl	80126e6 <USBD_CtlError>
 8012318:	e004      	b.n	8012324 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 faba 	bl	8012894 <USBD_CtlSendStatus>
 8012320:	e000      	b.n	8012324 <USBD_GetDescriptor+0x320>
    return;
 8012322:	bf00      	nop
  }
}
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop

0801232c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	889b      	ldrh	r3, [r3, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d131      	bne.n	80123a2 <USBD_SetAddress+0x76>
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	88db      	ldrh	r3, [r3, #6]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d12d      	bne.n	80123a2 <USBD_SetAddress+0x76>
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	885b      	ldrh	r3, [r3, #2]
 801234a:	2b7f      	cmp	r3, #127	@ 0x7f
 801234c:	d829      	bhi.n	80123a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	885b      	ldrh	r3, [r3, #2]
 8012352:	b2db      	uxtb	r3, r3
 8012354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012360:	b2db      	uxtb	r3, r3
 8012362:	2b03      	cmp	r3, #3
 8012364:	d104      	bne.n	8012370 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 f9bc 	bl	80126e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801236e:	e01d      	b.n	80123ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	7bfa      	ldrb	r2, [r7, #15]
 8012374:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012378:	7bfb      	ldrb	r3, [r7, #15]
 801237a:	4619      	mov	r1, r3
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f003 fceb 	bl	8015d58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 fa86 	bl	8012894 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d004      	beq.n	8012398 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2202      	movs	r2, #2
 8012392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012396:	e009      	b.n	80123ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2201      	movs	r2, #1
 801239c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123a0:	e004      	b.n	80123ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 f99e 	bl	80126e6 <USBD_CtlError>
  }
}
 80123aa:	bf00      	nop
 80123ac:	bf00      	nop
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	885b      	ldrh	r3, [r3, #2]
 80123c6:	b2da      	uxtb	r2, r3
 80123c8:	4b4e      	ldr	r3, [pc, #312]	@ (8012504 <USBD_SetConfig+0x150>)
 80123ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123cc:	4b4d      	ldr	r3, [pc, #308]	@ (8012504 <USBD_SetConfig+0x150>)
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d905      	bls.n	80123e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123d4:	6839      	ldr	r1, [r7, #0]
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f985 	bl	80126e6 <USBD_CtlError>
    return USBD_FAIL;
 80123dc:	2303      	movs	r3, #3
 80123de:	e08c      	b.n	80124fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	2b02      	cmp	r3, #2
 80123ea:	d002      	beq.n	80123f2 <USBD_SetConfig+0x3e>
 80123ec:	2b03      	cmp	r3, #3
 80123ee:	d029      	beq.n	8012444 <USBD_SetConfig+0x90>
 80123f0:	e075      	b.n	80124de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80123f2:	4b44      	ldr	r3, [pc, #272]	@ (8012504 <USBD_SetConfig+0x150>)
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d020      	beq.n	801243c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80123fa:	4b42      	ldr	r3, [pc, #264]	@ (8012504 <USBD_SetConfig+0x150>)
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	461a      	mov	r2, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012404:	4b3f      	ldr	r3, [pc, #252]	@ (8012504 <USBD_SetConfig+0x150>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	4619      	mov	r1, r3
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7fe ffb9 	bl	8011382 <USBD_SetClassConfig>
 8012410:	4603      	mov	r3, r0
 8012412:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012414:	7bfb      	ldrb	r3, [r7, #15]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d008      	beq.n	801242c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801241a:	6839      	ldr	r1, [r7, #0]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f962 	bl	80126e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2202      	movs	r2, #2
 8012426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801242a:	e065      	b.n	80124f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fa31 	bl	8012894 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2203      	movs	r2, #3
 8012436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801243a:	e05d      	b.n	80124f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fa29 	bl	8012894 <USBD_CtlSendStatus>
      break;
 8012442:	e059      	b.n	80124f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012444:	4b2f      	ldr	r3, [pc, #188]	@ (8012504 <USBD_SetConfig+0x150>)
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d112      	bne.n	8012472 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2202      	movs	r2, #2
 8012450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012454:	4b2b      	ldr	r3, [pc, #172]	@ (8012504 <USBD_SetConfig+0x150>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	461a      	mov	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801245e:	4b29      	ldr	r3, [pc, #164]	@ (8012504 <USBD_SetConfig+0x150>)
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	4619      	mov	r1, r3
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7fe ffa8 	bl	80113ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 fa12 	bl	8012894 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012470:	e042      	b.n	80124f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012472:	4b24      	ldr	r3, [pc, #144]	@ (8012504 <USBD_SetConfig+0x150>)
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	429a      	cmp	r2, r3
 801247e:	d02a      	beq.n	80124d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	b2db      	uxtb	r3, r3
 8012486:	4619      	mov	r1, r3
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7fe ff96 	bl	80113ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801248e:	4b1d      	ldr	r3, [pc, #116]	@ (8012504 <USBD_SetConfig+0x150>)
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	461a      	mov	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012498:	4b1a      	ldr	r3, [pc, #104]	@ (8012504 <USBD_SetConfig+0x150>)
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	4619      	mov	r1, r3
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fe ff6f 	bl	8011382 <USBD_SetClassConfig>
 80124a4:	4603      	mov	r3, r0
 80124a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80124a8:	7bfb      	ldrb	r3, [r7, #15]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00f      	beq.n	80124ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 f918 	bl	80126e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	685b      	ldr	r3, [r3, #4]
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	4619      	mov	r1, r3
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7fe ff7b 	bl	80113ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2202      	movs	r2, #2
 80124c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80124cc:	e014      	b.n	80124f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f9e0 	bl	8012894 <USBD_CtlSendStatus>
      break;
 80124d4:	e010      	b.n	80124f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 f9dc 	bl	8012894 <USBD_CtlSendStatus>
      break;
 80124dc:	e00c      	b.n	80124f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 f900 	bl	80126e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80124e6:	4b07      	ldr	r3, [pc, #28]	@ (8012504 <USBD_SetConfig+0x150>)
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	4619      	mov	r1, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f7fe ff64 	bl	80113ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80124f2:	2303      	movs	r3, #3
 80124f4:	73fb      	strb	r3, [r7, #15]
      break;
 80124f6:	bf00      	nop
  }

  return ret;
 80124f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
 8012502:	bf00      	nop
 8012504:	2400076c 	.word	0x2400076c

08012508 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	88db      	ldrh	r3, [r3, #6]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d004      	beq.n	8012524 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f000 f8e2 	bl	80126e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012522:	e023      	b.n	801256c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b02      	cmp	r3, #2
 801252e:	dc02      	bgt.n	8012536 <USBD_GetConfig+0x2e>
 8012530:	2b00      	cmp	r3, #0
 8012532:	dc03      	bgt.n	801253c <USBD_GetConfig+0x34>
 8012534:	e015      	b.n	8012562 <USBD_GetConfig+0x5a>
 8012536:	2b03      	cmp	r3, #3
 8012538:	d00b      	beq.n	8012552 <USBD_GetConfig+0x4a>
 801253a:	e012      	b.n	8012562 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	3308      	adds	r3, #8
 8012546:	2201      	movs	r2, #1
 8012548:	4619      	mov	r1, r3
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f948 	bl	80127e0 <USBD_CtlSendData>
        break;
 8012550:	e00c      	b.n	801256c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	3304      	adds	r3, #4
 8012556:	2201      	movs	r2, #1
 8012558:	4619      	mov	r1, r3
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f940 	bl	80127e0 <USBD_CtlSendData>
        break;
 8012560:	e004      	b.n	801256c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012562:	6839      	ldr	r1, [r7, #0]
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 f8be 	bl	80126e6 <USBD_CtlError>
        break;
 801256a:	bf00      	nop
}
 801256c:	bf00      	nop
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012584:	b2db      	uxtb	r3, r3
 8012586:	3b01      	subs	r3, #1
 8012588:	2b02      	cmp	r3, #2
 801258a:	d81e      	bhi.n	80125ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	88db      	ldrh	r3, [r3, #6]
 8012590:	2b02      	cmp	r3, #2
 8012592:	d004      	beq.n	801259e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012594:	6839      	ldr	r1, [r7, #0]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 f8a5 	bl	80126e6 <USBD_CtlError>
        break;
 801259c:	e01a      	b.n	80125d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2201      	movs	r2, #1
 80125a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d005      	beq.n	80125ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	f043 0202 	orr.w	r2, r3, #2
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	330c      	adds	r3, #12
 80125be:	2202      	movs	r2, #2
 80125c0:	4619      	mov	r1, r3
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 f90c 	bl	80127e0 <USBD_CtlSendData>
      break;
 80125c8:	e004      	b.n	80125d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f88a 	bl	80126e6 <USBD_CtlError>
      break;
 80125d2:	bf00      	nop
  }
}
 80125d4:	bf00      	nop
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	885b      	ldrh	r3, [r3, #2]
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d107      	bne.n	80125fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2201      	movs	r2, #1
 80125f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 f94c 	bl	8012894 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80125fc:	e013      	b.n	8012626 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	885b      	ldrh	r3, [r3, #2]
 8012602:	2b02      	cmp	r3, #2
 8012604:	d10b      	bne.n	801261e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	889b      	ldrh	r3, [r3, #4]
 801260a:	0a1b      	lsrs	r3, r3, #8
 801260c:	b29b      	uxth	r3, r3
 801260e:	b2da      	uxtb	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f93c 	bl	8012894 <USBD_CtlSendStatus>
}
 801261c:	e003      	b.n	8012626 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f860 	bl	80126e6 <USBD_CtlError>
}
 8012626:	bf00      	nop
 8012628:	3708      	adds	r7, #8
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b082      	sub	sp, #8
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801263e:	b2db      	uxtb	r3, r3
 8012640:	3b01      	subs	r3, #1
 8012642:	2b02      	cmp	r3, #2
 8012644:	d80b      	bhi.n	801265e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	885b      	ldrh	r3, [r3, #2]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d10c      	bne.n	8012668 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 f91c 	bl	8012894 <USBD_CtlSendStatus>
      }
      break;
 801265c:	e004      	b.n	8012668 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 f840 	bl	80126e6 <USBD_CtlError>
      break;
 8012666:	e000      	b.n	801266a <USBD_ClrFeature+0x3c>
      break;
 8012668:	bf00      	nop
  }
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b084      	sub	sp, #16
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
 801267a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	781a      	ldrb	r2, [r3, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	3301      	adds	r3, #1
 801268c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	781a      	ldrb	r2, [r3, #0]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3301      	adds	r3, #1
 801269a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f7ff fa16 	bl	8011ace <SWAPBYTE>
 80126a2:	4603      	mov	r3, r0
 80126a4:	461a      	mov	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	3301      	adds	r3, #1
 80126ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3301      	adds	r3, #1
 80126b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f7ff fa09 	bl	8011ace <SWAPBYTE>
 80126bc:	4603      	mov	r3, r0
 80126be:	461a      	mov	r2, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	3301      	adds	r3, #1
 80126c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3301      	adds	r3, #1
 80126ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f7ff f9fc 	bl	8011ace <SWAPBYTE>
 80126d6:	4603      	mov	r3, r0
 80126d8:	461a      	mov	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	80da      	strh	r2, [r3, #6]
}
 80126de:	bf00      	nop
 80126e0:	3710      	adds	r7, #16
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e6:	b580      	push	{r7, lr}
 80126e8:	b082      	sub	sp, #8
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80126f0:	2180      	movs	r1, #128	@ 0x80
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f003 fac6 	bl	8015c84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126f8:	2100      	movs	r1, #0
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f003 fac2 	bl	8015c84 <USBD_LL_StallEP>
}
 8012700:	bf00      	nop
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012714:	2300      	movs	r3, #0
 8012716:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d042      	beq.n	80127a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012722:	6938      	ldr	r0, [r7, #16]
 8012724:	f000 f842 	bl	80127ac <USBD_GetLen>
 8012728:	4603      	mov	r3, r0
 801272a:	3301      	adds	r3, #1
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012732:	d808      	bhi.n	8012746 <USBD_GetString+0x3e>
 8012734:	6938      	ldr	r0, [r7, #16]
 8012736:	f000 f839 	bl	80127ac <USBD_GetLen>
 801273a:	4603      	mov	r3, r0
 801273c:	3301      	adds	r3, #1
 801273e:	b29b      	uxth	r3, r3
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	b29a      	uxth	r2, r3
 8012744:	e001      	b.n	801274a <USBD_GetString+0x42>
 8012746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801274e:	7dfb      	ldrb	r3, [r7, #23]
 8012750:	68ba      	ldr	r2, [r7, #8]
 8012752:	4413      	add	r3, r2
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	7812      	ldrb	r2, [r2, #0]
 8012758:	701a      	strb	r2, [r3, #0]
  idx++;
 801275a:	7dfb      	ldrb	r3, [r7, #23]
 801275c:	3301      	adds	r3, #1
 801275e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	68ba      	ldr	r2, [r7, #8]
 8012764:	4413      	add	r3, r2
 8012766:	2203      	movs	r2, #3
 8012768:	701a      	strb	r2, [r3, #0]
  idx++;
 801276a:	7dfb      	ldrb	r3, [r7, #23]
 801276c:	3301      	adds	r3, #1
 801276e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012770:	e013      	b.n	801279a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	4413      	add	r3, r2
 8012778:	693a      	ldr	r2, [r7, #16]
 801277a:	7812      	ldrb	r2, [r2, #0]
 801277c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	3301      	adds	r3, #1
 8012782:	613b      	str	r3, [r7, #16]
    idx++;
 8012784:	7dfb      	ldrb	r3, [r7, #23]
 8012786:	3301      	adds	r3, #1
 8012788:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801278a:	7dfb      	ldrb	r3, [r7, #23]
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	4413      	add	r3, r2
 8012790:	2200      	movs	r2, #0
 8012792:	701a      	strb	r2, [r3, #0]
    idx++;
 8012794:	7dfb      	ldrb	r3, [r7, #23]
 8012796:	3301      	adds	r3, #1
 8012798:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1e7      	bne.n	8012772 <USBD_GetString+0x6a>
 80127a2:	e000      	b.n	80127a6 <USBD_GetString+0x9e>
    return;
 80127a4:	bf00      	nop
  }
}
 80127a6:	3718      	adds	r7, #24
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80127b4:	2300      	movs	r3, #0
 80127b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80127bc:	e005      	b.n	80127ca <USBD_GetLen+0x1e>
  {
    len++;
 80127be:	7bfb      	ldrb	r3, [r7, #15]
 80127c0:	3301      	adds	r3, #1
 80127c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	3301      	adds	r3, #1
 80127c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1f5      	bne.n	80127be <USBD_GetLen+0x12>
  }

  return len;
 80127d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr

080127e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2202      	movs	r2, #2
 80127f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	2100      	movs	r1, #0
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	f003 fac5 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 801280c:	2300      	movs	r3, #0
}
 801280e:	4618      	mov	r0, r3
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b084      	sub	sp, #16
 801281a:	af00      	add	r7, sp, #0
 801281c:	60f8      	str	r0, [r7, #12]
 801281e:	60b9      	str	r1, [r7, #8]
 8012820:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	68ba      	ldr	r2, [r7, #8]
 8012826:	2100      	movs	r1, #0
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f003 fab4 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 801282e:	2300      	movs	r3, #0
}
 8012830:	4618      	mov	r0, r3
 8012832:	3710      	adds	r7, #16
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2203      	movs	r2, #3
 8012848:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	68ba      	ldr	r2, [r7, #8]
 8012860:	2100      	movs	r1, #0
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f003 fab8 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b084      	sub	sp, #16
 8012876:	af00      	add	r7, sp, #0
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	60b9      	str	r1, [r7, #8]
 801287c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	2100      	movs	r1, #0
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f003 faa7 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801288a:	2300      	movs	r3, #0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2204      	movs	r2, #4
 80128a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80128a4:	2300      	movs	r3, #0
 80128a6:	2200      	movs	r2, #0
 80128a8:	2100      	movs	r1, #0
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f003 fa73 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b082      	sub	sp, #8
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2205      	movs	r2, #5
 80128c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80128ca:	2300      	movs	r3, #0
 80128cc:	2200      	movs	r2, #0
 80128ce:	2100      	movs	r1, #0
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f003 fa81 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <__NVIC_SetPriority>:
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	6039      	str	r1, [r7, #0]
 80128ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80128ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	db0a      	blt.n	801290a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	b2da      	uxtb	r2, r3
 80128f8:	490c      	ldr	r1, [pc, #48]	@ (801292c <__NVIC_SetPriority+0x4c>)
 80128fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128fe:	0112      	lsls	r2, r2, #4
 8012900:	b2d2      	uxtb	r2, r2
 8012902:	440b      	add	r3, r1
 8012904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012908:	e00a      	b.n	8012920 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	b2da      	uxtb	r2, r3
 801290e:	4908      	ldr	r1, [pc, #32]	@ (8012930 <__NVIC_SetPriority+0x50>)
 8012910:	88fb      	ldrh	r3, [r7, #6]
 8012912:	f003 030f 	and.w	r3, r3, #15
 8012916:	3b04      	subs	r3, #4
 8012918:	0112      	lsls	r2, r2, #4
 801291a:	b2d2      	uxtb	r2, r2
 801291c:	440b      	add	r3, r1
 801291e:	761a      	strb	r2, [r3, #24]
}
 8012920:	bf00      	nop
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	e000e100 	.word	0xe000e100
 8012930:	e000ed00 	.word	0xe000ed00

08012934 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012934:	b580      	push	{r7, lr}
 8012936:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012938:	4b05      	ldr	r3, [pc, #20]	@ (8012950 <SysTick_Handler+0x1c>)
 801293a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801293c:	f001 fcf4 	bl	8014328 <xTaskGetSchedulerState>
 8012940:	4603      	mov	r3, r0
 8012942:	2b01      	cmp	r3, #1
 8012944:	d001      	beq.n	801294a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012946:	f002 faef 	bl	8014f28 <xPortSysTickHandler>
  }
}
 801294a:	bf00      	nop
 801294c:	bd80      	pop	{r7, pc}
 801294e:	bf00      	nop
 8012950:	e000e010 	.word	0xe000e010

08012954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012954:	b580      	push	{r7, lr}
 8012956:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012958:	2100      	movs	r1, #0
 801295a:	f06f 0004 	mvn.w	r0, #4
 801295e:	f7ff ffbf 	bl	80128e0 <__NVIC_SetPriority>
#endif
}
 8012962:	bf00      	nop
 8012964:	bd80      	pop	{r7, pc}
	...

08012968 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801296e:	f3ef 8305 	mrs	r3, IPSR
 8012972:	603b      	str	r3, [r7, #0]
  return(result);
 8012974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012976:	2b00      	cmp	r3, #0
 8012978:	d003      	beq.n	8012982 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801297a:	f06f 0305 	mvn.w	r3, #5
 801297e:	607b      	str	r3, [r7, #4]
 8012980:	e00c      	b.n	801299c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012982:	4b0a      	ldr	r3, [pc, #40]	@ (80129ac <osKernelInitialize+0x44>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d105      	bne.n	8012996 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801298a:	4b08      	ldr	r3, [pc, #32]	@ (80129ac <osKernelInitialize+0x44>)
 801298c:	2201      	movs	r2, #1
 801298e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012990:	2300      	movs	r3, #0
 8012992:	607b      	str	r3, [r7, #4]
 8012994:	e002      	b.n	801299c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012996:	f04f 33ff 	mov.w	r3, #4294967295
 801299a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801299c:	687b      	ldr	r3, [r7, #4]
}
 801299e:	4618      	mov	r0, r3
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	24000770 	.word	0x24000770

080129b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129b6:	f3ef 8305 	mrs	r3, IPSR
 80129ba:	603b      	str	r3, [r7, #0]
  return(result);
 80129bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d003      	beq.n	80129ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80129c2:	f06f 0305 	mvn.w	r3, #5
 80129c6:	607b      	str	r3, [r7, #4]
 80129c8:	e010      	b.n	80129ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80129ca:	4b0b      	ldr	r3, [pc, #44]	@ (80129f8 <osKernelStart+0x48>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d109      	bne.n	80129e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80129d2:	f7ff ffbf 	bl	8012954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80129d6:	4b08      	ldr	r3, [pc, #32]	@ (80129f8 <osKernelStart+0x48>)
 80129d8:	2202      	movs	r2, #2
 80129da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80129dc:	f001 f840 	bl	8013a60 <vTaskStartScheduler>
      stat = osOK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	607b      	str	r3, [r7, #4]
 80129e4:	e002      	b.n	80129ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80129e6:	f04f 33ff 	mov.w	r3, #4294967295
 80129ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80129ec:	687b      	ldr	r3, [r7, #4]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	24000770 	.word	0x24000770

080129fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b08e      	sub	sp, #56	@ 0x38
 8012a00:	af04      	add	r7, sp, #16
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a0c:	f3ef 8305 	mrs	r3, IPSR
 8012a10:	617b      	str	r3, [r7, #20]
  return(result);
 8012a12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d17e      	bne.n	8012b16 <osThreadNew+0x11a>
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d07b      	beq.n	8012b16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012a1e:	2380      	movs	r3, #128	@ 0x80
 8012a20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012a22:	2318      	movs	r3, #24
 8012a24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012a26:	2300      	movs	r3, #0
 8012a28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d045      	beq.n	8012ac2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d002      	beq.n	8012a44 <osThreadNew+0x48>
        name = attr->name;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	699b      	ldr	r3, [r3, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	699b      	ldr	r3, [r3, #24]
 8012a50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d008      	beq.n	8012a6a <osThreadNew+0x6e>
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	2b38      	cmp	r3, #56	@ 0x38
 8012a5c:	d805      	bhi.n	8012a6a <osThreadNew+0x6e>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	f003 0301 	and.w	r3, r3, #1
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <osThreadNew+0x72>
        return (NULL);
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	e054      	b.n	8012b18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d003      	beq.n	8012a7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	695b      	ldr	r3, [r3, #20]
 8012a7a:	089b      	lsrs	r3, r3, #2
 8012a7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	689b      	ldr	r3, [r3, #8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00e      	beq.n	8012aa4 <osThreadNew+0xa8>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8012a8c:	d90a      	bls.n	8012aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d006      	beq.n	8012aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	695b      	ldr	r3, [r3, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <osThreadNew+0xa8>
        mem = 1;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	61bb      	str	r3, [r7, #24]
 8012aa2:	e010      	b.n	8012ac6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	689b      	ldr	r3, [r3, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10c      	bne.n	8012ac6 <osThreadNew+0xca>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d108      	bne.n	8012ac6 <osThreadNew+0xca>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	691b      	ldr	r3, [r3, #16]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d104      	bne.n	8012ac6 <osThreadNew+0xca>
          mem = 0;
 8012abc:	2300      	movs	r3, #0
 8012abe:	61bb      	str	r3, [r7, #24]
 8012ac0:	e001      	b.n	8012ac6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d110      	bne.n	8012aee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012ad4:	9202      	str	r2, [sp, #8]
 8012ad6:	9301      	str	r3, [sp, #4]
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	6a3a      	ldr	r2, [r7, #32]
 8012ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	f000 fdfe 	bl	80136e4 <xTaskCreateStatic>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	613b      	str	r3, [r7, #16]
 8012aec:	e013      	b.n	8012b16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d110      	bne.n	8012b16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	f107 0310 	add.w	r3, r7, #16
 8012afc:	9301      	str	r3, [sp, #4]
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	9300      	str	r3, [sp, #0]
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f000 fe4c 	bl	80137a4 <xTaskCreate>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d001      	beq.n	8012b16 <osThreadNew+0x11a>
            hTask = NULL;
 8012b12:	2300      	movs	r3, #0
 8012b14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012b16:	693b      	ldr	r3, [r7, #16]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3728      	adds	r7, #40	@ 0x28
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	4a07      	ldr	r2, [pc, #28]	@ (8012b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8012b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	4a06      	ldr	r2, [pc, #24]	@ (8012b50 <vApplicationGetIdleTaskMemory+0x30>)
 8012b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2280      	movs	r2, #128	@ 0x80
 8012b3c:	601a      	str	r2, [r3, #0]
}
 8012b3e:	bf00      	nop
 8012b40:	3714      	adds	r7, #20
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	24000774 	.word	0x24000774
 8012b50:	2400081c 	.word	0x2400081c

08012b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012b54:	b480      	push	{r7}
 8012b56:	b085      	sub	sp, #20
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	4a07      	ldr	r2, [pc, #28]	@ (8012b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8012b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	4a06      	ldr	r2, [pc, #24]	@ (8012b84 <vApplicationGetTimerTaskMemory+0x30>)
 8012b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012b72:	601a      	str	r2, [r3, #0]
}
 8012b74:	bf00      	nop
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	24000a1c 	.word	0x24000a1c
 8012b84:	24000ac4 	.word	0x24000ac4

08012b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f103 0208 	add.w	r2, r3, #8
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f103 0208 	add.w	r2, r3, #8
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f103 0208 	add.w	r2, r3, #8
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012bbc:	bf00      	nop
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bd6:	bf00      	nop
 8012bd8:	370c      	adds	r7, #12
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr

08012be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012be2:	b480      	push	{r7}
 8012be4:	b085      	sub	sp, #20
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	689a      	ldr	r2, [r3, #8]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	683a      	ldr	r2, [r7, #0]
 8012c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	683a      	ldr	r2, [r7, #0]
 8012c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	1c5a      	adds	r2, r3, #1
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	601a      	str	r2, [r3, #0]
}
 8012c1e:	bf00      	nop
 8012c20:	3714      	adds	r7, #20
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr

08012c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c2a:	b480      	push	{r7}
 8012c2c:	b085      	sub	sp, #20
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
 8012c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c40:	d103      	bne.n	8012c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	691b      	ldr	r3, [r3, #16]
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	e00c      	b.n	8012c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3308      	adds	r3, #8
 8012c4e:	60fb      	str	r3, [r7, #12]
 8012c50:	e002      	b.n	8012c58 <vListInsert+0x2e>
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	60fb      	str	r3, [r7, #12]
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68ba      	ldr	r2, [r7, #8]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d2f6      	bcs.n	8012c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	685a      	ldr	r2, [r3, #4]
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	683a      	ldr	r2, [r7, #0]
 8012c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	68fa      	ldr	r2, [r7, #12]
 8012c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	687a      	ldr	r2, [r7, #4]
 8012c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	1c5a      	adds	r2, r3, #1
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	601a      	str	r2, [r3, #0]
}
 8012c90:	bf00      	nop
 8012c92:	3714      	adds	r7, #20
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	6892      	ldr	r2, [r2, #8]
 8012cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	6852      	ldr	r2, [r2, #4]
 8012cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d103      	bne.n	8012cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	689a      	ldr	r2, [r3, #8]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	1e5a      	subs	r2, r3, #1
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3714      	adds	r7, #20
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10b      	bne.n	8012d1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d08:	f383 8811 	msr	BASEPRI, r3
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012d16:	bf00      	nop
 8012d18:	bf00      	nop
 8012d1a:	e7fd      	b.n	8012d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012d1c:	f002 f874 	bl	8014e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d28:	68f9      	ldr	r1, [r7, #12]
 8012d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012d2c:	fb01 f303 	mul.w	r3, r1, r3
 8012d30:	441a      	add	r2, r3
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	68f9      	ldr	r1, [r7, #12]
 8012d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012d52:	fb01 f303 	mul.w	r3, r1, r3
 8012d56:	441a      	add	r2, r3
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	22ff      	movs	r2, #255	@ 0xff
 8012d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	22ff      	movs	r2, #255	@ 0xff
 8012d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d114      	bne.n	8012d9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	691b      	ldr	r3, [r3, #16]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d01a      	beq.n	8012db0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3310      	adds	r3, #16
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f001 f90c 	bl	8013f9c <xTaskRemoveFromEventList>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d012      	beq.n	8012db0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012dc0 <xQueueGenericReset+0xd0>)
 8012d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	e009      	b.n	8012db0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3310      	adds	r3, #16
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7ff fef1 	bl	8012b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	3324      	adds	r3, #36	@ 0x24
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7ff feec 	bl	8012b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012db0:	f002 f85c 	bl	8014e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012db4:	2301      	movs	r3, #1
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	e000ed04 	.word	0xe000ed04

08012dc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b08e      	sub	sp, #56	@ 0x38
 8012dc8:	af02      	add	r7, sp, #8
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d10b      	bne.n	8012df0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ddc:	f383 8811 	msr	BASEPRI, r3
 8012de0:	f3bf 8f6f 	isb	sy
 8012de4:	f3bf 8f4f 	dsb	sy
 8012de8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012dea:	bf00      	nop
 8012dec:	bf00      	nop
 8012dee:	e7fd      	b.n	8012dec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10b      	bne.n	8012e0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dfa:	f383 8811 	msr	BASEPRI, r3
 8012dfe:	f3bf 8f6f 	isb	sy
 8012e02:	f3bf 8f4f 	dsb	sy
 8012e06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	e7fd      	b.n	8012e0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <xQueueGenericCreateStatic+0x56>
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <xQueueGenericCreateStatic+0x5a>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e000      	b.n	8012e20 <xQueueGenericCreateStatic+0x5c>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10b      	bne.n	8012e3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	623b      	str	r3, [r7, #32]
}
 8012e36:	bf00      	nop
 8012e38:	bf00      	nop
 8012e3a:	e7fd      	b.n	8012e38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d102      	bne.n	8012e48 <xQueueGenericCreateStatic+0x84>
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d101      	bne.n	8012e4c <xQueueGenericCreateStatic+0x88>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e000      	b.n	8012e4e <xQueueGenericCreateStatic+0x8a>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d10b      	bne.n	8012e6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e56:	f383 8811 	msr	BASEPRI, r3
 8012e5a:	f3bf 8f6f 	isb	sy
 8012e5e:	f3bf 8f4f 	dsb	sy
 8012e62:	61fb      	str	r3, [r7, #28]
}
 8012e64:	bf00      	nop
 8012e66:	bf00      	nop
 8012e68:	e7fd      	b.n	8012e66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e6a:	2350      	movs	r3, #80	@ 0x50
 8012e6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	2b50      	cmp	r3, #80	@ 0x50
 8012e72:	d00b      	beq.n	8012e8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e78:	f383 8811 	msr	BASEPRI, r3
 8012e7c:	f3bf 8f6f 	isb	sy
 8012e80:	f3bf 8f4f 	dsb	sy
 8012e84:	61bb      	str	r3, [r7, #24]
}
 8012e86:	bf00      	nop
 8012e88:	bf00      	nop
 8012e8a:	e7fd      	b.n	8012e88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012e8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00d      	beq.n	8012eb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012ea0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	4613      	mov	r3, r2
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	68b9      	ldr	r1, [r7, #8]
 8012eae:	68f8      	ldr	r0, [r7, #12]
 8012eb0:	f000 f805 	bl	8012ebe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3730      	adds	r7, #48	@ 0x30
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	60f8      	str	r0, [r7, #12]
 8012ec6:	60b9      	str	r1, [r7, #8]
 8012ec8:	607a      	str	r2, [r7, #4]
 8012eca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d103      	bne.n	8012eda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	69ba      	ldr	r2, [r7, #24]
 8012ed6:	601a      	str	r2, [r3, #0]
 8012ed8:	e002      	b.n	8012ee0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	68fa      	ldr	r2, [r7, #12]
 8012ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	68ba      	ldr	r2, [r7, #8]
 8012eea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012eec:	2101      	movs	r1, #1
 8012eee:	69b8      	ldr	r0, [r7, #24]
 8012ef0:	f7ff fefe 	bl	8012cf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	78fa      	ldrb	r2, [r7, #3]
 8012ef8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012efc:	bf00      	nop
 8012efe:	3710      	adds	r7, #16
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b08e      	sub	sp, #56	@ 0x38
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
 8012f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012f12:	2300      	movs	r3, #0
 8012f14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10b      	bne.n	8012f38 <xQueueGenericSend+0x34>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012f32:	bf00      	nop
 8012f34:	bf00      	nop
 8012f36:	e7fd      	b.n	8012f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d103      	bne.n	8012f46 <xQueueGenericSend+0x42>
 8012f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d101      	bne.n	8012f4a <xQueueGenericSend+0x46>
 8012f46:	2301      	movs	r3, #1
 8012f48:	e000      	b.n	8012f4c <xQueueGenericSend+0x48>
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d10b      	bne.n	8012f68 <xQueueGenericSend+0x64>
	__asm volatile
 8012f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f54:	f383 8811 	msr	BASEPRI, r3
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	f3bf 8f4f 	dsb	sy
 8012f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f62:	bf00      	nop
 8012f64:	bf00      	nop
 8012f66:	e7fd      	b.n	8012f64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2b02      	cmp	r3, #2
 8012f6c:	d103      	bne.n	8012f76 <xQueueGenericSend+0x72>
 8012f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d101      	bne.n	8012f7a <xQueueGenericSend+0x76>
 8012f76:	2301      	movs	r3, #1
 8012f78:	e000      	b.n	8012f7c <xQueueGenericSend+0x78>
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10b      	bne.n	8012f98 <xQueueGenericSend+0x94>
	__asm volatile
 8012f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	623b      	str	r3, [r7, #32]
}
 8012f92:	bf00      	nop
 8012f94:	bf00      	nop
 8012f96:	e7fd      	b.n	8012f94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f98:	f001 f9c6 	bl	8014328 <xTaskGetSchedulerState>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d102      	bne.n	8012fa8 <xQueueGenericSend+0xa4>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d101      	bne.n	8012fac <xQueueGenericSend+0xa8>
 8012fa8:	2301      	movs	r3, #1
 8012faa:	e000      	b.n	8012fae <xQueueGenericSend+0xaa>
 8012fac:	2300      	movs	r3, #0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d10b      	bne.n	8012fca <xQueueGenericSend+0xc6>
	__asm volatile
 8012fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	61fb      	str	r3, [r7, #28]
}
 8012fc4:	bf00      	nop
 8012fc6:	bf00      	nop
 8012fc8:	e7fd      	b.n	8012fc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fca:	f001 ff1d 	bl	8014e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d302      	bcc.n	8012fe0 <xQueueGenericSend+0xdc>
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d129      	bne.n	8013034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012fe0:	683a      	ldr	r2, [r7, #0]
 8012fe2:	68b9      	ldr	r1, [r7, #8]
 8012fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fe6:	f000 fa0f 	bl	8013408 <prvCopyDataToQueue>
 8012fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d010      	beq.n	8013016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff6:	3324      	adds	r3, #36	@ 0x24
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 ffcf 	bl	8013f9c <xTaskRemoveFromEventList>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d013      	beq.n	801302c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013004:	4b3f      	ldr	r3, [pc, #252]	@ (8013104 <xQueueGenericSend+0x200>)
 8013006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	f3bf 8f4f 	dsb	sy
 8013010:	f3bf 8f6f 	isb	sy
 8013014:	e00a      	b.n	801302c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013018:	2b00      	cmp	r3, #0
 801301a:	d007      	beq.n	801302c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801301c:	4b39      	ldr	r3, [pc, #228]	@ (8013104 <xQueueGenericSend+0x200>)
 801301e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013022:	601a      	str	r2, [r3, #0]
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801302c:	f001 ff1e 	bl	8014e6c <vPortExitCritical>
				return pdPASS;
 8013030:	2301      	movs	r3, #1
 8013032:	e063      	b.n	80130fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d103      	bne.n	8013042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801303a:	f001 ff17 	bl	8014e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801303e:	2300      	movs	r3, #0
 8013040:	e05c      	b.n	80130fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013044:	2b00      	cmp	r3, #0
 8013046:	d106      	bne.n	8013056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013048:	f107 0314 	add.w	r3, r7, #20
 801304c:	4618      	mov	r0, r3
 801304e:	f001 f809 	bl	8014064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013052:	2301      	movs	r3, #1
 8013054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013056:	f001 ff09 	bl	8014e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801305a:	f000 fd71 	bl	8013b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801305e:	f001 fed3 	bl	8014e08 <vPortEnterCritical>
 8013062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013068:	b25b      	sxtb	r3, r3
 801306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801306e:	d103      	bne.n	8013078 <xQueueGenericSend+0x174>
 8013070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801307a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801307e:	b25b      	sxtb	r3, r3
 8013080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013084:	d103      	bne.n	801308e <xQueueGenericSend+0x18a>
 8013086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013088:	2200      	movs	r2, #0
 801308a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801308e:	f001 feed 	bl	8014e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013092:	1d3a      	adds	r2, r7, #4
 8013094:	f107 0314 	add.w	r3, r7, #20
 8013098:	4611      	mov	r1, r2
 801309a:	4618      	mov	r0, r3
 801309c:	f000 fff8 	bl	8014090 <xTaskCheckForTimeOut>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d124      	bne.n	80130f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80130a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130a8:	f000 faa6 	bl	80135f8 <prvIsQueueFull>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d018      	beq.n	80130e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80130b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b4:	3310      	adds	r3, #16
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f000 ff1c 	bl	8013ef8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130c2:	f000 fa31 	bl	8013528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80130c6:	f000 fd49 	bl	8013b5c <xTaskResumeAll>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f47f af7c 	bne.w	8012fca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80130d2:	4b0c      	ldr	r3, [pc, #48]	@ (8013104 <xQueueGenericSend+0x200>)
 80130d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130d8:	601a      	str	r2, [r3, #0]
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	e772      	b.n	8012fca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80130e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130e6:	f000 fa1f 	bl	8013528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130ea:	f000 fd37 	bl	8013b5c <xTaskResumeAll>
 80130ee:	e76c      	b.n	8012fca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80130f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130f2:	f000 fa19 	bl	8013528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130f6:	f000 fd31 	bl	8013b5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80130fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3738      	adds	r7, #56	@ 0x38
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	e000ed04 	.word	0xe000ed04

08013108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b090      	sub	sp, #64	@ 0x40
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10b      	bne.n	8013138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013124:	f383 8811 	msr	BASEPRI, r3
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013132:	bf00      	nop
 8013134:	bf00      	nop
 8013136:	e7fd      	b.n	8013134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d103      	bne.n	8013146 <xQueueGenericSendFromISR+0x3e>
 801313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013142:	2b00      	cmp	r3, #0
 8013144:	d101      	bne.n	801314a <xQueueGenericSendFromISR+0x42>
 8013146:	2301      	movs	r3, #1
 8013148:	e000      	b.n	801314c <xQueueGenericSendFromISR+0x44>
 801314a:	2300      	movs	r3, #0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10b      	bne.n	8013168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013162:	bf00      	nop
 8013164:	bf00      	nop
 8013166:	e7fd      	b.n	8013164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b02      	cmp	r3, #2
 801316c:	d103      	bne.n	8013176 <xQueueGenericSendFromISR+0x6e>
 801316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013172:	2b01      	cmp	r3, #1
 8013174:	d101      	bne.n	801317a <xQueueGenericSendFromISR+0x72>
 8013176:	2301      	movs	r3, #1
 8013178:	e000      	b.n	801317c <xQueueGenericSendFromISR+0x74>
 801317a:	2300      	movs	r3, #0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10b      	bne.n	8013198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	623b      	str	r3, [r7, #32]
}
 8013192:	bf00      	nop
 8013194:	bf00      	nop
 8013196:	e7fd      	b.n	8013194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013198:	f001 ff16 	bl	8014fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801319c:	f3ef 8211 	mrs	r2, BASEPRI
 80131a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131a4:	f383 8811 	msr	BASEPRI, r3
 80131a8:	f3bf 8f6f 	isb	sy
 80131ac:	f3bf 8f4f 	dsb	sy
 80131b0:	61fa      	str	r2, [r7, #28]
 80131b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80131b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80131bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d302      	bcc.n	80131ca <xQueueGenericSendFromISR+0xc2>
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	d12f      	bne.n	801322a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80131ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80131d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80131d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131da:	683a      	ldr	r2, [r7, #0]
 80131dc:	68b9      	ldr	r1, [r7, #8]
 80131de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131e0:	f000 f912 	bl	8013408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80131e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80131e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ec:	d112      	bne.n	8013214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d016      	beq.n	8013224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f8:	3324      	adds	r3, #36	@ 0x24
 80131fa:	4618      	mov	r0, r3
 80131fc:	f000 fece 	bl	8013f9c <xTaskRemoveFromEventList>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d00e      	beq.n	8013224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00b      	beq.n	8013224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	601a      	str	r2, [r3, #0]
 8013212:	e007      	b.n	8013224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013218:	3301      	adds	r3, #1
 801321a:	b2db      	uxtb	r3, r3
 801321c:	b25a      	sxtb	r2, r3
 801321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013224:	2301      	movs	r3, #1
 8013226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013228:	e001      	b.n	801322e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801322a:	2300      	movs	r3, #0
 801322c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801323c:	4618      	mov	r0, r3
 801323e:	3740      	adds	r7, #64	@ 0x40
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b08c      	sub	sp, #48	@ 0x30
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013250:	2300      	movs	r3, #0
 8013252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10b      	bne.n	8013276 <xQueueReceive+0x32>
	__asm volatile
 801325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013262:	f383 8811 	msr	BASEPRI, r3
 8013266:	f3bf 8f6f 	isb	sy
 801326a:	f3bf 8f4f 	dsb	sy
 801326e:	623b      	str	r3, [r7, #32]
}
 8013270:	bf00      	nop
 8013272:	bf00      	nop
 8013274:	e7fd      	b.n	8013272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d103      	bne.n	8013284 <xQueueReceive+0x40>
 801327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013280:	2b00      	cmp	r3, #0
 8013282:	d101      	bne.n	8013288 <xQueueReceive+0x44>
 8013284:	2301      	movs	r3, #1
 8013286:	e000      	b.n	801328a <xQueueReceive+0x46>
 8013288:	2300      	movs	r3, #0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d10b      	bne.n	80132a6 <xQueueReceive+0x62>
	__asm volatile
 801328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013292:	f383 8811 	msr	BASEPRI, r3
 8013296:	f3bf 8f6f 	isb	sy
 801329a:	f3bf 8f4f 	dsb	sy
 801329e:	61fb      	str	r3, [r7, #28]
}
 80132a0:	bf00      	nop
 80132a2:	bf00      	nop
 80132a4:	e7fd      	b.n	80132a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132a6:	f001 f83f 	bl	8014328 <xTaskGetSchedulerState>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d102      	bne.n	80132b6 <xQueueReceive+0x72>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d101      	bne.n	80132ba <xQueueReceive+0x76>
 80132b6:	2301      	movs	r3, #1
 80132b8:	e000      	b.n	80132bc <xQueueReceive+0x78>
 80132ba:	2300      	movs	r3, #0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d10b      	bne.n	80132d8 <xQueueReceive+0x94>
	__asm volatile
 80132c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132c4:	f383 8811 	msr	BASEPRI, r3
 80132c8:	f3bf 8f6f 	isb	sy
 80132cc:	f3bf 8f4f 	dsb	sy
 80132d0:	61bb      	str	r3, [r7, #24]
}
 80132d2:	bf00      	nop
 80132d4:	bf00      	nop
 80132d6:	e7fd      	b.n	80132d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80132d8:	f001 fd96 	bl	8014e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d01f      	beq.n	8013328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80132e8:	68b9      	ldr	r1, [r7, #8]
 80132ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132ec:	f000 f8f6 	bl	80134dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80132f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f2:	1e5a      	subs	r2, r3, #1
 80132f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132fa:	691b      	ldr	r3, [r3, #16]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00f      	beq.n	8013320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013302:	3310      	adds	r3, #16
 8013304:	4618      	mov	r0, r3
 8013306:	f000 fe49 	bl	8013f9c <xTaskRemoveFromEventList>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d007      	beq.n	8013320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013310:	4b3c      	ldr	r3, [pc, #240]	@ (8013404 <xQueueReceive+0x1c0>)
 8013312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013316:	601a      	str	r2, [r3, #0]
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013320:	f001 fda4 	bl	8014e6c <vPortExitCritical>
				return pdPASS;
 8013324:	2301      	movs	r3, #1
 8013326:	e069      	b.n	80133fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801332e:	f001 fd9d 	bl	8014e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013332:	2300      	movs	r3, #0
 8013334:	e062      	b.n	80133fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013338:	2b00      	cmp	r3, #0
 801333a:	d106      	bne.n	801334a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801333c:	f107 0310 	add.w	r3, r7, #16
 8013340:	4618      	mov	r0, r3
 8013342:	f000 fe8f 	bl	8014064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013346:	2301      	movs	r3, #1
 8013348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801334a:	f001 fd8f 	bl	8014e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801334e:	f000 fbf7 	bl	8013b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013352:	f001 fd59 	bl	8014e08 <vPortEnterCritical>
 8013356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801335c:	b25b      	sxtb	r3, r3
 801335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013362:	d103      	bne.n	801336c <xQueueReceive+0x128>
 8013364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013366:	2200      	movs	r2, #0
 8013368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801336e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013372:	b25b      	sxtb	r3, r3
 8013374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013378:	d103      	bne.n	8013382 <xQueueReceive+0x13e>
 801337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801337c:	2200      	movs	r2, #0
 801337e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013382:	f001 fd73 	bl	8014e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013386:	1d3a      	adds	r2, r7, #4
 8013388:	f107 0310 	add.w	r3, r7, #16
 801338c:	4611      	mov	r1, r2
 801338e:	4618      	mov	r0, r3
 8013390:	f000 fe7e 	bl	8014090 <xTaskCheckForTimeOut>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d123      	bne.n	80133e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801339a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801339c:	f000 f916 	bl	80135cc <prvIsQueueEmpty>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d017      	beq.n	80133d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80133a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a8:	3324      	adds	r3, #36	@ 0x24
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	4611      	mov	r1, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fda2 	bl	8013ef8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80133b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133b6:	f000 f8b7 	bl	8013528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80133ba:	f000 fbcf 	bl	8013b5c <xTaskResumeAll>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d189      	bne.n	80132d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80133c4:	4b0f      	ldr	r3, [pc, #60]	@ (8013404 <xQueueReceive+0x1c0>)
 80133c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133ca:	601a      	str	r2, [r3, #0]
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	f3bf 8f6f 	isb	sy
 80133d4:	e780      	b.n	80132d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80133d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133d8:	f000 f8a6 	bl	8013528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80133dc:	f000 fbbe 	bl	8013b5c <xTaskResumeAll>
 80133e0:	e77a      	b.n	80132d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80133e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133e4:	f000 f8a0 	bl	8013528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80133e8:	f000 fbb8 	bl	8013b5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133ee:	f000 f8ed 	bl	80135cc <prvIsQueueEmpty>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f43f af6f 	beq.w	80132d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3730      	adds	r7, #48	@ 0x30
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	e000ed04 	.word	0xe000ed04

08013408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013414:	2300      	movs	r3, #0
 8013416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801341c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10d      	bne.n	8013442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d14d      	bne.n	80134ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	4618      	mov	r0, r3
 8013434:	f000 ff96 	bl	8014364 <xTaskPriorityDisinherit>
 8013438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2200      	movs	r2, #0
 801343e:	609a      	str	r2, [r3, #8]
 8013440:	e043      	b.n	80134ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d119      	bne.n	801347c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	6858      	ldr	r0, [r3, #4]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013450:	461a      	mov	r2, r3
 8013452:	68b9      	ldr	r1, [r7, #8]
 8013454:	f004 f921 	bl	801769a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	685a      	ldr	r2, [r3, #4]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013460:	441a      	add	r2, r3
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	685a      	ldr	r2, [r3, #4]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	689b      	ldr	r3, [r3, #8]
 801346e:	429a      	cmp	r2, r3
 8013470:	d32b      	bcc.n	80134ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	605a      	str	r2, [r3, #4]
 801347a:	e026      	b.n	80134ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	68d8      	ldr	r0, [r3, #12]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013484:	461a      	mov	r2, r3
 8013486:	68b9      	ldr	r1, [r7, #8]
 8013488:	f004 f907 	bl	801769a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	68da      	ldr	r2, [r3, #12]
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013494:	425b      	negs	r3, r3
 8013496:	441a      	add	r2, r3
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	68da      	ldr	r2, [r3, #12]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d207      	bcs.n	80134b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	689a      	ldr	r2, [r3, #8]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134b0:	425b      	negs	r3, r3
 80134b2:	441a      	add	r2, r3
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b02      	cmp	r3, #2
 80134bc:	d105      	bne.n	80134ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d002      	beq.n	80134ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	3b01      	subs	r3, #1
 80134c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	1c5a      	adds	r2, r3, #1
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80134d2:	697b      	ldr	r3, [r7, #20]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}

080134dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d018      	beq.n	8013520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	68da      	ldr	r2, [r3, #12]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134f6:	441a      	add	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	68da      	ldr	r2, [r3, #12]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	429a      	cmp	r2, r3
 8013506:	d303      	bcc.n	8013510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	68d9      	ldr	r1, [r3, #12]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013518:	461a      	mov	r2, r3
 801351a:	6838      	ldr	r0, [r7, #0]
 801351c:	f004 f8bd 	bl	801769a <memcpy>
	}
}
 8013520:	bf00      	nop
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013530:	f001 fc6a 	bl	8014e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801353a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801353c:	e011      	b.n	8013562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013542:	2b00      	cmp	r3, #0
 8013544:	d012      	beq.n	801356c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	3324      	adds	r3, #36	@ 0x24
 801354a:	4618      	mov	r0, r3
 801354c:	f000 fd26 	bl	8013f9c <xTaskRemoveFromEventList>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013556:	f000 fdff 	bl	8014158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801355a:	7bfb      	ldrb	r3, [r7, #15]
 801355c:	3b01      	subs	r3, #1
 801355e:	b2db      	uxtb	r3, r3
 8013560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013566:	2b00      	cmp	r3, #0
 8013568:	dce9      	bgt.n	801353e <prvUnlockQueue+0x16>
 801356a:	e000      	b.n	801356e <prvUnlockQueue+0x46>
					break;
 801356c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	22ff      	movs	r2, #255	@ 0xff
 8013572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013576:	f001 fc79 	bl	8014e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801357a:	f001 fc45 	bl	8014e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013586:	e011      	b.n	80135ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d012      	beq.n	80135b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3310      	adds	r3, #16
 8013594:	4618      	mov	r0, r3
 8013596:	f000 fd01 	bl	8013f9c <xTaskRemoveFromEventList>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80135a0:	f000 fdda 	bl	8014158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80135a4:	7bbb      	ldrb	r3, [r7, #14]
 80135a6:	3b01      	subs	r3, #1
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	dce9      	bgt.n	8013588 <prvUnlockQueue+0x60>
 80135b4:	e000      	b.n	80135b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80135b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	22ff      	movs	r2, #255	@ 0xff
 80135bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80135c0:	f001 fc54 	bl	8014e6c <vPortExitCritical>
}
 80135c4:	bf00      	nop
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135d4:	f001 fc18 	bl	8014e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d102      	bne.n	80135e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80135e0:	2301      	movs	r3, #1
 80135e2:	60fb      	str	r3, [r7, #12]
 80135e4:	e001      	b.n	80135ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80135e6:	2300      	movs	r3, #0
 80135e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80135ea:	f001 fc3f 	bl	8014e6c <vPortExitCritical>

	return xReturn;
 80135ee:	68fb      	ldr	r3, [r7, #12]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3710      	adds	r7, #16
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013600:	f001 fc02 	bl	8014e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801360c:	429a      	cmp	r2, r3
 801360e:	d102      	bne.n	8013616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013610:	2301      	movs	r3, #1
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	e001      	b.n	801361a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013616:	2300      	movs	r3, #0
 8013618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801361a:	f001 fc27 	bl	8014e6c <vPortExitCritical>

	return xReturn;
 801361e:	68fb      	ldr	r3, [r7, #12]
}
 8013620:	4618      	mov	r0, r3
 8013622:	3710      	adds	r7, #16
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013632:	2300      	movs	r3, #0
 8013634:	60fb      	str	r3, [r7, #12]
 8013636:	e014      	b.n	8013662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013638:	4a0f      	ldr	r2, [pc, #60]	@ (8013678 <vQueueAddToRegistry+0x50>)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10b      	bne.n	801365c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013644:	490c      	ldr	r1, [pc, #48]	@ (8013678 <vQueueAddToRegistry+0x50>)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801364e:	4a0a      	ldr	r2, [pc, #40]	@ (8013678 <vQueueAddToRegistry+0x50>)
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	00db      	lsls	r3, r3, #3
 8013654:	4413      	add	r3, r2
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801365a:	e006      	b.n	801366a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	3301      	adds	r3, #1
 8013660:	60fb      	str	r3, [r7, #12]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2b07      	cmp	r3, #7
 8013666:	d9e7      	bls.n	8013638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013668:	bf00      	nop
 801366a:	bf00      	nop
 801366c:	3714      	adds	r7, #20
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	24000ec4 	.word	0x24000ec4

0801367c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801368c:	f001 fbbc 	bl	8014e08 <vPortEnterCritical>
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013696:	b25b      	sxtb	r3, r3
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d103      	bne.n	80136a6 <vQueueWaitForMessageRestricted+0x2a>
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136ac:	b25b      	sxtb	r3, r3
 80136ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136b2:	d103      	bne.n	80136bc <vQueueWaitForMessageRestricted+0x40>
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	2200      	movs	r2, #0
 80136b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80136bc:	f001 fbd6 	bl	8014e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d106      	bne.n	80136d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	3324      	adds	r3, #36	@ 0x24
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	68b9      	ldr	r1, [r7, #8]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 fc37 	bl	8013f44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80136d6:	6978      	ldr	r0, [r7, #20]
 80136d8:	f7ff ff26 	bl	8013528 <prvUnlockQueue>
	}
 80136dc:	bf00      	nop
 80136de:	3718      	adds	r7, #24
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b08e      	sub	sp, #56	@ 0x38
 80136e8:	af04      	add	r7, sp, #16
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
 80136f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80136f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d10b      	bne.n	8013710 <xTaskCreateStatic+0x2c>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	623b      	str	r3, [r7, #32]
}
 801370a:	bf00      	nop
 801370c:	bf00      	nop
 801370e:	e7fd      	b.n	801370c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013712:	2b00      	cmp	r3, #0
 8013714:	d10b      	bne.n	801372e <xTaskCreateStatic+0x4a>
	__asm volatile
 8013716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801371a:	f383 8811 	msr	BASEPRI, r3
 801371e:	f3bf 8f6f 	isb	sy
 8013722:	f3bf 8f4f 	dsb	sy
 8013726:	61fb      	str	r3, [r7, #28]
}
 8013728:	bf00      	nop
 801372a:	bf00      	nop
 801372c:	e7fd      	b.n	801372a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801372e:	23a8      	movs	r3, #168	@ 0xa8
 8013730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	2ba8      	cmp	r3, #168	@ 0xa8
 8013736:	d00b      	beq.n	8013750 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801373c:	f383 8811 	msr	BASEPRI, r3
 8013740:	f3bf 8f6f 	isb	sy
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	61bb      	str	r3, [r7, #24]
}
 801374a:	bf00      	nop
 801374c:	bf00      	nop
 801374e:	e7fd      	b.n	801374c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013750:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013754:	2b00      	cmp	r3, #0
 8013756:	d01e      	beq.n	8013796 <xTaskCreateStatic+0xb2>
 8013758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801375a:	2b00      	cmp	r3, #0
 801375c:	d01b      	beq.n	8013796 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013760:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013766:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376a:	2202      	movs	r2, #2
 801376c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013770:	2300      	movs	r3, #0
 8013772:	9303      	str	r3, [sp, #12]
 8013774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013776:	9302      	str	r3, [sp, #8]
 8013778:	f107 0314 	add.w	r3, r7, #20
 801377c:	9301      	str	r3, [sp, #4]
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	68b9      	ldr	r1, [r7, #8]
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	f000 f851 	bl	8013830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801378e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013790:	f000 f8f6 	bl	8013980 <prvAddNewTaskToReadyList>
 8013794:	e001      	b.n	801379a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013796:	2300      	movs	r3, #0
 8013798:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801379a:	697b      	ldr	r3, [r7, #20]
	}
 801379c:	4618      	mov	r0, r3
 801379e:	3728      	adds	r7, #40	@ 0x28
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08c      	sub	sp, #48	@ 0x30
 80137a8:	af04      	add	r7, sp, #16
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	603b      	str	r3, [r7, #0]
 80137b0:	4613      	mov	r3, r2
 80137b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80137b4:	88fb      	ldrh	r3, [r7, #6]
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f001 fc47 	bl	801504c <pvPortMalloc>
 80137be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d00e      	beq.n	80137e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80137c6:	20a8      	movs	r0, #168	@ 0xa8
 80137c8:	f001 fc40 	bl	801504c <pvPortMalloc>
 80137cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d003      	beq.n	80137dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80137d4:	69fb      	ldr	r3, [r7, #28]
 80137d6:	697a      	ldr	r2, [r7, #20]
 80137d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80137da:	e005      	b.n	80137e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80137dc:	6978      	ldr	r0, [r7, #20]
 80137de:	f001 fd03 	bl	80151e8 <vPortFree>
 80137e2:	e001      	b.n	80137e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80137e4:	2300      	movs	r3, #0
 80137e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d017      	beq.n	801381e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	2200      	movs	r2, #0
 80137f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80137f6:	88fa      	ldrh	r2, [r7, #6]
 80137f8:	2300      	movs	r3, #0
 80137fa:	9303      	str	r3, [sp, #12]
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	9302      	str	r3, [sp, #8]
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	9301      	str	r3, [sp, #4]
 8013804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	68b9      	ldr	r1, [r7, #8]
 801380c:	68f8      	ldr	r0, [r7, #12]
 801380e:	f000 f80f 	bl	8013830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013812:	69f8      	ldr	r0, [r7, #28]
 8013814:	f000 f8b4 	bl	8013980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013818:	2301      	movs	r3, #1
 801381a:	61bb      	str	r3, [r7, #24]
 801381c:	e002      	b.n	8013824 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801381e:	f04f 33ff 	mov.w	r3, #4294967295
 8013822:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013824:	69bb      	ldr	r3, [r7, #24]
	}
 8013826:	4618      	mov	r0, r3
 8013828:	3720      	adds	r7, #32
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
	...

08013830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b088      	sub	sp, #32
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
 801383c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013840:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	009b      	lsls	r3, r3, #2
 8013846:	461a      	mov	r2, r3
 8013848:	21a5      	movs	r1, #165	@ 0xa5
 801384a:	f003 fdba 	bl	80173c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013852:	6879      	ldr	r1, [r7, #4]
 8013854:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013858:	440b      	add	r3, r1
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4413      	add	r3, r2
 801385e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013860:	69bb      	ldr	r3, [r7, #24]
 8013862:	f023 0307 	bic.w	r3, r3, #7
 8013866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	f003 0307 	and.w	r3, r3, #7
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00b      	beq.n	801388a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	617b      	str	r3, [r7, #20]
}
 8013884:	bf00      	nop
 8013886:	bf00      	nop
 8013888:	e7fd      	b.n	8013886 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d01f      	beq.n	80138d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013890:	2300      	movs	r3, #0
 8013892:	61fb      	str	r3, [r7, #28]
 8013894:	e012      	b.n	80138bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013896:	68ba      	ldr	r2, [r7, #8]
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	4413      	add	r3, r2
 801389c:	7819      	ldrb	r1, [r3, #0]
 801389e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	4413      	add	r3, r2
 80138a4:	3334      	adds	r3, #52	@ 0x34
 80138a6:	460a      	mov	r2, r1
 80138a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	4413      	add	r3, r2
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	3301      	adds	r3, #1
 80138ba:	61fb      	str	r3, [r7, #28]
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	2b0f      	cmp	r3, #15
 80138c0:	d9e9      	bls.n	8013896 <prvInitialiseNewTask+0x66>
 80138c2:	e000      	b.n	80138c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80138c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80138c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c8:	2200      	movs	r2, #0
 80138ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80138ce:	e003      	b.n	80138d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80138d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d2:	2200      	movs	r2, #0
 80138d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80138d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138da:	2b37      	cmp	r3, #55	@ 0x37
 80138dc:	d901      	bls.n	80138e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80138de:	2337      	movs	r3, #55	@ 0x37
 80138e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80138e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80138e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80138ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f0:	2200      	movs	r2, #0
 80138f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80138f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f6:	3304      	adds	r3, #4
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7ff f965 	bl	8012bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80138fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013900:	3318      	adds	r3, #24
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff f960 	bl	8012bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801390c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013910:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801391a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801391c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013920:	2200      	movs	r2, #0
 8013922:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013928:	2200      	movs	r2, #0
 801392a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013930:	3354      	adds	r3, #84	@ 0x54
 8013932:	224c      	movs	r2, #76	@ 0x4c
 8013934:	2100      	movs	r1, #0
 8013936:	4618      	mov	r0, r3
 8013938:	f003 fd43 	bl	80173c2 <memset>
 801393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393e:	4a0d      	ldr	r2, [pc, #52]	@ (8013974 <prvInitialiseNewTask+0x144>)
 8013940:	659a      	str	r2, [r3, #88]	@ 0x58
 8013942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013944:	4a0c      	ldr	r2, [pc, #48]	@ (8013978 <prvInitialiseNewTask+0x148>)
 8013946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394a:	4a0c      	ldr	r2, [pc, #48]	@ (801397c <prvInitialiseNewTask+0x14c>)
 801394c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801394e:	683a      	ldr	r2, [r7, #0]
 8013950:	68f9      	ldr	r1, [r7, #12]
 8013952:	69b8      	ldr	r0, [r7, #24]
 8013954:	f001 f924 	bl	8014ba0 <pxPortInitialiseStack>
 8013958:	4602      	mov	r2, r0
 801395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801396a:	bf00      	nop
 801396c:	3720      	adds	r7, #32
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	24006d40 	.word	0x24006d40
 8013978:	24006da8 	.word	0x24006da8
 801397c:	24006e10 	.word	0x24006e10

08013980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013988:	f001 fa3e 	bl	8014e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801398c:	4b2d      	ldr	r3, [pc, #180]	@ (8013a44 <prvAddNewTaskToReadyList+0xc4>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	3301      	adds	r3, #1
 8013992:	4a2c      	ldr	r2, [pc, #176]	@ (8013a44 <prvAddNewTaskToReadyList+0xc4>)
 8013994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013996:	4b2c      	ldr	r3, [pc, #176]	@ (8013a48 <prvAddNewTaskToReadyList+0xc8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d109      	bne.n	80139b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801399e:	4a2a      	ldr	r2, [pc, #168]	@ (8013a48 <prvAddNewTaskToReadyList+0xc8>)
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80139a4:	4b27      	ldr	r3, [pc, #156]	@ (8013a44 <prvAddNewTaskToReadyList+0xc4>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d110      	bne.n	80139ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80139ac:	f000 fbf8 	bl	80141a0 <prvInitialiseTaskLists>
 80139b0:	e00d      	b.n	80139ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80139b2:	4b26      	ldr	r3, [pc, #152]	@ (8013a4c <prvAddNewTaskToReadyList+0xcc>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d109      	bne.n	80139ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80139ba:	4b23      	ldr	r3, [pc, #140]	@ (8013a48 <prvAddNewTaskToReadyList+0xc8>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d802      	bhi.n	80139ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80139c8:	4a1f      	ldr	r2, [pc, #124]	@ (8013a48 <prvAddNewTaskToReadyList+0xc8>)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80139ce:	4b20      	ldr	r3, [pc, #128]	@ (8013a50 <prvAddNewTaskToReadyList+0xd0>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	3301      	adds	r3, #1
 80139d4:	4a1e      	ldr	r2, [pc, #120]	@ (8013a50 <prvAddNewTaskToReadyList+0xd0>)
 80139d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80139d8:	4b1d      	ldr	r3, [pc, #116]	@ (8013a50 <prvAddNewTaskToReadyList+0xd0>)
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139e4:	4b1b      	ldr	r3, [pc, #108]	@ (8013a54 <prvAddNewTaskToReadyList+0xd4>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d903      	bls.n	80139f4 <prvAddNewTaskToReadyList+0x74>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139f0:	4a18      	ldr	r2, [pc, #96]	@ (8013a54 <prvAddNewTaskToReadyList+0xd4>)
 80139f2:	6013      	str	r3, [r2, #0]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139f8:	4613      	mov	r3, r2
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	4413      	add	r3, r2
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	4a15      	ldr	r2, [pc, #84]	@ (8013a58 <prvAddNewTaskToReadyList+0xd8>)
 8013a02:	441a      	add	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	3304      	adds	r3, #4
 8013a08:	4619      	mov	r1, r3
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	f7ff f8e9 	bl	8012be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a10:	f001 fa2c 	bl	8014e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a14:	4b0d      	ldr	r3, [pc, #52]	@ (8013a4c <prvAddNewTaskToReadyList+0xcc>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00e      	beq.n	8013a3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8013a48 <prvAddNewTaskToReadyList+0xc8>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d207      	bcs.n	8013a3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8013a5c <prvAddNewTaskToReadyList+0xdc>)
 8013a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a3a:	bf00      	nop
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	240013d8 	.word	0x240013d8
 8013a48:	24000f04 	.word	0x24000f04
 8013a4c:	240013e4 	.word	0x240013e4
 8013a50:	240013f4 	.word	0x240013f4
 8013a54:	240013e0 	.word	0x240013e0
 8013a58:	24000f08 	.word	0x24000f08
 8013a5c:	e000ed04 	.word	0xe000ed04

08013a60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b08a      	sub	sp, #40	@ 0x28
 8013a64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a66:	2300      	movs	r3, #0
 8013a68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a6e:	463a      	mov	r2, r7
 8013a70:	1d39      	adds	r1, r7, #4
 8013a72:	f107 0308 	add.w	r3, r7, #8
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7ff f852 	bl	8012b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a7c:	6839      	ldr	r1, [r7, #0]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	9202      	str	r2, [sp, #8]
 8013a84:	9301      	str	r3, [sp, #4]
 8013a86:	2300      	movs	r3, #0
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	460a      	mov	r2, r1
 8013a8e:	4924      	ldr	r1, [pc, #144]	@ (8013b20 <vTaskStartScheduler+0xc0>)
 8013a90:	4824      	ldr	r0, [pc, #144]	@ (8013b24 <vTaskStartScheduler+0xc4>)
 8013a92:	f7ff fe27 	bl	80136e4 <xTaskCreateStatic>
 8013a96:	4603      	mov	r3, r0
 8013a98:	4a23      	ldr	r2, [pc, #140]	@ (8013b28 <vTaskStartScheduler+0xc8>)
 8013a9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013a9c:	4b22      	ldr	r3, [pc, #136]	@ (8013b28 <vTaskStartScheduler+0xc8>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	617b      	str	r3, [r7, #20]
 8013aa8:	e001      	b.n	8013aae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d102      	bne.n	8013aba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013ab4:	f000 fd1a 	bl	80144ec <xTimerCreateTimerTask>
 8013ab8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d11b      	bne.n	8013af8 <vTaskStartScheduler+0x98>
	__asm volatile
 8013ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	613b      	str	r3, [r7, #16]
}
 8013ad2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ad4:	4b15      	ldr	r3, [pc, #84]	@ (8013b2c <vTaskStartScheduler+0xcc>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3354      	adds	r3, #84	@ 0x54
 8013ada:	4a15      	ldr	r2, [pc, #84]	@ (8013b30 <vTaskStartScheduler+0xd0>)
 8013adc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ade:	4b15      	ldr	r3, [pc, #84]	@ (8013b34 <vTaskStartScheduler+0xd4>)
 8013ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013ae6:	4b14      	ldr	r3, [pc, #80]	@ (8013b38 <vTaskStartScheduler+0xd8>)
 8013ae8:	2201      	movs	r2, #1
 8013aea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013aec:	4b13      	ldr	r3, [pc, #76]	@ (8013b3c <vTaskStartScheduler+0xdc>)
 8013aee:	2200      	movs	r2, #0
 8013af0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013af2:	f001 f8e5 	bl	8014cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013af6:	e00f      	b.n	8013b18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013afe:	d10b      	bne.n	8013b18 <vTaskStartScheduler+0xb8>
	__asm volatile
 8013b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	60fb      	str	r3, [r7, #12]
}
 8013b12:	bf00      	nop
 8013b14:	bf00      	nop
 8013b16:	e7fd      	b.n	8013b14 <vTaskStartScheduler+0xb4>
}
 8013b18:	bf00      	nop
 8013b1a:	3718      	adds	r7, #24
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	08019d80 	.word	0x08019d80
 8013b24:	08014171 	.word	0x08014171
 8013b28:	240013fc 	.word	0x240013fc
 8013b2c:	24000f04 	.word	0x24000f04
 8013b30:	24000280 	.word	0x24000280
 8013b34:	240013f8 	.word	0x240013f8
 8013b38:	240013e4 	.word	0x240013e4
 8013b3c:	240013dc 	.word	0x240013dc

08013b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b40:	b480      	push	{r7}
 8013b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013b44:	4b04      	ldr	r3, [pc, #16]	@ (8013b58 <vTaskSuspendAll+0x18>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	4a03      	ldr	r2, [pc, #12]	@ (8013b58 <vTaskSuspendAll+0x18>)
 8013b4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013b4e:	bf00      	nop
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	24001400 	.word	0x24001400

08013b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b66:	2300      	movs	r3, #0
 8013b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b6a:	4b42      	ldr	r3, [pc, #264]	@ (8013c74 <xTaskResumeAll+0x118>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d10b      	bne.n	8013b8a <xTaskResumeAll+0x2e>
	__asm volatile
 8013b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	603b      	str	r3, [r7, #0]
}
 8013b84:	bf00      	nop
 8013b86:	bf00      	nop
 8013b88:	e7fd      	b.n	8013b86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b8a:	f001 f93d 	bl	8014e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b8e:	4b39      	ldr	r3, [pc, #228]	@ (8013c74 <xTaskResumeAll+0x118>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	3b01      	subs	r3, #1
 8013b94:	4a37      	ldr	r2, [pc, #220]	@ (8013c74 <xTaskResumeAll+0x118>)
 8013b96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b98:	4b36      	ldr	r3, [pc, #216]	@ (8013c74 <xTaskResumeAll+0x118>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d162      	bne.n	8013c66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ba0:	4b35      	ldr	r3, [pc, #212]	@ (8013c78 <xTaskResumeAll+0x11c>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d05e      	beq.n	8013c66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ba8:	e02f      	b.n	8013c0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013baa:	4b34      	ldr	r3, [pc, #208]	@ (8013c7c <xTaskResumeAll+0x120>)
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	3318      	adds	r3, #24
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ff f870 	bl	8012c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7ff f86b 	bl	8012c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bca:	4b2d      	ldr	r3, [pc, #180]	@ (8013c80 <xTaskResumeAll+0x124>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d903      	bls.n	8013bda <xTaskResumeAll+0x7e>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8013c80 <xTaskResumeAll+0x124>)
 8013bd8:	6013      	str	r3, [r2, #0]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bde:	4613      	mov	r3, r2
 8013be0:	009b      	lsls	r3, r3, #2
 8013be2:	4413      	add	r3, r2
 8013be4:	009b      	lsls	r3, r3, #2
 8013be6:	4a27      	ldr	r2, [pc, #156]	@ (8013c84 <xTaskResumeAll+0x128>)
 8013be8:	441a      	add	r2, r3
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	3304      	adds	r3, #4
 8013bee:	4619      	mov	r1, r3
 8013bf0:	4610      	mov	r0, r2
 8013bf2:	f7fe fff6 	bl	8012be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bfa:	4b23      	ldr	r3, [pc, #140]	@ (8013c88 <xTaskResumeAll+0x12c>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d302      	bcc.n	8013c0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013c04:	4b21      	ldr	r3, [pc, #132]	@ (8013c8c <xTaskResumeAll+0x130>)
 8013c06:	2201      	movs	r2, #1
 8013c08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8013c7c <xTaskResumeAll+0x120>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1cb      	bne.n	8013baa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d001      	beq.n	8013c1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c18:	f000 fb66 	bl	80142e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8013c90 <xTaskResumeAll+0x134>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d010      	beq.n	8013c4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c28:	f000 f846 	bl	8013cb8 <xTaskIncrementTick>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013c32:	4b16      	ldr	r3, [pc, #88]	@ (8013c8c <xTaskResumeAll+0x130>)
 8013c34:	2201      	movs	r2, #1
 8013c36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	3b01      	subs	r3, #1
 8013c3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1f1      	bne.n	8013c28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8013c44:	4b12      	ldr	r3, [pc, #72]	@ (8013c90 <xTaskResumeAll+0x134>)
 8013c46:	2200      	movs	r2, #0
 8013c48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c4a:	4b10      	ldr	r3, [pc, #64]	@ (8013c8c <xTaskResumeAll+0x130>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d009      	beq.n	8013c66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c52:	2301      	movs	r3, #1
 8013c54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c56:	4b0f      	ldr	r3, [pc, #60]	@ (8013c94 <xTaskResumeAll+0x138>)
 8013c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c5c:	601a      	str	r2, [r3, #0]
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c66:	f001 f901 	bl	8014e6c <vPortExitCritical>

	return xAlreadyYielded;
 8013c6a:	68bb      	ldr	r3, [r7, #8]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	24001400 	.word	0x24001400
 8013c78:	240013d8 	.word	0x240013d8
 8013c7c:	24001398 	.word	0x24001398
 8013c80:	240013e0 	.word	0x240013e0
 8013c84:	24000f08 	.word	0x24000f08
 8013c88:	24000f04 	.word	0x24000f04
 8013c8c:	240013ec 	.word	0x240013ec
 8013c90:	240013e8 	.word	0x240013e8
 8013c94:	e000ed04 	.word	0xe000ed04

08013c98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b083      	sub	sp, #12
 8013c9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c9e:	4b05      	ldr	r3, [pc, #20]	@ (8013cb4 <xTaskGetTickCount+0x1c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ca4:	687b      	ldr	r3, [r7, #4]
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr
 8013cb2:	bf00      	nop
 8013cb4:	240013dc 	.word	0x240013dc

08013cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b086      	sub	sp, #24
 8013cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8013e00 <xTaskIncrementTick+0x148>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	f040 8090 	bne.w	8013dec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8013e04 <xTaskIncrementTick+0x14c>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8013e04 <xTaskIncrementTick+0x14c>)
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d121      	bne.n	8013d24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ce0:	4b49      	ldr	r3, [pc, #292]	@ (8013e08 <xTaskIncrementTick+0x150>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00b      	beq.n	8013d02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8013cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cee:	f383 8811 	msr	BASEPRI, r3
 8013cf2:	f3bf 8f6f 	isb	sy
 8013cf6:	f3bf 8f4f 	dsb	sy
 8013cfa:	603b      	str	r3, [r7, #0]
}
 8013cfc:	bf00      	nop
 8013cfe:	bf00      	nop
 8013d00:	e7fd      	b.n	8013cfe <xTaskIncrementTick+0x46>
 8013d02:	4b41      	ldr	r3, [pc, #260]	@ (8013e08 <xTaskIncrementTick+0x150>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	4b40      	ldr	r3, [pc, #256]	@ (8013e0c <xTaskIncrementTick+0x154>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8013e08 <xTaskIncrementTick+0x150>)
 8013d0e:	6013      	str	r3, [r2, #0]
 8013d10:	4a3e      	ldr	r2, [pc, #248]	@ (8013e0c <xTaskIncrementTick+0x154>)
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	6013      	str	r3, [r2, #0]
 8013d16:	4b3e      	ldr	r3, [pc, #248]	@ (8013e10 <xTaskIncrementTick+0x158>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8013e10 <xTaskIncrementTick+0x158>)
 8013d1e:	6013      	str	r3, [r2, #0]
 8013d20:	f000 fae2 	bl	80142e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d24:	4b3b      	ldr	r3, [pc, #236]	@ (8013e14 <xTaskIncrementTick+0x15c>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	693a      	ldr	r2, [r7, #16]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d349      	bcc.n	8013dc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d2e:	4b36      	ldr	r3, [pc, #216]	@ (8013e08 <xTaskIncrementTick+0x150>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d104      	bne.n	8013d42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d38:	4b36      	ldr	r3, [pc, #216]	@ (8013e14 <xTaskIncrementTick+0x15c>)
 8013d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d3e:	601a      	str	r2, [r3, #0]
					break;
 8013d40:	e03f      	b.n	8013dc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d42:	4b31      	ldr	r3, [pc, #196]	@ (8013e08 <xTaskIncrementTick+0x150>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	68db      	ldr	r3, [r3, #12]
 8013d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d52:	693a      	ldr	r2, [r7, #16]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d203      	bcs.n	8013d62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8013e14 <xTaskIncrementTick+0x15c>)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d60:	e02f      	b.n	8013dc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	3304      	adds	r3, #4
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe ff98 	bl	8012c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d004      	beq.n	8013d7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	3318      	adds	r3, #24
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7fe ff8f 	bl	8012c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d82:	4b25      	ldr	r3, [pc, #148]	@ (8013e18 <xTaskIncrementTick+0x160>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d903      	bls.n	8013d92 <xTaskIncrementTick+0xda>
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d8e:	4a22      	ldr	r2, [pc, #136]	@ (8013e18 <xTaskIncrementTick+0x160>)
 8013d90:	6013      	str	r3, [r2, #0]
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d96:	4613      	mov	r3, r2
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	4413      	add	r3, r2
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8013e1c <xTaskIncrementTick+0x164>)
 8013da0:	441a      	add	r2, r3
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	3304      	adds	r3, #4
 8013da6:	4619      	mov	r1, r3
 8013da8:	4610      	mov	r0, r2
 8013daa:	f7fe ff1a 	bl	8012be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013db2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e20 <xTaskIncrementTick+0x168>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d3b8      	bcc.n	8013d2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dc0:	e7b5      	b.n	8013d2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013dc2:	4b17      	ldr	r3, [pc, #92]	@ (8013e20 <xTaskIncrementTick+0x168>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013dc8:	4914      	ldr	r1, [pc, #80]	@ (8013e1c <xTaskIncrementTick+0x164>)
 8013dca:	4613      	mov	r3, r2
 8013dcc:	009b      	lsls	r3, r3, #2
 8013dce:	4413      	add	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	440b      	add	r3, r1
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d901      	bls.n	8013dde <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013dde:	4b11      	ldr	r3, [pc, #68]	@ (8013e24 <xTaskIncrementTick+0x16c>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d007      	beq.n	8013df6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8013de6:	2301      	movs	r3, #1
 8013de8:	617b      	str	r3, [r7, #20]
 8013dea:	e004      	b.n	8013df6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013dec:	4b0e      	ldr	r3, [pc, #56]	@ (8013e28 <xTaskIncrementTick+0x170>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	3301      	adds	r3, #1
 8013df2:	4a0d      	ldr	r2, [pc, #52]	@ (8013e28 <xTaskIncrementTick+0x170>)
 8013df4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013df6:	697b      	ldr	r3, [r7, #20]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3718      	adds	r7, #24
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	24001400 	.word	0x24001400
 8013e04:	240013dc 	.word	0x240013dc
 8013e08:	24001390 	.word	0x24001390
 8013e0c:	24001394 	.word	0x24001394
 8013e10:	240013f0 	.word	0x240013f0
 8013e14:	240013f8 	.word	0x240013f8
 8013e18:	240013e0 	.word	0x240013e0
 8013e1c:	24000f08 	.word	0x24000f08
 8013e20:	24000f04 	.word	0x24000f04
 8013e24:	240013ec 	.word	0x240013ec
 8013e28:	240013e8 	.word	0x240013e8

08013e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b085      	sub	sp, #20
 8013e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e32:	4b2b      	ldr	r3, [pc, #172]	@ (8013ee0 <vTaskSwitchContext+0xb4>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d003      	beq.n	8013e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8013ee4 <vTaskSwitchContext+0xb8>)
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e40:	e047      	b.n	8013ed2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8013e42:	4b28      	ldr	r3, [pc, #160]	@ (8013ee4 <vTaskSwitchContext+0xb8>)
 8013e44:	2200      	movs	r2, #0
 8013e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e48:	4b27      	ldr	r3, [pc, #156]	@ (8013ee8 <vTaskSwitchContext+0xbc>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	60fb      	str	r3, [r7, #12]
 8013e4e:	e011      	b.n	8013e74 <vTaskSwitchContext+0x48>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10b      	bne.n	8013e6e <vTaskSwitchContext+0x42>
	__asm volatile
 8013e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e5a:	f383 8811 	msr	BASEPRI, r3
 8013e5e:	f3bf 8f6f 	isb	sy
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	607b      	str	r3, [r7, #4]
}
 8013e68:	bf00      	nop
 8013e6a:	bf00      	nop
 8013e6c:	e7fd      	b.n	8013e6a <vTaskSwitchContext+0x3e>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	3b01      	subs	r3, #1
 8013e72:	60fb      	str	r3, [r7, #12]
 8013e74:	491d      	ldr	r1, [pc, #116]	@ (8013eec <vTaskSwitchContext+0xc0>)
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	4413      	add	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	440b      	add	r3, r1
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d0e3      	beq.n	8013e50 <vTaskSwitchContext+0x24>
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4413      	add	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4a16      	ldr	r2, [pc, #88]	@ (8013eec <vTaskSwitchContext+0xc0>)
 8013e94:	4413      	add	r3, r2
 8013e96:	60bb      	str	r3, [r7, #8]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	605a      	str	r2, [r3, #4]
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	685a      	ldr	r2, [r3, #4]
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	3308      	adds	r3, #8
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d104      	bne.n	8013eb8 <vTaskSwitchContext+0x8c>
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	685a      	ldr	r2, [r3, #4]
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	605a      	str	r2, [r3, #4]
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8013ef0 <vTaskSwitchContext+0xc4>)
 8013ec0:	6013      	str	r3, [r2, #0]
 8013ec2:	4a09      	ldr	r2, [pc, #36]	@ (8013ee8 <vTaskSwitchContext+0xbc>)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ec8:	4b09      	ldr	r3, [pc, #36]	@ (8013ef0 <vTaskSwitchContext+0xc4>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	3354      	adds	r3, #84	@ 0x54
 8013ece:	4a09      	ldr	r2, [pc, #36]	@ (8013ef4 <vTaskSwitchContext+0xc8>)
 8013ed0:	6013      	str	r3, [r2, #0]
}
 8013ed2:	bf00      	nop
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	24001400 	.word	0x24001400
 8013ee4:	240013ec 	.word	0x240013ec
 8013ee8:	240013e0 	.word	0x240013e0
 8013eec:	24000f08 	.word	0x24000f08
 8013ef0:	24000f04 	.word	0x24000f04
 8013ef4:	24000280 	.word	0x24000280

08013ef8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d10b      	bne.n	8013f20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f0c:	f383 8811 	msr	BASEPRI, r3
 8013f10:	f3bf 8f6f 	isb	sy
 8013f14:	f3bf 8f4f 	dsb	sy
 8013f18:	60fb      	str	r3, [r7, #12]
}
 8013f1a:	bf00      	nop
 8013f1c:	bf00      	nop
 8013f1e:	e7fd      	b.n	8013f1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f20:	4b07      	ldr	r3, [pc, #28]	@ (8013f40 <vTaskPlaceOnEventList+0x48>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	3318      	adds	r3, #24
 8013f26:	4619      	mov	r1, r3
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f7fe fe7e 	bl	8012c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f2e:	2101      	movs	r1, #1
 8013f30:	6838      	ldr	r0, [r7, #0]
 8013f32:	f000 fa87 	bl	8014444 <prvAddCurrentTaskToDelayedList>
}
 8013f36:	bf00      	nop
 8013f38:	3710      	adds	r7, #16
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	24000f04 	.word	0x24000f04

08013f44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b086      	sub	sp, #24
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d10b      	bne.n	8013f6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8013f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	617b      	str	r3, [r7, #20]
}
 8013f68:	bf00      	nop
 8013f6a:	bf00      	nop
 8013f6c:	e7fd      	b.n	8013f6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8013f98 <vTaskPlaceOnEventListRestricted+0x54>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	3318      	adds	r3, #24
 8013f74:	4619      	mov	r1, r3
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f7fe fe33 	bl	8012be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d002      	beq.n	8013f88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013f82:	f04f 33ff 	mov.w	r3, #4294967295
 8013f86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013f88:	6879      	ldr	r1, [r7, #4]
 8013f8a:	68b8      	ldr	r0, [r7, #8]
 8013f8c:	f000 fa5a 	bl	8014444 <prvAddCurrentTaskToDelayedList>
	}
 8013f90:	bf00      	nop
 8013f92:	3718      	adds	r7, #24
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	24000f04 	.word	0x24000f04

08013f9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b086      	sub	sp, #24
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d10b      	bne.n	8013fca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb6:	f383 8811 	msr	BASEPRI, r3
 8013fba:	f3bf 8f6f 	isb	sy
 8013fbe:	f3bf 8f4f 	dsb	sy
 8013fc2:	60fb      	str	r3, [r7, #12]
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	3318      	adds	r3, #24
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7fe fe64 	bl	8012c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fd4:	4b1d      	ldr	r3, [pc, #116]	@ (801404c <xTaskRemoveFromEventList+0xb0>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d11d      	bne.n	8014018 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	3304      	adds	r3, #4
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe fe5b 	bl	8012c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fea:	4b19      	ldr	r3, [pc, #100]	@ (8014050 <xTaskRemoveFromEventList+0xb4>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d903      	bls.n	8013ffa <xTaskRemoveFromEventList+0x5e>
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff6:	4a16      	ldr	r2, [pc, #88]	@ (8014050 <xTaskRemoveFromEventList+0xb4>)
 8013ff8:	6013      	str	r3, [r2, #0]
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ffe:	4613      	mov	r3, r2
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	4413      	add	r3, r2
 8014004:	009b      	lsls	r3, r3, #2
 8014006:	4a13      	ldr	r2, [pc, #76]	@ (8014054 <xTaskRemoveFromEventList+0xb8>)
 8014008:	441a      	add	r2, r3
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	3304      	adds	r3, #4
 801400e:	4619      	mov	r1, r3
 8014010:	4610      	mov	r0, r2
 8014012:	f7fe fde6 	bl	8012be2 <vListInsertEnd>
 8014016:	e005      	b.n	8014024 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	3318      	adds	r3, #24
 801401c:	4619      	mov	r1, r3
 801401e:	480e      	ldr	r0, [pc, #56]	@ (8014058 <xTaskRemoveFromEventList+0xbc>)
 8014020:	f7fe fddf 	bl	8012be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014028:	4b0c      	ldr	r3, [pc, #48]	@ (801405c <xTaskRemoveFromEventList+0xc0>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801402e:	429a      	cmp	r2, r3
 8014030:	d905      	bls.n	801403e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014032:	2301      	movs	r3, #1
 8014034:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014036:	4b0a      	ldr	r3, [pc, #40]	@ (8014060 <xTaskRemoveFromEventList+0xc4>)
 8014038:	2201      	movs	r2, #1
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	e001      	b.n	8014042 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801403e:	2300      	movs	r3, #0
 8014040:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014042:	697b      	ldr	r3, [r7, #20]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3718      	adds	r7, #24
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	24001400 	.word	0x24001400
 8014050:	240013e0 	.word	0x240013e0
 8014054:	24000f08 	.word	0x24000f08
 8014058:	24001398 	.word	0x24001398
 801405c:	24000f04 	.word	0x24000f04
 8014060:	240013ec 	.word	0x240013ec

08014064 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014064:	b480      	push	{r7}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801406c:	4b06      	ldr	r3, [pc, #24]	@ (8014088 <vTaskInternalSetTimeOutState+0x24>)
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014074:	4b05      	ldr	r3, [pc, #20]	@ (801408c <vTaskInternalSetTimeOutState+0x28>)
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	605a      	str	r2, [r3, #4]
}
 801407c:	bf00      	nop
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	240013f0 	.word	0x240013f0
 801408c:	240013dc 	.word	0x240013dc

08014090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b088      	sub	sp, #32
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10b      	bne.n	80140b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80140a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	613b      	str	r3, [r7, #16]
}
 80140b2:	bf00      	nop
 80140b4:	bf00      	nop
 80140b6:	e7fd      	b.n	80140b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d10b      	bne.n	80140d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	60fb      	str	r3, [r7, #12]
}
 80140d0:	bf00      	nop
 80140d2:	bf00      	nop
 80140d4:	e7fd      	b.n	80140d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80140d6:	f000 fe97 	bl	8014e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80140da:	4b1d      	ldr	r3, [pc, #116]	@ (8014150 <xTaskCheckForTimeOut+0xc0>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	69ba      	ldr	r2, [r7, #24]
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140f2:	d102      	bne.n	80140fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140f4:	2300      	movs	r3, #0
 80140f6:	61fb      	str	r3, [r7, #28]
 80140f8:	e023      	b.n	8014142 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	4b15      	ldr	r3, [pc, #84]	@ (8014154 <xTaskCheckForTimeOut+0xc4>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	429a      	cmp	r2, r3
 8014104:	d007      	beq.n	8014116 <xTaskCheckForTimeOut+0x86>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	69ba      	ldr	r2, [r7, #24]
 801410c:	429a      	cmp	r2, r3
 801410e:	d302      	bcc.n	8014116 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014110:	2301      	movs	r3, #1
 8014112:	61fb      	str	r3, [r7, #28]
 8014114:	e015      	b.n	8014142 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	697a      	ldr	r2, [r7, #20]
 801411c:	429a      	cmp	r2, r3
 801411e:	d20b      	bcs.n	8014138 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	1ad2      	subs	r2, r2, r3
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7ff ff99 	bl	8014064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014132:	2300      	movs	r3, #0
 8014134:	61fb      	str	r3, [r7, #28]
 8014136:	e004      	b.n	8014142 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	2200      	movs	r2, #0
 801413c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801413e:	2301      	movs	r3, #1
 8014140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014142:	f000 fe93 	bl	8014e6c <vPortExitCritical>

	return xReturn;
 8014146:	69fb      	ldr	r3, [r7, #28]
}
 8014148:	4618      	mov	r0, r3
 801414a:	3720      	adds	r7, #32
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}
 8014150:	240013dc 	.word	0x240013dc
 8014154:	240013f0 	.word	0x240013f0

08014158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014158:	b480      	push	{r7}
 801415a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801415c:	4b03      	ldr	r3, [pc, #12]	@ (801416c <vTaskMissedYield+0x14>)
 801415e:	2201      	movs	r2, #1
 8014160:	601a      	str	r2, [r3, #0]
}
 8014162:	bf00      	nop
 8014164:	46bd      	mov	sp, r7
 8014166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416a:	4770      	bx	lr
 801416c:	240013ec 	.word	0x240013ec

08014170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014178:	f000 f852 	bl	8014220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801417c:	4b06      	ldr	r3, [pc, #24]	@ (8014198 <prvIdleTask+0x28>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	2b01      	cmp	r3, #1
 8014182:	d9f9      	bls.n	8014178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014184:	4b05      	ldr	r3, [pc, #20]	@ (801419c <prvIdleTask+0x2c>)
 8014186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801418a:	601a      	str	r2, [r3, #0]
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014194:	e7f0      	b.n	8014178 <prvIdleTask+0x8>
 8014196:	bf00      	nop
 8014198:	24000f08 	.word	0x24000f08
 801419c:	e000ed04 	.word	0xe000ed04

080141a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141a6:	2300      	movs	r3, #0
 80141a8:	607b      	str	r3, [r7, #4]
 80141aa:	e00c      	b.n	80141c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	4613      	mov	r3, r2
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	4413      	add	r3, r2
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	4a12      	ldr	r2, [pc, #72]	@ (8014200 <prvInitialiseTaskLists+0x60>)
 80141b8:	4413      	add	r3, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fe fce4 	bl	8012b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3301      	adds	r3, #1
 80141c4:	607b      	str	r3, [r7, #4]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2b37      	cmp	r3, #55	@ 0x37
 80141ca:	d9ef      	bls.n	80141ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80141cc:	480d      	ldr	r0, [pc, #52]	@ (8014204 <prvInitialiseTaskLists+0x64>)
 80141ce:	f7fe fcdb 	bl	8012b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80141d2:	480d      	ldr	r0, [pc, #52]	@ (8014208 <prvInitialiseTaskLists+0x68>)
 80141d4:	f7fe fcd8 	bl	8012b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80141d8:	480c      	ldr	r0, [pc, #48]	@ (801420c <prvInitialiseTaskLists+0x6c>)
 80141da:	f7fe fcd5 	bl	8012b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80141de:	480c      	ldr	r0, [pc, #48]	@ (8014210 <prvInitialiseTaskLists+0x70>)
 80141e0:	f7fe fcd2 	bl	8012b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80141e4:	480b      	ldr	r0, [pc, #44]	@ (8014214 <prvInitialiseTaskLists+0x74>)
 80141e6:	f7fe fccf 	bl	8012b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80141ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014218 <prvInitialiseTaskLists+0x78>)
 80141ec:	4a05      	ldr	r2, [pc, #20]	@ (8014204 <prvInitialiseTaskLists+0x64>)
 80141ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141f0:	4b0a      	ldr	r3, [pc, #40]	@ (801421c <prvInitialiseTaskLists+0x7c>)
 80141f2:	4a05      	ldr	r2, [pc, #20]	@ (8014208 <prvInitialiseTaskLists+0x68>)
 80141f4:	601a      	str	r2, [r3, #0]
}
 80141f6:	bf00      	nop
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
 80141fe:	bf00      	nop
 8014200:	24000f08 	.word	0x24000f08
 8014204:	24001368 	.word	0x24001368
 8014208:	2400137c 	.word	0x2400137c
 801420c:	24001398 	.word	0x24001398
 8014210:	240013ac 	.word	0x240013ac
 8014214:	240013c4 	.word	0x240013c4
 8014218:	24001390 	.word	0x24001390
 801421c:	24001394 	.word	0x24001394

08014220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014226:	e019      	b.n	801425c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014228:	f000 fdee 	bl	8014e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801422c:	4b10      	ldr	r3, [pc, #64]	@ (8014270 <prvCheckTasksWaitingTermination+0x50>)
 801422e:	68db      	ldr	r3, [r3, #12]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	3304      	adds	r3, #4
 8014238:	4618      	mov	r0, r3
 801423a:	f7fe fd2f 	bl	8012c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801423e:	4b0d      	ldr	r3, [pc, #52]	@ (8014274 <prvCheckTasksWaitingTermination+0x54>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	3b01      	subs	r3, #1
 8014244:	4a0b      	ldr	r2, [pc, #44]	@ (8014274 <prvCheckTasksWaitingTermination+0x54>)
 8014246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014248:	4b0b      	ldr	r3, [pc, #44]	@ (8014278 <prvCheckTasksWaitingTermination+0x58>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	3b01      	subs	r3, #1
 801424e:	4a0a      	ldr	r2, [pc, #40]	@ (8014278 <prvCheckTasksWaitingTermination+0x58>)
 8014250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014252:	f000 fe0b 	bl	8014e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 f810 	bl	801427c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801425c:	4b06      	ldr	r3, [pc, #24]	@ (8014278 <prvCheckTasksWaitingTermination+0x58>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1e1      	bne.n	8014228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014264:	bf00      	nop
 8014266:	bf00      	nop
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	240013ac 	.word	0x240013ac
 8014274:	240013d8 	.word	0x240013d8
 8014278:	240013c0 	.word	0x240013c0

0801427c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	3354      	adds	r3, #84	@ 0x54
 8014288:	4618      	mov	r0, r3
 801428a:	f003 f93d 	bl	8017508 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014294:	2b00      	cmp	r3, #0
 8014296:	d108      	bne.n	80142aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801429c:	4618      	mov	r0, r3
 801429e:	f000 ffa3 	bl	80151e8 <vPortFree>
				vPortFree( pxTCB );
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f000 ffa0 	bl	80151e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80142a8:	e019      	b.n	80142de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d103      	bne.n	80142bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 ff97 	bl	80151e8 <vPortFree>
	}
 80142ba:	e010      	b.n	80142de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80142c2:	2b02      	cmp	r3, #2
 80142c4:	d00b      	beq.n	80142de <prvDeleteTCB+0x62>
	__asm volatile
 80142c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142ca:	f383 8811 	msr	BASEPRI, r3
 80142ce:	f3bf 8f6f 	isb	sy
 80142d2:	f3bf 8f4f 	dsb	sy
 80142d6:	60fb      	str	r3, [r7, #12]
}
 80142d8:	bf00      	nop
 80142da:	bf00      	nop
 80142dc:	e7fd      	b.n	80142da <prvDeleteTCB+0x5e>
	}
 80142de:	bf00      	nop
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
	...

080142e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80142e8:	b480      	push	{r7}
 80142ea:	b083      	sub	sp, #12
 80142ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014320 <prvResetNextTaskUnblockTime+0x38>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d104      	bne.n	8014302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014324 <prvResetNextTaskUnblockTime+0x3c>)
 80142fa:	f04f 32ff 	mov.w	r2, #4294967295
 80142fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014300:	e008      	b.n	8014314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014302:	4b07      	ldr	r3, [pc, #28]	@ (8014320 <prvResetNextTaskUnblockTime+0x38>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	4a04      	ldr	r2, [pc, #16]	@ (8014324 <prvResetNextTaskUnblockTime+0x3c>)
 8014312:	6013      	str	r3, [r2, #0]
}
 8014314:	bf00      	nop
 8014316:	370c      	adds	r7, #12
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr
 8014320:	24001390 	.word	0x24001390
 8014324:	240013f8 	.word	0x240013f8

08014328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014328:	b480      	push	{r7}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801432e:	4b0b      	ldr	r3, [pc, #44]	@ (801435c <xTaskGetSchedulerState+0x34>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d102      	bne.n	801433c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014336:	2301      	movs	r3, #1
 8014338:	607b      	str	r3, [r7, #4]
 801433a:	e008      	b.n	801434e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801433c:	4b08      	ldr	r3, [pc, #32]	@ (8014360 <xTaskGetSchedulerState+0x38>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d102      	bne.n	801434a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014344:	2302      	movs	r3, #2
 8014346:	607b      	str	r3, [r7, #4]
 8014348:	e001      	b.n	801434e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801434a:	2300      	movs	r3, #0
 801434c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801434e:	687b      	ldr	r3, [r7, #4]
	}
 8014350:	4618      	mov	r0, r3
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr
 801435c:	240013e4 	.word	0x240013e4
 8014360:	24001400 	.word	0x24001400

08014364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014364:	b580      	push	{r7, lr}
 8014366:	b086      	sub	sp, #24
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014370:	2300      	movs	r3, #0
 8014372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d058      	beq.n	801442c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801437a:	4b2f      	ldr	r3, [pc, #188]	@ (8014438 <xTaskPriorityDisinherit+0xd4>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	693a      	ldr	r2, [r7, #16]
 8014380:	429a      	cmp	r2, r3
 8014382:	d00b      	beq.n	801439c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014388:	f383 8811 	msr	BASEPRI, r3
 801438c:	f3bf 8f6f 	isb	sy
 8014390:	f3bf 8f4f 	dsb	sy
 8014394:	60fb      	str	r3, [r7, #12]
}
 8014396:	bf00      	nop
 8014398:	bf00      	nop
 801439a:	e7fd      	b.n	8014398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d10b      	bne.n	80143bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80143a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	60bb      	str	r3, [r7, #8]
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	e7fd      	b.n	80143b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80143c0:	1e5a      	subs	r2, r3, #1
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d02c      	beq.n	801442c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d128      	bne.n	801442c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	3304      	adds	r3, #4
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fe fc5c 	bl	8012c9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143fc:	4b0f      	ldr	r3, [pc, #60]	@ (801443c <xTaskPriorityDisinherit+0xd8>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	429a      	cmp	r2, r3
 8014402:	d903      	bls.n	801440c <xTaskPriorityDisinherit+0xa8>
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014408:	4a0c      	ldr	r2, [pc, #48]	@ (801443c <xTaskPriorityDisinherit+0xd8>)
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014410:	4613      	mov	r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	4413      	add	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	4a09      	ldr	r2, [pc, #36]	@ (8014440 <xTaskPriorityDisinherit+0xdc>)
 801441a:	441a      	add	r2, r3
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	3304      	adds	r3, #4
 8014420:	4619      	mov	r1, r3
 8014422:	4610      	mov	r0, r2
 8014424:	f7fe fbdd 	bl	8012be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014428:	2301      	movs	r3, #1
 801442a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801442c:	697b      	ldr	r3, [r7, #20]
	}
 801442e:	4618      	mov	r0, r3
 8014430:	3718      	adds	r7, #24
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	24000f04 	.word	0x24000f04
 801443c:	240013e0 	.word	0x240013e0
 8014440:	24000f08 	.word	0x24000f08

08014444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801444e:	4b21      	ldr	r3, [pc, #132]	@ (80144d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014454:	4b20      	ldr	r3, [pc, #128]	@ (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	3304      	adds	r3, #4
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fc1e 	bl	8012c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014466:	d10a      	bne.n	801447e <prvAddCurrentTaskToDelayedList+0x3a>
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d007      	beq.n	801447e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801446e:	4b1a      	ldr	r3, [pc, #104]	@ (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	3304      	adds	r3, #4
 8014474:	4619      	mov	r1, r3
 8014476:	4819      	ldr	r0, [pc, #100]	@ (80144dc <prvAddCurrentTaskToDelayedList+0x98>)
 8014478:	f7fe fbb3 	bl	8012be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801447c:	e026      	b.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	4413      	add	r3, r2
 8014484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014486:	4b14      	ldr	r3, [pc, #80]	@ (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	429a      	cmp	r2, r3
 8014494:	d209      	bcs.n	80144aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014496:	4b12      	ldr	r3, [pc, #72]	@ (80144e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	4b0f      	ldr	r3, [pc, #60]	@ (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	3304      	adds	r3, #4
 80144a0:	4619      	mov	r1, r3
 80144a2:	4610      	mov	r0, r2
 80144a4:	f7fe fbc1 	bl	8012c2a <vListInsert>
}
 80144a8:	e010      	b.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80144aa:	4b0e      	ldr	r3, [pc, #56]	@ (80144e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	4b0a      	ldr	r3, [pc, #40]	@ (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3304      	adds	r3, #4
 80144b4:	4619      	mov	r1, r3
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7fe fbb7 	bl	8012c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80144bc:	4b0a      	ldr	r3, [pc, #40]	@ (80144e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	68ba      	ldr	r2, [r7, #8]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d202      	bcs.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80144c6:	4a08      	ldr	r2, [pc, #32]	@ (80144e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	6013      	str	r3, [r2, #0]
}
 80144cc:	bf00      	nop
 80144ce:	3710      	adds	r7, #16
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	240013dc 	.word	0x240013dc
 80144d8:	24000f04 	.word	0x24000f04
 80144dc:	240013c4 	.word	0x240013c4
 80144e0:	24001394 	.word	0x24001394
 80144e4:	24001390 	.word	0x24001390
 80144e8:	240013f8 	.word	0x240013f8

080144ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08a      	sub	sp, #40	@ 0x28
 80144f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80144f2:	2300      	movs	r3, #0
 80144f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80144f6:	f000 fb13 	bl	8014b20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80144fa:	4b1d      	ldr	r3, [pc, #116]	@ (8014570 <xTimerCreateTimerTask+0x84>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d021      	beq.n	8014546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014502:	2300      	movs	r3, #0
 8014504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014506:	2300      	movs	r3, #0
 8014508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801450a:	1d3a      	adds	r2, r7, #4
 801450c:	f107 0108 	add.w	r1, r7, #8
 8014510:	f107 030c 	add.w	r3, r7, #12
 8014514:	4618      	mov	r0, r3
 8014516:	f7fe fb1d 	bl	8012b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	9202      	str	r2, [sp, #8]
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	2302      	movs	r3, #2
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	2300      	movs	r3, #0
 801452a:	460a      	mov	r2, r1
 801452c:	4911      	ldr	r1, [pc, #68]	@ (8014574 <xTimerCreateTimerTask+0x88>)
 801452e:	4812      	ldr	r0, [pc, #72]	@ (8014578 <xTimerCreateTimerTask+0x8c>)
 8014530:	f7ff f8d8 	bl	80136e4 <xTaskCreateStatic>
 8014534:	4603      	mov	r3, r0
 8014536:	4a11      	ldr	r2, [pc, #68]	@ (801457c <xTimerCreateTimerTask+0x90>)
 8014538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801453a:	4b10      	ldr	r3, [pc, #64]	@ (801457c <xTimerCreateTimerTask+0x90>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d001      	beq.n	8014546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014542:	2301      	movs	r3, #1
 8014544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10b      	bne.n	8014564 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	613b      	str	r3, [r7, #16]
}
 801455e:	bf00      	nop
 8014560:	bf00      	nop
 8014562:	e7fd      	b.n	8014560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014564:	697b      	ldr	r3, [r7, #20]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	24001434 	.word	0x24001434
 8014574:	08019d88 	.word	0x08019d88
 8014578:	080146b9 	.word	0x080146b9
 801457c:	24001438 	.word	0x24001438

08014580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b08a      	sub	sp, #40	@ 0x28
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
 801458c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801458e:	2300      	movs	r3, #0
 8014590:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d10b      	bne.n	80145b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8014598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801459c:	f383 8811 	msr	BASEPRI, r3
 80145a0:	f3bf 8f6f 	isb	sy
 80145a4:	f3bf 8f4f 	dsb	sy
 80145a8:	623b      	str	r3, [r7, #32]
}
 80145aa:	bf00      	nop
 80145ac:	bf00      	nop
 80145ae:	e7fd      	b.n	80145ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80145b0:	4b19      	ldr	r3, [pc, #100]	@ (8014618 <xTimerGenericCommand+0x98>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d02a      	beq.n	801460e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	2b05      	cmp	r3, #5
 80145c8:	dc18      	bgt.n	80145fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80145ca:	f7ff fead 	bl	8014328 <xTaskGetSchedulerState>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d109      	bne.n	80145e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80145d4:	4b10      	ldr	r3, [pc, #64]	@ (8014618 <xTimerGenericCommand+0x98>)
 80145d6:	6818      	ldr	r0, [r3, #0]
 80145d8:	f107 0110 	add.w	r1, r7, #16
 80145dc:	2300      	movs	r3, #0
 80145de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145e0:	f7fe fc90 	bl	8012f04 <xQueueGenericSend>
 80145e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80145e6:	e012      	b.n	801460e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80145e8:	4b0b      	ldr	r3, [pc, #44]	@ (8014618 <xTimerGenericCommand+0x98>)
 80145ea:	6818      	ldr	r0, [r3, #0]
 80145ec:	f107 0110 	add.w	r1, r7, #16
 80145f0:	2300      	movs	r3, #0
 80145f2:	2200      	movs	r2, #0
 80145f4:	f7fe fc86 	bl	8012f04 <xQueueGenericSend>
 80145f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80145fa:	e008      	b.n	801460e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80145fc:	4b06      	ldr	r3, [pc, #24]	@ (8014618 <xTimerGenericCommand+0x98>)
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	f107 0110 	add.w	r1, r7, #16
 8014604:	2300      	movs	r3, #0
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	f7fe fd7e 	bl	8013108 <xQueueGenericSendFromISR>
 801460c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014610:	4618      	mov	r0, r3
 8014612:	3728      	adds	r7, #40	@ 0x28
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	24001434 	.word	0x24001434

0801461c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b088      	sub	sp, #32
 8014620:	af02      	add	r7, sp, #8
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014626:	4b23      	ldr	r3, [pc, #140]	@ (80146b4 <prvProcessExpiredTimer+0x98>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	3304      	adds	r3, #4
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe fb31 	bl	8012c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014640:	f003 0304 	and.w	r3, r3, #4
 8014644:	2b00      	cmp	r3, #0
 8014646:	d023      	beq.n	8014690 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	699a      	ldr	r2, [r3, #24]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	18d1      	adds	r1, r2, r3
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	683a      	ldr	r2, [r7, #0]
 8014654:	6978      	ldr	r0, [r7, #20]
 8014656:	f000 f8d5 	bl	8014804 <prvInsertTimerInActiveList>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d020      	beq.n	80146a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014660:	2300      	movs	r3, #0
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	2300      	movs	r3, #0
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	2100      	movs	r1, #0
 801466a:	6978      	ldr	r0, [r7, #20]
 801466c:	f7ff ff88 	bl	8014580 <xTimerGenericCommand>
 8014670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d114      	bne.n	80146a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8014678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801467c:	f383 8811 	msr	BASEPRI, r3
 8014680:	f3bf 8f6f 	isb	sy
 8014684:	f3bf 8f4f 	dsb	sy
 8014688:	60fb      	str	r3, [r7, #12]
}
 801468a:	bf00      	nop
 801468c:	bf00      	nop
 801468e:	e7fd      	b.n	801468c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014696:	f023 0301 	bic.w	r3, r3, #1
 801469a:	b2da      	uxtb	r2, r3
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	6a1b      	ldr	r3, [r3, #32]
 80146a6:	6978      	ldr	r0, [r7, #20]
 80146a8:	4798      	blx	r3
}
 80146aa:	bf00      	nop
 80146ac:	3718      	adds	r7, #24
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	2400142c 	.word	0x2400142c

080146b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80146c0:	f107 0308 	add.w	r3, r7, #8
 80146c4:	4618      	mov	r0, r3
 80146c6:	f000 f859 	bl	801477c <prvGetNextExpireTime>
 80146ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	4619      	mov	r1, r3
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f000 f805 	bl	80146e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80146d6:	f000 f8d7 	bl	8014888 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80146da:	bf00      	nop
 80146dc:	e7f0      	b.n	80146c0 <prvTimerTask+0x8>
	...

080146e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80146ea:	f7ff fa29 	bl	8013b40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80146ee:	f107 0308 	add.w	r3, r7, #8
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 f866 	bl	80147c4 <prvSampleTimeNow>
 80146f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d130      	bne.n	8014762 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d10a      	bne.n	801471c <prvProcessTimerOrBlockTask+0x3c>
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	429a      	cmp	r2, r3
 801470c:	d806      	bhi.n	801471c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801470e:	f7ff fa25 	bl	8013b5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014712:	68f9      	ldr	r1, [r7, #12]
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7ff ff81 	bl	801461c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801471a:	e024      	b.n	8014766 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d008      	beq.n	8014734 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014722:	4b13      	ldr	r3, [pc, #76]	@ (8014770 <prvProcessTimerOrBlockTask+0x90>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d101      	bne.n	8014730 <prvProcessTimerOrBlockTask+0x50>
 801472c:	2301      	movs	r3, #1
 801472e:	e000      	b.n	8014732 <prvProcessTimerOrBlockTask+0x52>
 8014730:	2300      	movs	r3, #0
 8014732:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014734:	4b0f      	ldr	r3, [pc, #60]	@ (8014774 <prvProcessTimerOrBlockTask+0x94>)
 8014736:	6818      	ldr	r0, [r3, #0]
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	683a      	ldr	r2, [r7, #0]
 8014740:	4619      	mov	r1, r3
 8014742:	f7fe ff9b 	bl	801367c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014746:	f7ff fa09 	bl	8013b5c <xTaskResumeAll>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d10a      	bne.n	8014766 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014750:	4b09      	ldr	r3, [pc, #36]	@ (8014778 <prvProcessTimerOrBlockTask+0x98>)
 8014752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014756:	601a      	str	r2, [r3, #0]
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	f3bf 8f6f 	isb	sy
}
 8014760:	e001      	b.n	8014766 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014762:	f7ff f9fb 	bl	8013b5c <xTaskResumeAll>
}
 8014766:	bf00      	nop
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	24001430 	.word	0x24001430
 8014774:	24001434 	.word	0x24001434
 8014778:	e000ed04 	.word	0xe000ed04

0801477c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801477c:	b480      	push	{r7}
 801477e:	b085      	sub	sp, #20
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014784:	4b0e      	ldr	r3, [pc, #56]	@ (80147c0 <prvGetNextExpireTime+0x44>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d101      	bne.n	8014792 <prvGetNextExpireTime+0x16>
 801478e:	2201      	movs	r2, #1
 8014790:	e000      	b.n	8014794 <prvGetNextExpireTime+0x18>
 8014792:	2200      	movs	r2, #0
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d105      	bne.n	80147ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80147a0:	4b07      	ldr	r3, [pc, #28]	@ (80147c0 <prvGetNextExpireTime+0x44>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	68db      	ldr	r3, [r3, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	e001      	b.n	80147b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80147ac:	2300      	movs	r3, #0
 80147ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80147b0:	68fb      	ldr	r3, [r7, #12]
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3714      	adds	r7, #20
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop
 80147c0:	2400142c 	.word	0x2400142c

080147c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80147cc:	f7ff fa64 	bl	8013c98 <xTaskGetTickCount>
 80147d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80147d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014800 <prvSampleTimeNow+0x3c>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	68fa      	ldr	r2, [r7, #12]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d205      	bcs.n	80147e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80147dc:	f000 f93a 	bl	8014a54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2201      	movs	r2, #1
 80147e4:	601a      	str	r2, [r3, #0]
 80147e6:	e002      	b.n	80147ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2200      	movs	r2, #0
 80147ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80147ee:	4a04      	ldr	r2, [pc, #16]	@ (8014800 <prvSampleTimeNow+0x3c>)
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80147f4:	68fb      	ldr	r3, [r7, #12]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3710      	adds	r7, #16
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	2400143c 	.word	0x2400143c

08014804 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
 8014810:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014812:	2300      	movs	r3, #0
 8014814:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	68ba      	ldr	r2, [r7, #8]
 801481a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014822:	68ba      	ldr	r2, [r7, #8]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	429a      	cmp	r2, r3
 8014828:	d812      	bhi.n	8014850 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	1ad2      	subs	r2, r2, r3
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	699b      	ldr	r3, [r3, #24]
 8014834:	429a      	cmp	r2, r3
 8014836:	d302      	bcc.n	801483e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014838:	2301      	movs	r3, #1
 801483a:	617b      	str	r3, [r7, #20]
 801483c:	e01b      	b.n	8014876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801483e:	4b10      	ldr	r3, [pc, #64]	@ (8014880 <prvInsertTimerInActiveList+0x7c>)
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3304      	adds	r3, #4
 8014846:	4619      	mov	r1, r3
 8014848:	4610      	mov	r0, r2
 801484a:	f7fe f9ee 	bl	8012c2a <vListInsert>
 801484e:	e012      	b.n	8014876 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014850:	687a      	ldr	r2, [r7, #4]
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	429a      	cmp	r2, r3
 8014856:	d206      	bcs.n	8014866 <prvInsertTimerInActiveList+0x62>
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	429a      	cmp	r2, r3
 801485e:	d302      	bcc.n	8014866 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014860:	2301      	movs	r3, #1
 8014862:	617b      	str	r3, [r7, #20]
 8014864:	e007      	b.n	8014876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014866:	4b07      	ldr	r3, [pc, #28]	@ (8014884 <prvInsertTimerInActiveList+0x80>)
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	3304      	adds	r3, #4
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f7fe f9da 	bl	8012c2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014876:	697b      	ldr	r3, [r7, #20]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3718      	adds	r7, #24
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	24001430 	.word	0x24001430
 8014884:	2400142c 	.word	0x2400142c

08014888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b08e      	sub	sp, #56	@ 0x38
 801488c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801488e:	e0ce      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	da19      	bge.n	80148ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014896:	1d3b      	adds	r3, r7, #4
 8014898:	3304      	adds	r3, #4
 801489a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d10b      	bne.n	80148ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80148a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148a6:	f383 8811 	msr	BASEPRI, r3
 80148aa:	f3bf 8f6f 	isb	sy
 80148ae:	f3bf 8f4f 	dsb	sy
 80148b2:	61fb      	str	r3, [r7, #28]
}
 80148b4:	bf00      	nop
 80148b6:	bf00      	nop
 80148b8:	e7fd      	b.n	80148b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80148ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80148c0:	6850      	ldr	r0, [r2, #4]
 80148c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80148c4:	6892      	ldr	r2, [r2, #8]
 80148c6:	4611      	mov	r1, r2
 80148c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f2c0 80ae 	blt.w	8014a2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80148d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148d8:	695b      	ldr	r3, [r3, #20]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d004      	beq.n	80148e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148e0:	3304      	adds	r3, #4
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7fe f9da 	bl	8012c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80148e8:	463b      	mov	r3, r7
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7ff ff6a 	bl	80147c4 <prvSampleTimeNow>
 80148f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b09      	cmp	r3, #9
 80148f6:	f200 8097 	bhi.w	8014a28 <prvProcessReceivedCommands+0x1a0>
 80148fa:	a201      	add	r2, pc, #4	@ (adr r2, 8014900 <prvProcessReceivedCommands+0x78>)
 80148fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014900:	08014929 	.word	0x08014929
 8014904:	08014929 	.word	0x08014929
 8014908:	08014929 	.word	0x08014929
 801490c:	0801499f 	.word	0x0801499f
 8014910:	080149b3 	.word	0x080149b3
 8014914:	080149ff 	.word	0x080149ff
 8014918:	08014929 	.word	0x08014929
 801491c:	08014929 	.word	0x08014929
 8014920:	0801499f 	.word	0x0801499f
 8014924:	080149b3 	.word	0x080149b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801492e:	f043 0301 	orr.w	r3, r3, #1
 8014932:	b2da      	uxtb	r2, r3
 8014934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801493e:	699b      	ldr	r3, [r3, #24]
 8014940:	18d1      	adds	r1, r2, r3
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014948:	f7ff ff5c 	bl	8014804 <prvInsertTimerInActiveList>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d06c      	beq.n	8014a2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014954:	6a1b      	ldr	r3, [r3, #32]
 8014956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014958:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801495c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014960:	f003 0304 	and.w	r3, r3, #4
 8014964:	2b00      	cmp	r3, #0
 8014966:	d061      	beq.n	8014a2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014968:	68ba      	ldr	r2, [r7, #8]
 801496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801496c:	699b      	ldr	r3, [r3, #24]
 801496e:	441a      	add	r2, r3
 8014970:	2300      	movs	r3, #0
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	2300      	movs	r3, #0
 8014976:	2100      	movs	r1, #0
 8014978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801497a:	f7ff fe01 	bl	8014580 <xTimerGenericCommand>
 801497e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014980:	6a3b      	ldr	r3, [r7, #32]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d152      	bne.n	8014a2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8014986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801498a:	f383 8811 	msr	BASEPRI, r3
 801498e:	f3bf 8f6f 	isb	sy
 8014992:	f3bf 8f4f 	dsb	sy
 8014996:	61bb      	str	r3, [r7, #24]
}
 8014998:	bf00      	nop
 801499a:	bf00      	nop
 801499c:	e7fd      	b.n	801499a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80149a4:	f023 0301 	bic.w	r3, r3, #1
 80149a8:	b2da      	uxtb	r2, r3
 80149aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80149b0:	e03d      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80149b8:	f043 0301 	orr.w	r3, r3, #1
 80149bc:	b2da      	uxtb	r2, r3
 80149be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80149ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149cc:	699b      	ldr	r3, [r3, #24]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10b      	bne.n	80149ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80149d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d6:	f383 8811 	msr	BASEPRI, r3
 80149da:	f3bf 8f6f 	isb	sy
 80149de:	f3bf 8f4f 	dsb	sy
 80149e2:	617b      	str	r3, [r7, #20]
}
 80149e4:	bf00      	nop
 80149e6:	bf00      	nop
 80149e8:	e7fd      	b.n	80149e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80149ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ec:	699a      	ldr	r2, [r3, #24]
 80149ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149f0:	18d1      	adds	r1, r2, r3
 80149f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149f8:	f7ff ff04 	bl	8014804 <prvInsertTimerInActiveList>
					break;
 80149fc:	e017      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80149fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a04:	f003 0302 	and.w	r3, r3, #2
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d103      	bne.n	8014a14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a0e:	f000 fbeb 	bl	80151e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014a12:	e00c      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a1a:	f023 0301 	bic.w	r3, r3, #1
 8014a1e:	b2da      	uxtb	r2, r3
 8014a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8014a26:	e002      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8014a28:	bf00      	nop
 8014a2a:	e000      	b.n	8014a2e <prvProcessReceivedCommands+0x1a6>
					break;
 8014a2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014a2e:	4b08      	ldr	r3, [pc, #32]	@ (8014a50 <prvProcessReceivedCommands+0x1c8>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	1d39      	adds	r1, r7, #4
 8014a34:	2200      	movs	r2, #0
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe fc04 	bl	8013244 <xQueueReceive>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	f47f af26 	bne.w	8014890 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014a44:	bf00      	nop
 8014a46:	bf00      	nop
 8014a48:	3730      	adds	r7, #48	@ 0x30
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	24001434 	.word	0x24001434

08014a54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b088      	sub	sp, #32
 8014a58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a5a:	e049      	b.n	8014af0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a66:	4b2c      	ldr	r3, [pc, #176]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	3304      	adds	r3, #4
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fe f911 	bl	8012c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	6a1b      	ldr	r3, [r3, #32]
 8014a7e:	68f8      	ldr	r0, [r7, #12]
 8014a80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a88:	f003 0304 	and.w	r3, r3, #4
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d02f      	beq.n	8014af0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	693a      	ldr	r2, [r7, #16]
 8014a96:	4413      	add	r3, r2
 8014a98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014a9a:	68ba      	ldr	r2, [r7, #8]
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d90e      	bls.n	8014ac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	68fa      	ldr	r2, [r7, #12]
 8014aac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014aae:	4b1a      	ldr	r3, [pc, #104]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	4610      	mov	r0, r2
 8014aba:	f7fe f8b6 	bl	8012c2a <vListInsert>
 8014abe:	e017      	b.n	8014af0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	693a      	ldr	r2, [r7, #16]
 8014ac8:	2100      	movs	r1, #0
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	f7ff fd58 	bl	8014580 <xTimerGenericCommand>
 8014ad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d10b      	bne.n	8014af0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8014ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014adc:	f383 8811 	msr	BASEPRI, r3
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	603b      	str	r3, [r7, #0]
}
 8014aea:	bf00      	nop
 8014aec:	bf00      	nop
 8014aee:	e7fd      	b.n	8014aec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014af0:	4b09      	ldr	r3, [pc, #36]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d1b0      	bne.n	8014a5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014afa:	4b07      	ldr	r3, [pc, #28]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014b00:	4b06      	ldr	r3, [pc, #24]	@ (8014b1c <prvSwitchTimerLists+0xc8>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4a04      	ldr	r2, [pc, #16]	@ (8014b18 <prvSwitchTimerLists+0xc4>)
 8014b06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014b08:	4a04      	ldr	r2, [pc, #16]	@ (8014b1c <prvSwitchTimerLists+0xc8>)
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	6013      	str	r3, [r2, #0]
}
 8014b0e:	bf00      	nop
 8014b10:	3718      	adds	r7, #24
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	2400142c 	.word	0x2400142c
 8014b1c:	24001430 	.word	0x24001430

08014b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014b26:	f000 f96f 	bl	8014e08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014b2a:	4b15      	ldr	r3, [pc, #84]	@ (8014b80 <prvCheckForValidListAndQueue+0x60>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d120      	bne.n	8014b74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014b32:	4814      	ldr	r0, [pc, #80]	@ (8014b84 <prvCheckForValidListAndQueue+0x64>)
 8014b34:	f7fe f828 	bl	8012b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014b38:	4813      	ldr	r0, [pc, #76]	@ (8014b88 <prvCheckForValidListAndQueue+0x68>)
 8014b3a:	f7fe f825 	bl	8012b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014b3e:	4b13      	ldr	r3, [pc, #76]	@ (8014b8c <prvCheckForValidListAndQueue+0x6c>)
 8014b40:	4a10      	ldr	r2, [pc, #64]	@ (8014b84 <prvCheckForValidListAndQueue+0x64>)
 8014b42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014b44:	4b12      	ldr	r3, [pc, #72]	@ (8014b90 <prvCheckForValidListAndQueue+0x70>)
 8014b46:	4a10      	ldr	r2, [pc, #64]	@ (8014b88 <prvCheckForValidListAndQueue+0x68>)
 8014b48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	9300      	str	r3, [sp, #0]
 8014b4e:	4b11      	ldr	r3, [pc, #68]	@ (8014b94 <prvCheckForValidListAndQueue+0x74>)
 8014b50:	4a11      	ldr	r2, [pc, #68]	@ (8014b98 <prvCheckForValidListAndQueue+0x78>)
 8014b52:	2110      	movs	r1, #16
 8014b54:	200a      	movs	r0, #10
 8014b56:	f7fe f935 	bl	8012dc4 <xQueueGenericCreateStatic>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	4a08      	ldr	r2, [pc, #32]	@ (8014b80 <prvCheckForValidListAndQueue+0x60>)
 8014b5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014b60:	4b07      	ldr	r3, [pc, #28]	@ (8014b80 <prvCheckForValidListAndQueue+0x60>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d005      	beq.n	8014b74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014b68:	4b05      	ldr	r3, [pc, #20]	@ (8014b80 <prvCheckForValidListAndQueue+0x60>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	490b      	ldr	r1, [pc, #44]	@ (8014b9c <prvCheckForValidListAndQueue+0x7c>)
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe fd5a 	bl	8013628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b74:	f000 f97a 	bl	8014e6c <vPortExitCritical>
}
 8014b78:	bf00      	nop
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	24001434 	.word	0x24001434
 8014b84:	24001404 	.word	0x24001404
 8014b88:	24001418 	.word	0x24001418
 8014b8c:	2400142c 	.word	0x2400142c
 8014b90:	24001430 	.word	0x24001430
 8014b94:	240014e0 	.word	0x240014e0
 8014b98:	24001440 	.word	0x24001440
 8014b9c:	08019d90 	.word	0x08019d90

08014ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	3b04      	subs	r3, #4
 8014bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	3b04      	subs	r3, #4
 8014bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	f023 0201 	bic.w	r2, r3, #1
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	3b04      	subs	r3, #4
 8014bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8014c04 <pxPortInitialiseStack+0x64>)
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3b14      	subs	r3, #20
 8014bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	3b04      	subs	r3, #4
 8014be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f06f 0202 	mvn.w	r2, #2
 8014bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	3b20      	subs	r3, #32
 8014bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3714      	adds	r7, #20
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr
 8014c04:	08014c09 	.word	0x08014c09

08014c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c12:	4b13      	ldr	r3, [pc, #76]	@ (8014c60 <prvTaskExitError+0x58>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c1a:	d00b      	beq.n	8014c34 <prvTaskExitError+0x2c>
	__asm volatile
 8014c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c20:	f383 8811 	msr	BASEPRI, r3
 8014c24:	f3bf 8f6f 	isb	sy
 8014c28:	f3bf 8f4f 	dsb	sy
 8014c2c:	60fb      	str	r3, [r7, #12]
}
 8014c2e:	bf00      	nop
 8014c30:	bf00      	nop
 8014c32:	e7fd      	b.n	8014c30 <prvTaskExitError+0x28>
	__asm volatile
 8014c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c38:	f383 8811 	msr	BASEPRI, r3
 8014c3c:	f3bf 8f6f 	isb	sy
 8014c40:	f3bf 8f4f 	dsb	sy
 8014c44:	60bb      	str	r3, [r7, #8]
}
 8014c46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014c48:	bf00      	nop
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d0fc      	beq.n	8014c4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c50:	bf00      	nop
 8014c52:	bf00      	nop
 8014c54:	3714      	adds	r7, #20
 8014c56:	46bd      	mov	sp, r7
 8014c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	2400009c 	.word	0x2400009c
	...

08014c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c70:	4b07      	ldr	r3, [pc, #28]	@ (8014c90 <pxCurrentTCBConst2>)
 8014c72:	6819      	ldr	r1, [r3, #0]
 8014c74:	6808      	ldr	r0, [r1, #0]
 8014c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c7a:	f380 8809 	msr	PSP, r0
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f04f 0000 	mov.w	r0, #0
 8014c86:	f380 8811 	msr	BASEPRI, r0
 8014c8a:	4770      	bx	lr
 8014c8c:	f3af 8000 	nop.w

08014c90 <pxCurrentTCBConst2>:
 8014c90:	24000f04 	.word	0x24000f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c94:	bf00      	nop
 8014c96:	bf00      	nop

08014c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c98:	4808      	ldr	r0, [pc, #32]	@ (8014cbc <prvPortStartFirstTask+0x24>)
 8014c9a:	6800      	ldr	r0, [r0, #0]
 8014c9c:	6800      	ldr	r0, [r0, #0]
 8014c9e:	f380 8808 	msr	MSP, r0
 8014ca2:	f04f 0000 	mov.w	r0, #0
 8014ca6:	f380 8814 	msr	CONTROL, r0
 8014caa:	b662      	cpsie	i
 8014cac:	b661      	cpsie	f
 8014cae:	f3bf 8f4f 	dsb	sy
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	df00      	svc	0
 8014cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014cba:	bf00      	nop
 8014cbc:	e000ed08 	.word	0xe000ed08

08014cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014cc6:	4b47      	ldr	r3, [pc, #284]	@ (8014de4 <xPortStartScheduler+0x124>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4a47      	ldr	r2, [pc, #284]	@ (8014de8 <xPortStartScheduler+0x128>)
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	d10b      	bne.n	8014ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8014cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cd4:	f383 8811 	msr	BASEPRI, r3
 8014cd8:	f3bf 8f6f 	isb	sy
 8014cdc:	f3bf 8f4f 	dsb	sy
 8014ce0:	613b      	str	r3, [r7, #16]
}
 8014ce2:	bf00      	nop
 8014ce4:	bf00      	nop
 8014ce6:	e7fd      	b.n	8014ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8014de4 <xPortStartScheduler+0x124>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4a3f      	ldr	r2, [pc, #252]	@ (8014dec <xPortStartScheduler+0x12c>)
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d10b      	bne.n	8014d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8014cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cf6:	f383 8811 	msr	BASEPRI, r3
 8014cfa:	f3bf 8f6f 	isb	sy
 8014cfe:	f3bf 8f4f 	dsb	sy
 8014d02:	60fb      	str	r3, [r7, #12]
}
 8014d04:	bf00      	nop
 8014d06:	bf00      	nop
 8014d08:	e7fd      	b.n	8014d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d0a:	4b39      	ldr	r3, [pc, #228]	@ (8014df0 <xPortStartScheduler+0x130>)
 8014d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	22ff      	movs	r2, #255	@ 0xff
 8014d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d24:	78fb      	ldrb	r3, [r7, #3]
 8014d26:	b2db      	uxtb	r3, r3
 8014d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	4b31      	ldr	r3, [pc, #196]	@ (8014df4 <xPortStartScheduler+0x134>)
 8014d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d32:	4b31      	ldr	r3, [pc, #196]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d34:	2207      	movs	r2, #7
 8014d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d38:	e009      	b.n	8014d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	3b01      	subs	r3, #1
 8014d40:	4a2d      	ldr	r2, [pc, #180]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d4e:	78fb      	ldrb	r3, [r7, #3]
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014d56:	2b80      	cmp	r3, #128	@ 0x80
 8014d58:	d0ef      	beq.n	8014d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d5a:	4b27      	ldr	r3, [pc, #156]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	f1c3 0307 	rsb	r3, r3, #7
 8014d62:	2b04      	cmp	r3, #4
 8014d64:	d00b      	beq.n	8014d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8014d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d6a:	f383 8811 	msr	BASEPRI, r3
 8014d6e:	f3bf 8f6f 	isb	sy
 8014d72:	f3bf 8f4f 	dsb	sy
 8014d76:	60bb      	str	r3, [r7, #8]
}
 8014d78:	bf00      	nop
 8014d7a:	bf00      	nop
 8014d7c:	e7fd      	b.n	8014d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	021b      	lsls	r3, r3, #8
 8014d84:	4a1c      	ldr	r2, [pc, #112]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d88:	4b1b      	ldr	r3, [pc, #108]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014d90:	4a19      	ldr	r2, [pc, #100]	@ (8014df8 <xPortStartScheduler+0x138>)
 8014d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	b2da      	uxtb	r2, r3
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d9c:	4b17      	ldr	r3, [pc, #92]	@ (8014dfc <xPortStartScheduler+0x13c>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	4a16      	ldr	r2, [pc, #88]	@ (8014dfc <xPortStartScheduler+0x13c>)
 8014da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014da8:	4b14      	ldr	r3, [pc, #80]	@ (8014dfc <xPortStartScheduler+0x13c>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a13      	ldr	r2, [pc, #76]	@ (8014dfc <xPortStartScheduler+0x13c>)
 8014dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014db4:	f000 f8da 	bl	8014f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014db8:	4b11      	ldr	r3, [pc, #68]	@ (8014e00 <xPortStartScheduler+0x140>)
 8014dba:	2200      	movs	r2, #0
 8014dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014dbe:	f000 f8f9 	bl	8014fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014dc2:	4b10      	ldr	r3, [pc, #64]	@ (8014e04 <xPortStartScheduler+0x144>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8014e04 <xPortStartScheduler+0x144>)
 8014dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014dce:	f7ff ff63 	bl	8014c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014dd2:	f7ff f82b 	bl	8013e2c <vTaskSwitchContext>
	prvTaskExitError();
 8014dd6:	f7ff ff17 	bl	8014c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3718      	adds	r7, #24
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	e000ed00 	.word	0xe000ed00
 8014de8:	410fc271 	.word	0x410fc271
 8014dec:	410fc270 	.word	0x410fc270
 8014df0:	e000e400 	.word	0xe000e400
 8014df4:	24001530 	.word	0x24001530
 8014df8:	24001534 	.word	0x24001534
 8014dfc:	e000ed20 	.word	0xe000ed20
 8014e00:	2400009c 	.word	0x2400009c
 8014e04:	e000ef34 	.word	0xe000ef34

08014e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e12:	f383 8811 	msr	BASEPRI, r3
 8014e16:	f3bf 8f6f 	isb	sy
 8014e1a:	f3bf 8f4f 	dsb	sy
 8014e1e:	607b      	str	r3, [r7, #4]
}
 8014e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014e22:	4b10      	ldr	r3, [pc, #64]	@ (8014e64 <vPortEnterCritical+0x5c>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	3301      	adds	r3, #1
 8014e28:	4a0e      	ldr	r2, [pc, #56]	@ (8014e64 <vPortEnterCritical+0x5c>)
 8014e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8014e64 <vPortEnterCritical+0x5c>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d110      	bne.n	8014e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014e34:	4b0c      	ldr	r3, [pc, #48]	@ (8014e68 <vPortEnterCritical+0x60>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d00b      	beq.n	8014e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8014e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e42:	f383 8811 	msr	BASEPRI, r3
 8014e46:	f3bf 8f6f 	isb	sy
 8014e4a:	f3bf 8f4f 	dsb	sy
 8014e4e:	603b      	str	r3, [r7, #0]
}
 8014e50:	bf00      	nop
 8014e52:	bf00      	nop
 8014e54:	e7fd      	b.n	8014e52 <vPortEnterCritical+0x4a>
	}
}
 8014e56:	bf00      	nop
 8014e58:	370c      	adds	r7, #12
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop
 8014e64:	2400009c 	.word	0x2400009c
 8014e68:	e000ed04 	.word	0xe000ed04

08014e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b083      	sub	sp, #12
 8014e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014e72:	4b12      	ldr	r3, [pc, #72]	@ (8014ebc <vPortExitCritical+0x50>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d10b      	bne.n	8014e92 <vPortExitCritical+0x26>
	__asm volatile
 8014e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	607b      	str	r3, [r7, #4]
}
 8014e8c:	bf00      	nop
 8014e8e:	bf00      	nop
 8014e90:	e7fd      	b.n	8014e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014e92:	4b0a      	ldr	r3, [pc, #40]	@ (8014ebc <vPortExitCritical+0x50>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	3b01      	subs	r3, #1
 8014e98:	4a08      	ldr	r2, [pc, #32]	@ (8014ebc <vPortExitCritical+0x50>)
 8014e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014e9c:	4b07      	ldr	r3, [pc, #28]	@ (8014ebc <vPortExitCritical+0x50>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d105      	bne.n	8014eb0 <vPortExitCritical+0x44>
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	f383 8811 	msr	BASEPRI, r3
}
 8014eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014eb0:	bf00      	nop
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	2400009c 	.word	0x2400009c

08014ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014ec0:	f3ef 8009 	mrs	r0, PSP
 8014ec4:	f3bf 8f6f 	isb	sy
 8014ec8:	4b15      	ldr	r3, [pc, #84]	@ (8014f20 <pxCurrentTCBConst>)
 8014eca:	681a      	ldr	r2, [r3, #0]
 8014ecc:	f01e 0f10 	tst.w	lr, #16
 8014ed0:	bf08      	it	eq
 8014ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eda:	6010      	str	r0, [r2, #0]
 8014edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014ee4:	f380 8811 	msr	BASEPRI, r0
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	f3bf 8f6f 	isb	sy
 8014ef0:	f7fe ff9c 	bl	8013e2c <vTaskSwitchContext>
 8014ef4:	f04f 0000 	mov.w	r0, #0
 8014ef8:	f380 8811 	msr	BASEPRI, r0
 8014efc:	bc09      	pop	{r0, r3}
 8014efe:	6819      	ldr	r1, [r3, #0]
 8014f00:	6808      	ldr	r0, [r1, #0]
 8014f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f06:	f01e 0f10 	tst.w	lr, #16
 8014f0a:	bf08      	it	eq
 8014f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f10:	f380 8809 	msr	PSP, r0
 8014f14:	f3bf 8f6f 	isb	sy
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	f3af 8000 	nop.w

08014f20 <pxCurrentTCBConst>:
 8014f20:	24000f04 	.word	0x24000f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014f24:	bf00      	nop
 8014f26:	bf00      	nop

08014f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8014f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	607b      	str	r3, [r7, #4]
}
 8014f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014f42:	f7fe feb9 	bl	8013cb8 <xTaskIncrementTick>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d003      	beq.n	8014f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014f4c:	4b06      	ldr	r3, [pc, #24]	@ (8014f68 <xPortSysTickHandler+0x40>)
 8014f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f52:	601a      	str	r2, [r3, #0]
 8014f54:	2300      	movs	r3, #0
 8014f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	f383 8811 	msr	BASEPRI, r3
}
 8014f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014f60:	bf00      	nop
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	e000ed04 	.word	0xe000ed04

08014f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014f70:	4b0b      	ldr	r3, [pc, #44]	@ (8014fa0 <vPortSetupTimerInterrupt+0x34>)
 8014f72:	2200      	movs	r2, #0
 8014f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014f76:	4b0b      	ldr	r3, [pc, #44]	@ (8014fa4 <vPortSetupTimerInterrupt+0x38>)
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8014fa8 <vPortSetupTimerInterrupt+0x3c>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4a0a      	ldr	r2, [pc, #40]	@ (8014fac <vPortSetupTimerInterrupt+0x40>)
 8014f82:	fba2 2303 	umull	r2, r3, r2, r3
 8014f86:	099b      	lsrs	r3, r3, #6
 8014f88:	4a09      	ldr	r2, [pc, #36]	@ (8014fb0 <vPortSetupTimerInterrupt+0x44>)
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014f8e:	4b04      	ldr	r3, [pc, #16]	@ (8014fa0 <vPortSetupTimerInterrupt+0x34>)
 8014f90:	2207      	movs	r2, #7
 8014f92:	601a      	str	r2, [r3, #0]
}
 8014f94:	bf00      	nop
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	e000e010 	.word	0xe000e010
 8014fa4:	e000e018 	.word	0xe000e018
 8014fa8:	24000000 	.word	0x24000000
 8014fac:	10624dd3 	.word	0x10624dd3
 8014fb0:	e000e014 	.word	0xe000e014

08014fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014fc4 <vPortEnableVFP+0x10>
 8014fb8:	6801      	ldr	r1, [r0, #0]
 8014fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014fbe:	6001      	str	r1, [r0, #0]
 8014fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014fc2:	bf00      	nop
 8014fc4:	e000ed88 	.word	0xe000ed88

08014fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014fc8:	b480      	push	{r7}
 8014fca:	b085      	sub	sp, #20
 8014fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014fce:	f3ef 8305 	mrs	r3, IPSR
 8014fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	2b0f      	cmp	r3, #15
 8014fd8:	d915      	bls.n	8015006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014fda:	4a18      	ldr	r2, [pc, #96]	@ (801503c <vPortValidateInterruptPriority+0x74>)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	4413      	add	r3, r2
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014fe4:	4b16      	ldr	r3, [pc, #88]	@ (8015040 <vPortValidateInterruptPriority+0x78>)
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	7afa      	ldrb	r2, [r7, #11]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d20b      	bcs.n	8015006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff2:	f383 8811 	msr	BASEPRI, r3
 8014ff6:	f3bf 8f6f 	isb	sy
 8014ffa:	f3bf 8f4f 	dsb	sy
 8014ffe:	607b      	str	r3, [r7, #4]
}
 8015000:	bf00      	nop
 8015002:	bf00      	nop
 8015004:	e7fd      	b.n	8015002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015006:	4b0f      	ldr	r3, [pc, #60]	@ (8015044 <vPortValidateInterruptPriority+0x7c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801500e:	4b0e      	ldr	r3, [pc, #56]	@ (8015048 <vPortValidateInterruptPriority+0x80>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	429a      	cmp	r2, r3
 8015014:	d90b      	bls.n	801502e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801501a:	f383 8811 	msr	BASEPRI, r3
 801501e:	f3bf 8f6f 	isb	sy
 8015022:	f3bf 8f4f 	dsb	sy
 8015026:	603b      	str	r3, [r7, #0]
}
 8015028:	bf00      	nop
 801502a:	bf00      	nop
 801502c:	e7fd      	b.n	801502a <vPortValidateInterruptPriority+0x62>
	}
 801502e:	bf00      	nop
 8015030:	3714      	adds	r7, #20
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	e000e3f0 	.word	0xe000e3f0
 8015040:	24001530 	.word	0x24001530
 8015044:	e000ed0c 	.word	0xe000ed0c
 8015048:	24001534 	.word	0x24001534

0801504c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b08a      	sub	sp, #40	@ 0x28
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015054:	2300      	movs	r3, #0
 8015056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015058:	f7fe fd72 	bl	8013b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801505c:	4b5c      	ldr	r3, [pc, #368]	@ (80151d0 <pvPortMalloc+0x184>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d101      	bne.n	8015068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015064:	f000 f924 	bl	80152b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015068:	4b5a      	ldr	r3, [pc, #360]	@ (80151d4 <pvPortMalloc+0x188>)
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	4013      	ands	r3, r2
 8015070:	2b00      	cmp	r3, #0
 8015072:	f040 8095 	bne.w	80151a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d01e      	beq.n	80150ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801507c:	2208      	movs	r2, #8
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	4413      	add	r3, r2
 8015082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f003 0307 	and.w	r3, r3, #7
 801508a:	2b00      	cmp	r3, #0
 801508c:	d015      	beq.n	80150ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f023 0307 	bic.w	r3, r3, #7
 8015094:	3308      	adds	r3, #8
 8015096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f003 0307 	and.w	r3, r3, #7
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d00b      	beq.n	80150ba <pvPortMalloc+0x6e>
	__asm volatile
 80150a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	617b      	str	r3, [r7, #20]
}
 80150b4:	bf00      	nop
 80150b6:	bf00      	nop
 80150b8:	e7fd      	b.n	80150b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d06f      	beq.n	80151a0 <pvPortMalloc+0x154>
 80150c0:	4b45      	ldr	r3, [pc, #276]	@ (80151d8 <pvPortMalloc+0x18c>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d86a      	bhi.n	80151a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80150ca:	4b44      	ldr	r3, [pc, #272]	@ (80151dc <pvPortMalloc+0x190>)
 80150cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80150ce:	4b43      	ldr	r3, [pc, #268]	@ (80151dc <pvPortMalloc+0x190>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80150d4:	e004      	b.n	80150e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80150d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80150da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80150e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d903      	bls.n	80150f2 <pvPortMalloc+0xa6>
 80150ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d1f1      	bne.n	80150d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80150f2:	4b37      	ldr	r3, [pc, #220]	@ (80151d0 <pvPortMalloc+0x184>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d051      	beq.n	80151a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80150fc:	6a3b      	ldr	r3, [r7, #32]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2208      	movs	r2, #8
 8015102:	4413      	add	r3, r2
 8015104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015110:	685a      	ldr	r2, [r3, #4]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	1ad2      	subs	r2, r2, r3
 8015116:	2308      	movs	r3, #8
 8015118:	005b      	lsls	r3, r3, #1
 801511a:	429a      	cmp	r2, r3
 801511c:	d920      	bls.n	8015160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4413      	add	r3, r2
 8015124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	f003 0307 	and.w	r3, r3, #7
 801512c:	2b00      	cmp	r3, #0
 801512e:	d00b      	beq.n	8015148 <pvPortMalloc+0xfc>
	__asm volatile
 8015130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	613b      	str	r3, [r7, #16]
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	e7fd      	b.n	8015144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	1ad2      	subs	r2, r2, r3
 8015150:	69bb      	ldr	r3, [r7, #24]
 8015152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801515a:	69b8      	ldr	r0, [r7, #24]
 801515c:	f000 f90a 	bl	8015374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015160:	4b1d      	ldr	r3, [pc, #116]	@ (80151d8 <pvPortMalloc+0x18c>)
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	4a1b      	ldr	r2, [pc, #108]	@ (80151d8 <pvPortMalloc+0x18c>)
 801516c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801516e:	4b1a      	ldr	r3, [pc, #104]	@ (80151d8 <pvPortMalloc+0x18c>)
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	4b1b      	ldr	r3, [pc, #108]	@ (80151e0 <pvPortMalloc+0x194>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	429a      	cmp	r2, r3
 8015178:	d203      	bcs.n	8015182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801517a:	4b17      	ldr	r3, [pc, #92]	@ (80151d8 <pvPortMalloc+0x18c>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	4a18      	ldr	r2, [pc, #96]	@ (80151e0 <pvPortMalloc+0x194>)
 8015180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015184:	685a      	ldr	r2, [r3, #4]
 8015186:	4b13      	ldr	r3, [pc, #76]	@ (80151d4 <pvPortMalloc+0x188>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	431a      	orrs	r2, r3
 801518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015192:	2200      	movs	r2, #0
 8015194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015196:	4b13      	ldr	r3, [pc, #76]	@ (80151e4 <pvPortMalloc+0x198>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	3301      	adds	r3, #1
 801519c:	4a11      	ldr	r2, [pc, #68]	@ (80151e4 <pvPortMalloc+0x198>)
 801519e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80151a0:	f7fe fcdc 	bl	8013b5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	f003 0307 	and.w	r3, r3, #7
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00b      	beq.n	80151c6 <pvPortMalloc+0x17a>
	__asm volatile
 80151ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151b2:	f383 8811 	msr	BASEPRI, r3
 80151b6:	f3bf 8f6f 	isb	sy
 80151ba:	f3bf 8f4f 	dsb	sy
 80151be:	60fb      	str	r3, [r7, #12]
}
 80151c0:	bf00      	nop
 80151c2:	bf00      	nop
 80151c4:	e7fd      	b.n	80151c2 <pvPortMalloc+0x176>
	return pvReturn;
 80151c6:	69fb      	ldr	r3, [r7, #28]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3728      	adds	r7, #40	@ 0x28
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	24005140 	.word	0x24005140
 80151d4:	24005154 	.word	0x24005154
 80151d8:	24005144 	.word	0x24005144
 80151dc:	24005138 	.word	0x24005138
 80151e0:	24005148 	.word	0x24005148
 80151e4:	2400514c 	.word	0x2400514c

080151e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d04f      	beq.n	801529a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80151fa:	2308      	movs	r3, #8
 80151fc:	425b      	negs	r3, r3
 80151fe:	697a      	ldr	r2, [r7, #20]
 8015200:	4413      	add	r3, r2
 8015202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	685a      	ldr	r2, [r3, #4]
 801520c:	4b25      	ldr	r3, [pc, #148]	@ (80152a4 <vPortFree+0xbc>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4013      	ands	r3, r2
 8015212:	2b00      	cmp	r3, #0
 8015214:	d10b      	bne.n	801522e <vPortFree+0x46>
	__asm volatile
 8015216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801521a:	f383 8811 	msr	BASEPRI, r3
 801521e:	f3bf 8f6f 	isb	sy
 8015222:	f3bf 8f4f 	dsb	sy
 8015226:	60fb      	str	r3, [r7, #12]
}
 8015228:	bf00      	nop
 801522a:	bf00      	nop
 801522c:	e7fd      	b.n	801522a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00b      	beq.n	801524e <vPortFree+0x66>
	__asm volatile
 8015236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801523a:	f383 8811 	msr	BASEPRI, r3
 801523e:	f3bf 8f6f 	isb	sy
 8015242:	f3bf 8f4f 	dsb	sy
 8015246:	60bb      	str	r3, [r7, #8]
}
 8015248:	bf00      	nop
 801524a:	bf00      	nop
 801524c:	e7fd      	b.n	801524a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	685a      	ldr	r2, [r3, #4]
 8015252:	4b14      	ldr	r3, [pc, #80]	@ (80152a4 <vPortFree+0xbc>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	4013      	ands	r3, r2
 8015258:	2b00      	cmp	r3, #0
 801525a:	d01e      	beq.n	801529a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d11a      	bne.n	801529a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	685a      	ldr	r2, [r3, #4]
 8015268:	4b0e      	ldr	r3, [pc, #56]	@ (80152a4 <vPortFree+0xbc>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	43db      	mvns	r3, r3
 801526e:	401a      	ands	r2, r3
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015274:	f7fe fc64 	bl	8013b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	685a      	ldr	r2, [r3, #4]
 801527c:	4b0a      	ldr	r3, [pc, #40]	@ (80152a8 <vPortFree+0xc0>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	4413      	add	r3, r2
 8015282:	4a09      	ldr	r2, [pc, #36]	@ (80152a8 <vPortFree+0xc0>)
 8015284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015286:	6938      	ldr	r0, [r7, #16]
 8015288:	f000 f874 	bl	8015374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801528c:	4b07      	ldr	r3, [pc, #28]	@ (80152ac <vPortFree+0xc4>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3301      	adds	r3, #1
 8015292:	4a06      	ldr	r2, [pc, #24]	@ (80152ac <vPortFree+0xc4>)
 8015294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015296:	f7fe fc61 	bl	8013b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801529a:	bf00      	nop
 801529c:	3718      	adds	r7, #24
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	24005154 	.word	0x24005154
 80152a8:	24005144 	.word	0x24005144
 80152ac:	24005150 	.word	0x24005150

080152b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80152b0:	b480      	push	{r7}
 80152b2:	b085      	sub	sp, #20
 80152b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80152b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80152ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80152bc:	4b27      	ldr	r3, [pc, #156]	@ (801535c <prvHeapInit+0xac>)
 80152be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	f003 0307 	and.w	r3, r3, #7
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00c      	beq.n	80152e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	3307      	adds	r3, #7
 80152ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f023 0307 	bic.w	r3, r3, #7
 80152d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80152d8:	68ba      	ldr	r2, [r7, #8]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	1ad3      	subs	r3, r2, r3
 80152de:	4a1f      	ldr	r2, [pc, #124]	@ (801535c <prvHeapInit+0xac>)
 80152e0:	4413      	add	r3, r2
 80152e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80152e8:	4a1d      	ldr	r2, [pc, #116]	@ (8015360 <prvHeapInit+0xb0>)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80152ee:	4b1c      	ldr	r3, [pc, #112]	@ (8015360 <prvHeapInit+0xb0>)
 80152f0:	2200      	movs	r2, #0
 80152f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	4413      	add	r3, r2
 80152fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80152fc:	2208      	movs	r2, #8
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	1a9b      	subs	r3, r3, r2
 8015302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f023 0307 	bic.w	r3, r3, #7
 801530a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	4a15      	ldr	r2, [pc, #84]	@ (8015364 <prvHeapInit+0xb4>)
 8015310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015312:	4b14      	ldr	r3, [pc, #80]	@ (8015364 <prvHeapInit+0xb4>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	2200      	movs	r2, #0
 8015318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801531a:	4b12      	ldr	r3, [pc, #72]	@ (8015364 <prvHeapInit+0xb4>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	2200      	movs	r2, #0
 8015320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	1ad2      	subs	r2, r2, r3
 801532c:	683b      	ldr	r3, [r7, #0]
 801532e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015330:	4b0c      	ldr	r3, [pc, #48]	@ (8015364 <prvHeapInit+0xb4>)
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	4a0a      	ldr	r2, [pc, #40]	@ (8015368 <prvHeapInit+0xb8>)
 801533e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	4a09      	ldr	r2, [pc, #36]	@ (801536c <prvHeapInit+0xbc>)
 8015346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015348:	4b09      	ldr	r3, [pc, #36]	@ (8015370 <prvHeapInit+0xc0>)
 801534a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801534e:	601a      	str	r2, [r3, #0]
}
 8015350:	bf00      	nop
 8015352:	3714      	adds	r7, #20
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr
 801535c:	24001538 	.word	0x24001538
 8015360:	24005138 	.word	0x24005138
 8015364:	24005140 	.word	0x24005140
 8015368:	24005148 	.word	0x24005148
 801536c:	24005144 	.word	0x24005144
 8015370:	24005154 	.word	0x24005154

08015374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015374:	b480      	push	{r7}
 8015376:	b085      	sub	sp, #20
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801537c:	4b28      	ldr	r3, [pc, #160]	@ (8015420 <prvInsertBlockIntoFreeList+0xac>)
 801537e:	60fb      	str	r3, [r7, #12]
 8015380:	e002      	b.n	8015388 <prvInsertBlockIntoFreeList+0x14>
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	60fb      	str	r3, [r7, #12]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	429a      	cmp	r2, r3
 8015390:	d8f7      	bhi.n	8015382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	4413      	add	r3, r2
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d108      	bne.n	80153b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	685a      	ldr	r2, [r3, #4]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	441a      	add	r2, r3
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	68ba      	ldr	r2, [r7, #8]
 80153c0:	441a      	add	r2, r3
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d118      	bne.n	80153fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681a      	ldr	r2, [r3, #0]
 80153ce:	4b15      	ldr	r3, [pc, #84]	@ (8015424 <prvInsertBlockIntoFreeList+0xb0>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d00d      	beq.n	80153f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	685a      	ldr	r2, [r3, #4]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	441a      	add	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	601a      	str	r2, [r3, #0]
 80153f0:	e008      	b.n	8015404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80153f2:	4b0c      	ldr	r3, [pc, #48]	@ (8015424 <prvInsertBlockIntoFreeList+0xb0>)
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	e003      	b.n	8015404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015404:	68fa      	ldr	r2, [r7, #12]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	429a      	cmp	r2, r3
 801540a:	d002      	beq.n	8015412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015412:	bf00      	nop
 8015414:	3714      	adds	r7, #20
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr
 801541e:	bf00      	nop
 8015420:	24005138 	.word	0x24005138
 8015424:	24005140 	.word	0x24005140

08015428 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801542c:	2200      	movs	r2, #0
 801542e:	4913      	ldr	r1, [pc, #76]	@ (801547c <MX_USB_DEVICE_Init+0x54>)
 8015430:	4813      	ldr	r0, [pc, #76]	@ (8015480 <MX_USB_DEVICE_Init+0x58>)
 8015432:	f7fb ff29 	bl	8011288 <USBD_Init>
 8015436:	4603      	mov	r3, r0
 8015438:	2b00      	cmp	r3, #0
 801543a:	d001      	beq.n	8015440 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801543c:	f7ec f9d7 	bl	80017ee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015440:	4910      	ldr	r1, [pc, #64]	@ (8015484 <MX_USB_DEVICE_Init+0x5c>)
 8015442:	480f      	ldr	r0, [pc, #60]	@ (8015480 <MX_USB_DEVICE_Init+0x58>)
 8015444:	f7fb ff50 	bl	80112e8 <USBD_RegisterClass>
 8015448:	4603      	mov	r3, r0
 801544a:	2b00      	cmp	r3, #0
 801544c:	d001      	beq.n	8015452 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801544e:	f7ec f9ce 	bl	80017ee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015452:	490d      	ldr	r1, [pc, #52]	@ (8015488 <MX_USB_DEVICE_Init+0x60>)
 8015454:	480a      	ldr	r0, [pc, #40]	@ (8015480 <MX_USB_DEVICE_Init+0x58>)
 8015456:	f7fb fe47 	bl	80110e8 <USBD_CDC_RegisterInterface>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d001      	beq.n	8015464 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015460:	f7ec f9c5 	bl	80017ee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015464:	4806      	ldr	r0, [pc, #24]	@ (8015480 <MX_USB_DEVICE_Init+0x58>)
 8015466:	f7fb ff75 	bl	8011354 <USBD_Start>
 801546a:	4603      	mov	r3, r0
 801546c:	2b00      	cmp	r3, #0
 801546e:	d001      	beq.n	8015474 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015470:	f7ec f9bd 	bl	80017ee <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015474:	f7f3 f938 	bl	80086e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015478:	bf00      	nop
 801547a:	bd80      	pop	{r7, pc}
 801547c:	240000b4 	.word	0x240000b4
 8015480:	24005158 	.word	0x24005158
 8015484:	2400001c 	.word	0x2400001c
 8015488:	240000a0 	.word	0x240000a0

0801548c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015490:	2200      	movs	r2, #0
 8015492:	4905      	ldr	r1, [pc, #20]	@ (80154a8 <CDC_Init_FS+0x1c>)
 8015494:	4805      	ldr	r0, [pc, #20]	@ (80154ac <CDC_Init_FS+0x20>)
 8015496:	f7fb fe41 	bl	801111c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801549a:	4905      	ldr	r1, [pc, #20]	@ (80154b0 <CDC_Init_FS+0x24>)
 801549c:	4803      	ldr	r0, [pc, #12]	@ (80154ac <CDC_Init_FS+0x20>)
 801549e:	f7fb fe5f 	bl	8011160 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80154a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	24005c34 	.word	0x24005c34
 80154ac:	24005158 	.word	0x24005158
 80154b0:	24005434 	.word	0x24005434

080154b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80154b4:	b480      	push	{r7}
 80154b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80154b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80154c4:	b480      	push	{r7}
 80154c6:	b083      	sub	sp, #12
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	4603      	mov	r3, r0
 80154cc:	6039      	str	r1, [r7, #0]
 80154ce:	71fb      	strb	r3, [r7, #7]
 80154d0:	4613      	mov	r3, r2
 80154d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154d4:	79fb      	ldrb	r3, [r7, #7]
 80154d6:	2b23      	cmp	r3, #35	@ 0x23
 80154d8:	d84a      	bhi.n	8015570 <CDC_Control_FS+0xac>
 80154da:	a201      	add	r2, pc, #4	@ (adr r2, 80154e0 <CDC_Control_FS+0x1c>)
 80154dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154e0:	08015571 	.word	0x08015571
 80154e4:	08015571 	.word	0x08015571
 80154e8:	08015571 	.word	0x08015571
 80154ec:	08015571 	.word	0x08015571
 80154f0:	08015571 	.word	0x08015571
 80154f4:	08015571 	.word	0x08015571
 80154f8:	08015571 	.word	0x08015571
 80154fc:	08015571 	.word	0x08015571
 8015500:	08015571 	.word	0x08015571
 8015504:	08015571 	.word	0x08015571
 8015508:	08015571 	.word	0x08015571
 801550c:	08015571 	.word	0x08015571
 8015510:	08015571 	.word	0x08015571
 8015514:	08015571 	.word	0x08015571
 8015518:	08015571 	.word	0x08015571
 801551c:	08015571 	.word	0x08015571
 8015520:	08015571 	.word	0x08015571
 8015524:	08015571 	.word	0x08015571
 8015528:	08015571 	.word	0x08015571
 801552c:	08015571 	.word	0x08015571
 8015530:	08015571 	.word	0x08015571
 8015534:	08015571 	.word	0x08015571
 8015538:	08015571 	.word	0x08015571
 801553c:	08015571 	.word	0x08015571
 8015540:	08015571 	.word	0x08015571
 8015544:	08015571 	.word	0x08015571
 8015548:	08015571 	.word	0x08015571
 801554c:	08015571 	.word	0x08015571
 8015550:	08015571 	.word	0x08015571
 8015554:	08015571 	.word	0x08015571
 8015558:	08015571 	.word	0x08015571
 801555c:	08015571 	.word	0x08015571
 8015560:	08015571 	.word	0x08015571
 8015564:	08015571 	.word	0x08015571
 8015568:	08015571 	.word	0x08015571
 801556c:	08015571 	.word	0x08015571
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015570:	bf00      	nop
  }

  return (USBD_OK);
 8015572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015574:	4618      	mov	r0, r3
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr

08015580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801558a:	6879      	ldr	r1, [r7, #4]
 801558c:	4805      	ldr	r0, [pc, #20]	@ (80155a4 <CDC_Receive_FS+0x24>)
 801558e:	f7fb fde7 	bl	8011160 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015592:	4804      	ldr	r0, [pc, #16]	@ (80155a4 <CDC_Receive_FS+0x24>)
 8015594:	f7fb fe42 	bl	801121c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801559a:	4618      	mov	r0, r3
 801559c:	3708      	adds	r7, #8
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	24005158 	.word	0x24005158

080155a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b084      	sub	sp, #16
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	460b      	mov	r3, r1
 80155b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80155b4:	2300      	movs	r3, #0
 80155b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80155b8:	4b0d      	ldr	r3, [pc, #52]	@ (80155f0 <CDC_Transmit_FS+0x48>)
 80155ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80155be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d001      	beq.n	80155ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80155ca:	2301      	movs	r3, #1
 80155cc:	e00b      	b.n	80155e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80155ce:	887b      	ldrh	r3, [r7, #2]
 80155d0:	461a      	mov	r2, r3
 80155d2:	6879      	ldr	r1, [r7, #4]
 80155d4:	4806      	ldr	r0, [pc, #24]	@ (80155f0 <CDC_Transmit_FS+0x48>)
 80155d6:	f7fb fda1 	bl	801111c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80155da:	4805      	ldr	r0, [pc, #20]	@ (80155f0 <CDC_Transmit_FS+0x48>)
 80155dc:	f7fb fdde 	bl	801119c <USBD_CDC_TransmitPacket>
 80155e0:	4603      	mov	r3, r0
 80155e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80155e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	24005158 	.word	0x24005158

080155f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b087      	sub	sp, #28
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	4613      	mov	r3, r2
 8015600:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015606:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801560a:	4618      	mov	r0, r3
 801560c:	371c      	adds	r7, #28
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr
	...

08015618 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	4603      	mov	r3, r0
 8015620:	6039      	str	r1, [r7, #0]
 8015622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	2212      	movs	r2, #18
 8015628:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801562a:	4b03      	ldr	r3, [pc, #12]	@ (8015638 <USBD_FS_DeviceDescriptor+0x20>)
}
 801562c:	4618      	mov	r0, r3
 801562e:	370c      	adds	r7, #12
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr
 8015638:	240000d4 	.word	0x240000d4

0801563c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801563c:	b480      	push	{r7}
 801563e:	b083      	sub	sp, #12
 8015640:	af00      	add	r7, sp, #0
 8015642:	4603      	mov	r3, r0
 8015644:	6039      	str	r1, [r7, #0]
 8015646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	2204      	movs	r2, #4
 801564c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801564e:	4b03      	ldr	r3, [pc, #12]	@ (801565c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015650:	4618      	mov	r0, r3
 8015652:	370c      	adds	r7, #12
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr
 801565c:	240000e8 	.word	0x240000e8

08015660 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	4603      	mov	r3, r0
 8015668:	6039      	str	r1, [r7, #0]
 801566a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801566c:	79fb      	ldrb	r3, [r7, #7]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d105      	bne.n	801567e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015672:	683a      	ldr	r2, [r7, #0]
 8015674:	4907      	ldr	r1, [pc, #28]	@ (8015694 <USBD_FS_ProductStrDescriptor+0x34>)
 8015676:	4808      	ldr	r0, [pc, #32]	@ (8015698 <USBD_FS_ProductStrDescriptor+0x38>)
 8015678:	f7fd f846 	bl	8012708 <USBD_GetString>
 801567c:	e004      	b.n	8015688 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801567e:	683a      	ldr	r2, [r7, #0]
 8015680:	4904      	ldr	r1, [pc, #16]	@ (8015694 <USBD_FS_ProductStrDescriptor+0x34>)
 8015682:	4805      	ldr	r0, [pc, #20]	@ (8015698 <USBD_FS_ProductStrDescriptor+0x38>)
 8015684:	f7fd f840 	bl	8012708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015688:	4b02      	ldr	r3, [pc, #8]	@ (8015694 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801568a:	4618      	mov	r0, r3
 801568c:	3708      	adds	r7, #8
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	24006434 	.word	0x24006434
 8015698:	08019d98 	.word	0x08019d98

0801569c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	4603      	mov	r3, r0
 80156a4:	6039      	str	r1, [r7, #0]
 80156a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80156a8:	683a      	ldr	r2, [r7, #0]
 80156aa:	4904      	ldr	r1, [pc, #16]	@ (80156bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80156ac:	4804      	ldr	r0, [pc, #16]	@ (80156c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80156ae:	f7fd f82b 	bl	8012708 <USBD_GetString>
  return USBD_StrDesc;
 80156b2:	4b02      	ldr	r3, [pc, #8]	@ (80156bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	24006434 	.word	0x24006434
 80156c0:	08019db0 	.word	0x08019db0

080156c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	4603      	mov	r3, r0
 80156cc:	6039      	str	r1, [r7, #0]
 80156ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	221a      	movs	r2, #26
 80156d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80156d6:	f000 f843 	bl	8015760 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80156da:	4b02      	ldr	r3, [pc, #8]	@ (80156e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	240000ec 	.word	0x240000ec

080156e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	4603      	mov	r3, r0
 80156f0:	6039      	str	r1, [r7, #0]
 80156f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80156f4:	79fb      	ldrb	r3, [r7, #7]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d105      	bne.n	8015706 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156fa:	683a      	ldr	r2, [r7, #0]
 80156fc:	4907      	ldr	r1, [pc, #28]	@ (801571c <USBD_FS_ConfigStrDescriptor+0x34>)
 80156fe:	4808      	ldr	r0, [pc, #32]	@ (8015720 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015700:	f7fd f802 	bl	8012708 <USBD_GetString>
 8015704:	e004      	b.n	8015710 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015706:	683a      	ldr	r2, [r7, #0]
 8015708:	4904      	ldr	r1, [pc, #16]	@ (801571c <USBD_FS_ConfigStrDescriptor+0x34>)
 801570a:	4805      	ldr	r0, [pc, #20]	@ (8015720 <USBD_FS_ConfigStrDescriptor+0x38>)
 801570c:	f7fc fffc 	bl	8012708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015710:	4b02      	ldr	r3, [pc, #8]	@ (801571c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015712:	4618      	mov	r0, r3
 8015714:	3708      	adds	r7, #8
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	24006434 	.word	0x24006434
 8015720:	08019dc4 	.word	0x08019dc4

08015724 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	6039      	str	r1, [r7, #0]
 801572e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015730:	79fb      	ldrb	r3, [r7, #7]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d105      	bne.n	8015742 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	4907      	ldr	r1, [pc, #28]	@ (8015758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801573a:	4808      	ldr	r0, [pc, #32]	@ (801575c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801573c:	f7fc ffe4 	bl	8012708 <USBD_GetString>
 8015740:	e004      	b.n	801574c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015742:	683a      	ldr	r2, [r7, #0]
 8015744:	4904      	ldr	r1, [pc, #16]	@ (8015758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015746:	4805      	ldr	r0, [pc, #20]	@ (801575c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015748:	f7fc ffde 	bl	8012708 <USBD_GetString>
  }
  return USBD_StrDesc;
 801574c:	4b02      	ldr	r3, [pc, #8]	@ (8015758 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801574e:	4618      	mov	r0, r3
 8015750:	3708      	adds	r7, #8
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	24006434 	.word	0x24006434
 801575c:	08019dd0 	.word	0x08019dd0

08015760 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015766:	4b0f      	ldr	r3, [pc, #60]	@ (80157a4 <Get_SerialNum+0x44>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801576c:	4b0e      	ldr	r3, [pc, #56]	@ (80157a8 <Get_SerialNum+0x48>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015772:	4b0e      	ldr	r3, [pc, #56]	@ (80157ac <Get_SerialNum+0x4c>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015778:	68fa      	ldr	r2, [r7, #12]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4413      	add	r3, r2
 801577e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d009      	beq.n	801579a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015786:	2208      	movs	r2, #8
 8015788:	4909      	ldr	r1, [pc, #36]	@ (80157b0 <Get_SerialNum+0x50>)
 801578a:	68f8      	ldr	r0, [r7, #12]
 801578c:	f000 f814 	bl	80157b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015790:	2204      	movs	r2, #4
 8015792:	4908      	ldr	r1, [pc, #32]	@ (80157b4 <Get_SerialNum+0x54>)
 8015794:	68b8      	ldr	r0, [r7, #8]
 8015796:	f000 f80f 	bl	80157b8 <IntToUnicode>
  }
}
 801579a:	bf00      	nop
 801579c:	3710      	adds	r7, #16
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
 80157a2:	bf00      	nop
 80157a4:	1ff1e800 	.word	0x1ff1e800
 80157a8:	1ff1e804 	.word	0x1ff1e804
 80157ac:	1ff1e808 	.word	0x1ff1e808
 80157b0:	240000ee 	.word	0x240000ee
 80157b4:	240000fe 	.word	0x240000fe

080157b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80157b8:	b480      	push	{r7}
 80157ba:	b087      	sub	sp, #28
 80157bc:	af00      	add	r7, sp, #0
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	4613      	mov	r3, r2
 80157c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80157c6:	2300      	movs	r3, #0
 80157c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80157ca:	2300      	movs	r3, #0
 80157cc:	75fb      	strb	r3, [r7, #23]
 80157ce:	e027      	b.n	8015820 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	0f1b      	lsrs	r3, r3, #28
 80157d4:	2b09      	cmp	r3, #9
 80157d6:	d80b      	bhi.n	80157f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	0f1b      	lsrs	r3, r3, #28
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	7dfb      	ldrb	r3, [r7, #23]
 80157e0:	005b      	lsls	r3, r3, #1
 80157e2:	4619      	mov	r1, r3
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	440b      	add	r3, r1
 80157e8:	3230      	adds	r2, #48	@ 0x30
 80157ea:	b2d2      	uxtb	r2, r2
 80157ec:	701a      	strb	r2, [r3, #0]
 80157ee:	e00a      	b.n	8015806 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	0f1b      	lsrs	r3, r3, #28
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	7dfb      	ldrb	r3, [r7, #23]
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4619      	mov	r1, r3
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	440b      	add	r3, r1
 8015800:	3237      	adds	r2, #55	@ 0x37
 8015802:	b2d2      	uxtb	r2, r2
 8015804:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	011b      	lsls	r3, r3, #4
 801580a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801580c:	7dfb      	ldrb	r3, [r7, #23]
 801580e:	005b      	lsls	r3, r3, #1
 8015810:	3301      	adds	r3, #1
 8015812:	68ba      	ldr	r2, [r7, #8]
 8015814:	4413      	add	r3, r2
 8015816:	2200      	movs	r2, #0
 8015818:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801581a:	7dfb      	ldrb	r3, [r7, #23]
 801581c:	3301      	adds	r3, #1
 801581e:	75fb      	strb	r3, [r7, #23]
 8015820:	7dfa      	ldrb	r2, [r7, #23]
 8015822:	79fb      	ldrb	r3, [r7, #7]
 8015824:	429a      	cmp	r2, r3
 8015826:	d3d3      	bcc.n	80157d0 <IntToUnicode+0x18>
  }
}
 8015828:	bf00      	nop
 801582a:	bf00      	nop
 801582c:	371c      	adds	r7, #28
 801582e:	46bd      	mov	sp, r7
 8015830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015834:	4770      	bx	lr
	...

08015838 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b0ba      	sub	sp, #232	@ 0xe8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015840:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015844:	2200      	movs	r2, #0
 8015846:	601a      	str	r2, [r3, #0]
 8015848:	605a      	str	r2, [r3, #4]
 801584a:	609a      	str	r2, [r3, #8]
 801584c:	60da      	str	r2, [r3, #12]
 801584e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015850:	f107 0310 	add.w	r3, r7, #16
 8015854:	22c0      	movs	r2, #192	@ 0xc0
 8015856:	2100      	movs	r1, #0
 8015858:	4618      	mov	r0, r3
 801585a:	f001 fdb2 	bl	80173c2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	4a34      	ldr	r2, [pc, #208]	@ (8015934 <HAL_PCD_MspInit+0xfc>)
 8015864:	4293      	cmp	r3, r2
 8015866:	d161      	bne.n	801592c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015868:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801586c:	f04f 0300 	mov.w	r3, #0
 8015870:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8015874:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801587c:	f107 0310 	add.w	r3, r7, #16
 8015880:	4618      	mov	r0, r3
 8015882:	f7f4 f823 	bl	80098cc <HAL_RCCEx_PeriphCLKConfig>
 8015886:	4603      	mov	r3, r0
 8015888:	2b00      	cmp	r3, #0
 801588a:	d001      	beq.n	8015890 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801588c:	f7eb ffaf 	bl	80017ee <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015890:	f7f2 ff2a 	bl	80086e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015894:	4b28      	ldr	r3, [pc, #160]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 8015896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801589a:	4a27      	ldr	r2, [pc, #156]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 801589c:	f043 0301 	orr.w	r3, r3, #1
 80158a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80158a4:	4b24      	ldr	r3, [pc, #144]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 80158a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80158aa:	f003 0301 	and.w	r3, r3, #1
 80158ae:	60fb      	str	r3, [r7, #12]
 80158b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80158b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80158b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80158ba:	2300      	movs	r3, #0
 80158bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158c0:	2300      	movs	r3, #0
 80158c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80158c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80158ca:	4619      	mov	r1, r3
 80158cc:	481b      	ldr	r0, [pc, #108]	@ (801593c <HAL_PCD_MspInit+0x104>)
 80158ce:	f7ef fad5 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80158d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80158d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158da:	2302      	movs	r3, #2
 80158dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158e0:	2300      	movs	r3, #0
 80158e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158e6:	2300      	movs	r3, #0
 80158e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80158ec:	230a      	movs	r3, #10
 80158ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80158f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80158f6:	4619      	mov	r1, r3
 80158f8:	4810      	ldr	r0, [pc, #64]	@ (801593c <HAL_PCD_MspInit+0x104>)
 80158fa:	f7ef fabf 	bl	8004e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80158fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 8015900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015904:	4a0c      	ldr	r2, [pc, #48]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 8015906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801590a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801590e:	4b0a      	ldr	r3, [pc, #40]	@ (8015938 <HAL_PCD_MspInit+0x100>)
 8015910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015918:	60bb      	str	r3, [r7, #8]
 801591a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801591c:	2200      	movs	r2, #0
 801591e:	2105      	movs	r1, #5
 8015920:	2065      	movs	r0, #101	@ 0x65
 8015922:	f7ec ffd7 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015926:	2065      	movs	r0, #101	@ 0x65
 8015928:	f7ec ffee 	bl	8002908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801592c:	bf00      	nop
 801592e:	37e8      	adds	r7, #232	@ 0xe8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	40080000 	.word	0x40080000
 8015938:	58024400 	.word	0x58024400
 801593c:	58020000 	.word	0x58020000

08015940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015954:	4619      	mov	r1, r3
 8015956:	4610      	mov	r0, r2
 8015958:	f7fb fd49 	bl	80113ee <USBD_LL_SetupStage>
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015976:	78fa      	ldrb	r2, [r7, #3]
 8015978:	6879      	ldr	r1, [r7, #4]
 801597a:	4613      	mov	r3, r2
 801597c:	00db      	lsls	r3, r3, #3
 801597e:	4413      	add	r3, r2
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	440b      	add	r3, r1
 8015984:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	78fb      	ldrb	r3, [r7, #3]
 801598c:	4619      	mov	r1, r3
 801598e:	f7fb fd83 	bl	8011498 <USBD_LL_DataOutStage>
}
 8015992:	bf00      	nop
 8015994:	3708      	adds	r7, #8
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}

0801599a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801599a:	b580      	push	{r7, lr}
 801599c:	b082      	sub	sp, #8
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
 80159a2:	460b      	mov	r3, r1
 80159a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80159ac:	78fa      	ldrb	r2, [r7, #3]
 80159ae:	6879      	ldr	r1, [r7, #4]
 80159b0:	4613      	mov	r3, r2
 80159b2:	00db      	lsls	r3, r3, #3
 80159b4:	4413      	add	r3, r2
 80159b6:	009b      	lsls	r3, r3, #2
 80159b8:	440b      	add	r3, r1
 80159ba:	3320      	adds	r3, #32
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	78fb      	ldrb	r3, [r7, #3]
 80159c0:	4619      	mov	r1, r3
 80159c2:	f7fb fe1c 	bl	80115fe <USBD_LL_DataInStage>
}
 80159c6:	bf00      	nop
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}

080159ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b082      	sub	sp, #8
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159dc:	4618      	mov	r0, r3
 80159de:	f7fb ff56 	bl	801188e <USBD_LL_SOF>
}
 80159e2:	bf00      	nop
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b084      	sub	sp, #16
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80159f2:	2301      	movs	r3, #1
 80159f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	79db      	ldrb	r3, [r3, #7]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d102      	bne.n	8015a04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80159fe:	2300      	movs	r3, #0
 8015a00:	73fb      	strb	r3, [r7, #15]
 8015a02:	e008      	b.n	8015a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	79db      	ldrb	r3, [r3, #7]
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	d102      	bne.n	8015a12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	73fb      	strb	r3, [r7, #15]
 8015a10:	e001      	b.n	8015a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015a12:	f7eb feec 	bl	80017ee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a1c:	7bfa      	ldrb	r2, [r7, #15]
 8015a1e:	4611      	mov	r1, r2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7fb fef0 	bl	8011806 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7fb fe98 	bl	8011762 <USBD_LL_Reset>
}
 8015a32:	bf00      	nop
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
	...

08015a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7fb feeb 	bl	8011826 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	6812      	ldr	r2, [r2, #0]
 8015a5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015a62:	f043 0301 	orr.w	r3, r3, #1
 8015a66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7adb      	ldrb	r3, [r3, #11]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d005      	beq.n	8015a7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015a70:	4b04      	ldr	r3, [pc, #16]	@ (8015a84 <HAL_PCD_SuspendCallback+0x48>)
 8015a72:	691b      	ldr	r3, [r3, #16]
 8015a74:	4a03      	ldr	r2, [pc, #12]	@ (8015a84 <HAL_PCD_SuspendCallback+0x48>)
 8015a76:	f043 0306 	orr.w	r3, r3, #6
 8015a7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015a7c:	bf00      	nop
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	e000ed00 	.word	0xe000ed00

08015a88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fb fee1 	bl	801185e <USBD_LL_Resume>
}
 8015a9c:	bf00      	nop
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	460b      	mov	r3, r1
 8015aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015ab6:	78fa      	ldrb	r2, [r7, #3]
 8015ab8:	4611      	mov	r1, r2
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fb ff39 	bl	8011932 <USBD_LL_IsoOUTIncomplete>
}
 8015ac0:	bf00      	nop
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015ada:	78fa      	ldrb	r2, [r7, #3]
 8015adc:	4611      	mov	r1, r2
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7fb fef5 	bl	80118ce <USBD_LL_IsoINIncomplete>
}
 8015ae4:	bf00      	nop
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7fb ff4b 	bl	8011996 <USBD_LL_DevConnected>
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fb ff48 	bl	80119ac <USBD_LL_DevDisconnected>
}
 8015b1c:	bf00      	nop
 8015b1e:	3708      	adds	r7, #8
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d13e      	bne.n	8015bb2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015b34:	4a21      	ldr	r2, [pc, #132]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b40:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015b44:	4b1d      	ldr	r3, [pc, #116]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b46:	4a1e      	ldr	r2, [pc, #120]	@ (8015bc0 <USBD_LL_Init+0x9c>)
 8015b48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b4c:	2209      	movs	r2, #9
 8015b4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015b50:	4b1a      	ldr	r3, [pc, #104]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b52:	2202      	movs	r2, #2
 8015b54:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015b56:	4b19      	ldr	r3, [pc, #100]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b58:	2200      	movs	r2, #0
 8015b5a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015b5c:	4b17      	ldr	r3, [pc, #92]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b5e:	2202      	movs	r2, #2
 8015b60:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015b62:	4b16      	ldr	r3, [pc, #88]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b64:	2200      	movs	r2, #0
 8015b66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015b68:	4b14      	ldr	r3, [pc, #80]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015b6e:	4b13      	ldr	r3, [pc, #76]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b70:	2200      	movs	r2, #0
 8015b72:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8015b74:	4b11      	ldr	r3, [pc, #68]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b76:	2201      	movs	r2, #1
 8015b78:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8015b7a:	4b10      	ldr	r3, [pc, #64]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b7c:	2201      	movs	r2, #1
 8015b7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015b80:	4b0e      	ldr	r3, [pc, #56]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b82:	2200      	movs	r2, #0
 8015b84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015b86:	480d      	ldr	r0, [pc, #52]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b88:	f7f1 fad6 	bl	8007138 <HAL_PCD_Init>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d001      	beq.n	8015b96 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015b92:	f7eb fe2c 	bl	80017ee <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015b96:	2180      	movs	r1, #128	@ 0x80
 8015b98:	4808      	ldr	r0, [pc, #32]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015b9a:	f7f2 fd2a 	bl	80085f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015b9e:	2240      	movs	r2, #64	@ 0x40
 8015ba0:	2100      	movs	r1, #0
 8015ba2:	4806      	ldr	r0, [pc, #24]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015ba4:	f7f2 fcde 	bl	8008564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015ba8:	2280      	movs	r2, #128	@ 0x80
 8015baa:	2101      	movs	r1, #1
 8015bac:	4803      	ldr	r0, [pc, #12]	@ (8015bbc <USBD_LL_Init+0x98>)
 8015bae:	f7f2 fcd9 	bl	8008564 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015bb2:	2300      	movs	r3, #0
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	24006634 	.word	0x24006634
 8015bc0:	40080000 	.word	0x40080000

08015bc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f1 fbb8 	bl	8007350 <HAL_PCD_Start>
 8015be0:	4603      	mov	r3, r0
 8015be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be4:	7bfb      	ldrb	r3, [r7, #15]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 f942 	bl	8015e70 <USBD_Get_USB_Status>
 8015bec:	4603      	mov	r3, r0
 8015bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3710      	adds	r7, #16
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}

08015bfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015bfa:	b580      	push	{r7, lr}
 8015bfc:	b084      	sub	sp, #16
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	4608      	mov	r0, r1
 8015c04:	4611      	mov	r1, r2
 8015c06:	461a      	mov	r2, r3
 8015c08:	4603      	mov	r3, r0
 8015c0a:	70fb      	strb	r3, [r7, #3]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	70bb      	strb	r3, [r7, #2]
 8015c10:	4613      	mov	r3, r2
 8015c12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015c22:	78bb      	ldrb	r3, [r7, #2]
 8015c24:	883a      	ldrh	r2, [r7, #0]
 8015c26:	78f9      	ldrb	r1, [r7, #3]
 8015c28:	f7f2 f8b9 	bl	8007d9e <HAL_PCD_EP_Open>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c30:	7bfb      	ldrb	r3, [r7, #15]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 f91c 	bl	8015e70 <USBD_Get_USB_Status>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b084      	sub	sp, #16
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
 8015c4e:	460b      	mov	r3, r1
 8015c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c52:	2300      	movs	r3, #0
 8015c54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c56:	2300      	movs	r3, #0
 8015c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c60:	78fa      	ldrb	r2, [r7, #3]
 8015c62:	4611      	mov	r1, r2
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7f2 f902 	bl	8007e6e <HAL_PCD_EP_Close>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c6e:	7bfb      	ldrb	r3, [r7, #15]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f000 f8fd 	bl	8015e70 <USBD_Get_USB_Status>
 8015c76:	4603      	mov	r3, r0
 8015c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c9e:	78fa      	ldrb	r2, [r7, #3]
 8015ca0:	4611      	mov	r1, r2
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7f2 f9ba 	bl	800801c <HAL_PCD_EP_SetStall>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f8de 	bl	8015e70 <USBD_Get_USB_Status>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b084      	sub	sp, #16
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
 8015cca:	460b      	mov	r3, r1
 8015ccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015cdc:	78fa      	ldrb	r2, [r7, #3]
 8015cde:	4611      	mov	r1, r2
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f2 f9fe 	bl	80080e2 <HAL_PCD_EP_ClrStall>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cea:	7bfb      	ldrb	r3, [r7, #15]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f000 f8bf 	bl	8015e70 <USBD_Get_USB_Status>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015d12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	da0b      	bge.n	8015d34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d1c:	78fb      	ldrb	r3, [r7, #3]
 8015d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015d22:	68f9      	ldr	r1, [r7, #12]
 8015d24:	4613      	mov	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	4413      	add	r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	440b      	add	r3, r1
 8015d2e:	3316      	adds	r3, #22
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	e00b      	b.n	8015d4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d34:	78fb      	ldrb	r3, [r7, #3]
 8015d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015d3a:	68f9      	ldr	r1, [r7, #12]
 8015d3c:	4613      	mov	r3, r2
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	4413      	add	r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	440b      	add	r3, r1
 8015d46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015d4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3714      	adds	r7, #20
 8015d50:	46bd      	mov	sp, r7
 8015d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d56:	4770      	bx	lr

08015d58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	460b      	mov	r3, r1
 8015d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015d72:	78fa      	ldrb	r2, [r7, #3]
 8015d74:	4611      	mov	r1, r2
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7f1 ffed 	bl	8007d56 <HAL_PCD_SetAddress>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d80:	7bfb      	ldrb	r3, [r7, #15]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f000 f874 	bl	8015e70 <USBD_Get_USB_Status>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b086      	sub	sp, #24
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	60f8      	str	r0, [r7, #12]
 8015d9e:	607a      	str	r2, [r7, #4]
 8015da0:	603b      	str	r3, [r7, #0]
 8015da2:	460b      	mov	r3, r1
 8015da4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015da6:	2300      	movs	r3, #0
 8015da8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015daa:	2300      	movs	r3, #0
 8015dac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015db4:	7af9      	ldrb	r1, [r7, #11]
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	f7f2 f8f5 	bl	8007fa8 <HAL_PCD_EP_Transmit>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dc2:	7dfb      	ldrb	r3, [r7, #23]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 f853 	bl	8015e70 <USBD_Get_USB_Status>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3718      	adds	r7, #24
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}

08015dd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	607a      	str	r2, [r7, #4]
 8015de2:	603b      	str	r3, [r7, #0]
 8015de4:	460b      	mov	r3, r1
 8015de6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015de8:	2300      	movs	r3, #0
 8015dea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dec:	2300      	movs	r3, #0
 8015dee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015df6:	7af9      	ldrb	r1, [r7, #11]
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	f7f2 f881 	bl	8007f02 <HAL_PCD_EP_Receive>
 8015e00:	4603      	mov	r3, r0
 8015e02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f000 f832 	bl	8015e70 <USBD_Get_USB_Status>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e10:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3718      	adds	r7, #24
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}

08015e1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e1a:	b580      	push	{r7, lr}
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	6078      	str	r0, [r7, #4]
 8015e22:	460b      	mov	r3, r1
 8015e24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015e2c:	78fa      	ldrb	r2, [r7, #3]
 8015e2e:	4611      	mov	r1, r2
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f2 f8a1 	bl	8007f78 <HAL_PCD_EP_GetRxCount>
 8015e36:	4603      	mov	r3, r0
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e48:	4b03      	ldr	r3, [pc, #12]	@ (8015e58 <USBD_static_malloc+0x18>)
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	370c      	adds	r7, #12
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e54:	4770      	bx	lr
 8015e56:	bf00      	nop
 8015e58:	24006b18 	.word	0x24006b18

08015e5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b083      	sub	sp, #12
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015e64:	bf00      	nop
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	4603      	mov	r3, r0
 8015e78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015e7e:	79fb      	ldrb	r3, [r7, #7]
 8015e80:	2b03      	cmp	r3, #3
 8015e82:	d817      	bhi.n	8015eb4 <USBD_Get_USB_Status+0x44>
 8015e84:	a201      	add	r2, pc, #4	@ (adr r2, 8015e8c <USBD_Get_USB_Status+0x1c>)
 8015e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e8a:	bf00      	nop
 8015e8c:	08015e9d 	.word	0x08015e9d
 8015e90:	08015ea3 	.word	0x08015ea3
 8015e94:	08015ea9 	.word	0x08015ea9
 8015e98:	08015eaf 	.word	0x08015eaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8015ea0:	e00b      	b.n	8015eba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ea2:	2303      	movs	r3, #3
 8015ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ea6:	e008      	b.n	8015eba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8015eac:	e005      	b.n	8015eba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015eae:	2303      	movs	r3, #3
 8015eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8015eb2:	e002      	b.n	8015eba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8015eb8:	bf00      	nop
  }
  return usb_status;
 8015eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3714      	adds	r7, #20
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <atof>:
 8015ec8:	2100      	movs	r1, #0
 8015eca:	f000 be79 	b.w	8016bc0 <strtod>

08015ece <atoi>:
 8015ece:	220a      	movs	r2, #10
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	f000 befd 	b.w	8016cd0 <strtol>
	...

08015ed8 <malloc>:
 8015ed8:	4b02      	ldr	r3, [pc, #8]	@ (8015ee4 <malloc+0xc>)
 8015eda:	4601      	mov	r1, r0
 8015edc:	6818      	ldr	r0, [r3, #0]
 8015ede:	f000 b82d 	b.w	8015f3c <_malloc_r>
 8015ee2:	bf00      	nop
 8015ee4:	24000280 	.word	0x24000280

08015ee8 <free>:
 8015ee8:	4b02      	ldr	r3, [pc, #8]	@ (8015ef4 <free+0xc>)
 8015eea:	4601      	mov	r1, r0
 8015eec:	6818      	ldr	r0, [r3, #0]
 8015eee:	f001 bc0f 	b.w	8017710 <_free_r>
 8015ef2:	bf00      	nop
 8015ef4:	24000280 	.word	0x24000280

08015ef8 <sbrk_aligned>:
 8015ef8:	b570      	push	{r4, r5, r6, lr}
 8015efa:	4e0f      	ldr	r6, [pc, #60]	@ (8015f38 <sbrk_aligned+0x40>)
 8015efc:	460c      	mov	r4, r1
 8015efe:	6831      	ldr	r1, [r6, #0]
 8015f00:	4605      	mov	r5, r0
 8015f02:	b911      	cbnz	r1, 8015f0a <sbrk_aligned+0x12>
 8015f04:	f001 fb7a 	bl	80175fc <_sbrk_r>
 8015f08:	6030      	str	r0, [r6, #0]
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	4628      	mov	r0, r5
 8015f0e:	f001 fb75 	bl	80175fc <_sbrk_r>
 8015f12:	1c43      	adds	r3, r0, #1
 8015f14:	d103      	bne.n	8015f1e <sbrk_aligned+0x26>
 8015f16:	f04f 34ff 	mov.w	r4, #4294967295
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	bd70      	pop	{r4, r5, r6, pc}
 8015f1e:	1cc4      	adds	r4, r0, #3
 8015f20:	f024 0403 	bic.w	r4, r4, #3
 8015f24:	42a0      	cmp	r0, r4
 8015f26:	d0f8      	beq.n	8015f1a <sbrk_aligned+0x22>
 8015f28:	1a21      	subs	r1, r4, r0
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	f001 fb66 	bl	80175fc <_sbrk_r>
 8015f30:	3001      	adds	r0, #1
 8015f32:	d1f2      	bne.n	8015f1a <sbrk_aligned+0x22>
 8015f34:	e7ef      	b.n	8015f16 <sbrk_aligned+0x1e>
 8015f36:	bf00      	nop
 8015f38:	24006d38 	.word	0x24006d38

08015f3c <_malloc_r>:
 8015f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f40:	1ccd      	adds	r5, r1, #3
 8015f42:	f025 0503 	bic.w	r5, r5, #3
 8015f46:	3508      	adds	r5, #8
 8015f48:	2d0c      	cmp	r5, #12
 8015f4a:	bf38      	it	cc
 8015f4c:	250c      	movcc	r5, #12
 8015f4e:	2d00      	cmp	r5, #0
 8015f50:	4606      	mov	r6, r0
 8015f52:	db01      	blt.n	8015f58 <_malloc_r+0x1c>
 8015f54:	42a9      	cmp	r1, r5
 8015f56:	d904      	bls.n	8015f62 <_malloc_r+0x26>
 8015f58:	230c      	movs	r3, #12
 8015f5a:	6033      	str	r3, [r6, #0]
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016038 <_malloc_r+0xfc>
 8015f66:	f000 f869 	bl	801603c <__malloc_lock>
 8015f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f6e:	461c      	mov	r4, r3
 8015f70:	bb44      	cbnz	r4, 8015fc4 <_malloc_r+0x88>
 8015f72:	4629      	mov	r1, r5
 8015f74:	4630      	mov	r0, r6
 8015f76:	f7ff ffbf 	bl	8015ef8 <sbrk_aligned>
 8015f7a:	1c43      	adds	r3, r0, #1
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	d158      	bne.n	8016032 <_malloc_r+0xf6>
 8015f80:	f8d8 4000 	ldr.w	r4, [r8]
 8015f84:	4627      	mov	r7, r4
 8015f86:	2f00      	cmp	r7, #0
 8015f88:	d143      	bne.n	8016012 <_malloc_r+0xd6>
 8015f8a:	2c00      	cmp	r4, #0
 8015f8c:	d04b      	beq.n	8016026 <_malloc_r+0xea>
 8015f8e:	6823      	ldr	r3, [r4, #0]
 8015f90:	4639      	mov	r1, r7
 8015f92:	4630      	mov	r0, r6
 8015f94:	eb04 0903 	add.w	r9, r4, r3
 8015f98:	f001 fb30 	bl	80175fc <_sbrk_r>
 8015f9c:	4581      	cmp	r9, r0
 8015f9e:	d142      	bne.n	8016026 <_malloc_r+0xea>
 8015fa0:	6821      	ldr	r1, [r4, #0]
 8015fa2:	1a6d      	subs	r5, r5, r1
 8015fa4:	4629      	mov	r1, r5
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f7ff ffa6 	bl	8015ef8 <sbrk_aligned>
 8015fac:	3001      	adds	r0, #1
 8015fae:	d03a      	beq.n	8016026 <_malloc_r+0xea>
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	442b      	add	r3, r5
 8015fb4:	6023      	str	r3, [r4, #0]
 8015fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	bb62      	cbnz	r2, 8016018 <_malloc_r+0xdc>
 8015fbe:	f8c8 7000 	str.w	r7, [r8]
 8015fc2:	e00f      	b.n	8015fe4 <_malloc_r+0xa8>
 8015fc4:	6822      	ldr	r2, [r4, #0]
 8015fc6:	1b52      	subs	r2, r2, r5
 8015fc8:	d420      	bmi.n	801600c <_malloc_r+0xd0>
 8015fca:	2a0b      	cmp	r2, #11
 8015fcc:	d917      	bls.n	8015ffe <_malloc_r+0xc2>
 8015fce:	1961      	adds	r1, r4, r5
 8015fd0:	42a3      	cmp	r3, r4
 8015fd2:	6025      	str	r5, [r4, #0]
 8015fd4:	bf18      	it	ne
 8015fd6:	6059      	strne	r1, [r3, #4]
 8015fd8:	6863      	ldr	r3, [r4, #4]
 8015fda:	bf08      	it	eq
 8015fdc:	f8c8 1000 	streq.w	r1, [r8]
 8015fe0:	5162      	str	r2, [r4, r5]
 8015fe2:	604b      	str	r3, [r1, #4]
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	f000 f82f 	bl	8016048 <__malloc_unlock>
 8015fea:	f104 000b 	add.w	r0, r4, #11
 8015fee:	1d23      	adds	r3, r4, #4
 8015ff0:	f020 0007 	bic.w	r0, r0, #7
 8015ff4:	1ac2      	subs	r2, r0, r3
 8015ff6:	bf1c      	itt	ne
 8015ff8:	1a1b      	subne	r3, r3, r0
 8015ffa:	50a3      	strne	r3, [r4, r2]
 8015ffc:	e7af      	b.n	8015f5e <_malloc_r+0x22>
 8015ffe:	6862      	ldr	r2, [r4, #4]
 8016000:	42a3      	cmp	r3, r4
 8016002:	bf0c      	ite	eq
 8016004:	f8c8 2000 	streq.w	r2, [r8]
 8016008:	605a      	strne	r2, [r3, #4]
 801600a:	e7eb      	b.n	8015fe4 <_malloc_r+0xa8>
 801600c:	4623      	mov	r3, r4
 801600e:	6864      	ldr	r4, [r4, #4]
 8016010:	e7ae      	b.n	8015f70 <_malloc_r+0x34>
 8016012:	463c      	mov	r4, r7
 8016014:	687f      	ldr	r7, [r7, #4]
 8016016:	e7b6      	b.n	8015f86 <_malloc_r+0x4a>
 8016018:	461a      	mov	r2, r3
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	42a3      	cmp	r3, r4
 801601e:	d1fb      	bne.n	8016018 <_malloc_r+0xdc>
 8016020:	2300      	movs	r3, #0
 8016022:	6053      	str	r3, [r2, #4]
 8016024:	e7de      	b.n	8015fe4 <_malloc_r+0xa8>
 8016026:	230c      	movs	r3, #12
 8016028:	6033      	str	r3, [r6, #0]
 801602a:	4630      	mov	r0, r6
 801602c:	f000 f80c 	bl	8016048 <__malloc_unlock>
 8016030:	e794      	b.n	8015f5c <_malloc_r+0x20>
 8016032:	6005      	str	r5, [r0, #0]
 8016034:	e7d6      	b.n	8015fe4 <_malloc_r+0xa8>
 8016036:	bf00      	nop
 8016038:	24006d3c 	.word	0x24006d3c

0801603c <__malloc_lock>:
 801603c:	4801      	ldr	r0, [pc, #4]	@ (8016044 <__malloc_lock+0x8>)
 801603e:	f001 bb2a 	b.w	8017696 <__retarget_lock_acquire_recursive>
 8016042:	bf00      	nop
 8016044:	24006e80 	.word	0x24006e80

08016048 <__malloc_unlock>:
 8016048:	4801      	ldr	r0, [pc, #4]	@ (8016050 <__malloc_unlock+0x8>)
 801604a:	f001 bb25 	b.w	8017698 <__retarget_lock_release_recursive>
 801604e:	bf00      	nop
 8016050:	24006e80 	.word	0x24006e80

08016054 <sulp>:
 8016054:	b570      	push	{r4, r5, r6, lr}
 8016056:	4604      	mov	r4, r0
 8016058:	460d      	mov	r5, r1
 801605a:	4616      	mov	r6, r2
 801605c:	ec45 4b10 	vmov	d0, r4, r5
 8016060:	f002 fa60 	bl	8018524 <__ulp>
 8016064:	b17e      	cbz	r6, 8016086 <sulp+0x32>
 8016066:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801606a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801606e:	2b00      	cmp	r3, #0
 8016070:	dd09      	ble.n	8016086 <sulp+0x32>
 8016072:	051b      	lsls	r3, r3, #20
 8016074:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016078:	2000      	movs	r0, #0
 801607a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801607e:	ec41 0b17 	vmov	d7, r0, r1
 8016082:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016086:	bd70      	pop	{r4, r5, r6, pc}

08016088 <_strtod_l>:
 8016088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801608c:	ed2d 8b0a 	vpush	{d8-d12}
 8016090:	b097      	sub	sp, #92	@ 0x5c
 8016092:	4688      	mov	r8, r1
 8016094:	920e      	str	r2, [sp, #56]	@ 0x38
 8016096:	2200      	movs	r2, #0
 8016098:	9212      	str	r2, [sp, #72]	@ 0x48
 801609a:	9005      	str	r0, [sp, #20]
 801609c:	f04f 0a00 	mov.w	sl, #0
 80160a0:	f04f 0b00 	mov.w	fp, #0
 80160a4:	460a      	mov	r2, r1
 80160a6:	9211      	str	r2, [sp, #68]	@ 0x44
 80160a8:	7811      	ldrb	r1, [r2, #0]
 80160aa:	292b      	cmp	r1, #43	@ 0x2b
 80160ac:	d04c      	beq.n	8016148 <_strtod_l+0xc0>
 80160ae:	d839      	bhi.n	8016124 <_strtod_l+0x9c>
 80160b0:	290d      	cmp	r1, #13
 80160b2:	d833      	bhi.n	801611c <_strtod_l+0x94>
 80160b4:	2908      	cmp	r1, #8
 80160b6:	d833      	bhi.n	8016120 <_strtod_l+0x98>
 80160b8:	2900      	cmp	r1, #0
 80160ba:	d03c      	beq.n	8016136 <_strtod_l+0xae>
 80160bc:	2200      	movs	r2, #0
 80160be:	9208      	str	r2, [sp, #32]
 80160c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80160c2:	782a      	ldrb	r2, [r5, #0]
 80160c4:	2a30      	cmp	r2, #48	@ 0x30
 80160c6:	f040 80b5 	bne.w	8016234 <_strtod_l+0x1ac>
 80160ca:	786a      	ldrb	r2, [r5, #1]
 80160cc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80160d0:	2a58      	cmp	r2, #88	@ 0x58
 80160d2:	d170      	bne.n	80161b6 <_strtod_l+0x12e>
 80160d4:	9302      	str	r3, [sp, #8]
 80160d6:	9b08      	ldr	r3, [sp, #32]
 80160d8:	9301      	str	r3, [sp, #4]
 80160da:	ab12      	add	r3, sp, #72	@ 0x48
 80160dc:	9300      	str	r3, [sp, #0]
 80160de:	4a8b      	ldr	r2, [pc, #556]	@ (801630c <_strtod_l+0x284>)
 80160e0:	9805      	ldr	r0, [sp, #20]
 80160e2:	ab13      	add	r3, sp, #76	@ 0x4c
 80160e4:	a911      	add	r1, sp, #68	@ 0x44
 80160e6:	f001 fbc5 	bl	8017874 <__gethex>
 80160ea:	f010 060f 	ands.w	r6, r0, #15
 80160ee:	4604      	mov	r4, r0
 80160f0:	d005      	beq.n	80160fe <_strtod_l+0x76>
 80160f2:	2e06      	cmp	r6, #6
 80160f4:	d12a      	bne.n	801614c <_strtod_l+0xc4>
 80160f6:	3501      	adds	r5, #1
 80160f8:	2300      	movs	r3, #0
 80160fa:	9511      	str	r5, [sp, #68]	@ 0x44
 80160fc:	9308      	str	r3, [sp, #32]
 80160fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016100:	2b00      	cmp	r3, #0
 8016102:	f040 852f 	bne.w	8016b64 <_strtod_l+0xadc>
 8016106:	9b08      	ldr	r3, [sp, #32]
 8016108:	ec4b ab10 	vmov	d0, sl, fp
 801610c:	b1cb      	cbz	r3, 8016142 <_strtod_l+0xba>
 801610e:	eeb1 0b40 	vneg.f64	d0, d0
 8016112:	b017      	add	sp, #92	@ 0x5c
 8016114:	ecbd 8b0a 	vpop	{d8-d12}
 8016118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611c:	2920      	cmp	r1, #32
 801611e:	d1cd      	bne.n	80160bc <_strtod_l+0x34>
 8016120:	3201      	adds	r2, #1
 8016122:	e7c0      	b.n	80160a6 <_strtod_l+0x1e>
 8016124:	292d      	cmp	r1, #45	@ 0x2d
 8016126:	d1c9      	bne.n	80160bc <_strtod_l+0x34>
 8016128:	2101      	movs	r1, #1
 801612a:	9108      	str	r1, [sp, #32]
 801612c:	1c51      	adds	r1, r2, #1
 801612e:	9111      	str	r1, [sp, #68]	@ 0x44
 8016130:	7852      	ldrb	r2, [r2, #1]
 8016132:	2a00      	cmp	r2, #0
 8016134:	d1c4      	bne.n	80160c0 <_strtod_l+0x38>
 8016136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016138:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801613c:	2b00      	cmp	r3, #0
 801613e:	f040 850f 	bne.w	8016b60 <_strtod_l+0xad8>
 8016142:	ec4b ab10 	vmov	d0, sl, fp
 8016146:	e7e4      	b.n	8016112 <_strtod_l+0x8a>
 8016148:	2100      	movs	r1, #0
 801614a:	e7ee      	b.n	801612a <_strtod_l+0xa2>
 801614c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801614e:	b13a      	cbz	r2, 8016160 <_strtod_l+0xd8>
 8016150:	2135      	movs	r1, #53	@ 0x35
 8016152:	a814      	add	r0, sp, #80	@ 0x50
 8016154:	f002 fadd 	bl	8018712 <__copybits>
 8016158:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801615a:	9805      	ldr	r0, [sp, #20]
 801615c:	f001 feae 	bl	8017ebc <_Bfree>
 8016160:	1e73      	subs	r3, r6, #1
 8016162:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016164:	2b04      	cmp	r3, #4
 8016166:	d806      	bhi.n	8016176 <_strtod_l+0xee>
 8016168:	e8df f003 	tbb	[pc, r3]
 801616c:	201d0314 	.word	0x201d0314
 8016170:	14          	.byte	0x14
 8016171:	00          	.byte	0x00
 8016172:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016176:	05e3      	lsls	r3, r4, #23
 8016178:	bf48      	it	mi
 801617a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801617e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016182:	0d1b      	lsrs	r3, r3, #20
 8016184:	051b      	lsls	r3, r3, #20
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1b9      	bne.n	80160fe <_strtod_l+0x76>
 801618a:	f001 fa59 	bl	8017640 <__errno>
 801618e:	2322      	movs	r3, #34	@ 0x22
 8016190:	6003      	str	r3, [r0, #0]
 8016192:	e7b4      	b.n	80160fe <_strtod_l+0x76>
 8016194:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016198:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801619c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80161a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80161a4:	e7e7      	b.n	8016176 <_strtod_l+0xee>
 80161a6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016314 <_strtod_l+0x28c>
 80161aa:	e7e4      	b.n	8016176 <_strtod_l+0xee>
 80161ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80161b0:	f04f 3aff 	mov.w	sl, #4294967295
 80161b4:	e7df      	b.n	8016176 <_strtod_l+0xee>
 80161b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80161b8:	1c5a      	adds	r2, r3, #1
 80161ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80161bc:	785b      	ldrb	r3, [r3, #1]
 80161be:	2b30      	cmp	r3, #48	@ 0x30
 80161c0:	d0f9      	beq.n	80161b6 <_strtod_l+0x12e>
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d09b      	beq.n	80160fe <_strtod_l+0x76>
 80161c6:	2301      	movs	r3, #1
 80161c8:	2600      	movs	r6, #0
 80161ca:	9307      	str	r3, [sp, #28]
 80161cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80161ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80161d0:	46b1      	mov	r9, r6
 80161d2:	4635      	mov	r5, r6
 80161d4:	220a      	movs	r2, #10
 80161d6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80161d8:	7804      	ldrb	r4, [r0, #0]
 80161da:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80161de:	b2d9      	uxtb	r1, r3
 80161e0:	2909      	cmp	r1, #9
 80161e2:	d929      	bls.n	8016238 <_strtod_l+0x1b0>
 80161e4:	494a      	ldr	r1, [pc, #296]	@ (8016310 <_strtod_l+0x288>)
 80161e6:	2201      	movs	r2, #1
 80161e8:	f001 f90f 	bl	801740a <strncmp>
 80161ec:	b378      	cbz	r0, 801624e <_strtod_l+0x1c6>
 80161ee:	2000      	movs	r0, #0
 80161f0:	4622      	mov	r2, r4
 80161f2:	462b      	mov	r3, r5
 80161f4:	4607      	mov	r7, r0
 80161f6:	9006      	str	r0, [sp, #24]
 80161f8:	2a65      	cmp	r2, #101	@ 0x65
 80161fa:	d001      	beq.n	8016200 <_strtod_l+0x178>
 80161fc:	2a45      	cmp	r2, #69	@ 0x45
 80161fe:	d117      	bne.n	8016230 <_strtod_l+0x1a8>
 8016200:	b91b      	cbnz	r3, 801620a <_strtod_l+0x182>
 8016202:	9b07      	ldr	r3, [sp, #28]
 8016204:	4303      	orrs	r3, r0
 8016206:	d096      	beq.n	8016136 <_strtod_l+0xae>
 8016208:	2300      	movs	r3, #0
 801620a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801620e:	f108 0201 	add.w	r2, r8, #1
 8016212:	9211      	str	r2, [sp, #68]	@ 0x44
 8016214:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016218:	2a2b      	cmp	r2, #43	@ 0x2b
 801621a:	d06b      	beq.n	80162f4 <_strtod_l+0x26c>
 801621c:	2a2d      	cmp	r2, #45	@ 0x2d
 801621e:	d071      	beq.n	8016304 <_strtod_l+0x27c>
 8016220:	f04f 0e00 	mov.w	lr, #0
 8016224:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016228:	2c09      	cmp	r4, #9
 801622a:	d979      	bls.n	8016320 <_strtod_l+0x298>
 801622c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016230:	2400      	movs	r4, #0
 8016232:	e094      	b.n	801635e <_strtod_l+0x2d6>
 8016234:	2300      	movs	r3, #0
 8016236:	e7c7      	b.n	80161c8 <_strtod_l+0x140>
 8016238:	2d08      	cmp	r5, #8
 801623a:	f100 0001 	add.w	r0, r0, #1
 801623e:	bfd4      	ite	le
 8016240:	fb02 3909 	mlale	r9, r2, r9, r3
 8016244:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016248:	3501      	adds	r5, #1
 801624a:	9011      	str	r0, [sp, #68]	@ 0x44
 801624c:	e7c3      	b.n	80161d6 <_strtod_l+0x14e>
 801624e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016250:	1c5a      	adds	r2, r3, #1
 8016252:	9211      	str	r2, [sp, #68]	@ 0x44
 8016254:	785a      	ldrb	r2, [r3, #1]
 8016256:	b375      	cbz	r5, 80162b6 <_strtod_l+0x22e>
 8016258:	4607      	mov	r7, r0
 801625a:	462b      	mov	r3, r5
 801625c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016260:	2909      	cmp	r1, #9
 8016262:	d913      	bls.n	801628c <_strtod_l+0x204>
 8016264:	2101      	movs	r1, #1
 8016266:	9106      	str	r1, [sp, #24]
 8016268:	e7c6      	b.n	80161f8 <_strtod_l+0x170>
 801626a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801626c:	1c5a      	adds	r2, r3, #1
 801626e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016270:	785a      	ldrb	r2, [r3, #1]
 8016272:	3001      	adds	r0, #1
 8016274:	2a30      	cmp	r2, #48	@ 0x30
 8016276:	d0f8      	beq.n	801626a <_strtod_l+0x1e2>
 8016278:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801627c:	2b08      	cmp	r3, #8
 801627e:	f200 8476 	bhi.w	8016b6e <_strtod_l+0xae6>
 8016282:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016284:	930a      	str	r3, [sp, #40]	@ 0x28
 8016286:	4607      	mov	r7, r0
 8016288:	2000      	movs	r0, #0
 801628a:	4603      	mov	r3, r0
 801628c:	3a30      	subs	r2, #48	@ 0x30
 801628e:	f100 0101 	add.w	r1, r0, #1
 8016292:	d023      	beq.n	80162dc <_strtod_l+0x254>
 8016294:	440f      	add	r7, r1
 8016296:	eb00 0c03 	add.w	ip, r0, r3
 801629a:	4619      	mov	r1, r3
 801629c:	240a      	movs	r4, #10
 801629e:	4561      	cmp	r1, ip
 80162a0:	d10b      	bne.n	80162ba <_strtod_l+0x232>
 80162a2:	1c5c      	adds	r4, r3, #1
 80162a4:	4403      	add	r3, r0
 80162a6:	2b08      	cmp	r3, #8
 80162a8:	4404      	add	r4, r0
 80162aa:	dc11      	bgt.n	80162d0 <_strtod_l+0x248>
 80162ac:	230a      	movs	r3, #10
 80162ae:	fb03 2909 	mla	r9, r3, r9, r2
 80162b2:	2100      	movs	r1, #0
 80162b4:	e013      	b.n	80162de <_strtod_l+0x256>
 80162b6:	4628      	mov	r0, r5
 80162b8:	e7dc      	b.n	8016274 <_strtod_l+0x1ec>
 80162ba:	2908      	cmp	r1, #8
 80162bc:	f101 0101 	add.w	r1, r1, #1
 80162c0:	dc02      	bgt.n	80162c8 <_strtod_l+0x240>
 80162c2:	fb04 f909 	mul.w	r9, r4, r9
 80162c6:	e7ea      	b.n	801629e <_strtod_l+0x216>
 80162c8:	2910      	cmp	r1, #16
 80162ca:	bfd8      	it	le
 80162cc:	4366      	mulle	r6, r4
 80162ce:	e7e6      	b.n	801629e <_strtod_l+0x216>
 80162d0:	2b0f      	cmp	r3, #15
 80162d2:	dcee      	bgt.n	80162b2 <_strtod_l+0x22a>
 80162d4:	230a      	movs	r3, #10
 80162d6:	fb03 2606 	mla	r6, r3, r6, r2
 80162da:	e7ea      	b.n	80162b2 <_strtod_l+0x22a>
 80162dc:	461c      	mov	r4, r3
 80162de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80162e0:	1c5a      	adds	r2, r3, #1
 80162e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80162e4:	785a      	ldrb	r2, [r3, #1]
 80162e6:	4608      	mov	r0, r1
 80162e8:	4623      	mov	r3, r4
 80162ea:	e7b7      	b.n	801625c <_strtod_l+0x1d4>
 80162ec:	2301      	movs	r3, #1
 80162ee:	2700      	movs	r7, #0
 80162f0:	9306      	str	r3, [sp, #24]
 80162f2:	e786      	b.n	8016202 <_strtod_l+0x17a>
 80162f4:	f04f 0e00 	mov.w	lr, #0
 80162f8:	f108 0202 	add.w	r2, r8, #2
 80162fc:	9211      	str	r2, [sp, #68]	@ 0x44
 80162fe:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016302:	e78f      	b.n	8016224 <_strtod_l+0x19c>
 8016304:	f04f 0e01 	mov.w	lr, #1
 8016308:	e7f6      	b.n	80162f8 <_strtod_l+0x270>
 801630a:	bf00      	nop
 801630c:	08019e74 	.word	0x08019e74
 8016310:	08019e50 	.word	0x08019e50
 8016314:	7ff00000 	.word	0x7ff00000
 8016318:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801631a:	1c54      	adds	r4, r2, #1
 801631c:	9411      	str	r4, [sp, #68]	@ 0x44
 801631e:	7852      	ldrb	r2, [r2, #1]
 8016320:	2a30      	cmp	r2, #48	@ 0x30
 8016322:	d0f9      	beq.n	8016318 <_strtod_l+0x290>
 8016324:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016328:	2c08      	cmp	r4, #8
 801632a:	d881      	bhi.n	8016230 <_strtod_l+0x1a8>
 801632c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016330:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016332:	9209      	str	r2, [sp, #36]	@ 0x24
 8016334:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016336:	1c51      	adds	r1, r2, #1
 8016338:	9111      	str	r1, [sp, #68]	@ 0x44
 801633a:	7852      	ldrb	r2, [r2, #1]
 801633c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016340:	2c09      	cmp	r4, #9
 8016342:	d938      	bls.n	80163b6 <_strtod_l+0x32e>
 8016344:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016346:	1b0c      	subs	r4, r1, r4
 8016348:	2c08      	cmp	r4, #8
 801634a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801634e:	dc02      	bgt.n	8016356 <_strtod_l+0x2ce>
 8016350:	4564      	cmp	r4, ip
 8016352:	bfa8      	it	ge
 8016354:	4664      	movge	r4, ip
 8016356:	f1be 0f00 	cmp.w	lr, #0
 801635a:	d000      	beq.n	801635e <_strtod_l+0x2d6>
 801635c:	4264      	negs	r4, r4
 801635e:	2b00      	cmp	r3, #0
 8016360:	d14e      	bne.n	8016400 <_strtod_l+0x378>
 8016362:	9b07      	ldr	r3, [sp, #28]
 8016364:	4318      	orrs	r0, r3
 8016366:	f47f aeca 	bne.w	80160fe <_strtod_l+0x76>
 801636a:	9b06      	ldr	r3, [sp, #24]
 801636c:	2b00      	cmp	r3, #0
 801636e:	f47f aee2 	bne.w	8016136 <_strtod_l+0xae>
 8016372:	2a69      	cmp	r2, #105	@ 0x69
 8016374:	d027      	beq.n	80163c6 <_strtod_l+0x33e>
 8016376:	dc24      	bgt.n	80163c2 <_strtod_l+0x33a>
 8016378:	2a49      	cmp	r2, #73	@ 0x49
 801637a:	d024      	beq.n	80163c6 <_strtod_l+0x33e>
 801637c:	2a4e      	cmp	r2, #78	@ 0x4e
 801637e:	f47f aeda 	bne.w	8016136 <_strtod_l+0xae>
 8016382:	4997      	ldr	r1, [pc, #604]	@ (80165e0 <_strtod_l+0x558>)
 8016384:	a811      	add	r0, sp, #68	@ 0x44
 8016386:	f001 fc97 	bl	8017cb8 <__match>
 801638a:	2800      	cmp	r0, #0
 801638c:	f43f aed3 	beq.w	8016136 <_strtod_l+0xae>
 8016390:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	2b28      	cmp	r3, #40	@ 0x28
 8016396:	d12d      	bne.n	80163f4 <_strtod_l+0x36c>
 8016398:	4992      	ldr	r1, [pc, #584]	@ (80165e4 <_strtod_l+0x55c>)
 801639a:	aa14      	add	r2, sp, #80	@ 0x50
 801639c:	a811      	add	r0, sp, #68	@ 0x44
 801639e:	f001 fc9f 	bl	8017ce0 <__hexnan>
 80163a2:	2805      	cmp	r0, #5
 80163a4:	d126      	bne.n	80163f4 <_strtod_l+0x36c>
 80163a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80163a8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80163ac:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80163b0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80163b4:	e6a3      	b.n	80160fe <_strtod_l+0x76>
 80163b6:	240a      	movs	r4, #10
 80163b8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80163bc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80163c0:	e7b8      	b.n	8016334 <_strtod_l+0x2ac>
 80163c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80163c4:	e7db      	b.n	801637e <_strtod_l+0x2f6>
 80163c6:	4988      	ldr	r1, [pc, #544]	@ (80165e8 <_strtod_l+0x560>)
 80163c8:	a811      	add	r0, sp, #68	@ 0x44
 80163ca:	f001 fc75 	bl	8017cb8 <__match>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	f43f aeb1 	beq.w	8016136 <_strtod_l+0xae>
 80163d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80163d6:	4985      	ldr	r1, [pc, #532]	@ (80165ec <_strtod_l+0x564>)
 80163d8:	3b01      	subs	r3, #1
 80163da:	a811      	add	r0, sp, #68	@ 0x44
 80163dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80163de:	f001 fc6b 	bl	8017cb8 <__match>
 80163e2:	b910      	cbnz	r0, 80163ea <_strtod_l+0x362>
 80163e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80163e6:	3301      	adds	r3, #1
 80163e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80163ea:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016600 <_strtod_l+0x578>
 80163ee:	f04f 0a00 	mov.w	sl, #0
 80163f2:	e684      	b.n	80160fe <_strtod_l+0x76>
 80163f4:	487e      	ldr	r0, [pc, #504]	@ (80165f0 <_strtod_l+0x568>)
 80163f6:	f001 f95f 	bl	80176b8 <nan>
 80163fa:	ec5b ab10 	vmov	sl, fp, d0
 80163fe:	e67e      	b.n	80160fe <_strtod_l+0x76>
 8016400:	ee07 9a90 	vmov	s15, r9
 8016404:	1be2      	subs	r2, r4, r7
 8016406:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801640a:	2d00      	cmp	r5, #0
 801640c:	bf08      	it	eq
 801640e:	461d      	moveq	r5, r3
 8016410:	2b10      	cmp	r3, #16
 8016412:	9209      	str	r2, [sp, #36]	@ 0x24
 8016414:	461a      	mov	r2, r3
 8016416:	bfa8      	it	ge
 8016418:	2210      	movge	r2, #16
 801641a:	2b09      	cmp	r3, #9
 801641c:	ec5b ab17 	vmov	sl, fp, d7
 8016420:	dc15      	bgt.n	801644e <_strtod_l+0x3c6>
 8016422:	1be1      	subs	r1, r4, r7
 8016424:	2900      	cmp	r1, #0
 8016426:	f43f ae6a 	beq.w	80160fe <_strtod_l+0x76>
 801642a:	eba4 0107 	sub.w	r1, r4, r7
 801642e:	dd72      	ble.n	8016516 <_strtod_l+0x48e>
 8016430:	2916      	cmp	r1, #22
 8016432:	dc59      	bgt.n	80164e8 <_strtod_l+0x460>
 8016434:	4b6f      	ldr	r3, [pc, #444]	@ (80165f4 <_strtod_l+0x56c>)
 8016436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801643c:	ed93 7b00 	vldr	d7, [r3]
 8016440:	ec4b ab16 	vmov	d6, sl, fp
 8016444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016448:	ec5b ab17 	vmov	sl, fp, d7
 801644c:	e657      	b.n	80160fe <_strtod_l+0x76>
 801644e:	4969      	ldr	r1, [pc, #420]	@ (80165f4 <_strtod_l+0x56c>)
 8016450:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016454:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016458:	ee06 6a90 	vmov	s13, r6
 801645c:	2b0f      	cmp	r3, #15
 801645e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016462:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016466:	ec5b ab16 	vmov	sl, fp, d6
 801646a:	ddda      	ble.n	8016422 <_strtod_l+0x39a>
 801646c:	1a9a      	subs	r2, r3, r2
 801646e:	1be1      	subs	r1, r4, r7
 8016470:	440a      	add	r2, r1
 8016472:	2a00      	cmp	r2, #0
 8016474:	f340 8094 	ble.w	80165a0 <_strtod_l+0x518>
 8016478:	f012 000f 	ands.w	r0, r2, #15
 801647c:	d00a      	beq.n	8016494 <_strtod_l+0x40c>
 801647e:	495d      	ldr	r1, [pc, #372]	@ (80165f4 <_strtod_l+0x56c>)
 8016480:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016484:	ed91 7b00 	vldr	d7, [r1]
 8016488:	ec4b ab16 	vmov	d6, sl, fp
 801648c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016490:	ec5b ab17 	vmov	sl, fp, d7
 8016494:	f032 020f 	bics.w	r2, r2, #15
 8016498:	d073      	beq.n	8016582 <_strtod_l+0x4fa>
 801649a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801649e:	dd47      	ble.n	8016530 <_strtod_l+0x4a8>
 80164a0:	2400      	movs	r4, #0
 80164a2:	4625      	mov	r5, r4
 80164a4:	9407      	str	r4, [sp, #28]
 80164a6:	4626      	mov	r6, r4
 80164a8:	9a05      	ldr	r2, [sp, #20]
 80164aa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016600 <_strtod_l+0x578>
 80164ae:	2322      	movs	r3, #34	@ 0x22
 80164b0:	6013      	str	r3, [r2, #0]
 80164b2:	f04f 0a00 	mov.w	sl, #0
 80164b6:	9b07      	ldr	r3, [sp, #28]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	f43f ae20 	beq.w	80160fe <_strtod_l+0x76>
 80164be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80164c0:	9805      	ldr	r0, [sp, #20]
 80164c2:	f001 fcfb 	bl	8017ebc <_Bfree>
 80164c6:	9805      	ldr	r0, [sp, #20]
 80164c8:	4631      	mov	r1, r6
 80164ca:	f001 fcf7 	bl	8017ebc <_Bfree>
 80164ce:	9805      	ldr	r0, [sp, #20]
 80164d0:	4629      	mov	r1, r5
 80164d2:	f001 fcf3 	bl	8017ebc <_Bfree>
 80164d6:	9907      	ldr	r1, [sp, #28]
 80164d8:	9805      	ldr	r0, [sp, #20]
 80164da:	f001 fcef 	bl	8017ebc <_Bfree>
 80164de:	9805      	ldr	r0, [sp, #20]
 80164e0:	4621      	mov	r1, r4
 80164e2:	f001 fceb 	bl	8017ebc <_Bfree>
 80164e6:	e60a      	b.n	80160fe <_strtod_l+0x76>
 80164e8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80164ec:	1be0      	subs	r0, r4, r7
 80164ee:	4281      	cmp	r1, r0
 80164f0:	dbbc      	blt.n	801646c <_strtod_l+0x3e4>
 80164f2:	4a40      	ldr	r2, [pc, #256]	@ (80165f4 <_strtod_l+0x56c>)
 80164f4:	f1c3 030f 	rsb	r3, r3, #15
 80164f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80164fc:	ed91 7b00 	vldr	d7, [r1]
 8016500:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016502:	ec4b ab16 	vmov	d6, sl, fp
 8016506:	1acb      	subs	r3, r1, r3
 8016508:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801650c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016510:	ed92 6b00 	vldr	d6, [r2]
 8016514:	e796      	b.n	8016444 <_strtod_l+0x3bc>
 8016516:	3116      	adds	r1, #22
 8016518:	dba8      	blt.n	801646c <_strtod_l+0x3e4>
 801651a:	4b36      	ldr	r3, [pc, #216]	@ (80165f4 <_strtod_l+0x56c>)
 801651c:	1b3c      	subs	r4, r7, r4
 801651e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016522:	ed94 7b00 	vldr	d7, [r4]
 8016526:	ec4b ab16 	vmov	d6, sl, fp
 801652a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801652e:	e78b      	b.n	8016448 <_strtod_l+0x3c0>
 8016530:	2000      	movs	r0, #0
 8016532:	ec4b ab17 	vmov	d7, sl, fp
 8016536:	4e30      	ldr	r6, [pc, #192]	@ (80165f8 <_strtod_l+0x570>)
 8016538:	1112      	asrs	r2, r2, #4
 801653a:	4601      	mov	r1, r0
 801653c:	2a01      	cmp	r2, #1
 801653e:	dc23      	bgt.n	8016588 <_strtod_l+0x500>
 8016540:	b108      	cbz	r0, 8016546 <_strtod_l+0x4be>
 8016542:	ec5b ab17 	vmov	sl, fp, d7
 8016546:	4a2c      	ldr	r2, [pc, #176]	@ (80165f8 <_strtod_l+0x570>)
 8016548:	482c      	ldr	r0, [pc, #176]	@ (80165fc <_strtod_l+0x574>)
 801654a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801654e:	ed92 7b00 	vldr	d7, [r2]
 8016552:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016556:	ec4b ab16 	vmov	d6, sl, fp
 801655a:	4a29      	ldr	r2, [pc, #164]	@ (8016600 <_strtod_l+0x578>)
 801655c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016560:	ee17 1a90 	vmov	r1, s15
 8016564:	400a      	ands	r2, r1
 8016566:	4282      	cmp	r2, r0
 8016568:	ec5b ab17 	vmov	sl, fp, d7
 801656c:	d898      	bhi.n	80164a0 <_strtod_l+0x418>
 801656e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8016572:	4282      	cmp	r2, r0
 8016574:	bf86      	itte	hi
 8016576:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016604 <_strtod_l+0x57c>
 801657a:	f04f 3aff 	movhi.w	sl, #4294967295
 801657e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8016582:	2200      	movs	r2, #0
 8016584:	9206      	str	r2, [sp, #24]
 8016586:	e076      	b.n	8016676 <_strtod_l+0x5ee>
 8016588:	f012 0f01 	tst.w	r2, #1
 801658c:	d004      	beq.n	8016598 <_strtod_l+0x510>
 801658e:	ed96 6b00 	vldr	d6, [r6]
 8016592:	2001      	movs	r0, #1
 8016594:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016598:	3101      	adds	r1, #1
 801659a:	1052      	asrs	r2, r2, #1
 801659c:	3608      	adds	r6, #8
 801659e:	e7cd      	b.n	801653c <_strtod_l+0x4b4>
 80165a0:	d0ef      	beq.n	8016582 <_strtod_l+0x4fa>
 80165a2:	4252      	negs	r2, r2
 80165a4:	f012 000f 	ands.w	r0, r2, #15
 80165a8:	d00a      	beq.n	80165c0 <_strtod_l+0x538>
 80165aa:	4912      	ldr	r1, [pc, #72]	@ (80165f4 <_strtod_l+0x56c>)
 80165ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80165b0:	ed91 7b00 	vldr	d7, [r1]
 80165b4:	ec4b ab16 	vmov	d6, sl, fp
 80165b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80165bc:	ec5b ab17 	vmov	sl, fp, d7
 80165c0:	1112      	asrs	r2, r2, #4
 80165c2:	d0de      	beq.n	8016582 <_strtod_l+0x4fa>
 80165c4:	2a1f      	cmp	r2, #31
 80165c6:	dd1f      	ble.n	8016608 <_strtod_l+0x580>
 80165c8:	2400      	movs	r4, #0
 80165ca:	4625      	mov	r5, r4
 80165cc:	9407      	str	r4, [sp, #28]
 80165ce:	4626      	mov	r6, r4
 80165d0:	9a05      	ldr	r2, [sp, #20]
 80165d2:	2322      	movs	r3, #34	@ 0x22
 80165d4:	f04f 0a00 	mov.w	sl, #0
 80165d8:	f04f 0b00 	mov.w	fp, #0
 80165dc:	6013      	str	r3, [r2, #0]
 80165de:	e76a      	b.n	80164b6 <_strtod_l+0x42e>
 80165e0:	08019e5b 	.word	0x08019e5b
 80165e4:	08019e60 	.word	0x08019e60
 80165e8:	08019e52 	.word	0x08019e52
 80165ec:	08019e55 	.word	0x08019e55
 80165f0:	0801a06a 	.word	0x0801a06a
 80165f4:	0801a170 	.word	0x0801a170
 80165f8:	0801a148 	.word	0x0801a148
 80165fc:	7ca00000 	.word	0x7ca00000
 8016600:	7ff00000 	.word	0x7ff00000
 8016604:	7fefffff 	.word	0x7fefffff
 8016608:	f012 0110 	ands.w	r1, r2, #16
 801660c:	bf18      	it	ne
 801660e:	216a      	movne	r1, #106	@ 0x6a
 8016610:	9106      	str	r1, [sp, #24]
 8016612:	ec4b ab17 	vmov	d7, sl, fp
 8016616:	49b0      	ldr	r1, [pc, #704]	@ (80168d8 <_strtod_l+0x850>)
 8016618:	2000      	movs	r0, #0
 801661a:	07d6      	lsls	r6, r2, #31
 801661c:	d504      	bpl.n	8016628 <_strtod_l+0x5a0>
 801661e:	ed91 6b00 	vldr	d6, [r1]
 8016622:	2001      	movs	r0, #1
 8016624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016628:	1052      	asrs	r2, r2, #1
 801662a:	f101 0108 	add.w	r1, r1, #8
 801662e:	d1f4      	bne.n	801661a <_strtod_l+0x592>
 8016630:	b108      	cbz	r0, 8016636 <_strtod_l+0x5ae>
 8016632:	ec5b ab17 	vmov	sl, fp, d7
 8016636:	9a06      	ldr	r2, [sp, #24]
 8016638:	b1b2      	cbz	r2, 8016668 <_strtod_l+0x5e0>
 801663a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801663e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016642:	2a00      	cmp	r2, #0
 8016644:	4658      	mov	r0, fp
 8016646:	dd0f      	ble.n	8016668 <_strtod_l+0x5e0>
 8016648:	2a1f      	cmp	r2, #31
 801664a:	dd55      	ble.n	80166f8 <_strtod_l+0x670>
 801664c:	2a34      	cmp	r2, #52	@ 0x34
 801664e:	bfde      	ittt	le
 8016650:	f04f 32ff 	movle.w	r2, #4294967295
 8016654:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016658:	408a      	lslle	r2, r1
 801665a:	f04f 0a00 	mov.w	sl, #0
 801665e:	bfcc      	ite	gt
 8016660:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016664:	ea02 0b00 	andle.w	fp, r2, r0
 8016668:	ec4b ab17 	vmov	d7, sl, fp
 801666c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016674:	d0a8      	beq.n	80165c8 <_strtod_l+0x540>
 8016676:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016678:	9805      	ldr	r0, [sp, #20]
 801667a:	f8cd 9000 	str.w	r9, [sp]
 801667e:	462a      	mov	r2, r5
 8016680:	f001 fc84 	bl	8017f8c <__s2b>
 8016684:	9007      	str	r0, [sp, #28]
 8016686:	2800      	cmp	r0, #0
 8016688:	f43f af0a 	beq.w	80164a0 <_strtod_l+0x418>
 801668c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801668e:	1b3f      	subs	r7, r7, r4
 8016690:	2b00      	cmp	r3, #0
 8016692:	bfb4      	ite	lt
 8016694:	463b      	movlt	r3, r7
 8016696:	2300      	movge	r3, #0
 8016698:	930a      	str	r3, [sp, #40]	@ 0x28
 801669a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801669c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80168c8 <_strtod_l+0x840>
 80166a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166a4:	2400      	movs	r4, #0
 80166a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80166a8:	4625      	mov	r5, r4
 80166aa:	9b07      	ldr	r3, [sp, #28]
 80166ac:	9805      	ldr	r0, [sp, #20]
 80166ae:	6859      	ldr	r1, [r3, #4]
 80166b0:	f001 fbc4 	bl	8017e3c <_Balloc>
 80166b4:	4606      	mov	r6, r0
 80166b6:	2800      	cmp	r0, #0
 80166b8:	f43f aef6 	beq.w	80164a8 <_strtod_l+0x420>
 80166bc:	9b07      	ldr	r3, [sp, #28]
 80166be:	691a      	ldr	r2, [r3, #16]
 80166c0:	ec4b ab19 	vmov	d9, sl, fp
 80166c4:	3202      	adds	r2, #2
 80166c6:	f103 010c 	add.w	r1, r3, #12
 80166ca:	0092      	lsls	r2, r2, #2
 80166cc:	300c      	adds	r0, #12
 80166ce:	f000 ffe4 	bl	801769a <memcpy>
 80166d2:	eeb0 0b49 	vmov.f64	d0, d9
 80166d6:	9805      	ldr	r0, [sp, #20]
 80166d8:	aa14      	add	r2, sp, #80	@ 0x50
 80166da:	a913      	add	r1, sp, #76	@ 0x4c
 80166dc:	f001 ff92 	bl	8018604 <__d2b>
 80166e0:	9012      	str	r0, [sp, #72]	@ 0x48
 80166e2:	2800      	cmp	r0, #0
 80166e4:	f43f aee0 	beq.w	80164a8 <_strtod_l+0x420>
 80166e8:	9805      	ldr	r0, [sp, #20]
 80166ea:	2101      	movs	r1, #1
 80166ec:	f001 fce4 	bl	80180b8 <__i2b>
 80166f0:	4605      	mov	r5, r0
 80166f2:	b940      	cbnz	r0, 8016706 <_strtod_l+0x67e>
 80166f4:	2500      	movs	r5, #0
 80166f6:	e6d7      	b.n	80164a8 <_strtod_l+0x420>
 80166f8:	f04f 31ff 	mov.w	r1, #4294967295
 80166fc:	fa01 f202 	lsl.w	r2, r1, r2
 8016700:	ea02 0a0a 	and.w	sl, r2, sl
 8016704:	e7b0      	b.n	8016668 <_strtod_l+0x5e0>
 8016706:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016708:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801670a:	2f00      	cmp	r7, #0
 801670c:	bfab      	itete	ge
 801670e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016710:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8016712:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8016716:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801671a:	bfac      	ite	ge
 801671c:	eb07 0903 	addge.w	r9, r7, r3
 8016720:	eba3 0807 	sublt.w	r8, r3, r7
 8016724:	9b06      	ldr	r3, [sp, #24]
 8016726:	1aff      	subs	r7, r7, r3
 8016728:	4417      	add	r7, r2
 801672a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801672e:	4a6b      	ldr	r2, [pc, #428]	@ (80168dc <_strtod_l+0x854>)
 8016730:	3f01      	subs	r7, #1
 8016732:	4297      	cmp	r7, r2
 8016734:	da51      	bge.n	80167da <_strtod_l+0x752>
 8016736:	1bd1      	subs	r1, r2, r7
 8016738:	291f      	cmp	r1, #31
 801673a:	eba3 0301 	sub.w	r3, r3, r1
 801673e:	f04f 0201 	mov.w	r2, #1
 8016742:	dc3e      	bgt.n	80167c2 <_strtod_l+0x73a>
 8016744:	408a      	lsls	r2, r1
 8016746:	920c      	str	r2, [sp, #48]	@ 0x30
 8016748:	2200      	movs	r2, #0
 801674a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801674c:	eb09 0703 	add.w	r7, r9, r3
 8016750:	4498      	add	r8, r3
 8016752:	9b06      	ldr	r3, [sp, #24]
 8016754:	45b9      	cmp	r9, r7
 8016756:	4498      	add	r8, r3
 8016758:	464b      	mov	r3, r9
 801675a:	bfa8      	it	ge
 801675c:	463b      	movge	r3, r7
 801675e:	4543      	cmp	r3, r8
 8016760:	bfa8      	it	ge
 8016762:	4643      	movge	r3, r8
 8016764:	2b00      	cmp	r3, #0
 8016766:	bfc2      	ittt	gt
 8016768:	1aff      	subgt	r7, r7, r3
 801676a:	eba8 0803 	subgt.w	r8, r8, r3
 801676e:	eba9 0903 	subgt.w	r9, r9, r3
 8016772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016774:	2b00      	cmp	r3, #0
 8016776:	dd16      	ble.n	80167a6 <_strtod_l+0x71e>
 8016778:	4629      	mov	r1, r5
 801677a:	9805      	ldr	r0, [sp, #20]
 801677c:	461a      	mov	r2, r3
 801677e:	f001 fd5b 	bl	8018238 <__pow5mult>
 8016782:	4605      	mov	r5, r0
 8016784:	2800      	cmp	r0, #0
 8016786:	d0b5      	beq.n	80166f4 <_strtod_l+0x66c>
 8016788:	4601      	mov	r1, r0
 801678a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801678c:	9805      	ldr	r0, [sp, #20]
 801678e:	f001 fca9 	bl	80180e4 <__multiply>
 8016792:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016794:	2800      	cmp	r0, #0
 8016796:	f43f ae87 	beq.w	80164a8 <_strtod_l+0x420>
 801679a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801679c:	9805      	ldr	r0, [sp, #20]
 801679e:	f001 fb8d 	bl	8017ebc <_Bfree>
 80167a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80167a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80167a6:	2f00      	cmp	r7, #0
 80167a8:	dc1b      	bgt.n	80167e2 <_strtod_l+0x75a>
 80167aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	dd21      	ble.n	80167f4 <_strtod_l+0x76c>
 80167b0:	4631      	mov	r1, r6
 80167b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80167b4:	9805      	ldr	r0, [sp, #20]
 80167b6:	f001 fd3f 	bl	8018238 <__pow5mult>
 80167ba:	4606      	mov	r6, r0
 80167bc:	b9d0      	cbnz	r0, 80167f4 <_strtod_l+0x76c>
 80167be:	2600      	movs	r6, #0
 80167c0:	e672      	b.n	80164a8 <_strtod_l+0x420>
 80167c2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80167c6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80167ca:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80167ce:	37e2      	adds	r7, #226	@ 0xe2
 80167d0:	fa02 f107 	lsl.w	r1, r2, r7
 80167d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80167d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80167d8:	e7b8      	b.n	801674c <_strtod_l+0x6c4>
 80167da:	2200      	movs	r2, #0
 80167dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80167de:	2201      	movs	r2, #1
 80167e0:	e7f9      	b.n	80167d6 <_strtod_l+0x74e>
 80167e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80167e4:	9805      	ldr	r0, [sp, #20]
 80167e6:	463a      	mov	r2, r7
 80167e8:	f001 fd80 	bl	80182ec <__lshift>
 80167ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d1db      	bne.n	80167aa <_strtod_l+0x722>
 80167f2:	e659      	b.n	80164a8 <_strtod_l+0x420>
 80167f4:	f1b8 0f00 	cmp.w	r8, #0
 80167f8:	dd07      	ble.n	801680a <_strtod_l+0x782>
 80167fa:	4631      	mov	r1, r6
 80167fc:	9805      	ldr	r0, [sp, #20]
 80167fe:	4642      	mov	r2, r8
 8016800:	f001 fd74 	bl	80182ec <__lshift>
 8016804:	4606      	mov	r6, r0
 8016806:	2800      	cmp	r0, #0
 8016808:	d0d9      	beq.n	80167be <_strtod_l+0x736>
 801680a:	f1b9 0f00 	cmp.w	r9, #0
 801680e:	dd08      	ble.n	8016822 <_strtod_l+0x79a>
 8016810:	4629      	mov	r1, r5
 8016812:	9805      	ldr	r0, [sp, #20]
 8016814:	464a      	mov	r2, r9
 8016816:	f001 fd69 	bl	80182ec <__lshift>
 801681a:	4605      	mov	r5, r0
 801681c:	2800      	cmp	r0, #0
 801681e:	f43f ae43 	beq.w	80164a8 <_strtod_l+0x420>
 8016822:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016824:	9805      	ldr	r0, [sp, #20]
 8016826:	4632      	mov	r2, r6
 8016828:	f001 fde8 	bl	80183fc <__mdiff>
 801682c:	4604      	mov	r4, r0
 801682e:	2800      	cmp	r0, #0
 8016830:	f43f ae3a 	beq.w	80164a8 <_strtod_l+0x420>
 8016834:	2300      	movs	r3, #0
 8016836:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801683a:	60c3      	str	r3, [r0, #12]
 801683c:	4629      	mov	r1, r5
 801683e:	f001 fdc1 	bl	80183c4 <__mcmp>
 8016842:	2800      	cmp	r0, #0
 8016844:	da4e      	bge.n	80168e4 <_strtod_l+0x85c>
 8016846:	ea58 080a 	orrs.w	r8, r8, sl
 801684a:	d174      	bne.n	8016936 <_strtod_l+0x8ae>
 801684c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016850:	2b00      	cmp	r3, #0
 8016852:	d170      	bne.n	8016936 <_strtod_l+0x8ae>
 8016854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016858:	0d1b      	lsrs	r3, r3, #20
 801685a:	051b      	lsls	r3, r3, #20
 801685c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016860:	d969      	bls.n	8016936 <_strtod_l+0x8ae>
 8016862:	6963      	ldr	r3, [r4, #20]
 8016864:	b913      	cbnz	r3, 801686c <_strtod_l+0x7e4>
 8016866:	6923      	ldr	r3, [r4, #16]
 8016868:	2b01      	cmp	r3, #1
 801686a:	dd64      	ble.n	8016936 <_strtod_l+0x8ae>
 801686c:	4621      	mov	r1, r4
 801686e:	2201      	movs	r2, #1
 8016870:	9805      	ldr	r0, [sp, #20]
 8016872:	f001 fd3b 	bl	80182ec <__lshift>
 8016876:	4629      	mov	r1, r5
 8016878:	4604      	mov	r4, r0
 801687a:	f001 fda3 	bl	80183c4 <__mcmp>
 801687e:	2800      	cmp	r0, #0
 8016880:	dd59      	ble.n	8016936 <_strtod_l+0x8ae>
 8016882:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016886:	9a06      	ldr	r2, [sp, #24]
 8016888:	0d1b      	lsrs	r3, r3, #20
 801688a:	051b      	lsls	r3, r3, #20
 801688c:	2a00      	cmp	r2, #0
 801688e:	d070      	beq.n	8016972 <_strtod_l+0x8ea>
 8016890:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016894:	d86d      	bhi.n	8016972 <_strtod_l+0x8ea>
 8016896:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801689a:	f67f ae99 	bls.w	80165d0 <_strtod_l+0x548>
 801689e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80168d0 <_strtod_l+0x848>
 80168a2:	ec4b ab16 	vmov	d6, sl, fp
 80168a6:	4b0e      	ldr	r3, [pc, #56]	@ (80168e0 <_strtod_l+0x858>)
 80168a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80168ac:	ee17 2a90 	vmov	r2, s15
 80168b0:	4013      	ands	r3, r2
 80168b2:	ec5b ab17 	vmov	sl, fp, d7
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	f47f ae01 	bne.w	80164be <_strtod_l+0x436>
 80168bc:	9a05      	ldr	r2, [sp, #20]
 80168be:	2322      	movs	r3, #34	@ 0x22
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	e5fc      	b.n	80164be <_strtod_l+0x436>
 80168c4:	f3af 8000 	nop.w
 80168c8:	ffc00000 	.word	0xffc00000
 80168cc:	41dfffff 	.word	0x41dfffff
 80168d0:	00000000 	.word	0x00000000
 80168d4:	39500000 	.word	0x39500000
 80168d8:	08019e88 	.word	0x08019e88
 80168dc:	fffffc02 	.word	0xfffffc02
 80168e0:	7ff00000 	.word	0x7ff00000
 80168e4:	46d9      	mov	r9, fp
 80168e6:	d15d      	bne.n	80169a4 <_strtod_l+0x91c>
 80168e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168ec:	f1b8 0f00 	cmp.w	r8, #0
 80168f0:	d02a      	beq.n	8016948 <_strtod_l+0x8c0>
 80168f2:	4aab      	ldr	r2, [pc, #684]	@ (8016ba0 <_strtod_l+0xb18>)
 80168f4:	4293      	cmp	r3, r2
 80168f6:	d12a      	bne.n	801694e <_strtod_l+0x8c6>
 80168f8:	9b06      	ldr	r3, [sp, #24]
 80168fa:	4652      	mov	r2, sl
 80168fc:	b1fb      	cbz	r3, 801693e <_strtod_l+0x8b6>
 80168fe:	4ba9      	ldr	r3, [pc, #676]	@ (8016ba4 <_strtod_l+0xb1c>)
 8016900:	ea0b 0303 	and.w	r3, fp, r3
 8016904:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016908:	f04f 31ff 	mov.w	r1, #4294967295
 801690c:	d81a      	bhi.n	8016944 <_strtod_l+0x8bc>
 801690e:	0d1b      	lsrs	r3, r3, #20
 8016910:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016914:	fa01 f303 	lsl.w	r3, r1, r3
 8016918:	429a      	cmp	r2, r3
 801691a:	d118      	bne.n	801694e <_strtod_l+0x8c6>
 801691c:	4ba2      	ldr	r3, [pc, #648]	@ (8016ba8 <_strtod_l+0xb20>)
 801691e:	4599      	cmp	r9, r3
 8016920:	d102      	bne.n	8016928 <_strtod_l+0x8a0>
 8016922:	3201      	adds	r2, #1
 8016924:	f43f adc0 	beq.w	80164a8 <_strtod_l+0x420>
 8016928:	4b9e      	ldr	r3, [pc, #632]	@ (8016ba4 <_strtod_l+0xb1c>)
 801692a:	ea09 0303 	and.w	r3, r9, r3
 801692e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016932:	f04f 0a00 	mov.w	sl, #0
 8016936:	9b06      	ldr	r3, [sp, #24]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d1b0      	bne.n	801689e <_strtod_l+0x816>
 801693c:	e5bf      	b.n	80164be <_strtod_l+0x436>
 801693e:	f04f 33ff 	mov.w	r3, #4294967295
 8016942:	e7e9      	b.n	8016918 <_strtod_l+0x890>
 8016944:	460b      	mov	r3, r1
 8016946:	e7e7      	b.n	8016918 <_strtod_l+0x890>
 8016948:	ea53 030a 	orrs.w	r3, r3, sl
 801694c:	d099      	beq.n	8016882 <_strtod_l+0x7fa>
 801694e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016950:	b1c3      	cbz	r3, 8016984 <_strtod_l+0x8fc>
 8016952:	ea13 0f09 	tst.w	r3, r9
 8016956:	d0ee      	beq.n	8016936 <_strtod_l+0x8ae>
 8016958:	9a06      	ldr	r2, [sp, #24]
 801695a:	4650      	mov	r0, sl
 801695c:	4659      	mov	r1, fp
 801695e:	f1b8 0f00 	cmp.w	r8, #0
 8016962:	d013      	beq.n	801698c <_strtod_l+0x904>
 8016964:	f7ff fb76 	bl	8016054 <sulp>
 8016968:	ee39 7b00 	vadd.f64	d7, d9, d0
 801696c:	ec5b ab17 	vmov	sl, fp, d7
 8016970:	e7e1      	b.n	8016936 <_strtod_l+0x8ae>
 8016972:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016976:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801697a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801697e:	f04f 3aff 	mov.w	sl, #4294967295
 8016982:	e7d8      	b.n	8016936 <_strtod_l+0x8ae>
 8016984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016986:	ea13 0f0a 	tst.w	r3, sl
 801698a:	e7e4      	b.n	8016956 <_strtod_l+0x8ce>
 801698c:	f7ff fb62 	bl	8016054 <sulp>
 8016990:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016994:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801699c:	ec5b ab10 	vmov	sl, fp, d0
 80169a0:	d1c9      	bne.n	8016936 <_strtod_l+0x8ae>
 80169a2:	e615      	b.n	80165d0 <_strtod_l+0x548>
 80169a4:	4629      	mov	r1, r5
 80169a6:	4620      	mov	r0, r4
 80169a8:	f001 fe84 	bl	80186b4 <__ratio>
 80169ac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80169b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80169b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b8:	d85d      	bhi.n	8016a76 <_strtod_l+0x9ee>
 80169ba:	f1b8 0f00 	cmp.w	r8, #0
 80169be:	d164      	bne.n	8016a8a <_strtod_l+0xa02>
 80169c0:	f1ba 0f00 	cmp.w	sl, #0
 80169c4:	d14b      	bne.n	8016a5e <_strtod_l+0x9d6>
 80169c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169ca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d160      	bne.n	8016a94 <_strtod_l+0xa0c>
 80169d2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80169d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80169da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169de:	d401      	bmi.n	80169e4 <_strtod_l+0x95c>
 80169e0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80169e4:	eeb1 ab48 	vneg.f64	d10, d8
 80169e8:	486e      	ldr	r0, [pc, #440]	@ (8016ba4 <_strtod_l+0xb1c>)
 80169ea:	4970      	ldr	r1, [pc, #448]	@ (8016bac <_strtod_l+0xb24>)
 80169ec:	ea09 0700 	and.w	r7, r9, r0
 80169f0:	428f      	cmp	r7, r1
 80169f2:	ec53 2b1a 	vmov	r2, r3, d10
 80169f6:	d17d      	bne.n	8016af4 <_strtod_l+0xa6c>
 80169f8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80169fc:	ec4b ab1c 	vmov	d12, sl, fp
 8016a00:	eeb0 0b4c 	vmov.f64	d0, d12
 8016a04:	f001 fd8e 	bl	8018524 <__ulp>
 8016a08:	4866      	ldr	r0, [pc, #408]	@ (8016ba4 <_strtod_l+0xb1c>)
 8016a0a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016a0e:	ee1c 3a90 	vmov	r3, s25
 8016a12:	4a67      	ldr	r2, [pc, #412]	@ (8016bb0 <_strtod_l+0xb28>)
 8016a14:	ea03 0100 	and.w	r1, r3, r0
 8016a18:	4291      	cmp	r1, r2
 8016a1a:	ec5b ab1c 	vmov	sl, fp, d12
 8016a1e:	d93c      	bls.n	8016a9a <_strtod_l+0xa12>
 8016a20:	ee19 2a90 	vmov	r2, s19
 8016a24:	4b60      	ldr	r3, [pc, #384]	@ (8016ba8 <_strtod_l+0xb20>)
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d104      	bne.n	8016a34 <_strtod_l+0x9ac>
 8016a2a:	ee19 3a10 	vmov	r3, s18
 8016a2e:	3301      	adds	r3, #1
 8016a30:	f43f ad3a 	beq.w	80164a8 <_strtod_l+0x420>
 8016a34:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016ba8 <_strtod_l+0xb20>
 8016a38:	f04f 3aff 	mov.w	sl, #4294967295
 8016a3c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016a3e:	9805      	ldr	r0, [sp, #20]
 8016a40:	f001 fa3c 	bl	8017ebc <_Bfree>
 8016a44:	9805      	ldr	r0, [sp, #20]
 8016a46:	4631      	mov	r1, r6
 8016a48:	f001 fa38 	bl	8017ebc <_Bfree>
 8016a4c:	9805      	ldr	r0, [sp, #20]
 8016a4e:	4629      	mov	r1, r5
 8016a50:	f001 fa34 	bl	8017ebc <_Bfree>
 8016a54:	9805      	ldr	r0, [sp, #20]
 8016a56:	4621      	mov	r1, r4
 8016a58:	f001 fa30 	bl	8017ebc <_Bfree>
 8016a5c:	e625      	b.n	80166aa <_strtod_l+0x622>
 8016a5e:	f1ba 0f01 	cmp.w	sl, #1
 8016a62:	d103      	bne.n	8016a6c <_strtod_l+0x9e4>
 8016a64:	f1bb 0f00 	cmp.w	fp, #0
 8016a68:	f43f adb2 	beq.w	80165d0 <_strtod_l+0x548>
 8016a6c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016a70:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016a74:	e7b8      	b.n	80169e8 <_strtod_l+0x960>
 8016a76:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016a7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016a7e:	f1b8 0f00 	cmp.w	r8, #0
 8016a82:	d0af      	beq.n	80169e4 <_strtod_l+0x95c>
 8016a84:	eeb0 ab48 	vmov.f64	d10, d8
 8016a88:	e7ae      	b.n	80169e8 <_strtod_l+0x960>
 8016a8a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016a8e:	eeb0 8b4a 	vmov.f64	d8, d10
 8016a92:	e7a9      	b.n	80169e8 <_strtod_l+0x960>
 8016a94:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016a98:	e7a6      	b.n	80169e8 <_strtod_l+0x960>
 8016a9a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016a9e:	9b06      	ldr	r3, [sp, #24]
 8016aa0:	46d9      	mov	r9, fp
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d1ca      	bne.n	8016a3c <_strtod_l+0x9b4>
 8016aa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016aaa:	0d1b      	lsrs	r3, r3, #20
 8016aac:	051b      	lsls	r3, r3, #20
 8016aae:	429f      	cmp	r7, r3
 8016ab0:	d1c4      	bne.n	8016a3c <_strtod_l+0x9b4>
 8016ab2:	ec51 0b18 	vmov	r0, r1, d8
 8016ab6:	f7e9 fe3f 	bl	8000738 <__aeabi_d2lz>
 8016aba:	f7e9 fdf7 	bl	80006ac <__aeabi_l2d>
 8016abe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016ac2:	ec41 0b17 	vmov	d7, r0, r1
 8016ac6:	ea49 090a 	orr.w	r9, r9, sl
 8016aca:	ea59 0908 	orrs.w	r9, r9, r8
 8016ace:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016ad2:	d03c      	beq.n	8016b4e <_strtod_l+0xac6>
 8016ad4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016b88 <_strtod_l+0xb00>
 8016ad8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae0:	f53f aced 	bmi.w	80164be <_strtod_l+0x436>
 8016ae4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016b90 <_strtod_l+0xb08>
 8016ae8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af0:	dda4      	ble.n	8016a3c <_strtod_l+0x9b4>
 8016af2:	e4e4      	b.n	80164be <_strtod_l+0x436>
 8016af4:	9906      	ldr	r1, [sp, #24]
 8016af6:	b1e1      	cbz	r1, 8016b32 <_strtod_l+0xaaa>
 8016af8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016afc:	d819      	bhi.n	8016b32 <_strtod_l+0xaaa>
 8016afe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b06:	d811      	bhi.n	8016b2c <_strtod_l+0xaa4>
 8016b08:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016b0c:	ee18 3a10 	vmov	r3, s16
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	bf38      	it	cc
 8016b14:	2301      	movcc	r3, #1
 8016b16:	ee08 3a10 	vmov	s16, r3
 8016b1a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016b1e:	f1b8 0f00 	cmp.w	r8, #0
 8016b22:	d111      	bne.n	8016b48 <_strtod_l+0xac0>
 8016b24:	eeb1 7b48 	vneg.f64	d7, d8
 8016b28:	ec53 2b17 	vmov	r2, r3, d7
 8016b2c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016b30:	1bcb      	subs	r3, r1, r7
 8016b32:	eeb0 0b49 	vmov.f64	d0, d9
 8016b36:	ec43 2b1a 	vmov	d10, r2, r3
 8016b3a:	f001 fcf3 	bl	8018524 <__ulp>
 8016b3e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016b42:	ec5b ab19 	vmov	sl, fp, d9
 8016b46:	e7aa      	b.n	8016a9e <_strtod_l+0xa16>
 8016b48:	eeb0 7b48 	vmov.f64	d7, d8
 8016b4c:	e7ec      	b.n	8016b28 <_strtod_l+0xaa0>
 8016b4e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016b98 <_strtod_l+0xb10>
 8016b52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5a:	f57f af6f 	bpl.w	8016a3c <_strtod_l+0x9b4>
 8016b5e:	e4ae      	b.n	80164be <_strtod_l+0x436>
 8016b60:	2300      	movs	r3, #0
 8016b62:	9308      	str	r3, [sp, #32]
 8016b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b68:	6013      	str	r3, [r2, #0]
 8016b6a:	f7ff bacc 	b.w	8016106 <_strtod_l+0x7e>
 8016b6e:	2a65      	cmp	r2, #101	@ 0x65
 8016b70:	f43f abbc 	beq.w	80162ec <_strtod_l+0x264>
 8016b74:	2a45      	cmp	r2, #69	@ 0x45
 8016b76:	f43f abb9 	beq.w	80162ec <_strtod_l+0x264>
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	9306      	str	r3, [sp, #24]
 8016b7e:	f7ff bbf0 	b.w	8016362 <_strtod_l+0x2da>
 8016b82:	bf00      	nop
 8016b84:	f3af 8000 	nop.w
 8016b88:	94a03595 	.word	0x94a03595
 8016b8c:	3fdfffff 	.word	0x3fdfffff
 8016b90:	35afe535 	.word	0x35afe535
 8016b94:	3fe00000 	.word	0x3fe00000
 8016b98:	94a03595 	.word	0x94a03595
 8016b9c:	3fcfffff 	.word	0x3fcfffff
 8016ba0:	000fffff 	.word	0x000fffff
 8016ba4:	7ff00000 	.word	0x7ff00000
 8016ba8:	7fefffff 	.word	0x7fefffff
 8016bac:	7fe00000 	.word	0x7fe00000
 8016bb0:	7c9fffff 	.word	0x7c9fffff

08016bb4 <_strtod_r>:
 8016bb4:	4b01      	ldr	r3, [pc, #4]	@ (8016bbc <_strtod_r+0x8>)
 8016bb6:	f7ff ba67 	b.w	8016088 <_strtod_l>
 8016bba:	bf00      	nop
 8016bbc:	24000114 	.word	0x24000114

08016bc0 <strtod>:
 8016bc0:	460a      	mov	r2, r1
 8016bc2:	4601      	mov	r1, r0
 8016bc4:	4802      	ldr	r0, [pc, #8]	@ (8016bd0 <strtod+0x10>)
 8016bc6:	4b03      	ldr	r3, [pc, #12]	@ (8016bd4 <strtod+0x14>)
 8016bc8:	6800      	ldr	r0, [r0, #0]
 8016bca:	f7ff ba5d 	b.w	8016088 <_strtod_l>
 8016bce:	bf00      	nop
 8016bd0:	24000280 	.word	0x24000280
 8016bd4:	24000114 	.word	0x24000114

08016bd8 <_strtol_l.constprop.0>:
 8016bd8:	2b24      	cmp	r3, #36	@ 0x24
 8016bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bde:	4686      	mov	lr, r0
 8016be0:	4690      	mov	r8, r2
 8016be2:	d801      	bhi.n	8016be8 <_strtol_l.constprop.0+0x10>
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d106      	bne.n	8016bf6 <_strtol_l.constprop.0+0x1e>
 8016be8:	f000 fd2a 	bl	8017640 <__errno>
 8016bec:	2316      	movs	r3, #22
 8016bee:	6003      	str	r3, [r0, #0]
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf6:	4834      	ldr	r0, [pc, #208]	@ (8016cc8 <_strtol_l.constprop.0+0xf0>)
 8016bf8:	460d      	mov	r5, r1
 8016bfa:	462a      	mov	r2, r5
 8016bfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c00:	5d06      	ldrb	r6, [r0, r4]
 8016c02:	f016 0608 	ands.w	r6, r6, #8
 8016c06:	d1f8      	bne.n	8016bfa <_strtol_l.constprop.0+0x22>
 8016c08:	2c2d      	cmp	r4, #45	@ 0x2d
 8016c0a:	d12d      	bne.n	8016c68 <_strtol_l.constprop.0+0x90>
 8016c0c:	782c      	ldrb	r4, [r5, #0]
 8016c0e:	2601      	movs	r6, #1
 8016c10:	1c95      	adds	r5, r2, #2
 8016c12:	f033 0210 	bics.w	r2, r3, #16
 8016c16:	d109      	bne.n	8016c2c <_strtol_l.constprop.0+0x54>
 8016c18:	2c30      	cmp	r4, #48	@ 0x30
 8016c1a:	d12a      	bne.n	8016c72 <_strtol_l.constprop.0+0x9a>
 8016c1c:	782a      	ldrb	r2, [r5, #0]
 8016c1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016c22:	2a58      	cmp	r2, #88	@ 0x58
 8016c24:	d125      	bne.n	8016c72 <_strtol_l.constprop.0+0x9a>
 8016c26:	786c      	ldrb	r4, [r5, #1]
 8016c28:	2310      	movs	r3, #16
 8016c2a:	3502      	adds	r5, #2
 8016c2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016c30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c34:	2200      	movs	r2, #0
 8016c36:	fbbc f9f3 	udiv	r9, ip, r3
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8016c40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016c44:	2f09      	cmp	r7, #9
 8016c46:	d81b      	bhi.n	8016c80 <_strtol_l.constprop.0+0xa8>
 8016c48:	463c      	mov	r4, r7
 8016c4a:	42a3      	cmp	r3, r4
 8016c4c:	dd27      	ble.n	8016c9e <_strtol_l.constprop.0+0xc6>
 8016c4e:	1c57      	adds	r7, r2, #1
 8016c50:	d007      	beq.n	8016c62 <_strtol_l.constprop.0+0x8a>
 8016c52:	4581      	cmp	r9, r0
 8016c54:	d320      	bcc.n	8016c98 <_strtol_l.constprop.0+0xc0>
 8016c56:	d101      	bne.n	8016c5c <_strtol_l.constprop.0+0x84>
 8016c58:	45a2      	cmp	sl, r4
 8016c5a:	db1d      	blt.n	8016c98 <_strtol_l.constprop.0+0xc0>
 8016c5c:	fb00 4003 	mla	r0, r0, r3, r4
 8016c60:	2201      	movs	r2, #1
 8016c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c66:	e7eb      	b.n	8016c40 <_strtol_l.constprop.0+0x68>
 8016c68:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c6a:	bf04      	itt	eq
 8016c6c:	782c      	ldrbeq	r4, [r5, #0]
 8016c6e:	1c95      	addeq	r5, r2, #2
 8016c70:	e7cf      	b.n	8016c12 <_strtol_l.constprop.0+0x3a>
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1da      	bne.n	8016c2c <_strtol_l.constprop.0+0x54>
 8016c76:	2c30      	cmp	r4, #48	@ 0x30
 8016c78:	bf0c      	ite	eq
 8016c7a:	2308      	moveq	r3, #8
 8016c7c:	230a      	movne	r3, #10
 8016c7e:	e7d5      	b.n	8016c2c <_strtol_l.constprop.0+0x54>
 8016c80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016c84:	2f19      	cmp	r7, #25
 8016c86:	d801      	bhi.n	8016c8c <_strtol_l.constprop.0+0xb4>
 8016c88:	3c37      	subs	r4, #55	@ 0x37
 8016c8a:	e7de      	b.n	8016c4a <_strtol_l.constprop.0+0x72>
 8016c8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016c90:	2f19      	cmp	r7, #25
 8016c92:	d804      	bhi.n	8016c9e <_strtol_l.constprop.0+0xc6>
 8016c94:	3c57      	subs	r4, #87	@ 0x57
 8016c96:	e7d8      	b.n	8016c4a <_strtol_l.constprop.0+0x72>
 8016c98:	f04f 32ff 	mov.w	r2, #4294967295
 8016c9c:	e7e1      	b.n	8016c62 <_strtol_l.constprop.0+0x8a>
 8016c9e:	1c53      	adds	r3, r2, #1
 8016ca0:	d108      	bne.n	8016cb4 <_strtol_l.constprop.0+0xdc>
 8016ca2:	2322      	movs	r3, #34	@ 0x22
 8016ca4:	f8ce 3000 	str.w	r3, [lr]
 8016ca8:	4660      	mov	r0, ip
 8016caa:	f1b8 0f00 	cmp.w	r8, #0
 8016cae:	d0a0      	beq.n	8016bf2 <_strtol_l.constprop.0+0x1a>
 8016cb0:	1e69      	subs	r1, r5, #1
 8016cb2:	e006      	b.n	8016cc2 <_strtol_l.constprop.0+0xea>
 8016cb4:	b106      	cbz	r6, 8016cb8 <_strtol_l.constprop.0+0xe0>
 8016cb6:	4240      	negs	r0, r0
 8016cb8:	f1b8 0f00 	cmp.w	r8, #0
 8016cbc:	d099      	beq.n	8016bf2 <_strtol_l.constprop.0+0x1a>
 8016cbe:	2a00      	cmp	r2, #0
 8016cc0:	d1f6      	bne.n	8016cb0 <_strtol_l.constprop.0+0xd8>
 8016cc2:	f8c8 1000 	str.w	r1, [r8]
 8016cc6:	e794      	b.n	8016bf2 <_strtol_l.constprop.0+0x1a>
 8016cc8:	08019eb1 	.word	0x08019eb1

08016ccc <_strtol_r>:
 8016ccc:	f7ff bf84 	b.w	8016bd8 <_strtol_l.constprop.0>

08016cd0 <strtol>:
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	460a      	mov	r2, r1
 8016cd4:	4601      	mov	r1, r0
 8016cd6:	4802      	ldr	r0, [pc, #8]	@ (8016ce0 <strtol+0x10>)
 8016cd8:	6800      	ldr	r0, [r0, #0]
 8016cda:	f7ff bf7d 	b.w	8016bd8 <_strtol_l.constprop.0>
 8016cde:	bf00      	nop
 8016ce0:	24000280 	.word	0x24000280

08016ce4 <_scanf_float>:
 8016ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce8:	b087      	sub	sp, #28
 8016cea:	4617      	mov	r7, r2
 8016cec:	9303      	str	r3, [sp, #12]
 8016cee:	688b      	ldr	r3, [r1, #8]
 8016cf0:	1e5a      	subs	r2, r3, #1
 8016cf2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016cf6:	bf81      	itttt	hi
 8016cf8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016cfc:	eb03 0b05 	addhi.w	fp, r3, r5
 8016d00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016d04:	608b      	strhi	r3, [r1, #8]
 8016d06:	680b      	ldr	r3, [r1, #0]
 8016d08:	460a      	mov	r2, r1
 8016d0a:	f04f 0500 	mov.w	r5, #0
 8016d0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8016d12:	f842 3b1c 	str.w	r3, [r2], #28
 8016d16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016d1a:	4680      	mov	r8, r0
 8016d1c:	460c      	mov	r4, r1
 8016d1e:	bf98      	it	ls
 8016d20:	f04f 0b00 	movls.w	fp, #0
 8016d24:	9201      	str	r2, [sp, #4]
 8016d26:	4616      	mov	r6, r2
 8016d28:	46aa      	mov	sl, r5
 8016d2a:	46a9      	mov	r9, r5
 8016d2c:	9502      	str	r5, [sp, #8]
 8016d2e:	68a2      	ldr	r2, [r4, #8]
 8016d30:	b152      	cbz	r2, 8016d48 <_scanf_float+0x64>
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	2b4e      	cmp	r3, #78	@ 0x4e
 8016d38:	d864      	bhi.n	8016e04 <_scanf_float+0x120>
 8016d3a:	2b40      	cmp	r3, #64	@ 0x40
 8016d3c:	d83c      	bhi.n	8016db8 <_scanf_float+0xd4>
 8016d3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8016d42:	b2c8      	uxtb	r0, r1
 8016d44:	280e      	cmp	r0, #14
 8016d46:	d93a      	bls.n	8016dbe <_scanf_float+0xda>
 8016d48:	f1b9 0f00 	cmp.w	r9, #0
 8016d4c:	d003      	beq.n	8016d56 <_scanf_float+0x72>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016d54:	6023      	str	r3, [r4, #0]
 8016d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d5a:	f1ba 0f01 	cmp.w	sl, #1
 8016d5e:	f200 8117 	bhi.w	8016f90 <_scanf_float+0x2ac>
 8016d62:	9b01      	ldr	r3, [sp, #4]
 8016d64:	429e      	cmp	r6, r3
 8016d66:	f200 8108 	bhi.w	8016f7a <_scanf_float+0x296>
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	b007      	add	sp, #28
 8016d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8016d76:	2a0d      	cmp	r2, #13
 8016d78:	d8e6      	bhi.n	8016d48 <_scanf_float+0x64>
 8016d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8016d80 <_scanf_float+0x9c>)
 8016d7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016d80:	08016ec7 	.word	0x08016ec7
 8016d84:	08016d49 	.word	0x08016d49
 8016d88:	08016d49 	.word	0x08016d49
 8016d8c:	08016d49 	.word	0x08016d49
 8016d90:	08016f27 	.word	0x08016f27
 8016d94:	08016eff 	.word	0x08016eff
 8016d98:	08016d49 	.word	0x08016d49
 8016d9c:	08016d49 	.word	0x08016d49
 8016da0:	08016ed5 	.word	0x08016ed5
 8016da4:	08016d49 	.word	0x08016d49
 8016da8:	08016d49 	.word	0x08016d49
 8016dac:	08016d49 	.word	0x08016d49
 8016db0:	08016d49 	.word	0x08016d49
 8016db4:	08016e8d 	.word	0x08016e8d
 8016db8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8016dbc:	e7db      	b.n	8016d76 <_scanf_float+0x92>
 8016dbe:	290e      	cmp	r1, #14
 8016dc0:	d8c2      	bhi.n	8016d48 <_scanf_float+0x64>
 8016dc2:	a001      	add	r0, pc, #4	@ (adr r0, 8016dc8 <_scanf_float+0xe4>)
 8016dc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016dc8:	08016e7d 	.word	0x08016e7d
 8016dcc:	08016d49 	.word	0x08016d49
 8016dd0:	08016e7d 	.word	0x08016e7d
 8016dd4:	08016f13 	.word	0x08016f13
 8016dd8:	08016d49 	.word	0x08016d49
 8016ddc:	08016e25 	.word	0x08016e25
 8016de0:	08016e63 	.word	0x08016e63
 8016de4:	08016e63 	.word	0x08016e63
 8016de8:	08016e63 	.word	0x08016e63
 8016dec:	08016e63 	.word	0x08016e63
 8016df0:	08016e63 	.word	0x08016e63
 8016df4:	08016e63 	.word	0x08016e63
 8016df8:	08016e63 	.word	0x08016e63
 8016dfc:	08016e63 	.word	0x08016e63
 8016e00:	08016e63 	.word	0x08016e63
 8016e04:	2b6e      	cmp	r3, #110	@ 0x6e
 8016e06:	d809      	bhi.n	8016e1c <_scanf_float+0x138>
 8016e08:	2b60      	cmp	r3, #96	@ 0x60
 8016e0a:	d8b2      	bhi.n	8016d72 <_scanf_float+0x8e>
 8016e0c:	2b54      	cmp	r3, #84	@ 0x54
 8016e0e:	d07b      	beq.n	8016f08 <_scanf_float+0x224>
 8016e10:	2b59      	cmp	r3, #89	@ 0x59
 8016e12:	d199      	bne.n	8016d48 <_scanf_float+0x64>
 8016e14:	2d07      	cmp	r5, #7
 8016e16:	d197      	bne.n	8016d48 <_scanf_float+0x64>
 8016e18:	2508      	movs	r5, #8
 8016e1a:	e02c      	b.n	8016e76 <_scanf_float+0x192>
 8016e1c:	2b74      	cmp	r3, #116	@ 0x74
 8016e1e:	d073      	beq.n	8016f08 <_scanf_float+0x224>
 8016e20:	2b79      	cmp	r3, #121	@ 0x79
 8016e22:	e7f6      	b.n	8016e12 <_scanf_float+0x12e>
 8016e24:	6821      	ldr	r1, [r4, #0]
 8016e26:	05c8      	lsls	r0, r1, #23
 8016e28:	d51b      	bpl.n	8016e62 <_scanf_float+0x17e>
 8016e2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8016e2e:	6021      	str	r1, [r4, #0]
 8016e30:	f109 0901 	add.w	r9, r9, #1
 8016e34:	f1bb 0f00 	cmp.w	fp, #0
 8016e38:	d003      	beq.n	8016e42 <_scanf_float+0x15e>
 8016e3a:	3201      	adds	r2, #1
 8016e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e40:	60a2      	str	r2, [r4, #8]
 8016e42:	68a3      	ldr	r3, [r4, #8]
 8016e44:	3b01      	subs	r3, #1
 8016e46:	60a3      	str	r3, [r4, #8]
 8016e48:	6923      	ldr	r3, [r4, #16]
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	6123      	str	r3, [r4, #16]
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	3b01      	subs	r3, #1
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	607b      	str	r3, [r7, #4]
 8016e56:	f340 8087 	ble.w	8016f68 <_scanf_float+0x284>
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	603b      	str	r3, [r7, #0]
 8016e60:	e765      	b.n	8016d2e <_scanf_float+0x4a>
 8016e62:	eb1a 0105 	adds.w	r1, sl, r5
 8016e66:	f47f af6f 	bne.w	8016d48 <_scanf_float+0x64>
 8016e6a:	6822      	ldr	r2, [r4, #0]
 8016e6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8016e70:	6022      	str	r2, [r4, #0]
 8016e72:	460d      	mov	r5, r1
 8016e74:	468a      	mov	sl, r1
 8016e76:	f806 3b01 	strb.w	r3, [r6], #1
 8016e7a:	e7e2      	b.n	8016e42 <_scanf_float+0x15e>
 8016e7c:	6822      	ldr	r2, [r4, #0]
 8016e7e:	0610      	lsls	r0, r2, #24
 8016e80:	f57f af62 	bpl.w	8016d48 <_scanf_float+0x64>
 8016e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8016e88:	6022      	str	r2, [r4, #0]
 8016e8a:	e7f4      	b.n	8016e76 <_scanf_float+0x192>
 8016e8c:	f1ba 0f00 	cmp.w	sl, #0
 8016e90:	d10e      	bne.n	8016eb0 <_scanf_float+0x1cc>
 8016e92:	f1b9 0f00 	cmp.w	r9, #0
 8016e96:	d10e      	bne.n	8016eb6 <_scanf_float+0x1d2>
 8016e98:	6822      	ldr	r2, [r4, #0]
 8016e9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8016e9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8016ea2:	d108      	bne.n	8016eb6 <_scanf_float+0x1d2>
 8016ea4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016ea8:	6022      	str	r2, [r4, #0]
 8016eaa:	f04f 0a01 	mov.w	sl, #1
 8016eae:	e7e2      	b.n	8016e76 <_scanf_float+0x192>
 8016eb0:	f1ba 0f02 	cmp.w	sl, #2
 8016eb4:	d055      	beq.n	8016f62 <_scanf_float+0x27e>
 8016eb6:	2d01      	cmp	r5, #1
 8016eb8:	d002      	beq.n	8016ec0 <_scanf_float+0x1dc>
 8016eba:	2d04      	cmp	r5, #4
 8016ebc:	f47f af44 	bne.w	8016d48 <_scanf_float+0x64>
 8016ec0:	3501      	adds	r5, #1
 8016ec2:	b2ed      	uxtb	r5, r5
 8016ec4:	e7d7      	b.n	8016e76 <_scanf_float+0x192>
 8016ec6:	f1ba 0f01 	cmp.w	sl, #1
 8016eca:	f47f af3d 	bne.w	8016d48 <_scanf_float+0x64>
 8016ece:	f04f 0a02 	mov.w	sl, #2
 8016ed2:	e7d0      	b.n	8016e76 <_scanf_float+0x192>
 8016ed4:	b97d      	cbnz	r5, 8016ef6 <_scanf_float+0x212>
 8016ed6:	f1b9 0f00 	cmp.w	r9, #0
 8016eda:	f47f af38 	bne.w	8016d4e <_scanf_float+0x6a>
 8016ede:	6822      	ldr	r2, [r4, #0]
 8016ee0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8016ee4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8016ee8:	f040 8101 	bne.w	80170ee <_scanf_float+0x40a>
 8016eec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016ef0:	6022      	str	r2, [r4, #0]
 8016ef2:	2501      	movs	r5, #1
 8016ef4:	e7bf      	b.n	8016e76 <_scanf_float+0x192>
 8016ef6:	2d03      	cmp	r5, #3
 8016ef8:	d0e2      	beq.n	8016ec0 <_scanf_float+0x1dc>
 8016efa:	2d05      	cmp	r5, #5
 8016efc:	e7de      	b.n	8016ebc <_scanf_float+0x1d8>
 8016efe:	2d02      	cmp	r5, #2
 8016f00:	f47f af22 	bne.w	8016d48 <_scanf_float+0x64>
 8016f04:	2503      	movs	r5, #3
 8016f06:	e7b6      	b.n	8016e76 <_scanf_float+0x192>
 8016f08:	2d06      	cmp	r5, #6
 8016f0a:	f47f af1d 	bne.w	8016d48 <_scanf_float+0x64>
 8016f0e:	2507      	movs	r5, #7
 8016f10:	e7b1      	b.n	8016e76 <_scanf_float+0x192>
 8016f12:	6822      	ldr	r2, [r4, #0]
 8016f14:	0591      	lsls	r1, r2, #22
 8016f16:	f57f af17 	bpl.w	8016d48 <_scanf_float+0x64>
 8016f1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8016f1e:	6022      	str	r2, [r4, #0]
 8016f20:	f8cd 9008 	str.w	r9, [sp, #8]
 8016f24:	e7a7      	b.n	8016e76 <_scanf_float+0x192>
 8016f26:	6822      	ldr	r2, [r4, #0]
 8016f28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8016f2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016f30:	d006      	beq.n	8016f40 <_scanf_float+0x25c>
 8016f32:	0550      	lsls	r0, r2, #21
 8016f34:	f57f af08 	bpl.w	8016d48 <_scanf_float+0x64>
 8016f38:	f1b9 0f00 	cmp.w	r9, #0
 8016f3c:	f000 80d7 	beq.w	80170ee <_scanf_float+0x40a>
 8016f40:	0591      	lsls	r1, r2, #22
 8016f42:	bf58      	it	pl
 8016f44:	9902      	ldrpl	r1, [sp, #8]
 8016f46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016f4a:	bf58      	it	pl
 8016f4c:	eba9 0101 	subpl.w	r1, r9, r1
 8016f50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8016f54:	bf58      	it	pl
 8016f56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016f5a:	6022      	str	r2, [r4, #0]
 8016f5c:	f04f 0900 	mov.w	r9, #0
 8016f60:	e789      	b.n	8016e76 <_scanf_float+0x192>
 8016f62:	f04f 0a03 	mov.w	sl, #3
 8016f66:	e786      	b.n	8016e76 <_scanf_float+0x192>
 8016f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	4640      	mov	r0, r8
 8016f70:	4798      	blx	r3
 8016f72:	2800      	cmp	r0, #0
 8016f74:	f43f aedb 	beq.w	8016d2e <_scanf_float+0x4a>
 8016f78:	e6e6      	b.n	8016d48 <_scanf_float+0x64>
 8016f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016f7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016f82:	463a      	mov	r2, r7
 8016f84:	4640      	mov	r0, r8
 8016f86:	4798      	blx	r3
 8016f88:	6923      	ldr	r3, [r4, #16]
 8016f8a:	3b01      	subs	r3, #1
 8016f8c:	6123      	str	r3, [r4, #16]
 8016f8e:	e6e8      	b.n	8016d62 <_scanf_float+0x7e>
 8016f90:	1e6b      	subs	r3, r5, #1
 8016f92:	2b06      	cmp	r3, #6
 8016f94:	d824      	bhi.n	8016fe0 <_scanf_float+0x2fc>
 8016f96:	2d02      	cmp	r5, #2
 8016f98:	d836      	bhi.n	8017008 <_scanf_float+0x324>
 8016f9a:	9b01      	ldr	r3, [sp, #4]
 8016f9c:	429e      	cmp	r6, r3
 8016f9e:	f67f aee4 	bls.w	8016d6a <_scanf_float+0x86>
 8016fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016fa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016faa:	463a      	mov	r2, r7
 8016fac:	4640      	mov	r0, r8
 8016fae:	4798      	blx	r3
 8016fb0:	6923      	ldr	r3, [r4, #16]
 8016fb2:	3b01      	subs	r3, #1
 8016fb4:	6123      	str	r3, [r4, #16]
 8016fb6:	e7f0      	b.n	8016f9a <_scanf_float+0x2b6>
 8016fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016fbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8016fc0:	463a      	mov	r2, r7
 8016fc2:	4640      	mov	r0, r8
 8016fc4:	4798      	blx	r3
 8016fc6:	6923      	ldr	r3, [r4, #16]
 8016fc8:	3b01      	subs	r3, #1
 8016fca:	6123      	str	r3, [r4, #16]
 8016fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fd0:	fa5f fa8a 	uxtb.w	sl, sl
 8016fd4:	f1ba 0f02 	cmp.w	sl, #2
 8016fd8:	d1ee      	bne.n	8016fb8 <_scanf_float+0x2d4>
 8016fda:	3d03      	subs	r5, #3
 8016fdc:	b2ed      	uxtb	r5, r5
 8016fde:	1b76      	subs	r6, r6, r5
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	05da      	lsls	r2, r3, #23
 8016fe4:	d530      	bpl.n	8017048 <_scanf_float+0x364>
 8016fe6:	055b      	lsls	r3, r3, #21
 8016fe8:	d511      	bpl.n	801700e <_scanf_float+0x32a>
 8016fea:	9b01      	ldr	r3, [sp, #4]
 8016fec:	429e      	cmp	r6, r3
 8016fee:	f67f aebc 	bls.w	8016d6a <_scanf_float+0x86>
 8016ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016ffa:	463a      	mov	r2, r7
 8016ffc:	4640      	mov	r0, r8
 8016ffe:	4798      	blx	r3
 8017000:	6923      	ldr	r3, [r4, #16]
 8017002:	3b01      	subs	r3, #1
 8017004:	6123      	str	r3, [r4, #16]
 8017006:	e7f0      	b.n	8016fea <_scanf_float+0x306>
 8017008:	46aa      	mov	sl, r5
 801700a:	46b3      	mov	fp, r6
 801700c:	e7de      	b.n	8016fcc <_scanf_float+0x2e8>
 801700e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017012:	6923      	ldr	r3, [r4, #16]
 8017014:	2965      	cmp	r1, #101	@ 0x65
 8017016:	f103 33ff 	add.w	r3, r3, #4294967295
 801701a:	f106 35ff 	add.w	r5, r6, #4294967295
 801701e:	6123      	str	r3, [r4, #16]
 8017020:	d00c      	beq.n	801703c <_scanf_float+0x358>
 8017022:	2945      	cmp	r1, #69	@ 0x45
 8017024:	d00a      	beq.n	801703c <_scanf_float+0x358>
 8017026:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801702a:	463a      	mov	r2, r7
 801702c:	4640      	mov	r0, r8
 801702e:	4798      	blx	r3
 8017030:	6923      	ldr	r3, [r4, #16]
 8017032:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017036:	3b01      	subs	r3, #1
 8017038:	1eb5      	subs	r5, r6, #2
 801703a:	6123      	str	r3, [r4, #16]
 801703c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017040:	463a      	mov	r2, r7
 8017042:	4640      	mov	r0, r8
 8017044:	4798      	blx	r3
 8017046:	462e      	mov	r6, r5
 8017048:	6822      	ldr	r2, [r4, #0]
 801704a:	f012 0210 	ands.w	r2, r2, #16
 801704e:	d001      	beq.n	8017054 <_scanf_float+0x370>
 8017050:	2000      	movs	r0, #0
 8017052:	e68b      	b.n	8016d6c <_scanf_float+0x88>
 8017054:	7032      	strb	r2, [r6, #0]
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801705c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017060:	d11a      	bne.n	8017098 <_scanf_float+0x3b4>
 8017062:	9b02      	ldr	r3, [sp, #8]
 8017064:	454b      	cmp	r3, r9
 8017066:	eba3 0209 	sub.w	r2, r3, r9
 801706a:	d121      	bne.n	80170b0 <_scanf_float+0x3cc>
 801706c:	9901      	ldr	r1, [sp, #4]
 801706e:	2200      	movs	r2, #0
 8017070:	4640      	mov	r0, r8
 8017072:	f7ff fd9f 	bl	8016bb4 <_strtod_r>
 8017076:	9b03      	ldr	r3, [sp, #12]
 8017078:	6821      	ldr	r1, [r4, #0]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	f011 0f02 	tst.w	r1, #2
 8017080:	f103 0204 	add.w	r2, r3, #4
 8017084:	d01f      	beq.n	80170c6 <_scanf_float+0x3e2>
 8017086:	9903      	ldr	r1, [sp, #12]
 8017088:	600a      	str	r2, [r1, #0]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	ed83 0b00 	vstr	d0, [r3]
 8017090:	68e3      	ldr	r3, [r4, #12]
 8017092:	3301      	adds	r3, #1
 8017094:	60e3      	str	r3, [r4, #12]
 8017096:	e7db      	b.n	8017050 <_scanf_float+0x36c>
 8017098:	9b04      	ldr	r3, [sp, #16]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d0e6      	beq.n	801706c <_scanf_float+0x388>
 801709e:	9905      	ldr	r1, [sp, #20]
 80170a0:	230a      	movs	r3, #10
 80170a2:	3101      	adds	r1, #1
 80170a4:	4640      	mov	r0, r8
 80170a6:	f7ff fe11 	bl	8016ccc <_strtol_r>
 80170aa:	9b04      	ldr	r3, [sp, #16]
 80170ac:	9e05      	ldr	r6, [sp, #20]
 80170ae:	1ac2      	subs	r2, r0, r3
 80170b0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80170b4:	429e      	cmp	r6, r3
 80170b6:	bf28      	it	cs
 80170b8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80170bc:	490d      	ldr	r1, [pc, #52]	@ (80170f4 <_scanf_float+0x410>)
 80170be:	4630      	mov	r0, r6
 80170c0:	f000 f8f0 	bl	80172a4 <siprintf>
 80170c4:	e7d2      	b.n	801706c <_scanf_float+0x388>
 80170c6:	f011 0f04 	tst.w	r1, #4
 80170ca:	9903      	ldr	r1, [sp, #12]
 80170cc:	600a      	str	r2, [r1, #0]
 80170ce:	d1dc      	bne.n	801708a <_scanf_float+0x3a6>
 80170d0:	eeb4 0b40 	vcmp.f64	d0, d0
 80170d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d8:	681d      	ldr	r5, [r3, #0]
 80170da:	d705      	bvc.n	80170e8 <_scanf_float+0x404>
 80170dc:	4806      	ldr	r0, [pc, #24]	@ (80170f8 <_scanf_float+0x414>)
 80170de:	f000 faf3 	bl	80176c8 <nanf>
 80170e2:	ed85 0a00 	vstr	s0, [r5]
 80170e6:	e7d3      	b.n	8017090 <_scanf_float+0x3ac>
 80170e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80170ec:	e7f9      	b.n	80170e2 <_scanf_float+0x3fe>
 80170ee:	f04f 0900 	mov.w	r9, #0
 80170f2:	e630      	b.n	8016d56 <_scanf_float+0x72>
 80170f4:	08019fb1 	.word	0x08019fb1
 80170f8:	0801a06a 	.word	0x0801a06a

080170fc <std>:
 80170fc:	2300      	movs	r3, #0
 80170fe:	b510      	push	{r4, lr}
 8017100:	4604      	mov	r4, r0
 8017102:	e9c0 3300 	strd	r3, r3, [r0]
 8017106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801710a:	6083      	str	r3, [r0, #8]
 801710c:	8181      	strh	r1, [r0, #12]
 801710e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017110:	81c2      	strh	r2, [r0, #14]
 8017112:	6183      	str	r3, [r0, #24]
 8017114:	4619      	mov	r1, r3
 8017116:	2208      	movs	r2, #8
 8017118:	305c      	adds	r0, #92	@ 0x5c
 801711a:	f000 f952 	bl	80173c2 <memset>
 801711e:	4b0d      	ldr	r3, [pc, #52]	@ (8017154 <std+0x58>)
 8017120:	6263      	str	r3, [r4, #36]	@ 0x24
 8017122:	4b0d      	ldr	r3, [pc, #52]	@ (8017158 <std+0x5c>)
 8017124:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017126:	4b0d      	ldr	r3, [pc, #52]	@ (801715c <std+0x60>)
 8017128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801712a:	4b0d      	ldr	r3, [pc, #52]	@ (8017160 <std+0x64>)
 801712c:	6323      	str	r3, [r4, #48]	@ 0x30
 801712e:	4b0d      	ldr	r3, [pc, #52]	@ (8017164 <std+0x68>)
 8017130:	6224      	str	r4, [r4, #32]
 8017132:	429c      	cmp	r4, r3
 8017134:	d006      	beq.n	8017144 <std+0x48>
 8017136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801713a:	4294      	cmp	r4, r2
 801713c:	d002      	beq.n	8017144 <std+0x48>
 801713e:	33d0      	adds	r3, #208	@ 0xd0
 8017140:	429c      	cmp	r4, r3
 8017142:	d105      	bne.n	8017150 <std+0x54>
 8017144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801714c:	f000 baa2 	b.w	8017694 <__retarget_lock_init_recursive>
 8017150:	bd10      	pop	{r4, pc}
 8017152:	bf00      	nop
 8017154:	08017339 	.word	0x08017339
 8017158:	0801735f 	.word	0x0801735f
 801715c:	08017397 	.word	0x08017397
 8017160:	080173bb 	.word	0x080173bb
 8017164:	24006d40 	.word	0x24006d40

08017168 <stdio_exit_handler>:
 8017168:	4a02      	ldr	r2, [pc, #8]	@ (8017174 <stdio_exit_handler+0xc>)
 801716a:	4903      	ldr	r1, [pc, #12]	@ (8017178 <stdio_exit_handler+0x10>)
 801716c:	4803      	ldr	r0, [pc, #12]	@ (801717c <stdio_exit_handler+0x14>)
 801716e:	f000 b869 	b.w	8017244 <_fwalk_sglue>
 8017172:	bf00      	nop
 8017174:	24000108 	.word	0x24000108
 8017178:	08019741 	.word	0x08019741
 801717c:	24000284 	.word	0x24000284

08017180 <cleanup_stdio>:
 8017180:	6841      	ldr	r1, [r0, #4]
 8017182:	4b0c      	ldr	r3, [pc, #48]	@ (80171b4 <cleanup_stdio+0x34>)
 8017184:	4299      	cmp	r1, r3
 8017186:	b510      	push	{r4, lr}
 8017188:	4604      	mov	r4, r0
 801718a:	d001      	beq.n	8017190 <cleanup_stdio+0x10>
 801718c:	f002 fad8 	bl	8019740 <_fflush_r>
 8017190:	68a1      	ldr	r1, [r4, #8]
 8017192:	4b09      	ldr	r3, [pc, #36]	@ (80171b8 <cleanup_stdio+0x38>)
 8017194:	4299      	cmp	r1, r3
 8017196:	d002      	beq.n	801719e <cleanup_stdio+0x1e>
 8017198:	4620      	mov	r0, r4
 801719a:	f002 fad1 	bl	8019740 <_fflush_r>
 801719e:	68e1      	ldr	r1, [r4, #12]
 80171a0:	4b06      	ldr	r3, [pc, #24]	@ (80171bc <cleanup_stdio+0x3c>)
 80171a2:	4299      	cmp	r1, r3
 80171a4:	d004      	beq.n	80171b0 <cleanup_stdio+0x30>
 80171a6:	4620      	mov	r0, r4
 80171a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171ac:	f002 bac8 	b.w	8019740 <_fflush_r>
 80171b0:	bd10      	pop	{r4, pc}
 80171b2:	bf00      	nop
 80171b4:	24006d40 	.word	0x24006d40
 80171b8:	24006da8 	.word	0x24006da8
 80171bc:	24006e10 	.word	0x24006e10

080171c0 <global_stdio_init.part.0>:
 80171c0:	b510      	push	{r4, lr}
 80171c2:	4b0b      	ldr	r3, [pc, #44]	@ (80171f0 <global_stdio_init.part.0+0x30>)
 80171c4:	4c0b      	ldr	r4, [pc, #44]	@ (80171f4 <global_stdio_init.part.0+0x34>)
 80171c6:	4a0c      	ldr	r2, [pc, #48]	@ (80171f8 <global_stdio_init.part.0+0x38>)
 80171c8:	601a      	str	r2, [r3, #0]
 80171ca:	4620      	mov	r0, r4
 80171cc:	2200      	movs	r2, #0
 80171ce:	2104      	movs	r1, #4
 80171d0:	f7ff ff94 	bl	80170fc <std>
 80171d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80171d8:	2201      	movs	r2, #1
 80171da:	2109      	movs	r1, #9
 80171dc:	f7ff ff8e 	bl	80170fc <std>
 80171e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80171e4:	2202      	movs	r2, #2
 80171e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171ea:	2112      	movs	r1, #18
 80171ec:	f7ff bf86 	b.w	80170fc <std>
 80171f0:	24006e78 	.word	0x24006e78
 80171f4:	24006d40 	.word	0x24006d40
 80171f8:	08017169 	.word	0x08017169

080171fc <__sfp_lock_acquire>:
 80171fc:	4801      	ldr	r0, [pc, #4]	@ (8017204 <__sfp_lock_acquire+0x8>)
 80171fe:	f000 ba4a 	b.w	8017696 <__retarget_lock_acquire_recursive>
 8017202:	bf00      	nop
 8017204:	24006e81 	.word	0x24006e81

08017208 <__sfp_lock_release>:
 8017208:	4801      	ldr	r0, [pc, #4]	@ (8017210 <__sfp_lock_release+0x8>)
 801720a:	f000 ba45 	b.w	8017698 <__retarget_lock_release_recursive>
 801720e:	bf00      	nop
 8017210:	24006e81 	.word	0x24006e81

08017214 <__sinit>:
 8017214:	b510      	push	{r4, lr}
 8017216:	4604      	mov	r4, r0
 8017218:	f7ff fff0 	bl	80171fc <__sfp_lock_acquire>
 801721c:	6a23      	ldr	r3, [r4, #32]
 801721e:	b11b      	cbz	r3, 8017228 <__sinit+0x14>
 8017220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017224:	f7ff bff0 	b.w	8017208 <__sfp_lock_release>
 8017228:	4b04      	ldr	r3, [pc, #16]	@ (801723c <__sinit+0x28>)
 801722a:	6223      	str	r3, [r4, #32]
 801722c:	4b04      	ldr	r3, [pc, #16]	@ (8017240 <__sinit+0x2c>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d1f5      	bne.n	8017220 <__sinit+0xc>
 8017234:	f7ff ffc4 	bl	80171c0 <global_stdio_init.part.0>
 8017238:	e7f2      	b.n	8017220 <__sinit+0xc>
 801723a:	bf00      	nop
 801723c:	08017181 	.word	0x08017181
 8017240:	24006e78 	.word	0x24006e78

08017244 <_fwalk_sglue>:
 8017244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017248:	4607      	mov	r7, r0
 801724a:	4688      	mov	r8, r1
 801724c:	4614      	mov	r4, r2
 801724e:	2600      	movs	r6, #0
 8017250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017254:	f1b9 0901 	subs.w	r9, r9, #1
 8017258:	d505      	bpl.n	8017266 <_fwalk_sglue+0x22>
 801725a:	6824      	ldr	r4, [r4, #0]
 801725c:	2c00      	cmp	r4, #0
 801725e:	d1f7      	bne.n	8017250 <_fwalk_sglue+0xc>
 8017260:	4630      	mov	r0, r6
 8017262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017266:	89ab      	ldrh	r3, [r5, #12]
 8017268:	2b01      	cmp	r3, #1
 801726a:	d907      	bls.n	801727c <_fwalk_sglue+0x38>
 801726c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017270:	3301      	adds	r3, #1
 8017272:	d003      	beq.n	801727c <_fwalk_sglue+0x38>
 8017274:	4629      	mov	r1, r5
 8017276:	4638      	mov	r0, r7
 8017278:	47c0      	blx	r8
 801727a:	4306      	orrs	r6, r0
 801727c:	3568      	adds	r5, #104	@ 0x68
 801727e:	e7e9      	b.n	8017254 <_fwalk_sglue+0x10>

08017280 <iprintf>:
 8017280:	b40f      	push	{r0, r1, r2, r3}
 8017282:	b507      	push	{r0, r1, r2, lr}
 8017284:	4906      	ldr	r1, [pc, #24]	@ (80172a0 <iprintf+0x20>)
 8017286:	ab04      	add	r3, sp, #16
 8017288:	6808      	ldr	r0, [r1, #0]
 801728a:	f853 2b04 	ldr.w	r2, [r3], #4
 801728e:	6881      	ldr	r1, [r0, #8]
 8017290:	9301      	str	r3, [sp, #4]
 8017292:	f001 fddd 	bl	8018e50 <_vfiprintf_r>
 8017296:	b003      	add	sp, #12
 8017298:	f85d eb04 	ldr.w	lr, [sp], #4
 801729c:	b004      	add	sp, #16
 801729e:	4770      	bx	lr
 80172a0:	24000280 	.word	0x24000280

080172a4 <siprintf>:
 80172a4:	b40e      	push	{r1, r2, r3}
 80172a6:	b500      	push	{lr}
 80172a8:	b09c      	sub	sp, #112	@ 0x70
 80172aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80172ac:	9002      	str	r0, [sp, #8]
 80172ae:	9006      	str	r0, [sp, #24]
 80172b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80172b4:	4809      	ldr	r0, [pc, #36]	@ (80172dc <siprintf+0x38>)
 80172b6:	9107      	str	r1, [sp, #28]
 80172b8:	9104      	str	r1, [sp, #16]
 80172ba:	4909      	ldr	r1, [pc, #36]	@ (80172e0 <siprintf+0x3c>)
 80172bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80172c0:	9105      	str	r1, [sp, #20]
 80172c2:	6800      	ldr	r0, [r0, #0]
 80172c4:	9301      	str	r3, [sp, #4]
 80172c6:	a902      	add	r1, sp, #8
 80172c8:	f001 fad0 	bl	801886c <_svfiprintf_r>
 80172cc:	9b02      	ldr	r3, [sp, #8]
 80172ce:	2200      	movs	r2, #0
 80172d0:	701a      	strb	r2, [r3, #0]
 80172d2:	b01c      	add	sp, #112	@ 0x70
 80172d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80172d8:	b003      	add	sp, #12
 80172da:	4770      	bx	lr
 80172dc:	24000280 	.word	0x24000280
 80172e0:	ffff0208 	.word	0xffff0208

080172e4 <siscanf>:
 80172e4:	b40e      	push	{r1, r2, r3}
 80172e6:	b530      	push	{r4, r5, lr}
 80172e8:	b09c      	sub	sp, #112	@ 0x70
 80172ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 80172ec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80172f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80172f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80172f8:	9002      	str	r0, [sp, #8]
 80172fa:	9006      	str	r0, [sp, #24]
 80172fc:	f7e8 fff0 	bl	80002e0 <strlen>
 8017300:	4b0b      	ldr	r3, [pc, #44]	@ (8017330 <siscanf+0x4c>)
 8017302:	9003      	str	r0, [sp, #12]
 8017304:	9007      	str	r0, [sp, #28]
 8017306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017308:	480a      	ldr	r0, [pc, #40]	@ (8017334 <siscanf+0x50>)
 801730a:	9401      	str	r4, [sp, #4]
 801730c:	2300      	movs	r3, #0
 801730e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017310:	9314      	str	r3, [sp, #80]	@ 0x50
 8017312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017316:	f8ad 3016 	strh.w	r3, [sp, #22]
 801731a:	462a      	mov	r2, r5
 801731c:	4623      	mov	r3, r4
 801731e:	a902      	add	r1, sp, #8
 8017320:	6800      	ldr	r0, [r0, #0]
 8017322:	f001 fbf7 	bl	8018b14 <__ssvfiscanf_r>
 8017326:	b01c      	add	sp, #112	@ 0x70
 8017328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801732c:	b003      	add	sp, #12
 801732e:	4770      	bx	lr
 8017330:	0801735b 	.word	0x0801735b
 8017334:	24000280 	.word	0x24000280

08017338 <__sread>:
 8017338:	b510      	push	{r4, lr}
 801733a:	460c      	mov	r4, r1
 801733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017340:	f000 f94a 	bl	80175d8 <_read_r>
 8017344:	2800      	cmp	r0, #0
 8017346:	bfab      	itete	ge
 8017348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801734a:	89a3      	ldrhlt	r3, [r4, #12]
 801734c:	181b      	addge	r3, r3, r0
 801734e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017352:	bfac      	ite	ge
 8017354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017356:	81a3      	strhlt	r3, [r4, #12]
 8017358:	bd10      	pop	{r4, pc}

0801735a <__seofread>:
 801735a:	2000      	movs	r0, #0
 801735c:	4770      	bx	lr

0801735e <__swrite>:
 801735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017362:	461f      	mov	r7, r3
 8017364:	898b      	ldrh	r3, [r1, #12]
 8017366:	05db      	lsls	r3, r3, #23
 8017368:	4605      	mov	r5, r0
 801736a:	460c      	mov	r4, r1
 801736c:	4616      	mov	r6, r2
 801736e:	d505      	bpl.n	801737c <__swrite+0x1e>
 8017370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017374:	2302      	movs	r3, #2
 8017376:	2200      	movs	r2, #0
 8017378:	f000 f91c 	bl	80175b4 <_lseek_r>
 801737c:	89a3      	ldrh	r3, [r4, #12]
 801737e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017386:	81a3      	strh	r3, [r4, #12]
 8017388:	4632      	mov	r2, r6
 801738a:	463b      	mov	r3, r7
 801738c:	4628      	mov	r0, r5
 801738e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017392:	f000 b943 	b.w	801761c <_write_r>

08017396 <__sseek>:
 8017396:	b510      	push	{r4, lr}
 8017398:	460c      	mov	r4, r1
 801739a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801739e:	f000 f909 	bl	80175b4 <_lseek_r>
 80173a2:	1c43      	adds	r3, r0, #1
 80173a4:	89a3      	ldrh	r3, [r4, #12]
 80173a6:	bf15      	itete	ne
 80173a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80173aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80173ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80173b2:	81a3      	strheq	r3, [r4, #12]
 80173b4:	bf18      	it	ne
 80173b6:	81a3      	strhne	r3, [r4, #12]
 80173b8:	bd10      	pop	{r4, pc}

080173ba <__sclose>:
 80173ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173be:	f000 b893 	b.w	80174e8 <_close_r>

080173c2 <memset>:
 80173c2:	4402      	add	r2, r0
 80173c4:	4603      	mov	r3, r0
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d100      	bne.n	80173cc <memset+0xa>
 80173ca:	4770      	bx	lr
 80173cc:	f803 1b01 	strb.w	r1, [r3], #1
 80173d0:	e7f9      	b.n	80173c6 <memset+0x4>
	...

080173d4 <strdup>:
 80173d4:	4b02      	ldr	r3, [pc, #8]	@ (80173e0 <strdup+0xc>)
 80173d6:	4601      	mov	r1, r0
 80173d8:	6818      	ldr	r0, [r3, #0]
 80173da:	f000 b803 	b.w	80173e4 <_strdup_r>
 80173de:	bf00      	nop
 80173e0:	24000280 	.word	0x24000280

080173e4 <_strdup_r>:
 80173e4:	b570      	push	{r4, r5, r6, lr}
 80173e6:	4604      	mov	r4, r0
 80173e8:	4608      	mov	r0, r1
 80173ea:	460d      	mov	r5, r1
 80173ec:	f7e8 ff78 	bl	80002e0 <strlen>
 80173f0:	1c46      	adds	r6, r0, #1
 80173f2:	4631      	mov	r1, r6
 80173f4:	4620      	mov	r0, r4
 80173f6:	f7fe fda1 	bl	8015f3c <_malloc_r>
 80173fa:	4604      	mov	r4, r0
 80173fc:	b118      	cbz	r0, 8017406 <_strdup_r+0x22>
 80173fe:	4632      	mov	r2, r6
 8017400:	4629      	mov	r1, r5
 8017402:	f000 f94a 	bl	801769a <memcpy>
 8017406:	4620      	mov	r0, r4
 8017408:	bd70      	pop	{r4, r5, r6, pc}

0801740a <strncmp>:
 801740a:	b510      	push	{r4, lr}
 801740c:	b16a      	cbz	r2, 801742a <strncmp+0x20>
 801740e:	3901      	subs	r1, #1
 8017410:	1884      	adds	r4, r0, r2
 8017412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017416:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801741a:	429a      	cmp	r2, r3
 801741c:	d103      	bne.n	8017426 <strncmp+0x1c>
 801741e:	42a0      	cmp	r0, r4
 8017420:	d001      	beq.n	8017426 <strncmp+0x1c>
 8017422:	2a00      	cmp	r2, #0
 8017424:	d1f5      	bne.n	8017412 <strncmp+0x8>
 8017426:	1ad0      	subs	r0, r2, r3
 8017428:	bd10      	pop	{r4, pc}
 801742a:	4610      	mov	r0, r2
 801742c:	e7fc      	b.n	8017428 <strncmp+0x1e>
	...

08017430 <strtok>:
 8017430:	4b16      	ldr	r3, [pc, #88]	@ (801748c <strtok+0x5c>)
 8017432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017436:	681f      	ldr	r7, [r3, #0]
 8017438:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801743a:	4605      	mov	r5, r0
 801743c:	460e      	mov	r6, r1
 801743e:	b9ec      	cbnz	r4, 801747c <strtok+0x4c>
 8017440:	2050      	movs	r0, #80	@ 0x50
 8017442:	f7fe fd49 	bl	8015ed8 <malloc>
 8017446:	4602      	mov	r2, r0
 8017448:	6478      	str	r0, [r7, #68]	@ 0x44
 801744a:	b920      	cbnz	r0, 8017456 <strtok+0x26>
 801744c:	4b10      	ldr	r3, [pc, #64]	@ (8017490 <strtok+0x60>)
 801744e:	4811      	ldr	r0, [pc, #68]	@ (8017494 <strtok+0x64>)
 8017450:	215b      	movs	r1, #91	@ 0x5b
 8017452:	f000 f93f 	bl	80176d4 <__assert_func>
 8017456:	e9c0 4400 	strd	r4, r4, [r0]
 801745a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801745e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017462:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8017466:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801746a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801746e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8017472:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8017476:	6184      	str	r4, [r0, #24]
 8017478:	7704      	strb	r4, [r0, #28]
 801747a:	6244      	str	r4, [r0, #36]	@ 0x24
 801747c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801747e:	4631      	mov	r1, r6
 8017480:	4628      	mov	r0, r5
 8017482:	2301      	movs	r3, #1
 8017484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017488:	f000 b806 	b.w	8017498 <__strtok_r>
 801748c:	24000280 	.word	0x24000280
 8017490:	08019fb6 	.word	0x08019fb6
 8017494:	08019fcd 	.word	0x08019fcd

08017498 <__strtok_r>:
 8017498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801749a:	4604      	mov	r4, r0
 801749c:	b908      	cbnz	r0, 80174a2 <__strtok_r+0xa>
 801749e:	6814      	ldr	r4, [r2, #0]
 80174a0:	b144      	cbz	r4, 80174b4 <__strtok_r+0x1c>
 80174a2:	4620      	mov	r0, r4
 80174a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80174a8:	460f      	mov	r7, r1
 80174aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80174ae:	b91e      	cbnz	r6, 80174b8 <__strtok_r+0x20>
 80174b0:	b965      	cbnz	r5, 80174cc <__strtok_r+0x34>
 80174b2:	6015      	str	r5, [r2, #0]
 80174b4:	2000      	movs	r0, #0
 80174b6:	e005      	b.n	80174c4 <__strtok_r+0x2c>
 80174b8:	42b5      	cmp	r5, r6
 80174ba:	d1f6      	bne.n	80174aa <__strtok_r+0x12>
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1f0      	bne.n	80174a2 <__strtok_r+0xa>
 80174c0:	6014      	str	r4, [r2, #0]
 80174c2:	7003      	strb	r3, [r0, #0]
 80174c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c6:	461c      	mov	r4, r3
 80174c8:	e00c      	b.n	80174e4 <__strtok_r+0x4c>
 80174ca:	b915      	cbnz	r5, 80174d2 <__strtok_r+0x3a>
 80174cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80174d0:	460e      	mov	r6, r1
 80174d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80174d6:	42ab      	cmp	r3, r5
 80174d8:	d1f7      	bne.n	80174ca <__strtok_r+0x32>
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d0f3      	beq.n	80174c6 <__strtok_r+0x2e>
 80174de:	2300      	movs	r3, #0
 80174e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80174e4:	6014      	str	r4, [r2, #0]
 80174e6:	e7ed      	b.n	80174c4 <__strtok_r+0x2c>

080174e8 <_close_r>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4d06      	ldr	r5, [pc, #24]	@ (8017504 <_close_r+0x1c>)
 80174ec:	2300      	movs	r3, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	4608      	mov	r0, r1
 80174f2:	602b      	str	r3, [r5, #0]
 80174f4:	f7ea ff8e 	bl	8002414 <_close>
 80174f8:	1c43      	adds	r3, r0, #1
 80174fa:	d102      	bne.n	8017502 <_close_r+0x1a>
 80174fc:	682b      	ldr	r3, [r5, #0]
 80174fe:	b103      	cbz	r3, 8017502 <_close_r+0x1a>
 8017500:	6023      	str	r3, [r4, #0]
 8017502:	bd38      	pop	{r3, r4, r5, pc}
 8017504:	24006e7c 	.word	0x24006e7c

08017508 <_reclaim_reent>:
 8017508:	4b29      	ldr	r3, [pc, #164]	@ (80175b0 <_reclaim_reent+0xa8>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	4283      	cmp	r3, r0
 801750e:	b570      	push	{r4, r5, r6, lr}
 8017510:	4604      	mov	r4, r0
 8017512:	d04b      	beq.n	80175ac <_reclaim_reent+0xa4>
 8017514:	69c3      	ldr	r3, [r0, #28]
 8017516:	b1ab      	cbz	r3, 8017544 <_reclaim_reent+0x3c>
 8017518:	68db      	ldr	r3, [r3, #12]
 801751a:	b16b      	cbz	r3, 8017538 <_reclaim_reent+0x30>
 801751c:	2500      	movs	r5, #0
 801751e:	69e3      	ldr	r3, [r4, #28]
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	5959      	ldr	r1, [r3, r5]
 8017524:	2900      	cmp	r1, #0
 8017526:	d13b      	bne.n	80175a0 <_reclaim_reent+0x98>
 8017528:	3504      	adds	r5, #4
 801752a:	2d80      	cmp	r5, #128	@ 0x80
 801752c:	d1f7      	bne.n	801751e <_reclaim_reent+0x16>
 801752e:	69e3      	ldr	r3, [r4, #28]
 8017530:	4620      	mov	r0, r4
 8017532:	68d9      	ldr	r1, [r3, #12]
 8017534:	f000 f8ec 	bl	8017710 <_free_r>
 8017538:	69e3      	ldr	r3, [r4, #28]
 801753a:	6819      	ldr	r1, [r3, #0]
 801753c:	b111      	cbz	r1, 8017544 <_reclaim_reent+0x3c>
 801753e:	4620      	mov	r0, r4
 8017540:	f000 f8e6 	bl	8017710 <_free_r>
 8017544:	6961      	ldr	r1, [r4, #20]
 8017546:	b111      	cbz	r1, 801754e <_reclaim_reent+0x46>
 8017548:	4620      	mov	r0, r4
 801754a:	f000 f8e1 	bl	8017710 <_free_r>
 801754e:	69e1      	ldr	r1, [r4, #28]
 8017550:	b111      	cbz	r1, 8017558 <_reclaim_reent+0x50>
 8017552:	4620      	mov	r0, r4
 8017554:	f000 f8dc 	bl	8017710 <_free_r>
 8017558:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801755a:	b111      	cbz	r1, 8017562 <_reclaim_reent+0x5a>
 801755c:	4620      	mov	r0, r4
 801755e:	f000 f8d7 	bl	8017710 <_free_r>
 8017562:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017564:	b111      	cbz	r1, 801756c <_reclaim_reent+0x64>
 8017566:	4620      	mov	r0, r4
 8017568:	f000 f8d2 	bl	8017710 <_free_r>
 801756c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801756e:	b111      	cbz	r1, 8017576 <_reclaim_reent+0x6e>
 8017570:	4620      	mov	r0, r4
 8017572:	f000 f8cd 	bl	8017710 <_free_r>
 8017576:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017578:	b111      	cbz	r1, 8017580 <_reclaim_reent+0x78>
 801757a:	4620      	mov	r0, r4
 801757c:	f000 f8c8 	bl	8017710 <_free_r>
 8017580:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017582:	b111      	cbz	r1, 801758a <_reclaim_reent+0x82>
 8017584:	4620      	mov	r0, r4
 8017586:	f000 f8c3 	bl	8017710 <_free_r>
 801758a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801758c:	b111      	cbz	r1, 8017594 <_reclaim_reent+0x8c>
 801758e:	4620      	mov	r0, r4
 8017590:	f000 f8be 	bl	8017710 <_free_r>
 8017594:	6a23      	ldr	r3, [r4, #32]
 8017596:	b14b      	cbz	r3, 80175ac <_reclaim_reent+0xa4>
 8017598:	4620      	mov	r0, r4
 801759a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801759e:	4718      	bx	r3
 80175a0:	680e      	ldr	r6, [r1, #0]
 80175a2:	4620      	mov	r0, r4
 80175a4:	f000 f8b4 	bl	8017710 <_free_r>
 80175a8:	4631      	mov	r1, r6
 80175aa:	e7bb      	b.n	8017524 <_reclaim_reent+0x1c>
 80175ac:	bd70      	pop	{r4, r5, r6, pc}
 80175ae:	bf00      	nop
 80175b0:	24000280 	.word	0x24000280

080175b4 <_lseek_r>:
 80175b4:	b538      	push	{r3, r4, r5, lr}
 80175b6:	4d07      	ldr	r5, [pc, #28]	@ (80175d4 <_lseek_r+0x20>)
 80175b8:	4604      	mov	r4, r0
 80175ba:	4608      	mov	r0, r1
 80175bc:	4611      	mov	r1, r2
 80175be:	2200      	movs	r2, #0
 80175c0:	602a      	str	r2, [r5, #0]
 80175c2:	461a      	mov	r2, r3
 80175c4:	f7ea ff4d 	bl	8002462 <_lseek>
 80175c8:	1c43      	adds	r3, r0, #1
 80175ca:	d102      	bne.n	80175d2 <_lseek_r+0x1e>
 80175cc:	682b      	ldr	r3, [r5, #0]
 80175ce:	b103      	cbz	r3, 80175d2 <_lseek_r+0x1e>
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	bd38      	pop	{r3, r4, r5, pc}
 80175d4:	24006e7c 	.word	0x24006e7c

080175d8 <_read_r>:
 80175d8:	b538      	push	{r3, r4, r5, lr}
 80175da:	4d07      	ldr	r5, [pc, #28]	@ (80175f8 <_read_r+0x20>)
 80175dc:	4604      	mov	r4, r0
 80175de:	4608      	mov	r0, r1
 80175e0:	4611      	mov	r1, r2
 80175e2:	2200      	movs	r2, #0
 80175e4:	602a      	str	r2, [r5, #0]
 80175e6:	461a      	mov	r2, r3
 80175e8:	f7ea fef7 	bl	80023da <_read>
 80175ec:	1c43      	adds	r3, r0, #1
 80175ee:	d102      	bne.n	80175f6 <_read_r+0x1e>
 80175f0:	682b      	ldr	r3, [r5, #0]
 80175f2:	b103      	cbz	r3, 80175f6 <_read_r+0x1e>
 80175f4:	6023      	str	r3, [r4, #0]
 80175f6:	bd38      	pop	{r3, r4, r5, pc}
 80175f8:	24006e7c 	.word	0x24006e7c

080175fc <_sbrk_r>:
 80175fc:	b538      	push	{r3, r4, r5, lr}
 80175fe:	4d06      	ldr	r5, [pc, #24]	@ (8017618 <_sbrk_r+0x1c>)
 8017600:	2300      	movs	r3, #0
 8017602:	4604      	mov	r4, r0
 8017604:	4608      	mov	r0, r1
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	f7ea ff38 	bl	800247c <_sbrk>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d102      	bne.n	8017616 <_sbrk_r+0x1a>
 8017610:	682b      	ldr	r3, [r5, #0]
 8017612:	b103      	cbz	r3, 8017616 <_sbrk_r+0x1a>
 8017614:	6023      	str	r3, [r4, #0]
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	24006e7c 	.word	0x24006e7c

0801761c <_write_r>:
 801761c:	b538      	push	{r3, r4, r5, lr}
 801761e:	4d07      	ldr	r5, [pc, #28]	@ (801763c <_write_r+0x20>)
 8017620:	4604      	mov	r4, r0
 8017622:	4608      	mov	r0, r1
 8017624:	4611      	mov	r1, r2
 8017626:	2200      	movs	r2, #0
 8017628:	602a      	str	r2, [r5, #0]
 801762a:	461a      	mov	r2, r3
 801762c:	f7e9 fb9b 	bl	8000d66 <_write>
 8017630:	1c43      	adds	r3, r0, #1
 8017632:	d102      	bne.n	801763a <_write_r+0x1e>
 8017634:	682b      	ldr	r3, [r5, #0]
 8017636:	b103      	cbz	r3, 801763a <_write_r+0x1e>
 8017638:	6023      	str	r3, [r4, #0]
 801763a:	bd38      	pop	{r3, r4, r5, pc}
 801763c:	24006e7c 	.word	0x24006e7c

08017640 <__errno>:
 8017640:	4b01      	ldr	r3, [pc, #4]	@ (8017648 <__errno+0x8>)
 8017642:	6818      	ldr	r0, [r3, #0]
 8017644:	4770      	bx	lr
 8017646:	bf00      	nop
 8017648:	24000280 	.word	0x24000280

0801764c <__libc_init_array>:
 801764c:	b570      	push	{r4, r5, r6, lr}
 801764e:	4d0d      	ldr	r5, [pc, #52]	@ (8017684 <__libc_init_array+0x38>)
 8017650:	4c0d      	ldr	r4, [pc, #52]	@ (8017688 <__libc_init_array+0x3c>)
 8017652:	1b64      	subs	r4, r4, r5
 8017654:	10a4      	asrs	r4, r4, #2
 8017656:	2600      	movs	r6, #0
 8017658:	42a6      	cmp	r6, r4
 801765a:	d109      	bne.n	8017670 <__libc_init_array+0x24>
 801765c:	4d0b      	ldr	r5, [pc, #44]	@ (801768c <__libc_init_array+0x40>)
 801765e:	4c0c      	ldr	r4, [pc, #48]	@ (8017690 <__libc_init_array+0x44>)
 8017660:	f002 fb54 	bl	8019d0c <_init>
 8017664:	1b64      	subs	r4, r4, r5
 8017666:	10a4      	asrs	r4, r4, #2
 8017668:	2600      	movs	r6, #0
 801766a:	42a6      	cmp	r6, r4
 801766c:	d105      	bne.n	801767a <__libc_init_array+0x2e>
 801766e:	bd70      	pop	{r4, r5, r6, pc}
 8017670:	f855 3b04 	ldr.w	r3, [r5], #4
 8017674:	4798      	blx	r3
 8017676:	3601      	adds	r6, #1
 8017678:	e7ee      	b.n	8017658 <__libc_init_array+0xc>
 801767a:	f855 3b04 	ldr.w	r3, [r5], #4
 801767e:	4798      	blx	r3
 8017680:	3601      	adds	r6, #1
 8017682:	e7f2      	b.n	801766a <__libc_init_array+0x1e>
 8017684:	0801a290 	.word	0x0801a290
 8017688:	0801a290 	.word	0x0801a290
 801768c:	0801a290 	.word	0x0801a290
 8017690:	0801a294 	.word	0x0801a294

08017694 <__retarget_lock_init_recursive>:
 8017694:	4770      	bx	lr

08017696 <__retarget_lock_acquire_recursive>:
 8017696:	4770      	bx	lr

08017698 <__retarget_lock_release_recursive>:
 8017698:	4770      	bx	lr

0801769a <memcpy>:
 801769a:	440a      	add	r2, r1
 801769c:	4291      	cmp	r1, r2
 801769e:	f100 33ff 	add.w	r3, r0, #4294967295
 80176a2:	d100      	bne.n	80176a6 <memcpy+0xc>
 80176a4:	4770      	bx	lr
 80176a6:	b510      	push	{r4, lr}
 80176a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80176b0:	4291      	cmp	r1, r2
 80176b2:	d1f9      	bne.n	80176a8 <memcpy+0xe>
 80176b4:	bd10      	pop	{r4, pc}
	...

080176b8 <nan>:
 80176b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80176c0 <nan+0x8>
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop
 80176c0:	00000000 	.word	0x00000000
 80176c4:	7ff80000 	.word	0x7ff80000

080176c8 <nanf>:
 80176c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80176d0 <nanf+0x8>
 80176cc:	4770      	bx	lr
 80176ce:	bf00      	nop
 80176d0:	7fc00000 	.word	0x7fc00000

080176d4 <__assert_func>:
 80176d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176d6:	4614      	mov	r4, r2
 80176d8:	461a      	mov	r2, r3
 80176da:	4b09      	ldr	r3, [pc, #36]	@ (8017700 <__assert_func+0x2c>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	4605      	mov	r5, r0
 80176e0:	68d8      	ldr	r0, [r3, #12]
 80176e2:	b954      	cbnz	r4, 80176fa <__assert_func+0x26>
 80176e4:	4b07      	ldr	r3, [pc, #28]	@ (8017704 <__assert_func+0x30>)
 80176e6:	461c      	mov	r4, r3
 80176e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80176ec:	9100      	str	r1, [sp, #0]
 80176ee:	462b      	mov	r3, r5
 80176f0:	4905      	ldr	r1, [pc, #20]	@ (8017708 <__assert_func+0x34>)
 80176f2:	f002 f84d 	bl	8019790 <fiprintf>
 80176f6:	f002 f97f 	bl	80199f8 <abort>
 80176fa:	4b04      	ldr	r3, [pc, #16]	@ (801770c <__assert_func+0x38>)
 80176fc:	e7f4      	b.n	80176e8 <__assert_func+0x14>
 80176fe:	bf00      	nop
 8017700:	24000280 	.word	0x24000280
 8017704:	0801a06a 	.word	0x0801a06a
 8017708:	0801a03c 	.word	0x0801a03c
 801770c:	0801a02f 	.word	0x0801a02f

08017710 <_free_r>:
 8017710:	b538      	push	{r3, r4, r5, lr}
 8017712:	4605      	mov	r5, r0
 8017714:	2900      	cmp	r1, #0
 8017716:	d041      	beq.n	801779c <_free_r+0x8c>
 8017718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801771c:	1f0c      	subs	r4, r1, #4
 801771e:	2b00      	cmp	r3, #0
 8017720:	bfb8      	it	lt
 8017722:	18e4      	addlt	r4, r4, r3
 8017724:	f7fe fc8a 	bl	801603c <__malloc_lock>
 8017728:	4a1d      	ldr	r2, [pc, #116]	@ (80177a0 <_free_r+0x90>)
 801772a:	6813      	ldr	r3, [r2, #0]
 801772c:	b933      	cbnz	r3, 801773c <_free_r+0x2c>
 801772e:	6063      	str	r3, [r4, #4]
 8017730:	6014      	str	r4, [r2, #0]
 8017732:	4628      	mov	r0, r5
 8017734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017738:	f7fe bc86 	b.w	8016048 <__malloc_unlock>
 801773c:	42a3      	cmp	r3, r4
 801773e:	d908      	bls.n	8017752 <_free_r+0x42>
 8017740:	6820      	ldr	r0, [r4, #0]
 8017742:	1821      	adds	r1, r4, r0
 8017744:	428b      	cmp	r3, r1
 8017746:	bf01      	itttt	eq
 8017748:	6819      	ldreq	r1, [r3, #0]
 801774a:	685b      	ldreq	r3, [r3, #4]
 801774c:	1809      	addeq	r1, r1, r0
 801774e:	6021      	streq	r1, [r4, #0]
 8017750:	e7ed      	b.n	801772e <_free_r+0x1e>
 8017752:	461a      	mov	r2, r3
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	b10b      	cbz	r3, 801775c <_free_r+0x4c>
 8017758:	42a3      	cmp	r3, r4
 801775a:	d9fa      	bls.n	8017752 <_free_r+0x42>
 801775c:	6811      	ldr	r1, [r2, #0]
 801775e:	1850      	adds	r0, r2, r1
 8017760:	42a0      	cmp	r0, r4
 8017762:	d10b      	bne.n	801777c <_free_r+0x6c>
 8017764:	6820      	ldr	r0, [r4, #0]
 8017766:	4401      	add	r1, r0
 8017768:	1850      	adds	r0, r2, r1
 801776a:	4283      	cmp	r3, r0
 801776c:	6011      	str	r1, [r2, #0]
 801776e:	d1e0      	bne.n	8017732 <_free_r+0x22>
 8017770:	6818      	ldr	r0, [r3, #0]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	6053      	str	r3, [r2, #4]
 8017776:	4408      	add	r0, r1
 8017778:	6010      	str	r0, [r2, #0]
 801777a:	e7da      	b.n	8017732 <_free_r+0x22>
 801777c:	d902      	bls.n	8017784 <_free_r+0x74>
 801777e:	230c      	movs	r3, #12
 8017780:	602b      	str	r3, [r5, #0]
 8017782:	e7d6      	b.n	8017732 <_free_r+0x22>
 8017784:	6820      	ldr	r0, [r4, #0]
 8017786:	1821      	adds	r1, r4, r0
 8017788:	428b      	cmp	r3, r1
 801778a:	bf04      	itt	eq
 801778c:	6819      	ldreq	r1, [r3, #0]
 801778e:	685b      	ldreq	r3, [r3, #4]
 8017790:	6063      	str	r3, [r4, #4]
 8017792:	bf04      	itt	eq
 8017794:	1809      	addeq	r1, r1, r0
 8017796:	6021      	streq	r1, [r4, #0]
 8017798:	6054      	str	r4, [r2, #4]
 801779a:	e7ca      	b.n	8017732 <_free_r+0x22>
 801779c:	bd38      	pop	{r3, r4, r5, pc}
 801779e:	bf00      	nop
 80177a0:	24006d3c 	.word	0x24006d3c

080177a4 <rshift>:
 80177a4:	6903      	ldr	r3, [r0, #16]
 80177a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80177aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80177b2:	f100 0414 	add.w	r4, r0, #20
 80177b6:	dd45      	ble.n	8017844 <rshift+0xa0>
 80177b8:	f011 011f 	ands.w	r1, r1, #31
 80177bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80177c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80177c4:	d10c      	bne.n	80177e0 <rshift+0x3c>
 80177c6:	f100 0710 	add.w	r7, r0, #16
 80177ca:	4629      	mov	r1, r5
 80177cc:	42b1      	cmp	r1, r6
 80177ce:	d334      	bcc.n	801783a <rshift+0x96>
 80177d0:	1a9b      	subs	r3, r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	1eea      	subs	r2, r5, #3
 80177d6:	4296      	cmp	r6, r2
 80177d8:	bf38      	it	cc
 80177da:	2300      	movcc	r3, #0
 80177dc:	4423      	add	r3, r4
 80177de:	e015      	b.n	801780c <rshift+0x68>
 80177e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80177e4:	f1c1 0820 	rsb	r8, r1, #32
 80177e8:	40cf      	lsrs	r7, r1
 80177ea:	f105 0e04 	add.w	lr, r5, #4
 80177ee:	46a1      	mov	r9, r4
 80177f0:	4576      	cmp	r6, lr
 80177f2:	46f4      	mov	ip, lr
 80177f4:	d815      	bhi.n	8017822 <rshift+0x7e>
 80177f6:	1a9a      	subs	r2, r3, r2
 80177f8:	0092      	lsls	r2, r2, #2
 80177fa:	3a04      	subs	r2, #4
 80177fc:	3501      	adds	r5, #1
 80177fe:	42ae      	cmp	r6, r5
 8017800:	bf38      	it	cc
 8017802:	2200      	movcc	r2, #0
 8017804:	18a3      	adds	r3, r4, r2
 8017806:	50a7      	str	r7, [r4, r2]
 8017808:	b107      	cbz	r7, 801780c <rshift+0x68>
 801780a:	3304      	adds	r3, #4
 801780c:	1b1a      	subs	r2, r3, r4
 801780e:	42a3      	cmp	r3, r4
 8017810:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017814:	bf08      	it	eq
 8017816:	2300      	moveq	r3, #0
 8017818:	6102      	str	r2, [r0, #16]
 801781a:	bf08      	it	eq
 801781c:	6143      	streq	r3, [r0, #20]
 801781e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017822:	f8dc c000 	ldr.w	ip, [ip]
 8017826:	fa0c fc08 	lsl.w	ip, ip, r8
 801782a:	ea4c 0707 	orr.w	r7, ip, r7
 801782e:	f849 7b04 	str.w	r7, [r9], #4
 8017832:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017836:	40cf      	lsrs	r7, r1
 8017838:	e7da      	b.n	80177f0 <rshift+0x4c>
 801783a:	f851 cb04 	ldr.w	ip, [r1], #4
 801783e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017842:	e7c3      	b.n	80177cc <rshift+0x28>
 8017844:	4623      	mov	r3, r4
 8017846:	e7e1      	b.n	801780c <rshift+0x68>

08017848 <__hexdig_fun>:
 8017848:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801784c:	2b09      	cmp	r3, #9
 801784e:	d802      	bhi.n	8017856 <__hexdig_fun+0xe>
 8017850:	3820      	subs	r0, #32
 8017852:	b2c0      	uxtb	r0, r0
 8017854:	4770      	bx	lr
 8017856:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801785a:	2b05      	cmp	r3, #5
 801785c:	d801      	bhi.n	8017862 <__hexdig_fun+0x1a>
 801785e:	3847      	subs	r0, #71	@ 0x47
 8017860:	e7f7      	b.n	8017852 <__hexdig_fun+0xa>
 8017862:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017866:	2b05      	cmp	r3, #5
 8017868:	d801      	bhi.n	801786e <__hexdig_fun+0x26>
 801786a:	3827      	subs	r0, #39	@ 0x27
 801786c:	e7f1      	b.n	8017852 <__hexdig_fun+0xa>
 801786e:	2000      	movs	r0, #0
 8017870:	4770      	bx	lr
	...

08017874 <__gethex>:
 8017874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017878:	b085      	sub	sp, #20
 801787a:	468a      	mov	sl, r1
 801787c:	9302      	str	r3, [sp, #8]
 801787e:	680b      	ldr	r3, [r1, #0]
 8017880:	9001      	str	r0, [sp, #4]
 8017882:	4690      	mov	r8, r2
 8017884:	1c9c      	adds	r4, r3, #2
 8017886:	46a1      	mov	r9, r4
 8017888:	f814 0b01 	ldrb.w	r0, [r4], #1
 801788c:	2830      	cmp	r0, #48	@ 0x30
 801788e:	d0fa      	beq.n	8017886 <__gethex+0x12>
 8017890:	eba9 0303 	sub.w	r3, r9, r3
 8017894:	f1a3 0b02 	sub.w	fp, r3, #2
 8017898:	f7ff ffd6 	bl	8017848 <__hexdig_fun>
 801789c:	4605      	mov	r5, r0
 801789e:	2800      	cmp	r0, #0
 80178a0:	d168      	bne.n	8017974 <__gethex+0x100>
 80178a2:	49a0      	ldr	r1, [pc, #640]	@ (8017b24 <__gethex+0x2b0>)
 80178a4:	2201      	movs	r2, #1
 80178a6:	4648      	mov	r0, r9
 80178a8:	f7ff fdaf 	bl	801740a <strncmp>
 80178ac:	4607      	mov	r7, r0
 80178ae:	2800      	cmp	r0, #0
 80178b0:	d167      	bne.n	8017982 <__gethex+0x10e>
 80178b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80178b6:	4626      	mov	r6, r4
 80178b8:	f7ff ffc6 	bl	8017848 <__hexdig_fun>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d062      	beq.n	8017986 <__gethex+0x112>
 80178c0:	4623      	mov	r3, r4
 80178c2:	7818      	ldrb	r0, [r3, #0]
 80178c4:	2830      	cmp	r0, #48	@ 0x30
 80178c6:	4699      	mov	r9, r3
 80178c8:	f103 0301 	add.w	r3, r3, #1
 80178cc:	d0f9      	beq.n	80178c2 <__gethex+0x4e>
 80178ce:	f7ff ffbb 	bl	8017848 <__hexdig_fun>
 80178d2:	fab0 f580 	clz	r5, r0
 80178d6:	096d      	lsrs	r5, r5, #5
 80178d8:	f04f 0b01 	mov.w	fp, #1
 80178dc:	464a      	mov	r2, r9
 80178de:	4616      	mov	r6, r2
 80178e0:	3201      	adds	r2, #1
 80178e2:	7830      	ldrb	r0, [r6, #0]
 80178e4:	f7ff ffb0 	bl	8017848 <__hexdig_fun>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d1f8      	bne.n	80178de <__gethex+0x6a>
 80178ec:	498d      	ldr	r1, [pc, #564]	@ (8017b24 <__gethex+0x2b0>)
 80178ee:	2201      	movs	r2, #1
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff fd8a 	bl	801740a <strncmp>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	d13f      	bne.n	801797a <__gethex+0x106>
 80178fa:	b944      	cbnz	r4, 801790e <__gethex+0x9a>
 80178fc:	1c74      	adds	r4, r6, #1
 80178fe:	4622      	mov	r2, r4
 8017900:	4616      	mov	r6, r2
 8017902:	3201      	adds	r2, #1
 8017904:	7830      	ldrb	r0, [r6, #0]
 8017906:	f7ff ff9f 	bl	8017848 <__hexdig_fun>
 801790a:	2800      	cmp	r0, #0
 801790c:	d1f8      	bne.n	8017900 <__gethex+0x8c>
 801790e:	1ba4      	subs	r4, r4, r6
 8017910:	00a7      	lsls	r7, r4, #2
 8017912:	7833      	ldrb	r3, [r6, #0]
 8017914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017918:	2b50      	cmp	r3, #80	@ 0x50
 801791a:	d13e      	bne.n	801799a <__gethex+0x126>
 801791c:	7873      	ldrb	r3, [r6, #1]
 801791e:	2b2b      	cmp	r3, #43	@ 0x2b
 8017920:	d033      	beq.n	801798a <__gethex+0x116>
 8017922:	2b2d      	cmp	r3, #45	@ 0x2d
 8017924:	d034      	beq.n	8017990 <__gethex+0x11c>
 8017926:	1c71      	adds	r1, r6, #1
 8017928:	2400      	movs	r4, #0
 801792a:	7808      	ldrb	r0, [r1, #0]
 801792c:	f7ff ff8c 	bl	8017848 <__hexdig_fun>
 8017930:	1e43      	subs	r3, r0, #1
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b18      	cmp	r3, #24
 8017936:	d830      	bhi.n	801799a <__gethex+0x126>
 8017938:	f1a0 0210 	sub.w	r2, r0, #16
 801793c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017940:	f7ff ff82 	bl	8017848 <__hexdig_fun>
 8017944:	f100 3cff 	add.w	ip, r0, #4294967295
 8017948:	fa5f fc8c 	uxtb.w	ip, ip
 801794c:	f1bc 0f18 	cmp.w	ip, #24
 8017950:	f04f 030a 	mov.w	r3, #10
 8017954:	d91e      	bls.n	8017994 <__gethex+0x120>
 8017956:	b104      	cbz	r4, 801795a <__gethex+0xe6>
 8017958:	4252      	negs	r2, r2
 801795a:	4417      	add	r7, r2
 801795c:	f8ca 1000 	str.w	r1, [sl]
 8017960:	b1ed      	cbz	r5, 801799e <__gethex+0x12a>
 8017962:	f1bb 0f00 	cmp.w	fp, #0
 8017966:	bf0c      	ite	eq
 8017968:	2506      	moveq	r5, #6
 801796a:	2500      	movne	r5, #0
 801796c:	4628      	mov	r0, r5
 801796e:	b005      	add	sp, #20
 8017970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017974:	2500      	movs	r5, #0
 8017976:	462c      	mov	r4, r5
 8017978:	e7b0      	b.n	80178dc <__gethex+0x68>
 801797a:	2c00      	cmp	r4, #0
 801797c:	d1c7      	bne.n	801790e <__gethex+0x9a>
 801797e:	4627      	mov	r7, r4
 8017980:	e7c7      	b.n	8017912 <__gethex+0x9e>
 8017982:	464e      	mov	r6, r9
 8017984:	462f      	mov	r7, r5
 8017986:	2501      	movs	r5, #1
 8017988:	e7c3      	b.n	8017912 <__gethex+0x9e>
 801798a:	2400      	movs	r4, #0
 801798c:	1cb1      	adds	r1, r6, #2
 801798e:	e7cc      	b.n	801792a <__gethex+0xb6>
 8017990:	2401      	movs	r4, #1
 8017992:	e7fb      	b.n	801798c <__gethex+0x118>
 8017994:	fb03 0002 	mla	r0, r3, r2, r0
 8017998:	e7ce      	b.n	8017938 <__gethex+0xc4>
 801799a:	4631      	mov	r1, r6
 801799c:	e7de      	b.n	801795c <__gethex+0xe8>
 801799e:	eba6 0309 	sub.w	r3, r6, r9
 80179a2:	3b01      	subs	r3, #1
 80179a4:	4629      	mov	r1, r5
 80179a6:	2b07      	cmp	r3, #7
 80179a8:	dc0a      	bgt.n	80179c0 <__gethex+0x14c>
 80179aa:	9801      	ldr	r0, [sp, #4]
 80179ac:	f000 fa46 	bl	8017e3c <_Balloc>
 80179b0:	4604      	mov	r4, r0
 80179b2:	b940      	cbnz	r0, 80179c6 <__gethex+0x152>
 80179b4:	4b5c      	ldr	r3, [pc, #368]	@ (8017b28 <__gethex+0x2b4>)
 80179b6:	4602      	mov	r2, r0
 80179b8:	21e4      	movs	r1, #228	@ 0xe4
 80179ba:	485c      	ldr	r0, [pc, #368]	@ (8017b2c <__gethex+0x2b8>)
 80179bc:	f7ff fe8a 	bl	80176d4 <__assert_func>
 80179c0:	3101      	adds	r1, #1
 80179c2:	105b      	asrs	r3, r3, #1
 80179c4:	e7ef      	b.n	80179a6 <__gethex+0x132>
 80179c6:	f100 0a14 	add.w	sl, r0, #20
 80179ca:	2300      	movs	r3, #0
 80179cc:	4655      	mov	r5, sl
 80179ce:	469b      	mov	fp, r3
 80179d0:	45b1      	cmp	r9, r6
 80179d2:	d337      	bcc.n	8017a44 <__gethex+0x1d0>
 80179d4:	f845 bb04 	str.w	fp, [r5], #4
 80179d8:	eba5 050a 	sub.w	r5, r5, sl
 80179dc:	10ad      	asrs	r5, r5, #2
 80179de:	6125      	str	r5, [r4, #16]
 80179e0:	4658      	mov	r0, fp
 80179e2:	f000 fb1d 	bl	8018020 <__hi0bits>
 80179e6:	016d      	lsls	r5, r5, #5
 80179e8:	f8d8 6000 	ldr.w	r6, [r8]
 80179ec:	1a2d      	subs	r5, r5, r0
 80179ee:	42b5      	cmp	r5, r6
 80179f0:	dd54      	ble.n	8017a9c <__gethex+0x228>
 80179f2:	1bad      	subs	r5, r5, r6
 80179f4:	4629      	mov	r1, r5
 80179f6:	4620      	mov	r0, r4
 80179f8:	f000 feae 	bl	8018758 <__any_on>
 80179fc:	4681      	mov	r9, r0
 80179fe:	b178      	cbz	r0, 8017a20 <__gethex+0x1ac>
 8017a00:	1e6b      	subs	r3, r5, #1
 8017a02:	1159      	asrs	r1, r3, #5
 8017a04:	f003 021f 	and.w	r2, r3, #31
 8017a08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017a0c:	f04f 0901 	mov.w	r9, #1
 8017a10:	fa09 f202 	lsl.w	r2, r9, r2
 8017a14:	420a      	tst	r2, r1
 8017a16:	d003      	beq.n	8017a20 <__gethex+0x1ac>
 8017a18:	454b      	cmp	r3, r9
 8017a1a:	dc36      	bgt.n	8017a8a <__gethex+0x216>
 8017a1c:	f04f 0902 	mov.w	r9, #2
 8017a20:	4629      	mov	r1, r5
 8017a22:	4620      	mov	r0, r4
 8017a24:	f7ff febe 	bl	80177a4 <rshift>
 8017a28:	442f      	add	r7, r5
 8017a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a2e:	42bb      	cmp	r3, r7
 8017a30:	da42      	bge.n	8017ab8 <__gethex+0x244>
 8017a32:	9801      	ldr	r0, [sp, #4]
 8017a34:	4621      	mov	r1, r4
 8017a36:	f000 fa41 	bl	8017ebc <_Bfree>
 8017a3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	6013      	str	r3, [r2, #0]
 8017a40:	25a3      	movs	r5, #163	@ 0xa3
 8017a42:	e793      	b.n	801796c <__gethex+0xf8>
 8017a44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017a48:	2a2e      	cmp	r2, #46	@ 0x2e
 8017a4a:	d012      	beq.n	8017a72 <__gethex+0x1fe>
 8017a4c:	2b20      	cmp	r3, #32
 8017a4e:	d104      	bne.n	8017a5a <__gethex+0x1e6>
 8017a50:	f845 bb04 	str.w	fp, [r5], #4
 8017a54:	f04f 0b00 	mov.w	fp, #0
 8017a58:	465b      	mov	r3, fp
 8017a5a:	7830      	ldrb	r0, [r6, #0]
 8017a5c:	9303      	str	r3, [sp, #12]
 8017a5e:	f7ff fef3 	bl	8017848 <__hexdig_fun>
 8017a62:	9b03      	ldr	r3, [sp, #12]
 8017a64:	f000 000f 	and.w	r0, r0, #15
 8017a68:	4098      	lsls	r0, r3
 8017a6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a6e:	3304      	adds	r3, #4
 8017a70:	e7ae      	b.n	80179d0 <__gethex+0x15c>
 8017a72:	45b1      	cmp	r9, r6
 8017a74:	d8ea      	bhi.n	8017a4c <__gethex+0x1d8>
 8017a76:	492b      	ldr	r1, [pc, #172]	@ (8017b24 <__gethex+0x2b0>)
 8017a78:	9303      	str	r3, [sp, #12]
 8017a7a:	2201      	movs	r2, #1
 8017a7c:	4630      	mov	r0, r6
 8017a7e:	f7ff fcc4 	bl	801740a <strncmp>
 8017a82:	9b03      	ldr	r3, [sp, #12]
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d1e1      	bne.n	8017a4c <__gethex+0x1d8>
 8017a88:	e7a2      	b.n	80179d0 <__gethex+0x15c>
 8017a8a:	1ea9      	subs	r1, r5, #2
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f000 fe63 	bl	8018758 <__any_on>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d0c2      	beq.n	8017a1c <__gethex+0x1a8>
 8017a96:	f04f 0903 	mov.w	r9, #3
 8017a9a:	e7c1      	b.n	8017a20 <__gethex+0x1ac>
 8017a9c:	da09      	bge.n	8017ab2 <__gethex+0x23e>
 8017a9e:	1b75      	subs	r5, r6, r5
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	9801      	ldr	r0, [sp, #4]
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	f000 fc21 	bl	80182ec <__lshift>
 8017aaa:	1b7f      	subs	r7, r7, r5
 8017aac:	4604      	mov	r4, r0
 8017aae:	f100 0a14 	add.w	sl, r0, #20
 8017ab2:	f04f 0900 	mov.w	r9, #0
 8017ab6:	e7b8      	b.n	8017a2a <__gethex+0x1b6>
 8017ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017abc:	42bd      	cmp	r5, r7
 8017abe:	dd6f      	ble.n	8017ba0 <__gethex+0x32c>
 8017ac0:	1bed      	subs	r5, r5, r7
 8017ac2:	42ae      	cmp	r6, r5
 8017ac4:	dc34      	bgt.n	8017b30 <__gethex+0x2bc>
 8017ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d022      	beq.n	8017b14 <__gethex+0x2a0>
 8017ace:	2b03      	cmp	r3, #3
 8017ad0:	d024      	beq.n	8017b1c <__gethex+0x2a8>
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	d115      	bne.n	8017b02 <__gethex+0x28e>
 8017ad6:	42ae      	cmp	r6, r5
 8017ad8:	d113      	bne.n	8017b02 <__gethex+0x28e>
 8017ada:	2e01      	cmp	r6, #1
 8017adc:	d10b      	bne.n	8017af6 <__gethex+0x282>
 8017ade:	9a02      	ldr	r2, [sp, #8]
 8017ae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ae4:	6013      	str	r3, [r2, #0]
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	6123      	str	r3, [r4, #16]
 8017aea:	f8ca 3000 	str.w	r3, [sl]
 8017aee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017af0:	2562      	movs	r5, #98	@ 0x62
 8017af2:	601c      	str	r4, [r3, #0]
 8017af4:	e73a      	b.n	801796c <__gethex+0xf8>
 8017af6:	1e71      	subs	r1, r6, #1
 8017af8:	4620      	mov	r0, r4
 8017afa:	f000 fe2d 	bl	8018758 <__any_on>
 8017afe:	2800      	cmp	r0, #0
 8017b00:	d1ed      	bne.n	8017ade <__gethex+0x26a>
 8017b02:	9801      	ldr	r0, [sp, #4]
 8017b04:	4621      	mov	r1, r4
 8017b06:	f000 f9d9 	bl	8017ebc <_Bfree>
 8017b0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	6013      	str	r3, [r2, #0]
 8017b10:	2550      	movs	r5, #80	@ 0x50
 8017b12:	e72b      	b.n	801796c <__gethex+0xf8>
 8017b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1f3      	bne.n	8017b02 <__gethex+0x28e>
 8017b1a:	e7e0      	b.n	8017ade <__gethex+0x26a>
 8017b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d1dd      	bne.n	8017ade <__gethex+0x26a>
 8017b22:	e7ee      	b.n	8017b02 <__gethex+0x28e>
 8017b24:	08019e50 	.word	0x08019e50
 8017b28:	0801a06b 	.word	0x0801a06b
 8017b2c:	0801a07c 	.word	0x0801a07c
 8017b30:	1e6f      	subs	r7, r5, #1
 8017b32:	f1b9 0f00 	cmp.w	r9, #0
 8017b36:	d130      	bne.n	8017b9a <__gethex+0x326>
 8017b38:	b127      	cbz	r7, 8017b44 <__gethex+0x2d0>
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f000 fe0b 	bl	8018758 <__any_on>
 8017b42:	4681      	mov	r9, r0
 8017b44:	117a      	asrs	r2, r7, #5
 8017b46:	2301      	movs	r3, #1
 8017b48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017b4c:	f007 071f 	and.w	r7, r7, #31
 8017b50:	40bb      	lsls	r3, r7
 8017b52:	4213      	tst	r3, r2
 8017b54:	4629      	mov	r1, r5
 8017b56:	4620      	mov	r0, r4
 8017b58:	bf18      	it	ne
 8017b5a:	f049 0902 	orrne.w	r9, r9, #2
 8017b5e:	f7ff fe21 	bl	80177a4 <rshift>
 8017b62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017b66:	1b76      	subs	r6, r6, r5
 8017b68:	2502      	movs	r5, #2
 8017b6a:	f1b9 0f00 	cmp.w	r9, #0
 8017b6e:	d047      	beq.n	8017c00 <__gethex+0x38c>
 8017b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b74:	2b02      	cmp	r3, #2
 8017b76:	d015      	beq.n	8017ba4 <__gethex+0x330>
 8017b78:	2b03      	cmp	r3, #3
 8017b7a:	d017      	beq.n	8017bac <__gethex+0x338>
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d109      	bne.n	8017b94 <__gethex+0x320>
 8017b80:	f019 0f02 	tst.w	r9, #2
 8017b84:	d006      	beq.n	8017b94 <__gethex+0x320>
 8017b86:	f8da 3000 	ldr.w	r3, [sl]
 8017b8a:	ea49 0903 	orr.w	r9, r9, r3
 8017b8e:	f019 0f01 	tst.w	r9, #1
 8017b92:	d10e      	bne.n	8017bb2 <__gethex+0x33e>
 8017b94:	f045 0510 	orr.w	r5, r5, #16
 8017b98:	e032      	b.n	8017c00 <__gethex+0x38c>
 8017b9a:	f04f 0901 	mov.w	r9, #1
 8017b9e:	e7d1      	b.n	8017b44 <__gethex+0x2d0>
 8017ba0:	2501      	movs	r5, #1
 8017ba2:	e7e2      	b.n	8017b6a <__gethex+0x2f6>
 8017ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ba6:	f1c3 0301 	rsb	r3, r3, #1
 8017baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d0f0      	beq.n	8017b94 <__gethex+0x320>
 8017bb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017bb6:	f104 0314 	add.w	r3, r4, #20
 8017bba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017bbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017bc2:	f04f 0c00 	mov.w	ip, #0
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017bd0:	d01b      	beq.n	8017c0a <__gethex+0x396>
 8017bd2:	3201      	adds	r2, #1
 8017bd4:	6002      	str	r2, [r0, #0]
 8017bd6:	2d02      	cmp	r5, #2
 8017bd8:	f104 0314 	add.w	r3, r4, #20
 8017bdc:	d13c      	bne.n	8017c58 <__gethex+0x3e4>
 8017bde:	f8d8 2000 	ldr.w	r2, [r8]
 8017be2:	3a01      	subs	r2, #1
 8017be4:	42b2      	cmp	r2, r6
 8017be6:	d109      	bne.n	8017bfc <__gethex+0x388>
 8017be8:	1171      	asrs	r1, r6, #5
 8017bea:	2201      	movs	r2, #1
 8017bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017bf0:	f006 061f 	and.w	r6, r6, #31
 8017bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8017bf8:	421e      	tst	r6, r3
 8017bfa:	d13a      	bne.n	8017c72 <__gethex+0x3fe>
 8017bfc:	f045 0520 	orr.w	r5, r5, #32
 8017c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c02:	601c      	str	r4, [r3, #0]
 8017c04:	9b02      	ldr	r3, [sp, #8]
 8017c06:	601f      	str	r7, [r3, #0]
 8017c08:	e6b0      	b.n	801796c <__gethex+0xf8>
 8017c0a:	4299      	cmp	r1, r3
 8017c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c10:	d8d9      	bhi.n	8017bc6 <__gethex+0x352>
 8017c12:	68a3      	ldr	r3, [r4, #8]
 8017c14:	459b      	cmp	fp, r3
 8017c16:	db17      	blt.n	8017c48 <__gethex+0x3d4>
 8017c18:	6861      	ldr	r1, [r4, #4]
 8017c1a:	9801      	ldr	r0, [sp, #4]
 8017c1c:	3101      	adds	r1, #1
 8017c1e:	f000 f90d 	bl	8017e3c <_Balloc>
 8017c22:	4681      	mov	r9, r0
 8017c24:	b918      	cbnz	r0, 8017c2e <__gethex+0x3ba>
 8017c26:	4b1a      	ldr	r3, [pc, #104]	@ (8017c90 <__gethex+0x41c>)
 8017c28:	4602      	mov	r2, r0
 8017c2a:	2184      	movs	r1, #132	@ 0x84
 8017c2c:	e6c5      	b.n	80179ba <__gethex+0x146>
 8017c2e:	6922      	ldr	r2, [r4, #16]
 8017c30:	3202      	adds	r2, #2
 8017c32:	f104 010c 	add.w	r1, r4, #12
 8017c36:	0092      	lsls	r2, r2, #2
 8017c38:	300c      	adds	r0, #12
 8017c3a:	f7ff fd2e 	bl	801769a <memcpy>
 8017c3e:	4621      	mov	r1, r4
 8017c40:	9801      	ldr	r0, [sp, #4]
 8017c42:	f000 f93b 	bl	8017ebc <_Bfree>
 8017c46:	464c      	mov	r4, r9
 8017c48:	6923      	ldr	r3, [r4, #16]
 8017c4a:	1c5a      	adds	r2, r3, #1
 8017c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c50:	6122      	str	r2, [r4, #16]
 8017c52:	2201      	movs	r2, #1
 8017c54:	615a      	str	r2, [r3, #20]
 8017c56:	e7be      	b.n	8017bd6 <__gethex+0x362>
 8017c58:	6922      	ldr	r2, [r4, #16]
 8017c5a:	455a      	cmp	r2, fp
 8017c5c:	dd0b      	ble.n	8017c76 <__gethex+0x402>
 8017c5e:	2101      	movs	r1, #1
 8017c60:	4620      	mov	r0, r4
 8017c62:	f7ff fd9f 	bl	80177a4 <rshift>
 8017c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c6a:	3701      	adds	r7, #1
 8017c6c:	42bb      	cmp	r3, r7
 8017c6e:	f6ff aee0 	blt.w	8017a32 <__gethex+0x1be>
 8017c72:	2501      	movs	r5, #1
 8017c74:	e7c2      	b.n	8017bfc <__gethex+0x388>
 8017c76:	f016 061f 	ands.w	r6, r6, #31
 8017c7a:	d0fa      	beq.n	8017c72 <__gethex+0x3fe>
 8017c7c:	4453      	add	r3, sl
 8017c7e:	f1c6 0620 	rsb	r6, r6, #32
 8017c82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017c86:	f000 f9cb 	bl	8018020 <__hi0bits>
 8017c8a:	42b0      	cmp	r0, r6
 8017c8c:	dbe7      	blt.n	8017c5e <__gethex+0x3ea>
 8017c8e:	e7f0      	b.n	8017c72 <__gethex+0x3fe>
 8017c90:	0801a06b 	.word	0x0801a06b

08017c94 <L_shift>:
 8017c94:	f1c2 0208 	rsb	r2, r2, #8
 8017c98:	0092      	lsls	r2, r2, #2
 8017c9a:	b570      	push	{r4, r5, r6, lr}
 8017c9c:	f1c2 0620 	rsb	r6, r2, #32
 8017ca0:	6843      	ldr	r3, [r0, #4]
 8017ca2:	6804      	ldr	r4, [r0, #0]
 8017ca4:	fa03 f506 	lsl.w	r5, r3, r6
 8017ca8:	432c      	orrs	r4, r5
 8017caa:	40d3      	lsrs	r3, r2
 8017cac:	6004      	str	r4, [r0, #0]
 8017cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8017cb2:	4288      	cmp	r0, r1
 8017cb4:	d3f4      	bcc.n	8017ca0 <L_shift+0xc>
 8017cb6:	bd70      	pop	{r4, r5, r6, pc}

08017cb8 <__match>:
 8017cb8:	b530      	push	{r4, r5, lr}
 8017cba:	6803      	ldr	r3, [r0, #0]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cc2:	b914      	cbnz	r4, 8017cca <__match+0x12>
 8017cc4:	6003      	str	r3, [r0, #0]
 8017cc6:	2001      	movs	r0, #1
 8017cc8:	bd30      	pop	{r4, r5, pc}
 8017cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017cd2:	2d19      	cmp	r5, #25
 8017cd4:	bf98      	it	ls
 8017cd6:	3220      	addls	r2, #32
 8017cd8:	42a2      	cmp	r2, r4
 8017cda:	d0f0      	beq.n	8017cbe <__match+0x6>
 8017cdc:	2000      	movs	r0, #0
 8017cde:	e7f3      	b.n	8017cc8 <__match+0x10>

08017ce0 <__hexnan>:
 8017ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce4:	680b      	ldr	r3, [r1, #0]
 8017ce6:	6801      	ldr	r1, [r0, #0]
 8017ce8:	115e      	asrs	r6, r3, #5
 8017cea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017cee:	f013 031f 	ands.w	r3, r3, #31
 8017cf2:	b087      	sub	sp, #28
 8017cf4:	bf18      	it	ne
 8017cf6:	3604      	addne	r6, #4
 8017cf8:	2500      	movs	r5, #0
 8017cfa:	1f37      	subs	r7, r6, #4
 8017cfc:	4682      	mov	sl, r0
 8017cfe:	4690      	mov	r8, r2
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d06:	46b9      	mov	r9, r7
 8017d08:	463c      	mov	r4, r7
 8017d0a:	9502      	str	r5, [sp, #8]
 8017d0c:	46ab      	mov	fp, r5
 8017d0e:	784a      	ldrb	r2, [r1, #1]
 8017d10:	1c4b      	adds	r3, r1, #1
 8017d12:	9303      	str	r3, [sp, #12]
 8017d14:	b342      	cbz	r2, 8017d68 <__hexnan+0x88>
 8017d16:	4610      	mov	r0, r2
 8017d18:	9105      	str	r1, [sp, #20]
 8017d1a:	9204      	str	r2, [sp, #16]
 8017d1c:	f7ff fd94 	bl	8017848 <__hexdig_fun>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	d151      	bne.n	8017dc8 <__hexnan+0xe8>
 8017d24:	9a04      	ldr	r2, [sp, #16]
 8017d26:	9905      	ldr	r1, [sp, #20]
 8017d28:	2a20      	cmp	r2, #32
 8017d2a:	d818      	bhi.n	8017d5e <__hexnan+0x7e>
 8017d2c:	9b02      	ldr	r3, [sp, #8]
 8017d2e:	459b      	cmp	fp, r3
 8017d30:	dd13      	ble.n	8017d5a <__hexnan+0x7a>
 8017d32:	454c      	cmp	r4, r9
 8017d34:	d206      	bcs.n	8017d44 <__hexnan+0x64>
 8017d36:	2d07      	cmp	r5, #7
 8017d38:	dc04      	bgt.n	8017d44 <__hexnan+0x64>
 8017d3a:	462a      	mov	r2, r5
 8017d3c:	4649      	mov	r1, r9
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f7ff ffa8 	bl	8017c94 <L_shift>
 8017d44:	4544      	cmp	r4, r8
 8017d46:	d952      	bls.n	8017dee <__hexnan+0x10e>
 8017d48:	2300      	movs	r3, #0
 8017d4a:	f1a4 0904 	sub.w	r9, r4, #4
 8017d4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d52:	f8cd b008 	str.w	fp, [sp, #8]
 8017d56:	464c      	mov	r4, r9
 8017d58:	461d      	mov	r5, r3
 8017d5a:	9903      	ldr	r1, [sp, #12]
 8017d5c:	e7d7      	b.n	8017d0e <__hexnan+0x2e>
 8017d5e:	2a29      	cmp	r2, #41	@ 0x29
 8017d60:	d157      	bne.n	8017e12 <__hexnan+0x132>
 8017d62:	3102      	adds	r1, #2
 8017d64:	f8ca 1000 	str.w	r1, [sl]
 8017d68:	f1bb 0f00 	cmp.w	fp, #0
 8017d6c:	d051      	beq.n	8017e12 <__hexnan+0x132>
 8017d6e:	454c      	cmp	r4, r9
 8017d70:	d206      	bcs.n	8017d80 <__hexnan+0xa0>
 8017d72:	2d07      	cmp	r5, #7
 8017d74:	dc04      	bgt.n	8017d80 <__hexnan+0xa0>
 8017d76:	462a      	mov	r2, r5
 8017d78:	4649      	mov	r1, r9
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	f7ff ff8a 	bl	8017c94 <L_shift>
 8017d80:	4544      	cmp	r4, r8
 8017d82:	d936      	bls.n	8017df2 <__hexnan+0x112>
 8017d84:	f1a8 0204 	sub.w	r2, r8, #4
 8017d88:	4623      	mov	r3, r4
 8017d8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017d8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017d92:	429f      	cmp	r7, r3
 8017d94:	d2f9      	bcs.n	8017d8a <__hexnan+0xaa>
 8017d96:	1b3b      	subs	r3, r7, r4
 8017d98:	f023 0303 	bic.w	r3, r3, #3
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	3401      	adds	r4, #1
 8017da0:	3e03      	subs	r6, #3
 8017da2:	42b4      	cmp	r4, r6
 8017da4:	bf88      	it	hi
 8017da6:	2304      	movhi	r3, #4
 8017da8:	4443      	add	r3, r8
 8017daa:	2200      	movs	r2, #0
 8017dac:	f843 2b04 	str.w	r2, [r3], #4
 8017db0:	429f      	cmp	r7, r3
 8017db2:	d2fb      	bcs.n	8017dac <__hexnan+0xcc>
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	b91b      	cbnz	r3, 8017dc0 <__hexnan+0xe0>
 8017db8:	4547      	cmp	r7, r8
 8017dba:	d128      	bne.n	8017e0e <__hexnan+0x12e>
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	603b      	str	r3, [r7, #0]
 8017dc0:	2005      	movs	r0, #5
 8017dc2:	b007      	add	sp, #28
 8017dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc8:	3501      	adds	r5, #1
 8017dca:	2d08      	cmp	r5, #8
 8017dcc:	f10b 0b01 	add.w	fp, fp, #1
 8017dd0:	dd06      	ble.n	8017de0 <__hexnan+0x100>
 8017dd2:	4544      	cmp	r4, r8
 8017dd4:	d9c1      	bls.n	8017d5a <__hexnan+0x7a>
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ddc:	2501      	movs	r5, #1
 8017dde:	3c04      	subs	r4, #4
 8017de0:	6822      	ldr	r2, [r4, #0]
 8017de2:	f000 000f 	and.w	r0, r0, #15
 8017de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017dea:	6020      	str	r0, [r4, #0]
 8017dec:	e7b5      	b.n	8017d5a <__hexnan+0x7a>
 8017dee:	2508      	movs	r5, #8
 8017df0:	e7b3      	b.n	8017d5a <__hexnan+0x7a>
 8017df2:	9b01      	ldr	r3, [sp, #4]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d0dd      	beq.n	8017db4 <__hexnan+0xd4>
 8017df8:	f1c3 0320 	rsb	r3, r3, #32
 8017dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8017e00:	40da      	lsrs	r2, r3
 8017e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017e06:	4013      	ands	r3, r2
 8017e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e0c:	e7d2      	b.n	8017db4 <__hexnan+0xd4>
 8017e0e:	3f04      	subs	r7, #4
 8017e10:	e7d0      	b.n	8017db4 <__hexnan+0xd4>
 8017e12:	2004      	movs	r0, #4
 8017e14:	e7d5      	b.n	8017dc2 <__hexnan+0xe2>

08017e16 <__ascii_mbtowc>:
 8017e16:	b082      	sub	sp, #8
 8017e18:	b901      	cbnz	r1, 8017e1c <__ascii_mbtowc+0x6>
 8017e1a:	a901      	add	r1, sp, #4
 8017e1c:	b142      	cbz	r2, 8017e30 <__ascii_mbtowc+0x1a>
 8017e1e:	b14b      	cbz	r3, 8017e34 <__ascii_mbtowc+0x1e>
 8017e20:	7813      	ldrb	r3, [r2, #0]
 8017e22:	600b      	str	r3, [r1, #0]
 8017e24:	7812      	ldrb	r2, [r2, #0]
 8017e26:	1e10      	subs	r0, r2, #0
 8017e28:	bf18      	it	ne
 8017e2a:	2001      	movne	r0, #1
 8017e2c:	b002      	add	sp, #8
 8017e2e:	4770      	bx	lr
 8017e30:	4610      	mov	r0, r2
 8017e32:	e7fb      	b.n	8017e2c <__ascii_mbtowc+0x16>
 8017e34:	f06f 0001 	mvn.w	r0, #1
 8017e38:	e7f8      	b.n	8017e2c <__ascii_mbtowc+0x16>
	...

08017e3c <_Balloc>:
 8017e3c:	b570      	push	{r4, r5, r6, lr}
 8017e3e:	69c6      	ldr	r6, [r0, #28]
 8017e40:	4604      	mov	r4, r0
 8017e42:	460d      	mov	r5, r1
 8017e44:	b976      	cbnz	r6, 8017e64 <_Balloc+0x28>
 8017e46:	2010      	movs	r0, #16
 8017e48:	f7fe f846 	bl	8015ed8 <malloc>
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	61e0      	str	r0, [r4, #28]
 8017e50:	b920      	cbnz	r0, 8017e5c <_Balloc+0x20>
 8017e52:	4b18      	ldr	r3, [pc, #96]	@ (8017eb4 <_Balloc+0x78>)
 8017e54:	4818      	ldr	r0, [pc, #96]	@ (8017eb8 <_Balloc+0x7c>)
 8017e56:	216b      	movs	r1, #107	@ 0x6b
 8017e58:	f7ff fc3c 	bl	80176d4 <__assert_func>
 8017e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017e60:	6006      	str	r6, [r0, #0]
 8017e62:	60c6      	str	r6, [r0, #12]
 8017e64:	69e6      	ldr	r6, [r4, #28]
 8017e66:	68f3      	ldr	r3, [r6, #12]
 8017e68:	b183      	cbz	r3, 8017e8c <_Balloc+0x50>
 8017e6a:	69e3      	ldr	r3, [r4, #28]
 8017e6c:	68db      	ldr	r3, [r3, #12]
 8017e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017e72:	b9b8      	cbnz	r0, 8017ea4 <_Balloc+0x68>
 8017e74:	2101      	movs	r1, #1
 8017e76:	fa01 f605 	lsl.w	r6, r1, r5
 8017e7a:	1d72      	adds	r2, r6, #5
 8017e7c:	0092      	lsls	r2, r2, #2
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f001 fdc1 	bl	8019a06 <_calloc_r>
 8017e84:	b160      	cbz	r0, 8017ea0 <_Balloc+0x64>
 8017e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017e8a:	e00e      	b.n	8017eaa <_Balloc+0x6e>
 8017e8c:	2221      	movs	r2, #33	@ 0x21
 8017e8e:	2104      	movs	r1, #4
 8017e90:	4620      	mov	r0, r4
 8017e92:	f001 fdb8 	bl	8019a06 <_calloc_r>
 8017e96:	69e3      	ldr	r3, [r4, #28]
 8017e98:	60f0      	str	r0, [r6, #12]
 8017e9a:	68db      	ldr	r3, [r3, #12]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d1e4      	bne.n	8017e6a <_Balloc+0x2e>
 8017ea0:	2000      	movs	r0, #0
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}
 8017ea4:	6802      	ldr	r2, [r0, #0]
 8017ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017eaa:	2300      	movs	r3, #0
 8017eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017eb0:	e7f7      	b.n	8017ea2 <_Balloc+0x66>
 8017eb2:	bf00      	nop
 8017eb4:	08019fb6 	.word	0x08019fb6
 8017eb8:	0801a0dc 	.word	0x0801a0dc

08017ebc <_Bfree>:
 8017ebc:	b570      	push	{r4, r5, r6, lr}
 8017ebe:	69c6      	ldr	r6, [r0, #28]
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	460c      	mov	r4, r1
 8017ec4:	b976      	cbnz	r6, 8017ee4 <_Bfree+0x28>
 8017ec6:	2010      	movs	r0, #16
 8017ec8:	f7fe f806 	bl	8015ed8 <malloc>
 8017ecc:	4602      	mov	r2, r0
 8017ece:	61e8      	str	r0, [r5, #28]
 8017ed0:	b920      	cbnz	r0, 8017edc <_Bfree+0x20>
 8017ed2:	4b09      	ldr	r3, [pc, #36]	@ (8017ef8 <_Bfree+0x3c>)
 8017ed4:	4809      	ldr	r0, [pc, #36]	@ (8017efc <_Bfree+0x40>)
 8017ed6:	218f      	movs	r1, #143	@ 0x8f
 8017ed8:	f7ff fbfc 	bl	80176d4 <__assert_func>
 8017edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017ee0:	6006      	str	r6, [r0, #0]
 8017ee2:	60c6      	str	r6, [r0, #12]
 8017ee4:	b13c      	cbz	r4, 8017ef6 <_Bfree+0x3a>
 8017ee6:	69eb      	ldr	r3, [r5, #28]
 8017ee8:	6862      	ldr	r2, [r4, #4]
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ef0:	6021      	str	r1, [r4, #0]
 8017ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017ef6:	bd70      	pop	{r4, r5, r6, pc}
 8017ef8:	08019fb6 	.word	0x08019fb6
 8017efc:	0801a0dc 	.word	0x0801a0dc

08017f00 <__multadd>:
 8017f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f04:	690d      	ldr	r5, [r1, #16]
 8017f06:	4607      	mov	r7, r0
 8017f08:	460c      	mov	r4, r1
 8017f0a:	461e      	mov	r6, r3
 8017f0c:	f101 0c14 	add.w	ip, r1, #20
 8017f10:	2000      	movs	r0, #0
 8017f12:	f8dc 3000 	ldr.w	r3, [ip]
 8017f16:	b299      	uxth	r1, r3
 8017f18:	fb02 6101 	mla	r1, r2, r1, r6
 8017f1c:	0c1e      	lsrs	r6, r3, #16
 8017f1e:	0c0b      	lsrs	r3, r1, #16
 8017f20:	fb02 3306 	mla	r3, r2, r6, r3
 8017f24:	b289      	uxth	r1, r1
 8017f26:	3001      	adds	r0, #1
 8017f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f2c:	4285      	cmp	r5, r0
 8017f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8017f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f36:	dcec      	bgt.n	8017f12 <__multadd+0x12>
 8017f38:	b30e      	cbz	r6, 8017f7e <__multadd+0x7e>
 8017f3a:	68a3      	ldr	r3, [r4, #8]
 8017f3c:	42ab      	cmp	r3, r5
 8017f3e:	dc19      	bgt.n	8017f74 <__multadd+0x74>
 8017f40:	6861      	ldr	r1, [r4, #4]
 8017f42:	4638      	mov	r0, r7
 8017f44:	3101      	adds	r1, #1
 8017f46:	f7ff ff79 	bl	8017e3c <_Balloc>
 8017f4a:	4680      	mov	r8, r0
 8017f4c:	b928      	cbnz	r0, 8017f5a <__multadd+0x5a>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	4b0c      	ldr	r3, [pc, #48]	@ (8017f84 <__multadd+0x84>)
 8017f52:	480d      	ldr	r0, [pc, #52]	@ (8017f88 <__multadd+0x88>)
 8017f54:	21ba      	movs	r1, #186	@ 0xba
 8017f56:	f7ff fbbd 	bl	80176d4 <__assert_func>
 8017f5a:	6922      	ldr	r2, [r4, #16]
 8017f5c:	3202      	adds	r2, #2
 8017f5e:	f104 010c 	add.w	r1, r4, #12
 8017f62:	0092      	lsls	r2, r2, #2
 8017f64:	300c      	adds	r0, #12
 8017f66:	f7ff fb98 	bl	801769a <memcpy>
 8017f6a:	4621      	mov	r1, r4
 8017f6c:	4638      	mov	r0, r7
 8017f6e:	f7ff ffa5 	bl	8017ebc <_Bfree>
 8017f72:	4644      	mov	r4, r8
 8017f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017f78:	3501      	adds	r5, #1
 8017f7a:	615e      	str	r6, [r3, #20]
 8017f7c:	6125      	str	r5, [r4, #16]
 8017f7e:	4620      	mov	r0, r4
 8017f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f84:	0801a06b 	.word	0x0801a06b
 8017f88:	0801a0dc 	.word	0x0801a0dc

08017f8c <__s2b>:
 8017f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f90:	460c      	mov	r4, r1
 8017f92:	4615      	mov	r5, r2
 8017f94:	461f      	mov	r7, r3
 8017f96:	2209      	movs	r2, #9
 8017f98:	3308      	adds	r3, #8
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	2201      	movs	r2, #1
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	db09      	blt.n	8017fbc <__s2b+0x30>
 8017fa8:	4630      	mov	r0, r6
 8017faa:	f7ff ff47 	bl	8017e3c <_Balloc>
 8017fae:	b940      	cbnz	r0, 8017fc2 <__s2b+0x36>
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	4b19      	ldr	r3, [pc, #100]	@ (8018018 <__s2b+0x8c>)
 8017fb4:	4819      	ldr	r0, [pc, #100]	@ (801801c <__s2b+0x90>)
 8017fb6:	21d3      	movs	r1, #211	@ 0xd3
 8017fb8:	f7ff fb8c 	bl	80176d4 <__assert_func>
 8017fbc:	0052      	lsls	r2, r2, #1
 8017fbe:	3101      	adds	r1, #1
 8017fc0:	e7f0      	b.n	8017fa4 <__s2b+0x18>
 8017fc2:	9b08      	ldr	r3, [sp, #32]
 8017fc4:	6143      	str	r3, [r0, #20]
 8017fc6:	2d09      	cmp	r5, #9
 8017fc8:	f04f 0301 	mov.w	r3, #1
 8017fcc:	6103      	str	r3, [r0, #16]
 8017fce:	dd16      	ble.n	8017ffe <__s2b+0x72>
 8017fd0:	f104 0909 	add.w	r9, r4, #9
 8017fd4:	46c8      	mov	r8, r9
 8017fd6:	442c      	add	r4, r5
 8017fd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017fdc:	4601      	mov	r1, r0
 8017fde:	3b30      	subs	r3, #48	@ 0x30
 8017fe0:	220a      	movs	r2, #10
 8017fe2:	4630      	mov	r0, r6
 8017fe4:	f7ff ff8c 	bl	8017f00 <__multadd>
 8017fe8:	45a0      	cmp	r8, r4
 8017fea:	d1f5      	bne.n	8017fd8 <__s2b+0x4c>
 8017fec:	f1a5 0408 	sub.w	r4, r5, #8
 8017ff0:	444c      	add	r4, r9
 8017ff2:	1b2d      	subs	r5, r5, r4
 8017ff4:	1963      	adds	r3, r4, r5
 8017ff6:	42bb      	cmp	r3, r7
 8017ff8:	db04      	blt.n	8018004 <__s2b+0x78>
 8017ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ffe:	340a      	adds	r4, #10
 8018000:	2509      	movs	r5, #9
 8018002:	e7f6      	b.n	8017ff2 <__s2b+0x66>
 8018004:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018008:	4601      	mov	r1, r0
 801800a:	3b30      	subs	r3, #48	@ 0x30
 801800c:	220a      	movs	r2, #10
 801800e:	4630      	mov	r0, r6
 8018010:	f7ff ff76 	bl	8017f00 <__multadd>
 8018014:	e7ee      	b.n	8017ff4 <__s2b+0x68>
 8018016:	bf00      	nop
 8018018:	0801a06b 	.word	0x0801a06b
 801801c:	0801a0dc 	.word	0x0801a0dc

08018020 <__hi0bits>:
 8018020:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018024:	4603      	mov	r3, r0
 8018026:	bf36      	itet	cc
 8018028:	0403      	lslcc	r3, r0, #16
 801802a:	2000      	movcs	r0, #0
 801802c:	2010      	movcc	r0, #16
 801802e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018032:	bf3c      	itt	cc
 8018034:	021b      	lslcc	r3, r3, #8
 8018036:	3008      	addcc	r0, #8
 8018038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801803c:	bf3c      	itt	cc
 801803e:	011b      	lslcc	r3, r3, #4
 8018040:	3004      	addcc	r0, #4
 8018042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018046:	bf3c      	itt	cc
 8018048:	009b      	lslcc	r3, r3, #2
 801804a:	3002      	addcc	r0, #2
 801804c:	2b00      	cmp	r3, #0
 801804e:	db05      	blt.n	801805c <__hi0bits+0x3c>
 8018050:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018054:	f100 0001 	add.w	r0, r0, #1
 8018058:	bf08      	it	eq
 801805a:	2020      	moveq	r0, #32
 801805c:	4770      	bx	lr

0801805e <__lo0bits>:
 801805e:	6803      	ldr	r3, [r0, #0]
 8018060:	4602      	mov	r2, r0
 8018062:	f013 0007 	ands.w	r0, r3, #7
 8018066:	d00b      	beq.n	8018080 <__lo0bits+0x22>
 8018068:	07d9      	lsls	r1, r3, #31
 801806a:	d421      	bmi.n	80180b0 <__lo0bits+0x52>
 801806c:	0798      	lsls	r0, r3, #30
 801806e:	bf49      	itett	mi
 8018070:	085b      	lsrmi	r3, r3, #1
 8018072:	089b      	lsrpl	r3, r3, #2
 8018074:	2001      	movmi	r0, #1
 8018076:	6013      	strmi	r3, [r2, #0]
 8018078:	bf5c      	itt	pl
 801807a:	6013      	strpl	r3, [r2, #0]
 801807c:	2002      	movpl	r0, #2
 801807e:	4770      	bx	lr
 8018080:	b299      	uxth	r1, r3
 8018082:	b909      	cbnz	r1, 8018088 <__lo0bits+0x2a>
 8018084:	0c1b      	lsrs	r3, r3, #16
 8018086:	2010      	movs	r0, #16
 8018088:	b2d9      	uxtb	r1, r3
 801808a:	b909      	cbnz	r1, 8018090 <__lo0bits+0x32>
 801808c:	3008      	adds	r0, #8
 801808e:	0a1b      	lsrs	r3, r3, #8
 8018090:	0719      	lsls	r1, r3, #28
 8018092:	bf04      	itt	eq
 8018094:	091b      	lsreq	r3, r3, #4
 8018096:	3004      	addeq	r0, #4
 8018098:	0799      	lsls	r1, r3, #30
 801809a:	bf04      	itt	eq
 801809c:	089b      	lsreq	r3, r3, #2
 801809e:	3002      	addeq	r0, #2
 80180a0:	07d9      	lsls	r1, r3, #31
 80180a2:	d403      	bmi.n	80180ac <__lo0bits+0x4e>
 80180a4:	085b      	lsrs	r3, r3, #1
 80180a6:	f100 0001 	add.w	r0, r0, #1
 80180aa:	d003      	beq.n	80180b4 <__lo0bits+0x56>
 80180ac:	6013      	str	r3, [r2, #0]
 80180ae:	4770      	bx	lr
 80180b0:	2000      	movs	r0, #0
 80180b2:	4770      	bx	lr
 80180b4:	2020      	movs	r0, #32
 80180b6:	4770      	bx	lr

080180b8 <__i2b>:
 80180b8:	b510      	push	{r4, lr}
 80180ba:	460c      	mov	r4, r1
 80180bc:	2101      	movs	r1, #1
 80180be:	f7ff febd 	bl	8017e3c <_Balloc>
 80180c2:	4602      	mov	r2, r0
 80180c4:	b928      	cbnz	r0, 80180d2 <__i2b+0x1a>
 80180c6:	4b05      	ldr	r3, [pc, #20]	@ (80180dc <__i2b+0x24>)
 80180c8:	4805      	ldr	r0, [pc, #20]	@ (80180e0 <__i2b+0x28>)
 80180ca:	f240 1145 	movw	r1, #325	@ 0x145
 80180ce:	f7ff fb01 	bl	80176d4 <__assert_func>
 80180d2:	2301      	movs	r3, #1
 80180d4:	6144      	str	r4, [r0, #20]
 80180d6:	6103      	str	r3, [r0, #16]
 80180d8:	bd10      	pop	{r4, pc}
 80180da:	bf00      	nop
 80180dc:	0801a06b 	.word	0x0801a06b
 80180e0:	0801a0dc 	.word	0x0801a0dc

080180e4 <__multiply>:
 80180e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e8:	4614      	mov	r4, r2
 80180ea:	690a      	ldr	r2, [r1, #16]
 80180ec:	6923      	ldr	r3, [r4, #16]
 80180ee:	429a      	cmp	r2, r3
 80180f0:	bfa8      	it	ge
 80180f2:	4623      	movge	r3, r4
 80180f4:	460f      	mov	r7, r1
 80180f6:	bfa4      	itt	ge
 80180f8:	460c      	movge	r4, r1
 80180fa:	461f      	movge	r7, r3
 80180fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018100:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018104:	68a3      	ldr	r3, [r4, #8]
 8018106:	6861      	ldr	r1, [r4, #4]
 8018108:	eb0a 0609 	add.w	r6, sl, r9
 801810c:	42b3      	cmp	r3, r6
 801810e:	b085      	sub	sp, #20
 8018110:	bfb8      	it	lt
 8018112:	3101      	addlt	r1, #1
 8018114:	f7ff fe92 	bl	8017e3c <_Balloc>
 8018118:	b930      	cbnz	r0, 8018128 <__multiply+0x44>
 801811a:	4602      	mov	r2, r0
 801811c:	4b44      	ldr	r3, [pc, #272]	@ (8018230 <__multiply+0x14c>)
 801811e:	4845      	ldr	r0, [pc, #276]	@ (8018234 <__multiply+0x150>)
 8018120:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018124:	f7ff fad6 	bl	80176d4 <__assert_func>
 8018128:	f100 0514 	add.w	r5, r0, #20
 801812c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018130:	462b      	mov	r3, r5
 8018132:	2200      	movs	r2, #0
 8018134:	4543      	cmp	r3, r8
 8018136:	d321      	bcc.n	801817c <__multiply+0x98>
 8018138:	f107 0114 	add.w	r1, r7, #20
 801813c:	f104 0214 	add.w	r2, r4, #20
 8018140:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018144:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018148:	9302      	str	r3, [sp, #8]
 801814a:	1b13      	subs	r3, r2, r4
 801814c:	3b15      	subs	r3, #21
 801814e:	f023 0303 	bic.w	r3, r3, #3
 8018152:	3304      	adds	r3, #4
 8018154:	f104 0715 	add.w	r7, r4, #21
 8018158:	42ba      	cmp	r2, r7
 801815a:	bf38      	it	cc
 801815c:	2304      	movcc	r3, #4
 801815e:	9301      	str	r3, [sp, #4]
 8018160:	9b02      	ldr	r3, [sp, #8]
 8018162:	9103      	str	r1, [sp, #12]
 8018164:	428b      	cmp	r3, r1
 8018166:	d80c      	bhi.n	8018182 <__multiply+0x9e>
 8018168:	2e00      	cmp	r6, #0
 801816a:	dd03      	ble.n	8018174 <__multiply+0x90>
 801816c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018170:	2b00      	cmp	r3, #0
 8018172:	d05b      	beq.n	801822c <__multiply+0x148>
 8018174:	6106      	str	r6, [r0, #16]
 8018176:	b005      	add	sp, #20
 8018178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801817c:	f843 2b04 	str.w	r2, [r3], #4
 8018180:	e7d8      	b.n	8018134 <__multiply+0x50>
 8018182:	f8b1 a000 	ldrh.w	sl, [r1]
 8018186:	f1ba 0f00 	cmp.w	sl, #0
 801818a:	d024      	beq.n	80181d6 <__multiply+0xf2>
 801818c:	f104 0e14 	add.w	lr, r4, #20
 8018190:	46a9      	mov	r9, r5
 8018192:	f04f 0c00 	mov.w	ip, #0
 8018196:	f85e 7b04 	ldr.w	r7, [lr], #4
 801819a:	f8d9 3000 	ldr.w	r3, [r9]
 801819e:	fa1f fb87 	uxth.w	fp, r7
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80181a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80181ac:	f8d9 7000 	ldr.w	r7, [r9]
 80181b0:	4463      	add	r3, ip
 80181b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80181b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80181ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80181be:	b29b      	uxth	r3, r3
 80181c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80181c4:	4572      	cmp	r2, lr
 80181c6:	f849 3b04 	str.w	r3, [r9], #4
 80181ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80181ce:	d8e2      	bhi.n	8018196 <__multiply+0xb2>
 80181d0:	9b01      	ldr	r3, [sp, #4]
 80181d2:	f845 c003 	str.w	ip, [r5, r3]
 80181d6:	9b03      	ldr	r3, [sp, #12]
 80181d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80181dc:	3104      	adds	r1, #4
 80181de:	f1b9 0f00 	cmp.w	r9, #0
 80181e2:	d021      	beq.n	8018228 <__multiply+0x144>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	f104 0c14 	add.w	ip, r4, #20
 80181ea:	46ae      	mov	lr, r5
 80181ec:	f04f 0a00 	mov.w	sl, #0
 80181f0:	f8bc b000 	ldrh.w	fp, [ip]
 80181f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80181f8:	fb09 770b 	mla	r7, r9, fp, r7
 80181fc:	4457      	add	r7, sl
 80181fe:	b29b      	uxth	r3, r3
 8018200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018204:	f84e 3b04 	str.w	r3, [lr], #4
 8018208:	f85c 3b04 	ldr.w	r3, [ip], #4
 801820c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018210:	f8be 3000 	ldrh.w	r3, [lr]
 8018214:	fb09 330a 	mla	r3, r9, sl, r3
 8018218:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801821c:	4562      	cmp	r2, ip
 801821e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018222:	d8e5      	bhi.n	80181f0 <__multiply+0x10c>
 8018224:	9f01      	ldr	r7, [sp, #4]
 8018226:	51eb      	str	r3, [r5, r7]
 8018228:	3504      	adds	r5, #4
 801822a:	e799      	b.n	8018160 <__multiply+0x7c>
 801822c:	3e01      	subs	r6, #1
 801822e:	e79b      	b.n	8018168 <__multiply+0x84>
 8018230:	0801a06b 	.word	0x0801a06b
 8018234:	0801a0dc 	.word	0x0801a0dc

08018238 <__pow5mult>:
 8018238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801823c:	4615      	mov	r5, r2
 801823e:	f012 0203 	ands.w	r2, r2, #3
 8018242:	4607      	mov	r7, r0
 8018244:	460e      	mov	r6, r1
 8018246:	d007      	beq.n	8018258 <__pow5mult+0x20>
 8018248:	4c25      	ldr	r4, [pc, #148]	@ (80182e0 <__pow5mult+0xa8>)
 801824a:	3a01      	subs	r2, #1
 801824c:	2300      	movs	r3, #0
 801824e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018252:	f7ff fe55 	bl	8017f00 <__multadd>
 8018256:	4606      	mov	r6, r0
 8018258:	10ad      	asrs	r5, r5, #2
 801825a:	d03d      	beq.n	80182d8 <__pow5mult+0xa0>
 801825c:	69fc      	ldr	r4, [r7, #28]
 801825e:	b97c      	cbnz	r4, 8018280 <__pow5mult+0x48>
 8018260:	2010      	movs	r0, #16
 8018262:	f7fd fe39 	bl	8015ed8 <malloc>
 8018266:	4602      	mov	r2, r0
 8018268:	61f8      	str	r0, [r7, #28]
 801826a:	b928      	cbnz	r0, 8018278 <__pow5mult+0x40>
 801826c:	4b1d      	ldr	r3, [pc, #116]	@ (80182e4 <__pow5mult+0xac>)
 801826e:	481e      	ldr	r0, [pc, #120]	@ (80182e8 <__pow5mult+0xb0>)
 8018270:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018274:	f7ff fa2e 	bl	80176d4 <__assert_func>
 8018278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801827c:	6004      	str	r4, [r0, #0]
 801827e:	60c4      	str	r4, [r0, #12]
 8018280:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018288:	b94c      	cbnz	r4, 801829e <__pow5mult+0x66>
 801828a:	f240 2171 	movw	r1, #625	@ 0x271
 801828e:	4638      	mov	r0, r7
 8018290:	f7ff ff12 	bl	80180b8 <__i2b>
 8018294:	2300      	movs	r3, #0
 8018296:	f8c8 0008 	str.w	r0, [r8, #8]
 801829a:	4604      	mov	r4, r0
 801829c:	6003      	str	r3, [r0, #0]
 801829e:	f04f 0900 	mov.w	r9, #0
 80182a2:	07eb      	lsls	r3, r5, #31
 80182a4:	d50a      	bpl.n	80182bc <__pow5mult+0x84>
 80182a6:	4631      	mov	r1, r6
 80182a8:	4622      	mov	r2, r4
 80182aa:	4638      	mov	r0, r7
 80182ac:	f7ff ff1a 	bl	80180e4 <__multiply>
 80182b0:	4631      	mov	r1, r6
 80182b2:	4680      	mov	r8, r0
 80182b4:	4638      	mov	r0, r7
 80182b6:	f7ff fe01 	bl	8017ebc <_Bfree>
 80182ba:	4646      	mov	r6, r8
 80182bc:	106d      	asrs	r5, r5, #1
 80182be:	d00b      	beq.n	80182d8 <__pow5mult+0xa0>
 80182c0:	6820      	ldr	r0, [r4, #0]
 80182c2:	b938      	cbnz	r0, 80182d4 <__pow5mult+0x9c>
 80182c4:	4622      	mov	r2, r4
 80182c6:	4621      	mov	r1, r4
 80182c8:	4638      	mov	r0, r7
 80182ca:	f7ff ff0b 	bl	80180e4 <__multiply>
 80182ce:	6020      	str	r0, [r4, #0]
 80182d0:	f8c0 9000 	str.w	r9, [r0]
 80182d4:	4604      	mov	r4, r0
 80182d6:	e7e4      	b.n	80182a2 <__pow5mult+0x6a>
 80182d8:	4630      	mov	r0, r6
 80182da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182de:	bf00      	nop
 80182e0:	0801a138 	.word	0x0801a138
 80182e4:	08019fb6 	.word	0x08019fb6
 80182e8:	0801a0dc 	.word	0x0801a0dc

080182ec <__lshift>:
 80182ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182f0:	460c      	mov	r4, r1
 80182f2:	6849      	ldr	r1, [r1, #4]
 80182f4:	6923      	ldr	r3, [r4, #16]
 80182f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80182fa:	68a3      	ldr	r3, [r4, #8]
 80182fc:	4607      	mov	r7, r0
 80182fe:	4691      	mov	r9, r2
 8018300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018304:	f108 0601 	add.w	r6, r8, #1
 8018308:	42b3      	cmp	r3, r6
 801830a:	db0b      	blt.n	8018324 <__lshift+0x38>
 801830c:	4638      	mov	r0, r7
 801830e:	f7ff fd95 	bl	8017e3c <_Balloc>
 8018312:	4605      	mov	r5, r0
 8018314:	b948      	cbnz	r0, 801832a <__lshift+0x3e>
 8018316:	4602      	mov	r2, r0
 8018318:	4b28      	ldr	r3, [pc, #160]	@ (80183bc <__lshift+0xd0>)
 801831a:	4829      	ldr	r0, [pc, #164]	@ (80183c0 <__lshift+0xd4>)
 801831c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018320:	f7ff f9d8 	bl	80176d4 <__assert_func>
 8018324:	3101      	adds	r1, #1
 8018326:	005b      	lsls	r3, r3, #1
 8018328:	e7ee      	b.n	8018308 <__lshift+0x1c>
 801832a:	2300      	movs	r3, #0
 801832c:	f100 0114 	add.w	r1, r0, #20
 8018330:	f100 0210 	add.w	r2, r0, #16
 8018334:	4618      	mov	r0, r3
 8018336:	4553      	cmp	r3, sl
 8018338:	db33      	blt.n	80183a2 <__lshift+0xb6>
 801833a:	6920      	ldr	r0, [r4, #16]
 801833c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018340:	f104 0314 	add.w	r3, r4, #20
 8018344:	f019 091f 	ands.w	r9, r9, #31
 8018348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801834c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018350:	d02b      	beq.n	80183aa <__lshift+0xbe>
 8018352:	f1c9 0e20 	rsb	lr, r9, #32
 8018356:	468a      	mov	sl, r1
 8018358:	2200      	movs	r2, #0
 801835a:	6818      	ldr	r0, [r3, #0]
 801835c:	fa00 f009 	lsl.w	r0, r0, r9
 8018360:	4310      	orrs	r0, r2
 8018362:	f84a 0b04 	str.w	r0, [sl], #4
 8018366:	f853 2b04 	ldr.w	r2, [r3], #4
 801836a:	459c      	cmp	ip, r3
 801836c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018370:	d8f3      	bhi.n	801835a <__lshift+0x6e>
 8018372:	ebac 0304 	sub.w	r3, ip, r4
 8018376:	3b15      	subs	r3, #21
 8018378:	f023 0303 	bic.w	r3, r3, #3
 801837c:	3304      	adds	r3, #4
 801837e:	f104 0015 	add.w	r0, r4, #21
 8018382:	4584      	cmp	ip, r0
 8018384:	bf38      	it	cc
 8018386:	2304      	movcc	r3, #4
 8018388:	50ca      	str	r2, [r1, r3]
 801838a:	b10a      	cbz	r2, 8018390 <__lshift+0xa4>
 801838c:	f108 0602 	add.w	r6, r8, #2
 8018390:	3e01      	subs	r6, #1
 8018392:	4638      	mov	r0, r7
 8018394:	612e      	str	r6, [r5, #16]
 8018396:	4621      	mov	r1, r4
 8018398:	f7ff fd90 	bl	8017ebc <_Bfree>
 801839c:	4628      	mov	r0, r5
 801839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80183a6:	3301      	adds	r3, #1
 80183a8:	e7c5      	b.n	8018336 <__lshift+0x4a>
 80183aa:	3904      	subs	r1, #4
 80183ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80183b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80183b4:	459c      	cmp	ip, r3
 80183b6:	d8f9      	bhi.n	80183ac <__lshift+0xc0>
 80183b8:	e7ea      	b.n	8018390 <__lshift+0xa4>
 80183ba:	bf00      	nop
 80183bc:	0801a06b 	.word	0x0801a06b
 80183c0:	0801a0dc 	.word	0x0801a0dc

080183c4 <__mcmp>:
 80183c4:	690a      	ldr	r2, [r1, #16]
 80183c6:	4603      	mov	r3, r0
 80183c8:	6900      	ldr	r0, [r0, #16]
 80183ca:	1a80      	subs	r0, r0, r2
 80183cc:	b530      	push	{r4, r5, lr}
 80183ce:	d10e      	bne.n	80183ee <__mcmp+0x2a>
 80183d0:	3314      	adds	r3, #20
 80183d2:	3114      	adds	r1, #20
 80183d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80183d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80183dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80183e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80183e4:	4295      	cmp	r5, r2
 80183e6:	d003      	beq.n	80183f0 <__mcmp+0x2c>
 80183e8:	d205      	bcs.n	80183f6 <__mcmp+0x32>
 80183ea:	f04f 30ff 	mov.w	r0, #4294967295
 80183ee:	bd30      	pop	{r4, r5, pc}
 80183f0:	42a3      	cmp	r3, r4
 80183f2:	d3f3      	bcc.n	80183dc <__mcmp+0x18>
 80183f4:	e7fb      	b.n	80183ee <__mcmp+0x2a>
 80183f6:	2001      	movs	r0, #1
 80183f8:	e7f9      	b.n	80183ee <__mcmp+0x2a>
	...

080183fc <__mdiff>:
 80183fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018400:	4689      	mov	r9, r1
 8018402:	4606      	mov	r6, r0
 8018404:	4611      	mov	r1, r2
 8018406:	4648      	mov	r0, r9
 8018408:	4614      	mov	r4, r2
 801840a:	f7ff ffdb 	bl	80183c4 <__mcmp>
 801840e:	1e05      	subs	r5, r0, #0
 8018410:	d112      	bne.n	8018438 <__mdiff+0x3c>
 8018412:	4629      	mov	r1, r5
 8018414:	4630      	mov	r0, r6
 8018416:	f7ff fd11 	bl	8017e3c <_Balloc>
 801841a:	4602      	mov	r2, r0
 801841c:	b928      	cbnz	r0, 801842a <__mdiff+0x2e>
 801841e:	4b3f      	ldr	r3, [pc, #252]	@ (801851c <__mdiff+0x120>)
 8018420:	f240 2137 	movw	r1, #567	@ 0x237
 8018424:	483e      	ldr	r0, [pc, #248]	@ (8018520 <__mdiff+0x124>)
 8018426:	f7ff f955 	bl	80176d4 <__assert_func>
 801842a:	2301      	movs	r3, #1
 801842c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018430:	4610      	mov	r0, r2
 8018432:	b003      	add	sp, #12
 8018434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018438:	bfbc      	itt	lt
 801843a:	464b      	movlt	r3, r9
 801843c:	46a1      	movlt	r9, r4
 801843e:	4630      	mov	r0, r6
 8018440:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018444:	bfba      	itte	lt
 8018446:	461c      	movlt	r4, r3
 8018448:	2501      	movlt	r5, #1
 801844a:	2500      	movge	r5, #0
 801844c:	f7ff fcf6 	bl	8017e3c <_Balloc>
 8018450:	4602      	mov	r2, r0
 8018452:	b918      	cbnz	r0, 801845c <__mdiff+0x60>
 8018454:	4b31      	ldr	r3, [pc, #196]	@ (801851c <__mdiff+0x120>)
 8018456:	f240 2145 	movw	r1, #581	@ 0x245
 801845a:	e7e3      	b.n	8018424 <__mdiff+0x28>
 801845c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018460:	6926      	ldr	r6, [r4, #16]
 8018462:	60c5      	str	r5, [r0, #12]
 8018464:	f109 0310 	add.w	r3, r9, #16
 8018468:	f109 0514 	add.w	r5, r9, #20
 801846c:	f104 0e14 	add.w	lr, r4, #20
 8018470:	f100 0b14 	add.w	fp, r0, #20
 8018474:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018478:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801847c:	9301      	str	r3, [sp, #4]
 801847e:	46d9      	mov	r9, fp
 8018480:	f04f 0c00 	mov.w	ip, #0
 8018484:	9b01      	ldr	r3, [sp, #4]
 8018486:	f85e 0b04 	ldr.w	r0, [lr], #4
 801848a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801848e:	9301      	str	r3, [sp, #4]
 8018490:	fa1f f38a 	uxth.w	r3, sl
 8018494:	4619      	mov	r1, r3
 8018496:	b283      	uxth	r3, r0
 8018498:	1acb      	subs	r3, r1, r3
 801849a:	0c00      	lsrs	r0, r0, #16
 801849c:	4463      	add	r3, ip
 801849e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80184a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80184ac:	4576      	cmp	r6, lr
 80184ae:	f849 3b04 	str.w	r3, [r9], #4
 80184b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80184b6:	d8e5      	bhi.n	8018484 <__mdiff+0x88>
 80184b8:	1b33      	subs	r3, r6, r4
 80184ba:	3b15      	subs	r3, #21
 80184bc:	f023 0303 	bic.w	r3, r3, #3
 80184c0:	3415      	adds	r4, #21
 80184c2:	3304      	adds	r3, #4
 80184c4:	42a6      	cmp	r6, r4
 80184c6:	bf38      	it	cc
 80184c8:	2304      	movcc	r3, #4
 80184ca:	441d      	add	r5, r3
 80184cc:	445b      	add	r3, fp
 80184ce:	461e      	mov	r6, r3
 80184d0:	462c      	mov	r4, r5
 80184d2:	4544      	cmp	r4, r8
 80184d4:	d30e      	bcc.n	80184f4 <__mdiff+0xf8>
 80184d6:	f108 0103 	add.w	r1, r8, #3
 80184da:	1b49      	subs	r1, r1, r5
 80184dc:	f021 0103 	bic.w	r1, r1, #3
 80184e0:	3d03      	subs	r5, #3
 80184e2:	45a8      	cmp	r8, r5
 80184e4:	bf38      	it	cc
 80184e6:	2100      	movcc	r1, #0
 80184e8:	440b      	add	r3, r1
 80184ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80184ee:	b191      	cbz	r1, 8018516 <__mdiff+0x11a>
 80184f0:	6117      	str	r7, [r2, #16]
 80184f2:	e79d      	b.n	8018430 <__mdiff+0x34>
 80184f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80184f8:	46e6      	mov	lr, ip
 80184fa:	0c08      	lsrs	r0, r1, #16
 80184fc:	fa1c fc81 	uxtah	ip, ip, r1
 8018500:	4471      	add	r1, lr
 8018502:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018506:	b289      	uxth	r1, r1
 8018508:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801850c:	f846 1b04 	str.w	r1, [r6], #4
 8018510:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018514:	e7dd      	b.n	80184d2 <__mdiff+0xd6>
 8018516:	3f01      	subs	r7, #1
 8018518:	e7e7      	b.n	80184ea <__mdiff+0xee>
 801851a:	bf00      	nop
 801851c:	0801a06b 	.word	0x0801a06b
 8018520:	0801a0dc 	.word	0x0801a0dc

08018524 <__ulp>:
 8018524:	b082      	sub	sp, #8
 8018526:	ed8d 0b00 	vstr	d0, [sp]
 801852a:	9a01      	ldr	r2, [sp, #4]
 801852c:	4b0f      	ldr	r3, [pc, #60]	@ (801856c <__ulp+0x48>)
 801852e:	4013      	ands	r3, r2
 8018530:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018534:	2b00      	cmp	r3, #0
 8018536:	dc08      	bgt.n	801854a <__ulp+0x26>
 8018538:	425b      	negs	r3, r3
 801853a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801853e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018542:	da04      	bge.n	801854e <__ulp+0x2a>
 8018544:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018548:	4113      	asrs	r3, r2
 801854a:	2200      	movs	r2, #0
 801854c:	e008      	b.n	8018560 <__ulp+0x3c>
 801854e:	f1a2 0314 	sub.w	r3, r2, #20
 8018552:	2b1e      	cmp	r3, #30
 8018554:	bfda      	itte	le
 8018556:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801855a:	40da      	lsrle	r2, r3
 801855c:	2201      	movgt	r2, #1
 801855e:	2300      	movs	r3, #0
 8018560:	4619      	mov	r1, r3
 8018562:	4610      	mov	r0, r2
 8018564:	ec41 0b10 	vmov	d0, r0, r1
 8018568:	b002      	add	sp, #8
 801856a:	4770      	bx	lr
 801856c:	7ff00000 	.word	0x7ff00000

08018570 <__b2d>:
 8018570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018574:	6906      	ldr	r6, [r0, #16]
 8018576:	f100 0814 	add.w	r8, r0, #20
 801857a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801857e:	1f37      	subs	r7, r6, #4
 8018580:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018584:	4610      	mov	r0, r2
 8018586:	f7ff fd4b 	bl	8018020 <__hi0bits>
 801858a:	f1c0 0320 	rsb	r3, r0, #32
 801858e:	280a      	cmp	r0, #10
 8018590:	600b      	str	r3, [r1, #0]
 8018592:	491b      	ldr	r1, [pc, #108]	@ (8018600 <__b2d+0x90>)
 8018594:	dc15      	bgt.n	80185c2 <__b2d+0x52>
 8018596:	f1c0 0c0b 	rsb	ip, r0, #11
 801859a:	fa22 f30c 	lsr.w	r3, r2, ip
 801859e:	45b8      	cmp	r8, r7
 80185a0:	ea43 0501 	orr.w	r5, r3, r1
 80185a4:	bf34      	ite	cc
 80185a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80185aa:	2300      	movcs	r3, #0
 80185ac:	3015      	adds	r0, #21
 80185ae:	fa02 f000 	lsl.w	r0, r2, r0
 80185b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80185b6:	4303      	orrs	r3, r0
 80185b8:	461c      	mov	r4, r3
 80185ba:	ec45 4b10 	vmov	d0, r4, r5
 80185be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185c2:	45b8      	cmp	r8, r7
 80185c4:	bf3a      	itte	cc
 80185c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80185ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80185ce:	2300      	movcs	r3, #0
 80185d0:	380b      	subs	r0, #11
 80185d2:	d012      	beq.n	80185fa <__b2d+0x8a>
 80185d4:	f1c0 0120 	rsb	r1, r0, #32
 80185d8:	fa23 f401 	lsr.w	r4, r3, r1
 80185dc:	4082      	lsls	r2, r0
 80185de:	4322      	orrs	r2, r4
 80185e0:	4547      	cmp	r7, r8
 80185e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80185e6:	bf8c      	ite	hi
 80185e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80185ec:	2200      	movls	r2, #0
 80185ee:	4083      	lsls	r3, r0
 80185f0:	40ca      	lsrs	r2, r1
 80185f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80185f6:	4313      	orrs	r3, r2
 80185f8:	e7de      	b.n	80185b8 <__b2d+0x48>
 80185fa:	ea42 0501 	orr.w	r5, r2, r1
 80185fe:	e7db      	b.n	80185b8 <__b2d+0x48>
 8018600:	3ff00000 	.word	0x3ff00000

08018604 <__d2b>:
 8018604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018608:	460f      	mov	r7, r1
 801860a:	2101      	movs	r1, #1
 801860c:	ec59 8b10 	vmov	r8, r9, d0
 8018610:	4616      	mov	r6, r2
 8018612:	f7ff fc13 	bl	8017e3c <_Balloc>
 8018616:	4604      	mov	r4, r0
 8018618:	b930      	cbnz	r0, 8018628 <__d2b+0x24>
 801861a:	4602      	mov	r2, r0
 801861c:	4b23      	ldr	r3, [pc, #140]	@ (80186ac <__d2b+0xa8>)
 801861e:	4824      	ldr	r0, [pc, #144]	@ (80186b0 <__d2b+0xac>)
 8018620:	f240 310f 	movw	r1, #783	@ 0x30f
 8018624:	f7ff f856 	bl	80176d4 <__assert_func>
 8018628:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801862c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018630:	b10d      	cbz	r5, 8018636 <__d2b+0x32>
 8018632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018636:	9301      	str	r3, [sp, #4]
 8018638:	f1b8 0300 	subs.w	r3, r8, #0
 801863c:	d023      	beq.n	8018686 <__d2b+0x82>
 801863e:	4668      	mov	r0, sp
 8018640:	9300      	str	r3, [sp, #0]
 8018642:	f7ff fd0c 	bl	801805e <__lo0bits>
 8018646:	e9dd 1200 	ldrd	r1, r2, [sp]
 801864a:	b1d0      	cbz	r0, 8018682 <__d2b+0x7e>
 801864c:	f1c0 0320 	rsb	r3, r0, #32
 8018650:	fa02 f303 	lsl.w	r3, r2, r3
 8018654:	430b      	orrs	r3, r1
 8018656:	40c2      	lsrs	r2, r0
 8018658:	6163      	str	r3, [r4, #20]
 801865a:	9201      	str	r2, [sp, #4]
 801865c:	9b01      	ldr	r3, [sp, #4]
 801865e:	61a3      	str	r3, [r4, #24]
 8018660:	2b00      	cmp	r3, #0
 8018662:	bf0c      	ite	eq
 8018664:	2201      	moveq	r2, #1
 8018666:	2202      	movne	r2, #2
 8018668:	6122      	str	r2, [r4, #16]
 801866a:	b1a5      	cbz	r5, 8018696 <__d2b+0x92>
 801866c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018670:	4405      	add	r5, r0
 8018672:	603d      	str	r5, [r7, #0]
 8018674:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018678:	6030      	str	r0, [r6, #0]
 801867a:	4620      	mov	r0, r4
 801867c:	b003      	add	sp, #12
 801867e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018682:	6161      	str	r1, [r4, #20]
 8018684:	e7ea      	b.n	801865c <__d2b+0x58>
 8018686:	a801      	add	r0, sp, #4
 8018688:	f7ff fce9 	bl	801805e <__lo0bits>
 801868c:	9b01      	ldr	r3, [sp, #4]
 801868e:	6163      	str	r3, [r4, #20]
 8018690:	3020      	adds	r0, #32
 8018692:	2201      	movs	r2, #1
 8018694:	e7e8      	b.n	8018668 <__d2b+0x64>
 8018696:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801869a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801869e:	6038      	str	r0, [r7, #0]
 80186a0:	6918      	ldr	r0, [r3, #16]
 80186a2:	f7ff fcbd 	bl	8018020 <__hi0bits>
 80186a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80186aa:	e7e5      	b.n	8018678 <__d2b+0x74>
 80186ac:	0801a06b 	.word	0x0801a06b
 80186b0:	0801a0dc 	.word	0x0801a0dc

080186b4 <__ratio>:
 80186b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b8:	4688      	mov	r8, r1
 80186ba:	4669      	mov	r1, sp
 80186bc:	4681      	mov	r9, r0
 80186be:	f7ff ff57 	bl	8018570 <__b2d>
 80186c2:	a901      	add	r1, sp, #4
 80186c4:	4640      	mov	r0, r8
 80186c6:	ec55 4b10 	vmov	r4, r5, d0
 80186ca:	f7ff ff51 	bl	8018570 <__b2d>
 80186ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80186d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80186d6:	1ad2      	subs	r2, r2, r3
 80186d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80186dc:	1a5b      	subs	r3, r3, r1
 80186de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80186e2:	ec57 6b10 	vmov	r6, r7, d0
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	bfd6      	itet	le
 80186ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80186ee:	462a      	movgt	r2, r5
 80186f0:	463a      	movle	r2, r7
 80186f2:	46ab      	mov	fp, r5
 80186f4:	46a2      	mov	sl, r4
 80186f6:	bfce      	itee	gt
 80186f8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80186fc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018700:	ee00 3a90 	vmovle	s1, r3
 8018704:	ec4b ab17 	vmov	d7, sl, fp
 8018708:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801870c:	b003      	add	sp, #12
 801870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018712 <__copybits>:
 8018712:	3901      	subs	r1, #1
 8018714:	b570      	push	{r4, r5, r6, lr}
 8018716:	1149      	asrs	r1, r1, #5
 8018718:	6914      	ldr	r4, [r2, #16]
 801871a:	3101      	adds	r1, #1
 801871c:	f102 0314 	add.w	r3, r2, #20
 8018720:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018724:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018728:	1f05      	subs	r5, r0, #4
 801872a:	42a3      	cmp	r3, r4
 801872c:	d30c      	bcc.n	8018748 <__copybits+0x36>
 801872e:	1aa3      	subs	r3, r4, r2
 8018730:	3b11      	subs	r3, #17
 8018732:	f023 0303 	bic.w	r3, r3, #3
 8018736:	3211      	adds	r2, #17
 8018738:	42a2      	cmp	r2, r4
 801873a:	bf88      	it	hi
 801873c:	2300      	movhi	r3, #0
 801873e:	4418      	add	r0, r3
 8018740:	2300      	movs	r3, #0
 8018742:	4288      	cmp	r0, r1
 8018744:	d305      	bcc.n	8018752 <__copybits+0x40>
 8018746:	bd70      	pop	{r4, r5, r6, pc}
 8018748:	f853 6b04 	ldr.w	r6, [r3], #4
 801874c:	f845 6f04 	str.w	r6, [r5, #4]!
 8018750:	e7eb      	b.n	801872a <__copybits+0x18>
 8018752:	f840 3b04 	str.w	r3, [r0], #4
 8018756:	e7f4      	b.n	8018742 <__copybits+0x30>

08018758 <__any_on>:
 8018758:	f100 0214 	add.w	r2, r0, #20
 801875c:	6900      	ldr	r0, [r0, #16]
 801875e:	114b      	asrs	r3, r1, #5
 8018760:	4298      	cmp	r0, r3
 8018762:	b510      	push	{r4, lr}
 8018764:	db11      	blt.n	801878a <__any_on+0x32>
 8018766:	dd0a      	ble.n	801877e <__any_on+0x26>
 8018768:	f011 011f 	ands.w	r1, r1, #31
 801876c:	d007      	beq.n	801877e <__any_on+0x26>
 801876e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018772:	fa24 f001 	lsr.w	r0, r4, r1
 8018776:	fa00 f101 	lsl.w	r1, r0, r1
 801877a:	428c      	cmp	r4, r1
 801877c:	d10b      	bne.n	8018796 <__any_on+0x3e>
 801877e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018782:	4293      	cmp	r3, r2
 8018784:	d803      	bhi.n	801878e <__any_on+0x36>
 8018786:	2000      	movs	r0, #0
 8018788:	bd10      	pop	{r4, pc}
 801878a:	4603      	mov	r3, r0
 801878c:	e7f7      	b.n	801877e <__any_on+0x26>
 801878e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018792:	2900      	cmp	r1, #0
 8018794:	d0f5      	beq.n	8018782 <__any_on+0x2a>
 8018796:	2001      	movs	r0, #1
 8018798:	e7f6      	b.n	8018788 <__any_on+0x30>

0801879a <__ascii_wctomb>:
 801879a:	4603      	mov	r3, r0
 801879c:	4608      	mov	r0, r1
 801879e:	b141      	cbz	r1, 80187b2 <__ascii_wctomb+0x18>
 80187a0:	2aff      	cmp	r2, #255	@ 0xff
 80187a2:	d904      	bls.n	80187ae <__ascii_wctomb+0x14>
 80187a4:	228a      	movs	r2, #138	@ 0x8a
 80187a6:	601a      	str	r2, [r3, #0]
 80187a8:	f04f 30ff 	mov.w	r0, #4294967295
 80187ac:	4770      	bx	lr
 80187ae:	700a      	strb	r2, [r1, #0]
 80187b0:	2001      	movs	r0, #1
 80187b2:	4770      	bx	lr

080187b4 <__ssputs_r>:
 80187b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b8:	688e      	ldr	r6, [r1, #8]
 80187ba:	461f      	mov	r7, r3
 80187bc:	42be      	cmp	r6, r7
 80187be:	680b      	ldr	r3, [r1, #0]
 80187c0:	4682      	mov	sl, r0
 80187c2:	460c      	mov	r4, r1
 80187c4:	4690      	mov	r8, r2
 80187c6:	d82d      	bhi.n	8018824 <__ssputs_r+0x70>
 80187c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80187cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80187d0:	d026      	beq.n	8018820 <__ssputs_r+0x6c>
 80187d2:	6965      	ldr	r5, [r4, #20]
 80187d4:	6909      	ldr	r1, [r1, #16]
 80187d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187da:	eba3 0901 	sub.w	r9, r3, r1
 80187de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80187e2:	1c7b      	adds	r3, r7, #1
 80187e4:	444b      	add	r3, r9
 80187e6:	106d      	asrs	r5, r5, #1
 80187e8:	429d      	cmp	r5, r3
 80187ea:	bf38      	it	cc
 80187ec:	461d      	movcc	r5, r3
 80187ee:	0553      	lsls	r3, r2, #21
 80187f0:	d527      	bpl.n	8018842 <__ssputs_r+0x8e>
 80187f2:	4629      	mov	r1, r5
 80187f4:	f7fd fba2 	bl	8015f3c <_malloc_r>
 80187f8:	4606      	mov	r6, r0
 80187fa:	b360      	cbz	r0, 8018856 <__ssputs_r+0xa2>
 80187fc:	6921      	ldr	r1, [r4, #16]
 80187fe:	464a      	mov	r2, r9
 8018800:	f7fe ff4b 	bl	801769a <memcpy>
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801880a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801880e:	81a3      	strh	r3, [r4, #12]
 8018810:	6126      	str	r6, [r4, #16]
 8018812:	6165      	str	r5, [r4, #20]
 8018814:	444e      	add	r6, r9
 8018816:	eba5 0509 	sub.w	r5, r5, r9
 801881a:	6026      	str	r6, [r4, #0]
 801881c:	60a5      	str	r5, [r4, #8]
 801881e:	463e      	mov	r6, r7
 8018820:	42be      	cmp	r6, r7
 8018822:	d900      	bls.n	8018826 <__ssputs_r+0x72>
 8018824:	463e      	mov	r6, r7
 8018826:	6820      	ldr	r0, [r4, #0]
 8018828:	4632      	mov	r2, r6
 801882a:	4641      	mov	r1, r8
 801882c:	f001 f8ca 	bl	80199c4 <memmove>
 8018830:	68a3      	ldr	r3, [r4, #8]
 8018832:	1b9b      	subs	r3, r3, r6
 8018834:	60a3      	str	r3, [r4, #8]
 8018836:	6823      	ldr	r3, [r4, #0]
 8018838:	4433      	add	r3, r6
 801883a:	6023      	str	r3, [r4, #0]
 801883c:	2000      	movs	r0, #0
 801883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018842:	462a      	mov	r2, r5
 8018844:	f001 f8f3 	bl	8019a2e <_realloc_r>
 8018848:	4606      	mov	r6, r0
 801884a:	2800      	cmp	r0, #0
 801884c:	d1e0      	bne.n	8018810 <__ssputs_r+0x5c>
 801884e:	6921      	ldr	r1, [r4, #16]
 8018850:	4650      	mov	r0, sl
 8018852:	f7fe ff5d 	bl	8017710 <_free_r>
 8018856:	230c      	movs	r3, #12
 8018858:	f8ca 3000 	str.w	r3, [sl]
 801885c:	89a3      	ldrh	r3, [r4, #12]
 801885e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018862:	81a3      	strh	r3, [r4, #12]
 8018864:	f04f 30ff 	mov.w	r0, #4294967295
 8018868:	e7e9      	b.n	801883e <__ssputs_r+0x8a>
	...

0801886c <_svfiprintf_r>:
 801886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018870:	4698      	mov	r8, r3
 8018872:	898b      	ldrh	r3, [r1, #12]
 8018874:	061b      	lsls	r3, r3, #24
 8018876:	b09d      	sub	sp, #116	@ 0x74
 8018878:	4607      	mov	r7, r0
 801887a:	460d      	mov	r5, r1
 801887c:	4614      	mov	r4, r2
 801887e:	d510      	bpl.n	80188a2 <_svfiprintf_r+0x36>
 8018880:	690b      	ldr	r3, [r1, #16]
 8018882:	b973      	cbnz	r3, 80188a2 <_svfiprintf_r+0x36>
 8018884:	2140      	movs	r1, #64	@ 0x40
 8018886:	f7fd fb59 	bl	8015f3c <_malloc_r>
 801888a:	6028      	str	r0, [r5, #0]
 801888c:	6128      	str	r0, [r5, #16]
 801888e:	b930      	cbnz	r0, 801889e <_svfiprintf_r+0x32>
 8018890:	230c      	movs	r3, #12
 8018892:	603b      	str	r3, [r7, #0]
 8018894:	f04f 30ff 	mov.w	r0, #4294967295
 8018898:	b01d      	add	sp, #116	@ 0x74
 801889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801889e:	2340      	movs	r3, #64	@ 0x40
 80188a0:	616b      	str	r3, [r5, #20]
 80188a2:	2300      	movs	r3, #0
 80188a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80188a6:	2320      	movs	r3, #32
 80188a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80188ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80188b0:	2330      	movs	r3, #48	@ 0x30
 80188b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018a50 <_svfiprintf_r+0x1e4>
 80188b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80188ba:	f04f 0901 	mov.w	r9, #1
 80188be:	4623      	mov	r3, r4
 80188c0:	469a      	mov	sl, r3
 80188c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188c6:	b10a      	cbz	r2, 80188cc <_svfiprintf_r+0x60>
 80188c8:	2a25      	cmp	r2, #37	@ 0x25
 80188ca:	d1f9      	bne.n	80188c0 <_svfiprintf_r+0x54>
 80188cc:	ebba 0b04 	subs.w	fp, sl, r4
 80188d0:	d00b      	beq.n	80188ea <_svfiprintf_r+0x7e>
 80188d2:	465b      	mov	r3, fp
 80188d4:	4622      	mov	r2, r4
 80188d6:	4629      	mov	r1, r5
 80188d8:	4638      	mov	r0, r7
 80188da:	f7ff ff6b 	bl	80187b4 <__ssputs_r>
 80188de:	3001      	adds	r0, #1
 80188e0:	f000 80a7 	beq.w	8018a32 <_svfiprintf_r+0x1c6>
 80188e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188e6:	445a      	add	r2, fp
 80188e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80188ea:	f89a 3000 	ldrb.w	r3, [sl]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	f000 809f 	beq.w	8018a32 <_svfiprintf_r+0x1c6>
 80188f4:	2300      	movs	r3, #0
 80188f6:	f04f 32ff 	mov.w	r2, #4294967295
 80188fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188fe:	f10a 0a01 	add.w	sl, sl, #1
 8018902:	9304      	str	r3, [sp, #16]
 8018904:	9307      	str	r3, [sp, #28]
 8018906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801890a:	931a      	str	r3, [sp, #104]	@ 0x68
 801890c:	4654      	mov	r4, sl
 801890e:	2205      	movs	r2, #5
 8018910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018914:	484e      	ldr	r0, [pc, #312]	@ (8018a50 <_svfiprintf_r+0x1e4>)
 8018916:	f7e7 fceb 	bl	80002f0 <memchr>
 801891a:	9a04      	ldr	r2, [sp, #16]
 801891c:	b9d8      	cbnz	r0, 8018956 <_svfiprintf_r+0xea>
 801891e:	06d0      	lsls	r0, r2, #27
 8018920:	bf44      	itt	mi
 8018922:	2320      	movmi	r3, #32
 8018924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018928:	0711      	lsls	r1, r2, #28
 801892a:	bf44      	itt	mi
 801892c:	232b      	movmi	r3, #43	@ 0x2b
 801892e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018932:	f89a 3000 	ldrb.w	r3, [sl]
 8018936:	2b2a      	cmp	r3, #42	@ 0x2a
 8018938:	d015      	beq.n	8018966 <_svfiprintf_r+0xfa>
 801893a:	9a07      	ldr	r2, [sp, #28]
 801893c:	4654      	mov	r4, sl
 801893e:	2000      	movs	r0, #0
 8018940:	f04f 0c0a 	mov.w	ip, #10
 8018944:	4621      	mov	r1, r4
 8018946:	f811 3b01 	ldrb.w	r3, [r1], #1
 801894a:	3b30      	subs	r3, #48	@ 0x30
 801894c:	2b09      	cmp	r3, #9
 801894e:	d94b      	bls.n	80189e8 <_svfiprintf_r+0x17c>
 8018950:	b1b0      	cbz	r0, 8018980 <_svfiprintf_r+0x114>
 8018952:	9207      	str	r2, [sp, #28]
 8018954:	e014      	b.n	8018980 <_svfiprintf_r+0x114>
 8018956:	eba0 0308 	sub.w	r3, r0, r8
 801895a:	fa09 f303 	lsl.w	r3, r9, r3
 801895e:	4313      	orrs	r3, r2
 8018960:	9304      	str	r3, [sp, #16]
 8018962:	46a2      	mov	sl, r4
 8018964:	e7d2      	b.n	801890c <_svfiprintf_r+0xa0>
 8018966:	9b03      	ldr	r3, [sp, #12]
 8018968:	1d19      	adds	r1, r3, #4
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	9103      	str	r1, [sp, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	bfbb      	ittet	lt
 8018972:	425b      	neglt	r3, r3
 8018974:	f042 0202 	orrlt.w	r2, r2, #2
 8018978:	9307      	strge	r3, [sp, #28]
 801897a:	9307      	strlt	r3, [sp, #28]
 801897c:	bfb8      	it	lt
 801897e:	9204      	strlt	r2, [sp, #16]
 8018980:	7823      	ldrb	r3, [r4, #0]
 8018982:	2b2e      	cmp	r3, #46	@ 0x2e
 8018984:	d10a      	bne.n	801899c <_svfiprintf_r+0x130>
 8018986:	7863      	ldrb	r3, [r4, #1]
 8018988:	2b2a      	cmp	r3, #42	@ 0x2a
 801898a:	d132      	bne.n	80189f2 <_svfiprintf_r+0x186>
 801898c:	9b03      	ldr	r3, [sp, #12]
 801898e:	1d1a      	adds	r2, r3, #4
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	9203      	str	r2, [sp, #12]
 8018994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018998:	3402      	adds	r4, #2
 801899a:	9305      	str	r3, [sp, #20]
 801899c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018a60 <_svfiprintf_r+0x1f4>
 80189a0:	7821      	ldrb	r1, [r4, #0]
 80189a2:	2203      	movs	r2, #3
 80189a4:	4650      	mov	r0, sl
 80189a6:	f7e7 fca3 	bl	80002f0 <memchr>
 80189aa:	b138      	cbz	r0, 80189bc <_svfiprintf_r+0x150>
 80189ac:	9b04      	ldr	r3, [sp, #16]
 80189ae:	eba0 000a 	sub.w	r0, r0, sl
 80189b2:	2240      	movs	r2, #64	@ 0x40
 80189b4:	4082      	lsls	r2, r0
 80189b6:	4313      	orrs	r3, r2
 80189b8:	3401      	adds	r4, #1
 80189ba:	9304      	str	r3, [sp, #16]
 80189bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189c0:	4824      	ldr	r0, [pc, #144]	@ (8018a54 <_svfiprintf_r+0x1e8>)
 80189c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80189c6:	2206      	movs	r2, #6
 80189c8:	f7e7 fc92 	bl	80002f0 <memchr>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	d036      	beq.n	8018a3e <_svfiprintf_r+0x1d2>
 80189d0:	4b21      	ldr	r3, [pc, #132]	@ (8018a58 <_svfiprintf_r+0x1ec>)
 80189d2:	bb1b      	cbnz	r3, 8018a1c <_svfiprintf_r+0x1b0>
 80189d4:	9b03      	ldr	r3, [sp, #12]
 80189d6:	3307      	adds	r3, #7
 80189d8:	f023 0307 	bic.w	r3, r3, #7
 80189dc:	3308      	adds	r3, #8
 80189de:	9303      	str	r3, [sp, #12]
 80189e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189e2:	4433      	add	r3, r6
 80189e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80189e6:	e76a      	b.n	80188be <_svfiprintf_r+0x52>
 80189e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80189ec:	460c      	mov	r4, r1
 80189ee:	2001      	movs	r0, #1
 80189f0:	e7a8      	b.n	8018944 <_svfiprintf_r+0xd8>
 80189f2:	2300      	movs	r3, #0
 80189f4:	3401      	adds	r4, #1
 80189f6:	9305      	str	r3, [sp, #20]
 80189f8:	4619      	mov	r1, r3
 80189fa:	f04f 0c0a 	mov.w	ip, #10
 80189fe:	4620      	mov	r0, r4
 8018a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a04:	3a30      	subs	r2, #48	@ 0x30
 8018a06:	2a09      	cmp	r2, #9
 8018a08:	d903      	bls.n	8018a12 <_svfiprintf_r+0x1a6>
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d0c6      	beq.n	801899c <_svfiprintf_r+0x130>
 8018a0e:	9105      	str	r1, [sp, #20]
 8018a10:	e7c4      	b.n	801899c <_svfiprintf_r+0x130>
 8018a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a16:	4604      	mov	r4, r0
 8018a18:	2301      	movs	r3, #1
 8018a1a:	e7f0      	b.n	80189fe <_svfiprintf_r+0x192>
 8018a1c:	ab03      	add	r3, sp, #12
 8018a1e:	9300      	str	r3, [sp, #0]
 8018a20:	462a      	mov	r2, r5
 8018a22:	4b0e      	ldr	r3, [pc, #56]	@ (8018a5c <_svfiprintf_r+0x1f0>)
 8018a24:	a904      	add	r1, sp, #16
 8018a26:	4638      	mov	r0, r7
 8018a28:	f3af 8000 	nop.w
 8018a2c:	1c42      	adds	r2, r0, #1
 8018a2e:	4606      	mov	r6, r0
 8018a30:	d1d6      	bne.n	80189e0 <_svfiprintf_r+0x174>
 8018a32:	89ab      	ldrh	r3, [r5, #12]
 8018a34:	065b      	lsls	r3, r3, #25
 8018a36:	f53f af2d 	bmi.w	8018894 <_svfiprintf_r+0x28>
 8018a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018a3c:	e72c      	b.n	8018898 <_svfiprintf_r+0x2c>
 8018a3e:	ab03      	add	r3, sp, #12
 8018a40:	9300      	str	r3, [sp, #0]
 8018a42:	462a      	mov	r2, r5
 8018a44:	4b05      	ldr	r3, [pc, #20]	@ (8018a5c <_svfiprintf_r+0x1f0>)
 8018a46:	a904      	add	r1, sp, #16
 8018a48:	4638      	mov	r0, r7
 8018a4a:	f000 fb87 	bl	801915c <_printf_i>
 8018a4e:	e7ed      	b.n	8018a2c <_svfiprintf_r+0x1c0>
 8018a50:	0801a238 	.word	0x0801a238
 8018a54:	0801a242 	.word	0x0801a242
 8018a58:	00000000 	.word	0x00000000
 8018a5c:	080187b5 	.word	0x080187b5
 8018a60:	0801a23e 	.word	0x0801a23e

08018a64 <_sungetc_r>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	1c4b      	adds	r3, r1, #1
 8018a68:	4614      	mov	r4, r2
 8018a6a:	d103      	bne.n	8018a74 <_sungetc_r+0x10>
 8018a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8018a70:	4628      	mov	r0, r5
 8018a72:	bd38      	pop	{r3, r4, r5, pc}
 8018a74:	8993      	ldrh	r3, [r2, #12]
 8018a76:	f023 0320 	bic.w	r3, r3, #32
 8018a7a:	8193      	strh	r3, [r2, #12]
 8018a7c:	6853      	ldr	r3, [r2, #4]
 8018a7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018a80:	b2cd      	uxtb	r5, r1
 8018a82:	b18a      	cbz	r2, 8018aa8 <_sungetc_r+0x44>
 8018a84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018a86:	429a      	cmp	r2, r3
 8018a88:	dd08      	ble.n	8018a9c <_sungetc_r+0x38>
 8018a8a:	6823      	ldr	r3, [r4, #0]
 8018a8c:	1e5a      	subs	r2, r3, #1
 8018a8e:	6022      	str	r2, [r4, #0]
 8018a90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018a94:	6863      	ldr	r3, [r4, #4]
 8018a96:	3301      	adds	r3, #1
 8018a98:	6063      	str	r3, [r4, #4]
 8018a9a:	e7e9      	b.n	8018a70 <_sungetc_r+0xc>
 8018a9c:	4621      	mov	r1, r4
 8018a9e:	f000 fec2 	bl	8019826 <__submore>
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	d0f1      	beq.n	8018a8a <_sungetc_r+0x26>
 8018aa6:	e7e1      	b.n	8018a6c <_sungetc_r+0x8>
 8018aa8:	6921      	ldr	r1, [r4, #16]
 8018aaa:	6822      	ldr	r2, [r4, #0]
 8018aac:	b141      	cbz	r1, 8018ac0 <_sungetc_r+0x5c>
 8018aae:	4291      	cmp	r1, r2
 8018ab0:	d206      	bcs.n	8018ac0 <_sungetc_r+0x5c>
 8018ab2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8018ab6:	42a9      	cmp	r1, r5
 8018ab8:	d102      	bne.n	8018ac0 <_sungetc_r+0x5c>
 8018aba:	3a01      	subs	r2, #1
 8018abc:	6022      	str	r2, [r4, #0]
 8018abe:	e7ea      	b.n	8018a96 <_sungetc_r+0x32>
 8018ac0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8018ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8018aca:	2303      	movs	r3, #3
 8018acc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018ace:	4623      	mov	r3, r4
 8018ad0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018ad4:	6023      	str	r3, [r4, #0]
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	e7de      	b.n	8018a98 <_sungetc_r+0x34>

08018ada <__ssrefill_r>:
 8018ada:	b510      	push	{r4, lr}
 8018adc:	460c      	mov	r4, r1
 8018ade:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018ae0:	b169      	cbz	r1, 8018afe <__ssrefill_r+0x24>
 8018ae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018ae6:	4299      	cmp	r1, r3
 8018ae8:	d001      	beq.n	8018aee <__ssrefill_r+0x14>
 8018aea:	f7fe fe11 	bl	8017710 <_free_r>
 8018aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018af0:	6063      	str	r3, [r4, #4]
 8018af2:	2000      	movs	r0, #0
 8018af4:	6360      	str	r0, [r4, #52]	@ 0x34
 8018af6:	b113      	cbz	r3, 8018afe <__ssrefill_r+0x24>
 8018af8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018afa:	6023      	str	r3, [r4, #0]
 8018afc:	bd10      	pop	{r4, pc}
 8018afe:	6923      	ldr	r3, [r4, #16]
 8018b00:	6023      	str	r3, [r4, #0]
 8018b02:	2300      	movs	r3, #0
 8018b04:	6063      	str	r3, [r4, #4]
 8018b06:	89a3      	ldrh	r3, [r4, #12]
 8018b08:	f043 0320 	orr.w	r3, r3, #32
 8018b0c:	81a3      	strh	r3, [r4, #12]
 8018b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8018b12:	e7f3      	b.n	8018afc <__ssrefill_r+0x22>

08018b14 <__ssvfiscanf_r>:
 8018b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b18:	460c      	mov	r4, r1
 8018b1a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8018b1e:	2100      	movs	r1, #0
 8018b20:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8018b24:	49a5      	ldr	r1, [pc, #660]	@ (8018dbc <__ssvfiscanf_r+0x2a8>)
 8018b26:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018b28:	f10d 0804 	add.w	r8, sp, #4
 8018b2c:	49a4      	ldr	r1, [pc, #656]	@ (8018dc0 <__ssvfiscanf_r+0x2ac>)
 8018b2e:	4fa5      	ldr	r7, [pc, #660]	@ (8018dc4 <__ssvfiscanf_r+0x2b0>)
 8018b30:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8018b34:	4606      	mov	r6, r0
 8018b36:	91a1      	str	r1, [sp, #644]	@ 0x284
 8018b38:	9300      	str	r3, [sp, #0]
 8018b3a:	7813      	ldrb	r3, [r2, #0]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	f000 8158 	beq.w	8018df2 <__ssvfiscanf_r+0x2de>
 8018b42:	5cf9      	ldrb	r1, [r7, r3]
 8018b44:	f011 0108 	ands.w	r1, r1, #8
 8018b48:	f102 0501 	add.w	r5, r2, #1
 8018b4c:	d019      	beq.n	8018b82 <__ssvfiscanf_r+0x6e>
 8018b4e:	6863      	ldr	r3, [r4, #4]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dd0f      	ble.n	8018b74 <__ssvfiscanf_r+0x60>
 8018b54:	6823      	ldr	r3, [r4, #0]
 8018b56:	781a      	ldrb	r2, [r3, #0]
 8018b58:	5cba      	ldrb	r2, [r7, r2]
 8018b5a:	0712      	lsls	r2, r2, #28
 8018b5c:	d401      	bmi.n	8018b62 <__ssvfiscanf_r+0x4e>
 8018b5e:	462a      	mov	r2, r5
 8018b60:	e7eb      	b.n	8018b3a <__ssvfiscanf_r+0x26>
 8018b62:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018b64:	3201      	adds	r2, #1
 8018b66:	9245      	str	r2, [sp, #276]	@ 0x114
 8018b68:	6862      	ldr	r2, [r4, #4]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	3a01      	subs	r2, #1
 8018b6e:	6062      	str	r2, [r4, #4]
 8018b70:	6023      	str	r3, [r4, #0]
 8018b72:	e7ec      	b.n	8018b4e <__ssvfiscanf_r+0x3a>
 8018b74:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018b76:	4621      	mov	r1, r4
 8018b78:	4630      	mov	r0, r6
 8018b7a:	4798      	blx	r3
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	d0e9      	beq.n	8018b54 <__ssvfiscanf_r+0x40>
 8018b80:	e7ed      	b.n	8018b5e <__ssvfiscanf_r+0x4a>
 8018b82:	2b25      	cmp	r3, #37	@ 0x25
 8018b84:	d012      	beq.n	8018bac <__ssvfiscanf_r+0x98>
 8018b86:	4699      	mov	r9, r3
 8018b88:	6863      	ldr	r3, [r4, #4]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	f340 8093 	ble.w	8018cb6 <__ssvfiscanf_r+0x1a2>
 8018b90:	6822      	ldr	r2, [r4, #0]
 8018b92:	7813      	ldrb	r3, [r2, #0]
 8018b94:	454b      	cmp	r3, r9
 8018b96:	f040 812c 	bne.w	8018df2 <__ssvfiscanf_r+0x2de>
 8018b9a:	6863      	ldr	r3, [r4, #4]
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	6063      	str	r3, [r4, #4]
 8018ba0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8018ba2:	3201      	adds	r2, #1
 8018ba4:	3301      	adds	r3, #1
 8018ba6:	6022      	str	r2, [r4, #0]
 8018ba8:	9345      	str	r3, [sp, #276]	@ 0x114
 8018baa:	e7d8      	b.n	8018b5e <__ssvfiscanf_r+0x4a>
 8018bac:	9141      	str	r1, [sp, #260]	@ 0x104
 8018bae:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018bb0:	7853      	ldrb	r3, [r2, #1]
 8018bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bb4:	bf02      	ittt	eq
 8018bb6:	2310      	moveq	r3, #16
 8018bb8:	1c95      	addeq	r5, r2, #2
 8018bba:	9341      	streq	r3, [sp, #260]	@ 0x104
 8018bbc:	220a      	movs	r2, #10
 8018bbe:	46a9      	mov	r9, r5
 8018bc0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8018bc4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8018bc8:	2b09      	cmp	r3, #9
 8018bca:	d91e      	bls.n	8018c0a <__ssvfiscanf_r+0xf6>
 8018bcc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8018dc8 <__ssvfiscanf_r+0x2b4>
 8018bd0:	2203      	movs	r2, #3
 8018bd2:	4650      	mov	r0, sl
 8018bd4:	f7e7 fb8c 	bl	80002f0 <memchr>
 8018bd8:	b138      	cbz	r0, 8018bea <__ssvfiscanf_r+0xd6>
 8018bda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018bdc:	eba0 000a 	sub.w	r0, r0, sl
 8018be0:	2301      	movs	r3, #1
 8018be2:	4083      	lsls	r3, r0
 8018be4:	4313      	orrs	r3, r2
 8018be6:	9341      	str	r3, [sp, #260]	@ 0x104
 8018be8:	464d      	mov	r5, r9
 8018bea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018bee:	2b78      	cmp	r3, #120	@ 0x78
 8018bf0:	d806      	bhi.n	8018c00 <__ssvfiscanf_r+0xec>
 8018bf2:	2b57      	cmp	r3, #87	@ 0x57
 8018bf4:	d810      	bhi.n	8018c18 <__ssvfiscanf_r+0x104>
 8018bf6:	2b25      	cmp	r3, #37	@ 0x25
 8018bf8:	d0c5      	beq.n	8018b86 <__ssvfiscanf_r+0x72>
 8018bfa:	d857      	bhi.n	8018cac <__ssvfiscanf_r+0x198>
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d065      	beq.n	8018ccc <__ssvfiscanf_r+0x1b8>
 8018c00:	2303      	movs	r3, #3
 8018c02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018c04:	230a      	movs	r3, #10
 8018c06:	9342      	str	r3, [sp, #264]	@ 0x108
 8018c08:	e078      	b.n	8018cfc <__ssvfiscanf_r+0x1e8>
 8018c0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8018c0c:	fb02 1103 	mla	r1, r2, r3, r1
 8018c10:	3930      	subs	r1, #48	@ 0x30
 8018c12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018c14:	464d      	mov	r5, r9
 8018c16:	e7d2      	b.n	8018bbe <__ssvfiscanf_r+0xaa>
 8018c18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018c1c:	2a20      	cmp	r2, #32
 8018c1e:	d8ef      	bhi.n	8018c00 <__ssvfiscanf_r+0xec>
 8018c20:	a101      	add	r1, pc, #4	@ (adr r1, 8018c28 <__ssvfiscanf_r+0x114>)
 8018c22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018c26:	bf00      	nop
 8018c28:	08018cdb 	.word	0x08018cdb
 8018c2c:	08018c01 	.word	0x08018c01
 8018c30:	08018c01 	.word	0x08018c01
 8018c34:	08018d35 	.word	0x08018d35
 8018c38:	08018c01 	.word	0x08018c01
 8018c3c:	08018c01 	.word	0x08018c01
 8018c40:	08018c01 	.word	0x08018c01
 8018c44:	08018c01 	.word	0x08018c01
 8018c48:	08018c01 	.word	0x08018c01
 8018c4c:	08018c01 	.word	0x08018c01
 8018c50:	08018c01 	.word	0x08018c01
 8018c54:	08018d4b 	.word	0x08018d4b
 8018c58:	08018d31 	.word	0x08018d31
 8018c5c:	08018cb3 	.word	0x08018cb3
 8018c60:	08018cb3 	.word	0x08018cb3
 8018c64:	08018cb3 	.word	0x08018cb3
 8018c68:	08018c01 	.word	0x08018c01
 8018c6c:	08018ced 	.word	0x08018ced
 8018c70:	08018c01 	.word	0x08018c01
 8018c74:	08018c01 	.word	0x08018c01
 8018c78:	08018c01 	.word	0x08018c01
 8018c7c:	08018c01 	.word	0x08018c01
 8018c80:	08018d5b 	.word	0x08018d5b
 8018c84:	08018cf5 	.word	0x08018cf5
 8018c88:	08018cd3 	.word	0x08018cd3
 8018c8c:	08018c01 	.word	0x08018c01
 8018c90:	08018c01 	.word	0x08018c01
 8018c94:	08018d57 	.word	0x08018d57
 8018c98:	08018c01 	.word	0x08018c01
 8018c9c:	08018d31 	.word	0x08018d31
 8018ca0:	08018c01 	.word	0x08018c01
 8018ca4:	08018c01 	.word	0x08018c01
 8018ca8:	08018cdb 	.word	0x08018cdb
 8018cac:	3b45      	subs	r3, #69	@ 0x45
 8018cae:	2b02      	cmp	r3, #2
 8018cb0:	d8a6      	bhi.n	8018c00 <__ssvfiscanf_r+0xec>
 8018cb2:	2305      	movs	r3, #5
 8018cb4:	e021      	b.n	8018cfa <__ssvfiscanf_r+0x1e6>
 8018cb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018cb8:	4621      	mov	r1, r4
 8018cba:	4630      	mov	r0, r6
 8018cbc:	4798      	blx	r3
 8018cbe:	2800      	cmp	r0, #0
 8018cc0:	f43f af66 	beq.w	8018b90 <__ssvfiscanf_r+0x7c>
 8018cc4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	f040 808b 	bne.w	8018de2 <__ssvfiscanf_r+0x2ce>
 8018ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8018cd0:	e08b      	b.n	8018dea <__ssvfiscanf_r+0x2d6>
 8018cd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018cd4:	f042 0220 	orr.w	r2, r2, #32
 8018cd8:	9241      	str	r2, [sp, #260]	@ 0x104
 8018cda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018ce0:	9241      	str	r2, [sp, #260]	@ 0x104
 8018ce2:	2210      	movs	r2, #16
 8018ce4:	2b6e      	cmp	r3, #110	@ 0x6e
 8018ce6:	9242      	str	r2, [sp, #264]	@ 0x108
 8018ce8:	d902      	bls.n	8018cf0 <__ssvfiscanf_r+0x1dc>
 8018cea:	e005      	b.n	8018cf8 <__ssvfiscanf_r+0x1e4>
 8018cec:	2300      	movs	r3, #0
 8018cee:	9342      	str	r3, [sp, #264]	@ 0x108
 8018cf0:	2303      	movs	r3, #3
 8018cf2:	e002      	b.n	8018cfa <__ssvfiscanf_r+0x1e6>
 8018cf4:	2308      	movs	r3, #8
 8018cf6:	9342      	str	r3, [sp, #264]	@ 0x108
 8018cf8:	2304      	movs	r3, #4
 8018cfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018cfc:	6863      	ldr	r3, [r4, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	dd39      	ble.n	8018d76 <__ssvfiscanf_r+0x262>
 8018d02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018d04:	0659      	lsls	r1, r3, #25
 8018d06:	d404      	bmi.n	8018d12 <__ssvfiscanf_r+0x1fe>
 8018d08:	6823      	ldr	r3, [r4, #0]
 8018d0a:	781a      	ldrb	r2, [r3, #0]
 8018d0c:	5cba      	ldrb	r2, [r7, r2]
 8018d0e:	0712      	lsls	r2, r2, #28
 8018d10:	d438      	bmi.n	8018d84 <__ssvfiscanf_r+0x270>
 8018d12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018d14:	2b02      	cmp	r3, #2
 8018d16:	dc47      	bgt.n	8018da8 <__ssvfiscanf_r+0x294>
 8018d18:	466b      	mov	r3, sp
 8018d1a:	4622      	mov	r2, r4
 8018d1c:	a941      	add	r1, sp, #260	@ 0x104
 8018d1e:	4630      	mov	r0, r6
 8018d20:	f000 fb3c 	bl	801939c <_scanf_chars>
 8018d24:	2801      	cmp	r0, #1
 8018d26:	d064      	beq.n	8018df2 <__ssvfiscanf_r+0x2de>
 8018d28:	2802      	cmp	r0, #2
 8018d2a:	f47f af18 	bne.w	8018b5e <__ssvfiscanf_r+0x4a>
 8018d2e:	e7c9      	b.n	8018cc4 <__ssvfiscanf_r+0x1b0>
 8018d30:	220a      	movs	r2, #10
 8018d32:	e7d7      	b.n	8018ce4 <__ssvfiscanf_r+0x1d0>
 8018d34:	4629      	mov	r1, r5
 8018d36:	4640      	mov	r0, r8
 8018d38:	f000 fd3c 	bl	80197b4 <__sccl>
 8018d3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d42:	9341      	str	r3, [sp, #260]	@ 0x104
 8018d44:	4605      	mov	r5, r0
 8018d46:	2301      	movs	r3, #1
 8018d48:	e7d7      	b.n	8018cfa <__ssvfiscanf_r+0x1e6>
 8018d4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d50:	9341      	str	r3, [sp, #260]	@ 0x104
 8018d52:	2300      	movs	r3, #0
 8018d54:	e7d1      	b.n	8018cfa <__ssvfiscanf_r+0x1e6>
 8018d56:	2302      	movs	r3, #2
 8018d58:	e7cf      	b.n	8018cfa <__ssvfiscanf_r+0x1e6>
 8018d5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8018d5c:	06c3      	lsls	r3, r0, #27
 8018d5e:	f53f aefe 	bmi.w	8018b5e <__ssvfiscanf_r+0x4a>
 8018d62:	9b00      	ldr	r3, [sp, #0]
 8018d64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018d66:	1d19      	adds	r1, r3, #4
 8018d68:	9100      	str	r1, [sp, #0]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	07c0      	lsls	r0, r0, #31
 8018d6e:	bf4c      	ite	mi
 8018d70:	801a      	strhmi	r2, [r3, #0]
 8018d72:	601a      	strpl	r2, [r3, #0]
 8018d74:	e6f3      	b.n	8018b5e <__ssvfiscanf_r+0x4a>
 8018d76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018d78:	4621      	mov	r1, r4
 8018d7a:	4630      	mov	r0, r6
 8018d7c:	4798      	blx	r3
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	d0bf      	beq.n	8018d02 <__ssvfiscanf_r+0x1ee>
 8018d82:	e79f      	b.n	8018cc4 <__ssvfiscanf_r+0x1b0>
 8018d84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018d86:	3201      	adds	r2, #1
 8018d88:	9245      	str	r2, [sp, #276]	@ 0x114
 8018d8a:	6862      	ldr	r2, [r4, #4]
 8018d8c:	3a01      	subs	r2, #1
 8018d8e:	2a00      	cmp	r2, #0
 8018d90:	6062      	str	r2, [r4, #4]
 8018d92:	dd02      	ble.n	8018d9a <__ssvfiscanf_r+0x286>
 8018d94:	3301      	adds	r3, #1
 8018d96:	6023      	str	r3, [r4, #0]
 8018d98:	e7b6      	b.n	8018d08 <__ssvfiscanf_r+0x1f4>
 8018d9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018d9c:	4621      	mov	r1, r4
 8018d9e:	4630      	mov	r0, r6
 8018da0:	4798      	blx	r3
 8018da2:	2800      	cmp	r0, #0
 8018da4:	d0b0      	beq.n	8018d08 <__ssvfiscanf_r+0x1f4>
 8018da6:	e78d      	b.n	8018cc4 <__ssvfiscanf_r+0x1b0>
 8018da8:	2b04      	cmp	r3, #4
 8018daa:	dc0f      	bgt.n	8018dcc <__ssvfiscanf_r+0x2b8>
 8018dac:	466b      	mov	r3, sp
 8018dae:	4622      	mov	r2, r4
 8018db0:	a941      	add	r1, sp, #260	@ 0x104
 8018db2:	4630      	mov	r0, r6
 8018db4:	f000 fb4c 	bl	8019450 <_scanf_i>
 8018db8:	e7b4      	b.n	8018d24 <__ssvfiscanf_r+0x210>
 8018dba:	bf00      	nop
 8018dbc:	08018a65 	.word	0x08018a65
 8018dc0:	08018adb 	.word	0x08018adb
 8018dc4:	08019eb1 	.word	0x08019eb1
 8018dc8:	0801a23e 	.word	0x0801a23e
 8018dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8018df8 <__ssvfiscanf_r+0x2e4>)
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	f43f aec5 	beq.w	8018b5e <__ssvfiscanf_r+0x4a>
 8018dd4:	466b      	mov	r3, sp
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	a941      	add	r1, sp, #260	@ 0x104
 8018dda:	4630      	mov	r0, r6
 8018ddc:	f7fd ff82 	bl	8016ce4 <_scanf_float>
 8018de0:	e7a0      	b.n	8018d24 <__ssvfiscanf_r+0x210>
 8018de2:	89a3      	ldrh	r3, [r4, #12]
 8018de4:	065b      	lsls	r3, r3, #25
 8018de6:	f53f af71 	bmi.w	8018ccc <__ssvfiscanf_r+0x1b8>
 8018dea:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8018dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018df2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018df4:	e7f9      	b.n	8018dea <__ssvfiscanf_r+0x2d6>
 8018df6:	bf00      	nop
 8018df8:	08016ce5 	.word	0x08016ce5

08018dfc <__sfputc_r>:
 8018dfc:	6893      	ldr	r3, [r2, #8]
 8018dfe:	3b01      	subs	r3, #1
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	b410      	push	{r4}
 8018e04:	6093      	str	r3, [r2, #8]
 8018e06:	da08      	bge.n	8018e1a <__sfputc_r+0x1e>
 8018e08:	6994      	ldr	r4, [r2, #24]
 8018e0a:	42a3      	cmp	r3, r4
 8018e0c:	db01      	blt.n	8018e12 <__sfputc_r+0x16>
 8018e0e:	290a      	cmp	r1, #10
 8018e10:	d103      	bne.n	8018e1a <__sfputc_r+0x1e>
 8018e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e16:	f000 bd40 	b.w	801989a <__swbuf_r>
 8018e1a:	6813      	ldr	r3, [r2, #0]
 8018e1c:	1c58      	adds	r0, r3, #1
 8018e1e:	6010      	str	r0, [r2, #0]
 8018e20:	7019      	strb	r1, [r3, #0]
 8018e22:	4608      	mov	r0, r1
 8018e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e28:	4770      	bx	lr

08018e2a <__sfputs_r>:
 8018e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e2c:	4606      	mov	r6, r0
 8018e2e:	460f      	mov	r7, r1
 8018e30:	4614      	mov	r4, r2
 8018e32:	18d5      	adds	r5, r2, r3
 8018e34:	42ac      	cmp	r4, r5
 8018e36:	d101      	bne.n	8018e3c <__sfputs_r+0x12>
 8018e38:	2000      	movs	r0, #0
 8018e3a:	e007      	b.n	8018e4c <__sfputs_r+0x22>
 8018e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e40:	463a      	mov	r2, r7
 8018e42:	4630      	mov	r0, r6
 8018e44:	f7ff ffda 	bl	8018dfc <__sfputc_r>
 8018e48:	1c43      	adds	r3, r0, #1
 8018e4a:	d1f3      	bne.n	8018e34 <__sfputs_r+0xa>
 8018e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e50 <_vfiprintf_r>:
 8018e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e54:	460d      	mov	r5, r1
 8018e56:	b09d      	sub	sp, #116	@ 0x74
 8018e58:	4614      	mov	r4, r2
 8018e5a:	4698      	mov	r8, r3
 8018e5c:	4606      	mov	r6, r0
 8018e5e:	b118      	cbz	r0, 8018e68 <_vfiprintf_r+0x18>
 8018e60:	6a03      	ldr	r3, [r0, #32]
 8018e62:	b90b      	cbnz	r3, 8018e68 <_vfiprintf_r+0x18>
 8018e64:	f7fe f9d6 	bl	8017214 <__sinit>
 8018e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e6a:	07d9      	lsls	r1, r3, #31
 8018e6c:	d405      	bmi.n	8018e7a <_vfiprintf_r+0x2a>
 8018e6e:	89ab      	ldrh	r3, [r5, #12]
 8018e70:	059a      	lsls	r2, r3, #22
 8018e72:	d402      	bmi.n	8018e7a <_vfiprintf_r+0x2a>
 8018e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e76:	f7fe fc0e 	bl	8017696 <__retarget_lock_acquire_recursive>
 8018e7a:	89ab      	ldrh	r3, [r5, #12]
 8018e7c:	071b      	lsls	r3, r3, #28
 8018e7e:	d501      	bpl.n	8018e84 <_vfiprintf_r+0x34>
 8018e80:	692b      	ldr	r3, [r5, #16]
 8018e82:	b99b      	cbnz	r3, 8018eac <_vfiprintf_r+0x5c>
 8018e84:	4629      	mov	r1, r5
 8018e86:	4630      	mov	r0, r6
 8018e88:	f000 fd46 	bl	8019918 <__swsetup_r>
 8018e8c:	b170      	cbz	r0, 8018eac <_vfiprintf_r+0x5c>
 8018e8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e90:	07dc      	lsls	r4, r3, #31
 8018e92:	d504      	bpl.n	8018e9e <_vfiprintf_r+0x4e>
 8018e94:	f04f 30ff 	mov.w	r0, #4294967295
 8018e98:	b01d      	add	sp, #116	@ 0x74
 8018e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9e:	89ab      	ldrh	r3, [r5, #12]
 8018ea0:	0598      	lsls	r0, r3, #22
 8018ea2:	d4f7      	bmi.n	8018e94 <_vfiprintf_r+0x44>
 8018ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ea6:	f7fe fbf7 	bl	8017698 <__retarget_lock_release_recursive>
 8018eaa:	e7f3      	b.n	8018e94 <_vfiprintf_r+0x44>
 8018eac:	2300      	movs	r3, #0
 8018eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8018eb0:	2320      	movs	r3, #32
 8018eb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8018eba:	2330      	movs	r3, #48	@ 0x30
 8018ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801906c <_vfiprintf_r+0x21c>
 8018ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018ec4:	f04f 0901 	mov.w	r9, #1
 8018ec8:	4623      	mov	r3, r4
 8018eca:	469a      	mov	sl, r3
 8018ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ed0:	b10a      	cbz	r2, 8018ed6 <_vfiprintf_r+0x86>
 8018ed2:	2a25      	cmp	r2, #37	@ 0x25
 8018ed4:	d1f9      	bne.n	8018eca <_vfiprintf_r+0x7a>
 8018ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8018eda:	d00b      	beq.n	8018ef4 <_vfiprintf_r+0xa4>
 8018edc:	465b      	mov	r3, fp
 8018ede:	4622      	mov	r2, r4
 8018ee0:	4629      	mov	r1, r5
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	f7ff ffa1 	bl	8018e2a <__sfputs_r>
 8018ee8:	3001      	adds	r0, #1
 8018eea:	f000 80a7 	beq.w	801903c <_vfiprintf_r+0x1ec>
 8018eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ef0:	445a      	add	r2, fp
 8018ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f000 809f 	beq.w	801903c <_vfiprintf_r+0x1ec>
 8018efe:	2300      	movs	r3, #0
 8018f00:	f04f 32ff 	mov.w	r2, #4294967295
 8018f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f08:	f10a 0a01 	add.w	sl, sl, #1
 8018f0c:	9304      	str	r3, [sp, #16]
 8018f0e:	9307      	str	r3, [sp, #28]
 8018f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8018f16:	4654      	mov	r4, sl
 8018f18:	2205      	movs	r2, #5
 8018f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f1e:	4853      	ldr	r0, [pc, #332]	@ (801906c <_vfiprintf_r+0x21c>)
 8018f20:	f7e7 f9e6 	bl	80002f0 <memchr>
 8018f24:	9a04      	ldr	r2, [sp, #16]
 8018f26:	b9d8      	cbnz	r0, 8018f60 <_vfiprintf_r+0x110>
 8018f28:	06d1      	lsls	r1, r2, #27
 8018f2a:	bf44      	itt	mi
 8018f2c:	2320      	movmi	r3, #32
 8018f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f32:	0713      	lsls	r3, r2, #28
 8018f34:	bf44      	itt	mi
 8018f36:	232b      	movmi	r3, #43	@ 0x2b
 8018f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8018f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f42:	d015      	beq.n	8018f70 <_vfiprintf_r+0x120>
 8018f44:	9a07      	ldr	r2, [sp, #28]
 8018f46:	4654      	mov	r4, sl
 8018f48:	2000      	movs	r0, #0
 8018f4a:	f04f 0c0a 	mov.w	ip, #10
 8018f4e:	4621      	mov	r1, r4
 8018f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f54:	3b30      	subs	r3, #48	@ 0x30
 8018f56:	2b09      	cmp	r3, #9
 8018f58:	d94b      	bls.n	8018ff2 <_vfiprintf_r+0x1a2>
 8018f5a:	b1b0      	cbz	r0, 8018f8a <_vfiprintf_r+0x13a>
 8018f5c:	9207      	str	r2, [sp, #28]
 8018f5e:	e014      	b.n	8018f8a <_vfiprintf_r+0x13a>
 8018f60:	eba0 0308 	sub.w	r3, r0, r8
 8018f64:	fa09 f303 	lsl.w	r3, r9, r3
 8018f68:	4313      	orrs	r3, r2
 8018f6a:	9304      	str	r3, [sp, #16]
 8018f6c:	46a2      	mov	sl, r4
 8018f6e:	e7d2      	b.n	8018f16 <_vfiprintf_r+0xc6>
 8018f70:	9b03      	ldr	r3, [sp, #12]
 8018f72:	1d19      	adds	r1, r3, #4
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	9103      	str	r1, [sp, #12]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	bfbb      	ittet	lt
 8018f7c:	425b      	neglt	r3, r3
 8018f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8018f82:	9307      	strge	r3, [sp, #28]
 8018f84:	9307      	strlt	r3, [sp, #28]
 8018f86:	bfb8      	it	lt
 8018f88:	9204      	strlt	r2, [sp, #16]
 8018f8a:	7823      	ldrb	r3, [r4, #0]
 8018f8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f8e:	d10a      	bne.n	8018fa6 <_vfiprintf_r+0x156>
 8018f90:	7863      	ldrb	r3, [r4, #1]
 8018f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f94:	d132      	bne.n	8018ffc <_vfiprintf_r+0x1ac>
 8018f96:	9b03      	ldr	r3, [sp, #12]
 8018f98:	1d1a      	adds	r2, r3, #4
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	9203      	str	r2, [sp, #12]
 8018f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018fa2:	3402      	adds	r4, #2
 8018fa4:	9305      	str	r3, [sp, #20]
 8018fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801907c <_vfiprintf_r+0x22c>
 8018faa:	7821      	ldrb	r1, [r4, #0]
 8018fac:	2203      	movs	r2, #3
 8018fae:	4650      	mov	r0, sl
 8018fb0:	f7e7 f99e 	bl	80002f0 <memchr>
 8018fb4:	b138      	cbz	r0, 8018fc6 <_vfiprintf_r+0x176>
 8018fb6:	9b04      	ldr	r3, [sp, #16]
 8018fb8:	eba0 000a 	sub.w	r0, r0, sl
 8018fbc:	2240      	movs	r2, #64	@ 0x40
 8018fbe:	4082      	lsls	r2, r0
 8018fc0:	4313      	orrs	r3, r2
 8018fc2:	3401      	adds	r4, #1
 8018fc4:	9304      	str	r3, [sp, #16]
 8018fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fca:	4829      	ldr	r0, [pc, #164]	@ (8019070 <_vfiprintf_r+0x220>)
 8018fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018fd0:	2206      	movs	r2, #6
 8018fd2:	f7e7 f98d 	bl	80002f0 <memchr>
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	d03f      	beq.n	801905a <_vfiprintf_r+0x20a>
 8018fda:	4b26      	ldr	r3, [pc, #152]	@ (8019074 <_vfiprintf_r+0x224>)
 8018fdc:	bb1b      	cbnz	r3, 8019026 <_vfiprintf_r+0x1d6>
 8018fde:	9b03      	ldr	r3, [sp, #12]
 8018fe0:	3307      	adds	r3, #7
 8018fe2:	f023 0307 	bic.w	r3, r3, #7
 8018fe6:	3308      	adds	r3, #8
 8018fe8:	9303      	str	r3, [sp, #12]
 8018fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fec:	443b      	add	r3, r7
 8018fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ff0:	e76a      	b.n	8018ec8 <_vfiprintf_r+0x78>
 8018ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ff6:	460c      	mov	r4, r1
 8018ff8:	2001      	movs	r0, #1
 8018ffa:	e7a8      	b.n	8018f4e <_vfiprintf_r+0xfe>
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	3401      	adds	r4, #1
 8019000:	9305      	str	r3, [sp, #20]
 8019002:	4619      	mov	r1, r3
 8019004:	f04f 0c0a 	mov.w	ip, #10
 8019008:	4620      	mov	r0, r4
 801900a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801900e:	3a30      	subs	r2, #48	@ 0x30
 8019010:	2a09      	cmp	r2, #9
 8019012:	d903      	bls.n	801901c <_vfiprintf_r+0x1cc>
 8019014:	2b00      	cmp	r3, #0
 8019016:	d0c6      	beq.n	8018fa6 <_vfiprintf_r+0x156>
 8019018:	9105      	str	r1, [sp, #20]
 801901a:	e7c4      	b.n	8018fa6 <_vfiprintf_r+0x156>
 801901c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019020:	4604      	mov	r4, r0
 8019022:	2301      	movs	r3, #1
 8019024:	e7f0      	b.n	8019008 <_vfiprintf_r+0x1b8>
 8019026:	ab03      	add	r3, sp, #12
 8019028:	9300      	str	r3, [sp, #0]
 801902a:	462a      	mov	r2, r5
 801902c:	4b12      	ldr	r3, [pc, #72]	@ (8019078 <_vfiprintf_r+0x228>)
 801902e:	a904      	add	r1, sp, #16
 8019030:	4630      	mov	r0, r6
 8019032:	f3af 8000 	nop.w
 8019036:	4607      	mov	r7, r0
 8019038:	1c78      	adds	r0, r7, #1
 801903a:	d1d6      	bne.n	8018fea <_vfiprintf_r+0x19a>
 801903c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801903e:	07d9      	lsls	r1, r3, #31
 8019040:	d405      	bmi.n	801904e <_vfiprintf_r+0x1fe>
 8019042:	89ab      	ldrh	r3, [r5, #12]
 8019044:	059a      	lsls	r2, r3, #22
 8019046:	d402      	bmi.n	801904e <_vfiprintf_r+0x1fe>
 8019048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801904a:	f7fe fb25 	bl	8017698 <__retarget_lock_release_recursive>
 801904e:	89ab      	ldrh	r3, [r5, #12]
 8019050:	065b      	lsls	r3, r3, #25
 8019052:	f53f af1f 	bmi.w	8018e94 <_vfiprintf_r+0x44>
 8019056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019058:	e71e      	b.n	8018e98 <_vfiprintf_r+0x48>
 801905a:	ab03      	add	r3, sp, #12
 801905c:	9300      	str	r3, [sp, #0]
 801905e:	462a      	mov	r2, r5
 8019060:	4b05      	ldr	r3, [pc, #20]	@ (8019078 <_vfiprintf_r+0x228>)
 8019062:	a904      	add	r1, sp, #16
 8019064:	4630      	mov	r0, r6
 8019066:	f000 f879 	bl	801915c <_printf_i>
 801906a:	e7e4      	b.n	8019036 <_vfiprintf_r+0x1e6>
 801906c:	0801a238 	.word	0x0801a238
 8019070:	0801a242 	.word	0x0801a242
 8019074:	00000000 	.word	0x00000000
 8019078:	08018e2b 	.word	0x08018e2b
 801907c:	0801a23e 	.word	0x0801a23e

08019080 <_printf_common>:
 8019080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019084:	4616      	mov	r6, r2
 8019086:	4698      	mov	r8, r3
 8019088:	688a      	ldr	r2, [r1, #8]
 801908a:	690b      	ldr	r3, [r1, #16]
 801908c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019090:	4293      	cmp	r3, r2
 8019092:	bfb8      	it	lt
 8019094:	4613      	movlt	r3, r2
 8019096:	6033      	str	r3, [r6, #0]
 8019098:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801909c:	4607      	mov	r7, r0
 801909e:	460c      	mov	r4, r1
 80190a0:	b10a      	cbz	r2, 80190a6 <_printf_common+0x26>
 80190a2:	3301      	adds	r3, #1
 80190a4:	6033      	str	r3, [r6, #0]
 80190a6:	6823      	ldr	r3, [r4, #0]
 80190a8:	0699      	lsls	r1, r3, #26
 80190aa:	bf42      	ittt	mi
 80190ac:	6833      	ldrmi	r3, [r6, #0]
 80190ae:	3302      	addmi	r3, #2
 80190b0:	6033      	strmi	r3, [r6, #0]
 80190b2:	6825      	ldr	r5, [r4, #0]
 80190b4:	f015 0506 	ands.w	r5, r5, #6
 80190b8:	d106      	bne.n	80190c8 <_printf_common+0x48>
 80190ba:	f104 0a19 	add.w	sl, r4, #25
 80190be:	68e3      	ldr	r3, [r4, #12]
 80190c0:	6832      	ldr	r2, [r6, #0]
 80190c2:	1a9b      	subs	r3, r3, r2
 80190c4:	42ab      	cmp	r3, r5
 80190c6:	dc26      	bgt.n	8019116 <_printf_common+0x96>
 80190c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80190cc:	6822      	ldr	r2, [r4, #0]
 80190ce:	3b00      	subs	r3, #0
 80190d0:	bf18      	it	ne
 80190d2:	2301      	movne	r3, #1
 80190d4:	0692      	lsls	r2, r2, #26
 80190d6:	d42b      	bmi.n	8019130 <_printf_common+0xb0>
 80190d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80190dc:	4641      	mov	r1, r8
 80190de:	4638      	mov	r0, r7
 80190e0:	47c8      	blx	r9
 80190e2:	3001      	adds	r0, #1
 80190e4:	d01e      	beq.n	8019124 <_printf_common+0xa4>
 80190e6:	6823      	ldr	r3, [r4, #0]
 80190e8:	6922      	ldr	r2, [r4, #16]
 80190ea:	f003 0306 	and.w	r3, r3, #6
 80190ee:	2b04      	cmp	r3, #4
 80190f0:	bf02      	ittt	eq
 80190f2:	68e5      	ldreq	r5, [r4, #12]
 80190f4:	6833      	ldreq	r3, [r6, #0]
 80190f6:	1aed      	subeq	r5, r5, r3
 80190f8:	68a3      	ldr	r3, [r4, #8]
 80190fa:	bf0c      	ite	eq
 80190fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019100:	2500      	movne	r5, #0
 8019102:	4293      	cmp	r3, r2
 8019104:	bfc4      	itt	gt
 8019106:	1a9b      	subgt	r3, r3, r2
 8019108:	18ed      	addgt	r5, r5, r3
 801910a:	2600      	movs	r6, #0
 801910c:	341a      	adds	r4, #26
 801910e:	42b5      	cmp	r5, r6
 8019110:	d11a      	bne.n	8019148 <_printf_common+0xc8>
 8019112:	2000      	movs	r0, #0
 8019114:	e008      	b.n	8019128 <_printf_common+0xa8>
 8019116:	2301      	movs	r3, #1
 8019118:	4652      	mov	r2, sl
 801911a:	4641      	mov	r1, r8
 801911c:	4638      	mov	r0, r7
 801911e:	47c8      	blx	r9
 8019120:	3001      	adds	r0, #1
 8019122:	d103      	bne.n	801912c <_printf_common+0xac>
 8019124:	f04f 30ff 	mov.w	r0, #4294967295
 8019128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801912c:	3501      	adds	r5, #1
 801912e:	e7c6      	b.n	80190be <_printf_common+0x3e>
 8019130:	18e1      	adds	r1, r4, r3
 8019132:	1c5a      	adds	r2, r3, #1
 8019134:	2030      	movs	r0, #48	@ 0x30
 8019136:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801913a:	4422      	add	r2, r4
 801913c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019144:	3302      	adds	r3, #2
 8019146:	e7c7      	b.n	80190d8 <_printf_common+0x58>
 8019148:	2301      	movs	r3, #1
 801914a:	4622      	mov	r2, r4
 801914c:	4641      	mov	r1, r8
 801914e:	4638      	mov	r0, r7
 8019150:	47c8      	blx	r9
 8019152:	3001      	adds	r0, #1
 8019154:	d0e6      	beq.n	8019124 <_printf_common+0xa4>
 8019156:	3601      	adds	r6, #1
 8019158:	e7d9      	b.n	801910e <_printf_common+0x8e>
	...

0801915c <_printf_i>:
 801915c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019160:	7e0f      	ldrb	r7, [r1, #24]
 8019162:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019164:	2f78      	cmp	r7, #120	@ 0x78
 8019166:	4691      	mov	r9, r2
 8019168:	4680      	mov	r8, r0
 801916a:	460c      	mov	r4, r1
 801916c:	469a      	mov	sl, r3
 801916e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019172:	d807      	bhi.n	8019184 <_printf_i+0x28>
 8019174:	2f62      	cmp	r7, #98	@ 0x62
 8019176:	d80a      	bhi.n	801918e <_printf_i+0x32>
 8019178:	2f00      	cmp	r7, #0
 801917a:	f000 80d2 	beq.w	8019322 <_printf_i+0x1c6>
 801917e:	2f58      	cmp	r7, #88	@ 0x58
 8019180:	f000 80b9 	beq.w	80192f6 <_printf_i+0x19a>
 8019184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019188:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801918c:	e03a      	b.n	8019204 <_printf_i+0xa8>
 801918e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019192:	2b15      	cmp	r3, #21
 8019194:	d8f6      	bhi.n	8019184 <_printf_i+0x28>
 8019196:	a101      	add	r1, pc, #4	@ (adr r1, 801919c <_printf_i+0x40>)
 8019198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801919c:	080191f5 	.word	0x080191f5
 80191a0:	08019209 	.word	0x08019209
 80191a4:	08019185 	.word	0x08019185
 80191a8:	08019185 	.word	0x08019185
 80191ac:	08019185 	.word	0x08019185
 80191b0:	08019185 	.word	0x08019185
 80191b4:	08019209 	.word	0x08019209
 80191b8:	08019185 	.word	0x08019185
 80191bc:	08019185 	.word	0x08019185
 80191c0:	08019185 	.word	0x08019185
 80191c4:	08019185 	.word	0x08019185
 80191c8:	08019309 	.word	0x08019309
 80191cc:	08019233 	.word	0x08019233
 80191d0:	080192c3 	.word	0x080192c3
 80191d4:	08019185 	.word	0x08019185
 80191d8:	08019185 	.word	0x08019185
 80191dc:	0801932b 	.word	0x0801932b
 80191e0:	08019185 	.word	0x08019185
 80191e4:	08019233 	.word	0x08019233
 80191e8:	08019185 	.word	0x08019185
 80191ec:	08019185 	.word	0x08019185
 80191f0:	080192cb 	.word	0x080192cb
 80191f4:	6833      	ldr	r3, [r6, #0]
 80191f6:	1d1a      	adds	r2, r3, #4
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	6032      	str	r2, [r6, #0]
 80191fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019200:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019204:	2301      	movs	r3, #1
 8019206:	e09d      	b.n	8019344 <_printf_i+0x1e8>
 8019208:	6833      	ldr	r3, [r6, #0]
 801920a:	6820      	ldr	r0, [r4, #0]
 801920c:	1d19      	adds	r1, r3, #4
 801920e:	6031      	str	r1, [r6, #0]
 8019210:	0606      	lsls	r6, r0, #24
 8019212:	d501      	bpl.n	8019218 <_printf_i+0xbc>
 8019214:	681d      	ldr	r5, [r3, #0]
 8019216:	e003      	b.n	8019220 <_printf_i+0xc4>
 8019218:	0645      	lsls	r5, r0, #25
 801921a:	d5fb      	bpl.n	8019214 <_printf_i+0xb8>
 801921c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019220:	2d00      	cmp	r5, #0
 8019222:	da03      	bge.n	801922c <_printf_i+0xd0>
 8019224:	232d      	movs	r3, #45	@ 0x2d
 8019226:	426d      	negs	r5, r5
 8019228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801922c:	4859      	ldr	r0, [pc, #356]	@ (8019394 <_printf_i+0x238>)
 801922e:	230a      	movs	r3, #10
 8019230:	e011      	b.n	8019256 <_printf_i+0xfa>
 8019232:	6821      	ldr	r1, [r4, #0]
 8019234:	6833      	ldr	r3, [r6, #0]
 8019236:	0608      	lsls	r0, r1, #24
 8019238:	f853 5b04 	ldr.w	r5, [r3], #4
 801923c:	d402      	bmi.n	8019244 <_printf_i+0xe8>
 801923e:	0649      	lsls	r1, r1, #25
 8019240:	bf48      	it	mi
 8019242:	b2ad      	uxthmi	r5, r5
 8019244:	2f6f      	cmp	r7, #111	@ 0x6f
 8019246:	4853      	ldr	r0, [pc, #332]	@ (8019394 <_printf_i+0x238>)
 8019248:	6033      	str	r3, [r6, #0]
 801924a:	bf14      	ite	ne
 801924c:	230a      	movne	r3, #10
 801924e:	2308      	moveq	r3, #8
 8019250:	2100      	movs	r1, #0
 8019252:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019256:	6866      	ldr	r6, [r4, #4]
 8019258:	60a6      	str	r6, [r4, #8]
 801925a:	2e00      	cmp	r6, #0
 801925c:	bfa2      	ittt	ge
 801925e:	6821      	ldrge	r1, [r4, #0]
 8019260:	f021 0104 	bicge.w	r1, r1, #4
 8019264:	6021      	strge	r1, [r4, #0]
 8019266:	b90d      	cbnz	r5, 801926c <_printf_i+0x110>
 8019268:	2e00      	cmp	r6, #0
 801926a:	d04b      	beq.n	8019304 <_printf_i+0x1a8>
 801926c:	4616      	mov	r6, r2
 801926e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019272:	fb03 5711 	mls	r7, r3, r1, r5
 8019276:	5dc7      	ldrb	r7, [r0, r7]
 8019278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801927c:	462f      	mov	r7, r5
 801927e:	42bb      	cmp	r3, r7
 8019280:	460d      	mov	r5, r1
 8019282:	d9f4      	bls.n	801926e <_printf_i+0x112>
 8019284:	2b08      	cmp	r3, #8
 8019286:	d10b      	bne.n	80192a0 <_printf_i+0x144>
 8019288:	6823      	ldr	r3, [r4, #0]
 801928a:	07df      	lsls	r7, r3, #31
 801928c:	d508      	bpl.n	80192a0 <_printf_i+0x144>
 801928e:	6923      	ldr	r3, [r4, #16]
 8019290:	6861      	ldr	r1, [r4, #4]
 8019292:	4299      	cmp	r1, r3
 8019294:	bfde      	ittt	le
 8019296:	2330      	movle	r3, #48	@ 0x30
 8019298:	f806 3c01 	strble.w	r3, [r6, #-1]
 801929c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80192a0:	1b92      	subs	r2, r2, r6
 80192a2:	6122      	str	r2, [r4, #16]
 80192a4:	f8cd a000 	str.w	sl, [sp]
 80192a8:	464b      	mov	r3, r9
 80192aa:	aa03      	add	r2, sp, #12
 80192ac:	4621      	mov	r1, r4
 80192ae:	4640      	mov	r0, r8
 80192b0:	f7ff fee6 	bl	8019080 <_printf_common>
 80192b4:	3001      	adds	r0, #1
 80192b6:	d14a      	bne.n	801934e <_printf_i+0x1f2>
 80192b8:	f04f 30ff 	mov.w	r0, #4294967295
 80192bc:	b004      	add	sp, #16
 80192be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192c2:	6823      	ldr	r3, [r4, #0]
 80192c4:	f043 0320 	orr.w	r3, r3, #32
 80192c8:	6023      	str	r3, [r4, #0]
 80192ca:	4833      	ldr	r0, [pc, #204]	@ (8019398 <_printf_i+0x23c>)
 80192cc:	2778      	movs	r7, #120	@ 0x78
 80192ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80192d2:	6823      	ldr	r3, [r4, #0]
 80192d4:	6831      	ldr	r1, [r6, #0]
 80192d6:	061f      	lsls	r7, r3, #24
 80192d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80192dc:	d402      	bmi.n	80192e4 <_printf_i+0x188>
 80192de:	065f      	lsls	r7, r3, #25
 80192e0:	bf48      	it	mi
 80192e2:	b2ad      	uxthmi	r5, r5
 80192e4:	6031      	str	r1, [r6, #0]
 80192e6:	07d9      	lsls	r1, r3, #31
 80192e8:	bf44      	itt	mi
 80192ea:	f043 0320 	orrmi.w	r3, r3, #32
 80192ee:	6023      	strmi	r3, [r4, #0]
 80192f0:	b11d      	cbz	r5, 80192fa <_printf_i+0x19e>
 80192f2:	2310      	movs	r3, #16
 80192f4:	e7ac      	b.n	8019250 <_printf_i+0xf4>
 80192f6:	4827      	ldr	r0, [pc, #156]	@ (8019394 <_printf_i+0x238>)
 80192f8:	e7e9      	b.n	80192ce <_printf_i+0x172>
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	f023 0320 	bic.w	r3, r3, #32
 8019300:	6023      	str	r3, [r4, #0]
 8019302:	e7f6      	b.n	80192f2 <_printf_i+0x196>
 8019304:	4616      	mov	r6, r2
 8019306:	e7bd      	b.n	8019284 <_printf_i+0x128>
 8019308:	6833      	ldr	r3, [r6, #0]
 801930a:	6825      	ldr	r5, [r4, #0]
 801930c:	6961      	ldr	r1, [r4, #20]
 801930e:	1d18      	adds	r0, r3, #4
 8019310:	6030      	str	r0, [r6, #0]
 8019312:	062e      	lsls	r6, r5, #24
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	d501      	bpl.n	801931c <_printf_i+0x1c0>
 8019318:	6019      	str	r1, [r3, #0]
 801931a:	e002      	b.n	8019322 <_printf_i+0x1c6>
 801931c:	0668      	lsls	r0, r5, #25
 801931e:	d5fb      	bpl.n	8019318 <_printf_i+0x1bc>
 8019320:	8019      	strh	r1, [r3, #0]
 8019322:	2300      	movs	r3, #0
 8019324:	6123      	str	r3, [r4, #16]
 8019326:	4616      	mov	r6, r2
 8019328:	e7bc      	b.n	80192a4 <_printf_i+0x148>
 801932a:	6833      	ldr	r3, [r6, #0]
 801932c:	1d1a      	adds	r2, r3, #4
 801932e:	6032      	str	r2, [r6, #0]
 8019330:	681e      	ldr	r6, [r3, #0]
 8019332:	6862      	ldr	r2, [r4, #4]
 8019334:	2100      	movs	r1, #0
 8019336:	4630      	mov	r0, r6
 8019338:	f7e6 ffda 	bl	80002f0 <memchr>
 801933c:	b108      	cbz	r0, 8019342 <_printf_i+0x1e6>
 801933e:	1b80      	subs	r0, r0, r6
 8019340:	6060      	str	r0, [r4, #4]
 8019342:	6863      	ldr	r3, [r4, #4]
 8019344:	6123      	str	r3, [r4, #16]
 8019346:	2300      	movs	r3, #0
 8019348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801934c:	e7aa      	b.n	80192a4 <_printf_i+0x148>
 801934e:	6923      	ldr	r3, [r4, #16]
 8019350:	4632      	mov	r2, r6
 8019352:	4649      	mov	r1, r9
 8019354:	4640      	mov	r0, r8
 8019356:	47d0      	blx	sl
 8019358:	3001      	adds	r0, #1
 801935a:	d0ad      	beq.n	80192b8 <_printf_i+0x15c>
 801935c:	6823      	ldr	r3, [r4, #0]
 801935e:	079b      	lsls	r3, r3, #30
 8019360:	d413      	bmi.n	801938a <_printf_i+0x22e>
 8019362:	68e0      	ldr	r0, [r4, #12]
 8019364:	9b03      	ldr	r3, [sp, #12]
 8019366:	4298      	cmp	r0, r3
 8019368:	bfb8      	it	lt
 801936a:	4618      	movlt	r0, r3
 801936c:	e7a6      	b.n	80192bc <_printf_i+0x160>
 801936e:	2301      	movs	r3, #1
 8019370:	4632      	mov	r2, r6
 8019372:	4649      	mov	r1, r9
 8019374:	4640      	mov	r0, r8
 8019376:	47d0      	blx	sl
 8019378:	3001      	adds	r0, #1
 801937a:	d09d      	beq.n	80192b8 <_printf_i+0x15c>
 801937c:	3501      	adds	r5, #1
 801937e:	68e3      	ldr	r3, [r4, #12]
 8019380:	9903      	ldr	r1, [sp, #12]
 8019382:	1a5b      	subs	r3, r3, r1
 8019384:	42ab      	cmp	r3, r5
 8019386:	dcf2      	bgt.n	801936e <_printf_i+0x212>
 8019388:	e7eb      	b.n	8019362 <_printf_i+0x206>
 801938a:	2500      	movs	r5, #0
 801938c:	f104 0619 	add.w	r6, r4, #25
 8019390:	e7f5      	b.n	801937e <_printf_i+0x222>
 8019392:	bf00      	nop
 8019394:	0801a249 	.word	0x0801a249
 8019398:	0801a25a 	.word	0x0801a25a

0801939c <_scanf_chars>:
 801939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193a0:	4615      	mov	r5, r2
 80193a2:	688a      	ldr	r2, [r1, #8]
 80193a4:	4680      	mov	r8, r0
 80193a6:	460c      	mov	r4, r1
 80193a8:	b932      	cbnz	r2, 80193b8 <_scanf_chars+0x1c>
 80193aa:	698a      	ldr	r2, [r1, #24]
 80193ac:	2a00      	cmp	r2, #0
 80193ae:	bf14      	ite	ne
 80193b0:	f04f 32ff 	movne.w	r2, #4294967295
 80193b4:	2201      	moveq	r2, #1
 80193b6:	608a      	str	r2, [r1, #8]
 80193b8:	6822      	ldr	r2, [r4, #0]
 80193ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801944c <_scanf_chars+0xb0>
 80193be:	06d1      	lsls	r1, r2, #27
 80193c0:	bf5f      	itttt	pl
 80193c2:	681a      	ldrpl	r2, [r3, #0]
 80193c4:	1d11      	addpl	r1, r2, #4
 80193c6:	6019      	strpl	r1, [r3, #0]
 80193c8:	6816      	ldrpl	r6, [r2, #0]
 80193ca:	2700      	movs	r7, #0
 80193cc:	69a0      	ldr	r0, [r4, #24]
 80193ce:	b188      	cbz	r0, 80193f4 <_scanf_chars+0x58>
 80193d0:	2801      	cmp	r0, #1
 80193d2:	d107      	bne.n	80193e4 <_scanf_chars+0x48>
 80193d4:	682b      	ldr	r3, [r5, #0]
 80193d6:	781a      	ldrb	r2, [r3, #0]
 80193d8:	6963      	ldr	r3, [r4, #20]
 80193da:	5c9b      	ldrb	r3, [r3, r2]
 80193dc:	b953      	cbnz	r3, 80193f4 <_scanf_chars+0x58>
 80193de:	2f00      	cmp	r7, #0
 80193e0:	d031      	beq.n	8019446 <_scanf_chars+0xaa>
 80193e2:	e022      	b.n	801942a <_scanf_chars+0x8e>
 80193e4:	2802      	cmp	r0, #2
 80193e6:	d120      	bne.n	801942a <_scanf_chars+0x8e>
 80193e8:	682b      	ldr	r3, [r5, #0]
 80193ea:	781b      	ldrb	r3, [r3, #0]
 80193ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80193f0:	071b      	lsls	r3, r3, #28
 80193f2:	d41a      	bmi.n	801942a <_scanf_chars+0x8e>
 80193f4:	6823      	ldr	r3, [r4, #0]
 80193f6:	06da      	lsls	r2, r3, #27
 80193f8:	bf5e      	ittt	pl
 80193fa:	682b      	ldrpl	r3, [r5, #0]
 80193fc:	781b      	ldrbpl	r3, [r3, #0]
 80193fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019402:	682a      	ldr	r2, [r5, #0]
 8019404:	686b      	ldr	r3, [r5, #4]
 8019406:	3201      	adds	r2, #1
 8019408:	602a      	str	r2, [r5, #0]
 801940a:	68a2      	ldr	r2, [r4, #8]
 801940c:	3b01      	subs	r3, #1
 801940e:	3a01      	subs	r2, #1
 8019410:	606b      	str	r3, [r5, #4]
 8019412:	3701      	adds	r7, #1
 8019414:	60a2      	str	r2, [r4, #8]
 8019416:	b142      	cbz	r2, 801942a <_scanf_chars+0x8e>
 8019418:	2b00      	cmp	r3, #0
 801941a:	dcd7      	bgt.n	80193cc <_scanf_chars+0x30>
 801941c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019420:	4629      	mov	r1, r5
 8019422:	4640      	mov	r0, r8
 8019424:	4798      	blx	r3
 8019426:	2800      	cmp	r0, #0
 8019428:	d0d0      	beq.n	80193cc <_scanf_chars+0x30>
 801942a:	6823      	ldr	r3, [r4, #0]
 801942c:	f013 0310 	ands.w	r3, r3, #16
 8019430:	d105      	bne.n	801943e <_scanf_chars+0xa2>
 8019432:	68e2      	ldr	r2, [r4, #12]
 8019434:	3201      	adds	r2, #1
 8019436:	60e2      	str	r2, [r4, #12]
 8019438:	69a2      	ldr	r2, [r4, #24]
 801943a:	b102      	cbz	r2, 801943e <_scanf_chars+0xa2>
 801943c:	7033      	strb	r3, [r6, #0]
 801943e:	6923      	ldr	r3, [r4, #16]
 8019440:	443b      	add	r3, r7
 8019442:	6123      	str	r3, [r4, #16]
 8019444:	2000      	movs	r0, #0
 8019446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801944a:	bf00      	nop
 801944c:	08019eb1 	.word	0x08019eb1

08019450 <_scanf_i>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	4698      	mov	r8, r3
 8019456:	4b74      	ldr	r3, [pc, #464]	@ (8019628 <_scanf_i+0x1d8>)
 8019458:	460c      	mov	r4, r1
 801945a:	4682      	mov	sl, r0
 801945c:	4616      	mov	r6, r2
 801945e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019462:	b087      	sub	sp, #28
 8019464:	ab03      	add	r3, sp, #12
 8019466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801946a:	4b70      	ldr	r3, [pc, #448]	@ (801962c <_scanf_i+0x1dc>)
 801946c:	69a1      	ldr	r1, [r4, #24]
 801946e:	4a70      	ldr	r2, [pc, #448]	@ (8019630 <_scanf_i+0x1e0>)
 8019470:	2903      	cmp	r1, #3
 8019472:	bf08      	it	eq
 8019474:	461a      	moveq	r2, r3
 8019476:	68a3      	ldr	r3, [r4, #8]
 8019478:	9201      	str	r2, [sp, #4]
 801947a:	1e5a      	subs	r2, r3, #1
 801947c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019480:	bf88      	it	hi
 8019482:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019486:	4627      	mov	r7, r4
 8019488:	bf82      	ittt	hi
 801948a:	eb03 0905 	addhi.w	r9, r3, r5
 801948e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019492:	60a3      	strhi	r3, [r4, #8]
 8019494:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019498:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801949c:	bf98      	it	ls
 801949e:	f04f 0900 	movls.w	r9, #0
 80194a2:	6023      	str	r3, [r4, #0]
 80194a4:	463d      	mov	r5, r7
 80194a6:	f04f 0b00 	mov.w	fp, #0
 80194aa:	6831      	ldr	r1, [r6, #0]
 80194ac:	ab03      	add	r3, sp, #12
 80194ae:	7809      	ldrb	r1, [r1, #0]
 80194b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80194b4:	2202      	movs	r2, #2
 80194b6:	f7e6 ff1b 	bl	80002f0 <memchr>
 80194ba:	b328      	cbz	r0, 8019508 <_scanf_i+0xb8>
 80194bc:	f1bb 0f01 	cmp.w	fp, #1
 80194c0:	d159      	bne.n	8019576 <_scanf_i+0x126>
 80194c2:	6862      	ldr	r2, [r4, #4]
 80194c4:	b92a      	cbnz	r2, 80194d2 <_scanf_i+0x82>
 80194c6:	6822      	ldr	r2, [r4, #0]
 80194c8:	2108      	movs	r1, #8
 80194ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80194ce:	6061      	str	r1, [r4, #4]
 80194d0:	6022      	str	r2, [r4, #0]
 80194d2:	6822      	ldr	r2, [r4, #0]
 80194d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80194d8:	6022      	str	r2, [r4, #0]
 80194da:	68a2      	ldr	r2, [r4, #8]
 80194dc:	1e51      	subs	r1, r2, #1
 80194de:	60a1      	str	r1, [r4, #8]
 80194e0:	b192      	cbz	r2, 8019508 <_scanf_i+0xb8>
 80194e2:	6832      	ldr	r2, [r6, #0]
 80194e4:	1c51      	adds	r1, r2, #1
 80194e6:	6031      	str	r1, [r6, #0]
 80194e8:	7812      	ldrb	r2, [r2, #0]
 80194ea:	f805 2b01 	strb.w	r2, [r5], #1
 80194ee:	6872      	ldr	r2, [r6, #4]
 80194f0:	3a01      	subs	r2, #1
 80194f2:	2a00      	cmp	r2, #0
 80194f4:	6072      	str	r2, [r6, #4]
 80194f6:	dc07      	bgt.n	8019508 <_scanf_i+0xb8>
 80194f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80194fc:	4631      	mov	r1, r6
 80194fe:	4650      	mov	r0, sl
 8019500:	4790      	blx	r2
 8019502:	2800      	cmp	r0, #0
 8019504:	f040 8085 	bne.w	8019612 <_scanf_i+0x1c2>
 8019508:	f10b 0b01 	add.w	fp, fp, #1
 801950c:	f1bb 0f03 	cmp.w	fp, #3
 8019510:	d1cb      	bne.n	80194aa <_scanf_i+0x5a>
 8019512:	6863      	ldr	r3, [r4, #4]
 8019514:	b90b      	cbnz	r3, 801951a <_scanf_i+0xca>
 8019516:	230a      	movs	r3, #10
 8019518:	6063      	str	r3, [r4, #4]
 801951a:	6863      	ldr	r3, [r4, #4]
 801951c:	4945      	ldr	r1, [pc, #276]	@ (8019634 <_scanf_i+0x1e4>)
 801951e:	6960      	ldr	r0, [r4, #20]
 8019520:	1ac9      	subs	r1, r1, r3
 8019522:	f000 f947 	bl	80197b4 <__sccl>
 8019526:	f04f 0b00 	mov.w	fp, #0
 801952a:	68a3      	ldr	r3, [r4, #8]
 801952c:	6822      	ldr	r2, [r4, #0]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d03d      	beq.n	80195ae <_scanf_i+0x15e>
 8019532:	6831      	ldr	r1, [r6, #0]
 8019534:	6960      	ldr	r0, [r4, #20]
 8019536:	f891 c000 	ldrb.w	ip, [r1]
 801953a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801953e:	2800      	cmp	r0, #0
 8019540:	d035      	beq.n	80195ae <_scanf_i+0x15e>
 8019542:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8019546:	d124      	bne.n	8019592 <_scanf_i+0x142>
 8019548:	0510      	lsls	r0, r2, #20
 801954a:	d522      	bpl.n	8019592 <_scanf_i+0x142>
 801954c:	f10b 0b01 	add.w	fp, fp, #1
 8019550:	f1b9 0f00 	cmp.w	r9, #0
 8019554:	d003      	beq.n	801955e <_scanf_i+0x10e>
 8019556:	3301      	adds	r3, #1
 8019558:	f109 39ff 	add.w	r9, r9, #4294967295
 801955c:	60a3      	str	r3, [r4, #8]
 801955e:	6873      	ldr	r3, [r6, #4]
 8019560:	3b01      	subs	r3, #1
 8019562:	2b00      	cmp	r3, #0
 8019564:	6073      	str	r3, [r6, #4]
 8019566:	dd1b      	ble.n	80195a0 <_scanf_i+0x150>
 8019568:	6833      	ldr	r3, [r6, #0]
 801956a:	3301      	adds	r3, #1
 801956c:	6033      	str	r3, [r6, #0]
 801956e:	68a3      	ldr	r3, [r4, #8]
 8019570:	3b01      	subs	r3, #1
 8019572:	60a3      	str	r3, [r4, #8]
 8019574:	e7d9      	b.n	801952a <_scanf_i+0xda>
 8019576:	f1bb 0f02 	cmp.w	fp, #2
 801957a:	d1ae      	bne.n	80194da <_scanf_i+0x8a>
 801957c:	6822      	ldr	r2, [r4, #0]
 801957e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8019582:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019586:	d1bf      	bne.n	8019508 <_scanf_i+0xb8>
 8019588:	2110      	movs	r1, #16
 801958a:	6061      	str	r1, [r4, #4]
 801958c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019590:	e7a2      	b.n	80194d8 <_scanf_i+0x88>
 8019592:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8019596:	6022      	str	r2, [r4, #0]
 8019598:	780b      	ldrb	r3, [r1, #0]
 801959a:	f805 3b01 	strb.w	r3, [r5], #1
 801959e:	e7de      	b.n	801955e <_scanf_i+0x10e>
 80195a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80195a4:	4631      	mov	r1, r6
 80195a6:	4650      	mov	r0, sl
 80195a8:	4798      	blx	r3
 80195aa:	2800      	cmp	r0, #0
 80195ac:	d0df      	beq.n	801956e <_scanf_i+0x11e>
 80195ae:	6823      	ldr	r3, [r4, #0]
 80195b0:	05d9      	lsls	r1, r3, #23
 80195b2:	d50d      	bpl.n	80195d0 <_scanf_i+0x180>
 80195b4:	42bd      	cmp	r5, r7
 80195b6:	d909      	bls.n	80195cc <_scanf_i+0x17c>
 80195b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80195bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80195c0:	4632      	mov	r2, r6
 80195c2:	4650      	mov	r0, sl
 80195c4:	4798      	blx	r3
 80195c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80195ca:	464d      	mov	r5, r9
 80195cc:	42bd      	cmp	r5, r7
 80195ce:	d028      	beq.n	8019622 <_scanf_i+0x1d2>
 80195d0:	6822      	ldr	r2, [r4, #0]
 80195d2:	f012 0210 	ands.w	r2, r2, #16
 80195d6:	d113      	bne.n	8019600 <_scanf_i+0x1b0>
 80195d8:	702a      	strb	r2, [r5, #0]
 80195da:	6863      	ldr	r3, [r4, #4]
 80195dc:	9e01      	ldr	r6, [sp, #4]
 80195de:	4639      	mov	r1, r7
 80195e0:	4650      	mov	r0, sl
 80195e2:	47b0      	blx	r6
 80195e4:	f8d8 3000 	ldr.w	r3, [r8]
 80195e8:	6821      	ldr	r1, [r4, #0]
 80195ea:	1d1a      	adds	r2, r3, #4
 80195ec:	f8c8 2000 	str.w	r2, [r8]
 80195f0:	f011 0f20 	tst.w	r1, #32
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	d00f      	beq.n	8019618 <_scanf_i+0x1c8>
 80195f8:	6018      	str	r0, [r3, #0]
 80195fa:	68e3      	ldr	r3, [r4, #12]
 80195fc:	3301      	adds	r3, #1
 80195fe:	60e3      	str	r3, [r4, #12]
 8019600:	6923      	ldr	r3, [r4, #16]
 8019602:	1bed      	subs	r5, r5, r7
 8019604:	445d      	add	r5, fp
 8019606:	442b      	add	r3, r5
 8019608:	6123      	str	r3, [r4, #16]
 801960a:	2000      	movs	r0, #0
 801960c:	b007      	add	sp, #28
 801960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019612:	f04f 0b00 	mov.w	fp, #0
 8019616:	e7ca      	b.n	80195ae <_scanf_i+0x15e>
 8019618:	07ca      	lsls	r2, r1, #31
 801961a:	bf4c      	ite	mi
 801961c:	8018      	strhmi	r0, [r3, #0]
 801961e:	6018      	strpl	r0, [r3, #0]
 8019620:	e7eb      	b.n	80195fa <_scanf_i+0x1aa>
 8019622:	2001      	movs	r0, #1
 8019624:	e7f2      	b.n	801960c <_scanf_i+0x1bc>
 8019626:	bf00      	nop
 8019628:	08019de0 	.word	0x08019de0
 801962c:	08016ccd 	.word	0x08016ccd
 8019630:	08019b69 	.word	0x08019b69
 8019634:	0801a27b 	.word	0x0801a27b

08019638 <__sflush_r>:
 8019638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019640:	0716      	lsls	r6, r2, #28
 8019642:	4605      	mov	r5, r0
 8019644:	460c      	mov	r4, r1
 8019646:	d454      	bmi.n	80196f2 <__sflush_r+0xba>
 8019648:	684b      	ldr	r3, [r1, #4]
 801964a:	2b00      	cmp	r3, #0
 801964c:	dc02      	bgt.n	8019654 <__sflush_r+0x1c>
 801964e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019650:	2b00      	cmp	r3, #0
 8019652:	dd48      	ble.n	80196e6 <__sflush_r+0xae>
 8019654:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019656:	2e00      	cmp	r6, #0
 8019658:	d045      	beq.n	80196e6 <__sflush_r+0xae>
 801965a:	2300      	movs	r3, #0
 801965c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019660:	682f      	ldr	r7, [r5, #0]
 8019662:	6a21      	ldr	r1, [r4, #32]
 8019664:	602b      	str	r3, [r5, #0]
 8019666:	d030      	beq.n	80196ca <__sflush_r+0x92>
 8019668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801966a:	89a3      	ldrh	r3, [r4, #12]
 801966c:	0759      	lsls	r1, r3, #29
 801966e:	d505      	bpl.n	801967c <__sflush_r+0x44>
 8019670:	6863      	ldr	r3, [r4, #4]
 8019672:	1ad2      	subs	r2, r2, r3
 8019674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019676:	b10b      	cbz	r3, 801967c <__sflush_r+0x44>
 8019678:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801967a:	1ad2      	subs	r2, r2, r3
 801967c:	2300      	movs	r3, #0
 801967e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019680:	6a21      	ldr	r1, [r4, #32]
 8019682:	4628      	mov	r0, r5
 8019684:	47b0      	blx	r6
 8019686:	1c43      	adds	r3, r0, #1
 8019688:	89a3      	ldrh	r3, [r4, #12]
 801968a:	d106      	bne.n	801969a <__sflush_r+0x62>
 801968c:	6829      	ldr	r1, [r5, #0]
 801968e:	291d      	cmp	r1, #29
 8019690:	d82b      	bhi.n	80196ea <__sflush_r+0xb2>
 8019692:	4a2a      	ldr	r2, [pc, #168]	@ (801973c <__sflush_r+0x104>)
 8019694:	410a      	asrs	r2, r1
 8019696:	07d6      	lsls	r6, r2, #31
 8019698:	d427      	bmi.n	80196ea <__sflush_r+0xb2>
 801969a:	2200      	movs	r2, #0
 801969c:	6062      	str	r2, [r4, #4]
 801969e:	04d9      	lsls	r1, r3, #19
 80196a0:	6922      	ldr	r2, [r4, #16]
 80196a2:	6022      	str	r2, [r4, #0]
 80196a4:	d504      	bpl.n	80196b0 <__sflush_r+0x78>
 80196a6:	1c42      	adds	r2, r0, #1
 80196a8:	d101      	bne.n	80196ae <__sflush_r+0x76>
 80196aa:	682b      	ldr	r3, [r5, #0]
 80196ac:	b903      	cbnz	r3, 80196b0 <__sflush_r+0x78>
 80196ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80196b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80196b2:	602f      	str	r7, [r5, #0]
 80196b4:	b1b9      	cbz	r1, 80196e6 <__sflush_r+0xae>
 80196b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80196ba:	4299      	cmp	r1, r3
 80196bc:	d002      	beq.n	80196c4 <__sflush_r+0x8c>
 80196be:	4628      	mov	r0, r5
 80196c0:	f7fe f826 	bl	8017710 <_free_r>
 80196c4:	2300      	movs	r3, #0
 80196c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80196c8:	e00d      	b.n	80196e6 <__sflush_r+0xae>
 80196ca:	2301      	movs	r3, #1
 80196cc:	4628      	mov	r0, r5
 80196ce:	47b0      	blx	r6
 80196d0:	4602      	mov	r2, r0
 80196d2:	1c50      	adds	r0, r2, #1
 80196d4:	d1c9      	bne.n	801966a <__sflush_r+0x32>
 80196d6:	682b      	ldr	r3, [r5, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d0c6      	beq.n	801966a <__sflush_r+0x32>
 80196dc:	2b1d      	cmp	r3, #29
 80196de:	d001      	beq.n	80196e4 <__sflush_r+0xac>
 80196e0:	2b16      	cmp	r3, #22
 80196e2:	d11e      	bne.n	8019722 <__sflush_r+0xea>
 80196e4:	602f      	str	r7, [r5, #0]
 80196e6:	2000      	movs	r0, #0
 80196e8:	e022      	b.n	8019730 <__sflush_r+0xf8>
 80196ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80196ee:	b21b      	sxth	r3, r3
 80196f0:	e01b      	b.n	801972a <__sflush_r+0xf2>
 80196f2:	690f      	ldr	r7, [r1, #16]
 80196f4:	2f00      	cmp	r7, #0
 80196f6:	d0f6      	beq.n	80196e6 <__sflush_r+0xae>
 80196f8:	0793      	lsls	r3, r2, #30
 80196fa:	680e      	ldr	r6, [r1, #0]
 80196fc:	bf08      	it	eq
 80196fe:	694b      	ldreq	r3, [r1, #20]
 8019700:	600f      	str	r7, [r1, #0]
 8019702:	bf18      	it	ne
 8019704:	2300      	movne	r3, #0
 8019706:	eba6 0807 	sub.w	r8, r6, r7
 801970a:	608b      	str	r3, [r1, #8]
 801970c:	f1b8 0f00 	cmp.w	r8, #0
 8019710:	dde9      	ble.n	80196e6 <__sflush_r+0xae>
 8019712:	6a21      	ldr	r1, [r4, #32]
 8019714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019716:	4643      	mov	r3, r8
 8019718:	463a      	mov	r2, r7
 801971a:	4628      	mov	r0, r5
 801971c:	47b0      	blx	r6
 801971e:	2800      	cmp	r0, #0
 8019720:	dc08      	bgt.n	8019734 <__sflush_r+0xfc>
 8019722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801972a:	81a3      	strh	r3, [r4, #12]
 801972c:	f04f 30ff 	mov.w	r0, #4294967295
 8019730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019734:	4407      	add	r7, r0
 8019736:	eba8 0800 	sub.w	r8, r8, r0
 801973a:	e7e7      	b.n	801970c <__sflush_r+0xd4>
 801973c:	dfbffffe 	.word	0xdfbffffe

08019740 <_fflush_r>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	690b      	ldr	r3, [r1, #16]
 8019744:	4605      	mov	r5, r0
 8019746:	460c      	mov	r4, r1
 8019748:	b913      	cbnz	r3, 8019750 <_fflush_r+0x10>
 801974a:	2500      	movs	r5, #0
 801974c:	4628      	mov	r0, r5
 801974e:	bd38      	pop	{r3, r4, r5, pc}
 8019750:	b118      	cbz	r0, 801975a <_fflush_r+0x1a>
 8019752:	6a03      	ldr	r3, [r0, #32]
 8019754:	b90b      	cbnz	r3, 801975a <_fflush_r+0x1a>
 8019756:	f7fd fd5d 	bl	8017214 <__sinit>
 801975a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d0f3      	beq.n	801974a <_fflush_r+0xa>
 8019762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019764:	07d0      	lsls	r0, r2, #31
 8019766:	d404      	bmi.n	8019772 <_fflush_r+0x32>
 8019768:	0599      	lsls	r1, r3, #22
 801976a:	d402      	bmi.n	8019772 <_fflush_r+0x32>
 801976c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801976e:	f7fd ff92 	bl	8017696 <__retarget_lock_acquire_recursive>
 8019772:	4628      	mov	r0, r5
 8019774:	4621      	mov	r1, r4
 8019776:	f7ff ff5f 	bl	8019638 <__sflush_r>
 801977a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801977c:	07da      	lsls	r2, r3, #31
 801977e:	4605      	mov	r5, r0
 8019780:	d4e4      	bmi.n	801974c <_fflush_r+0xc>
 8019782:	89a3      	ldrh	r3, [r4, #12]
 8019784:	059b      	lsls	r3, r3, #22
 8019786:	d4e1      	bmi.n	801974c <_fflush_r+0xc>
 8019788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801978a:	f7fd ff85 	bl	8017698 <__retarget_lock_release_recursive>
 801978e:	e7dd      	b.n	801974c <_fflush_r+0xc>

08019790 <fiprintf>:
 8019790:	b40e      	push	{r1, r2, r3}
 8019792:	b503      	push	{r0, r1, lr}
 8019794:	4601      	mov	r1, r0
 8019796:	ab03      	add	r3, sp, #12
 8019798:	4805      	ldr	r0, [pc, #20]	@ (80197b0 <fiprintf+0x20>)
 801979a:	f853 2b04 	ldr.w	r2, [r3], #4
 801979e:	6800      	ldr	r0, [r0, #0]
 80197a0:	9301      	str	r3, [sp, #4]
 80197a2:	f7ff fb55 	bl	8018e50 <_vfiprintf_r>
 80197a6:	b002      	add	sp, #8
 80197a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80197ac:	b003      	add	sp, #12
 80197ae:	4770      	bx	lr
 80197b0:	24000280 	.word	0x24000280

080197b4 <__sccl>:
 80197b4:	b570      	push	{r4, r5, r6, lr}
 80197b6:	780b      	ldrb	r3, [r1, #0]
 80197b8:	4604      	mov	r4, r0
 80197ba:	2b5e      	cmp	r3, #94	@ 0x5e
 80197bc:	bf0b      	itete	eq
 80197be:	784b      	ldrbeq	r3, [r1, #1]
 80197c0:	1c4a      	addne	r2, r1, #1
 80197c2:	1c8a      	addeq	r2, r1, #2
 80197c4:	2100      	movne	r1, #0
 80197c6:	bf08      	it	eq
 80197c8:	2101      	moveq	r1, #1
 80197ca:	3801      	subs	r0, #1
 80197cc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80197d0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80197d4:	42a8      	cmp	r0, r5
 80197d6:	d1fb      	bne.n	80197d0 <__sccl+0x1c>
 80197d8:	b90b      	cbnz	r3, 80197de <__sccl+0x2a>
 80197da:	1e50      	subs	r0, r2, #1
 80197dc:	bd70      	pop	{r4, r5, r6, pc}
 80197de:	f081 0101 	eor.w	r1, r1, #1
 80197e2:	54e1      	strb	r1, [r4, r3]
 80197e4:	4610      	mov	r0, r2
 80197e6:	4602      	mov	r2, r0
 80197e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80197ec:	2d2d      	cmp	r5, #45	@ 0x2d
 80197ee:	d005      	beq.n	80197fc <__sccl+0x48>
 80197f0:	2d5d      	cmp	r5, #93	@ 0x5d
 80197f2:	d016      	beq.n	8019822 <__sccl+0x6e>
 80197f4:	2d00      	cmp	r5, #0
 80197f6:	d0f1      	beq.n	80197dc <__sccl+0x28>
 80197f8:	462b      	mov	r3, r5
 80197fa:	e7f2      	b.n	80197e2 <__sccl+0x2e>
 80197fc:	7846      	ldrb	r6, [r0, #1]
 80197fe:	2e5d      	cmp	r6, #93	@ 0x5d
 8019800:	d0fa      	beq.n	80197f8 <__sccl+0x44>
 8019802:	42b3      	cmp	r3, r6
 8019804:	dcf8      	bgt.n	80197f8 <__sccl+0x44>
 8019806:	3002      	adds	r0, #2
 8019808:	461a      	mov	r2, r3
 801980a:	3201      	adds	r2, #1
 801980c:	4296      	cmp	r6, r2
 801980e:	54a1      	strb	r1, [r4, r2]
 8019810:	dcfb      	bgt.n	801980a <__sccl+0x56>
 8019812:	1af2      	subs	r2, r6, r3
 8019814:	3a01      	subs	r2, #1
 8019816:	1c5d      	adds	r5, r3, #1
 8019818:	42b3      	cmp	r3, r6
 801981a:	bfa8      	it	ge
 801981c:	2200      	movge	r2, #0
 801981e:	18ab      	adds	r3, r5, r2
 8019820:	e7e1      	b.n	80197e6 <__sccl+0x32>
 8019822:	4610      	mov	r0, r2
 8019824:	e7da      	b.n	80197dc <__sccl+0x28>

08019826 <__submore>:
 8019826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801982a:	460c      	mov	r4, r1
 801982c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801982e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019832:	4299      	cmp	r1, r3
 8019834:	d11d      	bne.n	8019872 <__submore+0x4c>
 8019836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801983a:	f7fc fb7f 	bl	8015f3c <_malloc_r>
 801983e:	b918      	cbnz	r0, 8019848 <__submore+0x22>
 8019840:	f04f 30ff 	mov.w	r0, #4294967295
 8019844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801984c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801984e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8019852:	6360      	str	r0, [r4, #52]	@ 0x34
 8019854:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8019858:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801985c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8019860:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019864:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8019868:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801986c:	6020      	str	r0, [r4, #0]
 801986e:	2000      	movs	r0, #0
 8019870:	e7e8      	b.n	8019844 <__submore+0x1e>
 8019872:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8019874:	0077      	lsls	r7, r6, #1
 8019876:	463a      	mov	r2, r7
 8019878:	f000 f8d9 	bl	8019a2e <_realloc_r>
 801987c:	4605      	mov	r5, r0
 801987e:	2800      	cmp	r0, #0
 8019880:	d0de      	beq.n	8019840 <__submore+0x1a>
 8019882:	eb00 0806 	add.w	r8, r0, r6
 8019886:	4601      	mov	r1, r0
 8019888:	4632      	mov	r2, r6
 801988a:	4640      	mov	r0, r8
 801988c:	f7fd ff05 	bl	801769a <memcpy>
 8019890:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8019894:	f8c4 8000 	str.w	r8, [r4]
 8019898:	e7e9      	b.n	801986e <__submore+0x48>

0801989a <__swbuf_r>:
 801989a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801989c:	460e      	mov	r6, r1
 801989e:	4614      	mov	r4, r2
 80198a0:	4605      	mov	r5, r0
 80198a2:	b118      	cbz	r0, 80198ac <__swbuf_r+0x12>
 80198a4:	6a03      	ldr	r3, [r0, #32]
 80198a6:	b90b      	cbnz	r3, 80198ac <__swbuf_r+0x12>
 80198a8:	f7fd fcb4 	bl	8017214 <__sinit>
 80198ac:	69a3      	ldr	r3, [r4, #24]
 80198ae:	60a3      	str	r3, [r4, #8]
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	071a      	lsls	r2, r3, #28
 80198b4:	d501      	bpl.n	80198ba <__swbuf_r+0x20>
 80198b6:	6923      	ldr	r3, [r4, #16]
 80198b8:	b943      	cbnz	r3, 80198cc <__swbuf_r+0x32>
 80198ba:	4621      	mov	r1, r4
 80198bc:	4628      	mov	r0, r5
 80198be:	f000 f82b 	bl	8019918 <__swsetup_r>
 80198c2:	b118      	cbz	r0, 80198cc <__swbuf_r+0x32>
 80198c4:	f04f 37ff 	mov.w	r7, #4294967295
 80198c8:	4638      	mov	r0, r7
 80198ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198cc:	6823      	ldr	r3, [r4, #0]
 80198ce:	6922      	ldr	r2, [r4, #16]
 80198d0:	1a98      	subs	r0, r3, r2
 80198d2:	6963      	ldr	r3, [r4, #20]
 80198d4:	b2f6      	uxtb	r6, r6
 80198d6:	4283      	cmp	r3, r0
 80198d8:	4637      	mov	r7, r6
 80198da:	dc05      	bgt.n	80198e8 <__swbuf_r+0x4e>
 80198dc:	4621      	mov	r1, r4
 80198de:	4628      	mov	r0, r5
 80198e0:	f7ff ff2e 	bl	8019740 <_fflush_r>
 80198e4:	2800      	cmp	r0, #0
 80198e6:	d1ed      	bne.n	80198c4 <__swbuf_r+0x2a>
 80198e8:	68a3      	ldr	r3, [r4, #8]
 80198ea:	3b01      	subs	r3, #1
 80198ec:	60a3      	str	r3, [r4, #8]
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	1c5a      	adds	r2, r3, #1
 80198f2:	6022      	str	r2, [r4, #0]
 80198f4:	701e      	strb	r6, [r3, #0]
 80198f6:	6962      	ldr	r2, [r4, #20]
 80198f8:	1c43      	adds	r3, r0, #1
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d004      	beq.n	8019908 <__swbuf_r+0x6e>
 80198fe:	89a3      	ldrh	r3, [r4, #12]
 8019900:	07db      	lsls	r3, r3, #31
 8019902:	d5e1      	bpl.n	80198c8 <__swbuf_r+0x2e>
 8019904:	2e0a      	cmp	r6, #10
 8019906:	d1df      	bne.n	80198c8 <__swbuf_r+0x2e>
 8019908:	4621      	mov	r1, r4
 801990a:	4628      	mov	r0, r5
 801990c:	f7ff ff18 	bl	8019740 <_fflush_r>
 8019910:	2800      	cmp	r0, #0
 8019912:	d0d9      	beq.n	80198c8 <__swbuf_r+0x2e>
 8019914:	e7d6      	b.n	80198c4 <__swbuf_r+0x2a>
	...

08019918 <__swsetup_r>:
 8019918:	b538      	push	{r3, r4, r5, lr}
 801991a:	4b29      	ldr	r3, [pc, #164]	@ (80199c0 <__swsetup_r+0xa8>)
 801991c:	4605      	mov	r5, r0
 801991e:	6818      	ldr	r0, [r3, #0]
 8019920:	460c      	mov	r4, r1
 8019922:	b118      	cbz	r0, 801992c <__swsetup_r+0x14>
 8019924:	6a03      	ldr	r3, [r0, #32]
 8019926:	b90b      	cbnz	r3, 801992c <__swsetup_r+0x14>
 8019928:	f7fd fc74 	bl	8017214 <__sinit>
 801992c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019930:	0719      	lsls	r1, r3, #28
 8019932:	d422      	bmi.n	801997a <__swsetup_r+0x62>
 8019934:	06da      	lsls	r2, r3, #27
 8019936:	d407      	bmi.n	8019948 <__swsetup_r+0x30>
 8019938:	2209      	movs	r2, #9
 801993a:	602a      	str	r2, [r5, #0]
 801993c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019940:	81a3      	strh	r3, [r4, #12]
 8019942:	f04f 30ff 	mov.w	r0, #4294967295
 8019946:	e033      	b.n	80199b0 <__swsetup_r+0x98>
 8019948:	0758      	lsls	r0, r3, #29
 801994a:	d512      	bpl.n	8019972 <__swsetup_r+0x5a>
 801994c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801994e:	b141      	cbz	r1, 8019962 <__swsetup_r+0x4a>
 8019950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019954:	4299      	cmp	r1, r3
 8019956:	d002      	beq.n	801995e <__swsetup_r+0x46>
 8019958:	4628      	mov	r0, r5
 801995a:	f7fd fed9 	bl	8017710 <_free_r>
 801995e:	2300      	movs	r3, #0
 8019960:	6363      	str	r3, [r4, #52]	@ 0x34
 8019962:	89a3      	ldrh	r3, [r4, #12]
 8019964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019968:	81a3      	strh	r3, [r4, #12]
 801996a:	2300      	movs	r3, #0
 801996c:	6063      	str	r3, [r4, #4]
 801996e:	6923      	ldr	r3, [r4, #16]
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	89a3      	ldrh	r3, [r4, #12]
 8019974:	f043 0308 	orr.w	r3, r3, #8
 8019978:	81a3      	strh	r3, [r4, #12]
 801997a:	6923      	ldr	r3, [r4, #16]
 801997c:	b94b      	cbnz	r3, 8019992 <__swsetup_r+0x7a>
 801997e:	89a3      	ldrh	r3, [r4, #12]
 8019980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019988:	d003      	beq.n	8019992 <__swsetup_r+0x7a>
 801998a:	4621      	mov	r1, r4
 801998c:	4628      	mov	r0, r5
 801998e:	f000 f913 	bl	8019bb8 <__smakebuf_r>
 8019992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019996:	f013 0201 	ands.w	r2, r3, #1
 801999a:	d00a      	beq.n	80199b2 <__swsetup_r+0x9a>
 801999c:	2200      	movs	r2, #0
 801999e:	60a2      	str	r2, [r4, #8]
 80199a0:	6962      	ldr	r2, [r4, #20]
 80199a2:	4252      	negs	r2, r2
 80199a4:	61a2      	str	r2, [r4, #24]
 80199a6:	6922      	ldr	r2, [r4, #16]
 80199a8:	b942      	cbnz	r2, 80199bc <__swsetup_r+0xa4>
 80199aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80199ae:	d1c5      	bne.n	801993c <__swsetup_r+0x24>
 80199b0:	bd38      	pop	{r3, r4, r5, pc}
 80199b2:	0799      	lsls	r1, r3, #30
 80199b4:	bf58      	it	pl
 80199b6:	6962      	ldrpl	r2, [r4, #20]
 80199b8:	60a2      	str	r2, [r4, #8]
 80199ba:	e7f4      	b.n	80199a6 <__swsetup_r+0x8e>
 80199bc:	2000      	movs	r0, #0
 80199be:	e7f7      	b.n	80199b0 <__swsetup_r+0x98>
 80199c0:	24000280 	.word	0x24000280

080199c4 <memmove>:
 80199c4:	4288      	cmp	r0, r1
 80199c6:	b510      	push	{r4, lr}
 80199c8:	eb01 0402 	add.w	r4, r1, r2
 80199cc:	d902      	bls.n	80199d4 <memmove+0x10>
 80199ce:	4284      	cmp	r4, r0
 80199d0:	4623      	mov	r3, r4
 80199d2:	d807      	bhi.n	80199e4 <memmove+0x20>
 80199d4:	1e43      	subs	r3, r0, #1
 80199d6:	42a1      	cmp	r1, r4
 80199d8:	d008      	beq.n	80199ec <memmove+0x28>
 80199da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80199e2:	e7f8      	b.n	80199d6 <memmove+0x12>
 80199e4:	4402      	add	r2, r0
 80199e6:	4601      	mov	r1, r0
 80199e8:	428a      	cmp	r2, r1
 80199ea:	d100      	bne.n	80199ee <memmove+0x2a>
 80199ec:	bd10      	pop	{r4, pc}
 80199ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80199f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80199f6:	e7f7      	b.n	80199e8 <memmove+0x24>

080199f8 <abort>:
 80199f8:	b508      	push	{r3, lr}
 80199fa:	2006      	movs	r0, #6
 80199fc:	f000 f940 	bl	8019c80 <raise>
 8019a00:	2001      	movs	r0, #1
 8019a02:	f7e8 fcdf 	bl	80023c4 <_exit>

08019a06 <_calloc_r>:
 8019a06:	b570      	push	{r4, r5, r6, lr}
 8019a08:	fba1 5402 	umull	r5, r4, r1, r2
 8019a0c:	b93c      	cbnz	r4, 8019a1e <_calloc_r+0x18>
 8019a0e:	4629      	mov	r1, r5
 8019a10:	f7fc fa94 	bl	8015f3c <_malloc_r>
 8019a14:	4606      	mov	r6, r0
 8019a16:	b928      	cbnz	r0, 8019a24 <_calloc_r+0x1e>
 8019a18:	2600      	movs	r6, #0
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	bd70      	pop	{r4, r5, r6, pc}
 8019a1e:	220c      	movs	r2, #12
 8019a20:	6002      	str	r2, [r0, #0]
 8019a22:	e7f9      	b.n	8019a18 <_calloc_r+0x12>
 8019a24:	462a      	mov	r2, r5
 8019a26:	4621      	mov	r1, r4
 8019a28:	f7fd fccb 	bl	80173c2 <memset>
 8019a2c:	e7f5      	b.n	8019a1a <_calloc_r+0x14>

08019a2e <_realloc_r>:
 8019a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a32:	4680      	mov	r8, r0
 8019a34:	4615      	mov	r5, r2
 8019a36:	460c      	mov	r4, r1
 8019a38:	b921      	cbnz	r1, 8019a44 <_realloc_r+0x16>
 8019a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a3e:	4611      	mov	r1, r2
 8019a40:	f7fc ba7c 	b.w	8015f3c <_malloc_r>
 8019a44:	b92a      	cbnz	r2, 8019a52 <_realloc_r+0x24>
 8019a46:	f7fd fe63 	bl	8017710 <_free_r>
 8019a4a:	2400      	movs	r4, #0
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a52:	f000 f953 	bl	8019cfc <_malloc_usable_size_r>
 8019a56:	4285      	cmp	r5, r0
 8019a58:	4606      	mov	r6, r0
 8019a5a:	d802      	bhi.n	8019a62 <_realloc_r+0x34>
 8019a5c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019a60:	d8f4      	bhi.n	8019a4c <_realloc_r+0x1e>
 8019a62:	4629      	mov	r1, r5
 8019a64:	4640      	mov	r0, r8
 8019a66:	f7fc fa69 	bl	8015f3c <_malloc_r>
 8019a6a:	4607      	mov	r7, r0
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	d0ec      	beq.n	8019a4a <_realloc_r+0x1c>
 8019a70:	42b5      	cmp	r5, r6
 8019a72:	462a      	mov	r2, r5
 8019a74:	4621      	mov	r1, r4
 8019a76:	bf28      	it	cs
 8019a78:	4632      	movcs	r2, r6
 8019a7a:	f7fd fe0e 	bl	801769a <memcpy>
 8019a7e:	4621      	mov	r1, r4
 8019a80:	4640      	mov	r0, r8
 8019a82:	f7fd fe45 	bl	8017710 <_free_r>
 8019a86:	463c      	mov	r4, r7
 8019a88:	e7e0      	b.n	8019a4c <_realloc_r+0x1e>
	...

08019a8c <_strtoul_l.constprop.0>:
 8019a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a90:	4e34      	ldr	r6, [pc, #208]	@ (8019b64 <_strtoul_l.constprop.0+0xd8>)
 8019a92:	4686      	mov	lr, r0
 8019a94:	460d      	mov	r5, r1
 8019a96:	4628      	mov	r0, r5
 8019a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a9c:	5d37      	ldrb	r7, [r6, r4]
 8019a9e:	f017 0708 	ands.w	r7, r7, #8
 8019aa2:	d1f8      	bne.n	8019a96 <_strtoul_l.constprop.0+0xa>
 8019aa4:	2c2d      	cmp	r4, #45	@ 0x2d
 8019aa6:	d12f      	bne.n	8019b08 <_strtoul_l.constprop.0+0x7c>
 8019aa8:	782c      	ldrb	r4, [r5, #0]
 8019aaa:	2701      	movs	r7, #1
 8019aac:	1c85      	adds	r5, r0, #2
 8019aae:	f033 0010 	bics.w	r0, r3, #16
 8019ab2:	d109      	bne.n	8019ac8 <_strtoul_l.constprop.0+0x3c>
 8019ab4:	2c30      	cmp	r4, #48	@ 0x30
 8019ab6:	d12c      	bne.n	8019b12 <_strtoul_l.constprop.0+0x86>
 8019ab8:	7828      	ldrb	r0, [r5, #0]
 8019aba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019abe:	2858      	cmp	r0, #88	@ 0x58
 8019ac0:	d127      	bne.n	8019b12 <_strtoul_l.constprop.0+0x86>
 8019ac2:	786c      	ldrb	r4, [r5, #1]
 8019ac4:	2310      	movs	r3, #16
 8019ac6:	3502      	adds	r5, #2
 8019ac8:	f04f 38ff 	mov.w	r8, #4294967295
 8019acc:	2600      	movs	r6, #0
 8019ace:	fbb8 f8f3 	udiv	r8, r8, r3
 8019ad2:	fb03 f908 	mul.w	r9, r3, r8
 8019ad6:	ea6f 0909 	mvn.w	r9, r9
 8019ada:	4630      	mov	r0, r6
 8019adc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019ae0:	f1bc 0f09 	cmp.w	ip, #9
 8019ae4:	d81c      	bhi.n	8019b20 <_strtoul_l.constprop.0+0x94>
 8019ae6:	4664      	mov	r4, ip
 8019ae8:	42a3      	cmp	r3, r4
 8019aea:	dd2a      	ble.n	8019b42 <_strtoul_l.constprop.0+0xb6>
 8019aec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8019af0:	d007      	beq.n	8019b02 <_strtoul_l.constprop.0+0x76>
 8019af2:	4580      	cmp	r8, r0
 8019af4:	d322      	bcc.n	8019b3c <_strtoul_l.constprop.0+0xb0>
 8019af6:	d101      	bne.n	8019afc <_strtoul_l.constprop.0+0x70>
 8019af8:	45a1      	cmp	r9, r4
 8019afa:	db1f      	blt.n	8019b3c <_strtoul_l.constprop.0+0xb0>
 8019afc:	fb00 4003 	mla	r0, r0, r3, r4
 8019b00:	2601      	movs	r6, #1
 8019b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b06:	e7e9      	b.n	8019adc <_strtoul_l.constprop.0+0x50>
 8019b08:	2c2b      	cmp	r4, #43	@ 0x2b
 8019b0a:	bf04      	itt	eq
 8019b0c:	782c      	ldrbeq	r4, [r5, #0]
 8019b0e:	1c85      	addeq	r5, r0, #2
 8019b10:	e7cd      	b.n	8019aae <_strtoul_l.constprop.0+0x22>
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d1d8      	bne.n	8019ac8 <_strtoul_l.constprop.0+0x3c>
 8019b16:	2c30      	cmp	r4, #48	@ 0x30
 8019b18:	bf0c      	ite	eq
 8019b1a:	2308      	moveq	r3, #8
 8019b1c:	230a      	movne	r3, #10
 8019b1e:	e7d3      	b.n	8019ac8 <_strtoul_l.constprop.0+0x3c>
 8019b20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019b24:	f1bc 0f19 	cmp.w	ip, #25
 8019b28:	d801      	bhi.n	8019b2e <_strtoul_l.constprop.0+0xa2>
 8019b2a:	3c37      	subs	r4, #55	@ 0x37
 8019b2c:	e7dc      	b.n	8019ae8 <_strtoul_l.constprop.0+0x5c>
 8019b2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019b32:	f1bc 0f19 	cmp.w	ip, #25
 8019b36:	d804      	bhi.n	8019b42 <_strtoul_l.constprop.0+0xb6>
 8019b38:	3c57      	subs	r4, #87	@ 0x57
 8019b3a:	e7d5      	b.n	8019ae8 <_strtoul_l.constprop.0+0x5c>
 8019b3c:	f04f 36ff 	mov.w	r6, #4294967295
 8019b40:	e7df      	b.n	8019b02 <_strtoul_l.constprop.0+0x76>
 8019b42:	1c73      	adds	r3, r6, #1
 8019b44:	d106      	bne.n	8019b54 <_strtoul_l.constprop.0+0xc8>
 8019b46:	2322      	movs	r3, #34	@ 0x22
 8019b48:	f8ce 3000 	str.w	r3, [lr]
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	b932      	cbnz	r2, 8019b5e <_strtoul_l.constprop.0+0xd2>
 8019b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b54:	b107      	cbz	r7, 8019b58 <_strtoul_l.constprop.0+0xcc>
 8019b56:	4240      	negs	r0, r0
 8019b58:	2a00      	cmp	r2, #0
 8019b5a:	d0f9      	beq.n	8019b50 <_strtoul_l.constprop.0+0xc4>
 8019b5c:	b106      	cbz	r6, 8019b60 <_strtoul_l.constprop.0+0xd4>
 8019b5e:	1e69      	subs	r1, r5, #1
 8019b60:	6011      	str	r1, [r2, #0]
 8019b62:	e7f5      	b.n	8019b50 <_strtoul_l.constprop.0+0xc4>
 8019b64:	08019eb1 	.word	0x08019eb1

08019b68 <_strtoul_r>:
 8019b68:	f7ff bf90 	b.w	8019a8c <_strtoul_l.constprop.0>

08019b6c <__swhatbuf_r>:
 8019b6c:	b570      	push	{r4, r5, r6, lr}
 8019b6e:	460c      	mov	r4, r1
 8019b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b74:	2900      	cmp	r1, #0
 8019b76:	b096      	sub	sp, #88	@ 0x58
 8019b78:	4615      	mov	r5, r2
 8019b7a:	461e      	mov	r6, r3
 8019b7c:	da0d      	bge.n	8019b9a <__swhatbuf_r+0x2e>
 8019b7e:	89a3      	ldrh	r3, [r4, #12]
 8019b80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019b84:	f04f 0100 	mov.w	r1, #0
 8019b88:	bf14      	ite	ne
 8019b8a:	2340      	movne	r3, #64	@ 0x40
 8019b8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019b90:	2000      	movs	r0, #0
 8019b92:	6031      	str	r1, [r6, #0]
 8019b94:	602b      	str	r3, [r5, #0]
 8019b96:	b016      	add	sp, #88	@ 0x58
 8019b98:	bd70      	pop	{r4, r5, r6, pc}
 8019b9a:	466a      	mov	r2, sp
 8019b9c:	f000 f878 	bl	8019c90 <_fstat_r>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	dbec      	blt.n	8019b7e <__swhatbuf_r+0x12>
 8019ba4:	9901      	ldr	r1, [sp, #4]
 8019ba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019baa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019bae:	4259      	negs	r1, r3
 8019bb0:	4159      	adcs	r1, r3
 8019bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019bb6:	e7eb      	b.n	8019b90 <__swhatbuf_r+0x24>

08019bb8 <__smakebuf_r>:
 8019bb8:	898b      	ldrh	r3, [r1, #12]
 8019bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bbc:	079d      	lsls	r5, r3, #30
 8019bbe:	4606      	mov	r6, r0
 8019bc0:	460c      	mov	r4, r1
 8019bc2:	d507      	bpl.n	8019bd4 <__smakebuf_r+0x1c>
 8019bc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019bc8:	6023      	str	r3, [r4, #0]
 8019bca:	6123      	str	r3, [r4, #16]
 8019bcc:	2301      	movs	r3, #1
 8019bce:	6163      	str	r3, [r4, #20]
 8019bd0:	b003      	add	sp, #12
 8019bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bd4:	ab01      	add	r3, sp, #4
 8019bd6:	466a      	mov	r2, sp
 8019bd8:	f7ff ffc8 	bl	8019b6c <__swhatbuf_r>
 8019bdc:	9f00      	ldr	r7, [sp, #0]
 8019bde:	4605      	mov	r5, r0
 8019be0:	4639      	mov	r1, r7
 8019be2:	4630      	mov	r0, r6
 8019be4:	f7fc f9aa 	bl	8015f3c <_malloc_r>
 8019be8:	b948      	cbnz	r0, 8019bfe <__smakebuf_r+0x46>
 8019bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bee:	059a      	lsls	r2, r3, #22
 8019bf0:	d4ee      	bmi.n	8019bd0 <__smakebuf_r+0x18>
 8019bf2:	f023 0303 	bic.w	r3, r3, #3
 8019bf6:	f043 0302 	orr.w	r3, r3, #2
 8019bfa:	81a3      	strh	r3, [r4, #12]
 8019bfc:	e7e2      	b.n	8019bc4 <__smakebuf_r+0xc>
 8019bfe:	89a3      	ldrh	r3, [r4, #12]
 8019c00:	6020      	str	r0, [r4, #0]
 8019c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c06:	81a3      	strh	r3, [r4, #12]
 8019c08:	9b01      	ldr	r3, [sp, #4]
 8019c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019c0e:	b15b      	cbz	r3, 8019c28 <__smakebuf_r+0x70>
 8019c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c14:	4630      	mov	r0, r6
 8019c16:	f000 f84d 	bl	8019cb4 <_isatty_r>
 8019c1a:	b128      	cbz	r0, 8019c28 <__smakebuf_r+0x70>
 8019c1c:	89a3      	ldrh	r3, [r4, #12]
 8019c1e:	f023 0303 	bic.w	r3, r3, #3
 8019c22:	f043 0301 	orr.w	r3, r3, #1
 8019c26:	81a3      	strh	r3, [r4, #12]
 8019c28:	89a3      	ldrh	r3, [r4, #12]
 8019c2a:	431d      	orrs	r5, r3
 8019c2c:	81a5      	strh	r5, [r4, #12]
 8019c2e:	e7cf      	b.n	8019bd0 <__smakebuf_r+0x18>

08019c30 <_raise_r>:
 8019c30:	291f      	cmp	r1, #31
 8019c32:	b538      	push	{r3, r4, r5, lr}
 8019c34:	4605      	mov	r5, r0
 8019c36:	460c      	mov	r4, r1
 8019c38:	d904      	bls.n	8019c44 <_raise_r+0x14>
 8019c3a:	2316      	movs	r3, #22
 8019c3c:	6003      	str	r3, [r0, #0]
 8019c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c42:	bd38      	pop	{r3, r4, r5, pc}
 8019c44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019c46:	b112      	cbz	r2, 8019c4e <_raise_r+0x1e>
 8019c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019c4c:	b94b      	cbnz	r3, 8019c62 <_raise_r+0x32>
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f000 f852 	bl	8019cf8 <_getpid_r>
 8019c54:	4622      	mov	r2, r4
 8019c56:	4601      	mov	r1, r0
 8019c58:	4628      	mov	r0, r5
 8019c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c5e:	f000 b839 	b.w	8019cd4 <_kill_r>
 8019c62:	2b01      	cmp	r3, #1
 8019c64:	d00a      	beq.n	8019c7c <_raise_r+0x4c>
 8019c66:	1c59      	adds	r1, r3, #1
 8019c68:	d103      	bne.n	8019c72 <_raise_r+0x42>
 8019c6a:	2316      	movs	r3, #22
 8019c6c:	6003      	str	r3, [r0, #0]
 8019c6e:	2001      	movs	r0, #1
 8019c70:	e7e7      	b.n	8019c42 <_raise_r+0x12>
 8019c72:	2100      	movs	r1, #0
 8019c74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019c78:	4620      	mov	r0, r4
 8019c7a:	4798      	blx	r3
 8019c7c:	2000      	movs	r0, #0
 8019c7e:	e7e0      	b.n	8019c42 <_raise_r+0x12>

08019c80 <raise>:
 8019c80:	4b02      	ldr	r3, [pc, #8]	@ (8019c8c <raise+0xc>)
 8019c82:	4601      	mov	r1, r0
 8019c84:	6818      	ldr	r0, [r3, #0]
 8019c86:	f7ff bfd3 	b.w	8019c30 <_raise_r>
 8019c8a:	bf00      	nop
 8019c8c:	24000280 	.word	0x24000280

08019c90 <_fstat_r>:
 8019c90:	b538      	push	{r3, r4, r5, lr}
 8019c92:	4d07      	ldr	r5, [pc, #28]	@ (8019cb0 <_fstat_r+0x20>)
 8019c94:	2300      	movs	r3, #0
 8019c96:	4604      	mov	r4, r0
 8019c98:	4608      	mov	r0, r1
 8019c9a:	4611      	mov	r1, r2
 8019c9c:	602b      	str	r3, [r5, #0]
 8019c9e:	f7e8 fbc5 	bl	800242c <_fstat>
 8019ca2:	1c43      	adds	r3, r0, #1
 8019ca4:	d102      	bne.n	8019cac <_fstat_r+0x1c>
 8019ca6:	682b      	ldr	r3, [r5, #0]
 8019ca8:	b103      	cbz	r3, 8019cac <_fstat_r+0x1c>
 8019caa:	6023      	str	r3, [r4, #0]
 8019cac:	bd38      	pop	{r3, r4, r5, pc}
 8019cae:	bf00      	nop
 8019cb0:	24006e7c 	.word	0x24006e7c

08019cb4 <_isatty_r>:
 8019cb4:	b538      	push	{r3, r4, r5, lr}
 8019cb6:	4d06      	ldr	r5, [pc, #24]	@ (8019cd0 <_isatty_r+0x1c>)
 8019cb8:	2300      	movs	r3, #0
 8019cba:	4604      	mov	r4, r0
 8019cbc:	4608      	mov	r0, r1
 8019cbe:	602b      	str	r3, [r5, #0]
 8019cc0:	f7e8 fbc4 	bl	800244c <_isatty>
 8019cc4:	1c43      	adds	r3, r0, #1
 8019cc6:	d102      	bne.n	8019cce <_isatty_r+0x1a>
 8019cc8:	682b      	ldr	r3, [r5, #0]
 8019cca:	b103      	cbz	r3, 8019cce <_isatty_r+0x1a>
 8019ccc:	6023      	str	r3, [r4, #0]
 8019cce:	bd38      	pop	{r3, r4, r5, pc}
 8019cd0:	24006e7c 	.word	0x24006e7c

08019cd4 <_kill_r>:
 8019cd4:	b538      	push	{r3, r4, r5, lr}
 8019cd6:	4d07      	ldr	r5, [pc, #28]	@ (8019cf4 <_kill_r+0x20>)
 8019cd8:	2300      	movs	r3, #0
 8019cda:	4604      	mov	r4, r0
 8019cdc:	4608      	mov	r0, r1
 8019cde:	4611      	mov	r1, r2
 8019ce0:	602b      	str	r3, [r5, #0]
 8019ce2:	f7e8 fb5f 	bl	80023a4 <_kill>
 8019ce6:	1c43      	adds	r3, r0, #1
 8019ce8:	d102      	bne.n	8019cf0 <_kill_r+0x1c>
 8019cea:	682b      	ldr	r3, [r5, #0]
 8019cec:	b103      	cbz	r3, 8019cf0 <_kill_r+0x1c>
 8019cee:	6023      	str	r3, [r4, #0]
 8019cf0:	bd38      	pop	{r3, r4, r5, pc}
 8019cf2:	bf00      	nop
 8019cf4:	24006e7c 	.word	0x24006e7c

08019cf8 <_getpid_r>:
 8019cf8:	f7e8 bb4c 	b.w	8002394 <_getpid>

08019cfc <_malloc_usable_size_r>:
 8019cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d00:	1f18      	subs	r0, r3, #4
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	bfbc      	itt	lt
 8019d06:	580b      	ldrlt	r3, [r1, r0]
 8019d08:	18c0      	addlt	r0, r0, r3
 8019d0a:	4770      	bx	lr

08019d0c <_init>:
 8019d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d0e:	bf00      	nop
 8019d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d12:	bc08      	pop	{r3}
 8019d14:	469e      	mov	lr, r3
 8019d16:	4770      	bx	lr

08019d18 <_fini>:
 8019d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d1a:	bf00      	nop
 8019d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d1e:	bc08      	pop	{r3}
 8019d20:	469e      	mov	lr, r3
 8019d22:	4770      	bx	lr
