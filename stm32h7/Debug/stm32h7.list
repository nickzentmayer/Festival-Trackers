
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007278  08007278  00008278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072b8  080072b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080072bc  080072bc  000082bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080072c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000768  24000010  080072d0  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000778  080072d0  00009778  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bf7b  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030ad  00000000  00000000  00024fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014f8  00000000  00000000  00028068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001053  00000000  00000000  00029560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038164  00000000  00000000  0002a5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d0f5  00000000  00000000  00062717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016112a  00000000  00000000  0007f80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e0936  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ae0  00000000  00000000  001e097c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001e645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007260 	.word	0x08007260

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007260 	.word	0x08007260

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005cc:	f000 fb8e 	bl	8000cec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f001 f8ec 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f810 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 fa80 	bl	8000adc <MX_GPIO_Init>
  MX_LTDC_Init();
 80005dc:	f000 f8cc 	bl	8000778 <MX_LTDC_Init>
  MX_SPI1_Init();
 80005e0:	f000 f9a8 	bl	8000934 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 fa48 	bl	8000a78 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80005e8:	f000 f886 	bl	80006f8 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 80005ec:	f000 f976 	bl	80008dc <MX_QUADSPI_Init>
  MX_UART8_Init();
 80005f0:	f000 f9f6 	bl	80009e0 <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x2c>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	@ 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000602:	224c      	movs	r2, #76	@ 0x4c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fdfd 	bl	8007206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fdf7 	bl	8007206 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000618:	2002      	movs	r0, #2
 800061a:	f002 f9bb 	bl	8002994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <SystemClock_Config+0xf8>)
 8000624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000626:	4a32      	ldr	r2, [pc, #200]	@ (80006f0 <SystemClock_Config+0xf8>)
 8000628:	f023 0301 	bic.w	r3, r3, #1
 800062c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800062e:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <SystemClock_Config+0xf8>)
 8000630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <SystemClock_Config+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <SystemClock_Config+0xfc>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <SystemClock_Config+0xfc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000654:	bf00      	nop
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <SystemClock_Config+0xfc>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000662:	d1f8      	bne.n	8000656 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000664:	2303      	movs	r3, #3
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800066e:	2301      	movs	r3, #1
 8000670:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	@ 0x40
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800067e:	2305      	movs	r3, #5
 8000680:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000682:	2330      	movs	r3, #48	@ 0x30
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800068a:	2305      	movs	r3, #5
 800068c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000692:	2308      	movs	r3, #8
 8000694:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000696:	2300      	movs	r3, #0
 8000698:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa7a 	bl	8002b9c <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ae:	f000 fb49 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	233f      	movs	r3, #63	@ 0x3f
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c6:	2340      	movs	r3, #64	@ 0x40
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2101      	movs	r1, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 feba 	bl	8003450 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006e2:	f000 fb2f 	bl	8000d44 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3770      	adds	r7, #112	@ 0x70
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400
 80006f4:	58024800 	.word	0x58024800

080006f8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_I2C4_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <MX_I2C4_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_I2C4_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <MX_I2C4_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_I2C4_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_I2C4_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_I2C4_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_I2C4_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C4_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C4_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C4_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_I2C4_Init+0x74>)
 8000734:	f001 fc22 	bl	8001f7c <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 fb01 	bl	8000d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_I2C4_Init+0x74>)
 8000746:	f001 fcb5 	bl	80020b4 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 faf8 	bl	8000d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_I2C4_Init+0x74>)
 8000758:	f001 fcf7 	bl	800214a <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 faef 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2400002c 	.word	0x2400002c
 8000770:	58001c00 	.word	0x58001c00
 8000774:	00707cbb 	.word	0x00707cbb

08000778 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	@ 0x68
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800077e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fd3d 	bl	8007206 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2234      	movs	r2, #52	@ 0x34
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fd37 	bl	8007206 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000798:	4b4e      	ldr	r3, [pc, #312]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 800079a:	4a4f      	ldr	r2, [pc, #316]	@ (80008d8 <MX_LTDC_Init+0x160>)
 800079c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800079e:	4b4d      	ldr	r3, [pc, #308]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007aa:	4b4a      	ldr	r3, [pc, #296]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007b0:	4b48      	ldr	r3, [pc, #288]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80007b6:	4b47      	ldr	r3, [pc, #284]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007bc:	4b45      	ldr	r3, [pc, #276]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007be:	2203      	movs	r2, #3
 80007c0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007c2:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007c4:	220e      	movs	r2, #14
 80007c6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007c8:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007ca:	2205      	movs	r2, #5
 80007cc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 494;
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007d0:	f44f 72f7 	mov.w	r2, #494	@ 0x1ee
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007d8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 500;
 80007de:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80007e6:	4b3b      	ldr	r3, [pc, #236]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007e8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007ee:	4b39      	ldr	r3, [pc, #228]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007f6:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007fe:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000806:	4833      	ldr	r0, [pc, #204]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 8000808:	f001 fcec 	bl	80021e4 <HAL_LTDC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000812:	f000 fa97 	bl	8000d44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000826:	2302      	movs	r3, #2
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000838:	2305      	movs	r3, #5
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800085a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 8000864:	f001 fd8e 	bl	8002384 <HAL_LTDC_ConfigLayer>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800086e:	f000 fa69 	bl	8000d44 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800088e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000892:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000894:	2305      	movs	r3, #5
 8000896:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_LTDC_Init+0x15c>)
 80008be:	f001 fd61 	bl	8002384 <HAL_LTDC_ConfigLayer>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80008c8:	f000 fa3c 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3768      	adds	r7, #104	@ 0x68
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24000080 	.word	0x24000080
 80008d8:	50001000 	.word	0x50001000

080008dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_QUADSPI_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_QUADSPI_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_QUADSPI_Init+0x50>)
 80008e8:	22ff      	movs	r2, #255	@ 0xff
 80008ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_QUADSPI_Init+0x50>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_QUADSPI_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_QUADSPI_Init+0x50>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_QUADSPI_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_QUADSPI_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_QUADSPI_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_QUADSPI_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_QUADSPI_Init+0x50>)
 8000918:	f002 f886 	bl	8002a28 <HAL_QSPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000922:	f000 fa0f 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000128 	.word	0x24000128
 8000930:	52005000 	.word	0x52005000

08000934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_SPI1_Init+0xa8>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800094e:	2203      	movs	r2, #3
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000960:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000986:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009c4:	f004 fefc 	bl	80057c0 <HAL_SPI_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80009ce:	f000 f9b9 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000174 	.word	0x24000174
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_UART8_Init+0x90>)
 80009e6:	4a23      	ldr	r2, [pc, #140]	@ (8000a74 <MX_UART8_Init+0x94>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_UART8_Init+0x90>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_UART8_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_UART8_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a2a:	f005 f808 	bl	8005a3e <HAL_UART_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a34:	f000 f986 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a3c:	f006 f811 	bl	8006a62 <HAL_UARTEx_SetTxFifoThreshold>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 f97d 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a4e:	f006 f846 	bl	8006ade <HAL_UARTEx_SetRxFifoThreshold>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 f974 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_UART8_Init+0x90>)
 8000a5e:	f005 ffc7 	bl	80069f0 <HAL_UARTEx_DisableFifoMode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 f96c 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	240001fc 	.word	0x240001fc
 8000a74:	40007c00 	.word	0x40007c00

08000a78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a84:	2209      	movs	r2, #9
 8000a86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac0:	f001 fe38 	bl	8002734 <HAL_PCD_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aca:	f000 f93b 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000290 	.word	0x24000290
 8000ad8:	40080000 	.word	0x40080000

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	4b78      	ldr	r3, [pc, #480]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a76      	ldr	r2, [pc, #472]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b74      	ldr	r3, [pc, #464]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b10:	4b70      	ldr	r3, [pc, #448]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	4a6f      	ldr	r2, [pc, #444]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b20:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b69      	ldr	r3, [pc, #420]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a67      	ldr	r2, [pc, #412]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b65      	ldr	r3, [pc, #404]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b61      	ldr	r3, [pc, #388]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a60      	ldr	r2, [pc, #384]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a58      	ldr	r2, [pc, #352]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b56      	ldr	r3, [pc, #344]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b88:	4b52      	ldr	r3, [pc, #328]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a51      	ldr	r2, [pc, #324]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd4 <MX_GPIO_Init+0x1f8>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_PA2_Pin|LCD_CS_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f24c 0104 	movw	r1, #49156	@ 0xc004
 8000bac:	484a      	ldr	r0, [pc, #296]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000bae:	f001 f9cb 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_PC4_GPIO_Port, TP_PC4_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4849      	ldr	r0, [pc, #292]	@ (8000cdc <MX_GPIO_Init+0x200>)
 8000bb8:	f001 f9c6 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_BL_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000bc2:	4847      	ldr	r0, [pc, #284]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000bc4:	f001 f9c0 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|GPS_ON_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8000bce:	4845      	ldr	r0, [pc, #276]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000bd0:	f001 f9ba 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TP_PA2_Pin LCD_CS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = TP_PA2_Pin|LCD_CS_Pin|LORA_NSS_Pin;
 8000bd4:	f24c 0304 	movw	r3, #49156	@ 0xc004
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	483a      	ldr	r0, [pc, #232]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000bee:	f000 fffb 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_PC4_Pin */
  GPIO_InitStruct.Pin = TP_PC4_Pin;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TP_PC4_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4834      	ldr	r0, [pc, #208]	@ (8000cdc <MX_GPIO_Init+0x200>)
 8000c0a:	f000 ffed 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c0e:	2320      	movs	r3, #32
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	482e      	ldr	r0, [pc, #184]	@ (8000cdc <MX_GPIO_Init+0x200>)
 8000c22:	f000 ffe1 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RST_Pin;
 8000c26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4828      	ldr	r0, [pc, #160]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000c40:	f000 ffd2 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin GPS_ON_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|GPS_ON_Pin;
 8000c44:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4821      	ldr	r0, [pc, #132]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000c5e:	f000 ffc3 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_BUSY_Pin;
 8000c62:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	481b      	ldr	r0, [pc, #108]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000c78:	f000 ffb6 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MAG_Pin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 8000c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c82:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4814      	ldr	r0, [pc, #80]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000c94:	f000 ffa8 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XL_INT0_Pin XL_INT1_Pin */
  GPIO_InitStruct.Pin = XL_INT0_Pin|XL_INT1_Pin;
 8000c98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <MX_GPIO_Init+0x20c>)
 8000cb0:	f000 ff9a 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT_STAT_Pin FG_NALERT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin|FG_NALERT_Pin;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <MX_GPIO_Init+0x20c>)
 8000cc8:	f000 ff8e 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	@ 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020000 	.word	0x58020000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58021000 	.word	0x58021000
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58020c00 	.word	0x58020c00

08000cec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cfe:	f000 fefb 	bl	8001af8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d0e:	231f      	movs	r3, #31
 8000d10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d12:	2387      	movs	r3, #135	@ 0x87
 8000d14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 ff19 	bl	8001b68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d36:	2004      	movs	r0, #4
 8000d38:	f000 fef6 	bl	8001b28 <HAL_MPU_Enable>

}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_MspInit+0x30>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_MspInit+0x30>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	58024400 	.word	0x58024400

08000d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ba      	sub	sp, #232	@ 0xe8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22c0      	movs	r2, #192	@ 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f006 fa2e 	bl	8007206 <memset>
  if(hi2c->Instance==I2C4)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d146      	bne.n	8000e42 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000db4:	f04f 0210 	mov.w	r2, #16
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fecc 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dd6:	f7ff ffb5 	bl	8000d44 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000df8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e12:	2304      	movs	r3, #4
 8000e14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <HAL_I2C_MspInit+0xd0>)
 8000e20:	f000 fee2 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	37e8      	adds	r7, #232	@ 0xe8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	58001c00 	.word	0x58001c00
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020c00 	.word	0x58020c00

08000e58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0be      	sub	sp, #248	@ 0xf8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	22c0      	movs	r2, #192	@ 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 f9c4 	bl	8007206 <memset>
  if(hltdc->Instance==LTDC)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a8d      	ldr	r2, [pc, #564]	@ (80010b8 <HAL_LTDC_MspInit+0x260>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	f040 8112 	bne.w	80010ae <HAL_LTDC_MspInit+0x256>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e8a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 6;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000eaa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fe52 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8000eca:	f7ff ff3b 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ece:	4b7b      	ldr	r3, [pc, #492]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ed4:	4a79      	ldr	r2, [pc, #484]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000ede:	4b77      	ldr	r3, [pc, #476]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000ee0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b73      	ldr	r3, [pc, #460]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a72      	ldr	r2, [pc, #456]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	4a6a      	ldr	r2, [pc, #424]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1a:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b64      	ldr	r3, [pc, #400]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	4a63      	ldr	r2, [pc, #396]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f38:	4b60      	ldr	r3, [pc, #384]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b59      	ldr	r3, [pc, #356]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b55      	ldr	r3, [pc, #340]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a54      	ldr	r2, [pc, #336]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b51      	ldr	r3, [pc, #324]	@ (80010bc <HAL_LTDC_MspInit+0x264>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_B3
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000f82:	23c1      	movs	r3, #193	@ 0xc1
 8000f84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f9a:	230e      	movs	r3, #14
 8000f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4846      	ldr	r0, [pc, #280]	@ (80010c0 <HAL_LTDC_MspInit+0x268>)
 8000fa8:	f000 fe1e 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fac:	2378      	movs	r3, #120	@ 0x78
 8000fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483c      	ldr	r0, [pc, #240]	@ (80010c4 <HAL_LTDC_MspInit+0x26c>)
 8000fd2:	f000 fe09 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4833      	ldr	r0, [pc, #204]	@ (80010c8 <HAL_LTDC_MspInit+0x270>)
 8000ffc:	f000 fdf4 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001000:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101a:	230e      	movs	r3, #14
 800101c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001024:	4619      	mov	r1, r3
 8001026:	4829      	ldr	r0, [pc, #164]	@ (80010cc <HAL_LTDC_MspInit+0x274>)
 8001028:	f000 fdde 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800102c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001030:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001046:	230e      	movs	r3, #14
 8001048:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001050:	4619      	mov	r1, r3
 8001052:	481d      	ldr	r0, [pc, #116]	@ (80010c8 <HAL_LTDC_MspInit+0x270>)
 8001054:	f000 fdc8 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001072:	230d      	movs	r3, #13
 8001074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800107c:	4619      	mov	r1, r3
 800107e:	4811      	ldr	r0, [pc, #68]	@ (80010c4 <HAL_LTDC_MspInit+0x26c>)
 8001080:	f000 fdb2 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001084:	2308      	movs	r3, #8
 8001086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109c:	230e      	movs	r3, #14
 800109e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <HAL_LTDC_MspInit+0x278>)
 80010aa:	f000 fd9d 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80010ae:	bf00      	nop
 80010b0:	37f8      	adds	r7, #248	@ 0xf8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	50001000 	.word	0x50001000
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020800 	.word	0x58020800
 80010c4:	58020000 	.word	0x58020000
 80010c8:	58020400 	.word	0x58020400
 80010cc:	58021000 	.word	0x58021000
 80010d0:	58020c00 	.word	0x58020c00

080010d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0be      	sub	sp, #248	@ 0xf8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	22c0      	movs	r2, #192	@ 0xc0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 f886 	bl	8007206 <memset>
  if(hqspi->Instance==QUADSPI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7a      	ldr	r2, [pc, #488]	@ (80012e8 <HAL_QSPI_MspInit+0x214>)
 8001100:	4293      	cmp	r3, r2
 8001102:	f040 80ec 	bne.w	80012de <HAL_QSPI_MspInit+0x20a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001106:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001112:	2300      	movs	r3, #0
 8001114:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fd24 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001126:	f7ff fe0d 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800112a:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800112c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001130:	4a6e      	ldr	r2, [pc, #440]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001136:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800113a:	4b6c      	ldr	r3, [pc, #432]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800113c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	4a67      	ldr	r2, [pc, #412]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001158:	4b64      	ldr	r3, [pc, #400]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b61      	ldr	r3, [pc, #388]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	4a5f      	ldr	r2, [pc, #380]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001176:	4b5d      	ldr	r3, [pc, #372]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001194:	4b55      	ldr	r3, [pc, #340]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	4b52      	ldr	r3, [pc, #328]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	4a50      	ldr	r2, [pc, #320]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b2:	4b4e      	ldr	r3, [pc, #312]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b4a      	ldr	r3, [pc, #296]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d0:	4b46      	ldr	r3, [pc, #280]	@ (80012ec <HAL_QSPI_MspInit+0x218>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011de:	2304      	movs	r3, #4
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f6:	2309      	movs	r3, #9
 80011f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001200:	4619      	mov	r1, r3
 8001202:	483b      	ldr	r0, [pc, #236]	@ (80012f0 <HAL_QSPI_MspInit+0x21c>)
 8001204:	f000 fcf0 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001220:	2309      	movs	r3, #9
 8001222:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800122a:	4619      	mov	r1, r3
 800122c:	4831      	ldr	r0, [pc, #196]	@ (80012f4 <HAL_QSPI_MspInit+0x220>)
 800122e:	f000 fcdb 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001232:	2304      	movs	r3, #4
 8001234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800124a:	2309      	movs	r3, #9
 800124c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001254:	4619      	mov	r1, r3
 8001256:	4828      	ldr	r0, [pc, #160]	@ (80012f8 <HAL_QSPI_MspInit+0x224>)
 8001258:	f000 fcc6 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800125c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001276:	2309      	movs	r3, #9
 8001278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001280:	4619      	mov	r1, r3
 8001282:	481e      	ldr	r0, [pc, #120]	@ (80012fc <HAL_QSPI_MspInit+0x228>)
 8001284:	f000 fcb0 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012a2:	2309      	movs	r3, #9
 80012a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <HAL_QSPI_MspInit+0x22c>)
 80012b0:	f000 fc9a 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012cc:	230a      	movs	r3, #10
 80012ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <HAL_QSPI_MspInit+0x224>)
 80012da:	f000 fc85 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80012de:	bf00      	nop
 80012e0:	37f8      	adds	r7, #248	@ 0xf8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	52005000 	.word	0x52005000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58021000 	.word	0x58021000
 80012f4:	58020000 	.word	0x58020000
 80012f8:	58020400 	.word	0x58020400
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58020800 	.word	0x58020800

08001304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0bc      	sub	sp, #240	@ 0xf0
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	22c0      	movs	r2, #192	@ 0xc0
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f005 ff6e 	bl	8007206 <memset>
  if(hspi->Instance==SPI1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a38      	ldr	r2, [pc, #224]	@ (8001410 <HAL_SPI_MspInit+0x10c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d168      	bne.n	8001406 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001334:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001340:	2300      	movs	r3, #0
 8001342:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fc0d 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001354:	f7ff fcf6 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001358:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 800135a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800135e:	4a2d      	ldr	r2, [pc, #180]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001364:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 800136a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800136e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a25      	ldr	r2, [pc, #148]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_SPI_MspInit+0x110>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b2:	2380      	movs	r3, #128	@ 0x80
 80013b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ca:	2305      	movs	r3, #5
 80013cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	@ (8001418 <HAL_SPI_MspInit+0x114>)
 80013d8:	f000 fc06 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80013dc:	2318      	movs	r3, #24
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f4:	2305      	movs	r3, #5
 80013f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	@ (800141c <HAL_SPI_MspInit+0x118>)
 8001402:	f000 fbf1 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	37f0      	adds	r7, #240	@ 0xf0
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40013000 	.word	0x40013000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ba      	sub	sp, #232	@ 0xe8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	22c0      	movs	r2, #192	@ 0xc0
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fee0 	bl	8007206 <memset>
  if(huart->Instance==UART8)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <HAL_UART_MspInit+0xc4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d145      	bne.n	80014dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001450:	f04f 0202 	mov.w	r2, #2
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fb7e 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001472:	f7ff fc67 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 8001478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800147c:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 800147e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001482:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 8001488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800148c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_UART_MspInit+0xc8>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80014ca:	2308      	movs	r3, #8
 80014cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_UART_MspInit+0xcc>)
 80014d8:	f000 fb86 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	37e8      	adds	r7, #232	@ 0xe8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40007c00 	.word	0x40007c00
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58021000 	.word	0x58021000

080014f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ba      	sub	sp, #232	@ 0xe8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	22c0      	movs	r2, #192	@ 0xc0
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fe78 	bl	8007206 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a30      	ldr	r2, [pc, #192]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d159      	bne.n	80015d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001520:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800152c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fb15 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001544:	f7ff fbfe 	bl	8000d44 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001548:	f001 fa5e 	bl	8002a08 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800156e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001582:	4619      	mov	r1, r3
 8001584:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <HAL_PCD_MspInit+0xf4>)
 8001586:	f000 fb2f 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800158a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800158e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015a4:	230a      	movs	r3, #10
 80015a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <HAL_PCD_MspInit+0xf4>)
 80015b2:	f000 fb19 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 80015b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015bc:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 80015be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 80015c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	37e8      	adds	r7, #232	@ 0xe8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40080000 	.word	0x40080000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58020000 	.word	0x58020000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f927 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800164c:	4b37      	ldr	r3, [pc, #220]	@ (800172c <SystemInit+0xe4>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <SystemInit+0xe4>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800165c:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <SystemInit+0xe8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2b06      	cmp	r3, #6
 8001666:	d807      	bhi.n	8001678 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001668:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <SystemInit+0xe8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 030f 	bic.w	r3, r3, #15
 8001670:	4a2f      	ldr	r2, [pc, #188]	@ (8001730 <SystemInit+0xe8>)
 8001672:	f043 0307 	orr.w	r3, r3, #7
 8001676:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001678:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <SystemInit+0xec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2d      	ldr	r2, [pc, #180]	@ (8001734 <SystemInit+0xec>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <SystemInit+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <SystemInit+0xec>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4929      	ldr	r1, [pc, #164]	@ (8001734 <SystemInit+0xec>)
 8001690:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <SystemInit+0xf0>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <SystemInit+0xe8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <SystemInit+0xe8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 030f 	bic.w	r3, r3, #15
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <SystemInit+0xe8>)
 80016ac:	f043 0307 	orr.w	r3, r3, #7
 80016b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <SystemInit+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <SystemInit+0xec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <SystemInit+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <SystemInit+0xec>)
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <SystemInit+0xf4>)
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <SystemInit+0xec>)
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <SystemInit+0xf8>)
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <SystemInit+0xec>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <SystemInit+0xfc>)
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <SystemInit+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <SystemInit+0xec>)
 80016de:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <SystemInit+0xfc>)
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <SystemInit+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <SystemInit+0xec>)
 80016ea:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <SystemInit+0xfc>)
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <SystemInit+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <SystemInit+0xec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <SystemInit+0xec>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <SystemInit+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <SystemInit+0x100>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SystemInit+0x104>)
 800170c:	4013      	ands	r3, r2
 800170e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001712:	d202      	bcs.n	800171a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <SystemInit+0x108>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <SystemInit+0x10c>)
 800171c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001720:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00
 8001730:	52002000 	.word	0x52002000
 8001734:	58024400 	.word	0x58024400
 8001738:	eaf6ed7f 	.word	0xeaf6ed7f
 800173c:	02020200 	.word	0x02020200
 8001740:	01ff0000 	.word	0x01ff0000
 8001744:	01010280 	.word	0x01010280
 8001748:	5c001000 	.word	0x5c001000
 800174c:	ffff0000 	.word	0xffff0000
 8001750:	51008108 	.word	0x51008108
 8001754:	52004000 	.word	0x52004000

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f7ff ff74 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	@ (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f005 fd47 	bl	8007218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7fe ff1d 	bl	80005c8 <main>
  bx  lr
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001794:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001798:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800179c:	080072c0 	.word	0x080072c0
  ldr r2, =_sbss
 80017a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80017a4:	24000778 	.word	0x24000778

080017a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC3_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f000 f96e 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b8:	f002 f800 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	4913      	ldr	r1, [pc, #76]	@ (8001818 <HAL_Init+0x6c>)
 80017ca:	5ccb      	ldrb	r3, [r1, r3]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_Init+0x68>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	4a0e      	ldr	r2, [pc, #56]	@ (8001818 <HAL_Init+0x6c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	4a0b      	ldr	r2, [pc, #44]	@ (800181c <HAL_Init+0x70>)
 80017ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_Init+0x74>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f814 	bl	8001824 <HAL_InitTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e002      	b.n	800180c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001806:	f7ff faa3 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024400 	.word	0x58024400
 8001818:	08007278 	.word	0x08007278
 800181c:	24000004 	.word	0x24000004
 8001820:	24000000 	.word	0x24000000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_InitTick+0x60>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e021      	b.n	800187c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_InitTick+0x64>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_InitTick+0x60>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f945 	bl	8001ade <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f91d 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <HAL_InitTick+0x68>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2400000c 	.word	0x2400000c
 8001888:	24000000 	.word	0x24000000
 800188c:	24000008 	.word	0x24000008

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2400000c 	.word	0x2400000c
 80018b4:	24000774 	.word	0x24000774

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	24000774 	.word	0x24000774

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c

08001918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_GetREVID+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	5c001000 	.word	0x5c001000

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <__NVIC_SetPriorityGrouping+0x40>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	4313      	orrs	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <__NVIC_SetPriorityGrouping+0x40>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00
 8001974:	05fa0000 	.word	0x05fa0000

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff47 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5e 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb2 	bl	8001a50 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001afc:	f3bf 8f5f 	dmb	sy
}
 8001b00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <HAL_MPU_Disable+0x28>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_MPU_Disable+0x28>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_MPU_Disable+0x2c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	e000ed90 	.word	0xe000ed90

08001b28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_MPU_Enable+0x38>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_MPU_Enable+0x3c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_MPU_Enable+0x3c>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b46:	f3bf 8f4f 	dsb	sy
}
 8001b4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b4c:	f3bf 8f6f 	isb	sy
}
 8001b50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed90 	.word	0xe000ed90
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	785a      	ldrb	r2, [r3, #1]
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
 8001b90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7adb      	ldrb	r3, [r3, #11]
 8001b96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7a9b      	ldrb	r3, [r3, #10]
 8001b9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7b5b      	ldrb	r3, [r3, #13]
 8001ba6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ba8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7b9b      	ldrb	r3, [r3, #14]
 8001bae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7bdb      	ldrb	r3, [r3, #15]
 8001bb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7a5b      	ldrb	r3, [r3, #9]
 8001bbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd4:	6113      	str	r3, [r2, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed90 	.word	0xe000ed90

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bf6:	4b89      	ldr	r3, [pc, #548]	@ (8001e1c <HAL_GPIO_Init+0x234>)
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bfa:	e194      	b.n	8001f26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8186 	beq.w	8001f20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_GPIO_Init+0x44>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d130      	bne.n	8001c8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c62:	2201      	movs	r2, #1
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0201 	and.w	r2, r3, #1
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d017      	beq.n	8001cca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	69b9      	ldr	r1, [r7, #24]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80e0 	beq.w	8001f20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <HAL_GPIO_Init+0x238>)
 8001d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d66:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <HAL_GPIO_Init+0x238>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <HAL_GPIO_Init+0x238>)
 8001d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a29      	ldr	r2, [pc, #164]	@ (8001e24 <HAL_GPIO_Init+0x23c>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_GPIO_Init+0x240>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d052      	beq.n	8001e50 <HAL_GPIO_Init+0x268>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_GPIO_Init+0x244>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_GPIO_Init+0x22e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <HAL_GPIO_Init+0x248>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x22a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <HAL_GPIO_Init+0x24c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e38 <HAL_GPIO_Init+0x250>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x222>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e3c <HAL_GPIO_Init+0x254>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x21e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_GPIO_Init+0x258>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x21a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_GPIO_Init+0x25c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x216>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a18      	ldr	r2, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x260>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x212>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_GPIO_Init+0x264>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x20e>
 8001df2:	2309      	movs	r3, #9
 8001df4:	e02d      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001df6:	230a      	movs	r3, #10
 8001df8:	e02b      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e029      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e027      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e025      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e023      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e021      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e01f      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e01d      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01b      	b.n	8001e52 <HAL_GPIO_Init+0x26a>
 8001e1a:	bf00      	nop
 8001e1c:	58000080 	.word	0x58000080
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58000400 	.word	0x58000400
 8001e28:	58020000 	.word	0x58020000
 8001e2c:	58020400 	.word	0x58020400
 8001e30:	58020800 	.word	0x58020800
 8001e34:	58020c00 	.word	0x58020c00
 8001e38:	58021000 	.word	0x58021000
 8001e3c:	58021400 	.word	0x58021400
 8001e40:	58021800 	.word	0x58021800
 8001e44:	58021c00 	.word	0x58021c00
 8001e48:	58022000 	.word	0x58022000
 8001e4c:	58022400 	.word	0x58022400
 8001e50:	2300      	movs	r3, #0
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e62:	4938      	ldr	r1, [pc, #224]	@ (8001f44 <HAL_GPIO_Init+0x35c>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	3301      	adds	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f ae63 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3724      	adds	r7, #36	@ 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	58000400 	.word	0x58000400

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e08b      	b.n	80020a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe feee 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	@ 0x24
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	e006      	b.n	8002004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d108      	bne.n	800201e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	e007      	b.n	800202e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800202c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_I2C_Init+0x134>)
 800203a:	430b      	orrs	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800204c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69d9      	ldr	r1, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	02008000 	.word	0x02008000

080020b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d138      	bne.n	800213c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e032      	b.n	800213e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b20      	cmp	r3, #32
 800215e:	d139      	bne.n	80021d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800216a:	2302      	movs	r3, #2
 800216c:	e033      	b.n	80021d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2224      	movs	r2, #36	@ 0x24
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800219c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0bf      	b.n	8002376 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fe24 	bl	8000e58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002226:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6999      	ldr	r1, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800223c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_LTDC_Init+0x19c>)
 8002258:	400b      	ands	r3, r1
 800225a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <HAL_LTDC_Init+0x19c>)
 8002286:	400b      	ands	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1a      	ldr	r2, [r3, #32]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b33      	ldr	r3, [pc, #204]	@ (8002380 <HAL_LTDC_Init+0x19c>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6959      	ldr	r1, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_LTDC_Init+0x19c>)
 80022e2:	400b      	ands	r3, r1
 80022e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0206 	orr.w	r2, r2, #6
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	f000f800 	.word	0xf000f800

08002384 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_LTDC_ConfigLayer+0x1a>
 800239a:	2302      	movs	r3, #2
 800239c:	e02c      	b.n	80023f8 <HAL_LTDC_ConfigLayer+0x74>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2202      	movs	r2, #2
 80023aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2134      	movs	r1, #52	@ 0x34
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f811 	bl	8002400 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}

08002400 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	4413      	add	r3, r2
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	01db      	lsls	r3, r3, #7
 800242c:	4413      	add	r3, r2
 800242e:	3384      	adds	r3, #132	@ 0x84
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4611      	mov	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	01d2      	lsls	r2, r2, #7
 800243c:	440a      	add	r2, r1
 800243e:	3284      	adds	r2, #132	@ 0x84
 8002440:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002444:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002456:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002458:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	01db      	lsls	r3, r3, #7
 8002464:	440b      	add	r3, r1
 8002466:	3384      	adds	r3, #132	@ 0x84
 8002468:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800246e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247e:	4413      	add	r3, r2
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	4413      	add	r3, r2
 8002490:	3384      	adds	r3, #132	@ 0x84
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	4611      	mov	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	01d2      	lsls	r2, r2, #7
 800249e:	440a      	add	r2, r1
 80024a0:	3284      	adds	r2, #132	@ 0x84
 80024a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80024a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b6:	4413      	add	r3, r2
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	01db      	lsls	r3, r3, #7
 80024c4:	440b      	add	r3, r1
 80024c6:	3384      	adds	r3, #132	@ 0x84
 80024c8:	4619      	mov	r1, r3
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	01db      	lsls	r3, r3, #7
 80024da:	4413      	add	r3, r2
 80024dc:	3384      	adds	r3, #132	@ 0x84
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4611      	mov	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	01d2      	lsls	r2, r2, #7
 80024ea:	440a      	add	r2, r1
 80024ec:	3284      	adds	r2, #132	@ 0x84
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	01db      	lsls	r3, r3, #7
 80024fe:	4413      	add	r3, r2
 8002500:	3384      	adds	r3, #132	@ 0x84
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	4413      	add	r3, r2
 8002532:	3384      	adds	r3, #132	@ 0x84
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	01db      	lsls	r3, r3, #7
 8002540:	4413      	add	r3, r2
 8002542:	3384      	adds	r3, #132	@ 0x84
 8002544:	461a      	mov	r2, r3
 8002546:	2300      	movs	r3, #0
 8002548:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002550:	461a      	mov	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	431a      	orrs	r2, r3
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	01db      	lsls	r3, r3, #7
 8002564:	440b      	add	r3, r1
 8002566:	3384      	adds	r3, #132	@ 0x84
 8002568:	4619      	mov	r1, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	01db      	lsls	r3, r3, #7
 800257a:	4413      	add	r3, r2
 800257c:	3384      	adds	r3, #132	@ 0x84
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4611      	mov	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	01d2      	lsls	r2, r2, #7
 800258a:	440a      	add	r2, r1
 800258c:	3284      	adds	r2, #132	@ 0x84
 800258e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002592:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	01db      	lsls	r3, r3, #7
 800259e:	4413      	add	r3, r2
 80025a0:	3384      	adds	r3, #132	@ 0x84
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	4413      	add	r3, r2
 80025b6:	3384      	adds	r3, #132	@ 0x84
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	01db      	lsls	r3, r3, #7
 80025c4:	440b      	add	r3, r1
 80025c6:	3384      	adds	r3, #132	@ 0x84
 80025c8:	4619      	mov	r1, r3
 80025ca:	4b58      	ldr	r3, [pc, #352]	@ (800272c <LTDC_SetConfig+0x32c>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	6809      	ldr	r1, [r1, #0]
 80025dc:	4608      	mov	r0, r1
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	01c9      	lsls	r1, r1, #7
 80025e2:	4401      	add	r1, r0
 80025e4:	3184      	adds	r1, #132	@ 0x84
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	4413      	add	r3, r2
 80025f6:	3384      	adds	r3, #132	@ 0x84
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	01db      	lsls	r3, r3, #7
 8002604:	4413      	add	r3, r2
 8002606:	3384      	adds	r3, #132	@ 0x84
 8002608:	461a      	mov	r2, r3
 800260a:	2300      	movs	r3, #0
 800260c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4413      	add	r3, r2
 800261a:	3384      	adds	r3, #132	@ 0x84
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800262c:	2304      	movs	r3, #4
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	e01b      	b.n	800266a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800263a:	2303      	movs	r3, #3
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e014      	b.n	800266a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00b      	beq.n	8002660 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800264c:	2b02      	cmp	r3, #2
 800264e:	d007      	beq.n	8002660 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800265c:	2b07      	cmp	r3, #7
 800265e:	d102      	bne.n	8002666 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002660:	2302      	movs	r3, #2
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	e001      	b.n	800266a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	01db      	lsls	r3, r3, #7
 8002674:	4413      	add	r3, r2
 8002676:	3384      	adds	r3, #132	@ 0x84
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4611      	mov	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	01d2      	lsls	r2, r2, #7
 8002684:	440a      	add	r2, r1
 8002686:	3284      	adds	r2, #132	@ 0x84
 8002688:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800268c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80026ac:	68f9      	ldr	r1, [r7, #12]
 80026ae:	6809      	ldr	r1, [r1, #0]
 80026b0:	4608      	mov	r0, r1
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	01c9      	lsls	r1, r1, #7
 80026b6:	4401      	add	r1, r0
 80026b8:	3184      	adds	r1, #132	@ 0x84
 80026ba:	4313      	orrs	r3, r2
 80026bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	01db      	lsls	r3, r3, #7
 80026c8:	4413      	add	r3, r2
 80026ca:	3384      	adds	r3, #132	@ 0x84
 80026cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	440b      	add	r3, r1
 80026da:	3384      	adds	r3, #132	@ 0x84
 80026dc:	4619      	mov	r1, r3
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <LTDC_SetConfig+0x330>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	01db      	lsls	r3, r3, #7
 80026ee:	4413      	add	r3, r2
 80026f0:	3384      	adds	r3, #132	@ 0x84
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	01db      	lsls	r3, r3, #7
 8002704:	4413      	add	r3, r2
 8002706:	3384      	adds	r3, #132	@ 0x84
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4611      	mov	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	01d2      	lsls	r2, r2, #7
 8002714:	440a      	add	r2, r1
 8002716:	3284      	adds	r2, #132	@ 0x84
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6013      	str	r3, [r2, #0]
}
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	fffff8f8 	.word	0xfffff8f8
 8002730:	fffff800 	.word	0xfffff800

08002734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0fe      	b.n	8002944 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fec8 	bl	80014f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 fab5 	bl	8006cdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7c1a      	ldrb	r2, [r3, #16]
 800277a:	f88d 2000 	strb.w	r2, [sp]
 800277e:	3304      	adds	r3, #4
 8002780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002782:	f004 fa39 	bl	8006bf8 <USB_CoreInit>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d5      	b.n	8002944 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 faad 	bl	8006cfe <USB_SetCurrentMode>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0c6      	b.n	8002944 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e04a      	b.n	8002852 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3315      	adds	r3, #21
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3314      	adds	r3, #20
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	b298      	uxth	r0, r3
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	332e      	adds	r3, #46	@ 0x2e
 80027f8:	4602      	mov	r2, r0
 80027fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3318      	adds	r3, #24
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	331c      	adds	r3, #28
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3320      	adds	r3, #32
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3324      	adds	r3, #36	@ 0x24
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	791b      	ldrb	r3, [r3, #4]
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3af      	bcc.n	80027bc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e044      	b.n	80028ec <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3301      	adds	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3b5      	bcc.n	8002862 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7c1a      	ldrb	r2, [r3, #16]
 80028fe:	f88d 2000 	strb.w	r2, [sp]
 8002902:	3304      	adds	r3, #4
 8002904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002906:	f004 fa47 	bl	8006d98 <USB_DevInit>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e013      	b.n	8002944 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7b1b      	ldrb	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f80a 	bl	800294c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fc02 	bl	8007146 <USB_DevDisconnect>

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800297a:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_PCDEx_ActivateLPM+0x44>)
 800297c:	4313      	orrs	r3, r2
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	10000003 	.word	0x10000003

08002994 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_PWREx_ConfigSupply+0x70>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d00a      	beq.n	80029be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029a8:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_PWREx_ConfigSupply+0x70>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e01f      	b.n	80029fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e01d      	b.n	80029fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_PWREx_ConfigSupply+0x70>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	490f      	ldr	r1, [pc, #60]	@ (8002a04 <HAL_PWREx_ConfigSupply+0x70>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029ce:	f7fe ff73 	bl	80018b8 <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029d4:	e009      	b.n	80029ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029d6:	f7fe ff6f 	bl	80018b8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029e4:	d901      	bls.n	80029ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e007      	b.n	80029fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_PWREx_ConfigSupply+0x70>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f6:	d1ee      	bne.n	80029d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	58024800 	.word	0x58024800

08002a08 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	58024800 	.word	0x58024800

08002a28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7fe ff42 	bl	80018b8 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e05f      	b.n	8002b00 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe fb41 	bl	80010d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002a52:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f85a 	bl	8002b10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2120      	movs	r1, #32
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f852 	bl	8002b2c <QSPI_WaitFlagStateUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d135      	bne.n	8002afe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_QSPI_Init+0xe0>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	0611      	lsls	r1, r2, #24
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	69d2      	ldr	r2, [r2, #28]
 8002aac:	4311      	orrs	r1, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a12      	ldr	r2, [r2, #32]
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_QSPI_Init+0xe4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	0411      	lsls	r1, r2, #16
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6952      	ldr	r2, [r2, #20]
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6992      	ldr	r2, [r2, #24]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	00ffff2f 	.word	0x00ffff2f
 8002b0c:	ffe0f8fe 	.word	0xffe0f8fe

08002b10 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002b3c:	e01a      	b.n	8002b74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d016      	beq.n	8002b74 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe feb7 	bl	80018b8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e00e      	b.n	8002b92 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1d6      	bne.n	8002b3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	@ 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f000 bc48 	b.w	8003440 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8088 	beq.w	8002cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b99      	ldr	r3, [pc, #612]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bc8:	4b96      	ldr	r3, [pc, #600]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d007      	beq.n	8002be4 <HAL_RCC_OscConfig+0x48>
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	2b18      	cmp	r3, #24
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b8f      	ldr	r3, [pc, #572]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d06d      	beq.n	8002ccc <HAL_RCC_OscConfig+0x130>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d169      	bne.n	8002ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f000 bc21 	b.w	8003440 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x7a>
 8002c08:	4b86      	ldr	r3, [pc, #536]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a85      	ldr	r2, [pc, #532]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x9c>
 8002c1e:	4b81      	ldr	r3, [pc, #516]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a80      	ldr	r2, [pc, #512]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c42:	4b78      	ldr	r3, [pc, #480]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a77      	ldr	r2, [pc, #476]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a74      	ldr	r2, [pc, #464]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c5c:	4b71      	ldr	r3, [pc, #452]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a70      	ldr	r2, [pc, #448]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b6e      	ldr	r3, [pc, #440]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe1c 	bl	80018b8 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fe18 	bl	80018b8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e3d4      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c96:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fe08 	bl	80018b8 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fe04 	bl	80018b8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e3c0      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cbe:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x110>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80ca 	beq.w	8002e70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cdc:	4b51      	ldr	r3, [pc, #324]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCC_OscConfig+0x166>
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2b18      	cmp	r3, #24
 8002cf6:	d156      	bne.n	8002da6 <HAL_RCC_OscConfig+0x20a>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d151      	bne.n	8002da6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d02:	4b48      	ldr	r3, [pc, #288]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x17e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e392      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d1a:	4b42      	ldr	r3, [pc, #264]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0219 	bic.w	r2, r3, #25
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	493f      	ldr	r1, [pc, #252]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fdc4 	bl	80018b8 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe fdc0 	bl	80018b8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e37c      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d46:	4b37      	ldr	r3, [pc, #220]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	f7fe fde1 	bl	8001918 <HAL_GetREVID>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d817      	bhi.n	8002d90 <HAL_RCC_OscConfig+0x1f4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d108      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1de>
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d70:	4a2c      	ldr	r2, [pc, #176]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e07a      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	031b      	lsls	r3, r3, #12
 8002d88:	4926      	ldr	r1, [pc, #152]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8e:	e06f      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	4921      	ldr	r1, [pc, #132]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da4:	e064      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d047      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dae:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0219 	bic.w	r2, r3, #25
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	491a      	ldr	r1, [pc, #104]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fd7a 	bl	80018b8 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fd76 	bl	80018b8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e332      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	f7fe fd97 	bl	8001918 <HAL_GetREVID>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d819      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x28c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x272>
 8002dfc:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e04:	4a07      	ldr	r2, [pc, #28]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0a:	6053      	str	r3, [r2, #4]
 8002e0c:	e030      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	4901      	ldr	r1, [pc, #4]	@ (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
 8002e22:	e025      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
 8002e24:	58024400 	.word	0x58024400
 8002e28:	4b9a      	ldr	r3, [pc, #616]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	4997      	ldr	r1, [pc, #604]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	e018      	b.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b95      	ldr	r3, [pc, #596]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a94      	ldr	r2, [pc, #592]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fd35 	bl	80018b8 <HAL_GetTick>
 8002e4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fd31 	bl	80018b8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e2ed      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e64:	4b8b      	ldr	r3, [pc, #556]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a9 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4b85      	ldr	r3, [pc, #532]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e88:	4b82      	ldr	r3, [pc, #520]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d007      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x308>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b18      	cmp	r3, #24
 8002e98:	d13a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x374>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d135      	bne.n	8002f10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x320>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b80      	cmp	r3, #128	@ 0x80
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e2c1      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	f7fe fd2c 	bl	8001918 <HAL_GetREVID>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d817      	bhi.n	8002efa <HAL_RCC_OscConfig+0x35e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x348>
 8002ed2:	4b70      	ldr	r3, [pc, #448]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002eda:	4a6e      	ldr	r2, [pc, #440]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ee0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee2:	e075      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	4968      	ldr	r1, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef8:	e06a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002efa:	4b66      	ldr	r3, [pc, #408]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	4962      	ldr	r1, [pc, #392]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f0e:	e05f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d042      	beq.n	8002f9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f18:	4b5e      	ldr	r3, [pc, #376]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fcc8 	bl	80018b8 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fcc4 	bl	80018b8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e280      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f3e:	4b55      	ldr	r3, [pc, #340]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4a:	f7fe fce5 	bl	8001918 <HAL_GetREVID>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d817      	bhi.n	8002f88 <HAL_RCC_OscConfig+0x3ec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d108      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3d6>
 8002f60:	4b4c      	ldr	r3, [pc, #304]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f68:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
 8002f72:	4b48      	ldr	r3, [pc, #288]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	4944      	ldr	r1, [pc, #272]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	e023      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	493f      	ldr	r1, [pc, #252]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
 8002f9c:	e018      	b.n	8002fd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fc85 	bl	80018b8 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fc81 	bl	80018b8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e23d      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fc4:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d036      	beq.n	800304a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d019      	beq.n	8003018 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fc62 	bl	80018b8 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fc5e 	bl	80018b8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e21a      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800300a:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x45c>
 8003016:	e018      	b.n	800304a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301c:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fc48 	bl	80018b8 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fc44 	bl	80018b8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e200      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d039      	beq.n	80030ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01c      	beq.n	8003098 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8003064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306a:	f7fe fc25 	bl	80018b8 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003072:	f7fe fc21 	bl	80018b8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1dd      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x4d6>
 8003090:	e01b      	b.n	80030ca <HAL_RCC_OscConfig+0x52e>
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003098:	4b9b      	ldr	r3, [pc, #620]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9a      	ldr	r2, [pc, #616]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800309e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030a4:	f7fe fc08 	bl	80018b8 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ac:	f7fe fc04 	bl	80018b8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1c0      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030be:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8081 	beq.w	80031da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030d8:	4b8c      	ldr	r3, [pc, #560]	@ (800330c <HAL_RCC_OscConfig+0x770>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a8b      	ldr	r2, [pc, #556]	@ (800330c <HAL_RCC_OscConfig+0x770>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e4:	f7fe fbe8 	bl	80018b8 <HAL_GetTick>
 80030e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ec:	f7fe fbe4 	bl	80018b8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1a0      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030fe:	4b83      	ldr	r3, [pc, #524]	@ (800330c <HAL_RCC_OscConfig+0x770>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d106      	bne.n	8003120 <HAL_RCC_OscConfig+0x584>
 8003112:	4b7d      	ldr	r3, [pc, #500]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	4a7c      	ldr	r2, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6713      	str	r3, [r2, #112]	@ 0x70
 800311e:	e02d      	b.n	800317c <HAL_RCC_OscConfig+0x5e0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x5a6>
 8003128:	4b77      	ldr	r3, [pc, #476]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a76      	ldr	r2, [pc, #472]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
 8003134:	4b74      	ldr	r3, [pc, #464]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a73      	ldr	r2, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x5e0>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x5c8>
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	@ 0x70
 8003156:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	4a6b      	ldr	r2, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	@ 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x5e0>
 8003164:	4b68      	ldr	r3, [pc, #416]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003174:	4a64      	ldr	r2, [pc, #400]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fb98 	bl	80018b8 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fb94 	bl	80018b8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e14e      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a2:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x5f0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fb82 	bl	80018b8 <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fb7e 	bl	80018b8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e138      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 812d 	beq.w	800343e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031e4:	4b48      	ldr	r3, [pc, #288]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ec:	2b18      	cmp	r3, #24
 80031ee:	f000 80bd 	beq.w	800336c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	f040 809e 	bne.w	8003338 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a41      	ldr	r2, [pc, #260]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fb56 	bl	80018b8 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe fb52 	bl	80018b8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e10e      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003222:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322e:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003232:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCC_OscConfig+0x774>)
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	430a      	orrs	r2, r1
 8003242:	4931      	ldr	r1, [pc, #196]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	628b      	str	r3, [r1, #40]	@ 0x28
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	3b01      	subs	r3, #1
 800324e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	3b01      	subs	r3, #1
 8003258:	025b      	lsls	r3, r3, #9
 800325a:	b29b      	uxth	r3, r3
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	3b01      	subs	r3, #1
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003278:	4923      	ldr	r1, [pc, #140]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800327a:	4313      	orrs	r3, r2
 800327c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800327e:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	4a21      	ldr	r2, [pc, #132]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800328a:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800328c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800328e:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <HAL_RCC_OscConfig+0x778>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003296:	00d2      	lsls	r2, r2, #3
 8003298:	491b      	ldr	r1, [pc, #108]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	f023 020c 	bic.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	4917      	ldr	r1, [pc, #92]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	f023 0202 	bic.w	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	4912      	ldr	r1, [pc, #72]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032c2:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	4a10      	ldr	r2, [pc, #64]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	4a07      	ldr	r2, [pc, #28]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_RCC_OscConfig+0x76c>)
 80032f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fadb 	bl	80018b8 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003304:	e011      	b.n	800332a <HAL_RCC_OscConfig+0x78e>
 8003306:	bf00      	nop
 8003308:	58024400 	.word	0x58024400
 800330c:	58024800 	.word	0x58024800
 8003310:	fffffc0c 	.word	0xfffffc0c
 8003314:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe face 	bl	80018b8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e08a      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800332a:	4b47      	ldr	r3, [pc, #284]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x77c>
 8003336:	e082      	b.n	800343e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b43      	ldr	r3, [pc, #268]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a42      	ldr	r2, [pc, #264]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 800333e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fab8 	bl	80018b8 <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fab4 	bl	80018b8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e070      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335e:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x7b0>
 800336a:	e068      	b.n	800343e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800336c:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003372:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	d031      	beq.n	80033e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0203 	and.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d12a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d122      	bne.n	80033e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0a5b      	lsrs	r3, r3, #9
 80033b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d111      	bne.n	80033e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e02b      	b.n	8003440 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d01f      	beq.n	800343e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800340a:	f7fe fa55 	bl	80018b8 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003410:	bf00      	nop
 8003412:	f7fe fa51 	bl	80018b8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	4293      	cmp	r3, r2
 800341c:	d0f9      	beq.n	8003412 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800341e:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_RCC_OscConfig+0x8b0>)
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800342a:	00d2      	lsls	r2, r2, #3
 800342c:	4906      	ldr	r1, [pc, #24]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 800342e:	4313      	orrs	r3, r2
 8003430:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_RCC_OscConfig+0x8ac>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	@ 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58024400 	.word	0x58024400
 800344c:	ffff0007 	.word	0xffff0007

08003450 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e19c      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b8a      	ldr	r3, [pc, #552]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b87      	ldr	r3, [pc, #540]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	4985      	ldr	r1, [pc, #532]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b83      	ldr	r3, [pc, #524]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e184      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d908      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034b0:	4b78      	ldr	r3, [pc, #480]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4975      	ldr	r1, [pc, #468]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	4b70      	ldr	r3, [pc, #448]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034da:	429a      	cmp	r2, r3
 80034dc:	d908      	bls.n	80034f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034de:	4b6d      	ldr	r3, [pc, #436]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	496a      	ldr	r1, [pc, #424]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	4b64      	ldr	r3, [pc, #400]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003508:	429a      	cmp	r2, r3
 800350a:	d908      	bls.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800350c:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	495e      	ldr	r1, [pc, #376]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800351a:	4313      	orrs	r3, r2
 800351c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	4b59      	ldr	r3, [pc, #356]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003536:	429a      	cmp	r2, r3
 8003538:	d908      	bls.n	800354c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800353a:	4b56      	ldr	r3, [pc, #344]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4953      	ldr	r1, [pc, #332]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b4d      	ldr	r3, [pc, #308]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	429a      	cmp	r2, r3
 8003566:	d908      	bls.n	800357a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b4a      	ldr	r3, [pc, #296]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f023 020f 	bic.w	r2, r3, #15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4947      	ldr	r1, [pc, #284]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003576:	4313      	orrs	r3, r2
 8003578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d055      	beq.n	8003632 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003586:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4940      	ldr	r1, [pc, #256]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003594:	4313      	orrs	r3, r2
 8003596:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0f6      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d115      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ea      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035d0:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0de      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d6      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f0:	4b28      	ldr	r3, [pc, #160]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f023 0207 	bic.w	r2, r3, #7
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4925      	ldr	r1, [pc, #148]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003602:	f7fe f959 	bl	80018b8 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003608:	e00a      	b.n	8003620 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360a:	f7fe f955 	bl	80018b8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0be      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	429a      	cmp	r2, r3
 8003630:	d1eb      	bne.n	800360a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	429a      	cmp	r2, r3
 800364c:	d208      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	490e      	ldr	r1, [pc, #56]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800365c:	4313      	orrs	r3, r2
 800365e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d214      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	4906      	ldr	r1, [pc, #24]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e086      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
 8003690:	52002000 	.word	0x52002000
 8003694:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d208      	bcs.n	80036c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b4:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4939      	ldr	r1, [pc, #228]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036de:	429a      	cmp	r2, r3
 80036e0:	d208      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036e2:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	492e      	ldr	r1, [pc, #184]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800370c:	429a      	cmp	r2, r3
 800370e:	d208      	bcs.n	8003722 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4922      	ldr	r1, [pc, #136]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 800371e:	4313      	orrs	r3, r2
 8003720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800373a:	429a      	cmp	r2, r3
 800373c:	d208      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800373e:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4917      	ldr	r1, [pc, #92]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 800374c:	4313      	orrs	r3, r2
 800374e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003750:	f000 f834 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4912      	ldr	r1, [pc, #72]	@ (80037ac <HAL_RCC_ClockConfig+0x35c>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800376e:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <HAL_RCC_ClockConfig+0x35c>)
 8003778:	5cd3      	ldrb	r3, [r2, r3]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x360>)
 8003786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x364>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_RCC_ClockConfig+0x368>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f846 	bl	8001824 <HAL_InitTick>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
 80037ac:	08007278 	.word	0x08007278
 80037b0:	24000004 	.word	0x24000004
 80037b4:	24000000 	.word	0x24000000
 80037b8:	24000008 	.word	0x24000008

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	@ 0x24
 80037c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c2:	4bb3      	ldr	r3, [pc, #716]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ca:	2b18      	cmp	r3, #24
 80037cc:	f200 8155 	bhi.w	8003a7a <HAL_RCC_GetSysClockFreq+0x2be>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	08003a7b 	.word	0x08003a7b
 80037e0:	08003a7b 	.word	0x08003a7b
 80037e4:	08003a7b 	.word	0x08003a7b
 80037e8:	08003a7b 	.word	0x08003a7b
 80037ec:	08003a7b 	.word	0x08003a7b
 80037f0:	08003a7b 	.word	0x08003a7b
 80037f4:	08003a7b 	.word	0x08003a7b
 80037f8:	08003863 	.word	0x08003863
 80037fc:	08003a7b 	.word	0x08003a7b
 8003800:	08003a7b 	.word	0x08003a7b
 8003804:	08003a7b 	.word	0x08003a7b
 8003808:	08003a7b 	.word	0x08003a7b
 800380c:	08003a7b 	.word	0x08003a7b
 8003810:	08003a7b 	.word	0x08003a7b
 8003814:	08003a7b 	.word	0x08003a7b
 8003818:	08003869 	.word	0x08003869
 800381c:	08003a7b 	.word	0x08003a7b
 8003820:	08003a7b 	.word	0x08003a7b
 8003824:	08003a7b 	.word	0x08003a7b
 8003828:	08003a7b 	.word	0x08003a7b
 800382c:	08003a7b 	.word	0x08003a7b
 8003830:	08003a7b 	.word	0x08003a7b
 8003834:	08003a7b 	.word	0x08003a7b
 8003838:	0800386f 	.word	0x0800386f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800383c:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003848:	4b91      	ldr	r3, [pc, #580]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	4a90      	ldr	r2, [pc, #576]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800385a:	e111      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800385c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800385e:	61bb      	str	r3, [r7, #24]
      break;
 8003860:	e10e      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003862:	4b8d      	ldr	r3, [pc, #564]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003864:	61bb      	str	r3, [r7, #24]
      break;
 8003866:	e10b      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003868:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800386a:	61bb      	str	r3, [r7, #24]
      break;
 800386c:	e108      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800386e:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003878:	4b85      	ldr	r3, [pc, #532]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003882:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003884:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800388e:	4b80      	ldr	r3, [pc, #512]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003892:	08db      	lsrs	r3, r3, #3
 8003894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80e1 	beq.w	8003a74 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f000 8083 	beq.w	80039c0 <HAL_RCC_GetSysClockFreq+0x204>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	f200 80a1 	bhi.w	8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x114>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d056      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x1c0>
 80038ce:	e099      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02d      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003906:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003916:	ed97 6a02 	vldr	s12, [r7, #8]
 800391a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800391e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003936:	e087      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394a:	4b51      	ldr	r3, [pc, #324]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395a:	ed97 6a02 	vldr	s12, [r7, #8]
 800395e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800396e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800397a:	e065      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003aa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800398a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398e:	4b40      	ldr	r3, [pc, #256]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039be:	e043      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x2f0>
 80039ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a02:	e021      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003aa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	0a5b      	lsrs	r3, r3, #9
 8003a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a52:	3301      	adds	r3, #1
 8003a54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	ee07 3a90 	vmov	s15, r3
 8003a5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6c:	ee17 3a90 	vmov	r3, s15
 8003a70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
      break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a7c:	61bb      	str	r3, [r7, #24]
      break;
 8003a7e:	bf00      	nop
  }

  return sysclockfreq;
 8003a80:	69bb      	ldr	r3, [r7, #24]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	@ 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
 8003a94:	03d09000 	.word	0x03d09000
 8003a98:	003d0900 	.word	0x003d0900
 8003a9c:	017d7840 	.word	0x017d7840
 8003aa0:	46000000 	.word	0x46000000
 8003aa4:	4c742400 	.word	0x4c742400
 8003aa8:	4a742400 	.word	0x4a742400
 8003aac:	4bbebc20 	.word	0x4bbebc20

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ab6:	f7ff fe81 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490f      	ldr	r1, [pc, #60]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a07      	ldr	r2, [pc, #28]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003aec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aee:	4a07      	ldr	r2, [pc, #28]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003af4:	4b04      	ldr	r3, [pc, #16]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	58024400 	.word	0x58024400
 8003b04:	08007278 	.word	0x08007278
 8003b08:	24000004 	.word	0x24000004
 8003b0c:	24000000 	.word	0x24000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b14:	f7ff ffcc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4904      	ldr	r1, [pc, #16]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	58024400 	.word	0x58024400
 8003b38:	08007278 	.word	0x08007278

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b40:	f7ff ffb6 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4904      	ldr	r1, [pc, #16]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	08007278 	.word	0x08007278

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b0ca      	sub	sp, #296	@ 0x128
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	ea54 0305 	orrs.w	r3, r4, r5
 8003b92:	d049      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b9e:	d02f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba4:	d828      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003baa:	d01a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb0:	d822      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bba:	d007      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbe:	4bb8      	ldr	r3, [pc, #736]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	4ab7      	ldr	r2, [pc, #732]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bca:	e01a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fc8f 	bl	80054f8 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fd36 	bl	800565c <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c0a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c18:	4aa1      	ldr	r2, [pc, #644]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	ea58 0309 	orrs.w	r3, r8, r9
 8003c3c:	d047      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d82a      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c73 	.word	0x08003c73
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003ca7 	.word	0x08003ca7
 8003c60:	08003ca7 	.word	0x08003ca7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	4a8d      	ldr	r2, [pc, #564]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e01a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fc3c 	bl	80054f8 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	3328      	adds	r3, #40	@ 0x28
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fce3 	bl	800565c <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	f023 0107 	bic.w	r1, r3, #7
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	4a78      	ldr	r2, [pc, #480]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003cda:	f04f 0b00 	mov.w	fp, #0
 8003cde:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ce2:	d04c      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d030      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf4:	d829      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cf8:	d02d      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cfc:	d825      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cfe:	2b80      	cmp	r3, #128	@ 0x80
 8003d00:	d018      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d02:	2b80      	cmp	r3, #128	@ 0x80
 8003d04:	d821      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d0a:	2b40      	cmp	r3, #64	@ 0x40
 8003d0c:	d007      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d0e:	e01c      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4b63      	ldr	r3, [pc, #396]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	4a62      	ldr	r2, [pc, #392]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3308      	adds	r3, #8
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fbe6 	bl	80054f8 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d32:	e011      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	3328      	adds	r3, #40	@ 0x28
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fc8d 	bl	800565c <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d053      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003da6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003daa:	d035      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db0:	d82e      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003db2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003db6:	d031      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003db8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dbc:	d828      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc2:	d01a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc8:	d822      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	4a31      	ldr	r2, [pc, #196]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de2:	e01c      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	3308      	adds	r3, #8
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fb83 	bl	80054f8 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003df8:	e011      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	3328      	adds	r3, #40	@ 0x28
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fc2a 	bl	800565c <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e0e:	e006      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e18:	bf00      	nop
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3c:	e003      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d056      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e72:	d038      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e78:	d831      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e7e:	d034      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e84:	d82b      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e90:	d825      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e9c:	e01f      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e9e:	bf00      	nop
 8003ea0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4ba2      	ldr	r3, [pc, #648]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4aa1      	ldr	r2, [pc, #644]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e01c      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fb1c 	bl	80054f8 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e011      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fbc3 	bl	800565c <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f04:	4a8a      	ldr	r2, [pc, #552]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	e003      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d03a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	2b30      	cmp	r3, #48	@ 0x30
 8003f3c:	d01f      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f3e:	2b30      	cmp	r3, #48	@ 0x30
 8003f40:	d819      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d00c      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d815      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d111      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4b77      	ldr	r3, [pc, #476]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	4a76      	ldr	r2, [pc, #472]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f5e:	e011      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3308      	adds	r3, #8
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fac5 	bl	80054f8 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f8c:	4b68      	ldr	r3, [pc, #416]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9a:	4a65      	ldr	r2, [pc, #404]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d051      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd4:	d035      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fda:	d82e      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fe0:	d031      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003fe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fe6:	d828      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fec:	d01a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff2:	d822      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffc:	d007      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ffe:	e01c      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004000:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	4a4a      	ldr	r2, [pc, #296]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800400a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800400c:	e01c      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	3308      	adds	r3, #8
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fa6e 	bl	80054f8 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004022:	e011      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	3328      	adds	r3, #40	@ 0x28
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fb15 	bl	800565c <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004038:	e006      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004040:	e002      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004050:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405e:	4a34      	ldr	r2, [pc, #208]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6513      	str	r3, [r2, #80]	@ 0x50
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800407a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004084:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004088:	460b      	mov	r3, r1
 800408a:	4313      	orrs	r3, r2
 800408c:	d056      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004098:	d033      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800409a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800409e:	d82c      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040a4:	d02f      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040aa:	d826      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040b0:	d02b      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040b6:	d820      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040bc:	d012      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c2:	d81a      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d022      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040cc:	d115      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	3308      	adds	r3, #8
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fa0e 	bl	80054f8 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040e2:	e015      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	3328      	adds	r3, #40	@ 0x28
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 fab5 	bl	800565c <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040f8:	e00a      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800410e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800411a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004126:	4a02      	ldr	r2, [pc, #8]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6513      	str	r3, [r2, #80]	@ 0x50
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800412e:	bf00      	nop
 8004130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004152:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	d055      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004168:	d033      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800416a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800416e:	d82c      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004174:	d02f      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d826      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800417c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004180:	d02b      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004182:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004186:	d820      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418c:	d012      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004192:	d81a      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d022      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800419c:	d115      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	3308      	adds	r3, #8
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f9a6 	bl	80054f8 <RCCEx_PLL2_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041b2:	e015      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3328      	adds	r3, #40	@ 0x28
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 fa4d 	bl	800565c <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00a      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d0:	e006      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041e8:	4ba3      	ldr	r3, [pc, #652]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800421e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d037      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004232:	d00e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004238:	d816      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800423e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004242:	d111      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4b8c      	ldr	r3, [pc, #560]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	4a8b      	ldr	r2, [pc, #556]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004250:	e00f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	3308      	adds	r3, #8
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f001 f94c 	bl	80054f8 <RCCEx_PLL2_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800427a:	4b7f      	ldr	r3, [pc, #508]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800427c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004288:	4a7b      	ldr	r2, [pc, #492]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6513      	str	r3, [r2, #80]	@ 0x50
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d039      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d81c      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042c2:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	08004305 	.word	0x08004305
 80042cc:	080042d9 	.word	0x080042d9
 80042d0:	080042e7 	.word	0x080042e7
 80042d4:	08004305 	.word	0x08004305
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b67      	ldr	r3, [pc, #412]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	4a66      	ldr	r2, [pc, #408]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042e4:	e00f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	3308      	adds	r3, #8
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f902 	bl	80054f8 <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800430e:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	f023 0103 	bic.w	r1, r3, #3
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431c:	4a56      	ldr	r2, [pc, #344]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431e:	430b      	orrs	r3, r1
 8004320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004338:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004342:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	f000 809f 	beq.w	800448c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434e:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a4a      	ldr	r2, [pc, #296]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435a:	f7fd faad 	bl	80018b8 <HAL_GetTick>
 800435e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004362:	e00b      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fd faa8 	bl	80018b8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	@ 0x64
 8004372:	d903      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437a:	e005      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437c:	4b3f      	ldr	r3, [pc, #252]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ed      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	2b00      	cmp	r3, #0
 800438e:	d179      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004390:	4b39      	ldr	r3, [pc, #228]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004392:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800439c:	4053      	eors	r3, r2
 800439e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a6:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	4a30      	ldr	r2, [pc, #192]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043be:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043de:	d118      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd fa6a 	bl	80018b8 <HAL_GetTick>
 80043e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e8:	e00d      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fd fa65 	bl	80018b8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d903      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	4b1c      	ldr	r3, [pc, #112]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0eb      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004416:	2b00      	cmp	r3, #0
 8004418:	d129      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442a:	d10e      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800442c:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800443c:	091a      	lsrs	r2, r3, #4
 800443e:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004440:	4013      	ands	r3, r2
 8004442:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6113      	str	r3, [r2, #16]
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004454:	6113      	str	r3, [r2, #16]
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004458:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	e00e      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004478:	58024400 	.word	0x58024400
 800447c:	58024800 	.word	0x58024800
 8004480:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 0301 	and.w	r3, r2, #1
 8004498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f000 8089 	beq.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b4:	2b28      	cmp	r3, #40	@ 0x28
 80044b6:	d86b      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044b8:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	08004599 	.word	0x08004599
 80044c4:	08004591 	.word	0x08004591
 80044c8:	08004591 	.word	0x08004591
 80044cc:	08004591 	.word	0x08004591
 80044d0:	08004591 	.word	0x08004591
 80044d4:	08004591 	.word	0x08004591
 80044d8:	08004591 	.word	0x08004591
 80044dc:	08004591 	.word	0x08004591
 80044e0:	08004565 	.word	0x08004565
 80044e4:	08004591 	.word	0x08004591
 80044e8:	08004591 	.word	0x08004591
 80044ec:	08004591 	.word	0x08004591
 80044f0:	08004591 	.word	0x08004591
 80044f4:	08004591 	.word	0x08004591
 80044f8:	08004591 	.word	0x08004591
 80044fc:	08004591 	.word	0x08004591
 8004500:	0800457b 	.word	0x0800457b
 8004504:	08004591 	.word	0x08004591
 8004508:	08004591 	.word	0x08004591
 800450c:	08004591 	.word	0x08004591
 8004510:	08004591 	.word	0x08004591
 8004514:	08004591 	.word	0x08004591
 8004518:	08004591 	.word	0x08004591
 800451c:	08004591 	.word	0x08004591
 8004520:	08004599 	.word	0x08004599
 8004524:	08004591 	.word	0x08004591
 8004528:	08004591 	.word	0x08004591
 800452c:	08004591 	.word	0x08004591
 8004530:	08004591 	.word	0x08004591
 8004534:	08004591 	.word	0x08004591
 8004538:	08004591 	.word	0x08004591
 800453c:	08004591 	.word	0x08004591
 8004540:	08004599 	.word	0x08004599
 8004544:	08004591 	.word	0x08004591
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004591 	.word	0x08004591
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
 8004560:	08004599 	.word	0x08004599
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	3308      	adds	r3, #8
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f000 ffc3 	bl	80054f8 <RCCEx_PLL2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004578:	e00f      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3328      	adds	r3, #40	@ 0x28
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f86a 	bl	800565c <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800458e:	e004      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045a2:	4bbf      	ldr	r3, [pc, #764]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045b0:	4abb      	ldr	r2, [pc, #748]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b2:	430b      	orrs	r3, r1
 80045b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80045b6:	e003      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f002 0302 	and.w	r3, r2, #2
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045da:	460b      	mov	r3, r1
 80045dc:	4313      	orrs	r3, r2
 80045de:	d041      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d824      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	0800463d 	.word	0x0800463d
 80045f4:	08004609 	.word	0x08004609
 80045f8:	0800461f 	.word	0x0800461f
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	0800463d 	.word	0x0800463d
 8004604:	0800463d 	.word	0x0800463d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	3308      	adds	r3, #8
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f000 ff71 	bl	80054f8 <RCCEx_PLL2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800461c:	e00f      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	3328      	adds	r3, #40	@ 0x28
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f001 f818 	bl	800565c <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004632:	e004      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800463c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004646:	4b96      	ldr	r3, [pc, #600]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	f023 0107 	bic.w	r1, r3, #7
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004654:	4a92      	ldr	r2, [pc, #584]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004656:	430b      	orrs	r3, r1
 8004658:	6553      	str	r3, [r2, #84]	@ 0x54
 800465a:	e003      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 0304 	and.w	r3, r2, #4
 8004670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800467a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d044      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468c:	2b05      	cmp	r3, #5
 800468e:	d825      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004690:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046e5 	.word	0x080046e5
 800469c:	080046b1 	.word	0x080046b1
 80046a0:	080046c7 	.word	0x080046c7
 80046a4:	080046e5 	.word	0x080046e5
 80046a8:	080046e5 	.word	0x080046e5
 80046ac:	080046e5 	.word	0x080046e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3308      	adds	r3, #8
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 ff1d 	bl	80054f8 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e00f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ffc4 	bl	800565c <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10b      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ee:	4b6c      	ldr	r3, [pc, #432]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	f023 0107 	bic.w	r1, r3, #7
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fe:	4a68      	ldr	r2, [pc, #416]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6593      	str	r3, [r2, #88]	@ 0x58
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f002 0320 	and.w	r3, r2, #32
 800471a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d055      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800473a:	d033      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800473c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004740:	d82c      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004746:	d02f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d826      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800474e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004752:	d02b      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004758:	d820      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800475a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800475e:	d012      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004764:	d81a      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d022      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800476a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800476e:	d115      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	3308      	adds	r3, #8
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 febd 	bl	80054f8 <RCCEx_PLL2_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004784:	e015      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	3328      	adds	r3, #40	@ 0x28
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ff64 	bl	800565c <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800479a:	e00a      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a2:	e006      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047a4:	bf00      	nop
 80047a6:	e004      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ba:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80047d0:	e003      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4313      	orrs	r3, r2
 80047f8:	d058      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004802:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004806:	d033      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004808:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800480c:	d82c      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d02f      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004818:	d826      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800481a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800481e:	d02b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004824:	d820      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482a:	d012      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004830:	d81a      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d022      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483a:	d115      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	3308      	adds	r3, #8
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fe57 	bl	80054f8 <RCCEx_PLL2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004850:	e015      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3328      	adds	r3, #40	@ 0x28
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fefe 	bl	800565c <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004866:	e00a      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800486e:	e006      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004870:	bf00      	nop
 8004872:	e004      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004874:	bf00      	nop
 8004876:	e002      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800487c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10e      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	4a02      	ldr	r2, [pc, #8]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004898:	430b      	orrs	r3, r1
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
 800489c:	e006      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d055      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048d8:	d033      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048de:	d82c      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e4:	d02f      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ea:	d826      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048f0:	d02b      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80048f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048f6:	d820      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048fc:	d012      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80048fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004902:	d81a      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d022      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490c:	d115      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	3308      	adds	r3, #8
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fdee 	bl	80054f8 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004922:	e015      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	3328      	adds	r3, #40	@ 0x28
 800492a:	2102      	movs	r1, #2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fe95 	bl	800565c <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004938:	e00a      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004942:	bf00      	nop
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004958:	4ba1      	ldr	r3, [pc, #644]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004968:	4a9d      	ldr	r2, [pc, #628]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496a:	430b      	orrs	r3, r1
 800496c:	6593      	str	r3, [r2, #88]	@ 0x58
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f002 0308 	and.w	r3, r2, #8
 8004984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800498e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d01e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	3328      	adds	r3, #40	@ 0x28
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fe54 	bl	800565c <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049c0:	4b87      	ldr	r3, [pc, #540]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d0:	4a83      	ldr	r2, [pc, #524]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d2:	430b      	orrs	r3, r1
 80049d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f002 0310 	and.w	r3, r2, #16
 80049e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80049f0:	460b      	mov	r3, r1
 80049f2:	4313      	orrs	r3, r2
 80049f4:	d01e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	3328      	adds	r3, #40	@ 0x28
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fe25 	bl	800565c <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a1e:	4b70      	ldr	r3, [pc, #448]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d03e      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a60:	d022      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a66:	d81b      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a70:	d00b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a72:	e015      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	3308      	adds	r3, #8
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd3b 	bl	80054f8 <RCCEx_PLL2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a88:	e00f      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	3328      	adds	r3, #40	@ 0x28
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fde2 	bl	800565c <RCCEx_PLL3_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a9e:	e004      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ac2:	4a47      	ldr	r2, [pc, #284]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac8:	e003      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ade:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ae4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d03b      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004afa:	d01f      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004afc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b00:	d818      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b06:	d003      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b0c:	d007      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b0e:	e011      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b10:	4b33      	ldr	r3, [pc, #204]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	4a32      	ldr	r2, [pc, #200]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b1c:	e00f      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	3328      	adds	r3, #40	@ 0x28
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fd98 	bl	800565c <RCCEx_PLL3_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b32:	e004      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3a:	e000      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b46:	4b26      	ldr	r3, [pc, #152]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	4a22      	ldr	r2, [pc, #136]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b72:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b74:	2300      	movs	r3, #0
 8004b76:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d034      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b90:	d007      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004b92:	e011      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b94:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	2102      	movs	r1, #2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fca4 	bl	80054f8 <RCCEx_PLL2_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bcc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd6:	4a02      	ldr	r2, [pc, #8]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d00c      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	3328      	adds	r3, #40	@ 0x28
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fd23 	bl	800565c <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c30:	2300      	movs	r3, #0
 8004c32:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d038      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4a:	d018      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c50:	d811      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d014      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5c:	d80b      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c66:	d106      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c68:	4bc3      	ldr	r3, [pc, #780]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	4ac2      	ldr	r2, [pc, #776]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c7c:	e004      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c90:	4bb9      	ldr	r3, [pc, #740]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca0:	4ab5      	ldr	r2, [pc, #724]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ca6:	e003      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ccc:	4baa      	ldr	r3, [pc, #680]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cda:	4aa7      	ldr	r2, [pc, #668]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cee:	2300      	movs	r3, #0
 8004cf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cfc:	4b9e      	ldr	r3, [pc, #632]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d0c:	4a9a      	ldr	r2, [pc, #616]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d20:	2300      	movs	r3, #0
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d2e:	4b92      	ldr	r3, [pc, #584]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d50:	2300      	movs	r3, #0
 8004d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d5e:	4b86      	ldr	r3, [pc, #536]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	4a85      	ldr	r2, [pc, #532]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	4b83      	ldr	r3, [pc, #524]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6c:	6919      	ldr	r1, [r3, #16]
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d76:	4a80      	ldr	r2, [pc, #512]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d98:	4b77      	ldr	r3, [pc, #476]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	4a74      	ldr	r2, [pc, #464]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dcc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dd8:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	2100      	movs	r1, #0
 8004de8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3308      	adds	r3, #8
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb78 	bl	80054f8 <RCCEx_PLL2_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	2100      	movs	r1, #0
 8004e28:	6239      	str	r1, [r7, #32]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d011      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3e:	3308      	adds	r3, #8
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb58 	bl	80054f8 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	2100      	movs	r1, #0
 8004e68:	61b9      	str	r1, [r7, #24]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d011      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	3308      	adds	r3, #8
 8004e80:	2102      	movs	r1, #2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb38 	bl	80054f8 <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6139      	str	r1, [r7, #16]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d011      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	3328      	adds	r3, #40	@ 0x28
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fbca 	bl	800565c <RCCEx_PLL3_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d011      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fbaa 	bl	800565c <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	2100      	movs	r1, #0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d011      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3e:	3328      	adds	r3, #40	@ 0x28
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fb8a 	bl	800565c <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004f5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004f72:	46bd      	mov	sp, r7
 8004f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f78:	58024400 	.word	0x58024400

08004f7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f80:	f7fe fd96 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4904      	ldr	r1, [pc, #16]	@ (8004fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	08007278 	.word	0x08007278

08004fa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	@ 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb0:	4ba1      	ldr	r3, [pc, #644]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fba:	4b9f      	ldr	r3, [pc, #636]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	0b1b      	lsrs	r3, r3, #12
 8004fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fc6:	4b9c      	ldr	r3, [pc, #624]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fd2:	4b99      	ldr	r3, [pc, #612]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	08db      	lsrs	r3, r3, #3
 8004fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8111 	beq.w	8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f000 8083 	beq.w	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b02      	cmp	r3, #2
 8005002:	f200 80a1 	bhi.w	8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d056      	beq.n	80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005012:	e099      	b.n	8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005014:	4b88      	ldr	r3, [pc, #544]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02d      	beq.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005020:	4b85      	ldr	r3, [pc, #532]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	4a84      	ldr	r2, [pc, #528]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
 8005030:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	ee07 3a90 	vmov	s15, r3
 8005038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504a:	4b7b      	ldr	r3, [pc, #492]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a03 	vldr	s12, [r7, #12]
 800505e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800507a:	e087      	b.n	800518c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b6a      	ldr	r3, [pc, #424]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050be:	e065      	b.n	800518c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b59      	ldr	r3, [pc, #356]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005102:	e043      	b.n	800518c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b48      	ldr	r3, [pc, #288]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a03 	vldr	s12, [r7, #12]
 800512a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005146:	e021      	b.n	800518c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b37      	ldr	r3, [pc, #220]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a03 	vldr	s12, [r7, #12]
 800516e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800518c:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	0a5b      	lsrs	r3, r3, #9
 8005192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b2:	ee17 2a90 	vmov	r2, s15
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e0:	ee17 2a90 	vmov	r2, s15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051e8:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	0e1b      	lsrs	r3, r3, #24
 80051ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005202:	edd7 6a07 	vldr	s13, [r7, #28]
 8005206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520e:	ee17 2a90 	vmov	r2, s15
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005216:	e008      	b.n	800522a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	3724      	adds	r7, #36	@ 0x24
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	03d09000 	.word	0x03d09000
 8005240:	46000000 	.word	0x46000000
 8005244:	4c742400 	.word	0x4c742400
 8005248:	4a742400 	.word	0x4a742400
 800524c:	4bbebc20 	.word	0x4bbebc20

08005250 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	@ 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005258:	4ba1      	ldr	r3, [pc, #644]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005262:	4b9f      	ldr	r3, [pc, #636]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	0d1b      	lsrs	r3, r3, #20
 8005268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800526c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800526e:	4b9c      	ldr	r3, [pc, #624]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800527a:	4b99      	ldr	r3, [pc, #612]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8111 	beq.w	80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	f000 8083 	beq.w	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	f200 80a1 	bhi.w	80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d056      	beq.n	8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052ba:	e099      	b.n	80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052bc:	4b88      	ldr	r3, [pc, #544]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02d      	beq.n	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c8:	4b85      	ldr	r3, [pc, #532]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	4a84      	ldr	r2, [pc, #528]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b7b      	ldr	r3, [pc, #492]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a03 	vldr	s12, [r7, #12]
 8005306:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005322:	e087      	b.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b6a      	ldr	r3, [pc, #424]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a03 	vldr	s12, [r7, #12]
 800534a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005366:	e065      	b.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	4b59      	ldr	r3, [pc, #356]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538a:	ed97 6a03 	vldr	s12, [r7, #12]
 800538e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800539e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053aa:	e043      	b.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b48      	ldr	r3, [pc, #288]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ee:	e021      	b.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a03 	vldr	s12, [r7, #12]
 8005416:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005432:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005434:	4b2a      	ldr	r3, [pc, #168]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	0a5b      	lsrs	r3, r3, #9
 800543a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800544a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800544e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545a:	ee17 2a90 	vmov	r2, s15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005462:	4b1f      	ldr	r3, [pc, #124]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005474:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800547c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005488:	ee17 2a90 	vmov	r2, s15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005490:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	0e1b      	lsrs	r3, r3, #24
 8005496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b6:	ee17 2a90 	vmov	r2, s15
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054be:	e008      	b.n	80054d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	609a      	str	r2, [r3, #8]
}
 80054d2:	bf00      	nop
 80054d4:	3724      	adds	r7, #36	@ 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
 80054e4:	03d09000 	.word	0x03d09000
 80054e8:	46000000 	.word	0x46000000
 80054ec:	4c742400 	.word	0x4c742400
 80054f0:	4a742400 	.word	0x4a742400
 80054f4:	4bbebc20 	.word	0x4bbebc20

080054f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005506:	4b53      	ldr	r3, [pc, #332]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d101      	bne.n	8005516 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e099      	b.n	800564a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005516:	4b4f      	ldr	r3, [pc, #316]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a4e      	ldr	r2, [pc, #312]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800551c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005522:	f7fc f9c9 	bl	80018b8 <HAL_GetTick>
 8005526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005528:	e008      	b.n	800553c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800552a:	f7fc f9c5 	bl	80018b8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e086      	b.n	800564a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800553c:	4b45      	ldr	r3, [pc, #276]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005548:	4b42      	ldr	r3, [pc, #264]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	031b      	lsls	r3, r3, #12
 8005556:	493f      	ldr	r1, [pc, #252]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	628b      	str	r3, [r1, #40]	@ 0x28
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	3b01      	subs	r3, #1
 8005562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	b29b      	uxth	r3, r3
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	3b01      	subs	r3, #1
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	3b01      	subs	r3, #1
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800558c:	4931      	ldr	r1, [pc, #196]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005592:	4b30      	ldr	r3, [pc, #192]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	492d      	ldr	r1, [pc, #180]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	f023 0220 	bic.w	r2, r3, #32
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4928      	ldr	r1, [pc, #160]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055b6:	4b27      	ldr	r3, [pc, #156]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	4a26      	ldr	r2, [pc, #152]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	f023 0310 	bic.w	r3, r3, #16
 80055c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055c2:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <RCCEx_PLL2_Config+0x160>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	69d2      	ldr	r2, [r2, #28]
 80055ce:	00d2      	lsls	r2, r2, #3
 80055d0:	4920      	ldr	r1, [pc, #128]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	f043 0310 	orr.w	r3, r3, #16
 80055e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a19      	ldr	r2, [pc, #100]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055f4:	e00f      	b.n	8005616 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055fc:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	4a14      	ldr	r2, [pc, #80]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005608:	e005      	b.n	8005616 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800560a:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a0e      	ldr	r2, [pc, #56]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005622:	f7fc f949 	bl	80018b8 <HAL_GetTick>
 8005626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005628:	e008      	b.n	800563c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800562a:	f7fc f945 	bl	80018b8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e006      	b.n	800564a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <RCCEx_PLL2_Config+0x15c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
 8005658:	ffff0007 	.word	0xffff0007

0800565c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800566a:	4b53      	ldr	r3, [pc, #332]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b03      	cmp	r3, #3
 8005674:	d101      	bne.n	800567a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e099      	b.n	80057ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800567a:	4b4f      	ldr	r3, [pc, #316]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a4e      	ldr	r2, [pc, #312]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005686:	f7fc f917 	bl	80018b8 <HAL_GetTick>
 800568a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800568c:	e008      	b.n	80056a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800568e:	f7fc f913 	bl	80018b8 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e086      	b.n	80057ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a0:	4b45      	ldr	r3, [pc, #276]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056ac:	4b42      	ldr	r3, [pc, #264]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	051b      	lsls	r3, r3, #20
 80056ba:	493f      	ldr	r1, [pc, #252]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	628b      	str	r3, [r1, #40]	@ 0x28
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	025b      	lsls	r3, r3, #9
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	3b01      	subs	r3, #1
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056f0:	4931      	ldr	r1, [pc, #196]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056f6:	4b30      	ldr	r3, [pc, #192]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	492d      	ldr	r1, [pc, #180]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005708:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	4928      	ldr	r1, [pc, #160]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800571a:	4b27      	ldr	r3, [pc, #156]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4a26      	ldr	r2, [pc, #152]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005726:	4b24      	ldr	r3, [pc, #144]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <RCCEx_PLL3_Config+0x160>)
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	69d2      	ldr	r2, [r2, #28]
 8005732:	00d2      	lsls	r2, r2, #3
 8005734:	4920      	ldr	r1, [pc, #128]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800573a:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005744:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800574c:	4b1a      	ldr	r3, [pc, #104]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	4a19      	ldr	r2, [pc, #100]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005752:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005758:	e00f      	b.n	800577a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d106      	bne.n	800576e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	4a14      	ldr	r2, [pc, #80]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800576a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800576c:	e005      	b.n	800577a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800577a:	4b0f      	ldr	r3, [pc, #60]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a0e      	ldr	r2, [pc, #56]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005786:	f7fc f897 	bl	80018b8 <HAL_GetTick>
 800578a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800578c:	e008      	b.n	80057a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800578e:	f7fc f893 	bl	80018b8 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e006      	b.n	80057ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <RCCEx_PLL3_Config+0x15c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	58024400 	.word	0x58024400
 80057bc:	ffff0007 	.word	0xffff0007

080057c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e10f      	b.n	80059f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a87      	ldr	r2, [pc, #540]	@ (80059fc <HAL_SPI_Init+0x23c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <HAL_SPI_Init+0x42>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a86      	ldr	r2, [pc, #536]	@ (8005a00 <HAL_SPI_Init+0x240>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00a      	beq.n	8005802 <HAL_SPI_Init+0x42>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a84      	ldr	r2, [pc, #528]	@ (8005a04 <HAL_SPI_Init+0x244>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d005      	beq.n	8005802 <HAL_SPI_Init+0x42>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d901      	bls.n	8005802 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0f7      	b.n	80059f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f900 	bl	8005a08 <SPI_GetPacketSize>
 8005808:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a7b      	ldr	r2, [pc, #492]	@ (80059fc <HAL_SPI_Init+0x23c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00c      	beq.n	800582e <HAL_SPI_Init+0x6e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a79      	ldr	r2, [pc, #484]	@ (8005a00 <HAL_SPI_Init+0x240>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <HAL_SPI_Init+0x6e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a78      	ldr	r2, [pc, #480]	@ (8005a04 <HAL_SPI_Init+0x244>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d002      	beq.n	800582e <HAL_SPI_Init+0x6e>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d811      	bhi.n	8005852 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005832:	4a72      	ldr	r2, [pc, #456]	@ (80059fc <HAL_SPI_Init+0x23c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a70      	ldr	r2, [pc, #448]	@ (8005a00 <HAL_SPI_Init+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_SPI_Init+0x8c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a6f      	ldr	r2, [pc, #444]	@ (8005a04 <HAL_SPI_Init+0x244>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d104      	bne.n	8005856 <HAL_SPI_Init+0x96>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b10      	cmp	r3, #16
 8005850:	d901      	bls.n	8005856 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0cd      	b.n	80059f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb fd4a 	bl	8001304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005892:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800589c:	d119      	bne.n	80058d2 <HAL_SPI_Init+0x112>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a6:	d103      	bne.n	80058b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10c      	bne.n	80058d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c0:	d107      	bne.n	80058d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <HAL_SPI_Init+0x13e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d90b      	bls.n	80058fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e007      	b.n	800590e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	431a      	orrs	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	ea42 0103 	orr.w	r1, r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800596e:	ea42 0103 	orr.w	r1, r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d113      	bne.n	80059ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005998:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40013000 	.word	0x40013000
 8005a00:	40003800 	.word	0x40003800
 8005a04:	40003c00 	.word	0x40003c00

08005a08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3307      	adds	r3, #7
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e042      	b.n	8005ad6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fcdc 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	@ 0x24
 8005a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fd91 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f826 	bl	8005ae0 <UART_SetConfig>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e01b      	b.n	8005ad6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005abc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fe10 	bl	80066f4 <UART_CheckIdleState>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae4:	b092      	sub	sp, #72	@ 0x48
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e08 <UART_SetConfig+0x328>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4ab3      	ldr	r2, [pc, #716]	@ (8005e0c <UART_SetConfig+0x32c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	4baf      	ldr	r3, [pc, #700]	@ (8005e10 <UART_SetConfig+0x330>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	f023 010f 	bic.w	r1, r3, #15
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4aa6      	ldr	r2, [pc, #664]	@ (8005e14 <UART_SetConfig+0x334>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d177      	bne.n	8005c70 <UART_SetConfig+0x190>
 8005b80:	4ba5      	ldr	r3, [pc, #660]	@ (8005e18 <UART_SetConfig+0x338>)
 8005b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b88:	2b28      	cmp	r3, #40	@ 0x28
 8005b8a:	d86d      	bhi.n	8005c68 <UART_SetConfig+0x188>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0xb4>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005c39 	.word	0x08005c39
 8005b98:	08005c69 	.word	0x08005c69
 8005b9c:	08005c69 	.word	0x08005c69
 8005ba0:	08005c69 	.word	0x08005c69
 8005ba4:	08005c69 	.word	0x08005c69
 8005ba8:	08005c69 	.word	0x08005c69
 8005bac:	08005c69 	.word	0x08005c69
 8005bb0:	08005c69 	.word	0x08005c69
 8005bb4:	08005c41 	.word	0x08005c41
 8005bb8:	08005c69 	.word	0x08005c69
 8005bbc:	08005c69 	.word	0x08005c69
 8005bc0:	08005c69 	.word	0x08005c69
 8005bc4:	08005c69 	.word	0x08005c69
 8005bc8:	08005c69 	.word	0x08005c69
 8005bcc:	08005c69 	.word	0x08005c69
 8005bd0:	08005c69 	.word	0x08005c69
 8005bd4:	08005c49 	.word	0x08005c49
 8005bd8:	08005c69 	.word	0x08005c69
 8005bdc:	08005c69 	.word	0x08005c69
 8005be0:	08005c69 	.word	0x08005c69
 8005be4:	08005c69 	.word	0x08005c69
 8005be8:	08005c69 	.word	0x08005c69
 8005bec:	08005c69 	.word	0x08005c69
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c51 	.word	0x08005c51
 8005bf8:	08005c69 	.word	0x08005c69
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	08005c69 	.word	0x08005c69
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c59 	.word	0x08005c59
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c69 	.word	0x08005c69
 8005c24:	08005c69 	.word	0x08005c69
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e222      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c40:	2304      	movs	r3, #4
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e21e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e21a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e216      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e212      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c60:	2340      	movs	r3, #64	@ 0x40
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e20e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e20a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a69      	ldr	r2, [pc, #420]	@ (8005e1c <UART_SetConfig+0x33c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d130      	bne.n	8005cdc <UART_SetConfig+0x1fc>
 8005c7a:	4b67      	ldr	r3, [pc, #412]	@ (8005e18 <UART_SetConfig+0x338>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d826      	bhi.n	8005cd4 <UART_SetConfig+0x1f4>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <UART_SetConfig+0x1ac>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005ca5 	.word	0x08005ca5
 8005c90:	08005cad 	.word	0x08005cad
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e1ec      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e1e8      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e1e4      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e1e0      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e1dc      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005ccc:	2340      	movs	r3, #64	@ 0x40
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e1d8      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e1d4      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8005e20 <UART_SetConfig+0x340>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d130      	bne.n	8005d48 <UART_SetConfig+0x268>
 8005ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8005e18 <UART_SetConfig+0x338>)
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d826      	bhi.n	8005d40 <UART_SetConfig+0x260>
 8005cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <UART_SetConfig+0x218>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d21 	.word	0x08005d21
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e1b6      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e1b2      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e1ae      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e1aa      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e1a6      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d38:	2340      	movs	r3, #64	@ 0x40
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e1a2      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e19e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <UART_SetConfig+0x344>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d130      	bne.n	8005db4 <UART_SetConfig+0x2d4>
 8005d52:	4b31      	ldr	r3, [pc, #196]	@ (8005e18 <UART_SetConfig+0x338>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d826      	bhi.n	8005dac <UART_SetConfig+0x2cc>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0x284>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e180      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e17c      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e178      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e174      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005d9c:	2320      	movs	r3, #32
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e170      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005da4:	2340      	movs	r3, #64	@ 0x40
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e16c      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e168      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <UART_SetConfig+0x348>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d142      	bne.n	8005e44 <UART_SetConfig+0x364>
 8005dbe:	4b16      	ldr	r3, [pc, #88]	@ (8005e18 <UART_SetConfig+0x338>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d838      	bhi.n	8005e3c <UART_SetConfig+0x35c>
 8005dca:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <UART_SetConfig+0x2f0>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005de9 	.word	0x08005de9
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	08005df9 	.word	0x08005df9
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e14a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e146      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e142      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e13e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005e08:	cfff69f3 	.word	0xcfff69f3
 8005e0c:	58000c00 	.word	0x58000c00
 8005e10:	11fff4ff 	.word	0x11fff4ff
 8005e14:	40011000 	.word	0x40011000
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	40004400 	.word	0x40004400
 8005e20:	40004800 	.word	0x40004800
 8005e24:	40004c00 	.word	0x40004c00
 8005e28:	40005000 	.word	0x40005000
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e128      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005e34:	2340      	movs	r3, #64	@ 0x40
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e124      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e120      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4acb      	ldr	r2, [pc, #812]	@ (8006178 <UART_SetConfig+0x698>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d176      	bne.n	8005f3c <UART_SetConfig+0x45c>
 8005e4e:	4bcb      	ldr	r3, [pc, #812]	@ (800617c <UART_SetConfig+0x69c>)
 8005e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e56:	2b28      	cmp	r3, #40	@ 0x28
 8005e58:	d86c      	bhi.n	8005f34 <UART_SetConfig+0x454>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x380>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005f05 	.word	0x08005f05
 8005e64:	08005f35 	.word	0x08005f35
 8005e68:	08005f35 	.word	0x08005f35
 8005e6c:	08005f35 	.word	0x08005f35
 8005e70:	08005f35 	.word	0x08005f35
 8005e74:	08005f35 	.word	0x08005f35
 8005e78:	08005f35 	.word	0x08005f35
 8005e7c:	08005f35 	.word	0x08005f35
 8005e80:	08005f0d 	.word	0x08005f0d
 8005e84:	08005f35 	.word	0x08005f35
 8005e88:	08005f35 	.word	0x08005f35
 8005e8c:	08005f35 	.word	0x08005f35
 8005e90:	08005f35 	.word	0x08005f35
 8005e94:	08005f35 	.word	0x08005f35
 8005e98:	08005f35 	.word	0x08005f35
 8005e9c:	08005f35 	.word	0x08005f35
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f35 	.word	0x08005f35
 8005ea8:	08005f35 	.word	0x08005f35
 8005eac:	08005f35 	.word	0x08005f35
 8005eb0:	08005f35 	.word	0x08005f35
 8005eb4:	08005f35 	.word	0x08005f35
 8005eb8:	08005f35 	.word	0x08005f35
 8005ebc:	08005f35 	.word	0x08005f35
 8005ec0:	08005f1d 	.word	0x08005f1d
 8005ec4:	08005f35 	.word	0x08005f35
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005f35 	.word	0x08005f35
 8005ed8:	08005f35 	.word	0x08005f35
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f35 	.word	0x08005f35
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e0bc      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e0b8      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e0b4      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e0b0      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f24:	2320      	movs	r3, #32
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e0ac      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f2c:	2340      	movs	r3, #64	@ 0x40
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e0a8      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e0a4      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a8f      	ldr	r2, [pc, #572]	@ (8006180 <UART_SetConfig+0x6a0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d130      	bne.n	8005fa8 <UART_SetConfig+0x4c8>
 8005f46:	4b8d      	ldr	r3, [pc, #564]	@ (800617c <UART_SetConfig+0x69c>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d826      	bhi.n	8005fa0 <UART_SetConfig+0x4c0>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x478>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f71 	.word	0x08005f71
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f81 	.word	0x08005f81
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e086      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e082      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e07e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e07a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f90:	2320      	movs	r3, #32
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e076      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005f98:	2340      	movs	r3, #64	@ 0x40
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e072      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e06e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a75      	ldr	r2, [pc, #468]	@ (8006184 <UART_SetConfig+0x6a4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d130      	bne.n	8006014 <UART_SetConfig+0x534>
 8005fb2:	4b72      	ldr	r3, [pc, #456]	@ (800617c <UART_SetConfig+0x69c>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d826      	bhi.n	800600c <UART_SetConfig+0x52c>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <UART_SetConfig+0x4e4>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e050      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e04c      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e048      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e044      	b.n	8006086 <UART_SetConfig+0x5a6>
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e040      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006004:	2340      	movs	r3, #64	@ 0x40
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e03c      	b.n	8006086 <UART_SetConfig+0x5a6>
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e038      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5b      	ldr	r2, [pc, #364]	@ (8006188 <UART_SetConfig+0x6a8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d130      	bne.n	8006080 <UART_SetConfig+0x5a0>
 800601e:	4b57      	ldr	r3, [pc, #348]	@ (800617c <UART_SetConfig+0x69c>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b05      	cmp	r3, #5
 8006028:	d826      	bhi.n	8006078 <UART_SetConfig+0x598>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0x550>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006049 	.word	0x08006049
 8006034:	08006051 	.word	0x08006051
 8006038:	08006059 	.word	0x08006059
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	2302      	movs	r3, #2
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e01a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e016      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e012      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e00e      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e00a      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006070:	2340      	movs	r3, #64	@ 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e006      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006078:	2380      	movs	r3, #128	@ 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e002      	b.n	8006086 <UART_SetConfig+0x5a6>
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	@ (8006188 <UART_SetConfig+0x6a8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	f040 80f8 	bne.w	8006282 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006092:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006096:	2b20      	cmp	r3, #32
 8006098:	dc46      	bgt.n	8006128 <UART_SetConfig+0x648>
 800609a:	2b02      	cmp	r3, #2
 800609c:	f2c0 8082 	blt.w	80061a4 <UART_SetConfig+0x6c4>
 80060a0:	3b02      	subs	r3, #2
 80060a2:	2b1e      	cmp	r3, #30
 80060a4:	d87e      	bhi.n	80061a4 <UART_SetConfig+0x6c4>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x5cc>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	0800612f 	.word	0x0800612f
 80060b0:	080061a5 	.word	0x080061a5
 80060b4:	08006137 	.word	0x08006137
 80060b8:	080061a5 	.word	0x080061a5
 80060bc:	080061a5 	.word	0x080061a5
 80060c0:	080061a5 	.word	0x080061a5
 80060c4:	08006147 	.word	0x08006147
 80060c8:	080061a5 	.word	0x080061a5
 80060cc:	080061a5 	.word	0x080061a5
 80060d0:	080061a5 	.word	0x080061a5
 80060d4:	080061a5 	.word	0x080061a5
 80060d8:	080061a5 	.word	0x080061a5
 80060dc:	080061a5 	.word	0x080061a5
 80060e0:	080061a5 	.word	0x080061a5
 80060e4:	08006157 	.word	0x08006157
 80060e8:	080061a5 	.word	0x080061a5
 80060ec:	080061a5 	.word	0x080061a5
 80060f0:	080061a5 	.word	0x080061a5
 80060f4:	080061a5 	.word	0x080061a5
 80060f8:	080061a5 	.word	0x080061a5
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	080061a5 	.word	0x080061a5
 8006104:	080061a5 	.word	0x080061a5
 8006108:	080061a5 	.word	0x080061a5
 800610c:	080061a5 	.word	0x080061a5
 8006110:	080061a5 	.word	0x080061a5
 8006114:	080061a5 	.word	0x080061a5
 8006118:	080061a5 	.word	0x080061a5
 800611c:	080061a5 	.word	0x080061a5
 8006120:	080061a5 	.word	0x080061a5
 8006124:	08006197 	.word	0x08006197
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d037      	beq.n	800619c <UART_SetConfig+0x6bc>
 800612c:	e03a      	b.n	80061a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800612e:	f7fe ff25 	bl	8004f7c <HAL_RCCEx_GetD3PCLK1Freq>
 8006132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006134:	e03c      	b.n	80061b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff34 	bl	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006144:	e034      	b.n	80061b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006146:	f107 0318 	add.w	r3, r7, #24
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f880 	bl	8005250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006154:	e02c      	b.n	80061b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006156:	4b09      	ldr	r3, [pc, #36]	@ (800617c <UART_SetConfig+0x69c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006162:	4b06      	ldr	r3, [pc, #24]	@ (800617c <UART_SetConfig+0x69c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	4a07      	ldr	r2, [pc, #28]	@ (800618c <UART_SetConfig+0x6ac>)
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006174:	e01c      	b.n	80061b0 <UART_SetConfig+0x6d0>
 8006176:	bf00      	nop
 8006178:	40011400 	.word	0x40011400
 800617c:	58024400 	.word	0x58024400
 8006180:	40007800 	.word	0x40007800
 8006184:	40007c00 	.word	0x40007c00
 8006188:	58000c00 	.word	0x58000c00
 800618c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006190:	4b9d      	ldr	r3, [pc, #628]	@ (8006408 <UART_SetConfig+0x928>)
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006194:	e00c      	b.n	80061b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006196:	4b9d      	ldr	r3, [pc, #628]	@ (800640c <UART_SetConfig+0x92c>)
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619a:	e009      	b.n	80061b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a2:	e005      	b.n	80061b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 81de 	beq.w	8006574 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	4a94      	ldr	r2, [pc, #592]	@ (8006410 <UART_SetConfig+0x930>)
 80061be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d8:	429a      	cmp	r2, r3
 80061da:	d305      	bcc.n	80061e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d903      	bls.n	80061f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061ee:	e1c1      	b.n	8006574 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f2:	2200      	movs	r2, #0
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	4a84      	ldr	r2, [pc, #528]	@ (8006410 <UART_SetConfig+0x930>)
 80061fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006202:	b29b      	uxth	r3, r3
 8006204:	2200      	movs	r2, #0
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006212:	f7fa f861 	bl	80002d8 <__aeabi_uldivmod>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	020b      	lsls	r3, r1, #8
 8006228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800622c:	0202      	lsls	r2, r0, #8
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	6849      	ldr	r1, [r1, #4]
 8006232:	0849      	lsrs	r1, r1, #1
 8006234:	2000      	movs	r0, #0
 8006236:	460c      	mov	r4, r1
 8006238:	4605      	mov	r5, r0
 800623a:	eb12 0804 	adds.w	r8, r2, r4
 800623e:	eb43 0905 	adc.w	r9, r3, r5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	469a      	mov	sl, r3
 800624a:	4693      	mov	fp, r2
 800624c:	4652      	mov	r2, sl
 800624e:	465b      	mov	r3, fp
 8006250:	4640      	mov	r0, r8
 8006252:	4649      	mov	r1, r9
 8006254:	f7fa f840 	bl	80002d8 <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4613      	mov	r3, r2
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006266:	d308      	bcc.n	800627a <UART_SetConfig+0x79a>
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626e:	d204      	bcs.n	800627a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006276:	60da      	str	r2, [r3, #12]
 8006278:	e17c      	b.n	8006574 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006280:	e178      	b.n	8006574 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800628a:	f040 80c5 	bne.w	8006418 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800628e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006292:	2b20      	cmp	r3, #32
 8006294:	dc48      	bgt.n	8006328 <UART_SetConfig+0x848>
 8006296:	2b00      	cmp	r3, #0
 8006298:	db7b      	blt.n	8006392 <UART_SetConfig+0x8b2>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d879      	bhi.n	8006392 <UART_SetConfig+0x8b2>
 800629e:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <UART_SetConfig+0x7c4>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	08006337 	.word	0x08006337
 80062ac:	08006393 	.word	0x08006393
 80062b0:	08006393 	.word	0x08006393
 80062b4:	0800633f 	.word	0x0800633f
 80062b8:	08006393 	.word	0x08006393
 80062bc:	08006393 	.word	0x08006393
 80062c0:	08006393 	.word	0x08006393
 80062c4:	0800634f 	.word	0x0800634f
 80062c8:	08006393 	.word	0x08006393
 80062cc:	08006393 	.word	0x08006393
 80062d0:	08006393 	.word	0x08006393
 80062d4:	08006393 	.word	0x08006393
 80062d8:	08006393 	.word	0x08006393
 80062dc:	08006393 	.word	0x08006393
 80062e0:	08006393 	.word	0x08006393
 80062e4:	0800635f 	.word	0x0800635f
 80062e8:	08006393 	.word	0x08006393
 80062ec:	08006393 	.word	0x08006393
 80062f0:	08006393 	.word	0x08006393
 80062f4:	08006393 	.word	0x08006393
 80062f8:	08006393 	.word	0x08006393
 80062fc:	08006393 	.word	0x08006393
 8006300:	08006393 	.word	0x08006393
 8006304:	08006393 	.word	0x08006393
 8006308:	08006393 	.word	0x08006393
 800630c:	08006393 	.word	0x08006393
 8006310:	08006393 	.word	0x08006393
 8006314:	08006393 	.word	0x08006393
 8006318:	08006393 	.word	0x08006393
 800631c:	08006393 	.word	0x08006393
 8006320:	08006393 	.word	0x08006393
 8006324:	08006385 	.word	0x08006385
 8006328:	2b40      	cmp	r3, #64	@ 0x40
 800632a:	d02e      	beq.n	800638a <UART_SetConfig+0x8aa>
 800632c:	e031      	b.n	8006392 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632e:	f7fd fbef 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8006332:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006334:	e033      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006336:	f7fd fc01 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 800633a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800633c:	e02f      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800633e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe fe30 	bl	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634c:	e027      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634e:	f107 0318 	add.w	r3, r7, #24
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe ff7c 	bl	8005250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635c:	e01f      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635e:	4b2d      	ldr	r3, [pc, #180]	@ (8006414 <UART_SetConfig+0x934>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800636a:	4b2a      	ldr	r3, [pc, #168]	@ (8006414 <UART_SetConfig+0x934>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	08db      	lsrs	r3, r3, #3
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	4a24      	ldr	r2, [pc, #144]	@ (8006408 <UART_SetConfig+0x928>)
 8006376:	fa22 f303 	lsr.w	r3, r2, r3
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800637c:	e00f      	b.n	800639e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800637e:	4b22      	ldr	r3, [pc, #136]	@ (8006408 <UART_SetConfig+0x928>)
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	e00c      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006384:	4b21      	ldr	r3, [pc, #132]	@ (800640c <UART_SetConfig+0x92c>)
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006388:	e009      	b.n	800639e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006390:	e005      	b.n	800639e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800639c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80e7 	beq.w	8006574 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <UART_SetConfig+0x930>)
 80063ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b8:	005a      	lsls	r2, r3, #1
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	441a      	add	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d916      	bls.n	8006400 <UART_SetConfig+0x920>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d212      	bcs.n	8006400 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f023 030f 	bic.w	r3, r3, #15
 80063e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063f2:	4313      	orrs	r3, r2
 80063f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	e0b9      	b.n	8006574 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006406:	e0b5      	b.n	8006574 <UART_SetConfig+0xa94>
 8006408:	03d09000 	.word	0x03d09000
 800640c:	003d0900 	.word	0x003d0900
 8006410:	08007288 	.word	0x08007288
 8006414:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006418:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800641c:	2b20      	cmp	r3, #32
 800641e:	dc49      	bgt.n	80064b4 <UART_SetConfig+0x9d4>
 8006420:	2b00      	cmp	r3, #0
 8006422:	db7c      	blt.n	800651e <UART_SetConfig+0xa3e>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d87a      	bhi.n	800651e <UART_SetConfig+0xa3e>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <UART_SetConfig+0x950>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	080064bb 	.word	0x080064bb
 8006434:	080064c3 	.word	0x080064c3
 8006438:	0800651f 	.word	0x0800651f
 800643c:	0800651f 	.word	0x0800651f
 8006440:	080064cb 	.word	0x080064cb
 8006444:	0800651f 	.word	0x0800651f
 8006448:	0800651f 	.word	0x0800651f
 800644c:	0800651f 	.word	0x0800651f
 8006450:	080064db 	.word	0x080064db
 8006454:	0800651f 	.word	0x0800651f
 8006458:	0800651f 	.word	0x0800651f
 800645c:	0800651f 	.word	0x0800651f
 8006460:	0800651f 	.word	0x0800651f
 8006464:	0800651f 	.word	0x0800651f
 8006468:	0800651f 	.word	0x0800651f
 800646c:	0800651f 	.word	0x0800651f
 8006470:	080064eb 	.word	0x080064eb
 8006474:	0800651f 	.word	0x0800651f
 8006478:	0800651f 	.word	0x0800651f
 800647c:	0800651f 	.word	0x0800651f
 8006480:	0800651f 	.word	0x0800651f
 8006484:	0800651f 	.word	0x0800651f
 8006488:	0800651f 	.word	0x0800651f
 800648c:	0800651f 	.word	0x0800651f
 8006490:	0800651f 	.word	0x0800651f
 8006494:	0800651f 	.word	0x0800651f
 8006498:	0800651f 	.word	0x0800651f
 800649c:	0800651f 	.word	0x0800651f
 80064a0:	0800651f 	.word	0x0800651f
 80064a4:	0800651f 	.word	0x0800651f
 80064a8:	0800651f 	.word	0x0800651f
 80064ac:	0800651f 	.word	0x0800651f
 80064b0:	08006511 	.word	0x08006511
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d02e      	beq.n	8006516 <UART_SetConfig+0xa36>
 80064b8:	e031      	b.n	800651e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ba:	f7fd fb29 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80064be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064c0:	e033      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c2:	f7fd fb3b 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 80064c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064c8:	e02f      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd6a 	bl	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d8:	e027      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe feb6 	bl	8005250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e8:	e01f      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ea:	4b2d      	ldr	r3, [pc, #180]	@ (80065a0 <UART_SetConfig+0xac0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064f6:	4b2a      	ldr	r3, [pc, #168]	@ (80065a0 <UART_SetConfig+0xac0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	4a28      	ldr	r2, [pc, #160]	@ (80065a4 <UART_SetConfig+0xac4>)
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006508:	e00f      	b.n	800652a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800650a:	4b26      	ldr	r3, [pc, #152]	@ (80065a4 <UART_SetConfig+0xac4>)
 800650c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650e:	e00c      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006510:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <UART_SetConfig+0xac8>)
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	e009      	b.n	800652a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651c:	e005      	b.n	800652a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006528:	bf00      	nop
    }

    if (pclk != 0U)
 800652a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d021      	beq.n	8006574 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	4a1d      	ldr	r2, [pc, #116]	@ (80065ac <UART_SetConfig+0xacc>)
 8006536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800653a:	461a      	mov	r2, r3
 800653c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	441a      	add	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006552:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d909      	bls.n	800656e <UART_SetConfig+0xa8e>
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006560:	d205      	bcs.n	800656e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	b29a      	uxth	r2, r3
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	e002      	b.n	8006574 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2201      	movs	r2, #1
 8006580:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006590:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006594:	4618      	mov	r0, r3
 8006596:	3748      	adds	r7, #72	@ 0x48
 8006598:	46bd      	mov	sp, r7
 800659a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659e:	bf00      	nop
 80065a0:	58024400 	.word	0x58024400
 80065a4:	03d09000 	.word	0x03d09000
 80065a8:	003d0900 	.word	0x003d0900
 80065ac:	08007288 	.word	0x08007288

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b098      	sub	sp, #96	@ 0x60
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fb f8d8 	bl	80018b8 <HAL_GetTick>
 8006708:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d12f      	bne.n	8006778 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f88e 	bl	8006848 <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d022      	beq.n	8006778 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006746:	653b      	str	r3, [r7, #80]	@ 0x50
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006750:	647b      	str	r3, [r7, #68]	@ 0x44
 8006752:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800675e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e6      	bne.n	8006732 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e063      	b.n	8006840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b04      	cmp	r3, #4
 8006784:	d149      	bne.n	800681a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006786:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678e:	2200      	movs	r2, #0
 8006790:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f857 	bl	8006848 <UART_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d03c      	beq.n	800681a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	623b      	str	r3, [r7, #32]
   return(result);
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e6      	bne.n	80067a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f2:	61fa      	str	r2, [r7, #28]
 80067f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	69b9      	ldr	r1, [r7, #24]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e012      	b.n	8006840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3758      	adds	r7, #88	@ 0x58
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006858:	e04f      	b.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d04b      	beq.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fb f829 	bl	80018b8 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <UART_WaitOnFlagUntilTimeout+0x30>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e04e      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d037      	beq.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b80      	cmp	r3, #128	@ 0x80
 800688e:	d034      	beq.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d031      	beq.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d110      	bne.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2208      	movs	r2, #8
 80068aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f839 	bl	8006924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2208      	movs	r2, #8
 80068b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e029      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d4:	d111      	bne.n	80068fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f81f 	bl	8006924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e00f      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4013      	ands	r3, r2
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	429a      	cmp	r2, r3
 8006908:	bf0c      	ite	eq
 800690a:	2301      	moveq	r3, #1
 800690c:	2300      	movne	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	429a      	cmp	r2, r3
 8006916:	d0a0      	beq.n	800685a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b095      	sub	sp, #84	@ 0x54
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694a:	643b      	str	r3, [r7, #64]	@ 0x40
 800694c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	61fb      	str	r3, [r7, #28]
   return(result);
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	4b1e      	ldr	r3, [pc, #120]	@ (80069ec <UART_EndRxTransfer+0xc8>)
 8006972:	4013      	ands	r3, r2
 8006974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800697e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d118      	bne.n	80069cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f023 0310 	bic.w	r3, r3, #16
 80069ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6979      	ldr	r1, [r7, #20]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	613b      	str	r3, [r7, #16]
   return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e6      	bne.n	800699a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069e0:	bf00      	nop
 80069e2:	3754      	adds	r7, #84	@ 0x54
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	effffffe 	.word	0xeffffffe

080069f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e027      	b.n	8006a56 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	@ 0x24
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e02d      	b.n	8006ad6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2224      	movs	r2, #36	@ 0x24
 8006a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f850 	bl	8006b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e02d      	b.n	8006b52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2224      	movs	r2, #36	@ 0x24
 8006b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f812 	bl	8006b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d108      	bne.n	8006b7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b7c:	e031      	b.n	8006be2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b7e:	2310      	movs	r3, #16
 8006b80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b82:	2310      	movs	r3, #16
 8006b84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	0e5b      	lsrs	r3, r3, #25
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	0f5b      	lsrs	r3, r3, #29
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	7b3a      	ldrb	r2, [r7, #12]
 8006baa:	4911      	ldr	r1, [pc, #68]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8006bac:	5c8a      	ldrb	r2, [r1, r2]
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bb2:	7b3a      	ldrb	r2, [r7, #12]
 8006bb4:	490f      	ldr	r1, [pc, #60]	@ (8006bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	7b7a      	ldrb	r2, [r7, #13]
 8006bc8:	4909      	ldr	r1, [pc, #36]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8006bca:	5c8a      	ldrb	r2, [r1, r2]
 8006bcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bd0:	7b7a      	ldrb	r2, [r7, #13]
 8006bd2:	4908      	ldr	r1, [pc, #32]	@ (8006bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8006bd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	080072a0 	.word	0x080072a0
 8006bf4:	080072a8 	.word	0x080072a8

08006bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	f107 001c 	add.w	r0, r7, #28
 8006c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d121      	bne.n	8006c56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd4 <USB_CoreInit+0xdc>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d105      	bne.n	8006c4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 faaa 	bl	80071a4 <USB_CoreReset>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e01b      	b.n	8006c8e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa9e 	bl	80071a4 <USB_CoreReset>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c80:	e005      	b.n	8006c8e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c8e:	7fbb      	ldrb	r3, [r7, #30]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d116      	bne.n	8006cc2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <USB_CoreInit+0xe0>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f043 0206 	orr.w	r2, r3, #6
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f043 0220 	orr.w	r2, r3, #32
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cce:	b004      	add	sp, #16
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	ffbdffbf 	.word	0xffbdffbf
 8006cd8:	03ee0000 	.word	0x03ee0000

08006cdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 0201 	bic.w	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d115      	bne.n	8006d4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f7fa fdcf 	bl	80018d0 <HAL_Delay>
      ms += 10U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	330a      	adds	r3, #10
 8006d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa25 	bl	8007188 <USB_GetMode>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d01e      	beq.n	8006d82 <USB_SetCurrentMode+0x84>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d48:	d9f0      	bls.n	8006d2c <USB_SetCurrentMode+0x2e>
 8006d4a:	e01a      	b.n	8006d82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d115      	bne.n	8006d7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d5e:	200a      	movs	r0, #10
 8006d60:	f7fa fdb6 	bl	80018d0 <HAL_Delay>
      ms += 10U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	330a      	adds	r3, #10
 8006d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa0c 	bl	8007188 <USB_GetMode>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <USB_SetCurrentMode+0x84>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d7a:	d9f0      	bls.n	8006d5e <USB_SetCurrentMode+0x60>
 8006d7c:	e001      	b.n	8006d82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e005      	b.n	8006d8e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d86:	d101      	bne.n	8006d8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d98:	b084      	sub	sp, #16
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e009      	b.n	8006dcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3340      	adds	r3, #64	@ 0x40
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b0e      	cmp	r3, #14
 8006dd0:	d9f2      	bls.n	8006db8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d11c      	bne.n	8006e14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e005      	b.n	8006e20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e26:	461a      	mov	r2, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10d      	bne.n	8006e50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f968 	bl	8007114 <USB_SetDevSpeed>
 8006e44:	e008      	b.n	8006e58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f963 	bl	8007114 <USB_SetDevSpeed>
 8006e4e:	e003      	b.n	8006e58 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e50:	2103      	movs	r1, #3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f95e 	bl	8007114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e58:	2110      	movs	r1, #16
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8fa 	bl	8007054 <USB_FlushTxFifo>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f924 	bl	80070b8 <USB_FlushRxFifo>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e80:	461a      	mov	r2, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e043      	b.n	8006f2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eba:	d118      	bne.n	8006eee <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e013      	b.n	8006f00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e008      	b.n	8006f00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	461a      	mov	r2, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f30:	461a      	mov	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d3b5      	bcc.n	8006ea4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e043      	b.n	8006fc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f54:	d118      	bne.n	8006f88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e013      	b.n	8006f9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	e008      	b.n	8006f9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	461a      	mov	r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fca:	461a      	mov	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d3b5      	bcc.n	8006f3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ff2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f043 0210 	orr.w	r2, r3, #16
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <USB_DevInit+0x2b4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007014:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f043 0208 	orr.w	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007028:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800702c:	2b01      	cmp	r3, #1
 800702e:	d105      	bne.n	800703c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <USB_DevInit+0x2b8>)
 8007036:	4313      	orrs	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007048:	b004      	add	sp, #16
 800704a:	4770      	bx	lr
 800704c:	803c3800 	.word	0x803c3800
 8007050:	40000004 	.word	0x40000004

08007054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800706e:	d901      	bls.n	8007074 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e01b      	b.n	80070ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	daf2      	bge.n	8007062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	019b      	lsls	r3, r3, #6
 8007084:	f043 0220 	orr.w	r2, r3, #32
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007098:	d901      	bls.n	800709e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e006      	b.n	80070ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d0f0      	beq.n	800708c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d0:	d901      	bls.n	80070d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e018      	b.n	8007108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	daf2      	bge.n	80070c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2210      	movs	r2, #16
 80070e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f4:	d901      	bls.n	80070fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e006      	b.n	8007108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b10      	cmp	r3, #16
 8007104:	d0f0      	beq.n	80070e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007160:	f023 0303 	bic.w	r3, r3, #3
 8007164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0301 	and.w	r3, r3, #1
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071bc:	d901      	bls.n	80071c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e01b      	b.n	80071fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	daf2      	bge.n	80071b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f043 0201 	orr.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071e6:	d901      	bls.n	80071ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e006      	b.n	80071fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d0f0      	beq.n	80071da <USB_CoreReset+0x36>

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <memset>:
 8007206:	4402      	add	r2, r0
 8007208:	4603      	mov	r3, r0
 800720a:	4293      	cmp	r3, r2
 800720c:	d100      	bne.n	8007210 <memset+0xa>
 800720e:	4770      	bx	lr
 8007210:	f803 1b01 	strb.w	r1, [r3], #1
 8007214:	e7f9      	b.n	800720a <memset+0x4>
	...

08007218 <__libc_init_array>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4d0d      	ldr	r5, [pc, #52]	@ (8007250 <__libc_init_array+0x38>)
 800721c:	4c0d      	ldr	r4, [pc, #52]	@ (8007254 <__libc_init_array+0x3c>)
 800721e:	1b64      	subs	r4, r4, r5
 8007220:	10a4      	asrs	r4, r4, #2
 8007222:	2600      	movs	r6, #0
 8007224:	42a6      	cmp	r6, r4
 8007226:	d109      	bne.n	800723c <__libc_init_array+0x24>
 8007228:	4d0b      	ldr	r5, [pc, #44]	@ (8007258 <__libc_init_array+0x40>)
 800722a:	4c0c      	ldr	r4, [pc, #48]	@ (800725c <__libc_init_array+0x44>)
 800722c:	f000 f818 	bl	8007260 <_init>
 8007230:	1b64      	subs	r4, r4, r5
 8007232:	10a4      	asrs	r4, r4, #2
 8007234:	2600      	movs	r6, #0
 8007236:	42a6      	cmp	r6, r4
 8007238:	d105      	bne.n	8007246 <__libc_init_array+0x2e>
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007240:	4798      	blx	r3
 8007242:	3601      	adds	r6, #1
 8007244:	e7ee      	b.n	8007224 <__libc_init_array+0xc>
 8007246:	f855 3b04 	ldr.w	r3, [r5], #4
 800724a:	4798      	blx	r3
 800724c:	3601      	adds	r6, #1
 800724e:	e7f2      	b.n	8007236 <__libc_init_array+0x1e>
 8007250:	080072b8 	.word	0x080072b8
 8007254:	080072b8 	.word	0x080072b8
 8007258:	080072b8 	.word	0x080072b8
 800725c:	080072bc 	.word	0x080072bc

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
