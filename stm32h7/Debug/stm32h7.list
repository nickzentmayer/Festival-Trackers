
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019eac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0801a150  0801a150  0001b150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a748  0801a748  0001b748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a750  0801a750  0001b750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a754  0801a754  0001b754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  0801a758  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00077378  240002d0  0801aa28  0001c2d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24077648  0801aa28  0001c648  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036843  00000000  00000000  0001c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000691a  00000000  00000000  00052b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027b8  00000000  00000000  00059460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ebd  00000000  00000000  0005bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a3da  00000000  00000000  0005dad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036621  00000000  00000000  00067eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178f4f  00000000  00000000  0009e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021741f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bebc  00000000  00000000  00217464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00223320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a134 	.word	0x0801a134

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	0801a134 	.word	0x0801a134

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <Process_GGA_Sentence>:
#include "gps_tools.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

bool Process_GGA_Sentence(const char *gga_sentence, GPS_Data *gps_data) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	gps_data->valid = false;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

    // Check if it is a GGA sentence
    if (strncmp(gga_sentence, "$GPGGA", 6) != 0) {
 8000a78:	2206      	movs	r2, #6
 8000a7a:	4975      	ldr	r1, [pc, #468]	@ (8000c50 <Process_GGA_Sentence+0x1e8>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f017 f816 	bl	8017aae <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <Process_GGA_Sentence+0x24>
        return false; // Not a GGA sentence
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e0dc      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Find the end of the sentence (length of checksum is always 2 characters + '*')
	const char *end_of_sentence = gga_sentence + strlen(gga_sentence) - 3;
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fc27 	bl	80002e0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	3b03      	subs	r3, #3
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]

	// Extract and calculate checksum
	uint8_t calculated_checksum = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e009      	b.n	8000abe <Process_GGA_Sentence+0x56>
		calculated_checksum ^= *p;
 8000aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aba:	3301      	adds	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3f1      	bcc.n	8000aaa <Process_GGA_Sentence+0x42>
	}

    // Convert the provided checksum to an integer
    uint8_t provided_checksum = (uint8_t)strtol(end_of_sentence + 1, NULL, 16);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f016 fa9e 	bl	8017010 <strtol>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]

    // Validate the checksum
    if (calculated_checksum != provided_checksum) {
 8000ad8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d001      	beq.n	8000ae6 <Process_GGA_Sentence+0x7e>
        return false; // Checksum mismatch
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e0af      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Process the GGA fields
    char *token;
    char *nmea_copy = strdup(gga_sentence);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f016 ffc6 	bl	8017a78 <strdup>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
    token = strtok(nmea_copy, ",");
 8000af0:	4958      	ldr	r1, [pc, #352]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f016 ffee 	bl	8017ad4 <strtok>
 8000af8:	6278      	str	r0, [r7, #36]	@ 0x24

    int field_number = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    float raw_latitude = 0.0;
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    float raw_longitude = 0.0;
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
    char lat_dir = 'N';
 8000b0a:	234e      	movs	r3, #78	@ 0x4e
 8000b0c:	75fb      	strb	r3, [r7, #23]
    char lon_dir = 'E';
 8000b0e:	2345      	movs	r3, #69	@ 0x45
 8000b10:	75bb      	strb	r3, [r7, #22]

    while (token != NULL) {
 8000b12:	e076      	b.n	8000c02 <Process_GGA_Sentence+0x19a>
        switch (field_number) {
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d86a      	bhi.n	8000bf2 <Process_GGA_Sentence+0x18a>
 8000b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <Process_GGA_Sentence+0xbc>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b41 	.word	0x08000b41
 8000b28:	08000b67 	.word	0x08000b67
 8000b2c:	08000b83 	.word	0x08000b83
 8000b30:	08000b93 	.word	0x08000b93
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bd3 	.word	0x08000bd3
            case 1: // Timestamp
                if (*token) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d04b      	beq.n	8000be0 <Process_GGA_Sentence+0x178>
                    sscanf(token, "%2d%2d%f", &gps_data->hours, &gps_data->minutes, &gps_data->seconds);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f103 020c 	add.w	r2, r3, #12
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f103 0110 	add.w	r1, r3, #16
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3314      	adds	r3, #20
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	493e      	ldr	r1, [pc, #248]	@ (8000c58 <Process_GGA_Sentence+0x1f0>)
 8000b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b60:	f016 fe7e 	bl	8017860 <siscanf>
                }
                break;
 8000b64:	e03c      	b.n	8000be0 <Process_GGA_Sentence+0x178>
            case 2: // Latitude
                if (*token) {
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <Process_GGA_Sentence+0x17c>
                    raw_latitude = atof(token);
 8000b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b70:	f015 fb4a 	bl	8016208 <atof>
 8000b74:	eeb0 7b40 	vmov.f64	d7, d0
 8000b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7c:	edc7 7a07 	vstr	s15, [r7, #28]
                }
                break;
 8000b80:	e030      	b.n	8000be4 <Process_GGA_Sentence+0x17c>
            case 3: // Latitude direction (N/S)
                if (*token) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02e      	beq.n	8000be8 <Process_GGA_Sentence+0x180>
                    lat_dir = *token;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8000b90:	e02a      	b.n	8000be8 <Process_GGA_Sentence+0x180>
            case 4: // Longitude
                if (*token) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <Process_GGA_Sentence+0x184>
                    raw_longitude = atof(token);
 8000b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b9c:	f015 fb34 	bl	8016208 <atof>
 8000ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	edc7 7a06 	vstr	s15, [r7, #24]
                }
                break;
 8000bac:	e01e      	b.n	8000bec <Process_GGA_Sentence+0x184>
            case 5: // Longitude direction (E/W)
                if (*token) {
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01c      	beq.n	8000bf0 <Process_GGA_Sentence+0x188>
                    lon_dir = *token;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75bb      	strb	r3, [r7, #22]
                }
                break;
 8000bbc:	e018      	b.n	8000bf0 <Process_GGA_Sentence+0x188>
            case 6: // Fix status
                gps_data->valid = (*token != '0');
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b30      	cmp	r3, #48	@ 0x30
 8000bc4:	bf14      	ite	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	2300      	moveq	r3, #0
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
                break;
 8000bd0:	e00f      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
            case 7: // Number of satellites
				gps_data->num_satellites = atoi(token);
 8000bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000bd4:	f015 fb1b 	bl	801620e <atoi>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	619a      	str	r2, [r3, #24]
				break;
 8000bde:	e008      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be0:	bf00      	nop
 8000be2:	e006      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be4:	bf00      	nop
 8000be6:	e004      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be8:	bf00      	nop
 8000bea:	e002      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bf0:	bf00      	nop
        }
        token = strtok(NULL, ",");
 8000bf2:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f016 ff6d 	bl	8017ad4 <strtok>
 8000bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        field_number++;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
    while (token != NULL) {
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d185      	bne.n	8000b14 <Process_GGA_Sentence+0xac>
    }

    free(nmea_copy);
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f015 fb0d 	bl	8016228 <free>

    // Convert to decimal format if the sentence is valid
    if (gps_data->valid) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <Process_GGA_Sentence+0x1da>
        gps_data->latitude = convert_to_decimal(raw_latitude, lat_dir);
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c1e:	f000 f81f 	bl	8000c60 <convert_to_decimal>
 8000c22:	eef0 7a40 	vmov.f32	s15, s0
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	edc3 7a01 	vstr	s15, [r3, #4]
        gps_data->longitude = convert_to_decimal(raw_longitude, lon_dir);
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c34:	f000 f814 	bl	8000c60 <convert_to_decimal>
 8000c38:	eef0 7a40 	vmov.f32	s15, s0
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return gps_data->valid;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0801a150 	.word	0x0801a150
 8000c54:	0801a158 	.word	0x0801a158
 8000c58:	0801a15c 	.word	0x0801a15c
 8000c5c:	00000000 	.word	0x00000000

08000c60 <convert_to_decimal>:

float convert_to_decimal(float nmea_coordinate, char direction) {
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	70fb      	strb	r3, [r7, #3]
    int degrees = (int)(nmea_coordinate / 100);
 8000c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c72:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000d00 <convert_to_decimal+0xa0>
 8000c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
 8000c82:	613b      	str	r3, [r7, #16]
    float minutes = nmea_coordinate - (degrees * 100);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2264      	movs	r2, #100	@ 0x64
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9c:	edc7 7a03 	vstr	s15, [r7, #12]
    float decimal = degrees + minutes / 60.0;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb2:	ed9f 4b11 	vldr	d4, [pc, #68]	@ 8000cf8 <convert_to_decimal+0x98>
 8000cb6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (direction == 'S' || direction == 'W') {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b53      	cmp	r3, #83	@ 0x53
 8000cca:	d002      	beq.n	8000cd2 <convert_to_decimal+0x72>
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b57      	cmp	r3, #87	@ 0x57
 8000cd0:	d105      	bne.n	8000cde <convert_to_decimal+0x7e>
        decimal *= -1;
 8000cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd6:	eef1 7a67 	vneg.f32	s15, s15
 8000cda:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return decimal;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	ee07 3a90 	vmov	s15, r3
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	404e0000 	.word	0x404e0000
 8000d00:	42c80000 	.word	0x42c80000

08000d04 <LSM303AGR_Init>:
 *      Author: Tyler
 */

#include "lsm303agr.h"

HAL_StatusTypeDef LSM303AGR_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // set accelerometer to 50Hz, normal power mode, all axes enabled
    data = 0x57; // 01010111
 8000d0c:	2357      	movs	r3, #87	@ 0x57
 8000d0e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, REG_CTRL_REG1_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2220      	movs	r2, #32
 8000d22:	2132      	movs	r1, #50	@ 0x32
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f004 fca5 	bl	8005674 <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <LSM303AGR_Init+0x30>
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e014      	b.n	8000d5e <LSM303AGR_Init+0x5a>
    }

    // set magnetometer to 50Hz, normal power mode, continuous read
    data = 0x88; // 10001000
 8000d34:	2388      	movs	r3, #136	@ 0x88
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, CFG_REG_A_M, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2260      	movs	r2, #96	@ 0x60
 8000d4a:	2132      	movs	r1, #50	@ 0x32
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f004 fc91 	bl	8005674 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <LSM303AGR_Init+0x58>
            return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LSM303AGR_Init+0x5a>
        }
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Display_Init>:
#define COLOR_BLUE           0x001F  // 16-bit RGB color: Blue

// Assuming LTDC and frame buffer are already initialized
LTDC_HandleTypeDef hltdc;

void Display_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    // Fill the screen with a solid color
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e018      	b.n	8000da6 <Display_Init+0x3e>
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	e00e      	b.n	8000d98 <Display_Init+0x30>
            framebuffer[y * DISPLAY_WIDTH + x] = COLOR_BLUE;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	461a      	mov	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <Display_Init+0x58>)
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000d9e:	d3ec      	bcc.n	8000d7a <Display_Init+0x12>
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dac:	d3e2      	bcc.n	8000d74 <Display_Init+0xc>
        }
    }

    // Trigger LTDC to refresh the display
    HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);  // Assuming hltdc is the LTDC handle
 8000dae:	2102      	movs	r1, #2
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <Display_Init+0x5c>)
 8000db2:	f006 f975 	bl	80070a0 <HAL_LTDC_Reload>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000654 	.word	0x24000654
 8000dc4:	24000430 	.word	0x24000430

08000dc8 <_write>:

int _write(int file, char *ptr, int len) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);  // Transmit data via USB CDC
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f014 fd84 	bl	80158e8 <CDC_Transmit_FS>
    return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000df2:	f000 fdaf 	bl	8001954 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f001 fd8d 	bl	8002914 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <main+0xf8>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e00:	4a38      	ldr	r2, [pc, #224]	@ (8000ee4 <main+0xf8>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <main+0xf8>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f882 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 fb68 	bl	80014f0 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000e20:	f000 fb3e 	bl	80014a0 <MX_BDMA_Init>
  MX_LTDC_Init();
 8000e24:	f000 f936 	bl	8001094 <MX_LTDC_Init>
  MX_I2C4_Init();
 8000e28:	f000 f8f4 	bl	8001014 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000e2c:	f000 f9d0 	bl	80011d0 <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8000e30:	f000 f9fa 	bl	8001228 <MX_TIM1_Init>
  MX_UART8_Init();
 8000e34:	f000 fae8 	bl	8001408 <MX_UART8_Init>
  MX_TIM6_Init();
 8000e38:	f000 faa4 	bl	8001384 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init(); // Initialize USB CDC
 8000e3c:	f014 fc94 	bl	8015768 <MX_USB_DEVICE_Init>

  // power latch section. change delay to adjust power-on hold time
  HAL_Delay(POWER_ON_HOLD_MS);
 8000e40:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e44:	f001 fdc2 	bl	80029cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, LDO_EN_Pin, GPIO_PIN_SET); // keep the LDO_EN set high when BTN released
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4826      	ldr	r0, [pc, #152]	@ (8000ee8 <main+0xfc>)
 8000e4e:	f004 fb41 	bl	80054d4 <HAL_GPIO_WritePin>

  // update period of TIM6 to configure power-off timer
  __HAL_TIM_SET_AUTORELOAD(&htim6, POWER_OFF_HOLD_MS);
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <main+0x100>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e5c:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <main+0x100>)
 8000e5e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000e62:	60da      	str	r2, [r3, #12]

  // do extra LTDC initialization stuff

  // adjust the LTDC framebuffer address to the new private variable `framebuffer`
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)&framebuffer, LTDC_LAYER_1);
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <main+0x104>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4822      	ldr	r0, [pc, #136]	@ (8000ef4 <main+0x108>)
 8000e6c:	f006 f8aa 	bl	8006fc4 <HAL_LTDC_SetAddress>

  HAL_StatusTypeDef st7701_init_status = ST7701_Init();
 8000e70:	f000 fe6e 	bl	8001b50 <ST7701_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
	if (st7701_init_status != HAL_OK) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <main+0x9a>
	  printf("st7701 initialization failed!\r\n");
 8000e7e:	481e      	ldr	r0, [pc, #120]	@ (8000ef8 <main+0x10c>)
 8000e80:	f016 fcc6 	bl	8017810 <puts>
 8000e84:	e004      	b.n	8000e90 <main+0xa4>
	} else {
	  printf("st7701 initialized! setting framebuffer to blue\r\n");
 8000e86:	481d      	ldr	r0, [pc, #116]	@ (8000efc <main+0x110>)
 8000e88:	f016 fcc2 	bl	8017810 <puts>
	  Display_Init();
 8000e8c:	f7ff ff6c 	bl	8000d68 <Display_Init>
    }
	fflush(stdout);
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <main+0x114>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f016 fb7c 	bl	8017594 <fflush>


  // start receiving data on UART8 via interrupt, for gps
  HAL_UART_Receive_IT(&huart8, (uint8_t*)rx_buffer, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4919      	ldr	r1, [pc, #100]	@ (8000f04 <main+0x118>)
 8000ea0:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <main+0x11c>)
 8000ea2:	f00c f821 	bl	800cee8 <HAL_UART_Receive_IT>

  // this one is pretty self-explanatory
  LSM303AGR_Init(&hi2c4);
 8000ea6:	4819      	ldr	r0, [pc, #100]	@ (8000f0c <main+0x120>)
 8000ea8:	f7ff ff2c 	bl	8000d04 <LSM303AGR_Init>

//  HAL_GPIO_WritePin(GPIOB, GPS_ON_Pin, GPIO_PIN_SET);

//   Start PWM output on TIM1 Channel 1
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <main+0x124>)
 8000eb0:	f00a fe16 	bl	800bae0 <HAL_TIM_PWM_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <main+0xd2>
  {
	  // Initialization Error
	  Error_Handler();
 8000eba:	f000 fdad 	bl	8001a18 <Error_Handler>
  }
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <main+0x124>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <main+0x124>)
 8000ec4:	68d2      	ldr	r2, [r2, #12]
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ec8:	f011 fef2 	bl	8012cb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <main+0x128>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <main+0x12c>)
 8000ed2:	f011 ff37 	bl	8012d44 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <main+0x130>)
 8000eda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000edc:	f011 ff0c 	bl	8012cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <main+0xf4>
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	24000570 	.word	0x24000570
 8000ef0:	24000654 	.word	0x24000654
 8000ef4:	24000430 	.word	0x24000430
 8000ef8:	0801a174 	.word	0x0801a174
 8000efc:	0801a194 	.word	0x0801a194
 8000f00:	24000280 	.word	0x24000280
 8000f04:	24070e54 	.word	0x24070e54
 8000f08:	240005bc 	.word	0x240005bc
 8000f0c:	240002ec 	.word	0x240002ec
 8000f10:	24000524 	.word	0x24000524
 8000f14:	0801a2ac 	.word	0x0801a2ac
 8000f18:	080018cd 	.word	0x080018cd
 8000f1c:	24000650 	.word	0x24000650

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09c      	sub	sp, #112	@ 0x70
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	224c      	movs	r2, #76	@ 0x4c
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f016 fd9a 	bl	8017a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f016 fd94 	bl	8017a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f007 fd15 	bl	8008970 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <SystemClock_Config+0xe8>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <SystemClock_Config+0xe8>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <SystemClock_Config+0xe8>)
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <SystemClock_Config+0xec>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f68:	4a28      	ldr	r2, [pc, #160]	@ (800100c <SystemClock_Config+0xec>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <SystemClock_Config+0xec>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7c:	bf00      	nop
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <SystemClock_Config+0xec>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f8a:	d1f8      	bne.n	8000f7e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f8c:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000f9c:	2323      	movs	r3, #35	@ 0x23
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2340      	movs	r3, #64	@ 0x40
 8000fac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 fddc 	bl	8008b78 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fc6:	f000 fd27 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	233f      	movs	r3, #63	@ 0x3f
 8000fcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fde:	2340      	movs	r3, #64	@ 0x40
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fe6:	2340      	movs	r3, #64	@ 0x40
 8000fe8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2101      	movs	r1, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f008 fa1c 	bl	800942c <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000ffa:	f000 fd0d 	bl	8001a18 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3770      	adds	r7, #112	@ 0x70
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	58000400 	.word	0x58000400
 800100c:	58024800 	.word	0x58024800
 8001010:	58024400 	.word	0x58024400

08001014 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_I2C4_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <MX_I2C4_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <MX_I2C4_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_I2C4_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2C4_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_I2C4_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001050:	f004 fa74 	bl	800553c <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 fcdd 	bl	8001a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001062:	f005 fd51 	bl	8006b08 <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 fcd4 	bl	8001a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_I2C4_Init+0x74>)
 8001074:	f005 fd93 	bl	8006b9e <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 fccb 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	240002ec 	.word	0x240002ec
 800108c:	58001c00 	.word	0x58001c00
 8001090:	00707cbb 	.word	0x00707cbb

08001094 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2234      	movs	r2, #52	@ 0x34
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f016 fce1 	bl	8017a68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010a6:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010a8:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <MX_LTDC_Init+0x134>)
 80010aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010ac:	4b45      	ldr	r3, [pc, #276]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010b2:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010b8:	4b42      	ldr	r3, [pc, #264]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010be:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 24;
 80010c4:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010c6:	2218      	movs	r2, #24
 80010c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 80010ca:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 54;
 80010d0:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010d2:	2236      	movs	r2, #54	@ 0x36
 80010d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 27;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010d8:	221b      	movs	r2, #27
 80010da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 534;
 80010dc:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010de:	f240 2216 	movw	r2, #534	@ 0x216
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 507;
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010e6:	f240 12fb 	movw	r2, #507	@ 0x1fb
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 538;
 80010ec:	4b35      	ldr	r3, [pc, #212]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010ee:	f240 221a 	movw	r2, #538	@ 0x21a
 80010f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 522;
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010f6:	f240 220a 	movw	r2, #522	@ 0x20a
 80010fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010fc:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <MX_LTDC_Init+0x130>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <MX_LTDC_Init+0x130>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001114:	482b      	ldr	r0, [pc, #172]	@ (80011c4 <MX_LTDC_Init+0x130>)
 8001116:	f005 fd8f 	bl	8006c38 <HAL_LTDC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001120:	f000 fc7a 	bl	8001a18 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001128:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800112c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001132:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001136:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800113c:	23ff      	movs	r3, #255	@ 0xff
 800113e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001148:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x08100000;
 800114e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001154:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 800115a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <MX_LTDC_Init+0x130>)
 800117a:	f005 fee5 	bl	8006f48 <HAL_LTDC_ConfigLayer>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001184:	f000 fc48 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  pLayerCfg.FBStartAdress = (uint32_t)&framebuffer;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <MX_LTDC_Init+0x138>)
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <MX_LTDC_Init+0x130>)
 8001194:	f005 fed8 	bl	8006f48 <HAL_LTDC_ConfigLayer>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LTDC_Init+0x10e>
    {
      Error_Handler();
 800119e:	f000 fc3b 	bl	8001a18 <Error_Handler>
    }

//  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_RR); // Enable Reload Interrupt
  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI); // Enable Line Interrupt
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
//  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_FU); // Enable FIFO Underrun Interrupt
//  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(LTDC_IRQn);
  HAL_LTDC_ProgramLineEvent(&hltdc, 0); // Triggers at the beginning of the vertical blanking period
 80011b2:	2100      	movs	r1, #0
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <MX_LTDC_Init+0x130>)
 80011b6:	f005 ff3b 	bl	8007030 <HAL_LTDC_ProgramLineEvent>
  /* USER CODE END LTDC_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3738      	adds	r7, #56	@ 0x38
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000430 	.word	0x24000430
 80011c8:	50001000 	.word	0x50001000
 80011cc:	24000654 	.word	0x24000654

080011d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_QUADSPI_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011dc:	22ff      	movs	r2, #255	@ 0xff
 80011de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_QUADSPI_Init+0x50>)
 800120c:	f007 fbfa 	bl	8008a04 <HAL_QSPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fbff 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	240004d8 	.word	0x240004d8
 8001224:	52005000 	.word	0x52005000

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	@ 0x68
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	222c      	movs	r2, #44	@ 0x2c
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f016 fc00 	bl	8017a68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001268:	4b44      	ldr	r3, [pc, #272]	@ (800137c <MX_TIM1_Init+0x154>)
 800126a:	4a45      	ldr	r2, [pc, #276]	@ (8001380 <MX_TIM1_Init+0x158>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800126e:	4b43      	ldr	r3, [pc, #268]	@ (800137c <MX_TIM1_Init+0x154>)
 8001270:	223f      	movs	r2, #63	@ 0x3f
 8001272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <MX_TIM1_Init+0x154>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800127a:	4b40      	ldr	r3, [pc, #256]	@ (800137c <MX_TIM1_Init+0x154>)
 800127c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <MX_TIM1_Init+0x154>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001288:	4b3c      	ldr	r3, [pc, #240]	@ (800137c <MX_TIM1_Init+0x154>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <MX_TIM1_Init+0x154>)
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001294:	4839      	ldr	r0, [pc, #228]	@ (800137c <MX_TIM1_Init+0x154>)
 8001296:	f00a fac3 	bl	800b820 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f000 fbba 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012ae:	4619      	mov	r1, r3
 80012b0:	4832      	ldr	r0, [pc, #200]	@ (800137c <MX_TIM1_Init+0x154>)
 80012b2:	f00a ff3f 	bl	800c134 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012bc:	f000 fbac 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c0:	482e      	ldr	r0, [pc, #184]	@ (800137c <MX_TIM1_Init+0x154>)
 80012c2:	f00a fbac 	bl	800ba1e <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012cc:	f000 fba4 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4826      	ldr	r0, [pc, #152]	@ (800137c <MX_TIM1_Init+0x154>)
 80012e4:	f00b fc86 	bl	800cbf4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ee:	f000 fb93 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800130a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	4818      	ldr	r0, [pc, #96]	@ (800137c <MX_TIM1_Init+0x154>)
 800131a:	f00a fdf7 	bl	800bf0c <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001324:	f000 fb78 	bl	8001a18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001340:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800134a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_TIM1_Init+0x154>)
 800135e:	f00b fcd7 	bl	800cd10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001368:	f000 fb56 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <MX_TIM1_Init+0x154>)
 800136e:	f000 ffc7 	bl	8002300 <HAL_TIM_MspPostInit>

}
 8001372:	bf00      	nop
 8001374:	3768      	adds	r7, #104	@ 0x68
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000524 	.word	0x24000524
 8001380:	40010000 	.word	0x40010000

08001384 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM6_Init+0x7c>)
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <MX_TIM6_Init+0x80>)
 8001398:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_TIM6_Init+0x7c>)
 800139c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80013a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3000;
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013aa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013b6:	4812      	ldr	r0, [pc, #72]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013b8:	f00a fa32 	bl	800b820 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80013c2:	f000 fb29 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013d4:	f00b fc0e 	bl	800cbf4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80013de:	f000 fb1b 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0); // Set interrupt priority
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2036      	movs	r0, #54	@ 0x36
 80013e8:	f001 fbd8 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); // Enable the TIM6 interrupt
 80013ec:	2036      	movs	r0, #54	@ 0x36
 80013ee:	f001 fbef 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6); // Start the timer with interrupts
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM6_Init+0x7c>)
 80013f4:	f00a fa6c 	bl	800b8d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24000570 	.word	0x24000570
 8001404:	40001000 	.word	0x40001000

08001408 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <MX_UART8_Init+0x90>)
 800140e:	4a23      	ldr	r2, [pc, #140]	@ (800149c <MX_UART8_Init+0x94>)
 8001410:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_UART8_Init+0x90>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_UART8_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <MX_UART8_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_UART8_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_UART8_Init+0x90>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_UART8_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_UART8_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_UART8_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_UART8_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_UART8_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001450:	4811      	ldr	r0, [pc, #68]	@ (8001498 <MX_UART8_Init+0x90>)
 8001452:	f00b fcf9 	bl	800ce48 <HAL_UART_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800145c:	f000 fadc 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_UART8_Init+0x90>)
 8001464:	f00d ffc5 	bl	800f3f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800146e:	f000 fad3 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4808      	ldr	r0, [pc, #32]	@ (8001498 <MX_UART8_Init+0x90>)
 8001476:	f00d fffa 	bl	800f46e <HAL_UARTEx_SetRxFifoThreshold>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001480:	f000 faca 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_UART8_Init+0x90>)
 8001486:	f00d ff7b 	bl	800f380 <HAL_UARTEx_DisableFifoMode>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001490:	f000 fac2 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	240005bc 	.word	0x240005bc
 800149c:	40007c00 	.word	0x40007c00

080014a0 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_BDMA_Init+0x4c>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ac:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <MX_BDMA_Init+0x4c>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <MX_BDMA_Init+0x4c>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2105      	movs	r1, #5
 80014c8:	2081      	movs	r0, #129	@ 0x81
 80014ca:	f001 fb67 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80014ce:	2081      	movs	r0, #129	@ 0x81
 80014d0:	f001 fb7e 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2105      	movs	r1, #5
 80014d8:	2082      	movs	r0, #130	@ 0x82
 80014da:	f001 fb5f 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80014de:	2082      	movs	r0, #130	@ 0x82
 80014e0:	f001 fb76 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024400 	.word	0x58024400

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	4b97      	ldr	r3, [pc, #604]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150c:	4a95      	ldr	r2, [pc, #596]	@ (8001764 <MX_GPIO_Init+0x274>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001516:	4b93      	ldr	r3, [pc, #588]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b8f      	ldr	r3, [pc, #572]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152a:	4a8e      	ldr	r2, [pc, #568]	@ (8001764 <MX_GPIO_Init+0x274>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001534:	4b8b      	ldr	r3, [pc, #556]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b88      	ldr	r3, [pc, #544]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001548:	4a86      	ldr	r2, [pc, #536]	@ (8001764 <MX_GPIO_Init+0x274>)
 800154a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001552:	4b84      	ldr	r3, [pc, #528]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b80      	ldr	r3, [pc, #512]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001566:	4a7f      	ldr	r2, [pc, #508]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001570:	4b7c      	ldr	r3, [pc, #496]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b79      	ldr	r3, [pc, #484]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	4a77      	ldr	r2, [pc, #476]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158e:	4b75      	ldr	r3, [pc, #468]	@ (8001764 <MX_GPIO_Init+0x274>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b71      	ldr	r3, [pc, #452]	@ (8001764 <MX_GPIO_Init+0x274>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	4a70      	ldr	r2, [pc, #448]	@ (8001764 <MX_GPIO_Init+0x274>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001764 <MX_GPIO_Init+0x274>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LDO_EN_Pin|TP_PC4_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2112      	movs	r1, #18
 80015be:	486a      	ldr	r0, [pc, #424]	@ (8001768 <MX_GPIO_Init+0x278>)
 80015c0:	f003 ff88 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_PA2_Pin|MOSI_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f248 0184 	movw	r1, #32900	@ 0x8084
 80015ca:	4868      	ldr	r0, [pc, #416]	@ (800176c <MX_GPIO_Init+0x27c>)
 80015cc:	f003 ff82 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d6:	4866      	ldr	r0, [pc, #408]	@ (8001770 <MX_GPIO_Init+0x280>)
 80015d8:	f003 ff7c 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|SCK_Pin|GPS_ON_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f241 0128 	movw	r1, #4136	@ 0x1028
 80015e2:	4864      	ldr	r0, [pc, #400]	@ (8001774 <MX_GPIO_Init+0x284>)
 80015e4:	f003 ff76 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ee:	485f      	ldr	r0, [pc, #380]	@ (800176c <MX_GPIO_Init+0x27c>)
 80015f0:	f003 ff70 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80015f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001600:	2302      	movs	r3, #2
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4857      	ldr	r0, [pc, #348]	@ (8001768 <MX_GPIO_Init+0x278>)
 800160c:	f003 fd9a 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin TP_PC4_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|TP_PC4_Pin;
 8001610:	2312      	movs	r3, #18
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4850      	ldr	r0, [pc, #320]	@ (8001768 <MX_GPIO_Init+0x278>)
 8001628:	f003 fd8c 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_PA2_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = TP_PA2_Pin|LORA_NSS_Pin;
 800162c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4849      	ldr	r0, [pc, #292]	@ (800176c <MX_GPIO_Init+0x27c>)
 8001646:	f003 fd7d 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOSI_Pin */
  GPIO_InitStruct.Pin = MOSI_Pin;
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4842      	ldr	r0, [pc, #264]	@ (800176c <MX_GPIO_Init+0x27c>)
 8001662:	f003 fd6f 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	483c      	ldr	r0, [pc, #240]	@ (8001770 <MX_GPIO_Init+0x280>)
 8001680:	f003 fd60 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin GPS_ON_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|GPS_ON_Pin;
 8001684:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4835      	ldr	r0, [pc, #212]	@ (8001774 <MX_GPIO_Init+0x284>)
 800169e:	f003 fd51 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_BUSY_Pin MISO_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_BUSY_Pin|MISO_Pin;
 80016a2:	f246 0310 	movw	r3, #24592	@ 0x6010
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	482f      	ldr	r0, [pc, #188]	@ (8001774 <MX_GPIO_Init+0x284>)
 80016b8:	f003 fd44 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : XL_INT0_Pin XL_INT1_Pin */
  GPIO_InitStruct.Pin = XL_INT0_Pin|XL_INT1_Pin;
 80016bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4829      	ldr	r0, [pc, #164]	@ (8001778 <MX_GPIO_Init+0x288>)
 80016d4:	f003 fd36 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80016d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	481e      	ldr	r0, [pc, #120]	@ (800176c <MX_GPIO_Init+0x27c>)
 80016f2:	f003 fd27 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_STAT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin;
 80016f6:	2310      	movs	r3, #16
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BATT_STAT_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	481b      	ldr	r0, [pc, #108]	@ (8001778 <MX_GPIO_Init+0x288>)
 800170a:	f003 fd1b 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCK_Pin */
  GPIO_InitStruct.Pin = SCK_Pin;
 800170e:	2308      	movs	r3, #8
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4813      	ldr	r0, [pc, #76]	@ (8001774 <MX_GPIO_Init+0x284>)
 8001726:	f003 fd0d 	bl	8005144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2105      	movs	r1, #5
 800172e:	2028      	movs	r0, #40	@ 0x28
 8001730:	f001 fa34 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001734:	2028      	movs	r0, #40	@ 0x28
 8001736:	f001 fa4b 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800173a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;    // Alternate Function Push-Pull
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;        // No Pull-up or Pull-down
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Adjust speed as needed
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1; // TIM1_CH1 is mapped to AF1
 800174c:	2301      	movs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <MX_GPIO_Init+0x280>)
 8001758:	f003 fcf4 	bl	8005144 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	@ 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	58020800 	.word	0x58020800
 800176c:	58020000 	.word	0x58020000
 8001770:	58021000 	.word	0x58021000
 8001774:	58020400 	.word	0x58020400
 8001778:	58020c00 	.word	0x58020c00

0800177c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// called when BTN is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	printf("BTN PRESSED");
 8001786:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x78>)
 8001788:	f015 ffda 	bl	8017740 <iprintf>
	fflush(stdout);
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4618      	mov	r0, r3
 8001794:	f015 fefe 	bl	8017594 <fflush>
    if (GPIO_Pin == GPIO_PIN_15) { // Check if the interrupt is from PC15
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800179e:	d124      	bne.n	80017ea <HAL_GPIO_EXTI_Callback+0x6e>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) {
 80017a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a4:	4815      	ldr	r0, [pc, #84]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x80>)
 80017a6:	f003 fe7d 	bl	80054a4 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d119      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x68>
            // Button is pressed: Start 3-second timer
        	printf("BTN STILL PRESSED\n");
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x84>)
 80017b2:	f016 f82d 	bl	8017810 <puts>
			fflush(stdout);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4618      	mov	r0, r3
 80017be:	f015 fee9 	bl	8017594 <fflush>
            __HAL_TIM_SET_COUNTER(&htim6, 0); // Reset the timer counter
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_GPIO_EXTI_Callback+0x88>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&htim6);
 80017ca:	480e      	ldr	r0, [pc, #56]	@ (8001804 <HAL_GPIO_EXTI_Callback+0x88>)
 80017cc:	f00a f880 	bl	800b8d0 <HAL_TIM_Base_Start_IT>
            printf("TIMER STARTED\n");
 80017d0:	480d      	ldr	r0, [pc, #52]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017d2:	f016 f81d 	bl	8017810 <puts>
            fflush(stdout);
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f015 fed9 	bl	8017594 <fflush>
        } else {
            // Button is released: Stop the timer
            HAL_TIM_Base_Stop_IT(&htim6);
        }
    }
}
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_EXTI_Callback+0x6e>
            HAL_TIM_Base_Stop_IT(&htim6);
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <HAL_GPIO_EXTI_Callback+0x88>)
 80017e6:	f00a f8eb 	bl	800b9c0 <HAL_TIM_Base_Stop_IT>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	0801a1c8 	.word	0x0801a1c8
 80017f8:	24000280 	.word	0x24000280
 80017fc:	58020800 	.word	0x58020800
 8001800:	0801a1d4 	.word	0x0801a1d4
 8001804:	24000570 	.word	0x24000570
 8001808:	0801a1e8 	.word	0x0801a1e8

0800180c <HAL_LTDC_LineEventCallback>:

// triggered at the end of each frame
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    printf("frame done!\r\n");
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HAL_LTDC_LineEventCallback+0x24>)
 8001816:	f015 fffb 	bl	8017810 <puts>
    fflush(stdout);
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_LTDC_LineEventCallback+0x28>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f015 feb7 	bl	8017594 <fflush>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0801a1f8 	.word	0x0801a1f8
 8001834:	24000280 	.word	0x24000280

08001838 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] == '$') {
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_UART_RxCpltCallback+0x80>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b24      	cmp	r3, #36	@ 0x24
 8001846:	d103      	bne.n	8001850 <HAL_UART_RxCpltCallback+0x18>
		// Start of a new GGA sentence, reset the index
		gga_index = 0;
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e029      	b.n	80018a4 <HAL_UART_RxCpltCallback+0x6c>
	} else if (rx_buffer[0] == '\r') {
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_UART_RxCpltCallback+0x80>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b0d      	cmp	r3, #13
 8001856:	d112      	bne.n	800187e <HAL_UART_RxCpltCallback+0x46>
//		if (gga_index < GGA_BUFFER_SIZE) {
//			gga_buffer[gga_index] = '\0'; // Null-terminate for string processing
//		}

		// Process the complete GGA sentence
		bool success = Process_GGA_Sentence(gga_buffer, &gps_data);
 8001858:	4919      	ldr	r1, [pc, #100]	@ (80018c0 <HAL_UART_RxCpltCallback+0x88>)
 800185a:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <HAL_UART_RxCpltCallback+0x8c>)
 800185c:	f7ff f904 	bl	8000a68 <Process_GGA_Sentence>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
		if (success) printf("%d satellites", gps_data.num_satellites);
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_UART_RxCpltCallback+0x3e>
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_UART_RxCpltCallback+0x88>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4619      	mov	r1, r3
 8001870:	4815      	ldr	r0, [pc, #84]	@ (80018c8 <HAL_UART_RxCpltCallback+0x90>)
 8001872:	f015 ff65 	bl	8017740 <iprintf>

		// Reset the index to start a new sentence
		gga_index = 0;
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e012      	b.n	80018a4 <HAL_UART_RxCpltCallback+0x6c>
	} else if (gga_index < GGA_BUFFER_SIZE) {
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b63      	cmp	r3, #99	@ 0x63
 8001884:	d80b      	bhi.n	800189e <HAL_UART_RxCpltCallback+0x66>
		// accumulate the received character if we haven't reached the buffer size
		gga_buffer[gga_index++] = rx_buffer[0];
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 8001890:	7011      	strb	r1, [r2, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_UART_RxCpltCallback+0x80>)
 8001896:	7819      	ldrb	r1, [r3, #0]
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_UART_RxCpltCallback+0x8c>)
 800189a:	5499      	strb	r1, [r3, r2]
 800189c:	e002      	b.n	80018a4 <HAL_UART_RxCpltCallback+0x6c>
	} else {
		// there's something wrong, reset the index to 0 to start the data buffer over
		gga_index = 0;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <HAL_UART_RxCpltCallback+0x84>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
	}

	// re-enable the interrupt to receive the next byte
	HAL_UART_Receive_IT(huart, rx_buffer, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	4904      	ldr	r1, [pc, #16]	@ (80018b8 <HAL_UART_RxCpltCallback+0x80>)
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f00b fb1d 	bl	800cee8 <HAL_UART_Receive_IT>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24070e54 	.word	0x24070e54
 80018bc:	24070ebc 	.word	0x24070ebc
 80018c0:	24070ec0 	.word	0x24070ec0
 80018c4:	24070e58 	.word	0x24070e58
 80018c8:	0801a208 	.word	0x0801a208

080018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018d4:	f013 ff48 	bl	8015768 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  int p = 1000;
 80018d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018dc:	60fb      	str	r3, [r7, #12]
//			Blink_PC4();
//		}
//		HAL_Delay(600);
//		printf("set brightness max");
//		fflush(stdout);
		if (p <= 0) {
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dc03      	bgt.n	80018ec <StartDefaultTask+0x20>
			p = 1000;
 80018e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e002      	b.n	80018f2 <StartDefaultTask+0x26>
		} else {
			p--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
		}

		if (p % 10 == 0) {
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <StartDefaultTask+0x78>)
 80018f6:	fb83 2301 	smull	r2, r3, r3, r1
 80018fa:	109a      	asrs	r2, r3, #2
 80018fc:	17cb      	asrs	r3, r1, #31
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	1aca      	subs	r2, r1, r3
 800190a:	2a00      	cmp	r2, #0
 800190c:	d111      	bne.n	8001932 <StartDefaultTask+0x66>
			printf("set brightness to %d\r\n", 100 - (p / 10));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <StartDefaultTask+0x78>)
 8001912:	fb82 1203 	smull	r1, r2, r2, r3
 8001916:	1092      	asrs	r2, r2, #2
 8001918:	17db      	asrs	r3, r3, #31
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	3364      	adds	r3, #100	@ 0x64
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	@ (8001948 <StartDefaultTask+0x7c>)
 8001922:	f015 ff0d 	bl	8017740 <iprintf>
			fflush(stdout);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <StartDefaultTask+0x80>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4618      	mov	r0, r3
 800192e:	f015 fe31 	bl	8017594 <fflush>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, p);
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <StartDefaultTask+0x84>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(5);
 800193a:	2005      	movs	r0, #5
 800193c:	f001 f846 	bl	80029cc <HAL_Delay>
		if (p <= 0) {
 8001940:	e7cd      	b.n	80018de <StartDefaultTask+0x12>
 8001942:	bf00      	nop
 8001944:	66666667 	.word	0x66666667
 8001948:	0801a218 	.word	0x0801a218
 800194c:	24000280 	.word	0x24000280
 8001950:	24000524 	.word	0x24000524

08001954 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001966:	f001 f941 	bl	8002bec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800196a:	2301      	movs	r3, #1
 800196c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800196e:	2300      	movs	r3, #0
 8001970:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001976:	231f      	movs	r3, #31
 8001978:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800197a:	2387      	movs	r3, #135	@ 0x87
 800197c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800197e:	2300      	movs	r3, #0
 8001980:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001982:	2300      	movs	r3, #0
 8001984:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001996:	463b      	mov	r3, r7
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f95f 	bl	8002c5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800199e:	2004      	movs	r0, #4
 80019a0:	f001 f93c 	bl	8002c1c <HAL_MPU_Enable>

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM6) { // Check if this is the interrupt from TIM6
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d118      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x44>
		printf("TIMER FINISHED");
 80019be:	4813      	ldr	r0, [pc, #76]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019c0:	f015 febe 	bl	8017740 <iprintf>
		fflush(stdout);
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f015 fde2 	bl	8017594 <fflush>
		// Code to execute when the timer reaches the period (e.g., every 3 seconds)
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) {
 80019d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d4:	480f      	ldr	r0, [pc, #60]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019d6:	f003 fd65 	bl	80054a4 <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d104      	bne.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x3e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set PC1 low
 80019e0:	2200      	movs	r2, #0
 80019e2:	2102      	movs	r1, #2
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019e6:	f003 fd75 	bl	80054d4 <HAL_GPIO_WritePin>
		}

		// Stop the timer to prevent continuous triggering (optional)
		HAL_TIM_Base_Stop_IT(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f009 ffe8 	bl	800b9c0 <HAL_TIM_Base_Stop_IT>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_PeriodElapsedCallback+0x52>
    HAL_IncTick();
 80019fa:	f000 ffc7 	bl	800298c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	0801a230 	.word	0x0801a230
 8001a10:	24000280 	.word	0x24000280
 8001a14:	58020800 	.word	0x58020800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <ST7701_Delay>:
#define ST7701_SCK_PORT GPIOB
#define ST7701_CS_PIN GPIO_PIN_14
#define ST7701_CS_PORT GPIOA

// Function to set or reset GPIO pins (bit-banging)
static void ST7701_Delay(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
    // Small delay to simulate the clock period (adjust as needed)
    for (volatile int i = 0; i < 100; i++);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e002      	b.n	8001a36 <ST7701_Delay+0x12>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b63      	cmp	r3, #99	@ 0x63
 8001a3a:	ddf9      	ble.n	8001a30 <ST7701_Delay+0xc>
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <ST7701_SetCS>:

static void ST7701_SetCS(uint8_t state) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7701_CS_PORT, ST7701_CS_PIN, (state ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <ST7701_SetCS+0x2c>)
 8001a6a:	f003 fd33 	bl	80054d4 <HAL_GPIO_WritePin>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	58020000 	.word	0x58020000

08001a7c <ST7701_SetSCK>:

static void ST7701_SetSCK(uint8_t state) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7701_SCK_PORT, ST7701_SCK_PIN, (state ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	2108      	movs	r1, #8
 8001a96:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <ST7701_SetSCK+0x28>)
 8001a98:	f003 fd1c 	bl	80054d4 <HAL_GPIO_WritePin>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	58020400 	.word	0x58020400

08001aa8 <ST7701_SetMOSI>:

static void ST7701_SetMOSI(uint8_t state) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7701_MOSI_PORT, ST7701_MOSI_PIN, (state ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <ST7701_SetMOSI+0x28>)
 8001ac4:	f003 fd06 	bl	80054d4 <HAL_GPIO_WritePin>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	58020000 	.word	0x58020000

08001ad4 <ST7701_Send9Bit>:

static void ST7701_Send9Bit(uint16_t data) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
    // Pull CS low to begin transmission
    ST7701_SetCS(0);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff ffb4 	bl	8001a4c <ST7701_SetCS>

    // Send 9-bit data, MSB first
    for (int i = 8; i >= 0; i--) {
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e017      	b.n	8001b1a <ST7701_Send9Bit+0x46>
        // Set MOSI to the current bit
        ST7701_SetMOSI((data >> i) & 0x01);
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fa42 f303 	asr.w	r3, r2, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffd4 	bl	8001aa8 <ST7701_SetMOSI>

        // Toggle clock
        ST7701_SetSCK(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff ffbb 	bl	8001a7c <ST7701_SetSCK>
        ST7701_Delay();
 8001b06:	f7ff ff8d 	bl	8001a24 <ST7701_Delay>
        ST7701_SetSCK(0);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff ffb6 	bl	8001a7c <ST7701_SetSCK>
        ST7701_Delay();
 8001b10:	f7ff ff88 	bl	8001a24 <ST7701_Delay>
    for (int i = 8; i >= 0; i--) {
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dae4      	bge.n	8001aea <ST7701_Send9Bit+0x16>
    }

    // Pull CS high to end transmission
    ST7701_SetCS(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff ff93 	bl	8001a4c <ST7701_SetCS>
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <ST7701_SendCommand>:

HAL_StatusTypeDef ST7701_SendCommand(uint8_t cmd) {
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
    // Send command with C/D bit = 0 (Command mode)
    uint16_t command = (ST7701_CMD << 8) | cmd;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	81fb      	strh	r3, [r7, #14]
    ST7701_Send9Bit(command);
 8001b3c:	89fb      	ldrh	r3, [r7, #14]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffc8 	bl	8001ad4 <ST7701_Send9Bit>
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <ST7701_Init>:
    ST7701_Send9Bit(dataWithCD);
    return HAL_OK;
}


HAL_StatusTypeDef ST7701_Init(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    // Reset the display using PE10
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET); // Assert reset (PE10 low)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b5c:	481b      	ldr	r0, [pc, #108]	@ (8001bcc <ST7701_Init+0x7c>)
 8001b5e:	f003 fcb9 	bl	80054d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001b62:	2005      	movs	r0, #5
 8001b64:	f000 ff32 	bl	80029cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET); // Release reset (PE10 high)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b6e:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <ST7701_Init+0x7c>)
 8001b70:	f003 fcb0 	bl	80054d4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001b74:	2032      	movs	r0, #50	@ 0x32
 8001b76:	f000 ff29 	bl	80029cc <HAL_Delay>

    // Send initialization commands
    status = ST7701_SendCommand(0x01); // Software reset
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff ffd7 	bl	8001b2e <ST7701_SendCommand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <ST7701_Init+0x3e>
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	e01a      	b.n	8001bc4 <ST7701_Init+0x74>
    HAL_Delay(20); // Wait for reset to complete
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f000 ff1c 	bl	80029cc <HAL_Delay>

    status = ST7701_SendCommand(0x11); // Sleep Out
 8001b94:	2011      	movs	r0, #17
 8001b96:	f7ff ffca 	bl	8001b2e <ST7701_SendCommand>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <ST7701_Init+0x58>
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	e00d      	b.n	8001bc4 <ST7701_Init+0x74>
    HAL_Delay(20); // Wait for sleep out
 8001ba8:	2014      	movs	r0, #20
 8001baa:	f000 ff0f 	bl	80029cc <HAL_Delay>

    status = ST7701_SendCommand(0x29); // Display ON
 8001bae:	2029      	movs	r0, #41	@ 0x29
 8001bb0:	f7ff ffbd 	bl	8001b2e <ST7701_SendCommand>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <ST7701_Init+0x72>
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	e000      	b.n	8001bc4 <ST7701_Init+0x74>

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58021000 	.word	0x58021000

08001bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_MspInit+0x38>)
 8001bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_MspInit+0x38>)
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_MspInit+0x38>)
 8001be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f06f 0001 	mvn.w	r0, #1
 8001bfc:	f000 ffce 	bl	8002b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58024400 	.word	0x58024400

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	22c0      	movs	r2, #192	@ 0xc0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f015 ff1b 	bl	8017a68 <memset>
  if(hi2c->Instance==I2C4)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a59      	ldr	r2, [pc, #356]	@ (8001d9c <HAL_I2C_MspInit+0x190>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	f040 80ab 	bne.w	8001d94 <HAL_I2C_MspInit+0x188>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c3e:	f04f 0210 	mov.w	r2, #16
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4618      	mov	r0, r3
 8001c56:	f007 ffb7 	bl	8009bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001c60:	f7ff feda 	bl	8001a18 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c64:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c82:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483e      	ldr	r0, [pc, #248]	@ (8001da4 <HAL_I2C_MspInit+0x198>)
 8001caa:	f003 fa4b 	bl	8005144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001cae:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cbe:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <HAL_I2C_MspInit+0x194>)
 8001cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 8001ccc:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cce:	4a37      	ldr	r2, [pc, #220]	@ (8001dac <HAL_I2C_MspInit+0x1a0>)
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 8001cd2:	4b35      	ldr	r3, [pc, #212]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cd4:	220d      	movs	r2, #13
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b32      	ldr	r3, [pc, #200]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001d04:	4828      	ldr	r0, [pc, #160]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001d06:	f000 ffe9 	bl	8002cdc <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8001d10:	f7ff fe82 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001d18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d1a:	4a23      	ldr	r2, [pc, #140]	@ (8001da8 <HAL_I2C_MspInit+0x19c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d22:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <HAL_I2C_MspInit+0x1a8>)
 8001d24:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d28:	220e      	movs	r2, #14
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d52:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001d58:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d5a:	f000 ffbf 	bl	8002cdc <HAL_DMA_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_MspInit+0x15c>
    {
      Error_Handler();
 8001d64:	f7ff fe58 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d6e:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_I2C_MspInit+0x1a4>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2105      	movs	r1, #5
 8001d78:	205f      	movs	r0, #95	@ 0x5f
 8001d7a:	f000 ff0f 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001d7e:	205f      	movs	r0, #95	@ 0x5f
 8001d80:	f000 ff26 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2105      	movs	r1, #5
 8001d88:	2060      	movs	r0, #96	@ 0x60
 8001d8a:	f000 ff07 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001d8e:	2060      	movs	r0, #96	@ 0x60
 8001d90:	f000 ff1e 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001d94:	bf00      	nop
 8001d96:	37e8      	adds	r7, #232	@ 0xe8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58001c00 	.word	0x58001c00
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58020c00 	.word	0x58020c00
 8001da8:	24000340 	.word	0x24000340
 8001dac:	58025408 	.word	0x58025408
 8001db0:	240003b8 	.word	0x240003b8
 8001db4:	5802541c 	.word	0x5802541c

08001db8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0be      	sub	sp, #248	@ 0xf8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	22c0      	movs	r2, #192	@ 0xc0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f015 fe45 	bl	8017a68 <memset>
  if(hltdc->Instance==LTDC)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a94      	ldr	r2, [pc, #592]	@ (8002034 <HAL_LTDC_MspInit+0x27c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	f040 8121 	bne.w	800202c <HAL_LTDC_MspInit+0x274>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 17;
 8001dfa:	2311      	movs	r3, #17
 8001dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 25;
 8001e06:	2319      	movs	r3, #25
 8001e08:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f007 fed3 	bl	8009bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001e28:	f7ff fdf6 	bl	8001a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e2c:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e32:	4a81      	ldr	r2, [pc, #516]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e50:	4a79      	ldr	r2, [pc, #484]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5a:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	4b73      	ldr	r3, [pc, #460]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	4a72      	ldr	r2, [pc, #456]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b6c      	ldr	r3, [pc, #432]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e96:	4b68      	ldr	r3, [pc, #416]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea4:	4b64      	ldr	r3, [pc, #400]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	4a63      	ldr	r2, [pc, #396]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb4:	4b60      	ldr	r3, [pc, #384]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	4a5b      	ldr	r2, [pc, #364]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed2:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_LTDC_MspInit+0x280>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_B3
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001ee0:	23c1      	movs	r3, #193	@ 0xc1
 8001ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ef8:	230e      	movs	r3, #14
 8001efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f02:	4619      	mov	r1, r3
 8001f04:	484d      	ldr	r0, [pc, #308]	@ (800203c <HAL_LTDC_MspInit+0x284>)
 8001f06:	f003 f91d 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f0a:	2378      	movs	r3, #120	@ 0x78
 8001f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f22:	230e      	movs	r3, #14
 8001f24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4844      	ldr	r0, [pc, #272]	@ (8002040 <HAL_LTDC_MspInit+0x288>)
 8001f30:	f003 f908 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f4c:	2309      	movs	r3, #9
 8001f4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f56:	4619      	mov	r1, r3
 8001f58:	483a      	ldr	r0, [pc, #232]	@ (8002044 <HAL_LTDC_MspInit+0x28c>)
 8001f5a:	f003 f8f3 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001f5e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f78:	230e      	movs	r3, #14
 8001f7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4830      	ldr	r0, [pc, #192]	@ (8002048 <HAL_LTDC_MspInit+0x290>)
 8001f86:	f003 f8dd 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001f8a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fa4:	230e      	movs	r3, #14
 8001fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4824      	ldr	r0, [pc, #144]	@ (8002044 <HAL_LTDC_MspInit+0x28c>)
 8001fb2:	f003 f8c7 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001fd0:	230d      	movs	r3, #13
 8001fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4818      	ldr	r0, [pc, #96]	@ (8002040 <HAL_LTDC_MspInit+0x288>)
 8001fde:	f003 f8b1 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ffa:	230e      	movs	r3, #14
 8001ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002000:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002004:	4619      	mov	r1, r3
 8002006:	4811      	ldr	r0, [pc, #68]	@ (800204c <HAL_LTDC_MspInit+0x294>)
 8002008:	f003 f89c 	bl	8005144 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2105      	movs	r1, #5
 8002010:	2058      	movs	r0, #88	@ 0x58
 8002012:	f000 fdc3 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002016:	2058      	movs	r0, #88	@ 0x58
 8002018:	f000 fdda 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2105      	movs	r1, #5
 8002020:	2059      	movs	r0, #89	@ 0x59
 8002022:	f000 fdbb 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8002026:	2059      	movs	r0, #89	@ 0x59
 8002028:	f000 fdd2 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800202c:	bf00      	nop
 800202e:	37f8      	adds	r7, #248	@ 0xf8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	50001000 	.word	0x50001000
 8002038:	58024400 	.word	0x58024400
 800203c:	58020800 	.word	0x58020800
 8002040:	58020000 	.word	0x58020000
 8002044:	58020400 	.word	0x58020400
 8002048:	58021000 	.word	0x58021000
 800204c:	58020c00 	.word	0x58020c00

08002050 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0be      	sub	sp, #248	@ 0xf8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	22c0      	movs	r2, #192	@ 0xc0
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f015 fcf9 	bl	8017a68 <memset>
  if(hqspi->Instance==QUADSPI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7a      	ldr	r2, [pc, #488]	@ (8002264 <HAL_QSPI_MspInit+0x214>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f040 80ec 	bne.w	800225a <HAL_QSPI_MspInit+0x20a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800208e:	2300      	movs	r3, #0
 8002090:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4618      	mov	r0, r3
 8002098:	f007 fd96 	bl	8009bc8 <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80020a2:	f7ff fcb9 	bl	8001a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c4:	4b68      	ldr	r3, [pc, #416]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a67      	ldr	r2, [pc, #412]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b64      	ldr	r3, [pc, #400]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b61      	ldr	r3, [pc, #388]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002106:	4a58      	ldr	r2, [pc, #352]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002110:	4b55      	ldr	r3, [pc, #340]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211e:	4b52      	ldr	r3, [pc, #328]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800212e:	4b4e      	ldr	r3, [pc, #312]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002142:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800214c:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <HAL_QSPI_MspInit+0x218>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800215a:	2304      	movs	r3, #4
 800215c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002172:	2309      	movs	r3, #9
 8002174:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800217c:	4619      	mov	r1, r3
 800217e:	483b      	ldr	r0, [pc, #236]	@ (800226c <HAL_QSPI_MspInit+0x21c>)
 8002180:	f002 ffe0 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800219c:	2309      	movs	r3, #9
 800219e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4831      	ldr	r0, [pc, #196]	@ (8002270 <HAL_QSPI_MspInit+0x220>)
 80021aa:	f002 ffcb 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ae:	2304      	movs	r3, #4
 80021b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021c6:	2309      	movs	r3, #9
 80021c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4828      	ldr	r0, [pc, #160]	@ (8002274 <HAL_QSPI_MspInit+0x224>)
 80021d4:	f002 ffb6 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021f2:	2309      	movs	r3, #9
 80021f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021fc:	4619      	mov	r1, r3
 80021fe:	481e      	ldr	r0, [pc, #120]	@ (8002278 <HAL_QSPI_MspInit+0x228>)
 8002200:	f002 ffa0 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002208:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800221e:	2309      	movs	r3, #9
 8002220:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002228:	4619      	mov	r1, r3
 800222a:	4814      	ldr	r0, [pc, #80]	@ (800227c <HAL_QSPI_MspInit+0x22c>)
 800222c:	f002 ff8a 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002230:	2340      	movs	r3, #64	@ 0x40
 8002232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002248:	230a      	movs	r3, #10
 800224a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	@ (8002274 <HAL_QSPI_MspInit+0x224>)
 8002256:	f002 ff75 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800225a:	bf00      	nop
 800225c:	37f8      	adds	r7, #248	@ 0xf8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	52005000 	.word	0x52005000
 8002268:	58024400 	.word	0x58024400
 800226c:	58021000 	.word	0x58021000
 8002270:	58020000 	.word	0x58020000
 8002274:	58020400 	.word	0x58020400
 8002278:	58020c00 	.word	0x58020c00
 800227c:	58020800 	.word	0x58020800

08002280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	@ (80022f4 <HAL_TIM_Base_MspInit+0x74>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10f      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002292:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 8002294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 80022a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80022b0:	e01b      	b.n	80022ea <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <HAL_TIM_Base_MspInit+0x7c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d116      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 80022be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c2:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022cc:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_TIM_Base_MspInit+0x78>)
 80022ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2105      	movs	r1, #5
 80022de:	2036      	movs	r0, #54	@ 0x36
 80022e0:	f000 fc5c 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022e4:	2036      	movs	r0, #54	@ 0x36
 80022e6:	f000 fc73 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40010000 	.word	0x40010000
 80022f8:	58024400 	.word	0x58024400
 80022fc:	40001000 	.word	0x40001000

08002300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a13      	ldr	r2, [pc, #76]	@ (800236c <HAL_TIM_MspPostInit+0x6c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d11f      	bne.n	8002362 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <HAL_TIM_MspPostInit+0x70>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002328:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <HAL_TIM_MspPostInit+0x70>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002332:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <HAL_TIM_MspPostInit+0x70>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002344:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002352:	2301      	movs	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <HAL_TIM_MspPostInit+0x74>)
 800235e:	f002 fef1 	bl	8005144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40010000 	.word	0x40010000
 8002370:	58024400 	.word	0x58024400
 8002374:	58021000 	.word	0x58021000

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0ba      	sub	sp, #232	@ 0xe8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	22c0      	movs	r2, #192	@ 0xc0
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f015 fb65 	bl	8017a68 <memset>
  if(huart->Instance==UART8)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a32      	ldr	r2, [pc, #200]	@ (800246c <HAL_UART_MspInit+0xf4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d15d      	bne.n	8002464 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80023a8:	f04f 0202 	mov.w	r2, #2
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80023b8:	230c      	movs	r3, #12
 80023ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 80023c0:	2303      	movs	r3, #3
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80023c4:	2302      	movs	r3, #2
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80023c8:	23c0      	movs	r3, #192	@ 0xc0
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80023cc:	2320      	movs	r3, #32
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4618      	mov	r0, r3
 80023e0:	f007 fbf2 	bl	8009bc8 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80023ea:	f7ff fb15 	bl	8001a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 80023f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 8002400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002412:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <HAL_UART_MspInit+0xf8>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800242a:	2303      	movs	r3, #3
 800242c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002442:	2308      	movs	r3, #8
 8002444:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002448:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800244c:	4619      	mov	r1, r3
 800244e:	4809      	ldr	r0, [pc, #36]	@ (8002474 <HAL_UART_MspInit+0xfc>)
 8002450:	f002 fe78 	bl	8005144 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2105      	movs	r1, #5
 8002458:	2053      	movs	r0, #83	@ 0x53
 800245a:	f000 fb9f 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800245e:	2053      	movs	r0, #83	@ 0x53
 8002460:	f000 fbb6 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8002464:	bf00      	nop
 8002466:	37e8      	adds	r7, #232	@ 0xe8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40007c00 	.word	0x40007c00
 8002470:	58024400 	.word	0x58024400
 8002474:	58021000 	.word	0x58021000

08002478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b090      	sub	sp, #64	@ 0x40
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	d827      	bhi.n	80024d6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002486:	2200      	movs	r2, #0
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	201c      	movs	r0, #28
 800248c:	f000 fb86 	bl	8002b9c <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002490:	201c      	movs	r0, #28
 8002492:	f000 fb9d 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002496:	4a29      	ldr	r2, [pc, #164]	@ (800253c <HAL_InitTick+0xc4>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_InitTick+0xc8>)
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a2:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <HAL_InitTick+0xc8>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ac:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_InitTick+0xc8>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ba:	f107 0210 	add.w	r2, r7, #16
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f007 fb3d 	bl	8009b44 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_InitTick+0x6a>
 80024d4:	e001      	b.n	80024da <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02c      	b.n	8002534 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024da:	f007 fb07 	bl	8009aec <HAL_RCC_GetPCLK1Freq>
 80024de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80024e0:	e004      	b.n	80024ec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024e2:	f007 fb03 	bl	8009aec <HAL_RCC_GetPCLK1Freq>
 80024e6:	4603      	mov	r3, r0
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ee:	4a15      	ldr	r2, [pc, #84]	@ (8002544 <HAL_InitTick+0xcc>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	0c9b      	lsrs	r3, r3, #18
 80024f6:	3b01      	subs	r3, #1
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_InitTick+0xd0>)
 80024fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_InitTick+0xd0>)
 8002504:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002508:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <HAL_InitTick+0xd0>)
 800250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002510:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_InitTick+0xd0>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_InitTick+0xd0>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800251c:	480a      	ldr	r0, [pc, #40]	@ (8002548 <HAL_InitTick+0xd0>)
 800251e:	f009 f97f 	bl	800b820 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002528:	4807      	ldr	r0, [pc, #28]	@ (8002548 <HAL_InitTick+0xd0>)
 800252a:	f009 f9d1 	bl	800b8d0 <HAL_TIM_Base_Start_IT>
 800252e:	4603      	mov	r3, r0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3740      	adds	r7, #64	@ 0x40
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	24000008 	.word	0x24000008
 8002540:	58024400 	.word	0x58024400
 8002544:	431bde83 	.word	0x431bde83
 8002548:	24070edc 	.word	0x24070edc

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <MemManage_Handler+0x4>

08002564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <UsageFault_Handler+0x4>

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <TIM2_IRQHandler+0x10>)
 800258a:	f009 fbb7 	bl	800bcfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	24070edc 	.word	0x24070edc

08002598 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800259c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025a0:	f002 ffb1 	bl	8005506 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <TIM6_DAC_IRQHandler+0x10>)
 80025ae:	f009 fba5 	bl	800bcfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	24000570 	.word	0x24000570

080025bc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <UART8_IRQHandler+0x10>)
 80025c2:	f00a fcdd 	bl	800cf80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240005bc 	.word	0x240005bc

080025d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <LTDC_IRQHandler+0x10>)
 80025d6:	f004 fbff 	bl	8006dd8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	24000430 	.word	0x24000430

080025e4 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <LTDC_ER_IRQHandler+0x10>)
 80025ea:	f004 fbf5 	bl	8006dd8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000430 	.word	0x24000430

080025f8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <I2C4_EV_IRQHandler+0x10>)
 80025fe:	f003 f94d 	bl	800589c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	240002ec 	.word	0x240002ec

0800260c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <I2C4_ER_IRQHandler+0x10>)
 8002612:	f003 f95d 	bl	80058d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240002ec 	.word	0x240002ec

08002620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <OTG_FS_IRQHandler+0x10>)
 8002626:	f005 f846 	bl	80076b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24076df8 	.word	0x24076df8

08002634 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <BDMA_Channel0_IRQHandler+0x10>)
 800263a:	f001 fc0f 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	24000340 	.word	0x24000340

08002648 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <BDMA_Channel1_IRQHandler+0x10>)
 800264e:	f001 fc05 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240003b8 	.word	0x240003b8

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_kill>:

int _kill(int pid, int sig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002676:	f015 fb35 	bl	8017ce4 <__errno>
 800267a:	4603      	mov	r3, r0
 800267c:	2216      	movs	r2, #22
 800267e:	601a      	str	r2, [r3, #0]
  return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_exit>:

void _exit (int status)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffe7 	bl	800266c <_kill>
  while (1) {}    /* Make sure we hang here */
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <_exit+0x12>

080026a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00a      	b.n	80026ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b4:	f3af 8000 	nop.w
 80026b8:	4601      	mov	r1, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf0      	blt.n	80026b4 <_read+0x12>
  }

  return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f015 fab6 	bl	8017ce4 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	24080000 	.word	0x24080000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	24070f28 	.word	0x24070f28
 80027ac:	24077648 	.word	0x24077648

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027b4:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <SystemInit+0xe4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a36      	ldr	r2, [pc, #216]	@ (8002894 <SystemInit+0xe4>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027c4:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <SystemInit+0xe8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d807      	bhi.n	80027e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <SystemInit+0xe8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002898 <SystemInit+0xe8>)
 80027da:	f043 0307 	orr.w	r3, r3, #7
 80027de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027e0:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <SystemInit+0xec>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2d      	ldr	r2, [pc, #180]	@ (800289c <SystemInit+0xec>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027ec:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <SystemInit+0xec>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <SystemInit+0xec>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4929      	ldr	r1, [pc, #164]	@ (800289c <SystemInit+0xec>)
 80027f8:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <SystemInit+0xf0>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027fe:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <SystemInit+0xe8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800280a:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <SystemInit+0xe8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 030f 	bic.w	r3, r3, #15
 8002812:	4a21      	ldr	r2, [pc, #132]	@ (8002898 <SystemInit+0xe8>)
 8002814:	f043 0307 	orr.w	r3, r3, #7
 8002818:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <SystemInit+0xec>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <SystemInit+0xec>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <SystemInit+0xec>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <SystemInit+0xec>)
 800282e:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <SystemInit+0xf4>)
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <SystemInit+0xec>)
 8002834:	4a1c      	ldr	r2, [pc, #112]	@ (80028a8 <SystemInit+0xf8>)
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002838:	4b18      	ldr	r3, [pc, #96]	@ (800289c <SystemInit+0xec>)
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <SystemInit+0xfc>)
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <SystemInit+0xec>)
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <SystemInit+0xec>)
 8002846:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <SystemInit+0xfc>)
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <SystemInit+0xec>)
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <SystemInit+0xec>)
 8002852:	4a16      	ldr	r2, [pc, #88]	@ (80028ac <SystemInit+0xfc>)
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <SystemInit+0xec>)
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <SystemInit+0xec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <SystemInit+0xec>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <SystemInit+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <SystemInit+0x100>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <SystemInit+0x104>)
 8002874:	4013      	ands	r3, r2
 8002876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800287a:	d202      	bcs.n	8002882 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <SystemInit+0x108>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <SystemInit+0x10c>)
 8002884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002888:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00
 8002898:	52002000 	.word	0x52002000
 800289c:	58024400 	.word	0x58024400
 80028a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80028a4:	02020200 	.word	0x02020200
 80028a8:	01ff0000 	.word	0x01ff0000
 80028ac:	01010280 	.word	0x01010280
 80028b0:	5c001000 	.word	0x5c001000
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	51008108 	.word	0x51008108
 80028bc:	52004000 	.word	0x52004000

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028c4:	f7ff ff74 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c8:	480c      	ldr	r0, [pc, #48]	@ (80028fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ca:	490d      	ldr	r1, [pc, #52]	@ (8002900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e0:	4c0a      	ldr	r4, [pc, #40]	@ (800290c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ee:	f015 f9ff 	bl	8017cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7fe fa7b 	bl	8000dec <main>
  bx  lr
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002900:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8002904:	0801a758 	.word	0x0801a758
  ldr r2, =_sbss
 8002908:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 800290c:	24077648 	.word	0x24077648

08002910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC3_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291a:	2003      	movs	r0, #3
 800291c:	f000 f933 	bl	8002b86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002920:	f006 ff3a 	bl	8009798 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_Init+0x68>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4913      	ldr	r1, [pc, #76]	@ (8002980 <HAL_Init+0x6c>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <HAL_Init+0x68>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <HAL_Init+0x6c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a0b      	ldr	r2, [pc, #44]	@ (8002984 <HAL_Init+0x70>)
 8002956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002958:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <HAL_Init+0x74>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295e:	200f      	movs	r0, #15
 8002960:	f7ff fd8a 	bl	8002478 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e002      	b.n	8002974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800296e:	f7ff f92f 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	58024400 	.word	0x58024400
 8002980:	0801a2d0 	.word	0x0801a2d0
 8002984:	24000004 	.word	0x24000004
 8002988:	24000000 	.word	0x24000000

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2400000c 	.word	0x2400000c
 80029b0:	24070f2c 	.word	0x24070f2c

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	24070f2c 	.word	0x24070f2c

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2400000c 	.word	0x2400000c

08002a14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_GetREVID+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	5c001000 	.word	0x5c001000

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x40>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x40>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00
 8002a70:	05fa0000 	.word	0x05fa0000

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff4c 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002baa:	f7ff ff63 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f7ff ffb3 	bl	8002b20 <NVIC_EncodePriority>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff82 	bl	8002acc <__NVIC_SetPriority>
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff56 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bf0:	f3bf 8f5f 	dmb	sy
}
 8002bf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <HAL_MPU_Disable+0x28>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <HAL_MPU_Disable+0x28>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_MPU_Disable+0x2c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	e000ed90 	.word	0xe000ed90

08002c1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c24:	4a0b      	ldr	r2, [pc, #44]	@ (8002c54 <HAL_MPU_Enable+0x38>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_MPU_Enable+0x3c>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_MPU_Enable+0x3c>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3a:	f3bf 8f4f 	dsb	sy
}
 8002c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c40:	f3bf 8f6f 	isb	sy
}
 8002c44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed90 	.word	0xe000ed90
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785a      	ldrb	r2, [r3, #1]
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7b1b      	ldrb	r3, [r3, #12]
 8002c84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7adb      	ldrb	r3, [r3, #11]
 8002c8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a9b      	ldrb	r3, [r3, #10]
 8002c92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7b5b      	ldrb	r3, [r3, #13]
 8002c9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7b9b      	ldrb	r3, [r3, #14]
 8002ca2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7bdb      	ldrb	r3, [r3, #15]
 8002caa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7a5b      	ldrb	r3, [r3, #9]
 8002cb2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7a1b      	ldrb	r3, [r3, #8]
 8002cba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cc8:	6113      	str	r3, [r2, #16]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed90 	.word	0xe000ed90

08002cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff fe66 	bl	80029b4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e316      	b.n	8003322 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a66      	ldr	r2, [pc, #408]	@ (8002e94 <HAL_DMA_Init+0x1b8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <HAL_DMA_Init+0x1bc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a63      	ldr	r2, [pc, #396]	@ (8002e9c <HAL_DMA_Init+0x1c0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a62      	ldr	r2, [pc, #392]	@ (8002ea0 <HAL_DMA_Init+0x1c4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <HAL_DMA_Init+0x1c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea8 <HAL_DMA_Init+0x1cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	@ (8002eac <HAL_DMA_Init+0x1d0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_DMA_Init+0x1d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb4 <HAL_DMA_Init+0x1d8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a59      	ldr	r2, [pc, #356]	@ (8002eb8 <HAL_DMA_Init+0x1dc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_DMA_Init+0x1e0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_DMA_Init+0x1e4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a54      	ldr	r2, [pc, #336]	@ (8002ec4 <HAL_DMA_Init+0x1e8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_DMA_Init+0x1ec>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_DMA_Init+0x1f0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a50      	ldr	r2, [pc, #320]	@ (8002ed0 <HAL_DMA_Init+0x1f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0xbc>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_Init+0xbe>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 813b 	beq.w	8003016 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a37      	ldr	r2, [pc, #220]	@ (8002e94 <HAL_DMA_Init+0x1b8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04a      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	@ (8002e98 <HAL_DMA_Init+0x1bc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d045      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	@ (8002e9c <HAL_DMA_Init+0x1c0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ea0 <HAL_DMA_Init+0x1c4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03b      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	@ (8002ea4 <HAL_DMA_Init+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d036      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a30      	ldr	r2, [pc, #192]	@ (8002ea8 <HAL_DMA_Init+0x1cc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d031      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	@ (8002eac <HAL_DMA_Init+0x1d0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02c      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <HAL_DMA_Init+0x1d4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d027      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <HAL_DMA_Init+0x1d8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d022      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <HAL_DMA_Init+0x1dc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d01d      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	@ (8002ebc <HAL_DMA_Init+0x1e0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <HAL_DMA_Init+0x1e4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	@ (8002ec4 <HAL_DMA_Init+0x1e8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <HAL_DMA_Init+0x1ec>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	@ (8002ecc <HAL_DMA_Init+0x1f0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	@ (8002ed0 <HAL_DMA_Init+0x1f4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_Init+0x186>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e007      	b.n	8002e72 <HAL_DMA_Init+0x196>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e72:	e02f      	b.n	8002ed4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e74:	f7ff fd9e 	bl	80029b4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d928      	bls.n	8002ed4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e246      	b.n	8003322 <HAL_DMA_Init+0x646>
 8002e94:	40020010 	.word	0x40020010
 8002e98:	40020028 	.word	0x40020028
 8002e9c:	40020040 	.word	0x40020040
 8002ea0:	40020058 	.word	0x40020058
 8002ea4:	40020070 	.word	0x40020070
 8002ea8:	40020088 	.word	0x40020088
 8002eac:	400200a0 	.word	0x400200a0
 8002eb0:	400200b8 	.word	0x400200b8
 8002eb4:	40020410 	.word	0x40020410
 8002eb8:	40020428 	.word	0x40020428
 8002ebc:	40020440 	.word	0x40020440
 8002ec0:	40020458 	.word	0x40020458
 8002ec4:	40020470 	.word	0x40020470
 8002ec8:	40020488 	.word	0x40020488
 8002ecc:	400204a0 	.word	0x400204a0
 8002ed0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1c8      	bne.n	8002e74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4b83      	ldr	r3, [pc, #524]	@ (80030fc <HAL_DMA_Init+0x420>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d107      	bne.n	8002f38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4313      	orrs	r3, r2
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f38:	4b71      	ldr	r3, [pc, #452]	@ (8003100 <HAL_DMA_Init+0x424>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b71      	ldr	r3, [pc, #452]	@ (8003104 <HAL_DMA_Init+0x428>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f44:	d328      	bcc.n	8002f98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b28      	cmp	r3, #40	@ 0x28
 8002f4c:	d903      	bls.n	8002f56 <HAL_DMA_Init+0x27a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f54:	d917      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f5c:	d903      	bls.n	8002f66 <HAL_DMA_Init+0x28a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b42      	cmp	r3, #66	@ 0x42
 8002f64:	d90f      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b46      	cmp	r3, #70	@ 0x46
 8002f6c:	d903      	bls.n	8002f76 <HAL_DMA_Init+0x29a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b48      	cmp	r3, #72	@ 0x48
 8002f74:	d907      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f7c:	d905      	bls.n	8002f8a <HAL_DMA_Init+0x2ae>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b52      	cmp	r3, #82	@ 0x52
 8002f84:	d801      	bhi.n	8002f8a <HAL_DMA_Init+0x2ae>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_DMA_Init+0x2b0>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d117      	bne.n	8002ff2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 ff2b 	bl	8004e30 <DMA_CheckFifoParam>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e197      	b.n	8003322 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 fe66 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 8003000:	4603      	mov	r3, r0
 8003002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	223f      	movs	r2, #63	@ 0x3f
 800300e:	409a      	lsls	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e0cd      	b.n	80031b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <HAL_DMA_Init+0x42c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a39      	ldr	r2, [pc, #228]	@ (800310c <HAL_DMA_Init+0x430>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a38      	ldr	r2, [pc, #224]	@ (8003110 <HAL_DMA_Init+0x434>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a36      	ldr	r2, [pc, #216]	@ (8003114 <HAL_DMA_Init+0x438>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a35      	ldr	r2, [pc, #212]	@ (8003118 <HAL_DMA_Init+0x43c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a33      	ldr	r2, [pc, #204]	@ (800311c <HAL_DMA_Init+0x440>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <HAL_DMA_Init+0x444>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_DMA_Init+0x448>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x38e>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_DMA_Init+0x390>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8097 	beq.w	80031a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_DMA_Init+0x42c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d021      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_DMA_Init+0x430>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01c      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <HAL_DMA_Init+0x434>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d017      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_DMA_Init+0x438>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_DMA_Init+0x43c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00d      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_DMA_Init+0x440>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_DMA_Init+0x444>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_DMA_Init+0x448>)
 80030be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <HAL_DMA_Init+0x44c>)
 80030dc:	4013      	ands	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d021      	beq.n	800312c <HAL_DMA_Init+0x450>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b80      	cmp	r3, #128	@ 0x80
 80030ee:	d102      	bne.n	80030f6 <HAL_DMA_Init+0x41a>
 80030f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f4:	e01b      	b.n	800312e <HAL_DMA_Init+0x452>
 80030f6:	2300      	movs	r3, #0
 80030f8:	e019      	b.n	800312e <HAL_DMA_Init+0x452>
 80030fa:	bf00      	nop
 80030fc:	fe10803f 	.word	0xfe10803f
 8003100:	5c001000 	.word	0x5c001000
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	58025408 	.word	0x58025408
 800310c:	5802541c 	.word	0x5802541c
 8003110:	58025430 	.word	0x58025430
 8003114:	58025444 	.word	0x58025444
 8003118:	58025458 	.word	0x58025458
 800311c:	5802546c 	.word	0x5802546c
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494
 8003128:	fffe000f 	.word	0xfffe000f
 800312c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800313c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800314c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800315c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b6e      	ldr	r3, [pc, #440]	@ (800332c <HAL_DMA_Init+0x650>)
 8003174:	4413      	add	r3, r2
 8003176:	4a6e      	ldr	r2, [pc, #440]	@ (8003330 <HAL_DMA_Init+0x654>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 fda1 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 800318a:	4603      	mov	r3, r0
 800318c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2201      	movs	r2, #1
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e008      	b.n	80031b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0b7      	b.n	8003322 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003334 <HAL_DMA_Init+0x658>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d072      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003338 <HAL_DMA_Init+0x65c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d06d      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_DMA_Init+0x660>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d068      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003340 <HAL_DMA_Init+0x664>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d063      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_DMA_Init+0x668>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d05e      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a57      	ldr	r2, [pc, #348]	@ (8003348 <HAL_DMA_Init+0x66c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d059      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a56      	ldr	r2, [pc, #344]	@ (800334c <HAL_DMA_Init+0x670>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d054      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a54      	ldr	r2, [pc, #336]	@ (8003350 <HAL_DMA_Init+0x674>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04f      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a53      	ldr	r2, [pc, #332]	@ (8003354 <HAL_DMA_Init+0x678>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a51      	ldr	r2, [pc, #324]	@ (8003358 <HAL_DMA_Init+0x67c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a50      	ldr	r2, [pc, #320]	@ (800335c <HAL_DMA_Init+0x680>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4e      	ldr	r2, [pc, #312]	@ (8003360 <HAL_DMA_Init+0x684>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4d      	ldr	r2, [pc, #308]	@ (8003364 <HAL_DMA_Init+0x688>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_DMA_Init+0x68c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <HAL_DMA_Init+0x690>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a48      	ldr	r2, [pc, #288]	@ (8003370 <HAL_DMA_Init+0x694>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a47      	ldr	r2, [pc, #284]	@ (8003374 <HAL_DMA_Init+0x698>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a45      	ldr	r2, [pc, #276]	@ (8003378 <HAL_DMA_Init+0x69c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a44      	ldr	r2, [pc, #272]	@ (800337c <HAL_DMA_Init+0x6a0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a42      	ldr	r2, [pc, #264]	@ (8003380 <HAL_DMA_Init+0x6a4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a41      	ldr	r2, [pc, #260]	@ (8003384 <HAL_DMA_Init+0x6a8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3f      	ldr	r2, [pc, #252]	@ (8003388 <HAL_DMA_Init+0x6ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3e      	ldr	r2, [pc, #248]	@ (800338c <HAL_DMA_Init+0x6b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3c      	ldr	r2, [pc, #240]	@ (8003390 <HAL_DMA_Init+0x6b4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_DMA_Init+0x5ca>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_Init+0x5cc>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d032      	beq.n	8003312 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fe3b 	bl	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d102      	bne.n	80032c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_DMA_Init+0x624>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d80c      	bhi.n	8003300 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 feb8 	bl	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e008      	b.n	8003312 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	a7fdabf8 	.word	0xa7fdabf8
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	40020010 	.word	0x40020010
 8003338:	40020028 	.word	0x40020028
 800333c:	40020040 	.word	0x40020040
 8003340:	40020058 	.word	0x40020058
 8003344:	40020070 	.word	0x40020070
 8003348:	40020088 	.word	0x40020088
 800334c:	400200a0 	.word	0x400200a0
 8003350:	400200b8 	.word	0x400200b8
 8003354:	40020410 	.word	0x40020410
 8003358:	40020428 	.word	0x40020428
 800335c:	40020440 	.word	0x40020440
 8003360:	40020458 	.word	0x40020458
 8003364:	40020470 	.word	0x40020470
 8003368:	40020488 	.word	0x40020488
 800336c:	400204a0 	.word	0x400204a0
 8003370:	400204b8 	.word	0x400204b8
 8003374:	58025408 	.word	0x58025408
 8003378:	5802541c 	.word	0x5802541c
 800337c:	58025430 	.word	0x58025430
 8003380:	58025444 	.word	0x58025444
 8003384:	58025458 	.word	0x58025458
 8003388:	5802546c 	.word	0x5802546c
 800338c:	58025480 	.word	0x58025480
 8003390:	58025494 	.word	0x58025494

08003394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff fb0a 	bl	80029b4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e2dc      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e2cd      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a76      	ldr	r2, [pc, #472]	@ (80035a8 <HAL_DMA_Abort+0x214>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a74      	ldr	r2, [pc, #464]	@ (80035ac <HAL_DMA_Abort+0x218>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_DMA_Abort+0x21c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a71      	ldr	r2, [pc, #452]	@ (80035b4 <HAL_DMA_Abort+0x220>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a70      	ldr	r2, [pc, #448]	@ (80035b8 <HAL_DMA_Abort+0x224>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6e      	ldr	r2, [pc, #440]	@ (80035bc <HAL_DMA_Abort+0x228>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6d      	ldr	r2, [pc, #436]	@ (80035c0 <HAL_DMA_Abort+0x22c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6b      	ldr	r2, [pc, #428]	@ (80035c4 <HAL_DMA_Abort+0x230>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6a      	ldr	r2, [pc, #424]	@ (80035c8 <HAL_DMA_Abort+0x234>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	@ (80035cc <HAL_DMA_Abort+0x238>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a67      	ldr	r2, [pc, #412]	@ (80035d0 <HAL_DMA_Abort+0x23c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a65      	ldr	r2, [pc, #404]	@ (80035d4 <HAL_DMA_Abort+0x240>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a64      	ldr	r2, [pc, #400]	@ (80035d8 <HAL_DMA_Abort+0x244>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a62      	ldr	r2, [pc, #392]	@ (80035dc <HAL_DMA_Abort+0x248>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a61      	ldr	r2, [pc, #388]	@ (80035e0 <HAL_DMA_Abort+0x24c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5f      	ldr	r2, [pc, #380]	@ (80035e4 <HAL_DMA_Abort+0x250>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_DMA_Abort+0xda>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_DMA_Abort+0xdc>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 021e 	bic.w	r2, r2, #30
 8003482:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003492:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e00a      	b.n	80034b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 020e 	bic.w	r2, r2, #14
 80034aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3c      	ldr	r2, [pc, #240]	@ (80035a8 <HAL_DMA_Abort+0x214>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d072      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3a      	ldr	r2, [pc, #232]	@ (80035ac <HAL_DMA_Abort+0x218>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d06d      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a39      	ldr	r2, [pc, #228]	@ (80035b0 <HAL_DMA_Abort+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d068      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a37      	ldr	r2, [pc, #220]	@ (80035b4 <HAL_DMA_Abort+0x220>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d063      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_DMA_Abort+0x224>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d05e      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a34      	ldr	r2, [pc, #208]	@ (80035bc <HAL_DMA_Abort+0x228>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d059      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <HAL_DMA_Abort+0x22c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d054      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a31      	ldr	r2, [pc, #196]	@ (80035c4 <HAL_DMA_Abort+0x230>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04f      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_DMA_Abort+0x234>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <HAL_DMA_Abort+0x238>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <HAL_DMA_Abort+0x23c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <HAL_DMA_Abort+0x240>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <HAL_DMA_Abort+0x244>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <HAL_DMA_Abort+0x248>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_DMA_Abort+0x24c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_DMA_Abort+0x250>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_DMA_Abort+0x254>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a22      	ldr	r2, [pc, #136]	@ (80035ec <HAL_DMA_Abort+0x258>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_DMA_Abort+0x25c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_DMA_Abort+0x260>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1e      	ldr	r2, [pc, #120]	@ (80035f8 <HAL_DMA_Abort+0x264>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <HAL_DMA_Abort+0x268>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_DMA_Abort+0x26c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_DMA_Abort+0x270>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d132      	bne.n	8003608 <HAL_DMA_Abort+0x274>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e031      	b.n	800360a <HAL_DMA_Abort+0x276>
 80035a6:	bf00      	nop
 80035a8:	40020010 	.word	0x40020010
 80035ac:	40020028 	.word	0x40020028
 80035b0:	40020040 	.word	0x40020040
 80035b4:	40020058 	.word	0x40020058
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40020088 	.word	0x40020088
 80035c0:	400200a0 	.word	0x400200a0
 80035c4:	400200b8 	.word	0x400200b8
 80035c8:	40020410 	.word	0x40020410
 80035cc:	40020428 	.word	0x40020428
 80035d0:	40020440 	.word	0x40020440
 80035d4:	40020458 	.word	0x40020458
 80035d8:	40020470 	.word	0x40020470
 80035dc:	40020488 	.word	0x40020488
 80035e0:	400204a0 	.word	0x400204a0
 80035e4:	400204b8 	.word	0x400204b8
 80035e8:	58025408 	.word	0x58025408
 80035ec:	5802541c 	.word	0x5802541c
 80035f0:	58025430 	.word	0x58025430
 80035f4:	58025444 	.word	0x58025444
 80035f8:	58025458 	.word	0x58025458
 80035fc:	5802546c 	.word	0x5802546c
 8003600:	58025480 	.word	0x58025480
 8003604:	58025494 	.word	0x58025494
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800361c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6d      	ldr	r2, [pc, #436]	@ (80037d8 <HAL_DMA_Abort+0x444>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	@ (80037dc <HAL_DMA_Abort+0x448>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6a      	ldr	r2, [pc, #424]	@ (80037e0 <HAL_DMA_Abort+0x44c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a68      	ldr	r2, [pc, #416]	@ (80037e4 <HAL_DMA_Abort+0x450>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a67      	ldr	r2, [pc, #412]	@ (80037e8 <HAL_DMA_Abort+0x454>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a65      	ldr	r2, [pc, #404]	@ (80037ec <HAL_DMA_Abort+0x458>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a64      	ldr	r2, [pc, #400]	@ (80037f0 <HAL_DMA_Abort+0x45c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a62      	ldr	r2, [pc, #392]	@ (80037f4 <HAL_DMA_Abort+0x460>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a61      	ldr	r2, [pc, #388]	@ (80037f8 <HAL_DMA_Abort+0x464>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5f      	ldr	r2, [pc, #380]	@ (80037fc <HAL_DMA_Abort+0x468>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_DMA_Abort+0x46c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5c      	ldr	r2, [pc, #368]	@ (8003804 <HAL_DMA_Abort+0x470>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5b      	ldr	r2, [pc, #364]	@ (8003808 <HAL_DMA_Abort+0x474>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a59      	ldr	r2, [pc, #356]	@ (800380c <HAL_DMA_Abort+0x478>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_DMA_Abort+0x47c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a56      	ldr	r2, [pc, #344]	@ (8003814 <HAL_DMA_Abort+0x480>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_Abort+0x33c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_DMA_Abort+0x34c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036e0:	e013      	b.n	800370a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e2:	f7ff f967 	bl	80029b4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d90c      	bls.n	800370a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2203      	movs	r2, #3
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12d      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2f      	ldr	r2, [pc, #188]	@ (80037d8 <HAL_DMA_Abort+0x444>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_DMA_Abort+0x448>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2c      	ldr	r2, [pc, #176]	@ (80037e0 <HAL_DMA_Abort+0x44c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <HAL_DMA_Abort+0x450>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <HAL_DMA_Abort+0x454>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a27      	ldr	r2, [pc, #156]	@ (80037ec <HAL_DMA_Abort+0x458>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a26      	ldr	r2, [pc, #152]	@ (80037f0 <HAL_DMA_Abort+0x45c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_DMA_Abort+0x460>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a23      	ldr	r2, [pc, #140]	@ (80037f8 <HAL_DMA_Abort+0x464>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_DMA_Abort+0x468>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <HAL_DMA_Abort+0x46c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <HAL_DMA_Abort+0x470>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1d      	ldr	r2, [pc, #116]	@ (8003808 <HAL_DMA_Abort+0x474>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <HAL_DMA_Abort+0x478>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003810 <HAL_DMA_Abort+0x47c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <HAL_DMA_Abort+0x480>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Abort+0x426>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_DMA_Abort+0x428>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02b      	beq.n	8003818 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	223f      	movs	r2, #63	@ 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	e02a      	b.n	800382e <HAL_DMA_Abort+0x49a>
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4f      	ldr	r2, [pc, #316]	@ (8003970 <HAL_DMA_Abort+0x5dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d072      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a4d      	ldr	r2, [pc, #308]	@ (8003974 <HAL_DMA_Abort+0x5e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d06d      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4c      	ldr	r2, [pc, #304]	@ (8003978 <HAL_DMA_Abort+0x5e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d068      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4a      	ldr	r2, [pc, #296]	@ (800397c <HAL_DMA_Abort+0x5e8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d063      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a49      	ldr	r2, [pc, #292]	@ (8003980 <HAL_DMA_Abort+0x5ec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d05e      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a47      	ldr	r2, [pc, #284]	@ (8003984 <HAL_DMA_Abort+0x5f0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d059      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a46      	ldr	r2, [pc, #280]	@ (8003988 <HAL_DMA_Abort+0x5f4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d054      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a44      	ldr	r2, [pc, #272]	@ (800398c <HAL_DMA_Abort+0x5f8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d04f      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <HAL_DMA_Abort+0x5fc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a41      	ldr	r2, [pc, #260]	@ (8003994 <HAL_DMA_Abort+0x600>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a40      	ldr	r2, [pc, #256]	@ (8003998 <HAL_DMA_Abort+0x604>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3e      	ldr	r2, [pc, #248]	@ (800399c <HAL_DMA_Abort+0x608>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	@ (80039a0 <HAL_DMA_Abort+0x60c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_DMA_Abort+0x610>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <HAL_DMA_Abort+0x614>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a38      	ldr	r2, [pc, #224]	@ (80039ac <HAL_DMA_Abort+0x618>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <HAL_DMA_Abort+0x61c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	@ (80039b4 <HAL_DMA_Abort+0x620>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a34      	ldr	r2, [pc, #208]	@ (80039b8 <HAL_DMA_Abort+0x624>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <HAL_DMA_Abort+0x628>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a31      	ldr	r2, [pc, #196]	@ (80039c0 <HAL_DMA_Abort+0x62c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <HAL_DMA_Abort+0x630>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2e      	ldr	r2, [pc, #184]	@ (80039c8 <HAL_DMA_Abort+0x634>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2c      	ldr	r2, [pc, #176]	@ (80039cc <HAL_DMA_Abort+0x638>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_DMA_Abort+0x58e>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_DMA_Abort+0x590>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003930:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003948:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003952:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	58025408 	.word	0x58025408
 80039b4:	5802541c 	.word	0x5802541c
 80039b8:	58025430 	.word	0x58025430
 80039bc:	58025444 	.word	0x58025444
 80039c0:	58025458 	.word	0x58025458
 80039c4:	5802546c 	.word	0x5802546c
 80039c8:	58025480 	.word	0x58025480
 80039cc:	58025494 	.word	0x58025494

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e237      	b.n	8003e52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e22c      	b.n	8003e52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003b70 <HAL_DMA_Abort_IT+0x1a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04a      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5b      	ldr	r2, [pc, #364]	@ (8003b74 <HAL_DMA_Abort_IT+0x1a4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a59      	ldr	r2, [pc, #356]	@ (8003b78 <HAL_DMA_Abort_IT+0x1a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d040      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a58      	ldr	r2, [pc, #352]	@ (8003b7c <HAL_DMA_Abort_IT+0x1ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03b      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a56      	ldr	r2, [pc, #344]	@ (8003b80 <HAL_DMA_Abort_IT+0x1b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a55      	ldr	r2, [pc, #340]	@ (8003b84 <HAL_DMA_Abort_IT+0x1b4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a53      	ldr	r2, [pc, #332]	@ (8003b88 <HAL_DMA_Abort_IT+0x1b8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02c      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_DMA_Abort_IT+0x1bc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d027      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a50      	ldr	r2, [pc, #320]	@ (8003b90 <HAL_DMA_Abort_IT+0x1c0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4f      	ldr	r2, [pc, #316]	@ (8003b94 <HAL_DMA_Abort_IT+0x1c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4d      	ldr	r2, [pc, #308]	@ (8003b98 <HAL_DMA_Abort_IT+0x1c8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b9c <HAL_DMA_Abort_IT+0x1cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a49      	ldr	r2, [pc, #292]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a46      	ldr	r2, [pc, #280]	@ (8003bac <HAL_DMA_Abort_IT+0x1dc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_DMA_Abort_IT+0xcc>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_Abort_IT+0xce>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8086 	beq.w	8003bb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b70 <HAL_DMA_Abort_IT+0x1a0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04a      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_Abort_IT+0x1a4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d045      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b78 <HAL_DMA_Abort_IT+0x1a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d040      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_Abort_IT+0x1ac>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03b      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <HAL_DMA_Abort_IT+0x1b0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d036      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_Abort_IT+0x1b4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <HAL_DMA_Abort_IT+0x1b8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02c      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_Abort_IT+0x1bc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d027      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	@ (8003b90 <HAL_DMA_Abort_IT+0x1c0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_Abort_IT+0x1c4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01d      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <HAL_DMA_Abort_IT+0x1c8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_Abort_IT+0x1cc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_Abort_IT+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <HAL_DMA_Abort_IT+0x18e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e178      	b.n	8003e50 <HAL_DMA_Abort_IT+0x480>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e16f      	b.n	8003e50 <HAL_DMA_Abort_IT+0x480>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020e 	bic.w	r2, r2, #14
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8003d78 <HAL_DMA_Abort_IT+0x3a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04a      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6b      	ldr	r2, [pc, #428]	@ (8003d7c <HAL_DMA_Abort_IT+0x3ac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d045      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a69      	ldr	r2, [pc, #420]	@ (8003d80 <HAL_DMA_Abort_IT+0x3b0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a68      	ldr	r2, [pc, #416]	@ (8003d84 <HAL_DMA_Abort_IT+0x3b4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d03b      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a66      	ldr	r2, [pc, #408]	@ (8003d88 <HAL_DMA_Abort_IT+0x3b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d036      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a65      	ldr	r2, [pc, #404]	@ (8003d8c <HAL_DMA_Abort_IT+0x3bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a63      	ldr	r2, [pc, #396]	@ (8003d90 <HAL_DMA_Abort_IT+0x3c0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a62      	ldr	r2, [pc, #392]	@ (8003d94 <HAL_DMA_Abort_IT+0x3c4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a60      	ldr	r2, [pc, #384]	@ (8003d98 <HAL_DMA_Abort_IT+0x3c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003d9c <HAL_DMA_Abort_IT+0x3cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <HAL_DMA_Abort_IT+0x3d0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5c      	ldr	r2, [pc, #368]	@ (8003da4 <HAL_DMA_Abort_IT+0x3d4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_DMA_Abort_IT+0x3d8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a59      	ldr	r2, [pc, #356]	@ (8003dac <HAL_DMA_Abort_IT+0x3dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_DMA_Abort_IT+0x3e0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_DMA_Abort_IT+0x3e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_Abort_IT+0x2a2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e007      	b.n	8003c82 <HAL_DMA_Abort_IT+0x2b2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	@ (8003d78 <HAL_DMA_Abort_IT+0x3a8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d072      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	@ (8003d7c <HAL_DMA_Abort_IT+0x3ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d06d      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a39      	ldr	r2, [pc, #228]	@ (8003d80 <HAL_DMA_Abort_IT+0x3b0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d068      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a37      	ldr	r2, [pc, #220]	@ (8003d84 <HAL_DMA_Abort_IT+0x3b4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d063      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a36      	ldr	r2, [pc, #216]	@ (8003d88 <HAL_DMA_Abort_IT+0x3b8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d05e      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a34      	ldr	r2, [pc, #208]	@ (8003d8c <HAL_DMA_Abort_IT+0x3bc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d059      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	@ (8003d90 <HAL_DMA_Abort_IT+0x3c0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d054      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a31      	ldr	r2, [pc, #196]	@ (8003d94 <HAL_DMA_Abort_IT+0x3c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04f      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <HAL_DMA_Abort_IT+0x3c8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d9c <HAL_DMA_Abort_IT+0x3cc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2d      	ldr	r2, [pc, #180]	@ (8003da0 <HAL_DMA_Abort_IT+0x3d0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003da4 <HAL_DMA_Abort_IT+0x3d4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003da8 <HAL_DMA_Abort_IT+0x3d8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a28      	ldr	r2, [pc, #160]	@ (8003dac <HAL_DMA_Abort_IT+0x3dc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <HAL_DMA_Abort_IT+0x3e0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	@ (8003db4 <HAL_DMA_Abort_IT+0x3e4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <HAL_DMA_Abort_IT+0x3e8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	@ (8003dbc <HAL_DMA_Abort_IT+0x3ec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	@ (8003dc0 <HAL_DMA_Abort_IT+0x3f0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc4 <HAL_DMA_Abort_IT+0x3f4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <HAL_DMA_Abort_IT+0x3f8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <HAL_DMA_Abort_IT+0x3fc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd0 <HAL_DMA_Abort_IT+0x400>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	@ (8003dd4 <HAL_DMA_Abort_IT+0x404>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d132      	bne.n	8003dd8 <HAL_DMA_Abort_IT+0x408>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e031      	b.n	8003dda <HAL_DMA_Abort_IT+0x40a>
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop

08003e5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e68:	4b67      	ldr	r3, [pc, #412]	@ (8004008 <HAL_DMA_IRQHandler+0x1ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a67      	ldr	r2, [pc, #412]	@ (800400c <HAL_DMA_IRQHandler+0x1b0>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5f      	ldr	r2, [pc, #380]	@ (8004010 <HAL_DMA_IRQHandler+0x1b4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004014 <HAL_DMA_IRQHandler+0x1b8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8004018 <HAL_DMA_IRQHandler+0x1bc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800401c <HAL_DMA_IRQHandler+0x1c0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	@ (8004020 <HAL_DMA_IRQHandler+0x1c4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a57      	ldr	r2, [pc, #348]	@ (8004024 <HAL_DMA_IRQHandler+0x1c8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a56      	ldr	r2, [pc, #344]	@ (8004028 <HAL_DMA_IRQHandler+0x1cc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a54      	ldr	r2, [pc, #336]	@ (800402c <HAL_DMA_IRQHandler+0x1d0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a53      	ldr	r2, [pc, #332]	@ (8004030 <HAL_DMA_IRQHandler+0x1d4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a51      	ldr	r2, [pc, #324]	@ (8004034 <HAL_DMA_IRQHandler+0x1d8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a50      	ldr	r2, [pc, #320]	@ (8004038 <HAL_DMA_IRQHandler+0x1dc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_DMA_IRQHandler+0x1e0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_DMA_IRQHandler+0x1e4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_DMA_IRQHandler+0x1e8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004048 <HAL_DMA_IRQHandler+0x1ec>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a48      	ldr	r2, [pc, #288]	@ (800404c <HAL_DMA_IRQHandler+0x1f0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_DMA_IRQHandler+0xd6>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_DMA_IRQHandler+0xd8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 842b 	beq.w	8004790 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2208      	movs	r2, #8
 8003f44:	409a      	lsls	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a2 	beq.w	8004094 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <HAL_DMA_IRQHandler+0x1b4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_DMA_IRQHandler+0x1b8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	@ (8004018 <HAL_DMA_IRQHandler+0x1bc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_DMA_IRQHandler+0x1c0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	@ (8004020 <HAL_DMA_IRQHandler+0x1c4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <HAL_DMA_IRQHandler+0x1c8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a25      	ldr	r2, [pc, #148]	@ (8004028 <HAL_DMA_IRQHandler+0x1cc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	@ (800402c <HAL_DMA_IRQHandler+0x1d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	@ (8004030 <HAL_DMA_IRQHandler+0x1d4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <HAL_DMA_IRQHandler+0x1d8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004038 <HAL_DMA_IRQHandler+0x1dc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <HAL_DMA_IRQHandler+0x1e0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <HAL_DMA_IRQHandler+0x1e4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_DMA_IRQHandler+0x1e8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <HAL_DMA_IRQHandler+0x1ec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	@ (800404c <HAL_DMA_IRQHandler+0x1f0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d12f      	bne.n	8004050 <HAL_DMA_IRQHandler+0x1f4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e02e      	b.n	8004064 <HAL_DMA_IRQHandler+0x208>
 8004006:	bf00      	nop
 8004008:	24000000 	.word	0x24000000
 800400c:	1b4e81b5 	.word	0x1b4e81b5
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2208      	movs	r2, #8
 8004082:	409a      	lsls	r2, r3
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <HAL_DMA_IRQHandler+0x3f8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d04a      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a67      	ldr	r2, [pc, #412]	@ (8004258 <HAL_DMA_IRQHandler+0x3fc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d045      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a66      	ldr	r2, [pc, #408]	@ (800425c <HAL_DMA_IRQHandler+0x400>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d040      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a64      	ldr	r2, [pc, #400]	@ (8004260 <HAL_DMA_IRQHandler+0x404>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d03b      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a63      	ldr	r2, [pc, #396]	@ (8004264 <HAL_DMA_IRQHandler+0x408>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a61      	ldr	r2, [pc, #388]	@ (8004268 <HAL_DMA_IRQHandler+0x40c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d031      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a60      	ldr	r2, [pc, #384]	@ (800426c <HAL_DMA_IRQHandler+0x410>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004270 <HAL_DMA_IRQHandler+0x414>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d027      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_DMA_IRQHandler+0x418>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5b      	ldr	r2, [pc, #364]	@ (8004278 <HAL_DMA_IRQHandler+0x41c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5a      	ldr	r2, [pc, #360]	@ (800427c <HAL_DMA_IRQHandler+0x420>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a58      	ldr	r2, [pc, #352]	@ (8004280 <HAL_DMA_IRQHandler+0x424>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a57      	ldr	r2, [pc, #348]	@ (8004284 <HAL_DMA_IRQHandler+0x428>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a55      	ldr	r2, [pc, #340]	@ (8004288 <HAL_DMA_IRQHandler+0x42c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a54      	ldr	r2, [pc, #336]	@ (800428c <HAL_DMA_IRQHandler+0x430>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a52      	ldr	r2, [pc, #328]	@ (8004290 <HAL_DMA_IRQHandler+0x434>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10a      	bne.n	8004160 <HAL_DMA_IRQHandler+0x304>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e003      	b.n	8004168 <HAL_DMA_IRQHandler+0x30c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2204      	movs	r2, #4
 8004192:	409a      	lsls	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808f 	beq.w	80042bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004254 <HAL_DMA_IRQHandler+0x3f8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004258 <HAL_DMA_IRQHandler+0x3fc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a29      	ldr	r2, [pc, #164]	@ (800425c <HAL_DMA_IRQHandler+0x400>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a27      	ldr	r2, [pc, #156]	@ (8004260 <HAL_DMA_IRQHandler+0x404>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a26      	ldr	r2, [pc, #152]	@ (8004264 <HAL_DMA_IRQHandler+0x408>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <HAL_DMA_IRQHandler+0x40c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a23      	ldr	r2, [pc, #140]	@ (800426c <HAL_DMA_IRQHandler+0x410>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a21      	ldr	r2, [pc, #132]	@ (8004270 <HAL_DMA_IRQHandler+0x414>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a20      	ldr	r2, [pc, #128]	@ (8004274 <HAL_DMA_IRQHandler+0x418>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <HAL_DMA_IRQHandler+0x41c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <HAL_DMA_IRQHandler+0x420>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <HAL_DMA_IRQHandler+0x424>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_DMA_IRQHandler+0x428>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_DMA_IRQHandler+0x42c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_DMA_IRQHandler+0x430>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <HAL_DMA_IRQHandler+0x434>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d12a      	bne.n	8004294 <HAL_DMA_IRQHandler+0x438>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e023      	b.n	800429c <HAL_DMA_IRQHandler+0x440>
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2204      	movs	r2, #4
 80042aa:	409a      	lsls	r2, r3
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2210      	movs	r2, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a6 	beq.w	800441e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a85      	ldr	r2, [pc, #532]	@ (80044ec <HAL_DMA_IRQHandler+0x690>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04a      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a83      	ldr	r2, [pc, #524]	@ (80044f0 <HAL_DMA_IRQHandler+0x694>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d045      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a82      	ldr	r2, [pc, #520]	@ (80044f4 <HAL_DMA_IRQHandler+0x698>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d040      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a80      	ldr	r2, [pc, #512]	@ (80044f8 <HAL_DMA_IRQHandler+0x69c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d03b      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7f      	ldr	r2, [pc, #508]	@ (80044fc <HAL_DMA_IRQHandler+0x6a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d036      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7d      	ldr	r2, [pc, #500]	@ (8004500 <HAL_DMA_IRQHandler+0x6a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7c      	ldr	r2, [pc, #496]	@ (8004504 <HAL_DMA_IRQHandler+0x6a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d02c      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7a      	ldr	r2, [pc, #488]	@ (8004508 <HAL_DMA_IRQHandler+0x6ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d027      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a79      	ldr	r2, [pc, #484]	@ (800450c <HAL_DMA_IRQHandler+0x6b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a77      	ldr	r2, [pc, #476]	@ (8004510 <HAL_DMA_IRQHandler+0x6b4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a76      	ldr	r2, [pc, #472]	@ (8004514 <HAL_DMA_IRQHandler+0x6b8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a74      	ldr	r2, [pc, #464]	@ (8004518 <HAL_DMA_IRQHandler+0x6bc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a73      	ldr	r2, [pc, #460]	@ (800451c <HAL_DMA_IRQHandler+0x6c0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a71      	ldr	r2, [pc, #452]	@ (8004520 <HAL_DMA_IRQHandler+0x6c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a70      	ldr	r2, [pc, #448]	@ (8004524 <HAL_DMA_IRQHandler+0x6c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_DMA_IRQHandler+0x6cc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10a      	bne.n	8004388 <HAL_DMA_IRQHandler+0x52c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e009      	b.n	800439c <HAL_DMA_IRQHandler+0x540>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03e      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2210      	movs	r2, #16
 80043aa:	409a      	lsls	r2, r3
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d024      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e01f      	b.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e016      	b.n	800441e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0208 	bic.w	r2, r2, #8
 800440c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2220      	movs	r2, #32
 8004428:	409a      	lsls	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8110 	beq.w	8004654 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2c      	ldr	r2, [pc, #176]	@ (80044ec <HAL_DMA_IRQHandler+0x690>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d04a      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_DMA_IRQHandler+0x694>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d045      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <HAL_DMA_IRQHandler+0x698>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d040      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <HAL_DMA_IRQHandler+0x69c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d03b      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_DMA_IRQHandler+0x6a0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d036      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a25      	ldr	r2, [pc, #148]	@ (8004500 <HAL_DMA_IRQHandler+0x6a4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d031      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <HAL_DMA_IRQHandler+0x6a8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02c      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <HAL_DMA_IRQHandler+0x6ac>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d027      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_DMA_IRQHandler+0x6b0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1f      	ldr	r2, [pc, #124]	@ (8004510 <HAL_DMA_IRQHandler+0x6b4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <HAL_DMA_IRQHandler+0x6b8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <HAL_DMA_IRQHandler+0x6bc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	@ (800451c <HAL_DMA_IRQHandler+0x6c0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_DMA_IRQHandler+0x6c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <HAL_DMA_IRQHandler+0x6c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_DMA_IRQHandler+0x6cc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d12b      	bne.n	800452c <HAL_DMA_IRQHandler+0x6d0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e02a      	b.n	8004540 <HAL_DMA_IRQHandler+0x6e4>
 80044ea:	bf00      	nop
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	40020040 	.word	0x40020040
 80044f8:	40020058 	.word	0x40020058
 80044fc:	40020070 	.word	0x40020070
 8004500:	40020088 	.word	0x40020088
 8004504:	400200a0 	.word	0x400200a0
 8004508:	400200b8 	.word	0x400200b8
 800450c:	40020410 	.word	0x40020410
 8004510:	40020428 	.word	0x40020428
 8004514:	40020440 	.word	0x40020440
 8004518:	40020458 	.word	0x40020458
 800451c:	40020470 	.word	0x40020470
 8004520:	40020488 	.word	0x40020488
 8004524:	400204a0 	.word	0x400204a0
 8004528:	400204b8 	.word	0x400204b8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2220      	movs	r2, #32
 8004550:	409a      	lsls	r2, r3
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b04      	cmp	r3, #4
 8004560:	d139      	bne.n	80045d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0216 	bic.w	r2, r2, #22
 8004570:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004580:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_DMA_IRQHandler+0x736>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0208 	bic.w	r2, r2, #8
 80045a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	223f      	movs	r2, #63	@ 0x3f
 80045ac:	409a      	lsls	r2, r3
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 834a 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
          }
          return;
 80045d4:	e344      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
 8004602:	e027      	b.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
 8004614:	e01e      	b.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8306 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8088 	beq.w	800477c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7a      	ldr	r2, [pc, #488]	@ (8004864 <HAL_DMA_IRQHandler+0xa08>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d04a      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a79      	ldr	r2, [pc, #484]	@ (8004868 <HAL_DMA_IRQHandler+0xa0c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d045      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a77      	ldr	r2, [pc, #476]	@ (800486c <HAL_DMA_IRQHandler+0xa10>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d040      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a76      	ldr	r2, [pc, #472]	@ (8004870 <HAL_DMA_IRQHandler+0xa14>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d03b      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a74      	ldr	r2, [pc, #464]	@ (8004874 <HAL_DMA_IRQHandler+0xa18>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d036      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a73      	ldr	r2, [pc, #460]	@ (8004878 <HAL_DMA_IRQHandler+0xa1c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d031      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a71      	ldr	r2, [pc, #452]	@ (800487c <HAL_DMA_IRQHandler+0xa20>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a70      	ldr	r2, [pc, #448]	@ (8004880 <HAL_DMA_IRQHandler+0xa24>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d027      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004884 <HAL_DMA_IRQHandler+0xa28>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004888 <HAL_DMA_IRQHandler+0xa2c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6b      	ldr	r2, [pc, #428]	@ (800488c <HAL_DMA_IRQHandler+0xa30>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004890 <HAL_DMA_IRQHandler+0xa34>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a68      	ldr	r2, [pc, #416]	@ (8004894 <HAL_DMA_IRQHandler+0xa38>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a67      	ldr	r2, [pc, #412]	@ (8004898 <HAL_DMA_IRQHandler+0xa3c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a65      	ldr	r2, [pc, #404]	@ (800489c <HAL_DMA_IRQHandler+0xa40>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a64      	ldr	r2, [pc, #400]	@ (80048a0 <HAL_DMA_IRQHandler+0xa44>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <HAL_DMA_IRQHandler+0x8ca>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e007      	b.n	8004736 <HAL_DMA_IRQHandler+0x8da>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473e:	429a      	cmp	r2, r3
 8004740:	d307      	bcc.n	8004752 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f2      	bne.n	8004736 <HAL_DMA_IRQHandler+0x8da>
 8004750:	e000      	b.n	8004754 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004752:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800476a:	e003      	b.n	8004774 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8272 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
 800478e:	e26c      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a43      	ldr	r2, [pc, #268]	@ (80048a4 <HAL_DMA_IRQHandler+0xa48>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_DMA_IRQHandler+0xa4c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01d      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a40      	ldr	r2, [pc, #256]	@ (80048ac <HAL_DMA_IRQHandler+0xa50>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3f      	ldr	r2, [pc, #252]	@ (80048b0 <HAL_DMA_IRQHandler+0xa54>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3d      	ldr	r2, [pc, #244]	@ (80048b4 <HAL_DMA_IRQHandler+0xa58>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3c      	ldr	r2, [pc, #240]	@ (80048b8 <HAL_DMA_IRQHandler+0xa5c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_DMA_IRQHandler+0xa60>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a39      	ldr	r2, [pc, #228]	@ (80048c0 <HAL_DMA_IRQHandler+0xa64>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x988>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_DMA_IRQHandler+0x98a>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 823f 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	2204      	movs	r2, #4
 80047fe:	409a      	lsls	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80cd 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xb48>
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80c7 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2204      	movs	r2, #4
 8004820:	409a      	lsls	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d049      	beq.n	80048c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8210 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800484c:	e20a      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8206 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004860:	e200      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
 8004862:	bf00      	nop
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
 80048a4:	58025408 	.word	0x58025408
 80048a8:	5802541c 	.word	0x5802541c
 80048ac:	58025430 	.word	0x58025430
 80048b0:	58025444 	.word	0x58025444
 80048b4:	58025458 	.word	0x58025458
 80048b8:	5802546c 	.word	0x5802546c
 80048bc:	58025480 	.word	0x58025480
 80048c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d160      	bne.n	8004990 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad0 <HAL_DMA_IRQHandler+0xc74>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad4 <HAL_DMA_IRQHandler+0xc78>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_DMA_IRQHandler+0xc7c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7a      	ldr	r2, [pc, #488]	@ (8004adc <HAL_DMA_IRQHandler+0xc80>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a79      	ldr	r2, [pc, #484]	@ (8004ae0 <HAL_DMA_IRQHandler+0xc84>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a77      	ldr	r2, [pc, #476]	@ (8004ae4 <HAL_DMA_IRQHandler+0xc88>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a76      	ldr	r2, [pc, #472]	@ (8004ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_DMA_IRQHandler+0xc90>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a73      	ldr	r2, [pc, #460]	@ (8004af0 <HAL_DMA_IRQHandler+0xc94>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_DMA_IRQHandler+0xc98>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a70      	ldr	r2, [pc, #448]	@ (8004af8 <HAL_DMA_IRQHandler+0xc9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_DMA_IRQHandler+0xca0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b00 <HAL_DMA_IRQHandler+0xca4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_DMA_IRQHandler+0xca8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_DMA_IRQHandler+0xcac>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_DMA_IRQHandler+0xcb0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <HAL_DMA_IRQHandler+0xb24>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0208 	bic.w	r2, r2, #8
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e007      	b.n	8004990 <HAL_DMA_IRQHandler+0xb34>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8165 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a2:	e15f      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2202      	movs	r2, #2
 80049ae:	409a      	lsls	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80c5 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xce8>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80bf 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2202      	movs	r2, #2
 80049d0:	409a      	lsls	r2, r3
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d018      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 813a 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	e134      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8130 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a10:	e12a      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8089 	bne.w	8004b30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad0 <HAL_DMA_IRQHandler+0xc74>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <HAL_DMA_IRQHandler+0xc78>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a28      	ldr	r2, [pc, #160]	@ (8004ad8 <HAL_DMA_IRQHandler+0xc7c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_DMA_IRQHandler+0xc80>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ae0 <HAL_DMA_IRQHandler+0xc84>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <HAL_DMA_IRQHandler+0xc88>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_DMA_IRQHandler+0xc90>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_DMA_IRQHandler+0xc94>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_DMA_IRQHandler+0xc98>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_DMA_IRQHandler+0xc9c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	@ (8004afc <HAL_DMA_IRQHandler+0xca0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_DMA_IRQHandler+0xca4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_DMA_IRQHandler+0xca8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_DMA_IRQHandler+0xcac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_DMA_IRQHandler+0xcb0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d128      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xcb4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0214 	bic.w	r2, r2, #20
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e027      	b.n	8004b20 <HAL_DMA_IRQHandler+0xcc4>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 020a 	bic.w	r2, r2, #10
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8097 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b42:	e091      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8088 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8082 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a41      	ldr	r2, [pc, #260]	@ (8004c70 <HAL_DMA_IRQHandler+0xe14>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3f      	ldr	r2, [pc, #252]	@ (8004c74 <HAL_DMA_IRQHandler+0xe18>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c78 <HAL_DMA_IRQHandler+0xe1c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a3c      	ldr	r2, [pc, #240]	@ (8004c7c <HAL_DMA_IRQHandler+0xe20>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a3b      	ldr	r2, [pc, #236]	@ (8004c80 <HAL_DMA_IRQHandler+0xe24>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a39      	ldr	r2, [pc, #228]	@ (8004c84 <HAL_DMA_IRQHandler+0xe28>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a38      	ldr	r2, [pc, #224]	@ (8004c88 <HAL_DMA_IRQHandler+0xe2c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a36      	ldr	r2, [pc, #216]	@ (8004c8c <HAL_DMA_IRQHandler+0xe30>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a35      	ldr	r2, [pc, #212]	@ (8004c90 <HAL_DMA_IRQHandler+0xe34>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a33      	ldr	r2, [pc, #204]	@ (8004c94 <HAL_DMA_IRQHandler+0xe38>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a32      	ldr	r2, [pc, #200]	@ (8004c98 <HAL_DMA_IRQHandler+0xe3c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a30      	ldr	r2, [pc, #192]	@ (8004c9c <HAL_DMA_IRQHandler+0xe40>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca0 <HAL_DMA_IRQHandler+0xe44>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <HAL_DMA_IRQHandler+0xe48>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <HAL_DMA_IRQHandler+0xe4c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2a      	ldr	r2, [pc, #168]	@ (8004cac <HAL_DMA_IRQHandler+0xe50>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <HAL_DMA_IRQHandler+0xdbc>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 021c 	bic.w	r2, r2, #28
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e007      	b.n	8004c28 <HAL_DMA_IRQHandler+0xdcc>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 020e 	bic.w	r2, r2, #14
 8004c26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2201      	movs	r2, #1
 8004c32:	409a      	lsls	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e004      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c60:	bf00      	nop
 8004c62:	e002      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	bf00      	nop
 8004c66:	e000      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020040 	.word	0x40020040
 8004c7c:	40020058 	.word	0x40020058
 8004c80:	40020070 	.word	0x40020070
 8004c84:	40020088 	.word	0x40020088
 8004c88:	400200a0 	.word	0x400200a0
 8004c8c:	400200b8 	.word	0x400200b8
 8004c90:	40020410 	.word	0x40020410
 8004c94:	40020428 	.word	0x40020428
 8004c98:	40020440 	.word	0x40020440
 8004c9c:	40020458 	.word	0x40020458
 8004ca0:	40020470 	.word	0x40020470
 8004ca4:	40020488 	.word	0x40020488
 8004ca8:	400204a0 	.word	0x400204a0
 8004cac:	400204b8 	.word	0x400204b8

08004cb0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cbe:	b2db      	uxtb	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a42      	ldr	r2, [pc, #264]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04a      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d045      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3f      	ldr	r2, [pc, #252]	@ (8004dec <DMA_CalcBaseAndBitshift+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d040      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <DMA_CalcBaseAndBitshift+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d03b      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	@ (8004df4 <DMA_CalcBaseAndBitshift+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d036      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8004df8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d031      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a39      	ldr	r2, [pc, #228]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x130>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d02c      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x134>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d027      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x138>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a35      	ldr	r2, [pc, #212]	@ (8004e08 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	@ (8004e0c <DMA_CalcBaseAndBitshift+0x140>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a32      	ldr	r2, [pc, #200]	@ (8004e10 <DMA_CalcBaseAndBitshift+0x144>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <DMA_CalcBaseAndBitshift+0x148>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e18 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	@ (8004e1c <DMA_CalcBaseAndBitshift+0x150>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e20 <DMA_CalcBaseAndBitshift+0x154>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <DMA_CalcBaseAndBitshift+0xac>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <DMA_CalcBaseAndBitshift+0xae>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d024      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3b10      	subs	r3, #16
 8004d86:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <DMA_CalcBaseAndBitshift+0x158>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d908      	bls.n	8004db8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b1f      	ldr	r3, [pc, #124]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x160>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004db6:	e00d      	b.n	8004dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x160>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc6:	e005      	b.n	8004dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	40020010 	.word	0x40020010
 8004de8:	40020028 	.word	0x40020028
 8004dec:	40020040 	.word	0x40020040
 8004df0:	40020058 	.word	0x40020058
 8004df4:	40020070 	.word	0x40020070
 8004df8:	40020088 	.word	0x40020088
 8004dfc:	400200a0 	.word	0x400200a0
 8004e00:	400200b8 	.word	0x400200b8
 8004e04:	40020410 	.word	0x40020410
 8004e08:	40020428 	.word	0x40020428
 8004e0c:	40020440 	.word	0x40020440
 8004e10:	40020458 	.word	0x40020458
 8004e14:	40020470 	.word	0x40020470
 8004e18:	40020488 	.word	0x40020488
 8004e1c:	400204a0 	.word	0x400204a0
 8004e20:	400204b8 	.word	0x400204b8
 8004e24:	aaaaaaab 	.word	0xaaaaaaab
 8004e28:	0801a2e0 	.word	0x0801a2e0
 8004e2c:	fffffc00 	.word	0xfffffc00

08004e30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d120      	bne.n	8004e86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d858      	bhi.n	8004efe <DMA_CheckFifoParam+0xce>
 8004e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <DMA_CheckFifoParam+0x24>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e77 	.word	0x08004e77
 8004e5c:	08004e65 	.word	0x08004e65
 8004e60:	08004eff 	.word	0x08004eff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d048      	beq.n	8004f02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e74:	e045      	b.n	8004f02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e7e:	d142      	bne.n	8004f06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e84:	e03f      	b.n	8004f06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e8e:	d123      	bne.n	8004ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d838      	bhi.n	8004f0a <DMA_CheckFifoParam+0xda>
 8004e98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <DMA_CheckFifoParam+0x70>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb7 	.word	0x08004eb7
 8004ea8:	08004eb1 	.word	0x08004eb1
 8004eac:	08004ec9 	.word	0x08004ec9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb4:	e030      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d025      	beq.n	8004f0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec6:	e022      	b.n	8004f0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ed0:	d11f      	bne.n	8004f12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed6:	e01c      	b.n	8004f12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d902      	bls.n	8004ee6 <DMA_CheckFifoParam+0xb6>
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d003      	beq.n	8004eec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ee4:	e018      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eea:	e015      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
    break;
 8004efc:	e00b      	b.n	8004f16 <DMA_CheckFifoParam+0xe6>
        break;
 8004efe:	bf00      	nop
 8004f00:	e00a      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e006      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
    break;
 8004f16:	bf00      	nop
    }
  }

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a38      	ldr	r2, [pc, #224]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a36      	ldr	r2, [pc, #216]	@ (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01d      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a33      	ldr	r2, [pc, #204]	@ (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a32      	ldr	r2, [pc, #200]	@ (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3b08      	subs	r3, #8
 8004f98:	4a28      	ldr	r2, [pc, #160]	@ (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a24      	ldr	r2, [pc, #144]	@ (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fc4:	e024      	b.n	8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	3b10      	subs	r3, #16
 8004fce:	4a1e      	ldr	r2, [pc, #120]	@ (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d806      	bhi.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d902      	bls.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3308      	adds	r3, #8
 8004fec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	58025408 	.word	0x58025408
 8005020:	5802541c 	.word	0x5802541c
 8005024:	58025430 	.word	0x58025430
 8005028:	58025444 	.word	0x58025444
 800502c:	58025458 	.word	0x58025458
 8005030:	5802546c 	.word	0x5802546c
 8005034:	58025480 	.word	0x58025480
 8005038:	58025494 	.word	0x58025494
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	16009600 	.word	0x16009600
 8005044:	58025880 	.word	0x58025880
 8005048:	aaaaaaab 	.word	0xaaaaaaab
 800504c:	400204b8 	.word	0x400204b8
 8005050:	4002040f 	.word	0x4002040f
 8005054:	10008200 	.word	0x10008200
 8005058:	40020880 	.word	0x40020880

0800505c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04a      	beq.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d847      	bhi.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a25      	ldr	r2, [pc, #148]	@ (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a24      	ldr	r2, [pc, #144]	@ (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a22      	ldr	r2, [pc, #136]	@ (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80050e6:	e009      	b.n	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a11      	ldr	r2, [pc, #68]	@ (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	58025408 	.word	0x58025408
 8005118:	5802541c 	.word	0x5802541c
 800511c:	58025430 	.word	0x58025430
 8005120:	58025444 	.word	0x58025444
 8005124:	58025458 	.word	0x58025458
 8005128:	5802546c 	.word	0x5802546c
 800512c:	58025480 	.word	0x58025480
 8005130:	58025494 	.word	0x58025494
 8005134:	1600963f 	.word	0x1600963f
 8005138:	58025940 	.word	0x58025940
 800513c:	1000823f 	.word	0x1000823f
 8005140:	40020940 	.word	0x40020940

08005144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	@ 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005152:	4b89      	ldr	r3, [pc, #548]	@ (8005378 <HAL_GPIO_Init+0x234>)
 8005154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005156:	e194      	b.n	8005482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2101      	movs	r1, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8186 	beq.w	800547c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d005      	beq.n	8005188 <HAL_GPIO_Init+0x44>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d130      	bne.n	80051ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051be:	2201      	movs	r2, #1
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0201 	and.w	r2, r3, #1
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d017      	beq.n	8005226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d123      	bne.n	800527a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	08da      	lsrs	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3208      	adds	r2, #8
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0203 	and.w	r2, r3, #3
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80e0 	beq.w	800547c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052bc:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c2:	4a2e      	ldr	r2, [pc, #184]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052cc:	4b2b      	ldr	r3, [pc, #172]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052da:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <HAL_GPIO_Init+0x23c>)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	3302      	adds	r3, #2
 80052e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	220f      	movs	r2, #15
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_GPIO_Init+0x240>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d052      	beq.n	80053ac <HAL_GPIO_Init+0x268>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_GPIO_Init+0x244>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_GPIO_Init+0x22e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <HAL_GPIO_Init+0x248>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <HAL_GPIO_Init+0x22a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <HAL_GPIO_Init+0x24c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d025      	beq.n	800536a <HAL_GPIO_Init+0x226>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_GPIO_Init+0x250>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <HAL_GPIO_Init+0x222>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_GPIO_Init+0x254>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d019      	beq.n	8005362 <HAL_GPIO_Init+0x21e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <HAL_GPIO_Init+0x258>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_GPIO_Init+0x21a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <HAL_GPIO_Init+0x25c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00d      	beq.n	800535a <HAL_GPIO_Init+0x216>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <HAL_GPIO_Init+0x260>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <HAL_GPIO_Init+0x212>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <HAL_GPIO_Init+0x264>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_GPIO_Init+0x20e>
 800534e:	2309      	movs	r3, #9
 8005350:	e02d      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005352:	230a      	movs	r3, #10
 8005354:	e02b      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005356:	2308      	movs	r3, #8
 8005358:	e029      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800535a:	2307      	movs	r3, #7
 800535c:	e027      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800535e:	2306      	movs	r3, #6
 8005360:	e025      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005362:	2305      	movs	r3, #5
 8005364:	e023      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005366:	2304      	movs	r3, #4
 8005368:	e021      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800536a:	2303      	movs	r3, #3
 800536c:	e01f      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800536e:	2302      	movs	r3, #2
 8005370:	e01d      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005372:	2301      	movs	r3, #1
 8005374:	e01b      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005376:	bf00      	nop
 8005378:	58000080 	.word	0x58000080
 800537c:	58024400 	.word	0x58024400
 8005380:	58000400 	.word	0x58000400
 8005384:	58020000 	.word	0x58020000
 8005388:	58020400 	.word	0x58020400
 800538c:	58020800 	.word	0x58020800
 8005390:	58020c00 	.word	0x58020c00
 8005394:	58021000 	.word	0x58021000
 8005398:	58021400 	.word	0x58021400
 800539c:	58021800 	.word	0x58021800
 80053a0:	58021c00 	.word	0x58021c00
 80053a4:	58022000 	.word	0x58022000
 80053a8:	58022400 	.word	0x58022400
 80053ac:	2300      	movs	r3, #0
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	f002 0203 	and.w	r2, r2, #3
 80053b4:	0092      	lsls	r2, r2, #2
 80053b6:	4093      	lsls	r3, r2
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053be:	4938      	ldr	r1, [pc, #224]	@ (80054a0 <HAL_GPIO_Init+0x35c>)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	3302      	adds	r3, #2
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	43db      	mvns	r3, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4013      	ands	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	3301      	adds	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	f47f ae63 	bne.w	8005158 <HAL_GPIO_Init+0x14>
  }
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	3724      	adds	r7, #36	@ 0x24
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	58000400 	.word	0x58000400

080054a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	887b      	ldrh	r3, [r7, #2]
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
 80054c0:	e001      	b.n	80054c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
 80054e0:	4613      	mov	r3, r2
 80054e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054e4:	787b      	ldrb	r3, [r7, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054f0:	e003      	b.n	80054fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054f2:	887b      	ldrh	r3, [r7, #2]
 80054f4:	041a      	lsls	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005514:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc f925 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e08b      	b.n	8005666 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc fb52 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	@ 0x24
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800558c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800559c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e006      	b.n	80055c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d108      	bne.n	80055de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	e007      	b.n	80055ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <HAL_I2C_Init+0x134>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800560c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	02008000 	.word	0x02008000

08005674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	f040 80f9 	bne.w	800588e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x34>
 80056a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0ed      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Mem_Write+0x4e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0e6      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ca:	f7fd f973 	bl	80029b4 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2319      	movs	r3, #25
 80056d6:	2201      	movs	r2, #1
 80056d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 ffc0 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0d1      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2221      	movs	r2, #33	@ 0x21
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2240      	movs	r2, #64	@ 0x40
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800570c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005714:	88f8      	ldrh	r0, [r7, #6]
 8005716:	893a      	ldrh	r2, [r7, #8]
 8005718:	8979      	ldrh	r1, [r7, #10]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4603      	mov	r3, r0
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa67 	bl	8005bf8 <I2C_RequestMemoryWrite>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0a9      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2bff      	cmp	r3, #255	@ 0xff
 8005744:	d90e      	bls.n	8005764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	b2da      	uxtb	r2, r3
 8005752:	8979      	ldrh	r1, [r7, #10]
 8005754:	2300      	movs	r3, #0
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f001 f943 	bl	80069e8 <I2C_TransferConfig>
 8005762:	e00f      	b.n	8005784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005772:	b2da      	uxtb	r2, r3
 8005774:	8979      	ldrh	r1, [r7, #10]
 8005776:	2300      	movs	r3, #0
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 f932 	bl	80069e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 ffc3 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e07b      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	781a      	ldrb	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d034      	beq.n	800583c <HAL_I2C_Mem_Write+0x1c8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d130      	bne.n	800583c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 ff3c 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04d      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2bff      	cmp	r3, #255	@ 0xff
 80057fc:	d90e      	bls.n	800581c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	22ff      	movs	r2, #255	@ 0xff
 8005802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005808:	b2da      	uxtb	r2, r3
 800580a:	8979      	ldrh	r1, [r7, #10]
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f001 f8e7 	bl	80069e8 <I2C_TransferConfig>
 800581a:	e00f      	b.n	800583c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	b2da      	uxtb	r2, r3
 800582c:	8979      	ldrh	r1, [r7, #10]
 800582e:	2300      	movs	r3, #0
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f001 f8d6 	bl	80069e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d19e      	bne.n	8005784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 ffa9 	bl	80067a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e01a      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2220      	movs	r2, #32
 8005860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <HAL_I2C_Mem_Write+0x224>)
 800586e:	400b      	ands	r3, r1
 8005870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	fe00e800 	.word	0xfe00e800

0800589c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
  }
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	f043 0201 	orr.w	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005910:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00f      	beq.n	800593c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0208 	orr.w	r2, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800593a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005954:	f043 0202 	orr.w	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005964:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 030b 	and.w	r3, r3, #11
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd19 	bl	80063b0 <I2C_ITError>
  }
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
 80059ba:	4613      	mov	r3, r2
 80059bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <I2C_Slave_ISR_IT+0x24>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0e2      	b.n	8005bf0 <I2C_Slave_ISR_IT+0x1ea>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fa09 	bl	8005e60 <I2C_ITSlaveCplt>
 8005a4e:	e0ca      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04b      	beq.n	8005af2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d046      	beq.n	8005af2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d128      	bne.n	8005ac0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b28      	cmp	r3, #40	@ 0x28
 8005a78:	d108      	bne.n	8005a8c <I2C_Slave_ISR_IT+0x86>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a80:	d104      	bne.n	8005a8c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fc3f 	bl	8006308 <I2C_ITListenCplt>
 8005a8a:	e031      	b.n	8005af0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b29      	cmp	r3, #41	@ 0x29
 8005a96:	d10e      	bne.n	8005ab6 <I2C_Slave_ISR_IT+0xb0>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a9e:	d00a      	beq.n	8005ab6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fd98 	bl	80065de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f97a 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8005ab4:	e01c      	b.n	8005af0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2210      	movs	r2, #16
 8005abc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005abe:	e08f      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005acc:	f043 0204 	orr.w	r2, r3, #4
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <I2C_Slave_ISR_IT+0xdc>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ae0:	d17e      	bne.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fc61 	bl	80063b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005aee:	e077      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
 8005af0:	e076      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02f      	beq.n	8005b5c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02a      	beq.n	8005b5c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d14b      	bne.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b52:	d047      	beq.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f927 	bl	8005da8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b5a:	e043      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b70:	6939      	ldr	r1, [r7, #16]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f894 	bl	8005ca0 <I2C_ITAddrCplt>
 8005b78:	e035      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d030      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02b      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d018      	beq.n	8005bca <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005bc8:	e00d      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd0:	d002      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0x1d2>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f8e5 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8005bde:	e002      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	817b      	strh	r3, [r7, #10]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	813b      	strh	r3, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	8979      	ldrh	r1, [r7, #10]
 8005c18:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <I2C_RequestMemoryWrite+0xa4>)
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fee1 	bl	80069e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fd72 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e02c      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c4a:	e015      	b.n	8005c78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fd58 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e012      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2180      	movs	r1, #128	@ 0x80
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fced 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	80002000 	.word	0x80002000

08005ca0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cb6:	2b28      	cmp	r3, #40	@ 0x28
 8005cb8:	d16a      	bne.n	8005d90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005cd8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005cf4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d138      	bne.n	8005d70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	89bb      	ldrh	r3, [r7, #12]
 8005d06:	4053      	eors	r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11c      	bne.n	8005d4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d13b      	bne.n	8005da0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2208      	movs	r2, #8
 8005d34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d3e:	89ba      	ldrh	r2, [r7, #12]
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fe32 	bl	80059ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d4a:	e029      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fe79 	bl	8006a4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d62:	89ba      	ldrh	r2, [r7, #12]
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fe20 	bl	80059ae <HAL_I2C_AddrCallback>
}
 8005d6e:	e017      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fe69 	bl	8006a4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d82:	89ba      	ldrh	r2, [r7, #12]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fe10 	bl	80059ae <HAL_I2C_AddrCallback>
}
 8005d8e:	e007      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2208      	movs	r2, #8
 8005d96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e00c      	b.n	8005df6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b29      	cmp	r3, #41	@ 0x29
 8005e00:	d112      	bne.n	8005e28 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2228      	movs	r2, #40	@ 0x28
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2221      	movs	r2, #33	@ 0x21
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fe1a 	bl	8006a4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fdb0 	bl	8005986 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e26:	e017      	b.n	8005e58 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e32:	d111      	bne.n	8005e58 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2228      	movs	r2, #40	@ 0x28
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2222      	movs	r2, #34	@ 0x22
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e42:	2102      	movs	r1, #2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe01 	bl	8006a4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fda1 	bl	800599a <HAL_I2C_SlaveRxCpltCallback>
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e82:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	2b21      	cmp	r3, #33	@ 0x21
 8005e90:	d002      	beq.n	8005e98 <I2C_ITSlaveCplt+0x38>
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b29      	cmp	r3, #41	@ 0x29
 8005e96:	d108      	bne.n	8005eaa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e98:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fdd5 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2221      	movs	r2, #33	@ 0x21
 8005ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ea8:	e019      	b.n	8005ede <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	2b22      	cmp	r3, #34	@ 0x22
 8005eae:	d002      	beq.n	8005eb6 <I2C_ITSlaveCplt+0x56>
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb4:	d108      	bne.n	8005ec8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005eb6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fdc6 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2222      	movs	r2, #34	@ 0x22
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ec6:	e00a      	b.n	8005ede <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005ec8:	7afb      	ldrb	r3, [r7, #11]
 8005eca:	2b28      	cmp	r3, #40	@ 0x28
 8005ecc:	d107      	bne.n	8005ede <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005ece:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fdba 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b7f      	ldr	r3, [pc, #508]	@ (80060f8 <I2C_ITSlaveCplt+0x298>)
 8005efa:	400b      	ands	r3, r1
 8005efc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb6d 	bl	80065de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d07a      	beq.n	8006004 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8111 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	@ (80060fc <I2C_ITSlaveCplt+0x29c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d059      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a71      	ldr	r2, [pc, #452]	@ (8006100 <I2C_ITSlaveCplt+0x2a0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d053      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6f      	ldr	r2, [pc, #444]	@ (8006104 <I2C_ITSlaveCplt+0x2a4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04d      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6d      	ldr	r2, [pc, #436]	@ (8006108 <I2C_ITSlaveCplt+0x2a8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d047      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800610c <I2C_ITSlaveCplt+0x2ac>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d041      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a69      	ldr	r2, [pc, #420]	@ (8006110 <I2C_ITSlaveCplt+0x2b0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d03b      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a67      	ldr	r2, [pc, #412]	@ (8006114 <I2C_ITSlaveCplt+0x2b4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d035      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a65      	ldr	r2, [pc, #404]	@ (8006118 <I2C_ITSlaveCplt+0x2b8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02f      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a63      	ldr	r2, [pc, #396]	@ (800611c <I2C_ITSlaveCplt+0x2bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d029      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a61      	ldr	r2, [pc, #388]	@ (8006120 <I2C_ITSlaveCplt+0x2c0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d023      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8006124 <I2C_ITSlaveCplt+0x2c4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8006128 <I2C_ITSlaveCplt+0x2c8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d017      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800612c <I2C_ITSlaveCplt+0x2cc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d011      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a59      	ldr	r2, [pc, #356]	@ (8006130 <I2C_ITSlaveCplt+0x2d0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a57      	ldr	r2, [pc, #348]	@ (8006134 <I2C_ITSlaveCplt+0x2d4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d005      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a55      	ldr	r2, [pc, #340]	@ (8006138 <I2C_ITSlaveCplt+0x2d8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d105      	bne.n	8005ff4 <I2C_ITSlaveCplt+0x194>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	e004      	b.n	8005ffe <I2C_ITSlaveCplt+0x19e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006002:	e0a2      	b.n	800614a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 809d 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800601e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8090 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <I2C_ITSlaveCplt+0x29c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d059      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a30      	ldr	r2, [pc, #192]	@ (8006100 <I2C_ITSlaveCplt+0x2a0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d053      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <I2C_ITSlaveCplt+0x2a4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04d      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a2c      	ldr	r2, [pc, #176]	@ (8006108 <I2C_ITSlaveCplt+0x2a8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d047      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2a      	ldr	r2, [pc, #168]	@ (800610c <I2C_ITSlaveCplt+0x2ac>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d041      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a28      	ldr	r2, [pc, #160]	@ (8006110 <I2C_ITSlaveCplt+0x2b0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <I2C_ITSlaveCplt+0x2b4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d035      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <I2C_ITSlaveCplt+0x2b8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02f      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a22      	ldr	r2, [pc, #136]	@ (800611c <I2C_ITSlaveCplt+0x2bc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d029      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <I2C_ITSlaveCplt+0x2c0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d023      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006124 <I2C_ITSlaveCplt+0x2c4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006128 <I2C_ITSlaveCplt+0x2c8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d017      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <I2C_ITSlaveCplt+0x2cc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d011      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <I2C_ITSlaveCplt+0x2d0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00b      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <I2C_ITSlaveCplt+0x2d4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d005      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <I2C_ITSlaveCplt+0x2d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d128      	bne.n	800613c <I2C_ITSlaveCplt+0x2dc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	e027      	b.n	8006146 <I2C_ITSlaveCplt+0x2e6>
 80060f6:	bf00      	nop
 80060f8:	fe00e800 	.word	0xfe00e800
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	b29b      	uxth	r3, r3
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0304 	bic.w	r3, r3, #4
 800615a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a4:	f043 0204 	orr.w	r2, r3, #4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d049      	beq.n	800624a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d044      	beq.n	800624a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d128      	bne.n	800621c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b28      	cmp	r3, #40	@ 0x28
 80061d4:	d108      	bne.n	80061e8 <I2C_ITSlaveCplt+0x388>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061dc:	d104      	bne.n	80061e8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80061de:	6979      	ldr	r1, [r7, #20]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f891 	bl	8006308 <I2C_ITListenCplt>
 80061e6:	e030      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b29      	cmp	r3, #41	@ 0x29
 80061f2:	d10e      	bne.n	8006212 <I2C_ITSlaveCplt+0x3b2>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061fa:	d00a      	beq.n	8006212 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2210      	movs	r2, #16
 8006202:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f9ea 	bl	80065de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fdcc 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8006210:	e01b      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2210      	movs	r2, #16
 8006218:	61da      	str	r2, [r3, #28]
 800621a:	e016      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2210      	movs	r2, #16
 8006222:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <I2C_ITSlaveCplt+0x3de>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800623c:	d105      	bne.n	800624a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8b3 	bl	80063b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8a2 	bl	80063b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b28      	cmp	r3, #40	@ 0x28
 8006276:	d141      	bne.n	80062fc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f844 	bl	8006308 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006280:	e03c      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800628a:	d014      	beq.n	80062b6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fd8b 	bl	8005da8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <I2C_ITSlaveCplt+0x4a4>)
 8006296:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fb8b 	bl	80059ca <HAL_I2C_ListenCpltCallback>
}
 80062b4:	e022      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b22      	cmp	r3, #34	@ 0x22
 80062c0:	d10e      	bne.n	80062e0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fb5e 	bl	800599a <HAL_I2C_SlaveRxCpltCallback>
}
 80062de:	e00d      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fb45 	bl	8005986 <HAL_I2C_SlaveTxCpltCallback>
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	ffff0000 	.word	0xffff0000

08006308 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a25      	ldr	r2, [pc, #148]	@ (80063ac <I2C_ITListenCplt+0xa4>)
 8006316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d022      	beq.n	8006384 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d012      	beq.n	8006384 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	f043 0204 	orr.w	r2, r3, #4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006384:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb5f 	bl	8006a4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2210      	movs	r2, #16
 8006394:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fb13 	bl	80059ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	ffff0000 	.word	0xffff0000

080063b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006584 <I2C_ITError+0x1d4>)
 80063ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b28      	cmp	r3, #40	@ 0x28
 80063e6:	d005      	beq.n	80063f4 <I2C_ITError+0x44>
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b29      	cmp	r3, #41	@ 0x29
 80063ec:	d002      	beq.n	80063f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f2:	d10b      	bne.n	800640c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063f4:	2103      	movs	r1, #3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb28 	bl	8006a4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2228      	movs	r2, #40	@ 0x28
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a60      	ldr	r2, [pc, #384]	@ (8006588 <I2C_ITError+0x1d8>)
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34
 800640a:	e030      	b.n	800646e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800640c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb1b 	bl	8006a4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8e1 	bl	80065de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b60      	cmp	r3, #96	@ 0x60
 8006426:	d01f      	beq.n	8006468 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d114      	bne.n	8006468 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d109      	bne.n	8006460 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2210      	movs	r2, #16
 8006452:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006458:	f043 0204 	orr.w	r2, r3, #4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2220      	movs	r2, #32
 8006466:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d039      	beq.n	80064f0 <I2C_ITError+0x140>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b11      	cmp	r3, #17
 8006480:	d002      	beq.n	8006488 <I2C_ITError+0xd8>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b21      	cmp	r3, #33	@ 0x21
 8006486:	d133      	bne.n	80064f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006496:	d107      	bne.n	80064a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fbff 	bl	8004cb0 <HAL_DMA_GetState>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d017      	beq.n	80064e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	4a33      	ldr	r2, [pc, #204]	@ (800658c <I2C_ITError+0x1dc>)
 80064be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd fa7f 	bl	80039d0 <HAL_DMA_Abort_IT>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d04d      	beq.n	8006574 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064e6:	e045      	b.n	8006574 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f851 	bl	8006590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ee:	e041      	b.n	8006574 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d039      	beq.n	800656c <I2C_ITError+0x1bc>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b12      	cmp	r3, #18
 80064fc:	d002      	beq.n	8006504 <I2C_ITError+0x154>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b22      	cmp	r3, #34	@ 0x22
 8006502:	d133      	bne.n	800656c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800650e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006512:	d107      	bne.n	8006524 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006522:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fbc1 	bl	8004cb0 <HAL_DMA_GetState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b01      	cmp	r3, #1
 8006532:	d017      	beq.n	8006564 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	4a14      	ldr	r2, [pc, #80]	@ (800658c <I2C_ITError+0x1dc>)
 800653a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	4618      	mov	r0, r3
 800654a:	f7fd fa41 	bl	80039d0 <HAL_DMA_Abort_IT>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d011      	beq.n	8006578 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006562:	e009      	b.n	8006578 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f813 	bl	8006590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800656a:	e005      	b.n	8006578 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f80f 	bl	8006590 <I2C_TreatErrorCallback>
  }
}
 8006572:	e002      	b.n	800657a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006578:	bf00      	nop
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	ffff0000 	.word	0xffff0000
 8006588:	08005a07 	.word	0x08005a07
 800658c:	08006627 	.word	0x08006627

08006590 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b60      	cmp	r3, #96	@ 0x60
 80065a2:	d10e      	bne.n	80065c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fa19 	bl	80059f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065c0:	e009      	b.n	80065d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fa04 	bl	80059de <HAL_I2C_ErrorCallback>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d103      	bne.n	80065fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d007      	beq.n	800661a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	619a      	str	r2, [r3, #24]
  }
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	2200      	movs	r2, #0
 8006642:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	2200      	movs	r2, #0
 8006652:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff9b 	bl	8006590 <I2C_TreatErrorCallback>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006672:	e03b      	b.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8d5 	bl	8006828 <I2C_IsErrorOccurred>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e041      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d02d      	beq.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fc f990 	bl	80029b4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d122      	bne.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d113      	bne.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e00f      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	bf0c      	ite	eq
 80066fc:	2301      	moveq	r3, #1
 80066fe:	2300      	movne	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	429a      	cmp	r2, r3
 8006708:	d0b4      	beq.n	8006674 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006720:	e033      	b.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f87e 	bl	8006828 <I2C_IsErrorOccurred>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e031      	b.n	800679a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d025      	beq.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fc f939 	bl	80029b4 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11a      	bne.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d013      	beq.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e007      	b.n	800679a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d1c4      	bne.n	8006722 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ae:	e02f      	b.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f837 	bl	8006828 <I2C_IsErrorOccurred>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02d      	b.n	8006820 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c4:	f7fc f8f6 	bl	80029b4 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d11a      	bne.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d013      	beq.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	f043 0220 	orr.w	r2, r3, #32
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b20      	cmp	r3, #32
 800681c:	d1c8      	bne.n	80067b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	d068      	beq.n	8006926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2210      	movs	r2, #16
 800685a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800685c:	e049      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d045      	beq.n	80068f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fc f8a5 	bl	80029b4 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_IsErrorOccurred+0x54>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d13a      	bne.n	80068f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800689a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689e:	d121      	bne.n	80068e4 <I2C_IsErrorOccurred+0xbc>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068a6:	d01d      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d01a      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068be:	f7fc f879 	bl	80029b4 <HAL_GetTick>
 80068c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c4:	e00e      	b.n	80068e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c6:	f7fc f875 	bl	80029b4 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b19      	cmp	r3, #25
 80068d2:	d907      	bls.n	80068e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f043 0320 	orr.w	r3, r3, #32
 80068da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80068e2:	e006      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d1e9      	bne.n	80068c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d003      	beq.n	8006908 <I2C_IsErrorOccurred+0xe0>
 8006900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0aa      	beq.n	800685e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2220      	movs	r2, #32
 8006916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f043 0308 	orr.w	r3, r3, #8
 8006960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800696a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01c      	beq.n	80069d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fe1e 	bl	80065de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <I2C_IsErrorOccurred+0x1bc>)
 80069ae:	400b      	ands	r3, r1
 80069b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	@ 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	fe00e800 	.word	0xfe00e800

080069e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	4613      	mov	r3, r2
 80069f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a00:	7a7b      	ldrb	r3, [r7, #9]
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	0d5b      	lsrs	r3, r3, #21
 8006a22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a26:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <I2C_TransferConfig+0x60>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	ea02 0103 	and.w	r1, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	03ff63ff 	.word	0x03ff63ff

08006a4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a7a:	2b28      	cmp	r3, #40	@ 0x28
 8006a7c:	d003      	beq.n	8006a86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006a84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a86:	887b      	ldrh	r3, [r7, #2]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006a96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aa4:	2b28      	cmp	r3, #40	@ 0x28
 8006aa6:	d003      	beq.n	8006ab0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006aae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da03      	bge.n	8006ac0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d103      	bne.n	8006ace <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ace:	887b      	ldrh	r3, [r7, #2]
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d103      	bne.n	8006adc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d103      	bne.n	8006aea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43da      	mvns	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	400a      	ands	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d138      	bne.n	8006b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e032      	b.n	8006b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2224      	movs	r2, #36	@ 0x24
 8006b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0201 	bic.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d139      	bne.n	8006c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e033      	b.n	8006c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e000      	b.n	8006c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e0bf      	b.n	8006dca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fb f8aa 	bl	8001db8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6899      	ldr	r1, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006cac:	400b      	ands	r3, r1
 8006cae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6899      	ldr	r1, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68d9      	ldr	r1, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1a      	ldr	r2, [r3, #32]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6919      	ldr	r1, [r3, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b33      	ldr	r3, [pc, #204]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006d08:	400b      	ands	r3, r1
 8006d0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6919      	ldr	r1, [r3, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6959      	ldr	r1, [r3, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b27      	ldr	r3, [pc, #156]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6959      	ldr	r1, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0206 	orr.w	r2, r2, #6
 8006da6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	f000f800 	.word	0xf000f800

08006dd8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d023      	beq.n	8006e42 <HAL_LTDC_IRQHandler+0x6a>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01e      	beq.n	8006e42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f86f 	bl	8006f20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d023      	beq.n	8006e94 <HAL_LTDC_IRQHandler+0xbc>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01e      	beq.n	8006e94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0202 	bic.w	r2, r2, #2
 8006e64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e74:	f043 0202 	orr.w	r2, r3, #2
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f846 	bl	8006f20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01b      	beq.n	8006ed6 <HAL_LTDC_IRQHandler+0xfe>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0201 	bic.w	r2, r2, #1
 8006eb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fa fc9b 	bl	800180c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01b      	beq.n	8006f18 <HAL_LTDC_IRQHandler+0x140>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0208 	bic.w	r2, r2, #8
 8006ef8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2208      	movs	r2, #8
 8006f00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f80e 	bl	8006f34 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f48:	b5b0      	push	{r4, r5, r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_LTDC_ConfigLayer+0x1a>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e02c      	b.n	8006fbc <HAL_LTDC_ConfigLayer+0x74>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2134      	movs	r1, #52	@ 0x34
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4614      	mov	r4, r2
 8006f86:	461d      	mov	r5, r3
 8006f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f8af 	bl	8007100 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bdb0      	pop	{r4, r5, r7, pc}

08006fc4 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_LTDC_SetAddress+0x1a>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e024      	b.n	8007028 <HAL_LTDC_SetAddress+0x64>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2234      	movs	r2, #52	@ 0x34
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	3338      	adds	r3, #56	@ 0x38
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f879 	bl	8007100 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2201      	movs	r2, #1
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_LTDC_ProgramLineEvent+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e023      	b.n	8007090 <HAL_LTDC_ProgramLineEvent+0x60>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007068:	4a0c      	ldr	r2, [pc, #48]	@ (800709c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0201 	orr.w	r2, r2, #1
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	50001000 	.word	0x50001000

080070a0 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_LTDC_Reload+0x18>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e01c      	b.n	80070f2 <HAL_LTDC_Reload+0x52>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0208 	orr.w	r2, r2, #8
 80070d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	@ 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711c:	4413      	add	r3, r2
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	01db      	lsls	r3, r3, #7
 800712c:	4413      	add	r3, r2
 800712e:	3384      	adds	r3, #132	@ 0x84
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	4611      	mov	r1, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	01d2      	lsls	r2, r2, #7
 800713c:	440a      	add	r2, r1
 800713e:	3284      	adds	r2, #132	@ 0x84
 8007140:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007144:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007156:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007158:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	440b      	add	r3, r1
 8007166:	3384      	adds	r3, #132	@ 0x84
 8007168:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800716e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717e:	4413      	add	r3, r2
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	01db      	lsls	r3, r3, #7
 800718e:	4413      	add	r3, r2
 8007190:	3384      	adds	r3, #132	@ 0x84
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	4611      	mov	r1, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	01d2      	lsls	r2, r2, #7
 800719e:	440a      	add	r2, r1
 80071a0:	3284      	adds	r2, #132	@ 0x84
 80071a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80071a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b6:	4413      	add	r3, r2
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	3384      	adds	r3, #132	@ 0x84
 80071c8:	4619      	mov	r1, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	01db      	lsls	r3, r3, #7
 80071da:	4413      	add	r3, r2
 80071dc:	3384      	adds	r3, #132	@ 0x84
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	4611      	mov	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	01d2      	lsls	r2, r2, #7
 80071ea:	440a      	add	r2, r1
 80071ec:	3284      	adds	r2, #132	@ 0x84
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	3384      	adds	r3, #132	@ 0x84
 8007202:	461a      	mov	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	01db      	lsls	r3, r3, #7
 8007230:	4413      	add	r3, r2
 8007232:	3384      	adds	r3, #132	@ 0x84
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	01db      	lsls	r3, r3, #7
 8007240:	4413      	add	r3, r2
 8007242:	3384      	adds	r3, #132	@ 0x84
 8007244:	461a      	mov	r2, r3
 8007246:	2300      	movs	r3, #0
 8007248:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007250:	461a      	mov	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	431a      	orrs	r2, r3
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	440b      	add	r3, r1
 8007266:	3384      	adds	r3, #132	@ 0x84
 8007268:	4619      	mov	r1, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	01db      	lsls	r3, r3, #7
 800727a:	4413      	add	r3, r2
 800727c:	3384      	adds	r3, #132	@ 0x84
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4611      	mov	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	01d2      	lsls	r2, r2, #7
 800728a:	440a      	add	r2, r1
 800728c:	3284      	adds	r2, #132	@ 0x84
 800728e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007292:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	01db      	lsls	r3, r3, #7
 800729e:	4413      	add	r3, r2
 80072a0:	3384      	adds	r3, #132	@ 0x84
 80072a2:	461a      	mov	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	01db      	lsls	r3, r3, #7
 80072b4:	4413      	add	r3, r2
 80072b6:	3384      	adds	r3, #132	@ 0x84
 80072b8:	69da      	ldr	r2, [r3, #28]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	01db      	lsls	r3, r3, #7
 80072c4:	440b      	add	r3, r1
 80072c6:	3384      	adds	r3, #132	@ 0x84
 80072c8:	4619      	mov	r1, r3
 80072ca:	4b58      	ldr	r3, [pc, #352]	@ (800742c <LTDC_SetConfig+0x32c>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	6809      	ldr	r1, [r1, #0]
 80072dc:	4608      	mov	r0, r1
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	01c9      	lsls	r1, r1, #7
 80072e2:	4401      	add	r1, r0
 80072e4:	3184      	adds	r1, #132	@ 0x84
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	01db      	lsls	r3, r3, #7
 80072f4:	4413      	add	r3, r2
 80072f6:	3384      	adds	r3, #132	@ 0x84
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	@ 0x84
 8007308:	461a      	mov	r2, r3
 800730a:	2300      	movs	r3, #0
 800730c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	4413      	add	r3, r2
 800731a:	3384      	adds	r3, #132	@ 0x84
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800732c:	2304      	movs	r3, #4
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	e01b      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d102      	bne.n	8007340 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800733a:	2303      	movs	r3, #3
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e014      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d00b      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800734c:	2b02      	cmp	r3, #2
 800734e:	d007      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007354:	2b03      	cmp	r3, #3
 8007356:	d003      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800735c:	2b07      	cmp	r3, #7
 800735e:	d102      	bne.n	8007366 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007360:	2302      	movs	r3, #2
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e001      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007366:	2301      	movs	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	01db      	lsls	r3, r3, #7
 8007374:	4413      	add	r3, r2
 8007376:	3384      	adds	r3, #132	@ 0x84
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	4611      	mov	r1, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	01d2      	lsls	r2, r2, #7
 8007384:	440a      	add	r2, r1
 8007386:	3284      	adds	r2, #132	@ 0x84
 8007388:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800738c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	fb02 f303 	mul.w	r3, r2, r3
 8007398:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	69f9      	ldr	r1, [r7, #28]
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80073ac:	68f9      	ldr	r1, [r7, #12]
 80073ae:	6809      	ldr	r1, [r1, #0]
 80073b0:	4608      	mov	r0, r1
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	01c9      	lsls	r1, r1, #7
 80073b6:	4401      	add	r1, r0
 80073b8:	3184      	adds	r1, #132	@ 0x84
 80073ba:	4313      	orrs	r3, r2
 80073bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4413      	add	r3, r2
 80073ca:	3384      	adds	r3, #132	@ 0x84
 80073cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	440b      	add	r3, r1
 80073da:	3384      	adds	r3, #132	@ 0x84
 80073dc:	4619      	mov	r1, r3
 80073de:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <LTDC_SetConfig+0x330>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	4413      	add	r3, r2
 80073f0:	3384      	adds	r3, #132	@ 0x84
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	@ 0x84
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	4611      	mov	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	01d2      	lsls	r2, r2, #7
 8007414:	440a      	add	r2, r1
 8007416:	3284      	adds	r2, #132	@ 0x84
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6013      	str	r3, [r2, #0]
}
 800741e:	bf00      	nop
 8007420:	3724      	adds	r7, #36	@ 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	fffff8f8 	.word	0xfffff8f8
 8007430:	fffff800 	.word	0xfffff800

08007434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af02      	add	r7, sp, #8
 800743a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e0fe      	b.n	8007644 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f00e fb8c 	bl	8015b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2203      	movs	r2, #3
 8007464:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f008 f9b0 	bl	800f7d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7c1a      	ldrb	r2, [r3, #16]
 800747a:	f88d 2000 	strb.w	r2, [sp]
 800747e:	3304      	adds	r3, #4
 8007480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007482:	f008 f881 	bl	800f588 <USB_CoreInit>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0d5      	b.n	8007644 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f008 f9a8 	bl	800f7f4 <USB_SetCurrentMode>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0c6      	b.n	8007644 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
 80074ba:	e04a      	b.n	8007552 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074bc:	7bfa      	ldrb	r2, [r7, #15]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	3315      	adds	r3, #21
 80074cc:	2201      	movs	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	3314      	adds	r3, #20
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	b298      	uxth	r0, r3
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4613      	mov	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	332e      	adds	r3, #46	@ 0x2e
 80074f8:	4602      	mov	r2, r0
 80074fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	3318      	adds	r3, #24
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007510:	7bfa      	ldrb	r2, [r7, #15]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	331c      	adds	r3, #28
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007524:	7bfa      	ldrb	r2, [r7, #15]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3320      	adds	r3, #32
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3324      	adds	r3, #36	@ 0x24
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	3301      	adds	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	791b      	ldrb	r3, [r3, #4]
 8007556:	7bfa      	ldrb	r2, [r7, #15]
 8007558:	429a      	cmp	r2, r3
 800755a:	d3af      	bcc.n	80074bc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e044      	b.n	80075ec <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007578:	7bfa      	ldrb	r2, [r7, #15]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800758a:	7bfa      	ldrb	r2, [r7, #15]
 800758c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800758e:	7bfa      	ldrb	r2, [r7, #15]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4613      	mov	r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	791b      	ldrb	r3, [r3, #4]
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d3b5      	bcc.n	8007562 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7c1a      	ldrb	r2, [r3, #16]
 80075fe:	f88d 2000 	strb.w	r2, [sp]
 8007602:	3304      	adds	r3, #4
 8007604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007606:	f008 f941 	bl	800f88c <USB_DevInit>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e013      	b.n	8007644 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7b1b      	ldrb	r3, [r3, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d102      	bne.n	8007638 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 f96c 	bl	8008910 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f009 f980 	bl	8010942 <USB_DevDisconnect>

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_PCD_Start+0x1c>
 8007664:	2302      	movs	r3, #2
 8007666:	e022      	b.n	80076ae <HAL_PCD_Start+0x62>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007680:	2b01      	cmp	r3, #1
 8007682:	d105      	bne.n	8007690 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f008 f88b 	bl	800f7b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f009 f92e 	bl	8010900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80076b6:	b590      	push	{r4, r7, lr}
 80076b8:	b08d      	sub	sp, #52	@ 0x34
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f009 f9ec 	bl	8010aaa <USB_GetMode>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 84b9 	bne.w	800804c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f009 f950 	bl	8010984 <USB_ReadInterrupts>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 84af 	beq.w	800804a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f009 f93d 	bl	8010984 <USB_ReadInterrupts>
 800770a:	4603      	mov	r3, r0
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b02      	cmp	r3, #2
 8007712:	d107      	bne.n	8007724 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695a      	ldr	r2, [r3, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f002 0202 	and.w	r2, r2, #2
 8007722:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f009 f92b 	bl	8010984 <USB_ReadInterrupts>
 800772e:	4603      	mov	r3, r0
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d161      	bne.n	80077fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0210 	bic.w	r2, r2, #16
 8007746:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f003 020f 	and.w	r2, r3, #15
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	3304      	adds	r3, #4
 8007766:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	0c5b      	lsrs	r3, r3, #17
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	2b02      	cmp	r3, #2
 8007772:	d124      	bne.n	80077be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d035      	beq.n	80077ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	091b      	lsrs	r3, r3, #4
 8007788:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800778a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	6a38      	ldr	r0, [r7, #32]
 8007794:	f008 ff62 	bl	801065c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077a4:	441a      	add	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077b6:	441a      	add	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	615a      	str	r2, [r3, #20]
 80077bc:	e016      	b.n	80077ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	0c5b      	lsrs	r3, r3, #17
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	2b06      	cmp	r3, #6
 80077c8:	d110      	bne.n	80077ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077d0:	2208      	movs	r2, #8
 80077d2:	4619      	mov	r1, r3
 80077d4:	6a38      	ldr	r0, [r7, #32]
 80077d6:	f008 ff41 	bl	801065c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	695a      	ldr	r2, [r3, #20]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e6:	441a      	add	r2, r3
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0210 	orr.w	r2, r2, #16
 80077fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	f009 f8bf 	bl	8010984 <USB_ReadInterrupts>
 8007806:	4603      	mov	r3, r0
 8007808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800780c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007810:	f040 80a7 	bne.w	8007962 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f009 f8c4 	bl	80109aa <USB_ReadDevAllOutEpInterrupt>
 8007822:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007824:	e099      	b.n	800795a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 808e 	beq.w	800794e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f009 f8e8 	bl	8010a12 <USB_ReadDevOutEPInterrupt>
 8007842:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785a:	461a      	mov	r2, r3
 800785c:	2301      	movs	r3, #1
 800785e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fece 	bl	8008604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00c      	beq.n	800788c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787e:	461a      	mov	r2, r3
 8007880:	2308      	movs	r3, #8
 8007882:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 ffa4 	bl	80087d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a2:	461a      	mov	r2, r3
 80078a4:	2310      	movs	r3, #16
 80078a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d030      	beq.n	8007914 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	2b80      	cmp	r3, #128	@ 0x80
 80078bc:	d109      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80078d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	4413      	add	r3, r2
 80078e4:	3304      	adds	r3, #4
 80078e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	78db      	ldrb	r3, [r3, #3]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d108      	bne.n	8007902 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2200      	movs	r2, #0
 80078f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f00e fa71 	bl	8015de4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790e:	461a      	mov	r2, r3
 8007910:	2302      	movs	r3, #2
 8007912:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792a:	461a      	mov	r2, r3
 800792c:	2320      	movs	r3, #32
 800792e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800794c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	3301      	adds	r3, #1
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	2b00      	cmp	r3, #0
 800795e:	f47f af62 	bne.w	8007826 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f009 f80c 	bl	8010984 <USB_ReadInterrupts>
 800796c:	4603      	mov	r3, r0
 800796e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007972:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007976:	f040 80db 	bne.w	8007b30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f009 f82d 	bl	80109de <USB_ReadDevAllInEpInterrupt>
 8007984:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800798a:	e0cd      	b.n	8007b28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80c2 	beq.w	8007b1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f009 f853 	bl	8010a4e <USB_ReadDevInEPInterrupt>
 80079a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d057      	beq.n	8007a64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	2201      	movs	r2, #1
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69f9      	ldr	r1, [r7, #28]
 80079d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d4:	4013      	ands	r3, r2
 80079d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e4:	461a      	mov	r2, r3
 80079e6:	2301      	movs	r3, #1
 80079e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	799b      	ldrb	r3, [r3, #6]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d132      	bne.n	8007a58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f6:	4613      	mov	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3320      	adds	r3, #32
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4403      	add	r3, r0
 8007a12:	331c      	adds	r3, #28
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4419      	add	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4403      	add	r3, r0
 8007a26:	3320      	adds	r3, #32
 8007a28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d113      	bne.n	8007a58 <HAL_PCD_IRQHandler+0x3a2>
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3324      	adds	r3, #36	@ 0x24
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d108      	bne.n	8007a58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a50:	461a      	mov	r2, r3
 8007a52:	2101      	movs	r1, #1
 8007a54:	f009 f85c 	bl	8010b10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f00e f93b 	bl	8015cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a96:	461a      	mov	r2, r3
 8007a98:	2310      	movs	r3, #16
 8007a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2340      	movs	r3, #64	@ 0x40
 8007ab6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d023      	beq.n	8007b0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007ac2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ac4:	6a38      	ldr	r0, [r7, #32]
 8007ac6:	f008 f83f 	bl	800fb48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007acc:	4613      	mov	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4413      	add	r3, r2
 8007ada:	3304      	adds	r3, #4
 8007adc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d108      	bne.n	8007af8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f00e f988 	bl	8015e08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b04:	461a      	mov	r2, r3
 8007b06:	2302      	movs	r3, #2
 8007b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fce8 	bl	80084ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	3301      	adds	r3, #1
 8007b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f47f af2e 	bne.w	800798c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f008 ff25 	bl	8010984 <USB_ReadInterrupts>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b44:	d122      	bne.n	8007b8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d108      	bne.n	8007b76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fef2 	bl	8008958 <HAL_PCDEx_LPM_Callback>
 8007b74:	e002      	b.n	8007b7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f00e f926 	bl	8015dc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f008 fef7 	bl	8010984 <USB_ReadInterrupts>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ba0:	d112      	bne.n	8007bc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d102      	bne.n	8007bb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f00e f8e2 	bl	8015d7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f008 fed9 	bl	8010984 <USB_ReadInterrupts>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bdc:	d121      	bne.n	8007c22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695a      	ldr	r2, [r3, #20]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007bec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d111      	bne.n	8007c1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c06:	089b      	lsrs	r3, r3, #2
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007c12:	2101      	movs	r1, #1
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fe9f 	bl	8008958 <HAL_PCDEx_LPM_Callback>
 8007c1a:	e002      	b.n	8007c22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f00e f8ad 	bl	8015d7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f008 feac 	bl	8010984 <USB_ReadInterrupts>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c36:	f040 80b7 	bne.w	8007da8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2110      	movs	r1, #16
 8007c54:	4618      	mov	r0, r3
 8007c56:	f007 ff77 	bl	800fb48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c5e:	e046      	b.n	8007cee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ca6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ce6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cea:	3301      	adds	r3, #1
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d3b2      	bcc.n	8007c60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7bdb      	ldrb	r3, [r3, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d016      	beq.n	8007d44 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d26:	f043 030b 	orr.w	r3, r3, #11
 8007d2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d3c:	f043 030b 	orr.w	r3, r3, #11
 8007d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d42:	e015      	b.n	8007d70 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d52:	4619      	mov	r1, r3
 8007d54:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d6a:	f043 030b 	orr.w	r3, r3, #11
 8007d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d92:	461a      	mov	r2, r3
 8007d94:	f008 febc 	bl	8010b10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f008 fde9 	bl	8010984 <USB_ReadInterrupts>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dbc:	d123      	bne.n	8007e06 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f008 fe80 	bl	8010ac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f007 ff34 	bl	800fc3a <USB_GetDevSpeed>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681c      	ldr	r4, [r3, #0]
 8007dde:	f001 fe55 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 8007de2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007de8:	461a      	mov	r2, r3
 8007dea:	4620      	mov	r0, r4
 8007dec:	f007 fc3e 	bl	800f66c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f00d ff9a 	bl	8015d2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695a      	ldr	r2, [r3, #20]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f008 fdba 	bl	8010984 <USB_ReadInterrupts>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d10a      	bne.n	8007e30 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f00d ff77 	bl	8015d0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695a      	ldr	r2, [r3, #20]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f002 0208 	and.w	r2, r2, #8
 8007e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f008 fda5 	bl	8010984 <USB_ReadInterrupts>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e40:	2b80      	cmp	r3, #128	@ 0x80
 8007e42:	d123      	bne.n	8007e8c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e50:	2301      	movs	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e54:	e014      	b.n	8007e80 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d105      	bne.n	8007e7a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fb08 	bl	800848a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	791b      	ldrb	r3, [r3, #4]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d3e4      	bcc.n	8007e56 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f008 fd77 	bl	8010984 <USB_ReadInterrupts>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea0:	d13c      	bne.n	8007f1c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea6:	e02b      	b.n	8007f00 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3318      	adds	r3, #24
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d115      	bne.n	8007efa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007ece:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da12      	bge.n	8007efa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	3317      	adds	r3, #23
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fac8 	bl	800848a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	3301      	adds	r3, #1
 8007efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	791b      	ldrb	r3, [r3, #4]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d3cd      	bcc.n	8007ea8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f008 fd2f 	bl	8010984 <USB_ReadInterrupts>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f30:	d156      	bne.n	8007fe0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f32:	2301      	movs	r3, #1
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f36:	e045      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d12e      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da2b      	bge.n	8007fbe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007f72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d121      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7e:	4613      	mov	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	440b      	add	r3, r1
 8007f88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fba:	6053      	str	r3, [r2, #4]
            break;
 8007fbc:	e008      	b.n	8007fd0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	791b      	ldrb	r3, [r3, #4]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d3b3      	bcc.n	8007f38 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695a      	ldr	r2, [r3, #20]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f008 fccd 	bl	8010984 <USB_ReadInterrupts>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d10a      	bne.n	800800c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f00d ff18 	bl	8015e2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695a      	ldr	r2, [r3, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800800a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f008 fcb7 	bl	8010984 <USB_ReadInterrupts>
 8008016:	4603      	mov	r3, r0
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d115      	bne.n	800804c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f00d ff08 	bl	8015e48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6859      	ldr	r1, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
 8008048:	e000      	b.n	800804c <HAL_PCD_IRQHandler+0x996>
      return;
 800804a:	bf00      	nop
    }
  }
}
 800804c:	3734      	adds	r7, #52	@ 0x34
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_PCD_SetAddress+0x1a>
 8008068:	2302      	movs	r3, #2
 800806a:	e012      	b.n	8008092 <HAL_PCD_SetAddress+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f008 fc16 	bl	80108b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	461a      	mov	r2, r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	70fb      	strb	r3, [r7, #3]
 80080ac:	460b      	mov	r3, r1
 80080ae:	803b      	strh	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80080b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0f      	bge.n	80080e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	f003 020f 	and.w	r2, r3, #15
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3310      	adds	r3, #16
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	705a      	strb	r2, [r3, #1]
 80080de:	e00f      	b.n	8008100 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	3304      	adds	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800810c:	883a      	ldrh	r2, [r7, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	78ba      	ldrb	r2, [r7, #2]
 8008116:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800812a:	78bb      	ldrb	r3, [r7, #2]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d102      	bne.n	8008136 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_PCD_EP_Open+0xaa>
 8008140:	2302      	movs	r3, #2
 8008142:	e00e      	b.n	8008162 <HAL_PCD_EP_Open+0xc8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	4618      	mov	r0, r3
 8008154:	f007 fd96 	bl	800fc84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008160:	7afb      	ldrb	r3, [r7, #11]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da0f      	bge.n	800819e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	f003 020f 	and.w	r2, r3, #15
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	3310      	adds	r3, #16
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	705a      	strb	r2, [r3, #1]
 800819c:	e00f      	b.n	80081be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 020f 	and.w	r2, r3, #15
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_PCD_EP_Close+0x6e>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e00e      	b.n	80081f6 <HAL_PCD_EP_Close+0x8c>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f007 fdd4 	bl	800fd94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	460b      	mov	r3, r1
 800820c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	3304      	adds	r3, #4
 8008226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2200      	movs	r2, #0
 800823e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	b2da      	uxtb	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	799b      	ldrb	r3, [r3, #6]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d102      	bne.n	800825a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	799b      	ldrb	r3, [r3, #6]
 8008262:	461a      	mov	r2, r3
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	f007 fe71 	bl	800ff4c <USB_EPStartXfer>

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	f003 020f 	and.w	r2, r3, #15
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008296:	681b      	ldr	r3, [r3, #0]
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	460b      	mov	r3, r1
 80082b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	f003 020f 	and.w	r2, r3, #15
 80082ba:	4613      	mov	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2200      	movs	r2, #0
 80082dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2201      	movs	r2, #1
 80082e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	799b      	ldrb	r3, [r3, #6]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d102      	bne.n	80082fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	799b      	ldrb	r3, [r3, #6]
 8008306:	461a      	mov	r2, r3
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	f007 fe1f 	bl	800ff4c <USB_EPStartXfer>

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	7912      	ldrb	r2, [r2, #4]
 800832e:	4293      	cmp	r3, r2
 8008330:	d901      	bls.n	8008336 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e04f      	b.n	80083d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800833a:	2b00      	cmp	r3, #0
 800833c:	da0f      	bge.n	800835e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	f003 020f 	and.w	r2, r3, #15
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	3310      	adds	r3, #16
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	705a      	strb	r2, [r3, #1]
 800835c:	e00d      	b.n	800837a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	4613      	mov	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_PCD_EP_SetStall+0x82>
 8008396:	2302      	movs	r3, #2
 8008398:	e01d      	b.n	80083d6 <HAL_PCD_EP_SetStall+0xbe>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f008 f9af 	bl	801070c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7999      	ldrb	r1, [r3, #6]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083c6:	461a      	mov	r2, r3
 80083c8:	f008 fba2 	bl	8010b10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7912      	ldrb	r2, [r2, #4]
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d901      	bls.n	80083fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e042      	b.n	8008482 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da0f      	bge.n	8008424 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	3310      	adds	r3, #16
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	3304      	adds	r3, #4
 800841a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	705a      	strb	r2, [r3, #1]
 8008422:	e00f      	b.n	8008444 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	4613      	mov	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	3304      	adds	r3, #4
 800843c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_PCD_EP_ClrStall+0x86>
 8008460:	2302      	movs	r3, #2
 8008462:	e00e      	b.n	8008482 <HAL_PCD_EP_ClrStall+0xa4>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	4618      	mov	r0, r3
 8008474:	f008 f9b8 	bl	80107e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800849a:	2b00      	cmp	r3, #0
 800849c:	da0c      	bge.n	80084b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	3310      	adds	r3, #16
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e00c      	b.n	80084d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	f003 020f 	and.w	r2, r3, #15
 80084be:	4613      	mov	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	3304      	adds	r3, #4
 80084d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	4618      	mov	r0, r3
 80084da:	f007 ffd7 	bl	801048c <USB_EPStopXfer>
 80084de:	4603      	mov	r3, r0
 80084e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80084e2:	7afb      	ldrb	r3, [r7, #11]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	@ 0x28
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	4613      	mov	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	3310      	adds	r3, #16
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	3304      	adds	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	429a      	cmp	r2, r3
 800851e:	d901      	bls.n	8008524 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e06b      	b.n	80085fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	429a      	cmp	r2, r3
 8008538:	d902      	bls.n	8008540 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	3303      	adds	r3, #3
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008548:	e02a      	b.n	80085a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	429a      	cmp	r2, r3
 800855e:	d902      	bls.n	8008566 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3303      	adds	r3, #3
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68d9      	ldr	r1, [r3, #12]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	b2da      	uxtb	r2, r3
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4603      	mov	r3, r0
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f008 f82c 	bl	80105e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	441a      	add	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	441a      	add	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d809      	bhi.n	80085ca <PCD_WriteEmptyTxFifo+0xde>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1bf      	bne.n	800854a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691a      	ldr	r2, [r3, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d811      	bhi.n	80085fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2201      	movs	r2, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	43db      	mvns	r3, r3
 80085f0:	6939      	ldr	r1, [r7, #16]
 80085f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085f6:	4013      	ands	r3, r2
 80085f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	333c      	adds	r3, #60	@ 0x3c
 800861c:	3304      	adds	r3, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	799b      	ldrb	r3, [r3, #6]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d17b      	bne.n	8008732 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d015      	beq.n	8008670 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4a61      	ldr	r2, [pc, #388]	@ (80087cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	f240 80b9 	bls.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80b3 	beq.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008666:	461a      	mov	r2, r3
 8008668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866c:	6093      	str	r3, [r2, #8]
 800866e:	e0a7      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008686:	461a      	mov	r2, r3
 8008688:	2320      	movs	r3, #32
 800868a:	6093      	str	r3, [r2, #8]
 800868c:	e098      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	f040 8093 	bne.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4a4b      	ldr	r2, [pc, #300]	@ (80087cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d90f      	bls.n	80086c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b8:	461a      	mov	r2, r3
 80086ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086be:	6093      	str	r3, [r2, #8]
 80086c0:	e07e      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	3304      	adds	r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1a      	ldr	r2, [r3, #32]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	0159      	lsls	r1, r3, #5
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	440b      	add	r3, r1
 80086e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d114      	bne.n	8008724 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800870c:	461a      	mov	r2, r3
 800870e:	2101      	movs	r1, #1
 8008710:	f008 f9fe 	bl	8010b10 <USB_EP0_OutStart>
 8008714:	e006      	b.n	8008724 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	441a      	add	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f00d faba 	bl	8015ca4 <HAL_PCD_DataOutStageCallback>
 8008730:	e046      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4a26      	ldr	r2, [pc, #152]	@ (80087d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d124      	bne.n	8008784 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008756:	6093      	str	r3, [r2, #8]
 8008758:	e032      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008770:	461a      	mov	r2, r3
 8008772:	2320      	movs	r3, #32
 8008774:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f00d fa91 	bl	8015ca4 <HAL_PCD_DataOutStageCallback>
 8008782:	e01d      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d114      	bne.n	80087b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d108      	bne.n	80087b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087ac:	461a      	mov	r2, r3
 80087ae:	2100      	movs	r1, #0
 80087b0:	f008 f9ae 	bl	8010b10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f00d fa72 	bl	8015ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	4f54300a 	.word	0x4f54300a
 80087d0:	4f54310a 	.word	0x4f54310a

080087d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	333c      	adds	r3, #60	@ 0x3c
 80087ec:	3304      	adds	r3, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a15      	ldr	r2, [pc, #84]	@ (800885c <PCD_EP_OutSetupPacket_int+0x88>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d90e      	bls.n	8008828 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008820:	461a      	mov	r2, r3
 8008822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008826:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f00d fa29 	bl	8015c80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4a0a      	ldr	r2, [pc, #40]	@ (800885c <PCD_EP_OutSetupPacket_int+0x88>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d90c      	bls.n	8008850 <PCD_EP_OutSetupPacket_int+0x7c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	799b      	ldrb	r3, [r3, #6]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d108      	bne.n	8008850 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008848:	461a      	mov	r2, r3
 800884a:	2101      	movs	r1, #1
 800884c:	f008 f960 	bl	8010b10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	4f54300a 	.word	0x4f54300a

08008860 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	4613      	mov	r3, r2
 800886e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008876:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d107      	bne.n	800888e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800887e:	883b      	ldrh	r3, [r7, #0]
 8008880:	0419      	lsls	r1, r3, #16
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	430a      	orrs	r2, r1
 800888a:	629a      	str	r2, [r3, #40]	@ 0x28
 800888c:	e028      	b.n	80088e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4413      	add	r3, r2
 800889a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e00d      	b.n	80088be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	3340      	adds	r3, #64	@ 0x40
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	4413      	add	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	3301      	adds	r3, #1
 80088bc:	73fb      	strb	r3, [r7, #15]
 80088be:	7bfa      	ldrb	r2, [r7, #15]
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d3ec      	bcc.n	80088a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80088c8:	883b      	ldrh	r3, [r7, #0]
 80088ca:	0418      	lsls	r0, r3, #16
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4302      	orrs	r2, r0
 80088d8:	3340      	adds	r3, #64	@ 0x40
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	887a      	ldrh	r2, [r7, #2]
 8008900:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800893e:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <HAL_PCDEx_ActivateLPM+0x44>)
 8008940:	4313      	orrs	r3, r2
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	10000003 	.word	0x10000003

08008958 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008978:	4b19      	ldr	r3, [pc, #100]	@ (80089e0 <HAL_PWREx_ConfigSupply+0x70>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b04      	cmp	r3, #4
 8008982:	d00a      	beq.n	800899a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008984:	4b16      	ldr	r3, [pc, #88]	@ (80089e0 <HAL_PWREx_ConfigSupply+0x70>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	429a      	cmp	r2, r3
 8008990:	d001      	beq.n	8008996 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e01f      	b.n	80089d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	e01d      	b.n	80089d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800899a:	4b11      	ldr	r3, [pc, #68]	@ (80089e0 <HAL_PWREx_ConfigSupply+0x70>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f023 0207 	bic.w	r2, r3, #7
 80089a2:	490f      	ldr	r1, [pc, #60]	@ (80089e0 <HAL_PWREx_ConfigSupply+0x70>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80089aa:	f7fa f803 	bl	80029b4 <HAL_GetTick>
 80089ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089b0:	e009      	b.n	80089c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80089b2:	f7f9 ffff 	bl	80029b4 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089c0:	d901      	bls.n	80089c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e007      	b.n	80089d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089c6:	4b06      	ldr	r3, [pc, #24]	@ (80089e0 <HAL_PWREx_ConfigSupply+0x70>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d2:	d1ee      	bne.n	80089b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	58024800 	.word	0x58024800

080089e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	4a04      	ldr	r2, [pc, #16]	@ (8008a00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80089ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089f2:	60d3      	str	r3, [r2, #12]
}
 80089f4:	bf00      	nop
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	58024800 	.word	0x58024800

08008a04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008a0c:	f7f9 ffd2 	bl	80029b4 <HAL_GetTick>
 8008a10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e05f      	b.n	8008adc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7f9 fb11 	bl	8002050 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008a2e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f85a 	bl	8008aec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	021a      	lsls	r2, r3, #8
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2120      	movs	r1, #32
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f852 	bl	8008b08 <QSPI_WaitFlagStateUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d135      	bne.n	8008ada <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <HAL_QSPI_Init+0xe0>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	6852      	ldr	r2, [r2, #4]
 8008a7c:	0611      	lsls	r1, r2, #24
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68d2      	ldr	r2, [r2, #12]
 8008a82:	4311      	orrs	r1, r2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	69d2      	ldr	r2, [r2, #28]
 8008a88:	4311      	orrs	r1, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6a12      	ldr	r2, [r2, #32]
 8008a8e:	4311      	orrs	r1, r2
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ae8 <HAL_QSPI_Init+0xe4>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6912      	ldr	r2, [r2, #16]
 8008aa6:	0411      	lsls	r1, r2, #16
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6952      	ldr	r2, [r2, #20]
 8008aac:	4311      	orrs	r1, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6992      	ldr	r2, [r2, #24]
 8008ab2:	4311      	orrs	r1, r2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	00ffff2f 	.word	0x00ffff2f
 8008ae8:	ffe0f8fe 	.word	0xffe0f8fe

08008aec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	4613      	mov	r3, r2
 8008b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008b18:	e01a      	b.n	8008b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b20:	d016      	beq.n	8008b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b22:	f7f9 ff47 	bl	80029b4 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d302      	bcc.n	8008b38 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2204      	movs	r2, #4
 8008b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b44:	f043 0201 	orr.w	r2, r3, #1
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e00e      	b.n	8008b6e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d1d6      	bne.n	8008b1a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	@ 0x30
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f000 bc48 	b.w	800941c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8088 	beq.w	8008caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b9a:	4b99      	ldr	r3, [pc, #612]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ba4:	4b96      	ldr	r3, [pc, #600]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d007      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x48>
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	2b18      	cmp	r3, #24
 8008bb4:	d111      	bne.n	8008bda <HAL_RCC_OscConfig+0x62>
 8008bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d10c      	bne.n	8008bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d06d      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x130>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d169      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f000 bc21 	b.w	800941c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008be2:	d106      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x7a>
 8008be4:	4b86      	ldr	r3, [pc, #536]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a85      	ldr	r2, [pc, #532]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	e02e      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCC_OscConfig+0x9c>
 8008bfa:	4b81      	ldr	r3, [pc, #516]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a80      	ldr	r2, [pc, #512]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	4b7e      	ldr	r3, [pc, #504]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	e01d      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c1c:	d10c      	bne.n	8008c38 <HAL_RCC_OscConfig+0xc0>
 8008c1e:	4b78      	ldr	r3, [pc, #480]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a77      	ldr	r2, [pc, #476]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4b75      	ldr	r3, [pc, #468]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a74      	ldr	r2, [pc, #464]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e00b      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008c38:	4b71      	ldr	r3, [pc, #452]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a70      	ldr	r2, [pc, #448]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	4b6e      	ldr	r3, [pc, #440]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a6d      	ldr	r2, [pc, #436]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d013      	beq.n	8008c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c58:	f7f9 feac 	bl	80029b4 <HAL_GetTick>
 8008c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c60:	f7f9 fea8 	bl	80029b4 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b64      	cmp	r3, #100	@ 0x64
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e3d4      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c72:	4b63      	ldr	r3, [pc, #396]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f0      	beq.n	8008c60 <HAL_RCC_OscConfig+0xe8>
 8008c7e:	e014      	b.n	8008caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c80:	f7f9 fe98 	bl	80029b4 <HAL_GetTick>
 8008c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c88:	f7f9 fe94 	bl	80029b4 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b64      	cmp	r3, #100	@ 0x64
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e3c0      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c9a:	4b59      	ldr	r3, [pc, #356]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f0      	bne.n	8008c88 <HAL_RCC_OscConfig+0x110>
 8008ca6:	e000      	b.n	8008caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80ca 	beq.w	8008e4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cb8:	4b51      	ldr	r3, [pc, #324]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <HAL_RCC_OscConfig+0x166>
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	2b18      	cmp	r3, #24
 8008cd2:	d156      	bne.n	8008d82 <HAL_RCC_OscConfig+0x20a>
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d151      	bne.n	8008d82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cde:	4b48      	ldr	r3, [pc, #288]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x17e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e392      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cf6:	4b42      	ldr	r3, [pc, #264]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f023 0219 	bic.w	r2, r3, #25
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	493f      	ldr	r1, [pc, #252]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7f9 fe54 	bl	80029b4 <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d10:	f7f9 fe50 	bl	80029b4 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e37c      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d22:	4b37      	ldr	r3, [pc, #220]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2e:	f7f9 fe71 	bl	8002a14 <HAL_GetREVID>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d817      	bhi.n	8008d6c <HAL_RCC_OscConfig+0x1f4>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b40      	cmp	r3, #64	@ 0x40
 8008d42:	d108      	bne.n	8008d56 <HAL_RCC_OscConfig+0x1de>
 8008d44:	4b2e      	ldr	r3, [pc, #184]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d54:	e07a      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d56:	4b2a      	ldr	r3, [pc, #168]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	031b      	lsls	r3, r3, #12
 8008d64:	4926      	ldr	r1, [pc, #152]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d6a:	e06f      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d6c:	4b24      	ldr	r3, [pc, #144]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	061b      	lsls	r3, r3, #24
 8008d7a:	4921      	ldr	r1, [pc, #132]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d80:	e064      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d047      	beq.n	8008e1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f023 0219 	bic.w	r2, r3, #25
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	491a      	ldr	r1, [pc, #104]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7f9 fe0a 	bl	80029b4 <HAL_GetTick>
 8008da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008da4:	f7f9 fe06 	bl	80029b4 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e332      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008db6:	4b12      	ldr	r3, [pc, #72]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0f0      	beq.n	8008da4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc2:	f7f9 fe27 	bl	8002a14 <HAL_GetREVID>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d819      	bhi.n	8008e04 <HAL_RCC_OscConfig+0x28c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b40      	cmp	r3, #64	@ 0x40
 8008dd6:	d108      	bne.n	8008dea <HAL_RCC_OscConfig+0x272>
 8008dd8:	4b09      	ldr	r3, [pc, #36]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008de0:	4a07      	ldr	r2, [pc, #28]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008de6:	6053      	str	r3, [r2, #4]
 8008de8:	e030      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
 8008dea:	4b05      	ldr	r3, [pc, #20]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	031b      	lsls	r3, r3, #12
 8008df8:	4901      	ldr	r1, [pc, #4]	@ (8008e00 <HAL_RCC_OscConfig+0x288>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	604b      	str	r3, [r1, #4]
 8008dfe:	e025      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
 8008e00:	58024400 	.word	0x58024400
 8008e04:	4b9a      	ldr	r3, [pc, #616]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	061b      	lsls	r3, r3, #24
 8008e12:	4997      	ldr	r1, [pc, #604]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	e018      	b.n	8008e4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e1a:	4b95      	ldr	r3, [pc, #596]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a94      	ldr	r2, [pc, #592]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e26:	f7f9 fdc5 	bl	80029b4 <HAL_GetTick>
 8008e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e2c:	e008      	b.n	8008e40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e2e:	f7f9 fdc1 	bl	80029b4 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e2ed      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e40:	4b8b      	ldr	r3, [pc, #556]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f0      	bne.n	8008e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80a9 	beq.w	8008fac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e5a:	4b85      	ldr	r3, [pc, #532]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e64:	4b82      	ldr	r3, [pc, #520]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d007      	beq.n	8008e80 <HAL_RCC_OscConfig+0x308>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b18      	cmp	r3, #24
 8008e74:	d13a      	bne.n	8008eec <HAL_RCC_OscConfig+0x374>
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d135      	bne.n	8008eec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e80:	4b7b      	ldr	r3, [pc, #492]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_RCC_OscConfig+0x320>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	2b80      	cmp	r3, #128	@ 0x80
 8008e92:	d001      	beq.n	8008e98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e2c1      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e98:	f7f9 fdbc 	bl	8002a14 <HAL_GetREVID>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d817      	bhi.n	8008ed6 <HAL_RCC_OscConfig+0x35e>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d108      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x348>
 8008eae:	4b70      	ldr	r3, [pc, #448]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008eb6:	4a6e      	ldr	r2, [pc, #440]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008eb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ebc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ebe:	e075      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	069b      	lsls	r3, r3, #26
 8008ece:	4968      	ldr	r1, [pc, #416]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ed4:	e06a      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ed6:	4b66      	ldr	r3, [pc, #408]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	061b      	lsls	r3, r3, #24
 8008ee4:	4962      	ldr	r1, [pc, #392]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eea:	e05f      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d042      	beq.n	8008f7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f00:	f7f9 fd58 	bl	80029b4 <HAL_GetTick>
 8008f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f06:	e008      	b.n	8008f1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f08:	f7f9 fd54 	bl	80029b4 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e280      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f1a:	4b55      	ldr	r3, [pc, #340]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f0      	beq.n	8008f08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f26:	f7f9 fd75 	bl	8002a14 <HAL_GetREVID>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d817      	bhi.n	8008f64 <HAL_RCC_OscConfig+0x3ec>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d108      	bne.n	8008f4e <HAL_RCC_OscConfig+0x3d6>
 8008f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008f44:	4a4a      	ldr	r2, [pc, #296]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f4a:	6053      	str	r3, [r2, #4]
 8008f4c:	e02e      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
 8008f4e:	4b48      	ldr	r3, [pc, #288]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	069b      	lsls	r3, r3, #26
 8008f5c:	4944      	ldr	r1, [pc, #272]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	604b      	str	r3, [r1, #4]
 8008f62:	e023      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
 8008f64:	4b42      	ldr	r3, [pc, #264]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	061b      	lsls	r3, r3, #24
 8008f72:	493f      	ldr	r1, [pc, #252]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60cb      	str	r3, [r1, #12]
 8008f78:	e018      	b.n	8008fac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f86:	f7f9 fd15 	bl	80029b4 <HAL_GetTick>
 8008f8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f8c:	e008      	b.n	8008fa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f8e:	f7f9 fd11 	bl	80029b4 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e23d      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fa0:	4b33      	ldr	r3, [pc, #204]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f0      	bne.n	8008f8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0308 	and.w	r3, r3, #8
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d036      	beq.n	8009026 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d019      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008fc6:	f043 0301 	orr.w	r3, r3, #1
 8008fca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fcc:	f7f9 fcf2 	bl	80029b4 <HAL_GetTick>
 8008fd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fd4:	f7f9 fcee 	bl	80029b4 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e21a      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fe6:	4b22      	ldr	r3, [pc, #136]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x45c>
 8008ff2:	e018      	b.n	8009026 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8008ffa:	f023 0301 	bic.w	r3, r3, #1
 8008ffe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009000:	f7f9 fcd8 	bl	80029b4 <HAL_GetTick>
 8009004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009008:	f7f9 fcd4 	bl	80029b4 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e200      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 800901c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d039      	beq.n	80090a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01c      	beq.n	8009074 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0c      	ldr	r2, [pc, #48]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8009040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009044:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009046:	f7f9 fcb5 	bl	80029b4 <HAL_GetTick>
 800904a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800904c:	e008      	b.n	8009060 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800904e:	f7f9 fcb1 	bl	80029b4 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e1dd      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009060:	4b03      	ldr	r3, [pc, #12]	@ (8009070 <HAL_RCC_OscConfig+0x4f8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0f0      	beq.n	800904e <HAL_RCC_OscConfig+0x4d6>
 800906c:	e01b      	b.n	80090a6 <HAL_RCC_OscConfig+0x52e>
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009074:	4b9b      	ldr	r3, [pc, #620]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a9a      	ldr	r2, [pc, #616]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800907a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800907e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009080:	f7f9 fc98 	bl	80029b4 <HAL_GetTick>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009088:	f7f9 fc94 	bl	80029b4 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e1c0      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800909a:	4b92      	ldr	r3, [pc, #584]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f0      	bne.n	8009088 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8081 	beq.w	80091b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090b4:	4b8c      	ldr	r3, [pc, #560]	@ (80092e8 <HAL_RCC_OscConfig+0x770>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a8b      	ldr	r2, [pc, #556]	@ (80092e8 <HAL_RCC_OscConfig+0x770>)
 80090ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090c0:	f7f9 fc78 	bl	80029b4 <HAL_GetTick>
 80090c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c8:	f7f9 fc74 	bl	80029b4 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b64      	cmp	r3, #100	@ 0x64
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e1a0      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090da:	4b83      	ldr	r3, [pc, #524]	@ (80092e8 <HAL_RCC_OscConfig+0x770>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d106      	bne.n	80090fc <HAL_RCC_OscConfig+0x584>
 80090ee:	4b7d      	ldr	r3, [pc, #500]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80090f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090f2:	4a7c      	ldr	r2, [pc, #496]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80090fa:	e02d      	b.n	8009158 <HAL_RCC_OscConfig+0x5e0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <HAL_RCC_OscConfig+0x5a6>
 8009104:	4b77      	ldr	r3, [pc, #476]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009108:	4a76      	ldr	r2, [pc, #472]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009110:	4b74      	ldr	r3, [pc, #464]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009114:	4a73      	ldr	r2, [pc, #460]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009116:	f023 0304 	bic.w	r3, r3, #4
 800911a:	6713      	str	r3, [r2, #112]	@ 0x70
 800911c:	e01c      	b.n	8009158 <HAL_RCC_OscConfig+0x5e0>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b05      	cmp	r3, #5
 8009124:	d10c      	bne.n	8009140 <HAL_RCC_OscConfig+0x5c8>
 8009126:	4b6f      	ldr	r3, [pc, #444]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800912a:	4a6e      	ldr	r2, [pc, #440]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800912c:	f043 0304 	orr.w	r3, r3, #4
 8009130:	6713      	str	r3, [r2, #112]	@ 0x70
 8009132:	4b6c      	ldr	r3, [pc, #432]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009136:	4a6b      	ldr	r2, [pc, #428]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	6713      	str	r3, [r2, #112]	@ 0x70
 800913e:	e00b      	b.n	8009158 <HAL_RCC_OscConfig+0x5e0>
 8009140:	4b68      	ldr	r3, [pc, #416]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009144:	4a67      	ldr	r2, [pc, #412]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009146:	f023 0301 	bic.w	r3, r3, #1
 800914a:	6713      	str	r3, [r2, #112]	@ 0x70
 800914c:	4b65      	ldr	r3, [pc, #404]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800914e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009150:	4a64      	ldr	r2, [pc, #400]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009152:	f023 0304 	bic.w	r3, r3, #4
 8009156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d015      	beq.n	800918c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009160:	f7f9 fc28 	bl	80029b4 <HAL_GetTick>
 8009164:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009166:	e00a      	b.n	800917e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009168:	f7f9 fc24 	bl	80029b4 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009176:	4293      	cmp	r3, r2
 8009178:	d901      	bls.n	800917e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e14e      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800917e:	4b59      	ldr	r3, [pc, #356]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0ee      	beq.n	8009168 <HAL_RCC_OscConfig+0x5f0>
 800918a:	e014      	b.n	80091b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800918c:	f7f9 fc12 	bl	80029b4 <HAL_GetTick>
 8009190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009192:	e00a      	b.n	80091aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009194:	f7f9 fc0e 	bl	80029b4 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e138      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091aa:	4b4e      	ldr	r3, [pc, #312]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80091ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1ee      	bne.n	8009194 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 812d 	beq.w	800941a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091c0:	4b48      	ldr	r3, [pc, #288]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091c8:	2b18      	cmp	r3, #24
 80091ca:	f000 80bd 	beq.w	8009348 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	f040 809e 	bne.w	8009314 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091d8:	4b42      	ldr	r3, [pc, #264]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a41      	ldr	r2, [pc, #260]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80091de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e4:	f7f9 fbe6 	bl	80029b4 <HAL_GetTick>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ec:	f7f9 fbe2 	bl	80029b4 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e10e      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091fe:	4b39      	ldr	r3, [pc, #228]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f0      	bne.n	80091ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800920a:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800920c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800920e:	4b37      	ldr	r3, [pc, #220]	@ (80092ec <HAL_RCC_OscConfig+0x774>)
 8009210:	4013      	ands	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800921a:	0112      	lsls	r2, r2, #4
 800921c:	430a      	orrs	r2, r1
 800921e:	4931      	ldr	r1, [pc, #196]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009220:	4313      	orrs	r3, r2
 8009222:	628b      	str	r3, [r1, #40]	@ 0x28
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009228:	3b01      	subs	r3, #1
 800922a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009232:	3b01      	subs	r3, #1
 8009234:	025b      	lsls	r3, r3, #9
 8009236:	b29b      	uxth	r3, r3
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923e:	3b01      	subs	r3, #1
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009246:	431a      	orrs	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924c:	3b01      	subs	r3, #1
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009254:	4923      	ldr	r1, [pc, #140]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009256:	4313      	orrs	r3, r2
 8009258:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800925a:	4b22      	ldr	r3, [pc, #136]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800925c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925e:	4a21      	ldr	r2, [pc, #132]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009266:	4b1f      	ldr	r3, [pc, #124]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800926a:	4b21      	ldr	r3, [pc, #132]	@ (80092f0 <HAL_RCC_OscConfig+0x778>)
 800926c:	4013      	ands	r3, r2
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009272:	00d2      	lsls	r2, r2, #3
 8009274:	491b      	ldr	r1, [pc, #108]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800927a:	4b1a      	ldr	r3, [pc, #104]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	f023 020c 	bic.w	r2, r3, #12
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009286:	4917      	ldr	r1, [pc, #92]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 8009288:	4313      	orrs	r3, r2
 800928a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800928c:	4b15      	ldr	r3, [pc, #84]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800928e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009290:	f023 0202 	bic.w	r2, r3, #2
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009298:	4912      	ldr	r1, [pc, #72]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 800929a:	4313      	orrs	r3, r2
 800929c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800929e:	4b11      	ldr	r3, [pc, #68]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	4a10      	ldr	r2, [pc, #64]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092aa:	4b0e      	ldr	r3, [pc, #56]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	4a0d      	ldr	r2, [pc, #52]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092b6:	4b0b      	ldr	r3, [pc, #44]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	4a0a      	ldr	r2, [pc, #40]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80092c2:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	4a07      	ldr	r2, [pc, #28]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092c8:	f043 0301 	orr.w	r3, r3, #1
 80092cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092ce:	4b05      	ldr	r3, [pc, #20]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a04      	ldr	r2, [pc, #16]	@ (80092e4 <HAL_RCC_OscConfig+0x76c>)
 80092d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092da:	f7f9 fb6b 	bl	80029b4 <HAL_GetTick>
 80092de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092e0:	e011      	b.n	8009306 <HAL_RCC_OscConfig+0x78e>
 80092e2:	bf00      	nop
 80092e4:	58024400 	.word	0x58024400
 80092e8:	58024800 	.word	0x58024800
 80092ec:	fffffc0c 	.word	0xfffffc0c
 80092f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092f4:	f7f9 fb5e 	bl	80029b4 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e08a      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009306:	4b47      	ldr	r3, [pc, #284]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0f0      	beq.n	80092f4 <HAL_RCC_OscConfig+0x77c>
 8009312:	e082      	b.n	800941a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009314:	4b43      	ldr	r3, [pc, #268]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a42      	ldr	r2, [pc, #264]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 800931a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800931e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009320:	f7f9 fb48 	bl	80029b4 <HAL_GetTick>
 8009324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009328:	f7f9 fb44 	bl	80029b4 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e070      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800933a:	4b3a      	ldr	r3, [pc, #232]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1f0      	bne.n	8009328 <HAL_RCC_OscConfig+0x7b0>
 8009346:	e068      	b.n	800941a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009348:	4b36      	ldr	r3, [pc, #216]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 800934a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800934e:	4b35      	ldr	r3, [pc, #212]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 8009350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009352:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	2b01      	cmp	r3, #1
 800935a:	d031      	beq.n	80093c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f003 0203 	and.w	r2, r3, #3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009366:	429a      	cmp	r2, r3
 8009368:	d12a      	bne.n	80093c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	091b      	lsrs	r3, r3, #4
 800936e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009376:	429a      	cmp	r2, r3
 8009378:	d122      	bne.n	80093c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009384:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009386:	429a      	cmp	r2, r3
 8009388:	d11a      	bne.n	80093c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	0a5b      	lsrs	r3, r3, #9
 800938e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009398:	429a      	cmp	r2, r3
 800939a:	d111      	bne.n	80093c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d108      	bne.n	80093c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	0e1b      	lsrs	r3, r3, #24
 80093b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093bc:	429a      	cmp	r2, r3
 80093be:	d001      	beq.n	80093c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e02b      	b.n	800941c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80093c4:	4b17      	ldr	r3, [pc, #92]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 80093c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c8:	08db      	lsrs	r3, r3, #3
 80093ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d01f      	beq.n	800941a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80093da:	4b12      	ldr	r3, [pc, #72]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	4a11      	ldr	r2, [pc, #68]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093e6:	f7f9 fae5 	bl	80029b4 <HAL_GetTick>
 80093ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093ec:	bf00      	nop
 80093ee:	f7f9 fae1 	bl	80029b4 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d0f9      	beq.n	80093ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 80093fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <HAL_RCC_OscConfig+0x8b0>)
 8009400:	4013      	ands	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009406:	00d2      	lsls	r2, r2, #3
 8009408:	4906      	ldr	r1, [pc, #24]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 800940a:	4313      	orrs	r3, r2
 800940c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800940e:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	4a04      	ldr	r2, [pc, #16]	@ (8009424 <HAL_RCC_OscConfig+0x8ac>)
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3730      	adds	r7, #48	@ 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	58024400 	.word	0x58024400
 8009428:	ffff0007 	.word	0xffff0007

0800942c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e19c      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009440:	4b8a      	ldr	r3, [pc, #552]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d910      	bls.n	8009470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800944e:	4b87      	ldr	r3, [pc, #540]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f023 020f 	bic.w	r2, r3, #15
 8009456:	4985      	ldr	r1, [pc, #532]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800945e:	4b83      	ldr	r3, [pc, #524]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 030f 	and.w	r3, r3, #15
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d001      	beq.n	8009470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e184      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d010      	beq.n	800949e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691a      	ldr	r2, [r3, #16]
 8009480:	4b7b      	ldr	r3, [pc, #492]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009488:	429a      	cmp	r2, r3
 800948a:	d908      	bls.n	800949e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800948c:	4b78      	ldr	r3, [pc, #480]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	4975      	ldr	r1, [pc, #468]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800949a:	4313      	orrs	r3, r2
 800949c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d010      	beq.n	80094cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	695a      	ldr	r2, [r3, #20]
 80094ae:	4b70      	ldr	r3, [pc, #448]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d908      	bls.n	80094cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	496a      	ldr	r1, [pc, #424]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0310 	and.w	r3, r3, #16
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699a      	ldr	r2, [r3, #24]
 80094dc:	4b64      	ldr	r3, [pc, #400]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d908      	bls.n	80094fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094e8:	4b61      	ldr	r3, [pc, #388]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	495e      	ldr	r1, [pc, #376]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d010      	beq.n	8009528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	69da      	ldr	r2, [r3, #28]
 800950a:	4b59      	ldr	r3, [pc, #356]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009512:	429a      	cmp	r2, r3
 8009514:	d908      	bls.n	8009528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009516:	4b56      	ldr	r3, [pc, #344]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	4953      	ldr	r1, [pc, #332]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009524:	4313      	orrs	r3, r2
 8009526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d010      	beq.n	8009556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	4b4d      	ldr	r3, [pc, #308]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	429a      	cmp	r2, r3
 8009542:	d908      	bls.n	8009556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009544:	4b4a      	ldr	r3, [pc, #296]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	f023 020f 	bic.w	r2, r3, #15
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4947      	ldr	r1, [pc, #284]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009552:	4313      	orrs	r3, r2
 8009554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d055      	beq.n	800960e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009562:	4b43      	ldr	r3, [pc, #268]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	4940      	ldr	r1, [pc, #256]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009570:	4313      	orrs	r3, r2
 8009572:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d107      	bne.n	800958c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800957c:	4b3c      	ldr	r3, [pc, #240]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d121      	bne.n	80095cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e0f6      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b03      	cmp	r3, #3
 8009592:	d107      	bne.n	80095a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009594:	4b36      	ldr	r3, [pc, #216]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d115      	bne.n	80095cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e0ea      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d107      	bne.n	80095bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095ac:	4b30      	ldr	r3, [pc, #192]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d109      	bne.n	80095cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0de      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0d6      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095cc:	4b28      	ldr	r3, [pc, #160]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f023 0207 	bic.w	r2, r3, #7
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4925      	ldr	r1, [pc, #148]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095de:	f7f9 f9e9 	bl	80029b4 <HAL_GetTick>
 80095e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e4:	e00a      	b.n	80095fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e6:	f7f9 f9e5 	bl	80029b4 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e0be      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	429a      	cmp	r2, r3
 800960c:	d1eb      	bne.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d010      	beq.n	800963c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	4b14      	ldr	r3, [pc, #80]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	429a      	cmp	r2, r3
 8009628:	d208      	bcs.n	800963c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800962a:	4b11      	ldr	r3, [pc, #68]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f023 020f 	bic.w	r2, r3, #15
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	490e      	ldr	r1, [pc, #56]	@ (8009670 <HAL_RCC_ClockConfig+0x244>)
 8009638:	4313      	orrs	r3, r2
 800963a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800963c:	4b0b      	ldr	r3, [pc, #44]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d214      	bcs.n	8009674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800964a:	4b08      	ldr	r3, [pc, #32]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f023 020f 	bic.w	r2, r3, #15
 8009652:	4906      	ldr	r1, [pc, #24]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	4313      	orrs	r3, r2
 8009658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800965a:	4b04      	ldr	r3, [pc, #16]	@ (800966c <HAL_RCC_ClockConfig+0x240>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d005      	beq.n	8009674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e086      	b.n	800977a <HAL_RCC_ClockConfig+0x34e>
 800966c:	52002000 	.word	0x52002000
 8009670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	4b3f      	ldr	r3, [pc, #252]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800968c:	429a      	cmp	r2, r3
 800968e:	d208      	bcs.n	80096a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009690:	4b3c      	ldr	r3, [pc, #240]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	4939      	ldr	r1, [pc, #228]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d010      	beq.n	80096d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	4b34      	ldr	r3, [pc, #208]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d208      	bcs.n	80096d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096be:	4b31      	ldr	r3, [pc, #196]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	492e      	ldr	r1, [pc, #184]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	4b28      	ldr	r3, [pc, #160]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d208      	bcs.n	80096fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096ec:	4b25      	ldr	r3, [pc, #148]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	4922      	ldr	r1, [pc, #136]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d010      	beq.n	800972c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009716:	429a      	cmp	r2, r3
 8009718:	d208      	bcs.n	800972c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800971a:	4b1a      	ldr	r3, [pc, #104]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	4917      	ldr	r1, [pc, #92]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 8009728:	4313      	orrs	r3, r2
 800972a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800972c:	f000 f834 	bl	8009798 <HAL_RCC_GetSysClockFreq>
 8009730:	4602      	mov	r2, r0
 8009732:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	0a1b      	lsrs	r3, r3, #8
 8009738:	f003 030f 	and.w	r3, r3, #15
 800973c:	4912      	ldr	r1, [pc, #72]	@ (8009788 <HAL_RCC_ClockConfig+0x35c>)
 800973e:	5ccb      	ldrb	r3, [r1, r3]
 8009740:	f003 031f 	and.w	r3, r3, #31
 8009744:	fa22 f303 	lsr.w	r3, r2, r3
 8009748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800974a:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <HAL_RCC_ClockConfig+0x358>)
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	4a0d      	ldr	r2, [pc, #52]	@ (8009788 <HAL_RCC_ClockConfig+0x35c>)
 8009754:	5cd3      	ldrb	r3, [r2, r3]
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	fa22 f303 	lsr.w	r3, r2, r3
 8009760:	4a0a      	ldr	r2, [pc, #40]	@ (800978c <HAL_RCC_ClockConfig+0x360>)
 8009762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009764:	4a0a      	ldr	r2, [pc, #40]	@ (8009790 <HAL_RCC_ClockConfig+0x364>)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800976a:	4b0a      	ldr	r3, [pc, #40]	@ (8009794 <HAL_RCC_ClockConfig+0x368>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f7f8 fe82 	bl	8002478 <HAL_InitTick>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	58024400 	.word	0x58024400
 8009788:	0801a2d0 	.word	0x0801a2d0
 800978c:	24000004 	.word	0x24000004
 8009790:	24000000 	.word	0x24000000
 8009794:	24000008 	.word	0x24000008

08009798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009798:	b480      	push	{r7}
 800979a:	b089      	sub	sp, #36	@ 0x24
 800979c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800979e:	4bb3      	ldr	r3, [pc, #716]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097a6:	2b18      	cmp	r3, #24
 80097a8:	f200 8155 	bhi.w	8009a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80097ac:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	08009819 	.word	0x08009819
 80097b8:	08009a57 	.word	0x08009a57
 80097bc:	08009a57 	.word	0x08009a57
 80097c0:	08009a57 	.word	0x08009a57
 80097c4:	08009a57 	.word	0x08009a57
 80097c8:	08009a57 	.word	0x08009a57
 80097cc:	08009a57 	.word	0x08009a57
 80097d0:	08009a57 	.word	0x08009a57
 80097d4:	0800983f 	.word	0x0800983f
 80097d8:	08009a57 	.word	0x08009a57
 80097dc:	08009a57 	.word	0x08009a57
 80097e0:	08009a57 	.word	0x08009a57
 80097e4:	08009a57 	.word	0x08009a57
 80097e8:	08009a57 	.word	0x08009a57
 80097ec:	08009a57 	.word	0x08009a57
 80097f0:	08009a57 	.word	0x08009a57
 80097f4:	08009845 	.word	0x08009845
 80097f8:	08009a57 	.word	0x08009a57
 80097fc:	08009a57 	.word	0x08009a57
 8009800:	08009a57 	.word	0x08009a57
 8009804:	08009a57 	.word	0x08009a57
 8009808:	08009a57 	.word	0x08009a57
 800980c:	08009a57 	.word	0x08009a57
 8009810:	08009a57 	.word	0x08009a57
 8009814:	0800984b 	.word	0x0800984b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009818:	4b94      	ldr	r3, [pc, #592]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009824:	4b91      	ldr	r3, [pc, #580]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	4a90      	ldr	r2, [pc, #576]	@ (8009a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009836:	e111      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009838:	4b8d      	ldr	r3, [pc, #564]	@ (8009a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800983a:	61bb      	str	r3, [r7, #24]
      break;
 800983c:	e10e      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800983e:	4b8d      	ldr	r3, [pc, #564]	@ (8009a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009840:	61bb      	str	r3, [r7, #24]
      break;
 8009842:	e10b      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009844:	4b8c      	ldr	r3, [pc, #560]	@ (8009a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009846:	61bb      	str	r3, [r7, #24]
      break;
 8009848:	e108      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800984a:	4b88      	ldr	r3, [pc, #544]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800984c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009854:	4b85      	ldr	r3, [pc, #532]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009858:	091b      	lsrs	r3, r3, #4
 800985a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800985e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009860:	4b82      	ldr	r3, [pc, #520]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800986a:	4b80      	ldr	r3, [pc, #512]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986e:	08db      	lsrs	r3, r3, #3
 8009870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	fb02 f303 	mul.w	r3, r2, r3
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80e1 	beq.w	8009a50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b02      	cmp	r3, #2
 8009892:	f000 8083 	beq.w	800999c <HAL_RCC_GetSysClockFreq+0x204>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b02      	cmp	r3, #2
 800989a:	f200 80a1 	bhi.w	80099e0 <HAL_RCC_GetSysClockFreq+0x248>
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <HAL_RCC_GetSysClockFreq+0x114>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d056      	beq.n	8009958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098aa:	e099      	b.n	80099e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ac:	4b6f      	ldr	r3, [pc, #444]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d02d      	beq.n	8009914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	08db      	lsrs	r3, r3, #3
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	4a6b      	ldr	r2, [pc, #428]	@ (8009a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098c4:	fa22 f303 	lsr.w	r3, r2, r3
 80098c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e2:	4b62      	ldr	r3, [pc, #392]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80098fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009912:	e087      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009926:	4b51      	ldr	r3, [pc, #324]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009936:	ed97 6a02 	vldr	s12, [r7, #8]
 800993a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800993e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800994a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009956:	e065      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009962:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b40      	ldr	r3, [pc, #256]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997a:	ed97 6a02 	vldr	s12, [r7, #8]
 800997e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800999a:	e043      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ae:	4b2f      	ldr	r3, [pc, #188]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099be:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099de:	e021      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b1e      	ldr	r3, [pc, #120]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a24:	4b11      	ldr	r3, [pc, #68]	@ (8009a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a28:	0a5b      	lsrs	r3, r3, #9
 8009a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a2e:	3301      	adds	r3, #1
 8009a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a48:	ee17 3a90 	vmov	r3, s15
 8009a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a4e:	e005      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61bb      	str	r3, [r7, #24]
      break;
 8009a54:	e002      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a56:	4b07      	ldr	r3, [pc, #28]	@ (8009a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a58:	61bb      	str	r3, [r7, #24]
      break;
 8009a5a:	bf00      	nop
  }

  return sysclockfreq;
 8009a5c:	69bb      	ldr	r3, [r7, #24]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3724      	adds	r7, #36	@ 0x24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	03d09000 	.word	0x03d09000
 8009a74:	003d0900 	.word	0x003d0900
 8009a78:	017d7840 	.word	0x017d7840
 8009a7c:	46000000 	.word	0x46000000
 8009a80:	4c742400 	.word	0x4c742400
 8009a84:	4a742400 	.word	0x4a742400
 8009a88:	4bbebc20 	.word	0x4bbebc20

08009a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a92:	f7ff fe81 	bl	8009798 <HAL_RCC_GetSysClockFreq>
 8009a96:	4602      	mov	r2, r0
 8009a98:	4b10      	ldr	r3, [pc, #64]	@ (8009adc <HAL_RCC_GetHCLKFreq+0x50>)
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	0a1b      	lsrs	r3, r3, #8
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	490f      	ldr	r1, [pc, #60]	@ (8009ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009aa4:	5ccb      	ldrb	r3, [r1, r3]
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8009adc <HAL_RCC_GetHCLKFreq+0x50>)
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	4a09      	ldr	r2, [pc, #36]	@ (8009ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009aba:	5cd3      	ldrb	r3, [r2, r3]
 8009abc:	f003 031f 	and.w	r3, r3, #31
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac6:	4a07      	ldr	r2, [pc, #28]	@ (8009ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009aca:	4a07      	ldr	r2, [pc, #28]	@ (8009ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ad0:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	0801a2d0 	.word	0x0801a2d0
 8009ae4:	24000004 	.word	0x24000004
 8009ae8:	24000000 	.word	0x24000000

08009aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009af0:	f7ff ffcc 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 8009af4:	4602      	mov	r2, r0
 8009af6:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	4904      	ldr	r1, [pc, #16]	@ (8009b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b02:	5ccb      	ldrb	r3, [r1, r3]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	58024400 	.word	0x58024400
 8009b14:	0801a2d0 	.word	0x0801a2d0

08009b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b1c:	f7ff ffb6 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 8009b20:	4602      	mov	r2, r0
 8009b22:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	0a1b      	lsrs	r3, r3, #8
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	4904      	ldr	r1, [pc, #16]	@ (8009b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b2e:	5ccb      	ldrb	r3, [r1, r3]
 8009b30:	f003 031f 	and.w	r3, r3, #31
 8009b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	0801a2d0 	.word	0x0801a2d0

08009b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	223f      	movs	r2, #63	@ 0x3f
 8009b52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b54:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0207 	and.w	r2, r3, #7
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009b60:	4b17      	ldr	r3, [pc, #92]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b6c:	4b14      	ldr	r3, [pc, #80]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f003 020f 	and.w	r2, r3, #15
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b84:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b90:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b9c:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <HAL_RCC_GetClockConfig+0x80>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 020f 	and.w	r2, r3, #15
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	601a      	str	r2, [r3, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	52002000 	.word	0x52002000

08009bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bcc:	b0ca      	sub	sp, #296	@ 0x128
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009bec:	2500      	movs	r5, #0
 8009bee:	ea54 0305 	orrs.w	r3, r4, r5
 8009bf2:	d049      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bfe:	d02f      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c04:	d828      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c0a:	d01a      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c10:	d822      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c1a:	d007      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c1c:	e01c      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1e:	4bb8      	ldr	r3, [pc, #736]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c22:	4ab7      	ldr	r2, [pc, #732]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c2a:	e01a      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	3308      	adds	r3, #8
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fc8f 	bl	800b558 <RCCEx_PLL2_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c40:	e00f      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	3328      	adds	r3, #40	@ 0x28
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 fd36 	bl	800b6bc <RCCEx_PLL3_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c56:	e004      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c5e:	e000      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c6a:	4ba5      	ldr	r3, [pc, #660]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c78:	4aa1      	ldr	r2, [pc, #644]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c7e:	e003      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	ea58 0309 	orrs.w	r3, r8, r9
 8009c9c:	d047      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d82a      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009cc5 	.word	0x08009cc5
 8009cb4:	08009cd3 	.word	0x08009cd3
 8009cb8:	08009ce9 	.word	0x08009ce9
 8009cbc:	08009d07 	.word	0x08009d07
 8009cc0:	08009d07 	.word	0x08009d07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	4a8d      	ldr	r2, [pc, #564]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cd0:	e01a      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fc3c 	bl	800b558 <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ce6:	e00f      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	3328      	adds	r3, #40	@ 0x28
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 fce3 	bl	800b6bc <RCCEx_PLL3_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cfc:	e004      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d04:	e000      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d10:	4b7b      	ldr	r3, [pc, #492]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d14:	f023 0107 	bic.w	r1, r3, #7
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d1e:	4a78      	ldr	r2, [pc, #480]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d24:	e003      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009d3a:	f04f 0b00 	mov.w	fp, #0
 8009d3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d42:	d04c      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d4e:	d030      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d54:	d829      	bhi.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d58:	d02d      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d5c:	d825      	bhi.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d5e:	2b80      	cmp	r3, #128	@ 0x80
 8009d60:	d018      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d62:	2b80      	cmp	r3, #128	@ 0x80
 8009d64:	d821      	bhi.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d6a:	2b40      	cmp	r3, #64	@ 0x40
 8009d6c:	d007      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d6e:	e01c      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d70:	4b63      	ldr	r3, [pc, #396]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d74:	4a62      	ldr	r2, [pc, #392]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d7c:	e01c      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d82:	3308      	adds	r3, #8
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fbe6 	bl	800b558 <RCCEx_PLL2_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d92:	e011      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	3328      	adds	r3, #40	@ 0x28
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 fc8d 	bl	800b6bc <RCCEx_PLL3_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009da8:	e006      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009db0:	e002      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009db2:	bf00      	nop
 8009db4:	e000      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dce:	4a4c      	ldr	r2, [pc, #304]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009dea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009dee:	2300      	movs	r3, #0
 8009df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009df4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	d053      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e0a:	d035      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e10:	d82e      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e16:	d031      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009e18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e1c:	d828      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e22:	d01a      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e28:	d822      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e32:	d007      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009e34:	e01c      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e36:	4b32      	ldr	r3, [pc, #200]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3a:	4a31      	ldr	r2, [pc, #196]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e42:	e01c      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e48:	3308      	adds	r3, #8
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 fb83 	bl	800b558 <RCCEx_PLL2_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e58:	e011      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	3328      	adds	r3, #40	@ 0x28
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 fc2a 	bl	800b6bc <RCCEx_PLL3_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e6e:	e006      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e76:	e002      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e78:	bf00      	nop
 8009e7a:	e000      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e86:	4b1e      	ldr	r3, [pc, #120]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e96:	4a1a      	ldr	r2, [pc, #104]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e9c:	e003      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009eb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009ebc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	d056      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ece:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ed2:	d038      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ed8:	d831      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ede:	d034      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009ee0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ee4:	d82b      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eea:	d01d      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef0:	d825      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009efa:	d00a      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009efc:	e01f      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009efe:	bf00      	nop
 8009f00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f04:	4ba2      	ldr	r3, [pc, #648]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f08:	4aa1      	ldr	r2, [pc, #644]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f10:	e01c      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f16:	3308      	adds	r3, #8
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 fb1c 	bl	800b558 <RCCEx_PLL2_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f26:	e011      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	3328      	adds	r3, #40	@ 0x28
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 fbc3 	bl	800b6bc <RCCEx_PLL3_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f3c:	e006      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f44:	e002      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f54:	4b8e      	ldr	r3, [pc, #568]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f64:	4a8a      	ldr	r2, [pc, #552]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f6a:	e003      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f84:	2300      	movs	r3, #0
 8009f86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4313      	orrs	r3, r2
 8009f92:	d03a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f9a:	2b30      	cmp	r3, #48	@ 0x30
 8009f9c:	d01f      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f9e:	2b30      	cmp	r3, #48	@ 0x30
 8009fa0:	d819      	bhi.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d00c      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	d815      	bhi.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d019      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009fae:	2b10      	cmp	r3, #16
 8009fb0:	d111      	bne.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb2:	4b77      	ldr	r3, [pc, #476]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb6:	4a76      	ldr	r2, [pc, #472]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fbe:	e011      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	2102      	movs	r1, #2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 fac5 	bl	800b558 <RCCEx_PLL2_Config>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fd4:	e006      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fec:	4b68      	ldr	r3, [pc, #416]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ffa:	4a65      	ldr	r2, [pc, #404]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a000:	e003      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a01a:	2300      	movs	r3, #0
 800a01c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a020:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a024:	460b      	mov	r3, r1
 800a026:	4313      	orrs	r3, r2
 800a028:	d051      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a034:	d035      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a03a:	d82e      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a03c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a040:	d031      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a046:	d828      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a04c:	d01a      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a04e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a052:	d822      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a05c:	d007      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a05e:	e01c      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a060:	4b4b      	ldr	r3, [pc, #300]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a064:	4a4a      	ldr	r2, [pc, #296]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a06a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a06c:	e01c      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a072:	3308      	adds	r3, #8
 800a074:	2100      	movs	r1, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f001 fa6e 	bl	800b558 <RCCEx_PLL2_Config>
 800a07c:	4603      	mov	r3, r0
 800a07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a082:	e011      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a088:	3328      	adds	r3, #40	@ 0x28
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 fb15 	bl	800b6bc <RCCEx_PLL3_Config>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a098:	e006      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0a0:	e002      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a0a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a0b0:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0be:	4a34      	ldr	r2, [pc, #208]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0c4:	e003      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a0da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a0e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	d056      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0f8:	d033      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0fe:	d82c      	bhi.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a104:	d02f      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a10a:	d826      	bhi.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a10c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a110:	d02b      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a112:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a116:	d820      	bhi.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11c:	d012      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a11e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a122:	d81a      	bhi.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d022      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a12c:	d115      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a132:	3308      	adds	r3, #8
 800a134:	2101      	movs	r1, #1
 800a136:	4618      	mov	r0, r3
 800a138:	f001 fa0e 	bl	800b558 <RCCEx_PLL2_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a142:	e015      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a148:	3328      	adds	r3, #40	@ 0x28
 800a14a:	2101      	movs	r1, #1
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 fab5 	bl	800b6bc <RCCEx_PLL3_Config>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a158:	e00a      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a160:	e006      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a162:	bf00      	nop
 800a164:	e004      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a166:	bf00      	nop
 800a168:	e002      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a16a:	bf00      	nop
 800a16c:	e000      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a16e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10d      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a178:	4b05      	ldr	r3, [pc, #20]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a17a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a17c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a186:	4a02      	ldr	r2, [pc, #8]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a188:	430b      	orrs	r3, r1
 800a18a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a18c:	e006      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a1a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	d055      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1c8:	d033      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a1ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1ce:	d82c      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d4:	d02f      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1da:	d826      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1e0:	d02b      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a1e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1e6:	d820      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ec:	d012      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f2:	d81a      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d022      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1fc:	d115      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a202:	3308      	adds	r3, #8
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f001 f9a6 	bl	800b558 <RCCEx_PLL2_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a212:	e015      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a218:	3328      	adds	r3, #40	@ 0x28
 800a21a:	2101      	movs	r1, #1
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fa4d 	bl	800b6bc <RCCEx_PLL3_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a228:	e00a      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a230:	e006      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a232:	bf00      	nop
 800a234:	e004      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a236:	bf00      	nop
 800a238:	e002      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a23a:	bf00      	nop
 800a23c:	e000      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a23e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a248:	4ba3      	ldr	r3, [pc, #652]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a24a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a24c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a258:	4a9f      	ldr	r2, [pc, #636]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a25a:	430b      	orrs	r3, r1
 800a25c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a278:	2300      	movs	r3, #0
 800a27a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a27e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d037      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a292:	d00e      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a298:	d816      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d018      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a29e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2a2:	d111      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a4:	4b8c      	ldr	r3, [pc, #560]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a8:	4a8b      	ldr	r2, [pc, #556]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2b0:	e00f      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 f94c 	bl	800b558 <RCCEx_PLL2_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2c6:	e004      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ce:	e000      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a2d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2da:	4b7f      	ldr	r3, [pc, #508]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e8:	4a7b      	ldr	r2, [pc, #492]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ea:	430b      	orrs	r3, r1
 800a2ec:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2ee:	e003      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a308:	2300      	movs	r3, #0
 800a30a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a30e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a312:	460b      	mov	r3, r1
 800a314:	4313      	orrs	r3, r2
 800a316:	d039      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d81c      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a322:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a365 	.word	0x0800a365
 800a32c:	0800a339 	.word	0x0800a339
 800a330:	0800a347 	.word	0x0800a347
 800a334:	0800a365 	.word	0x0800a365
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a338:	4b67      	ldr	r3, [pc, #412]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33c:	4a66      	ldr	r2, [pc, #408]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a33e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a344:	e00f      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34a:	3308      	adds	r3, #8
 800a34c:	2102      	movs	r1, #2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f902 	bl	800b558 <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a35a:	e004      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a362:	e000      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a36e:	4b5a      	ldr	r3, [pc, #360]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a372:	f023 0103 	bic.w	r1, r3, #3
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a37c:	4a56      	ldr	r2, [pc, #344]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a37e:	430b      	orrs	r3, r1
 800a380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a382:	e003      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a398:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f000 809f 	beq.w	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3ae:	4b4b      	ldr	r3, [pc, #300]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a4a      	ldr	r2, [pc, #296]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3ba:	f7f8 fafb 	bl	80029b4 <HAL_GetTick>
 800a3be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3c2:	e00b      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3c4:	f7f8 faf6 	bl	80029b4 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b64      	cmp	r3, #100	@ 0x64
 800a3d2:	d903      	bls.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3da:	e005      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3dc:	4b3f      	ldr	r3, [pc, #252]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0ed      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a3e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d179      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3f0:	4b39      	ldr	r3, [pc, #228]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3fc:	4053      	eors	r3, r2
 800a3fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a402:	2b00      	cmp	r3, #0
 800a404:	d015      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a406:	4b34      	ldr	r3, [pc, #208]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a40e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a412:	4b31      	ldr	r3, [pc, #196]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a416:	4a30      	ldr	r2, [pc, #192]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a41c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a41e:	4b2e      	ldr	r3, [pc, #184]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a422:	4a2d      	ldr	r2, [pc, #180]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a428:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a42a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a42c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a430:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d118      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a440:	f7f8 fab8 	bl	80029b4 <HAL_GetTick>
 800a444:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a448:	e00d      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a44a:	f7f8 fab3 	bl	80029b4 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d903      	bls.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a464:	e005      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a466:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0eb      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a476:	2b00      	cmp	r3, #0
 800a478:	d129      	bne.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a47e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a48a:	d10e      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a48c:	4b12      	ldr	r3, [pc, #72]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a49c:	091a      	lsrs	r2, r3, #4
 800a49e:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	6113      	str	r3, [r2, #16]
 800a4a8:	e005      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4b4:	6113      	str	r3, [r2, #16]
 800a4b6:	4b08      	ldr	r3, [pc, #32]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a4c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c6:	4a04      	ldr	r2, [pc, #16]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4cc:	e00e      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a4d6:	e009      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a4d8:	58024400 	.word	0x58024400
 800a4dc:	58024800 	.word	0x58024800
 800a4e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	f002 0301 	and.w	r3, r2, #1
 800a4f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a502:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a506:	460b      	mov	r3, r1
 800a508:	4313      	orrs	r3, r2
 800a50a:	f000 8089 	beq.w	800a620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a514:	2b28      	cmp	r3, #40	@ 0x28
 800a516:	d86b      	bhi.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a518:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a5f9 	.word	0x0800a5f9
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5f1 	.word	0x0800a5f1
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5f1 	.word	0x0800a5f1
 800a540:	0800a5c5 	.word	0x0800a5c5
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5f1 	.word	0x0800a5f1
 800a560:	0800a5db 	.word	0x0800a5db
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5f1 	.word	0x0800a5f1
 800a580:	0800a5f9 	.word	0x0800a5f9
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5f1 	.word	0x0800a5f1
 800a5a0:	0800a5f9 	.word	0x0800a5f9
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a5f9 	.word	0x0800a5f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 ffc3 	bl	800b558 <RCCEx_PLL2_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5d8:	e00f      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5de:	3328      	adds	r3, #40	@ 0x28
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 f86a 	bl	800b6bc <RCCEx_PLL3_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5ee:	e004      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5f6:	e000      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a602:	4bbf      	ldr	r3, [pc, #764]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a606:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a610:	4abb      	ldr	r2, [pc, #748]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a612:	430b      	orrs	r3, r1
 800a614:	6553      	str	r3, [r2, #84]	@ 0x54
 800a616:	e003      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a61c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f002 0302 	and.w	r3, r2, #2
 800a62c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a630:	2300      	movs	r3, #0
 800a632:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a636:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a63a:	460b      	mov	r3, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	d041      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a646:	2b05      	cmp	r3, #5
 800a648:	d824      	bhi.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a64a:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a69d 	.word	0x0800a69d
 800a654:	0800a669 	.word	0x0800a669
 800a658:	0800a67f 	.word	0x0800a67f
 800a65c:	0800a69d 	.word	0x0800a69d
 800a660:	0800a69d 	.word	0x0800a69d
 800a664:	0800a69d 	.word	0x0800a69d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66c:	3308      	adds	r3, #8
 800a66e:	2101      	movs	r1, #1
 800a670:	4618      	mov	r0, r3
 800a672:	f000 ff71 	bl	800b558 <RCCEx_PLL2_Config>
 800a676:	4603      	mov	r3, r0
 800a678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a67c:	e00f      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a682:	3328      	adds	r3, #40	@ 0x28
 800a684:	2101      	movs	r1, #1
 800a686:	4618      	mov	r0, r3
 800a688:	f001 f818 	bl	800b6bc <RCCEx_PLL3_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a692:	e004      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a69a:	e000      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a69c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a69e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6a6:	4b96      	ldr	r3, [pc, #600]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6aa:	f023 0107 	bic.w	r1, r3, #7
 800a6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6b4:	4a92      	ldr	r2, [pc, #584]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6ba:	e003      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f002 0304 	and.w	r3, r2, #4
 800a6d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	d044      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6ec:	2b05      	cmp	r3, #5
 800a6ee:	d825      	bhi.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f6:	bf00      	nop
 800a6f8:	0800a745 	.word	0x0800a745
 800a6fc:	0800a711 	.word	0x0800a711
 800a700:	0800a727 	.word	0x0800a727
 800a704:	0800a745 	.word	0x0800a745
 800a708:	0800a745 	.word	0x0800a745
 800a70c:	0800a745 	.word	0x0800a745
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a714:	3308      	adds	r3, #8
 800a716:	2101      	movs	r1, #1
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 ff1d 	bl	800b558 <RCCEx_PLL2_Config>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a724:	e00f      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a72a:	3328      	adds	r3, #40	@ 0x28
 800a72c:	2101      	movs	r1, #1
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 ffc4 	bl	800b6bc <RCCEx_PLL3_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a73a:	e004      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a742:	e000      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a74e:	4b6c      	ldr	r3, [pc, #432]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a752:	f023 0107 	bic.w	r1, r3, #7
 800a756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a75e:	4a68      	ldr	r2, [pc, #416]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a760:	430b      	orrs	r3, r1
 800a762:	6593      	str	r3, [r2, #88]	@ 0x58
 800a764:	e003      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a76a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f002 0320 	and.w	r3, r2, #32
 800a77a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a77e:	2300      	movs	r3, #0
 800a780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a788:	460b      	mov	r3, r1
 800a78a:	4313      	orrs	r3, r2
 800a78c:	d055      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a79a:	d033      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a79c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7a0:	d82c      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a6:	d02f      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ac:	d826      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7b2:	d02b      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a7b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7b8:	d820      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7be:	d012      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a7c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c4:	d81a      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d022      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ce:	d115      	bne.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 febd 	bl	800b558 <RCCEx_PLL2_Config>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7e4:	e015      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ea:	3328      	adds	r3, #40	@ 0x28
 800a7ec:	2102      	movs	r1, #2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 ff64 	bl	800b6bc <RCCEx_PLL3_Config>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7fa:	e00a      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a802:	e006      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a804:	bf00      	nop
 800a806:	e004      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a808:	bf00      	nop
 800a80a:	e002      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a80c:	bf00      	nop
 800a80e:	e000      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a81a:	4b39      	ldr	r3, [pc, #228]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82a:	4a35      	ldr	r2, [pc, #212]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a830:	e003      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a84a:	2300      	movs	r3, #0
 800a84c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a850:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a854:	460b      	mov	r3, r1
 800a856:	4313      	orrs	r3, r2
 800a858:	d058      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a862:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a866:	d033      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a868:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a86c:	d82c      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a86e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a872:	d02f      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a878:	d826      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a87a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a87e:	d02b      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a884:	d820      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a88a:	d012      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a890:	d81a      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d022      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a89a:	d115      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fe57 	bl	800b558 <RCCEx_PLL2_Config>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8b0:	e015      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b6:	3328      	adds	r3, #40	@ 0x28
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fefe 	bl	800b6bc <RCCEx_PLL3_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8c6:	e00a      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8ce:	e006      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d0:	bf00      	nop
 800a8d2:	e004      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d4:	bf00      	nop
 800a8d6:	e002      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10e      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8e6:	4b06      	ldr	r3, [pc, #24]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8f6:	4a02      	ldr	r2, [pc, #8]	@ (800a900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8fc:	e006      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8fe:	bf00      	nop
 800a900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a91c:	2300      	movs	r3, #0
 800a91e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a922:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a926:	460b      	mov	r3, r1
 800a928:	4313      	orrs	r3, r2
 800a92a:	d055      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a930:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a934:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a938:	d033      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a93a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a93e:	d82c      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a944:	d02f      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a94a:	d826      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a94c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a950:	d02b      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a952:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a956:	d820      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a95c:	d012      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a95e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a962:	d81a      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d022      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a96c:	d115      	bne.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a972:	3308      	adds	r3, #8
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fdee 	bl	800b558 <RCCEx_PLL2_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a982:	e015      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a988:	3328      	adds	r3, #40	@ 0x28
 800a98a:	2102      	movs	r1, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fe95 	bl	800b6bc <RCCEx_PLL3_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a998:	e00a      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9a0:	e006      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9a2:	bf00      	nop
 800a9a4:	e004      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9a6:	bf00      	nop
 800a9a8:	e002      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9b8:	4ba1      	ldr	r3, [pc, #644]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9c8:	4a9d      	ldr	r2, [pc, #628]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9ce:	e003      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f002 0308 	and.w	r3, r2, #8
 800a9e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	d01e      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa04:	d10c      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa0a:	3328      	adds	r3, #40	@ 0x28
 800aa0c:	2102      	movs	r1, #2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fe54 	bl	800b6bc <RCCEx_PLL3_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa20:	4b87      	ldr	r3, [pc, #540]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa30:	4a83      	ldr	r2, [pc, #524]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa32:	430b      	orrs	r3, r1
 800aa34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f002 0310 	and.w	r3, r2, #16
 800aa42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa46:	2300      	movs	r3, #0
 800aa48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aa50:	460b      	mov	r3, r1
 800aa52:	4313      	orrs	r3, r2
 800aa54:	d01e      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa62:	d10c      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa68:	3328      	adds	r3, #40	@ 0x28
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fe25 	bl	800b6bc <RCCEx_PLL3_Config>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa7e:	4b70      	ldr	r3, [pc, #448]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa8e:	4a6c      	ldr	r2, [pc, #432]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aaa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aaaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d03e      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aabc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac0:	d022      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac6:	d81b      	bhi.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aacc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad0:	d00b      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aad2:	e015      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad8:	3308      	adds	r3, #8
 800aada:	2100      	movs	r1, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fd3b 	bl	800b558 <RCCEx_PLL2_Config>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aae8:	e00f      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaee:	3328      	adds	r3, #40	@ 0x28
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fde2 	bl	800b6bc <RCCEx_PLL3_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aafe:	e004      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab06:	e000      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ab08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10b      	bne.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab12:	4b4b      	ldr	r3, [pc, #300]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab22:	4a47      	ldr	r2, [pc, #284]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab28:	e003      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ab3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab40:	2300      	movs	r3, #0
 800ab42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	d03b      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab5a:	d01f      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab60:	d818      	bhi.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab66:	d003      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab6c:	d007      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab6e:	e011      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab70:	4b33      	ldr	r3, [pc, #204]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab74:	4a32      	ldr	r2, [pc, #200]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab7c:	e00f      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab82:	3328      	adds	r3, #40	@ 0x28
 800ab84:	2101      	movs	r1, #1
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 fd98 	bl	800b6bc <RCCEx_PLL3_Config>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab92:	e004      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab9a:	e000      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aba6:	4b26      	ldr	r3, [pc, #152]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800abae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb6:	4a22      	ldr	r2, [pc, #136]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abb8:	430b      	orrs	r3, r1
 800abba:	6553      	str	r3, [r2, #84]	@ 0x54
 800abbc:	e003      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800abd2:	673b      	str	r3, [r7, #112]	@ 0x70
 800abd4:	2300      	movs	r3, #0
 800abd6:	677b      	str	r3, [r7, #116]	@ 0x74
 800abd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800abdc:	460b      	mov	r3, r1
 800abde:	4313      	orrs	r3, r2
 800abe0:	d034      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800abec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abf0:	d007      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800abf2:	e011      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf4:	4b12      	ldr	r3, [pc, #72]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf8:	4a11      	ldr	r2, [pc, #68]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac00:	e00e      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac06:	3308      	adds	r3, #8
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fca4 	bl	800b558 <RCCEx_PLL2_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac16:	e003      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10d      	bne.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac28:	4b05      	ldr	r3, [pc, #20]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac36:	4a02      	ldr	r2, [pc, #8]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac3c:	e006      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ac3e:	bf00      	nop
 800ac40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ac62:	460b      	mov	r3, r1
 800ac64:	4313      	orrs	r3, r2
 800ac66:	d00c      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac6c:	3328      	adds	r3, #40	@ 0x28
 800ac6e:	2102      	movs	r1, #2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fd23 	bl	800b6bc <RCCEx_PLL3_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ac8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac90:	2300      	movs	r3, #0
 800ac92:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	d038      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acaa:	d018      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800acac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acb0:	d811      	bhi.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800acb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb6:	d014      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800acb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acbc:	d80b      	bhi.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d011      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc6:	d106      	bne.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc8:	4bc3      	ldr	r3, [pc, #780]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	4ac2      	ldr	r2, [pc, #776]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800acd4:	e008      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acdc:	e004      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acde:	bf00      	nop
 800ace0:	e002      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ace2:	bf00      	nop
 800ace4:	e000      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ace6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10b      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acf0:	4bb9      	ldr	r3, [pc, #740]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad00:	4ab5      	ldr	r2, [pc, #724]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad02:	430b      	orrs	r3, r1
 800ad04:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad06:	e003      	b.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ad1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad1e:	2300      	movs	r3, #0
 800ad20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ad26:	460b      	mov	r3, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	d009      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad2c:	4baa      	ldr	r3, [pc, #680]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad3a:	4aa7      	ldr	r2, [pc, #668]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ad4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad4e:	2300      	movs	r3, #0
 800ad50:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ad56:	460b      	mov	r3, r1
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	d00a      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad5c:	4b9e      	ldr	r3, [pc, #632]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ad64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ad6c:	4a9a      	ldr	r2, [pc, #616]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ad7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad80:	2300      	movs	r3, #0
 800ad82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	d009      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad8e:	4b92      	ldr	r3, [pc, #584]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad9c:	4a8e      	ldr	r2, [pc, #568]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ada2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800adae:	643b      	str	r3, [r7, #64]	@ 0x40
 800adb0:	2300      	movs	r3, #0
 800adb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800adb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800adb8:	460b      	mov	r3, r1
 800adba:	4313      	orrs	r3, r2
 800adbc:	d00e      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adbe:	4b86      	ldr	r3, [pc, #536]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	4a85      	ldr	r2, [pc, #532]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800adc8:	6113      	str	r3, [r2, #16]
 800adca:	4b83      	ldr	r3, [pc, #524]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adcc:	6919      	ldr	r1, [r3, #16]
 800adce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800add6:	4a80      	ldr	r2, [pc, #512]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800add8:	430b      	orrs	r3, r1
 800adda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800addc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ade8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800adf2:	460b      	mov	r3, r1
 800adf4:	4313      	orrs	r3, r2
 800adf6:	d009      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adf8:	4b77      	ldr	r3, [pc, #476]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adfc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ae00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae06:	4a74      	ldr	r2, [pc, #464]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ae18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d00a      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae28:	4b6b      	ldr	r3, [pc, #428]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ae30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae38:	4a67      	ldr	r2, [pc, #412]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	2100      	movs	r1, #0
 800ae48:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d011      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae5e:	3308      	adds	r3, #8
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fb78 	bl	800b558 <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	2100      	movs	r1, #0
 800ae88:	6239      	str	r1, [r7, #32]
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae94:	460b      	mov	r3, r1
 800ae96:	4313      	orrs	r3, r2
 800ae98:	d011      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9e:	3308      	adds	r3, #8
 800aea0:	2101      	movs	r1, #1
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fb58 	bl	800b558 <RCCEx_PLL2_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aeae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	2100      	movs	r1, #0
 800aec8:	61b9      	str	r1, [r7, #24]
 800aeca:	f003 0304 	and.w	r3, r3, #4
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aed4:	460b      	mov	r3, r1
 800aed6:	4313      	orrs	r3, r2
 800aed8:	d011      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aede:	3308      	adds	r3, #8
 800aee0:	2102      	movs	r1, #2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fb38 	bl	800b558 <RCCEx_PLL2_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aeee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aefa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	2100      	movs	r1, #0
 800af08:	6139      	str	r1, [r7, #16]
 800af0a:	f003 0308 	and.w	r3, r3, #8
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af14:	460b      	mov	r3, r1
 800af16:	4313      	orrs	r3, r2
 800af18:	d011      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af1e:	3328      	adds	r3, #40	@ 0x28
 800af20:	2100      	movs	r1, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fbca 	bl	800b6bc <RCCEx_PLL3_Config>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800af2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	2100      	movs	r1, #0
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	f003 0310 	and.w	r3, r3, #16
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af54:	460b      	mov	r3, r1
 800af56:	4313      	orrs	r3, r2
 800af58:	d011      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af5e:	3328      	adds	r3, #40	@ 0x28
 800af60:	2101      	movs	r1, #1
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fbaa 	bl	800b6bc <RCCEx_PLL3_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	2100      	movs	r1, #0
 800af88:	6039      	str	r1, [r7, #0]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	607b      	str	r3, [r7, #4]
 800af90:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af94:	460b      	mov	r3, r1
 800af96:	4313      	orrs	r3, r2
 800af98:	d011      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af9e:	3328      	adds	r3, #40	@ 0x28
 800afa0:	2102      	movs	r1, #2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fb8a 	bl	800b6bc <RCCEx_PLL3_Config>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800afae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800afbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e000      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
}
 800afcc:	4618      	mov	r0, r3
 800afce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800afd2:	46bd      	mov	sp, r7
 800afd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afd8:	58024400 	.word	0x58024400

0800afdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afe0:	f7fe fd54 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 800afe4:	4602      	mov	r2, r0
 800afe6:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	091b      	lsrs	r3, r3, #4
 800afec:	f003 0307 	and.w	r3, r3, #7
 800aff0:	4904      	ldr	r1, [pc, #16]	@ (800b004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aff2:	5ccb      	ldrb	r3, [r1, r3]
 800aff4:	f003 031f 	and.w	r3, r3, #31
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800affc:	4618      	mov	r0, r3
 800affe:	bd80      	pop	{r7, pc}
 800b000:	58024400 	.word	0x58024400
 800b004:	0801a2d0 	.word	0x0801a2d0

0800b008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b008:	b480      	push	{r7}
 800b00a:	b089      	sub	sp, #36	@ 0x24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b010:	4ba1      	ldr	r3, [pc, #644]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b01a:	4b9f      	ldr	r3, [pc, #636]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01e:	0b1b      	lsrs	r3, r3, #12
 800b020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b026:	4b9c      	ldr	r3, [pc, #624]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02a:	091b      	lsrs	r3, r3, #4
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b032:	4b99      	ldr	r3, [pc, #612]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b036:	08db      	lsrs	r3, r3, #3
 800b038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	fb02 f303 	mul.w	r3, r2, r3
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8111 	beq.w	800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	f000 8083 	beq.w	800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	2b02      	cmp	r3, #2
 800b062:	f200 80a1 	bhi.w	800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d056      	beq.n	800b120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b072:	e099      	b.n	800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b074:	4b88      	ldr	r3, [pc, #544]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d02d      	beq.n	800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b080:	4b85      	ldr	r3, [pc, #532]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	08db      	lsrs	r3, r3, #3
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	4a84      	ldr	r2, [pc, #528]	@ (800b29c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b08c:	fa22 f303 	lsr.w	r3, r2, r3
 800b090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	ee07 3a90 	vmov	s15, r3
 800b098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0da:	e087      	b.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b102:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b10e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b11e:	e065      	b.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b132:	4b59      	ldr	r3, [pc, #356]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b142:	ed97 6a03 	vldr	s12, [r7, #12]
 800b146:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b162:	e043      	b.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b176:	4b48      	ldr	r3, [pc, #288]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b186:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a6:	e021      	b.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ba:	4b37      	ldr	r3, [pc, #220]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f0:	0a5b      	lsrs	r3, r3, #9
 800b1f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b202:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b206:	edd7 6a07 	vldr	s13, [r7, #28]
 800b20a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b20e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b212:	ee17 2a90 	vmov	r2, s15
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b21a:	4b1f      	ldr	r3, [pc, #124]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21e:	0c1b      	lsrs	r3, r3, #16
 800b220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b230:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b234:	edd7 6a07 	vldr	s13, [r7, #28]
 800b238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b23c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b240:	ee17 2a90 	vmov	r2, s15
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b248:	4b13      	ldr	r3, [pc, #76]	@ (800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24c:	0e1b      	lsrs	r3, r3, #24
 800b24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b262:	edd7 6a07 	vldr	s13, [r7, #28]
 800b266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b26e:	ee17 2a90 	vmov	r2, s15
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b276:	e008      	b.n	800b28a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	609a      	str	r2, [r3, #8]
}
 800b28a:	bf00      	nop
 800b28c:	3724      	adds	r7, #36	@ 0x24
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
 800b29c:	03d09000 	.word	0x03d09000
 800b2a0:	46000000 	.word	0x46000000
 800b2a4:	4c742400 	.word	0x4c742400
 800b2a8:	4a742400 	.word	0x4a742400
 800b2ac:	4bbebc20 	.word	0x4bbebc20

0800b2b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b089      	sub	sp, #36	@ 0x24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2b8:	4ba1      	ldr	r3, [pc, #644]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2bc:	f003 0303 	and.w	r3, r3, #3
 800b2c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b2c2:	4b9f      	ldr	r3, [pc, #636]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c6:	0d1b      	lsrs	r3, r3, #20
 800b2c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2ce:	4b9c      	ldr	r3, [pc, #624]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d2:	0a1b      	lsrs	r3, r3, #8
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2da:	4b99      	ldr	r3, [pc, #612]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2de:	08db      	lsrs	r3, r3, #3
 800b2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	ee07 3a90 	vmov	s15, r3
 800b2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 8111 	beq.w	800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b02      	cmp	r3, #2
 800b302:	f000 8083 	beq.w	800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	f200 80a1 	bhi.w	800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d056      	beq.n	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b31a:	e099      	b.n	800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31c:	4b88      	ldr	r3, [pc, #544]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02d      	beq.n	800b384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b328:	4b85      	ldr	r3, [pc, #532]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	08db      	lsrs	r3, r3, #3
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	4a84      	ldr	r2, [pc, #528]	@ (800b544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
 800b338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b352:	4b7b      	ldr	r3, [pc, #492]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	ed97 6a03 	vldr	s12, [r7, #12]
 800b366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b382:	e087      	b.n	800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b54c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b396:	4b6a      	ldr	r3, [pc, #424]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3c6:	e065      	b.n	800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3da:	4b59      	ldr	r3, [pc, #356]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b40a:	e043      	b.n	800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41e:	4b48      	ldr	r3, [pc, #288]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b44e:	e021      	b.n	800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b462:	4b37      	ldr	r3, [pc, #220]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b472:	ed97 6a03 	vldr	s12, [r7, #12]
 800b476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b494:	4b2a      	ldr	r3, [pc, #168]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b498:	0a5b      	lsrs	r3, r3, #9
 800b49a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ba:	ee17 2a90 	vmov	r2, s15
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b4c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c6:	0c1b      	lsrs	r3, r3, #16
 800b4c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4cc:	ee07 3a90 	vmov	s15, r3
 800b4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e8:	ee17 2a90 	vmov	r2, s15
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4f0:	4b13      	ldr	r3, [pc, #76]	@ (800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f4:	0e1b      	lsrs	r3, r3, #24
 800b4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b50a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b516:	ee17 2a90 	vmov	r2, s15
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b51e:	e008      	b.n	800b532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	609a      	str	r2, [r3, #8]
}
 800b532:	bf00      	nop
 800b534:	3724      	adds	r7, #36	@ 0x24
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	58024400 	.word	0x58024400
 800b544:	03d09000 	.word	0x03d09000
 800b548:	46000000 	.word	0x46000000
 800b54c:	4c742400 	.word	0x4c742400
 800b550:	4a742400 	.word	0x4a742400
 800b554:	4bbebc20 	.word	0x4bbebc20

0800b558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b566:	4b53      	ldr	r3, [pc, #332]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56a:	f003 0303 	and.w	r3, r3, #3
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d101      	bne.n	800b576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e099      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b576:	4b4f      	ldr	r3, [pc, #316]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a4e      	ldr	r2, [pc, #312]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b57c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b582:	f7f7 fa17 	bl	80029b4 <HAL_GetTick>
 800b586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b588:	e008      	b.n	800b59c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b58a:	f7f7 fa13 	bl	80029b4 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d901      	bls.n	800b59c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e086      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b59c:	4b45      	ldr	r3, [pc, #276]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1f0      	bne.n	800b58a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5a8:	4b42      	ldr	r3, [pc, #264]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	031b      	lsls	r3, r3, #12
 800b5b6:	493f      	ldr	r1, [pc, #252]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	025b      	lsls	r3, r3, #9
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	041b      	lsls	r3, r3, #16
 800b5da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	061b      	lsls	r3, r3, #24
 800b5e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5ec:	4931      	ldr	r1, [pc, #196]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5f2:	4b30      	ldr	r3, [pc, #192]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	492d      	ldr	r1, [pc, #180]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b600:	4313      	orrs	r3, r2
 800b602:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b604:	4b2b      	ldr	r3, [pc, #172]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b608:	f023 0220 	bic.w	r2, r3, #32
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	4928      	ldr	r1, [pc, #160]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b612:	4313      	orrs	r3, r2
 800b614:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b616:	4b27      	ldr	r3, [pc, #156]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61a:	4a26      	ldr	r2, [pc, #152]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b61c:	f023 0310 	bic.w	r3, r3, #16
 800b620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b622:	4b24      	ldr	r3, [pc, #144]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b626:	4b24      	ldr	r3, [pc, #144]	@ (800b6b8 <RCCEx_PLL2_Config+0x160>)
 800b628:	4013      	ands	r3, r2
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	69d2      	ldr	r2, [r2, #28]
 800b62e:	00d2      	lsls	r2, r2, #3
 800b630:	4920      	ldr	r1, [pc, #128]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b632:	4313      	orrs	r3, r2
 800b634:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b636:	4b1f      	ldr	r3, [pc, #124]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b63c:	f043 0310 	orr.w	r3, r3, #16
 800b640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b648:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	4a19      	ldr	r2, [pc, #100]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b64e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b654:	e00f      	b.n	800b676 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d106      	bne.n	800b66a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b65c:	4b15      	ldr	r3, [pc, #84]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b660:	4a14      	ldr	r2, [pc, #80]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b668:	e005      	b.n	800b676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b66a:	4b12      	ldr	r3, [pc, #72]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66e:	4a11      	ldr	r2, [pc, #68]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b674:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a0e      	ldr	r2, [pc, #56]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b67c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b682:	f7f7 f997 	bl	80029b4 <HAL_GetTick>
 800b686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b688:	e008      	b.n	800b69c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b68a:	f7f7 f993 	bl	80029b4 <HAL_GetTick>
 800b68e:	4602      	mov	r2, r0
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2b02      	cmp	r3, #2
 800b696:	d901      	bls.n	800b69c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b698:	2303      	movs	r3, #3
 800b69a:	e006      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b69c:	4b05      	ldr	r3, [pc, #20]	@ (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0f0      	beq.n	800b68a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	58024400 	.word	0x58024400
 800b6b8:	ffff0007 	.word	0xffff0007

0800b6bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ca:	4b53      	ldr	r3, [pc, #332]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d101      	bne.n	800b6da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e099      	b.n	800b80e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6da:	4b4f      	ldr	r3, [pc, #316]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a4e      	ldr	r2, [pc, #312]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e6:	f7f7 f965 	bl	80029b4 <HAL_GetTick>
 800b6ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6ec:	e008      	b.n	800b700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6ee:	f7f7 f961 	bl	80029b4 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e086      	b.n	800b80e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b700:	4b45      	ldr	r3, [pc, #276]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b70c:	4b42      	ldr	r3, [pc, #264]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b710:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	051b      	lsls	r3, r3, #20
 800b71a:	493f      	ldr	r1, [pc, #252]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	3b01      	subs	r3, #1
 800b726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	3b01      	subs	r3, #1
 800b730:	025b      	lsls	r3, r3, #9
 800b732:	b29b      	uxth	r3, r3
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	3b01      	subs	r3, #1
 800b74a:	061b      	lsls	r3, r3, #24
 800b74c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b750:	4931      	ldr	r1, [pc, #196]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b752:	4313      	orrs	r3, r2
 800b754:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b756:	4b30      	ldr	r3, [pc, #192]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	492d      	ldr	r1, [pc, #180]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b764:	4313      	orrs	r3, r2
 800b766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b768:	4b2b      	ldr	r3, [pc, #172]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	4928      	ldr	r1, [pc, #160]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b776:	4313      	orrs	r3, r2
 800b778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b77a:	4b27      	ldr	r3, [pc, #156]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77e:	4a26      	ldr	r2, [pc, #152]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b786:	4b24      	ldr	r3, [pc, #144]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b78a:	4b24      	ldr	r3, [pc, #144]	@ (800b81c <RCCEx_PLL3_Config+0x160>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	69d2      	ldr	r2, [r2, #28]
 800b792:	00d2      	lsls	r2, r2, #3
 800b794:	4920      	ldr	r1, [pc, #128]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b796:	4313      	orrs	r3, r2
 800b798:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b79a:	4b1f      	ldr	r3, [pc, #124]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	4a1e      	ldr	r2, [pc, #120]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b0:	4a19      	ldr	r2, [pc, #100]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b7b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7b8:	e00f      	b.n	800b7da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d106      	bne.n	800b7ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7c0:	4b15      	ldr	r3, [pc, #84]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c4:	4a14      	ldr	r2, [pc, #80]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7cc:	e005      	b.n	800b7da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7ce:	4b12      	ldr	r3, [pc, #72]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d2:	4a11      	ldr	r2, [pc, #68]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7da:	4b0f      	ldr	r3, [pc, #60]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a0e      	ldr	r2, [pc, #56]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7e6:	f7f7 f8e5 	bl	80029b4 <HAL_GetTick>
 800b7ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7ec:	e008      	b.n	800b800 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7ee:	f7f7 f8e1 	bl	80029b4 <HAL_GetTick>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d901      	bls.n	800b800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e006      	b.n	800b80e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b800:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0f0      	beq.n	800b7ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	58024400 	.word	0x58024400
 800b81c:	ffff0007 	.word	0xffff0007

0800b820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e049      	b.n	800b8c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7f6 fd1a 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4619      	mov	r1, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	f000 fd88 	bl	800c374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d001      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e054      	b.n	800b992 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68da      	ldr	r2, [r3, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a26      	ldr	r2, [pc, #152]	@ (800b9a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d022      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b912:	d01d      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a22      	ldr	r2, [pc, #136]	@ (800b9a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d018      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a21      	ldr	r2, [pc, #132]	@ (800b9a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1f      	ldr	r2, [pc, #124]	@ (800b9ac <HAL_TIM_Base_Start_IT+0xdc>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00e      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1e      	ldr	r2, [pc, #120]	@ (800b9b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d009      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1c      	ldr	r2, [pc, #112]	@ (800b9b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d004      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x80>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d115      	bne.n	800b97c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	4b19      	ldr	r3, [pc, #100]	@ (800b9bc <HAL_TIM_Base_Start_IT+0xec>)
 800b958:	4013      	ands	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b06      	cmp	r3, #6
 800b960:	d015      	beq.n	800b98e <HAL_TIM_Base_Start_IT+0xbe>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b968:	d011      	beq.n	800b98e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97a:	e008      	b.n	800b98e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0201 	orr.w	r2, r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e000      	b.n	800b990 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b98e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	40000400 	.word	0x40000400
 800b9a8:	40000800 	.word	0x40000800
 800b9ac:	40000c00 	.word	0x40000c00
 800b9b0:	40010400 	.word	0x40010400
 800b9b4:	40001800 	.word	0x40001800
 800b9b8:	40014000 	.word	0x40014000
 800b9bc:	00010007 	.word	0x00010007

0800b9c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f022 0201 	bic.w	r2, r2, #1
 800b9d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6a1a      	ldr	r2, [r3, #32]
 800b9de:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10f      	bne.n	800ba08 <HAL_TIM_Base_Stop_IT+0x48>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6a1a      	ldr	r2, [r3, #32]
 800b9ee:	f240 4344 	movw	r3, #1092	@ 0x444
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d107      	bne.n	800ba08 <HAL_TIM_Base_Stop_IT+0x48>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f022 0201 	bic.w	r2, r2, #1
 800ba06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e049      	b.n	800bac4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f841 	bl	800bacc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f000 fc89 	bl	800c374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <HAL_TIM_PWM_Start+0x24>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	bf14      	ite	ne
 800bafc:	2301      	movne	r3, #1
 800bafe:	2300      	moveq	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	e03c      	b.n	800bb7e <HAL_TIM_PWM_Start+0x9e>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d109      	bne.n	800bb1e <HAL_TIM_PWM_Start+0x3e>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	bf14      	ite	ne
 800bb16:	2301      	movne	r3, #1
 800bb18:	2300      	moveq	r3, #0
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	e02f      	b.n	800bb7e <HAL_TIM_PWM_Start+0x9e>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d109      	bne.n	800bb38 <HAL_TIM_PWM_Start+0x58>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	bf14      	ite	ne
 800bb30:	2301      	movne	r3, #1
 800bb32:	2300      	moveq	r3, #0
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	e022      	b.n	800bb7e <HAL_TIM_PWM_Start+0x9e>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b0c      	cmp	r3, #12
 800bb3c:	d109      	bne.n	800bb52 <HAL_TIM_PWM_Start+0x72>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	bf14      	ite	ne
 800bb4a:	2301      	movne	r3, #1
 800bb4c:	2300      	moveq	r3, #0
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	e015      	b.n	800bb7e <HAL_TIM_PWM_Start+0x9e>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b10      	cmp	r3, #16
 800bb56:	d109      	bne.n	800bb6c <HAL_TIM_PWM_Start+0x8c>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	bf14      	ite	ne
 800bb64:	2301      	movne	r3, #1
 800bb66:	2300      	moveq	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	e008      	b.n	800bb7e <HAL_TIM_PWM_Start+0x9e>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	bf14      	ite	ne
 800bb78:	2301      	movne	r3, #1
 800bb7a:	2300      	moveq	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e0a1      	b.n	800bcca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <HAL_TIM_PWM_Start+0xb6>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb94:	e023      	b.n	800bbde <HAL_TIM_PWM_Start+0xfe>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b04      	cmp	r3, #4
 800bb9a:	d104      	bne.n	800bba6 <HAL_TIM_PWM_Start+0xc6>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bba4:	e01b      	b.n	800bbde <HAL_TIM_PWM_Start+0xfe>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d104      	bne.n	800bbb6 <HAL_TIM_PWM_Start+0xd6>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bbb4:	e013      	b.n	800bbde <HAL_TIM_PWM_Start+0xfe>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b0c      	cmp	r3, #12
 800bbba:	d104      	bne.n	800bbc6 <HAL_TIM_PWM_Start+0xe6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bbc4:	e00b      	b.n	800bbde <HAL_TIM_PWM_Start+0xfe>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b10      	cmp	r3, #16
 800bbca:	d104      	bne.n	800bbd6 <HAL_TIM_PWM_Start+0xf6>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbd4:	e003      	b.n	800bbde <HAL_TIM_PWM_Start+0xfe>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2202      	movs	r2, #2
 800bbda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 ffde 	bl	800cba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a38      	ldr	r2, [pc, #224]	@ (800bcd4 <HAL_TIM_PWM_Start+0x1f4>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d013      	beq.n	800bc1e <HAL_TIM_PWM_Start+0x13e>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a37      	ldr	r2, [pc, #220]	@ (800bcd8 <HAL_TIM_PWM_Start+0x1f8>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d00e      	beq.n	800bc1e <HAL_TIM_PWM_Start+0x13e>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a35      	ldr	r2, [pc, #212]	@ (800bcdc <HAL_TIM_PWM_Start+0x1fc>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d009      	beq.n	800bc1e <HAL_TIM_PWM_Start+0x13e>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a34      	ldr	r2, [pc, #208]	@ (800bce0 <HAL_TIM_PWM_Start+0x200>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d004      	beq.n	800bc1e <HAL_TIM_PWM_Start+0x13e>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a32      	ldr	r2, [pc, #200]	@ (800bce4 <HAL_TIM_PWM_Start+0x204>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d101      	bne.n	800bc22 <HAL_TIM_PWM_Start+0x142>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <HAL_TIM_PWM_Start+0x144>
 800bc22:	2300      	movs	r3, #0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a25      	ldr	r2, [pc, #148]	@ (800bcd4 <HAL_TIM_PWM_Start+0x1f4>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d022      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc4a:	d01d      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a25      	ldr	r2, [pc, #148]	@ (800bce8 <HAL_TIM_PWM_Start+0x208>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d018      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a24      	ldr	r2, [pc, #144]	@ (800bcec <HAL_TIM_PWM_Start+0x20c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d013      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a22      	ldr	r2, [pc, #136]	@ (800bcf0 <HAL_TIM_PWM_Start+0x210>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00e      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a1a      	ldr	r2, [pc, #104]	@ (800bcd8 <HAL_TIM_PWM_Start+0x1f8>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d009      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a1e      	ldr	r2, [pc, #120]	@ (800bcf4 <HAL_TIM_PWM_Start+0x214>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d004      	beq.n	800bc88 <HAL_TIM_PWM_Start+0x1a8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a16      	ldr	r2, [pc, #88]	@ (800bcdc <HAL_TIM_PWM_Start+0x1fc>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d115      	bne.n	800bcb4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf8 <HAL_TIM_PWM_Start+0x218>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b06      	cmp	r3, #6
 800bc98:	d015      	beq.n	800bcc6 <HAL_TIM_PWM_Start+0x1e6>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca0:	d011      	beq.n	800bcc6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f042 0201 	orr.w	r2, r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcb2:	e008      	b.n	800bcc6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0201 	orr.w	r2, r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e000      	b.n	800bcc8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	40010000 	.word	0x40010000
 800bcd8:	40010400 	.word	0x40010400
 800bcdc:	40014000 	.word	0x40014000
 800bce0:	40014400 	.word	0x40014400
 800bce4:	40014800 	.word	0x40014800
 800bce8:	40000400 	.word	0x40000400
 800bcec:	40000800 	.word	0x40000800
 800bcf0:	40000c00 	.word	0x40000c00
 800bcf4:	40001800 	.word	0x40001800
 800bcf8:	00010007 	.word	0x00010007

0800bcfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d020      	beq.n	800bd60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f003 0302 	and.w	r3, r3, #2
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01b      	beq.n	800bd60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f06f 0202 	mvn.w	r2, #2
 800bd30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 faf6 	bl	800c338 <HAL_TIM_IC_CaptureCallback>
 800bd4c:	e005      	b.n	800bd5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fae8 	bl	800c324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 faf9 	bl	800c34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d020      	beq.n	800bdac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f003 0304 	and.w	r3, r3, #4
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d01b      	beq.n	800bdac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f06f 0204 	mvn.w	r2, #4
 800bd7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2202      	movs	r2, #2
 800bd82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fad0 	bl	800c338 <HAL_TIM_IC_CaptureCallback>
 800bd98:	e005      	b.n	800bda6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fac2 	bl	800c324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fad3 	bl	800c34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d020      	beq.n	800bdf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f003 0308 	and.w	r3, r3, #8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d01b      	beq.n	800bdf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f06f 0208 	mvn.w	r2, #8
 800bdc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2204      	movs	r2, #4
 800bdce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 faaa 	bl	800c338 <HAL_TIM_IC_CaptureCallback>
 800bde4:	e005      	b.n	800bdf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa9c 	bl	800c324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 faad 	bl	800c34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f003 0310 	and.w	r3, r3, #16
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d020      	beq.n	800be44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f003 0310 	and.w	r3, r3, #16
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01b      	beq.n	800be44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f06f 0210 	mvn.w	r2, #16
 800be14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2208      	movs	r2, #8
 800be1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa84 	bl	800c338 <HAL_TIM_IC_CaptureCallback>
 800be30:	e005      	b.n	800be3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa76 	bl	800c324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa87 	bl	800c34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00c      	beq.n	800be68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d007      	beq.n	800be68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f06f 0201 	mvn.w	r2, #1
 800be60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7f5 fda2 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d104      	bne.n	800be7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00c      	beq.n	800be96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be82:	2b00      	cmp	r3, #0
 800be84:	d007      	beq.n	800be96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800be8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 ffc5 	bl	800ce20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00c      	beq.n	800beba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d007      	beq.n	800beba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800beb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 ffbd 	bl	800ce34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00c      	beq.n	800bede <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa41 	bl	800c360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f003 0320 	and.w	r3, r3, #32
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00c      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f06f 0220 	mvn.w	r2, #32
 800befa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 ff85 	bl	800ce0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d101      	bne.n	800bf2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf26:	2302      	movs	r3, #2
 800bf28:	e0ff      	b.n	800c12a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b14      	cmp	r3, #20
 800bf36:	f200 80f0 	bhi.w	800c11a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf95 	.word	0x0800bf95
 800bf44:	0800c11b 	.word	0x0800c11b
 800bf48:	0800c11b 	.word	0x0800c11b
 800bf4c:	0800c11b 	.word	0x0800c11b
 800bf50:	0800bfd5 	.word	0x0800bfd5
 800bf54:	0800c11b 	.word	0x0800c11b
 800bf58:	0800c11b 	.word	0x0800c11b
 800bf5c:	0800c11b 	.word	0x0800c11b
 800bf60:	0800c017 	.word	0x0800c017
 800bf64:	0800c11b 	.word	0x0800c11b
 800bf68:	0800c11b 	.word	0x0800c11b
 800bf6c:	0800c11b 	.word	0x0800c11b
 800bf70:	0800c057 	.word	0x0800c057
 800bf74:	0800c11b 	.word	0x0800c11b
 800bf78:	0800c11b 	.word	0x0800c11b
 800bf7c:	0800c11b 	.word	0x0800c11b
 800bf80:	0800c099 	.word	0x0800c099
 800bf84:	0800c11b 	.word	0x0800c11b
 800bf88:	0800c11b 	.word	0x0800c11b
 800bf8c:	0800c11b 	.word	0x0800c11b
 800bf90:	0800c0d9 	.word	0x0800c0d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 fa90 	bl	800c4c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	699a      	ldr	r2, [r3, #24]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0208 	orr.w	r2, r2, #8
 800bfae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	699a      	ldr	r2, [r3, #24]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 0204 	bic.w	r2, r2, #4
 800bfbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6999      	ldr	r1, [r3, #24]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	691a      	ldr	r2, [r3, #16]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	619a      	str	r2, [r3, #24]
      break;
 800bfd2:	e0a5      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68b9      	ldr	r1, [r7, #8]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fb00 	bl	800c5e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6999      	ldr	r1, [r3, #24]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	021a      	lsls	r2, r3, #8
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	430a      	orrs	r2, r1
 800c012:	619a      	str	r2, [r3, #24]
      break;
 800c014:	e084      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68b9      	ldr	r1, [r7, #8]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 fb69 	bl	800c6f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	69da      	ldr	r2, [r3, #28]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 0208 	orr.w	r2, r2, #8
 800c030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69da      	ldr	r2, [r3, #28]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f022 0204 	bic.w	r2, r2, #4
 800c040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	69d9      	ldr	r1, [r3, #28]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	430a      	orrs	r2, r1
 800c052:	61da      	str	r2, [r3, #28]
      break;
 800c054:	e064      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 fbd1 	bl	800c804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69da      	ldr	r2, [r3, #28]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69da      	ldr	r2, [r3, #28]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	69d9      	ldr	r1, [r3, #28]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	021a      	lsls	r2, r3, #8
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	61da      	str	r2, [r3, #28]
      break;
 800c096:	e043      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fc1a 	bl	800c8d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0208 	orr.w	r2, r2, #8
 800c0b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f022 0204 	bic.w	r2, r2, #4
 800c0c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	691a      	ldr	r2, [r3, #16]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c0d6:	e023      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68b9      	ldr	r1, [r7, #8]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fc5e 	bl	800c9a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c102:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	021a      	lsls	r2, r3, #8
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	430a      	orrs	r2, r1
 800c116:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c118:	e002      	b.n	800c120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	75fb      	strb	r3, [r7, #23]
      break;
 800c11e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c128:	7dfb      	ldrb	r3, [r7, #23]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop

0800c134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d101      	bne.n	800c150 <HAL_TIM_ConfigClockSource+0x1c>
 800c14c:	2302      	movs	r3, #2
 800c14e:	e0dc      	b.n	800c30a <HAL_TIM_ConfigClockSource+0x1d6>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	4b6a      	ldr	r3, [pc, #424]	@ (800c314 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a64      	ldr	r2, [pc, #400]	@ (800c318 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c186:	4293      	cmp	r3, r2
 800c188:	f000 80a9 	beq.w	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c18c:	4a62      	ldr	r2, [pc, #392]	@ (800c318 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	f200 80ae 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c194:	4a61      	ldr	r2, [pc, #388]	@ (800c31c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c196:	4293      	cmp	r3, r2
 800c198:	f000 80a1 	beq.w	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c19c:	4a5f      	ldr	r2, [pc, #380]	@ (800c31c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	f200 80a6 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1a4:	4a5e      	ldr	r2, [pc, #376]	@ (800c320 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	f000 8099 	beq.w	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c1ac:	4a5c      	ldr	r2, [pc, #368]	@ (800c320 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	f200 809e 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c1b8:	f000 8091 	beq.w	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c1bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c1c0:	f200 8096 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1c8:	f000 8089 	beq.w	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c1cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1d0:	f200 808e 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1d8:	d03e      	beq.n	800c258 <HAL_TIM_ConfigClockSource+0x124>
 800c1da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1de:	f200 8087 	bhi.w	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e6:	f000 8086 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1ee:	d87f      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f0:	2b70      	cmp	r3, #112	@ 0x70
 800c1f2:	d01a      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0xf6>
 800c1f4:	2b70      	cmp	r3, #112	@ 0x70
 800c1f6:	d87b      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f8:	2b60      	cmp	r3, #96	@ 0x60
 800c1fa:	d050      	beq.n	800c29e <HAL_TIM_ConfigClockSource+0x16a>
 800c1fc:	2b60      	cmp	r3, #96	@ 0x60
 800c1fe:	d877      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c200:	2b50      	cmp	r3, #80	@ 0x50
 800c202:	d03c      	beq.n	800c27e <HAL_TIM_ConfigClockSource+0x14a>
 800c204:	2b50      	cmp	r3, #80	@ 0x50
 800c206:	d873      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c208:	2b40      	cmp	r3, #64	@ 0x40
 800c20a:	d058      	beq.n	800c2be <HAL_TIM_ConfigClockSource+0x18a>
 800c20c:	2b40      	cmp	r3, #64	@ 0x40
 800c20e:	d86f      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c210:	2b30      	cmp	r3, #48	@ 0x30
 800c212:	d064      	beq.n	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c214:	2b30      	cmp	r3, #48	@ 0x30
 800c216:	d86b      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c218:	2b20      	cmp	r3, #32
 800c21a:	d060      	beq.n	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c21c:	2b20      	cmp	r3, #32
 800c21e:	d867      	bhi.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c220:	2b00      	cmp	r3, #0
 800c222:	d05c      	beq.n	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c224:	2b10      	cmp	r3, #16
 800c226:	d05a      	beq.n	800c2de <HAL_TIM_ConfigClockSource+0x1aa>
 800c228:	e062      	b.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c23a:	f000 fc95 	bl	800cb68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c24c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	609a      	str	r2, [r3, #8]
      break;
 800c256:	e04f      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c268:	f000 fc7e 	bl	800cb68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c27a:	609a      	str	r2, [r3, #8]
      break;
 800c27c:	e03c      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c28a:	461a      	mov	r2, r3
 800c28c:	f000 fbee 	bl	800ca6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2150      	movs	r1, #80	@ 0x50
 800c296:	4618      	mov	r0, r3
 800c298:	f000 fc48 	bl	800cb2c <TIM_ITRx_SetConfig>
      break;
 800c29c:	e02c      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f000 fc0d 	bl	800caca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2160      	movs	r1, #96	@ 0x60
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 fc38 	bl	800cb2c <TIM_ITRx_SetConfig>
      break;
 800c2bc:	e01c      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f000 fbce 	bl	800ca6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2140      	movs	r1, #64	@ 0x40
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fc28 	bl	800cb2c <TIM_ITRx_SetConfig>
      break;
 800c2dc:	e00c      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f000 fc1f 	bl	800cb2c <TIM_ITRx_SetConfig>
      break;
 800c2ee:	e003      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f4:	e000      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c2f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	ffceff88 	.word	0xffceff88
 800c318:	00100040 	.word	0x00100040
 800c31c:	00100030 	.word	0x00100030
 800c320:	00100020 	.word	0x00100020

0800c324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a46      	ldr	r2, [pc, #280]	@ (800c4a0 <TIM_Base_SetConfig+0x12c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d013      	beq.n	800c3b4 <TIM_Base_SetConfig+0x40>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c392:	d00f      	beq.n	800c3b4 <TIM_Base_SetConfig+0x40>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a43      	ldr	r2, [pc, #268]	@ (800c4a4 <TIM_Base_SetConfig+0x130>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d00b      	beq.n	800c3b4 <TIM_Base_SetConfig+0x40>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a42      	ldr	r2, [pc, #264]	@ (800c4a8 <TIM_Base_SetConfig+0x134>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d007      	beq.n	800c3b4 <TIM_Base_SetConfig+0x40>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a41      	ldr	r2, [pc, #260]	@ (800c4ac <TIM_Base_SetConfig+0x138>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d003      	beq.n	800c3b4 <TIM_Base_SetConfig+0x40>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a40      	ldr	r2, [pc, #256]	@ (800c4b0 <TIM_Base_SetConfig+0x13c>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d108      	bne.n	800c3c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a35      	ldr	r2, [pc, #212]	@ (800c4a0 <TIM_Base_SetConfig+0x12c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d01f      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3d4:	d01b      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a32      	ldr	r2, [pc, #200]	@ (800c4a4 <TIM_Base_SetConfig+0x130>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d017      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a31      	ldr	r2, [pc, #196]	@ (800c4a8 <TIM_Base_SetConfig+0x134>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d013      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a30      	ldr	r2, [pc, #192]	@ (800c4ac <TIM_Base_SetConfig+0x138>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d00f      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a2f      	ldr	r2, [pc, #188]	@ (800c4b0 <TIM_Base_SetConfig+0x13c>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d00b      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a2e      	ldr	r2, [pc, #184]	@ (800c4b4 <TIM_Base_SetConfig+0x140>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d007      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4a2d      	ldr	r2, [pc, #180]	@ (800c4b8 <TIM_Base_SetConfig+0x144>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d003      	beq.n	800c40e <TIM_Base_SetConfig+0x9a>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4a2c      	ldr	r2, [pc, #176]	@ (800c4bc <TIM_Base_SetConfig+0x148>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d108      	bne.n	800c420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a16      	ldr	r2, [pc, #88]	@ (800c4a0 <TIM_Base_SetConfig+0x12c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d00f      	beq.n	800c46c <TIM_Base_SetConfig+0xf8>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a18      	ldr	r2, [pc, #96]	@ (800c4b0 <TIM_Base_SetConfig+0x13c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00b      	beq.n	800c46c <TIM_Base_SetConfig+0xf8>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a17      	ldr	r2, [pc, #92]	@ (800c4b4 <TIM_Base_SetConfig+0x140>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d007      	beq.n	800c46c <TIM_Base_SetConfig+0xf8>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a16      	ldr	r2, [pc, #88]	@ (800c4b8 <TIM_Base_SetConfig+0x144>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d003      	beq.n	800c46c <TIM_Base_SetConfig+0xf8>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a15      	ldr	r2, [pc, #84]	@ (800c4bc <TIM_Base_SetConfig+0x148>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d103      	bne.n	800c474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	691a      	ldr	r2, [r3, #16]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b01      	cmp	r3, #1
 800c484:	d105      	bne.n	800c492 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	f023 0201 	bic.w	r2, r3, #1
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	611a      	str	r2, [r3, #16]
  }
}
 800c492:	bf00      	nop
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	40010000 	.word	0x40010000
 800c4a4:	40000400 	.word	0x40000400
 800c4a8:	40000800 	.word	0x40000800
 800c4ac:	40000c00 	.word	0x40000c00
 800c4b0:	40010400 	.word	0x40010400
 800c4b4:	40014000 	.word	0x40014000
 800c4b8:	40014400 	.word	0x40014400
 800c4bc:	40014800 	.word	0x40014800

0800c4c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	f023 0201 	bic.w	r2, r3, #1
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	4b37      	ldr	r3, [pc, #220]	@ (800c5c8 <TIM_OC1_SetConfig+0x108>)
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f023 0303 	bic.w	r3, r3, #3
 800c4f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	f023 0302 	bic.w	r3, r3, #2
 800c508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	4313      	orrs	r3, r2
 800c512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a2d      	ldr	r2, [pc, #180]	@ (800c5cc <TIM_OC1_SetConfig+0x10c>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d00f      	beq.n	800c53c <TIM_OC1_SetConfig+0x7c>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a2c      	ldr	r2, [pc, #176]	@ (800c5d0 <TIM_OC1_SetConfig+0x110>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d00b      	beq.n	800c53c <TIM_OC1_SetConfig+0x7c>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a2b      	ldr	r2, [pc, #172]	@ (800c5d4 <TIM_OC1_SetConfig+0x114>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d007      	beq.n	800c53c <TIM_OC1_SetConfig+0x7c>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a2a      	ldr	r2, [pc, #168]	@ (800c5d8 <TIM_OC1_SetConfig+0x118>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d003      	beq.n	800c53c <TIM_OC1_SetConfig+0x7c>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a29      	ldr	r2, [pc, #164]	@ (800c5dc <TIM_OC1_SetConfig+0x11c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d10c      	bne.n	800c556 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f023 0308 	bic.w	r3, r3, #8
 800c542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f023 0304 	bic.w	r3, r3, #4
 800c554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a1c      	ldr	r2, [pc, #112]	@ (800c5cc <TIM_OC1_SetConfig+0x10c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d00f      	beq.n	800c57e <TIM_OC1_SetConfig+0xbe>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d0 <TIM_OC1_SetConfig+0x110>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00b      	beq.n	800c57e <TIM_OC1_SetConfig+0xbe>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a1a      	ldr	r2, [pc, #104]	@ (800c5d4 <TIM_OC1_SetConfig+0x114>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d007      	beq.n	800c57e <TIM_OC1_SetConfig+0xbe>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a19      	ldr	r2, [pc, #100]	@ (800c5d8 <TIM_OC1_SetConfig+0x118>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d003      	beq.n	800c57e <TIM_OC1_SetConfig+0xbe>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a18      	ldr	r2, [pc, #96]	@ (800c5dc <TIM_OC1_SetConfig+0x11c>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d111      	bne.n	800c5a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c58c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	4313      	orrs	r3, r2
 800c596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	621a      	str	r2, [r3, #32]
}
 800c5bc:	bf00      	nop
 800c5be:	371c      	adds	r7, #28
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	fffeff8f 	.word	0xfffeff8f
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40010400 	.word	0x40010400
 800c5d4:	40014000 	.word	0x40014000
 800c5d8:	40014400 	.word	0x40014400
 800c5dc:	40014800 	.word	0x40014800

0800c5e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b087      	sub	sp, #28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	f023 0210 	bic.w	r2, r3, #16
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	4b34      	ldr	r3, [pc, #208]	@ (800c6dc <TIM_OC2_SetConfig+0xfc>)
 800c60c:	4013      	ands	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4313      	orrs	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f023 0320 	bic.w	r3, r3, #32
 800c62a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	011b      	lsls	r3, r3, #4
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	4313      	orrs	r3, r2
 800c636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a29      	ldr	r2, [pc, #164]	@ (800c6e0 <TIM_OC2_SetConfig+0x100>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d003      	beq.n	800c648 <TIM_OC2_SetConfig+0x68>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a28      	ldr	r2, [pc, #160]	@ (800c6e4 <TIM_OC2_SetConfig+0x104>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d10d      	bne.n	800c664 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c64e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	011b      	lsls	r3, r3, #4
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a1e      	ldr	r2, [pc, #120]	@ (800c6e0 <TIM_OC2_SetConfig+0x100>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d00f      	beq.n	800c68c <TIM_OC2_SetConfig+0xac>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e4 <TIM_OC2_SetConfig+0x104>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d00b      	beq.n	800c68c <TIM_OC2_SetConfig+0xac>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a1c      	ldr	r2, [pc, #112]	@ (800c6e8 <TIM_OC2_SetConfig+0x108>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d007      	beq.n	800c68c <TIM_OC2_SetConfig+0xac>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a1b      	ldr	r2, [pc, #108]	@ (800c6ec <TIM_OC2_SetConfig+0x10c>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_OC2_SetConfig+0xac>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a1a      	ldr	r2, [pc, #104]	@ (800c6f0 <TIM_OC2_SetConfig+0x110>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d113      	bne.n	800c6b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c69a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	621a      	str	r2, [r3, #32]
}
 800c6ce:	bf00      	nop
 800c6d0:	371c      	adds	r7, #28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	feff8fff 	.word	0xfeff8fff
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400
 800c6e8:	40014000 	.word	0x40014000
 800c6ec:	40014400 	.word	0x40014400
 800c6f0:	40014800 	.word	0x40014800

0800c6f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	4b33      	ldr	r3, [pc, #204]	@ (800c7ec <TIM_OC3_SetConfig+0xf8>)
 800c720:	4013      	ands	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	4313      	orrs	r3, r2
 800c748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a28      	ldr	r2, [pc, #160]	@ (800c7f0 <TIM_OC3_SetConfig+0xfc>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d003      	beq.n	800c75a <TIM_OC3_SetConfig+0x66>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a27      	ldr	r2, [pc, #156]	@ (800c7f4 <TIM_OC3_SetConfig+0x100>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d10d      	bne.n	800c776 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a1d      	ldr	r2, [pc, #116]	@ (800c7f0 <TIM_OC3_SetConfig+0xfc>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d00f      	beq.n	800c79e <TIM_OC3_SetConfig+0xaa>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a1c      	ldr	r2, [pc, #112]	@ (800c7f4 <TIM_OC3_SetConfig+0x100>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d00b      	beq.n	800c79e <TIM_OC3_SetConfig+0xaa>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f8 <TIM_OC3_SetConfig+0x104>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d007      	beq.n	800c79e <TIM_OC3_SetConfig+0xaa>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a1a      	ldr	r2, [pc, #104]	@ (800c7fc <TIM_OC3_SetConfig+0x108>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d003      	beq.n	800c79e <TIM_OC3_SetConfig+0xaa>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a19      	ldr	r2, [pc, #100]	@ (800c800 <TIM_OC3_SetConfig+0x10c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d113      	bne.n	800c7c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	011b      	lsls	r3, r3, #4
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	621a      	str	r2, [r3, #32]
}
 800c7e0:	bf00      	nop
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	fffeff8f 	.word	0xfffeff8f
 800c7f0:	40010000 	.word	0x40010000
 800c7f4:	40010400 	.word	0x40010400
 800c7f8:	40014000 	.word	0x40014000
 800c7fc:	40014400 	.word	0x40014400
 800c800:	40014800 	.word	0x40014800

0800c804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1b      	ldr	r3, [r3, #32]
 800c818:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	4b24      	ldr	r3, [pc, #144]	@ (800c8c0 <TIM_OC4_SetConfig+0xbc>)
 800c830:	4013      	ands	r3, r2
 800c832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	021b      	lsls	r3, r3, #8
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	4313      	orrs	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c84e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	031b      	lsls	r3, r3, #12
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	4313      	orrs	r3, r2
 800c85a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a19      	ldr	r2, [pc, #100]	@ (800c8c4 <TIM_OC4_SetConfig+0xc0>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d00f      	beq.n	800c884 <TIM_OC4_SetConfig+0x80>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a18      	ldr	r2, [pc, #96]	@ (800c8c8 <TIM_OC4_SetConfig+0xc4>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d00b      	beq.n	800c884 <TIM_OC4_SetConfig+0x80>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a17      	ldr	r2, [pc, #92]	@ (800c8cc <TIM_OC4_SetConfig+0xc8>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d007      	beq.n	800c884 <TIM_OC4_SetConfig+0x80>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a16      	ldr	r2, [pc, #88]	@ (800c8d0 <TIM_OC4_SetConfig+0xcc>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d003      	beq.n	800c884 <TIM_OC4_SetConfig+0x80>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a15      	ldr	r2, [pc, #84]	@ (800c8d4 <TIM_OC4_SetConfig+0xd0>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d109      	bne.n	800c898 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c88a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	019b      	lsls	r3, r3, #6
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	4313      	orrs	r3, r2
 800c896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	621a      	str	r2, [r3, #32]
}
 800c8b2:	bf00      	nop
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	feff8fff 	.word	0xfeff8fff
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40010400 	.word	0x40010400
 800c8cc:	40014000 	.word	0x40014000
 800c8d0:	40014400 	.word	0x40014400
 800c8d4:	40014800 	.word	0x40014800

0800c8d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4b21      	ldr	r3, [pc, #132]	@ (800c988 <TIM_OC5_SetConfig+0xb0>)
 800c904:	4013      	ands	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4313      	orrs	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c918:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	041b      	lsls	r3, r3, #16
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	4313      	orrs	r3, r2
 800c924:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a18      	ldr	r2, [pc, #96]	@ (800c98c <TIM_OC5_SetConfig+0xb4>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d00f      	beq.n	800c94e <TIM_OC5_SetConfig+0x76>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a17      	ldr	r2, [pc, #92]	@ (800c990 <TIM_OC5_SetConfig+0xb8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d00b      	beq.n	800c94e <TIM_OC5_SetConfig+0x76>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a16      	ldr	r2, [pc, #88]	@ (800c994 <TIM_OC5_SetConfig+0xbc>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d007      	beq.n	800c94e <TIM_OC5_SetConfig+0x76>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a15      	ldr	r2, [pc, #84]	@ (800c998 <TIM_OC5_SetConfig+0xc0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d003      	beq.n	800c94e <TIM_OC5_SetConfig+0x76>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a14      	ldr	r2, [pc, #80]	@ (800c99c <TIM_OC5_SetConfig+0xc4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d109      	bne.n	800c962 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	695b      	ldr	r3, [r3, #20]
 800c95a:	021b      	lsls	r3, r3, #8
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	4313      	orrs	r3, r2
 800c960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	621a      	str	r2, [r3, #32]
}
 800c97c:	bf00      	nop
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	fffeff8f 	.word	0xfffeff8f
 800c98c:	40010000 	.word	0x40010000
 800c990:	40010400 	.word	0x40010400
 800c994:	40014000 	.word	0x40014000
 800c998:	40014400 	.word	0x40014400
 800c99c:	40014800 	.word	0x40014800

0800c9a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	4b22      	ldr	r3, [pc, #136]	@ (800ca54 <TIM_OC6_SetConfig+0xb4>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	021b      	lsls	r3, r3, #8
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c9e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	051b      	lsls	r3, r3, #20
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a19      	ldr	r2, [pc, #100]	@ (800ca58 <TIM_OC6_SetConfig+0xb8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d00f      	beq.n	800ca18 <TIM_OC6_SetConfig+0x78>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a18      	ldr	r2, [pc, #96]	@ (800ca5c <TIM_OC6_SetConfig+0xbc>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00b      	beq.n	800ca18 <TIM_OC6_SetConfig+0x78>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a17      	ldr	r2, [pc, #92]	@ (800ca60 <TIM_OC6_SetConfig+0xc0>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d007      	beq.n	800ca18 <TIM_OC6_SetConfig+0x78>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a16      	ldr	r2, [pc, #88]	@ (800ca64 <TIM_OC6_SetConfig+0xc4>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d003      	beq.n	800ca18 <TIM_OC6_SetConfig+0x78>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a15      	ldr	r2, [pc, #84]	@ (800ca68 <TIM_OC6_SetConfig+0xc8>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d109      	bne.n	800ca2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	695b      	ldr	r3, [r3, #20]
 800ca24:	029b      	lsls	r3, r3, #10
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	621a      	str	r2, [r3, #32]
}
 800ca46:	bf00      	nop
 800ca48:	371c      	adds	r7, #28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	feff8fff 	.word	0xfeff8fff
 800ca58:	40010000 	.word	0x40010000
 800ca5c:	40010400 	.word	0x40010400
 800ca60:	40014000 	.word	0x40014000
 800ca64:	40014400 	.word	0x40014400
 800ca68:	40014800 	.word	0x40014800

0800ca6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	f023 0201 	bic.w	r2, r3, #1
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	011b      	lsls	r3, r3, #4
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f023 030a 	bic.w	r3, r3, #10
 800caa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	4313      	orrs	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	621a      	str	r2, [r3, #32]
}
 800cabe:	bf00      	nop
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caca:	b480      	push	{r7}
 800cacc:	b087      	sub	sp, #28
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	f023 0210 	bic.w	r2, r3, #16
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800caf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	031b      	lsls	r3, r3, #12
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cb06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	011b      	lsls	r3, r3, #4
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	621a      	str	r2, [r3, #32]
}
 800cb1e:	bf00      	nop
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	4b09      	ldr	r3, [pc, #36]	@ (800cb64 <TIM_ITRx_SetConfig+0x38>)
 800cb40:	4013      	ands	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	f043 0307 	orr.w	r3, r3, #7
 800cb4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	609a      	str	r2, [r3, #8]
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	ffcfff8f 	.word	0xffcfff8f

0800cb68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	021a      	lsls	r2, r3, #8
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	431a      	orrs	r2, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	609a      	str	r2, [r3, #8]
}
 800cb9c:	bf00      	nop
 800cb9e:	371c      	adds	r7, #28
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f003 031f 	and.w	r3, r3, #31
 800cbba:	2201      	movs	r2, #1
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6a1a      	ldr	r2, [r3, #32]
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	43db      	mvns	r3, r3
 800cbca:	401a      	ands	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6a1a      	ldr	r2, [r3, #32]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f003 031f 	and.w	r3, r3, #31
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	fa01 f303 	lsl.w	r3, r1, r3
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	621a      	str	r2, [r3, #32]
}
 800cbe6:	bf00      	nop
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d101      	bne.n	800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc08:	2302      	movs	r3, #2
 800cc0a:	e06d      	b.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a30      	ldr	r2, [pc, #192]	@ (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d004      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a2f      	ldr	r2, [pc, #188]	@ (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d108      	bne.n	800cc52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cc46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a20      	ldr	r2, [pc, #128]	@ (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d022      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc7e:	d01d      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a1d      	ldr	r2, [pc, #116]	@ (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d018      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a1c      	ldr	r2, [pc, #112]	@ (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d013      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a1a      	ldr	r2, [pc, #104]	@ (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d00e      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a15      	ldr	r2, [pc, #84]	@ (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d009      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a16      	ldr	r2, [pc, #88]	@ (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d004      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a15      	ldr	r2, [pc, #84]	@ (800cd0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d10c      	bne.n	800ccd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	40010000 	.word	0x40010000
 800ccf8:	40010400 	.word	0x40010400
 800ccfc:	40000400 	.word	0x40000400
 800cd00:	40000800 	.word	0x40000800
 800cd04:	40000c00 	.word	0x40000c00
 800cd08:	40001800 	.word	0x40001800
 800cd0c:	40014000 	.word	0x40014000

0800cd10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d101      	bne.n	800cd2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e065      	b.n	800cdf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a16      	ldr	r2, [pc, #88]	@ (800ce04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d004      	beq.n	800cdba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a14      	ldr	r2, [pc, #80]	@ (800ce08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d115      	bne.n	800cde6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc4:	051b      	lsls	r3, r3, #20
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	40010000 	.word	0x40010000
 800ce08:	40010400 	.word	0x40010400

0800ce0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e042      	b.n	800cee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7f5 fa83 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2224      	movs	r2, #36	@ 0x24
 800ce76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f022 0201 	bic.w	r2, r2, #1
 800ce88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f001 f9b6 	bl	800e204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fc4b 	bl	800d734 <UART_SetConfig>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d101      	bne.n	800cea8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	e01b      	b.n	800cee0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685a      	ldr	r2, [r3, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689a      	ldr	r2, [r3, #8]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f042 0201 	orr.w	r2, r2, #1
 800ced6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f001 fa35 	bl	800e348 <UART_CheckIdleState>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	@ 0x28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cefc:	2b20      	cmp	r3, #32
 800cefe:	d137      	bne.n	800cf70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <HAL_UART_Receive_IT+0x24>
 800cf06:	88fb      	ldrh	r3, [r7, #6]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e030      	b.n	800cf72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a18      	ldr	r2, [pc, #96]	@ (800cf7c <HAL_UART_Receive_IT+0x94>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d01f      	beq.n	800cf60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d018      	beq.n	800cf60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cf42:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4c:	623b      	str	r3, [r7, #32]
 800cf4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	69f9      	ldr	r1, [r7, #28]
 800cf52:	6a3a      	ldr	r2, [r7, #32]
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e6      	bne.n	800cf2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cf60:	88fb      	ldrh	r3, [r7, #6]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68b9      	ldr	r1, [r7, #8]
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f001 fb06 	bl	800e578 <UART_Start_Receive_IT>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	e000      	b.n	800cf72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cf70:	2302      	movs	r3, #2
  }
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3728      	adds	r7, #40	@ 0x28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	58000c00 	.word	0x58000c00

0800cf80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b0ba      	sub	sp, #232	@ 0xe8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	69db      	ldr	r3, [r3, #28]
 800cf8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cfa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cfaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cfae:	4013      	ands	r3, r2
 800cfb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cfb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d11b      	bne.n	800cff4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfc0:	f003 0320 	and.w	r3, r3, #32
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d015      	beq.n	800cff4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfcc:	f003 0320 	and.w	r3, r3, #32
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d105      	bne.n	800cfe0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d009      	beq.n	800cff4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 8377 	beq.w	800d6d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	4798      	blx	r3
      }
      return;
 800cff2:	e371      	b.n	800d6d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 8123 	beq.w	800d244 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cffe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d002:	4b8d      	ldr	r3, [pc, #564]	@ (800d238 <HAL_UART_IRQHandler+0x2b8>)
 800d004:	4013      	ands	r3, r2
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d00a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d00e:	4b8b      	ldr	r3, [pc, #556]	@ (800d23c <HAL_UART_IRQHandler+0x2bc>)
 800d010:	4013      	ands	r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 8116 	beq.w	800d244 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	d011      	beq.n	800d048 <HAL_UART_IRQHandler+0xc8>
 800d024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2201      	movs	r2, #1
 800d036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d03e:	f043 0201 	orr.w	r2, r3, #1
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d04c:	f003 0302 	and.w	r3, r3, #2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d011      	beq.n	800d078 <HAL_UART_IRQHandler+0xf8>
 800d054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00b      	beq.n	800d078 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2202      	movs	r2, #2
 800d066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d06e:	f043 0204 	orr.w	r2, r3, #4
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d07c:	f003 0304 	and.w	r3, r3, #4
 800d080:	2b00      	cmp	r3, #0
 800d082:	d011      	beq.n	800d0a8 <HAL_UART_IRQHandler+0x128>
 800d084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00b      	beq.n	800d0a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2204      	movs	r2, #4
 800d096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d09e:	f043 0202 	orr.w	r2, r3, #2
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0ac:	f003 0308 	and.w	r3, r3, #8
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0b8:	f003 0320 	and.w	r3, r3, #32
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d105      	bne.n	800d0cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d0c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0c4:	4b5c      	ldr	r3, [pc, #368]	@ (800d238 <HAL_UART_IRQHandler+0x2b8>)
 800d0c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0da:	f043 0208 	orr.w	r2, r3, #8
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d012      	beq.n	800d116 <HAL_UART_IRQHandler+0x196>
 800d0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00c      	beq.n	800d116 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d10c:	f043 0220 	orr.w	r2, r3, #32
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f000 82dd 	beq.w	800d6dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d013      	beq.n	800d156 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d132:	f003 0320 	and.w	r3, r3, #32
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d13e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d007      	beq.n	800d156 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d16a:	2b40      	cmp	r3, #64	@ 0x40
 800d16c:	d005      	beq.n	800d17a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d16e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d172:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d176:	2b00      	cmp	r3, #0
 800d178:	d054      	beq.n	800d224 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f001 fb1e 	bl	800e7bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d18a:	2b40      	cmp	r3, #64	@ 0x40
 800d18c:	d146      	bne.n	800d21c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3308      	adds	r3, #8
 800d194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d19c:	e853 3f00 	ldrex	r3, [r3]
 800d1a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d1a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d1ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d1be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d1c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d1ca:	e841 2300 	strex	r3, r2, [r1]
 800d1ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1d9      	bne.n	800d18e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d017      	beq.n	800d214 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1ea:	4a15      	ldr	r2, [pc, #84]	@ (800d240 <HAL_UART_IRQHandler+0x2c0>)
 800d1ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f6 fbeb 	bl	80039d0 <HAL_DMA_Abort_IT>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d019      	beq.n	800d234 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d20e:	4610      	mov	r0, r2
 800d210:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d212:	e00f      	b.n	800d234 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fa77 	bl	800d708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d21a:	e00b      	b.n	800d234 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fa73 	bl	800d708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d222:	e007      	b.n	800d234 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fa6f 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d232:	e253      	b.n	800d6dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d234:	bf00      	nop
    return;
 800d236:	e251      	b.n	800d6dc <HAL_UART_IRQHandler+0x75c>
 800d238:	10000001 	.word	0x10000001
 800d23c:	04000120 	.word	0x04000120
 800d240:	0800e889 	.word	0x0800e889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d248:	2b01      	cmp	r3, #1
 800d24a:	f040 81e7 	bne.w	800d61c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d252:	f003 0310 	and.w	r3, r3, #16
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 81e0 	beq.w	800d61c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d260:	f003 0310 	and.w	r3, r3, #16
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 81d9 	beq.w	800d61c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2210      	movs	r2, #16
 800d270:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d27c:	2b40      	cmp	r3, #64	@ 0x40
 800d27e:	f040 8151 	bne.w	800d524 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a96      	ldr	r2, [pc, #600]	@ (800d4e4 <HAL_UART_IRQHandler+0x564>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d068      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a93      	ldr	r2, [pc, #588]	@ (800d4e8 <HAL_UART_IRQHandler+0x568>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d061      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a91      	ldr	r2, [pc, #580]	@ (800d4ec <HAL_UART_IRQHandler+0x56c>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d05a      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a8e      	ldr	r2, [pc, #568]	@ (800d4f0 <HAL_UART_IRQHandler+0x570>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d053      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a8c      	ldr	r2, [pc, #560]	@ (800d4f4 <HAL_UART_IRQHandler+0x574>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d04c      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a89      	ldr	r2, [pc, #548]	@ (800d4f8 <HAL_UART_IRQHandler+0x578>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d045      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a87      	ldr	r2, [pc, #540]	@ (800d4fc <HAL_UART_IRQHandler+0x57c>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d03e      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a84      	ldr	r2, [pc, #528]	@ (800d500 <HAL_UART_IRQHandler+0x580>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d037      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a82      	ldr	r2, [pc, #520]	@ (800d504 <HAL_UART_IRQHandler+0x584>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d030      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a7f      	ldr	r2, [pc, #508]	@ (800d508 <HAL_UART_IRQHandler+0x588>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d029      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a7d      	ldr	r2, [pc, #500]	@ (800d50c <HAL_UART_IRQHandler+0x58c>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d022      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a7a      	ldr	r2, [pc, #488]	@ (800d510 <HAL_UART_IRQHandler+0x590>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d01b      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a78      	ldr	r2, [pc, #480]	@ (800d514 <HAL_UART_IRQHandler+0x594>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d014      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a75      	ldr	r2, [pc, #468]	@ (800d518 <HAL_UART_IRQHandler+0x598>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d00d      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a73      	ldr	r2, [pc, #460]	@ (800d51c <HAL_UART_IRQHandler+0x59c>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d006      	beq.n	800d362 <HAL_UART_IRQHandler+0x3e2>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a70      	ldr	r2, [pc, #448]	@ (800d520 <HAL_UART_IRQHandler+0x5a0>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d106      	bne.n	800d370 <HAL_UART_IRQHandler+0x3f0>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	e005      	b.n	800d37c <HAL_UART_IRQHandler+0x3fc>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 81ab 	beq.w	800d6e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d394:	429a      	cmp	r2, r3
 800d396:	f080 81a3 	bcs.w	800d6e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3aa:	69db      	ldr	r3, [r3, #28]
 800d3ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3b0:	f000 8087 	beq.w	800d4c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3c0:	e853 3f00 	ldrex	r3, [r3]
 800d3c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d3c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d3de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d3ee:	e841 2300 	strex	r3, r2, [r1]
 800d3f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1da      	bne.n	800d3b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3308      	adds	r3, #8
 800d404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d408:	e853 3f00 	ldrex	r3, [r3]
 800d40c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d40e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d410:	f023 0301 	bic.w	r3, r3, #1
 800d414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3308      	adds	r3, #8
 800d41e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d422:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d426:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d42a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d42e:	e841 2300 	strex	r3, r2, [r1]
 800d432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1e1      	bne.n	800d3fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3308      	adds	r3, #8
 800d440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d444:	e853 3f00 	ldrex	r3, [r3]
 800d448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d44a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d44c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3308      	adds	r3, #8
 800d45a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d45e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d46c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e3      	bne.n	800d43a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2220      	movs	r2, #32
 800d476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d48e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d490:	f023 0310 	bic.w	r3, r3, #16
 800d494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	461a      	mov	r2, r3
 800d49e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4aa:	e841 2300 	strex	r3, r2, [r1]
 800d4ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1e4      	bne.n	800d480 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7f5 ff69 	bl	8003394 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f91d 	bl	800d71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4e2:	e0fd      	b.n	800d6e0 <HAL_UART_IRQHandler+0x760>
 800d4e4:	40020010 	.word	0x40020010
 800d4e8:	40020028 	.word	0x40020028
 800d4ec:	40020040 	.word	0x40020040
 800d4f0:	40020058 	.word	0x40020058
 800d4f4:	40020070 	.word	0x40020070
 800d4f8:	40020088 	.word	0x40020088
 800d4fc:	400200a0 	.word	0x400200a0
 800d500:	400200b8 	.word	0x400200b8
 800d504:	40020410 	.word	0x40020410
 800d508:	40020428 	.word	0x40020428
 800d50c:	40020440 	.word	0x40020440
 800d510:	40020458 	.word	0x40020458
 800d514:	40020470 	.word	0x40020470
 800d518:	40020488 	.word	0x40020488
 800d51c:	400204a0 	.word	0x400204a0
 800d520:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d530:	b29b      	uxth	r3, r3
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d53e:	b29b      	uxth	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 80cf 	beq.w	800d6e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 80ca 	beq.w	800d6e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d558:	e853 3f00 	ldrex	r3, [r3]
 800d55c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d572:	647b      	str	r3, [r7, #68]	@ 0x44
 800d574:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e4      	bne.n	800d550 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3308      	adds	r3, #8
 800d58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	623b      	str	r3, [r7, #32]
   return(result);
 800d596:	6a3a      	ldr	r2, [r7, #32]
 800d598:	4b55      	ldr	r3, [pc, #340]	@ (800d6f0 <HAL_UART_IRQHandler+0x770>)
 800d59a:	4013      	ands	r3, r2
 800d59c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d5aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e3      	bne.n	800d586 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	e853 3f00 	ldrex	r3, [r3]
 800d5de:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f023 0310 	bic.w	r3, r3, #16
 800d5e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d5f4:	61fb      	str	r3, [r7, #28]
 800d5f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	69b9      	ldr	r1, [r7, #24]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	617b      	str	r3, [r7, #20]
   return(result);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e4      	bne.n	800d5d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d60e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f881 	bl	800d71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d61a:	e063      	b.n	800d6e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00e      	beq.n	800d646 <HAL_UART_IRQHandler+0x6c6>
 800d628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d62c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d630:	2b00      	cmp	r3, #0
 800d632:	d008      	beq.n	800d646 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d63c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f001 fe80 	bl	800f344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d644:	e051      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d014      	beq.n	800d67c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d105      	bne.n	800d66a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d008      	beq.n	800d67c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d03a      	beq.n	800d6e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	4798      	blx	r3
    }
    return;
 800d67a:	e035      	b.n	800d6e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d684:	2b00      	cmp	r3, #0
 800d686:	d009      	beq.n	800d69c <HAL_UART_IRQHandler+0x71c>
 800d688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 f90d 	bl	800e8b4 <UART_EndTransmit_IT>
    return;
 800d69a:	e026      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d009      	beq.n	800d6bc <HAL_UART_IRQHandler+0x73c>
 800d6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f001 fe59 	bl	800f36c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6ba:	e016      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d010      	beq.n	800d6ea <HAL_UART_IRQHandler+0x76a>
 800d6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	da0c      	bge.n	800d6ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f001 fe41 	bl	800f358 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6d6:	e008      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d6d8:	bf00      	nop
 800d6da:	e006      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
    return;
 800d6dc:	bf00      	nop
 800d6de:	e004      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d6e0:	bf00      	nop
 800d6e2:	e002      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <HAL_UART_IRQHandler+0x76a>
    return;
 800d6e8:	bf00      	nop
  }
}
 800d6ea:	37e8      	adds	r7, #232	@ 0xe8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	effffffe 	.word	0xeffffffe

0800d6f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d710:	bf00      	nop
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d738:	b092      	sub	sp, #72	@ 0x48
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	431a      	orrs	r2, r3
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	431a      	orrs	r2, r3
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	4313      	orrs	r3, r2
 800d75a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	4bbe      	ldr	r3, [pc, #760]	@ (800da5c <UART_SetConfig+0x328>)
 800d764:	4013      	ands	r3, r2
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	6812      	ldr	r2, [r2, #0]
 800d76a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d76c:	430b      	orrs	r3, r1
 800d76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	68da      	ldr	r2, [r3, #12]
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4ab3      	ldr	r2, [pc, #716]	@ (800da60 <UART_SetConfig+0x32c>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d004      	beq.n	800d7a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d79c:	4313      	orrs	r3, r2
 800d79e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	689a      	ldr	r2, [r3, #8]
 800d7a6:	4baf      	ldr	r3, [pc, #700]	@ (800da64 <UART_SetConfig+0x330>)
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	6812      	ldr	r2, [r2, #0]
 800d7ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7b0:	430b      	orrs	r3, r1
 800d7b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ba:	f023 010f 	bic.w	r1, r3, #15
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4aa6      	ldr	r2, [pc, #664]	@ (800da68 <UART_SetConfig+0x334>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d177      	bne.n	800d8c4 <UART_SetConfig+0x190>
 800d7d4:	4ba5      	ldr	r3, [pc, #660]	@ (800da6c <UART_SetConfig+0x338>)
 800d7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7dc:	2b28      	cmp	r3, #40	@ 0x28
 800d7de:	d86d      	bhi.n	800d8bc <UART_SetConfig+0x188>
 800d7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e8 <UART_SetConfig+0xb4>)
 800d7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e6:	bf00      	nop
 800d7e8:	0800d88d 	.word	0x0800d88d
 800d7ec:	0800d8bd 	.word	0x0800d8bd
 800d7f0:	0800d8bd 	.word	0x0800d8bd
 800d7f4:	0800d8bd 	.word	0x0800d8bd
 800d7f8:	0800d8bd 	.word	0x0800d8bd
 800d7fc:	0800d8bd 	.word	0x0800d8bd
 800d800:	0800d8bd 	.word	0x0800d8bd
 800d804:	0800d8bd 	.word	0x0800d8bd
 800d808:	0800d895 	.word	0x0800d895
 800d80c:	0800d8bd 	.word	0x0800d8bd
 800d810:	0800d8bd 	.word	0x0800d8bd
 800d814:	0800d8bd 	.word	0x0800d8bd
 800d818:	0800d8bd 	.word	0x0800d8bd
 800d81c:	0800d8bd 	.word	0x0800d8bd
 800d820:	0800d8bd 	.word	0x0800d8bd
 800d824:	0800d8bd 	.word	0x0800d8bd
 800d828:	0800d89d 	.word	0x0800d89d
 800d82c:	0800d8bd 	.word	0x0800d8bd
 800d830:	0800d8bd 	.word	0x0800d8bd
 800d834:	0800d8bd 	.word	0x0800d8bd
 800d838:	0800d8bd 	.word	0x0800d8bd
 800d83c:	0800d8bd 	.word	0x0800d8bd
 800d840:	0800d8bd 	.word	0x0800d8bd
 800d844:	0800d8bd 	.word	0x0800d8bd
 800d848:	0800d8a5 	.word	0x0800d8a5
 800d84c:	0800d8bd 	.word	0x0800d8bd
 800d850:	0800d8bd 	.word	0x0800d8bd
 800d854:	0800d8bd 	.word	0x0800d8bd
 800d858:	0800d8bd 	.word	0x0800d8bd
 800d85c:	0800d8bd 	.word	0x0800d8bd
 800d860:	0800d8bd 	.word	0x0800d8bd
 800d864:	0800d8bd 	.word	0x0800d8bd
 800d868:	0800d8ad 	.word	0x0800d8ad
 800d86c:	0800d8bd 	.word	0x0800d8bd
 800d870:	0800d8bd 	.word	0x0800d8bd
 800d874:	0800d8bd 	.word	0x0800d8bd
 800d878:	0800d8bd 	.word	0x0800d8bd
 800d87c:	0800d8bd 	.word	0x0800d8bd
 800d880:	0800d8bd 	.word	0x0800d8bd
 800d884:	0800d8bd 	.word	0x0800d8bd
 800d888:	0800d8b5 	.word	0x0800d8b5
 800d88c:	2301      	movs	r3, #1
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e222      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d894:	2304      	movs	r3, #4
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e21e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d89c:	2308      	movs	r3, #8
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e21a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e216      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d8ac:	2320      	movs	r3, #32
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e212      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d8b4:	2340      	movs	r3, #64	@ 0x40
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e20e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d8bc:	2380      	movs	r3, #128	@ 0x80
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e20a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a69      	ldr	r2, [pc, #420]	@ (800da70 <UART_SetConfig+0x33c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d130      	bne.n	800d930 <UART_SetConfig+0x1fc>
 800d8ce:	4b67      	ldr	r3, [pc, #412]	@ (800da6c <UART_SetConfig+0x338>)
 800d8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d826      	bhi.n	800d928 <UART_SetConfig+0x1f4>
 800d8da:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e0 <UART_SetConfig+0x1ac>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d8f9 	.word	0x0800d8f9
 800d8e4:	0800d901 	.word	0x0800d901
 800d8e8:	0800d909 	.word	0x0800d909
 800d8ec:	0800d911 	.word	0x0800d911
 800d8f0:	0800d919 	.word	0x0800d919
 800d8f4:	0800d921 	.word	0x0800d921
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e1ec      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d900:	2304      	movs	r3, #4
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e1e8      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d908:	2308      	movs	r3, #8
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e1e4      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d910:	2310      	movs	r3, #16
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e1e0      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d918:	2320      	movs	r3, #32
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e1dc      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d920:	2340      	movs	r3, #64	@ 0x40
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e1d8      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d928:	2380      	movs	r3, #128	@ 0x80
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e1d4      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a4f      	ldr	r2, [pc, #316]	@ (800da74 <UART_SetConfig+0x340>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d130      	bne.n	800d99c <UART_SetConfig+0x268>
 800d93a:	4b4c      	ldr	r3, [pc, #304]	@ (800da6c <UART_SetConfig+0x338>)
 800d93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d93e:	f003 0307 	and.w	r3, r3, #7
 800d942:	2b05      	cmp	r3, #5
 800d944:	d826      	bhi.n	800d994 <UART_SetConfig+0x260>
 800d946:	a201      	add	r2, pc, #4	@ (adr r2, 800d94c <UART_SetConfig+0x218>)
 800d948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94c:	0800d965 	.word	0x0800d965
 800d950:	0800d96d 	.word	0x0800d96d
 800d954:	0800d975 	.word	0x0800d975
 800d958:	0800d97d 	.word	0x0800d97d
 800d95c:	0800d985 	.word	0x0800d985
 800d960:	0800d98d 	.word	0x0800d98d
 800d964:	2300      	movs	r3, #0
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96a:	e1b6      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d96c:	2304      	movs	r3, #4
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e1b2      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d974:	2308      	movs	r3, #8
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e1ae      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d97c:	2310      	movs	r3, #16
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d982:	e1aa      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d984:	2320      	movs	r3, #32
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e1a6      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d98c:	2340      	movs	r3, #64	@ 0x40
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e1a2      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d994:	2380      	movs	r3, #128	@ 0x80
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e19e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a35      	ldr	r2, [pc, #212]	@ (800da78 <UART_SetConfig+0x344>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d130      	bne.n	800da08 <UART_SetConfig+0x2d4>
 800d9a6:	4b31      	ldr	r3, [pc, #196]	@ (800da6c <UART_SetConfig+0x338>)
 800d9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9aa:	f003 0307 	and.w	r3, r3, #7
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	d826      	bhi.n	800da00 <UART_SetConfig+0x2cc>
 800d9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b8 <UART_SetConfig+0x284>)
 800d9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b8:	0800d9d1 	.word	0x0800d9d1
 800d9bc:	0800d9d9 	.word	0x0800d9d9
 800d9c0:	0800d9e1 	.word	0x0800d9e1
 800d9c4:	0800d9e9 	.word	0x0800d9e9
 800d9c8:	0800d9f1 	.word	0x0800d9f1
 800d9cc:	0800d9f9 	.word	0x0800d9f9
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e180      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d9d8:	2304      	movs	r3, #4
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e17c      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e178      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d9e8:	2310      	movs	r3, #16
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e174      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d9f0:	2320      	movs	r3, #32
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e170      	b.n	800dcda <UART_SetConfig+0x5a6>
 800d9f8:	2340      	movs	r3, #64	@ 0x40
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e16c      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da00:	2380      	movs	r3, #128	@ 0x80
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e168      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a1b      	ldr	r2, [pc, #108]	@ (800da7c <UART_SetConfig+0x348>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d142      	bne.n	800da98 <UART_SetConfig+0x364>
 800da12:	4b16      	ldr	r3, [pc, #88]	@ (800da6c <UART_SetConfig+0x338>)
 800da14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	d838      	bhi.n	800da90 <UART_SetConfig+0x35c>
 800da1e:	a201      	add	r2, pc, #4	@ (adr r2, 800da24 <UART_SetConfig+0x2f0>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800da3d 	.word	0x0800da3d
 800da28:	0800da45 	.word	0x0800da45
 800da2c:	0800da4d 	.word	0x0800da4d
 800da30:	0800da55 	.word	0x0800da55
 800da34:	0800da81 	.word	0x0800da81
 800da38:	0800da89 	.word	0x0800da89
 800da3c:	2300      	movs	r3, #0
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e14a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da44:	2304      	movs	r3, #4
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e146      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da4c:	2308      	movs	r3, #8
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e142      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da54:	2310      	movs	r3, #16
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e13e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da5c:	cfff69f3 	.word	0xcfff69f3
 800da60:	58000c00 	.word	0x58000c00
 800da64:	11fff4ff 	.word	0x11fff4ff
 800da68:	40011000 	.word	0x40011000
 800da6c:	58024400 	.word	0x58024400
 800da70:	40004400 	.word	0x40004400
 800da74:	40004800 	.word	0x40004800
 800da78:	40004c00 	.word	0x40004c00
 800da7c:	40005000 	.word	0x40005000
 800da80:	2320      	movs	r3, #32
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e128      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da88:	2340      	movs	r3, #64	@ 0x40
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e124      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da90:	2380      	movs	r3, #128	@ 0x80
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e120      	b.n	800dcda <UART_SetConfig+0x5a6>
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4acb      	ldr	r2, [pc, #812]	@ (800ddcc <UART_SetConfig+0x698>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d176      	bne.n	800db90 <UART_SetConfig+0x45c>
 800daa2:	4bcb      	ldr	r3, [pc, #812]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800daa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800daaa:	2b28      	cmp	r3, #40	@ 0x28
 800daac:	d86c      	bhi.n	800db88 <UART_SetConfig+0x454>
 800daae:	a201      	add	r2, pc, #4	@ (adr r2, 800dab4 <UART_SetConfig+0x380>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800db59 	.word	0x0800db59
 800dab8:	0800db89 	.word	0x0800db89
 800dabc:	0800db89 	.word	0x0800db89
 800dac0:	0800db89 	.word	0x0800db89
 800dac4:	0800db89 	.word	0x0800db89
 800dac8:	0800db89 	.word	0x0800db89
 800dacc:	0800db89 	.word	0x0800db89
 800dad0:	0800db89 	.word	0x0800db89
 800dad4:	0800db61 	.word	0x0800db61
 800dad8:	0800db89 	.word	0x0800db89
 800dadc:	0800db89 	.word	0x0800db89
 800dae0:	0800db89 	.word	0x0800db89
 800dae4:	0800db89 	.word	0x0800db89
 800dae8:	0800db89 	.word	0x0800db89
 800daec:	0800db89 	.word	0x0800db89
 800daf0:	0800db89 	.word	0x0800db89
 800daf4:	0800db69 	.word	0x0800db69
 800daf8:	0800db89 	.word	0x0800db89
 800dafc:	0800db89 	.word	0x0800db89
 800db00:	0800db89 	.word	0x0800db89
 800db04:	0800db89 	.word	0x0800db89
 800db08:	0800db89 	.word	0x0800db89
 800db0c:	0800db89 	.word	0x0800db89
 800db10:	0800db89 	.word	0x0800db89
 800db14:	0800db71 	.word	0x0800db71
 800db18:	0800db89 	.word	0x0800db89
 800db1c:	0800db89 	.word	0x0800db89
 800db20:	0800db89 	.word	0x0800db89
 800db24:	0800db89 	.word	0x0800db89
 800db28:	0800db89 	.word	0x0800db89
 800db2c:	0800db89 	.word	0x0800db89
 800db30:	0800db89 	.word	0x0800db89
 800db34:	0800db79 	.word	0x0800db79
 800db38:	0800db89 	.word	0x0800db89
 800db3c:	0800db89 	.word	0x0800db89
 800db40:	0800db89 	.word	0x0800db89
 800db44:	0800db89 	.word	0x0800db89
 800db48:	0800db89 	.word	0x0800db89
 800db4c:	0800db89 	.word	0x0800db89
 800db50:	0800db89 	.word	0x0800db89
 800db54:	0800db81 	.word	0x0800db81
 800db58:	2301      	movs	r3, #1
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db5e:	e0bc      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db60:	2304      	movs	r3, #4
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db66:	e0b8      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db68:	2308      	movs	r3, #8
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6e:	e0b4      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db70:	2310      	movs	r3, #16
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db76:	e0b0      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db78:	2320      	movs	r3, #32
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7e:	e0ac      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db80:	2340      	movs	r3, #64	@ 0x40
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db86:	e0a8      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db88:	2380      	movs	r3, #128	@ 0x80
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8e:	e0a4      	b.n	800dcda <UART_SetConfig+0x5a6>
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a8f      	ldr	r2, [pc, #572]	@ (800ddd4 <UART_SetConfig+0x6a0>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d130      	bne.n	800dbfc <UART_SetConfig+0x4c8>
 800db9a:	4b8d      	ldr	r3, [pc, #564]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800db9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db9e:	f003 0307 	and.w	r3, r3, #7
 800dba2:	2b05      	cmp	r3, #5
 800dba4:	d826      	bhi.n	800dbf4 <UART_SetConfig+0x4c0>
 800dba6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbac <UART_SetConfig+0x478>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dbc5 	.word	0x0800dbc5
 800dbb0:	0800dbcd 	.word	0x0800dbcd
 800dbb4:	0800dbd5 	.word	0x0800dbd5
 800dbb8:	0800dbdd 	.word	0x0800dbdd
 800dbbc:	0800dbe5 	.word	0x0800dbe5
 800dbc0:	0800dbed 	.word	0x0800dbed
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbca:	e086      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbcc:	2304      	movs	r3, #4
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd2:	e082      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbd4:	2308      	movs	r3, #8
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbda:	e07e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbdc:	2310      	movs	r3, #16
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe2:	e07a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbe4:	2320      	movs	r3, #32
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbea:	e076      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbec:	2340      	movs	r3, #64	@ 0x40
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf2:	e072      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbf4:	2380      	movs	r3, #128	@ 0x80
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfa:	e06e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a75      	ldr	r2, [pc, #468]	@ (800ddd8 <UART_SetConfig+0x6a4>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d130      	bne.n	800dc68 <UART_SetConfig+0x534>
 800dc06:	4b72      	ldr	r3, [pc, #456]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800dc08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0a:	f003 0307 	and.w	r3, r3, #7
 800dc0e:	2b05      	cmp	r3, #5
 800dc10:	d826      	bhi.n	800dc60 <UART_SetConfig+0x52c>
 800dc12:	a201      	add	r2, pc, #4	@ (adr r2, 800dc18 <UART_SetConfig+0x4e4>)
 800dc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc18:	0800dc31 	.word	0x0800dc31
 800dc1c:	0800dc39 	.word	0x0800dc39
 800dc20:	0800dc41 	.word	0x0800dc41
 800dc24:	0800dc49 	.word	0x0800dc49
 800dc28:	0800dc51 	.word	0x0800dc51
 800dc2c:	0800dc59 	.word	0x0800dc59
 800dc30:	2300      	movs	r3, #0
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc36:	e050      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc38:	2304      	movs	r3, #4
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e04c      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc40:	2308      	movs	r3, #8
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e048      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc48:	2310      	movs	r3, #16
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4e:	e044      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc50:	2320      	movs	r3, #32
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc56:	e040      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc58:	2340      	movs	r3, #64	@ 0x40
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5e:	e03c      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc60:	2380      	movs	r3, #128	@ 0x80
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc66:	e038      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a5b      	ldr	r2, [pc, #364]	@ (800dddc <UART_SetConfig+0x6a8>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d130      	bne.n	800dcd4 <UART_SetConfig+0x5a0>
 800dc72:	4b57      	ldr	r3, [pc, #348]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800dc74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc76:	f003 0307 	and.w	r3, r3, #7
 800dc7a:	2b05      	cmp	r3, #5
 800dc7c:	d826      	bhi.n	800dccc <UART_SetConfig+0x598>
 800dc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc84 <UART_SetConfig+0x550>)
 800dc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc84:	0800dc9d 	.word	0x0800dc9d
 800dc88:	0800dca5 	.word	0x0800dca5
 800dc8c:	0800dcad 	.word	0x0800dcad
 800dc90:	0800dcb5 	.word	0x0800dcb5
 800dc94:	0800dcbd 	.word	0x0800dcbd
 800dc98:	0800dcc5 	.word	0x0800dcc5
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e01a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dca4:	2304      	movs	r3, #4
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e016      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dcac:	2308      	movs	r3, #8
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e012      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dcb4:	2310      	movs	r3, #16
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e00e      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dcbc:	2320      	movs	r3, #32
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc2:	e00a      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dcc4:	2340      	movs	r3, #64	@ 0x40
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcca:	e006      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dccc:	2380      	movs	r3, #128	@ 0x80
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd2:	e002      	b.n	800dcda <UART_SetConfig+0x5a6>
 800dcd4:	2380      	movs	r3, #128	@ 0x80
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a3f      	ldr	r2, [pc, #252]	@ (800dddc <UART_SetConfig+0x6a8>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	f040 80f8 	bne.w	800ded6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dce6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dcea:	2b20      	cmp	r3, #32
 800dcec:	dc46      	bgt.n	800dd7c <UART_SetConfig+0x648>
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	f2c0 8082 	blt.w	800ddf8 <UART_SetConfig+0x6c4>
 800dcf4:	3b02      	subs	r3, #2
 800dcf6:	2b1e      	cmp	r3, #30
 800dcf8:	d87e      	bhi.n	800ddf8 <UART_SetConfig+0x6c4>
 800dcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800dd00 <UART_SetConfig+0x5cc>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd83 	.word	0x0800dd83
 800dd04:	0800ddf9 	.word	0x0800ddf9
 800dd08:	0800dd8b 	.word	0x0800dd8b
 800dd0c:	0800ddf9 	.word	0x0800ddf9
 800dd10:	0800ddf9 	.word	0x0800ddf9
 800dd14:	0800ddf9 	.word	0x0800ddf9
 800dd18:	0800dd9b 	.word	0x0800dd9b
 800dd1c:	0800ddf9 	.word	0x0800ddf9
 800dd20:	0800ddf9 	.word	0x0800ddf9
 800dd24:	0800ddf9 	.word	0x0800ddf9
 800dd28:	0800ddf9 	.word	0x0800ddf9
 800dd2c:	0800ddf9 	.word	0x0800ddf9
 800dd30:	0800ddf9 	.word	0x0800ddf9
 800dd34:	0800ddf9 	.word	0x0800ddf9
 800dd38:	0800ddab 	.word	0x0800ddab
 800dd3c:	0800ddf9 	.word	0x0800ddf9
 800dd40:	0800ddf9 	.word	0x0800ddf9
 800dd44:	0800ddf9 	.word	0x0800ddf9
 800dd48:	0800ddf9 	.word	0x0800ddf9
 800dd4c:	0800ddf9 	.word	0x0800ddf9
 800dd50:	0800ddf9 	.word	0x0800ddf9
 800dd54:	0800ddf9 	.word	0x0800ddf9
 800dd58:	0800ddf9 	.word	0x0800ddf9
 800dd5c:	0800ddf9 	.word	0x0800ddf9
 800dd60:	0800ddf9 	.word	0x0800ddf9
 800dd64:	0800ddf9 	.word	0x0800ddf9
 800dd68:	0800ddf9 	.word	0x0800ddf9
 800dd6c:	0800ddf9 	.word	0x0800ddf9
 800dd70:	0800ddf9 	.word	0x0800ddf9
 800dd74:	0800ddf9 	.word	0x0800ddf9
 800dd78:	0800ddeb 	.word	0x0800ddeb
 800dd7c:	2b40      	cmp	r3, #64	@ 0x40
 800dd7e:	d037      	beq.n	800ddf0 <UART_SetConfig+0x6bc>
 800dd80:	e03a      	b.n	800ddf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dd82:	f7fd f92b 	bl	800afdc <HAL_RCCEx_GetD3PCLK1Freq>
 800dd86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd88:	e03c      	b.n	800de04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fd f93a 	bl	800b008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd98:	e034      	b.n	800de04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd9a:	f107 0318 	add.w	r3, r7, #24
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fd fa86 	bl	800b2b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dda8:	e02c      	b.n	800de04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddaa:	4b09      	ldr	r3, [pc, #36]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 0320 	and.w	r3, r3, #32
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d016      	beq.n	800dde4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddb6:	4b06      	ldr	r3, [pc, #24]	@ (800ddd0 <UART_SetConfig+0x69c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	08db      	lsrs	r3, r3, #3
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	4a07      	ldr	r2, [pc, #28]	@ (800dde0 <UART_SetConfig+0x6ac>)
 800ddc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddc8:	e01c      	b.n	800de04 <UART_SetConfig+0x6d0>
 800ddca:	bf00      	nop
 800ddcc:	40011400 	.word	0x40011400
 800ddd0:	58024400 	.word	0x58024400
 800ddd4:	40007800 	.word	0x40007800
 800ddd8:	40007c00 	.word	0x40007c00
 800dddc:	58000c00 	.word	0x58000c00
 800dde0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dde4:	4b9d      	ldr	r3, [pc, #628]	@ (800e05c <UART_SetConfig+0x928>)
 800dde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dde8:	e00c      	b.n	800de04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddea:	4b9d      	ldr	r3, [pc, #628]	@ (800e060 <UART_SetConfig+0x92c>)
 800ddec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddee:	e009      	b.n	800de04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddf6:	e005      	b.n	800de04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de06:	2b00      	cmp	r3, #0
 800de08:	f000 81de 	beq.w	800e1c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de10:	4a94      	ldr	r2, [pc, #592]	@ (800e064 <UART_SetConfig+0x930>)
 800de12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de16:	461a      	mov	r2, r3
 800de18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	4613      	mov	r3, r2
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	4413      	add	r3, r2
 800de2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d305      	bcc.n	800de3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de38:	429a      	cmp	r2, r3
 800de3a:	d903      	bls.n	800de44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de42:	e1c1      	b.n	800e1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de46:	2200      	movs	r2, #0
 800de48:	60bb      	str	r3, [r7, #8]
 800de4a:	60fa      	str	r2, [r7, #12]
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de50:	4a84      	ldr	r2, [pc, #528]	@ (800e064 <UART_SetConfig+0x930>)
 800de52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de56:	b29b      	uxth	r3, r3
 800de58:	2200      	movs	r2, #0
 800de5a:	603b      	str	r3, [r7, #0]
 800de5c:	607a      	str	r2, [r7, #4]
 800de5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de66:	f7f2 fc4f 	bl	8000708 <__aeabi_uldivmod>
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4610      	mov	r0, r2
 800de70:	4619      	mov	r1, r3
 800de72:	f04f 0200 	mov.w	r2, #0
 800de76:	f04f 0300 	mov.w	r3, #0
 800de7a:	020b      	lsls	r3, r1, #8
 800de7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de80:	0202      	lsls	r2, r0, #8
 800de82:	6979      	ldr	r1, [r7, #20]
 800de84:	6849      	ldr	r1, [r1, #4]
 800de86:	0849      	lsrs	r1, r1, #1
 800de88:	2000      	movs	r0, #0
 800de8a:	460c      	mov	r4, r1
 800de8c:	4605      	mov	r5, r0
 800de8e:	eb12 0804 	adds.w	r8, r2, r4
 800de92:	eb43 0905 	adc.w	r9, r3, r5
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	469a      	mov	sl, r3
 800de9e:	4693      	mov	fp, r2
 800dea0:	4652      	mov	r2, sl
 800dea2:	465b      	mov	r3, fp
 800dea4:	4640      	mov	r0, r8
 800dea6:	4649      	mov	r1, r9
 800dea8:	f7f2 fc2e 	bl	8000708 <__aeabi_uldivmod>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4613      	mov	r3, r2
 800deb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800deb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800deba:	d308      	bcc.n	800dece <UART_SetConfig+0x79a>
 800debc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800debe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dec2:	d204      	bcs.n	800dece <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800deca:	60da      	str	r2, [r3, #12]
 800decc:	e17c      	b.n	800e1c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ded4:	e178      	b.n	800e1c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	69db      	ldr	r3, [r3, #28]
 800deda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dede:	f040 80c5 	bne.w	800e06c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dee2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	dc48      	bgt.n	800df7c <UART_SetConfig+0x848>
 800deea:	2b00      	cmp	r3, #0
 800deec:	db7b      	blt.n	800dfe6 <UART_SetConfig+0x8b2>
 800deee:	2b20      	cmp	r3, #32
 800def0:	d879      	bhi.n	800dfe6 <UART_SetConfig+0x8b2>
 800def2:	a201      	add	r2, pc, #4	@ (adr r2, 800def8 <UART_SetConfig+0x7c4>)
 800def4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def8:	0800df83 	.word	0x0800df83
 800defc:	0800df8b 	.word	0x0800df8b
 800df00:	0800dfe7 	.word	0x0800dfe7
 800df04:	0800dfe7 	.word	0x0800dfe7
 800df08:	0800df93 	.word	0x0800df93
 800df0c:	0800dfe7 	.word	0x0800dfe7
 800df10:	0800dfe7 	.word	0x0800dfe7
 800df14:	0800dfe7 	.word	0x0800dfe7
 800df18:	0800dfa3 	.word	0x0800dfa3
 800df1c:	0800dfe7 	.word	0x0800dfe7
 800df20:	0800dfe7 	.word	0x0800dfe7
 800df24:	0800dfe7 	.word	0x0800dfe7
 800df28:	0800dfe7 	.word	0x0800dfe7
 800df2c:	0800dfe7 	.word	0x0800dfe7
 800df30:	0800dfe7 	.word	0x0800dfe7
 800df34:	0800dfe7 	.word	0x0800dfe7
 800df38:	0800dfb3 	.word	0x0800dfb3
 800df3c:	0800dfe7 	.word	0x0800dfe7
 800df40:	0800dfe7 	.word	0x0800dfe7
 800df44:	0800dfe7 	.word	0x0800dfe7
 800df48:	0800dfe7 	.word	0x0800dfe7
 800df4c:	0800dfe7 	.word	0x0800dfe7
 800df50:	0800dfe7 	.word	0x0800dfe7
 800df54:	0800dfe7 	.word	0x0800dfe7
 800df58:	0800dfe7 	.word	0x0800dfe7
 800df5c:	0800dfe7 	.word	0x0800dfe7
 800df60:	0800dfe7 	.word	0x0800dfe7
 800df64:	0800dfe7 	.word	0x0800dfe7
 800df68:	0800dfe7 	.word	0x0800dfe7
 800df6c:	0800dfe7 	.word	0x0800dfe7
 800df70:	0800dfe7 	.word	0x0800dfe7
 800df74:	0800dfe7 	.word	0x0800dfe7
 800df78:	0800dfd9 	.word	0x0800dfd9
 800df7c:	2b40      	cmp	r3, #64	@ 0x40
 800df7e:	d02e      	beq.n	800dfde <UART_SetConfig+0x8aa>
 800df80:	e031      	b.n	800dfe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df82:	f7fb fdb3 	bl	8009aec <HAL_RCC_GetPCLK1Freq>
 800df86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df88:	e033      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df8a:	f7fb fdc5 	bl	8009b18 <HAL_RCC_GetPCLK2Freq>
 800df8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df90:	e02f      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd f836 	bl	800b008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfa0:	e027      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfa2:	f107 0318 	add.w	r3, r7, #24
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fd f982 	bl	800b2b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfb0:	e01f      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfb2:	4b2d      	ldr	r3, [pc, #180]	@ (800e068 <UART_SetConfig+0x934>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 0320 	and.w	r3, r3, #32
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d009      	beq.n	800dfd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfbe:	4b2a      	ldr	r3, [pc, #168]	@ (800e068 <UART_SetConfig+0x934>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	08db      	lsrs	r3, r3, #3
 800dfc4:	f003 0303 	and.w	r3, r3, #3
 800dfc8:	4a24      	ldr	r2, [pc, #144]	@ (800e05c <UART_SetConfig+0x928>)
 800dfca:	fa22 f303 	lsr.w	r3, r2, r3
 800dfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfd0:	e00f      	b.n	800dff2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dfd2:	4b22      	ldr	r3, [pc, #136]	@ (800e05c <UART_SetConfig+0x928>)
 800dfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfd6:	e00c      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfd8:	4b21      	ldr	r3, [pc, #132]	@ (800e060 <UART_SetConfig+0x92c>)
 800dfda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfdc:	e009      	b.n	800dff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe4:	e005      	b.n	800dff2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 80e7 	beq.w	800e1c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dffe:	4a19      	ldr	r2, [pc, #100]	@ (800e064 <UART_SetConfig+0x930>)
 800e000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e004:	461a      	mov	r2, r3
 800e006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e008:	fbb3 f3f2 	udiv	r3, r3, r2
 800e00c:	005a      	lsls	r2, r3, #1
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	085b      	lsrs	r3, r3, #1
 800e014:	441a      	add	r2, r3
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e022:	2b0f      	cmp	r3, #15
 800e024:	d916      	bls.n	800e054 <UART_SetConfig+0x920>
 800e026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e02c:	d212      	bcs.n	800e054 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e030:	b29b      	uxth	r3, r3
 800e032:	f023 030f 	bic.w	r3, r3, #15
 800e036:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03a:	085b      	lsrs	r3, r3, #1
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	b29a      	uxth	r2, r3
 800e044:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e046:	4313      	orrs	r3, r2
 800e048:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e050:	60da      	str	r2, [r3, #12]
 800e052:	e0b9      	b.n	800e1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e05a:	e0b5      	b.n	800e1c8 <UART_SetConfig+0xa94>
 800e05c:	03d09000 	.word	0x03d09000
 800e060:	003d0900 	.word	0x003d0900
 800e064:	0801a2e8 	.word	0x0801a2e8
 800e068:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e06c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e070:	2b20      	cmp	r3, #32
 800e072:	dc49      	bgt.n	800e108 <UART_SetConfig+0x9d4>
 800e074:	2b00      	cmp	r3, #0
 800e076:	db7c      	blt.n	800e172 <UART_SetConfig+0xa3e>
 800e078:	2b20      	cmp	r3, #32
 800e07a:	d87a      	bhi.n	800e172 <UART_SetConfig+0xa3e>
 800e07c:	a201      	add	r2, pc, #4	@ (adr r2, 800e084 <UART_SetConfig+0x950>)
 800e07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e082:	bf00      	nop
 800e084:	0800e10f 	.word	0x0800e10f
 800e088:	0800e117 	.word	0x0800e117
 800e08c:	0800e173 	.word	0x0800e173
 800e090:	0800e173 	.word	0x0800e173
 800e094:	0800e11f 	.word	0x0800e11f
 800e098:	0800e173 	.word	0x0800e173
 800e09c:	0800e173 	.word	0x0800e173
 800e0a0:	0800e173 	.word	0x0800e173
 800e0a4:	0800e12f 	.word	0x0800e12f
 800e0a8:	0800e173 	.word	0x0800e173
 800e0ac:	0800e173 	.word	0x0800e173
 800e0b0:	0800e173 	.word	0x0800e173
 800e0b4:	0800e173 	.word	0x0800e173
 800e0b8:	0800e173 	.word	0x0800e173
 800e0bc:	0800e173 	.word	0x0800e173
 800e0c0:	0800e173 	.word	0x0800e173
 800e0c4:	0800e13f 	.word	0x0800e13f
 800e0c8:	0800e173 	.word	0x0800e173
 800e0cc:	0800e173 	.word	0x0800e173
 800e0d0:	0800e173 	.word	0x0800e173
 800e0d4:	0800e173 	.word	0x0800e173
 800e0d8:	0800e173 	.word	0x0800e173
 800e0dc:	0800e173 	.word	0x0800e173
 800e0e0:	0800e173 	.word	0x0800e173
 800e0e4:	0800e173 	.word	0x0800e173
 800e0e8:	0800e173 	.word	0x0800e173
 800e0ec:	0800e173 	.word	0x0800e173
 800e0f0:	0800e173 	.word	0x0800e173
 800e0f4:	0800e173 	.word	0x0800e173
 800e0f8:	0800e173 	.word	0x0800e173
 800e0fc:	0800e173 	.word	0x0800e173
 800e100:	0800e173 	.word	0x0800e173
 800e104:	0800e165 	.word	0x0800e165
 800e108:	2b40      	cmp	r3, #64	@ 0x40
 800e10a:	d02e      	beq.n	800e16a <UART_SetConfig+0xa36>
 800e10c:	e031      	b.n	800e172 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e10e:	f7fb fced 	bl	8009aec <HAL_RCC_GetPCLK1Freq>
 800e112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e114:	e033      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e116:	f7fb fcff 	bl	8009b18 <HAL_RCC_GetPCLK2Freq>
 800e11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e11c:	e02f      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e11e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e122:	4618      	mov	r0, r3
 800e124:	f7fc ff70 	bl	800b008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e12c:	e027      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e12e:	f107 0318 	add.w	r3, r7, #24
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd f8bc 	bl	800b2b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e13c:	e01f      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e13e:	4b2d      	ldr	r3, [pc, #180]	@ (800e1f4 <UART_SetConfig+0xac0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b00      	cmp	r3, #0
 800e148:	d009      	beq.n	800e15e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e14a:	4b2a      	ldr	r3, [pc, #168]	@ (800e1f4 <UART_SetConfig+0xac0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	08db      	lsrs	r3, r3, #3
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	4a28      	ldr	r2, [pc, #160]	@ (800e1f8 <UART_SetConfig+0xac4>)
 800e156:	fa22 f303 	lsr.w	r3, r2, r3
 800e15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e15c:	e00f      	b.n	800e17e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e15e:	4b26      	ldr	r3, [pc, #152]	@ (800e1f8 <UART_SetConfig+0xac4>)
 800e160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e162:	e00c      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e164:	4b25      	ldr	r3, [pc, #148]	@ (800e1fc <UART_SetConfig+0xac8>)
 800e166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e168:	e009      	b.n	800e17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e170:	e005      	b.n	800e17e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e17c:	bf00      	nop
    }

    if (pclk != 0U)
 800e17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d021      	beq.n	800e1c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e188:	4a1d      	ldr	r2, [pc, #116]	@ (800e200 <UART_SetConfig+0xacc>)
 800e18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e18e:	461a      	mov	r2, r3
 800e190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e192:	fbb3 f2f2 	udiv	r2, r3, r2
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	085b      	lsrs	r3, r3, #1
 800e19c:	441a      	add	r2, r3
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1aa:	2b0f      	cmp	r3, #15
 800e1ac:	d909      	bls.n	800e1c2 <UART_SetConfig+0xa8e>
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1b4:	d205      	bcs.n	800e1c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	60da      	str	r2, [r3, #12]
 800e1c0:	e002      	b.n	800e1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e1e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3748      	adds	r7, #72	@ 0x48
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1f2:	bf00      	nop
 800e1f4:	58024400 	.word	0x58024400
 800e1f8:	03d09000 	.word	0x03d09000
 800e1fc:	003d0900 	.word	0x003d0900
 800e200:	0801a2e8 	.word	0x0801a2e8

0800e204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e210:	f003 0308 	and.w	r3, r3, #8
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00a      	beq.n	800e22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	430a      	orrs	r2, r1
 800e22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00a      	beq.n	800e250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	430a      	orrs	r2, r1
 800e24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00a      	beq.n	800e272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	430a      	orrs	r2, r1
 800e270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00a      	beq.n	800e294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	430a      	orrs	r2, r1
 800e292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e298:	f003 0310 	and.w	r3, r3, #16
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00a      	beq.n	800e2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ba:	f003 0320 	and.w	r3, r3, #32
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00a      	beq.n	800e2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	430a      	orrs	r2, r1
 800e2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01a      	beq.n	800e31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	430a      	orrs	r2, r1
 800e2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e302:	d10a      	bne.n	800e31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	430a      	orrs	r2, r1
 800e318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	430a      	orrs	r2, r1
 800e33a:	605a      	str	r2, [r3, #4]
  }
}
 800e33c:	bf00      	nop
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b098      	sub	sp, #96	@ 0x60
 800e34c:	af02      	add	r7, sp, #8
 800e34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e358:	f7f4 fb2c 	bl	80029b4 <HAL_GetTick>
 800e35c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f003 0308 	and.w	r3, r3, #8
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d12f      	bne.n	800e3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e36c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e374:	2200      	movs	r2, #0
 800e376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f88e 	bl	800e49c <UART_WaitOnFlagUntilTimeout>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d022      	beq.n	800e3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e6      	bne.n	800e386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2220      	movs	r2, #32
 800e3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	e063      	b.n	800e494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f003 0304 	and.w	r3, r3, #4
 800e3d6:	2b04      	cmp	r3, #4
 800e3d8:	d149      	bne.n	800e46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f857 	bl	800e49c <UART_WaitOnFlagUntilTimeout>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d03c      	beq.n	800e46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	623b      	str	r3, [r7, #32]
   return(result);
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e412:	633b      	str	r3, [r7, #48]	@ 0x30
 800e414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e6      	bne.n	800e3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3308      	adds	r3, #8
 800e42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	60fb      	str	r3, [r7, #12]
   return(result);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f023 0301 	bic.w	r3, r3, #1
 800e43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e446:	61fa      	str	r2, [r7, #28]
 800e448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	69b9      	ldr	r1, [r7, #24]
 800e44c:	69fa      	ldr	r2, [r7, #28]
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	617b      	str	r3, [r7, #20]
   return(result);
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e5      	bne.n	800e426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e012      	b.n	800e494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2220      	movs	r2, #32
 800e472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2220      	movs	r2, #32
 800e47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2200      	movs	r2, #0
 800e488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3758      	adds	r7, #88	@ 0x58
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	603b      	str	r3, [r7, #0]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4ac:	e04f      	b.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d04b      	beq.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4b6:	f7f4 fa7d 	bl	80029b4 <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	69ba      	ldr	r2, [r7, #24]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d302      	bcc.n	800e4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	e04e      	b.n	800e56e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f003 0304 	and.w	r3, r3, #4
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d037      	beq.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b80      	cmp	r3, #128	@ 0x80
 800e4e2:	d034      	beq.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2b40      	cmp	r3, #64	@ 0x40
 800e4e8:	d031      	beq.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	69db      	ldr	r3, [r3, #28]
 800e4f0:	f003 0308 	and.w	r3, r3, #8
 800e4f4:	2b08      	cmp	r3, #8
 800e4f6:	d110      	bne.n	800e51a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f000 f95b 	bl	800e7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2208      	movs	r2, #8
 800e50a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e029      	b.n	800e56e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	69db      	ldr	r3, [r3, #28]
 800e520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e528:	d111      	bne.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f000 f941 	bl	800e7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2220      	movs	r2, #32
 800e53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	e00f      	b.n	800e56e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69da      	ldr	r2, [r3, #28]
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	4013      	ands	r3, r2
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	bf0c      	ite	eq
 800e55e:	2301      	moveq	r3, #1
 800e560:	2300      	movne	r3, #0
 800e562:	b2db      	uxtb	r3, r3
 800e564:	461a      	mov	r2, r3
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d0a0      	beq.n	800e4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e578:	b480      	push	{r7}
 800e57a:	b0a3      	sub	sp, #140	@ 0x8c
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	88fa      	ldrh	r2, [r7, #6]
 800e590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	88fa      	ldrh	r2, [r7, #6]
 800e598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5aa:	d10e      	bne.n	800e5ca <UART_Start_Receive_IT+0x52>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d105      	bne.n	800e5c0 <UART_Start_Receive_IT+0x48>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e5be:	e02d      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	22ff      	movs	r2, #255	@ 0xff
 800e5c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e5c8:	e028      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10d      	bne.n	800e5ee <UART_Start_Receive_IT+0x76>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d104      	bne.n	800e5e4 <UART_Start_Receive_IT+0x6c>
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	22ff      	movs	r2, #255	@ 0xff
 800e5de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e5e2:	e01b      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	227f      	movs	r2, #127	@ 0x7f
 800e5e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e5ec:	e016      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5f6:	d10d      	bne.n	800e614 <UART_Start_Receive_IT+0x9c>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <UART_Start_Receive_IT+0x92>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	227f      	movs	r2, #127	@ 0x7f
 800e604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e608:	e008      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	223f      	movs	r2, #63	@ 0x3f
 800e60e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e612:	e003      	b.n	800e61c <UART_Start_Receive_IT+0xa4>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2222      	movs	r2, #34	@ 0x22
 800e628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	3308      	adds	r3, #8
 800e632:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e636:	e853 3f00 	ldrex	r3, [r3]
 800e63a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e63c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e63e:	f043 0301 	orr.w	r3, r3, #1
 800e642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3308      	adds	r3, #8
 800e64c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e650:	673a      	str	r2, [r7, #112]	@ 0x70
 800e652:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e654:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e656:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e658:	e841 2300 	strex	r3, r2, [r1]
 800e65c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e65e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e3      	bne.n	800e62c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e66c:	d14f      	bne.n	800e70e <UART_Start_Receive_IT+0x196>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e674:	88fa      	ldrh	r2, [r7, #6]
 800e676:	429a      	cmp	r2, r3
 800e678:	d349      	bcc.n	800e70e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e682:	d107      	bne.n	800e694 <UART_Start_Receive_IT+0x11c>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d103      	bne.n	800e694 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	4a47      	ldr	r2, [pc, #284]	@ (800e7ac <UART_Start_Receive_IT+0x234>)
 800e690:	675a      	str	r2, [r3, #116]	@ 0x74
 800e692:	e002      	b.n	800e69a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	4a46      	ldr	r2, [pc, #280]	@ (800e7b0 <UART_Start_Receive_IT+0x238>)
 800e698:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d01a      	beq.n	800e6d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6aa:	e853 3f00 	ldrex	r3, [r3]
 800e6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e6b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e6c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e6ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6cc:	e841 2300 	strex	r3, r2, [r1]
 800e6d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e4      	bne.n	800e6a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6e2:	e853 3f00 	ldrex	r3, [r3]
 800e6e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e6f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e6fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e6fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e700:	e841 2300 	strex	r3, r2, [r1]
 800e704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1e5      	bne.n	800e6d8 <UART_Start_Receive_IT+0x160>
 800e70c:	e046      	b.n	800e79c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e716:	d107      	bne.n	800e728 <UART_Start_Receive_IT+0x1b0>
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d103      	bne.n	800e728 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4a24      	ldr	r2, [pc, #144]	@ (800e7b4 <UART_Start_Receive_IT+0x23c>)
 800e724:	675a      	str	r2, [r3, #116]	@ 0x74
 800e726:	e002      	b.n	800e72e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	4a23      	ldr	r2, [pc, #140]	@ (800e7b8 <UART_Start_Receive_IT+0x240>)
 800e72c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d019      	beq.n	800e76a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e746:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e74a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	461a      	mov	r2, r3
 800e752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e754:	637b      	str	r3, [r7, #52]	@ 0x34
 800e756:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e758:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e75a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e75c:	e841 2300 	strex	r3, r2, [r1]
 800e760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1e6      	bne.n	800e736 <UART_Start_Receive_IT+0x1be>
 800e768:	e018      	b.n	800e79c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	e853 3f00 	ldrex	r3, [r3]
 800e776:	613b      	str	r3, [r7, #16]
   return(result);
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	f043 0320 	orr.w	r3, r3, #32
 800e77e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e788:	623b      	str	r3, [r7, #32]
 800e78a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78c:	69f9      	ldr	r1, [r7, #28]
 800e78e:	6a3a      	ldr	r2, [r7, #32]
 800e790:	e841 2300 	strex	r3, r2, [r1]
 800e794:	61bb      	str	r3, [r7, #24]
   return(result);
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1e6      	bne.n	800e76a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	378c      	adds	r7, #140	@ 0x8c
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	0800efdd 	.word	0x0800efdd
 800e7b0:	0800ec7d 	.word	0x0800ec7d
 800e7b4:	0800eac5 	.word	0x0800eac5
 800e7b8:	0800e90d 	.word	0x0800e90d

0800e7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b095      	sub	sp, #84	@ 0x54
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e7e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e7e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e6      	bne.n	800e7c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	61fb      	str	r3, [r7, #28]
   return(result);
 800e806:	69fa      	ldr	r2, [r7, #28]
 800e808:	4b1e      	ldr	r3, [pc, #120]	@ (800e884 <UART_EndRxTransfer+0xc8>)
 800e80a:	4013      	ands	r3, r2
 800e80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e5      	bne.n	800e7f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d118      	bne.n	800e864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	e853 3f00 	ldrex	r3, [r3]
 800e83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f023 0310 	bic.w	r3, r3, #16
 800e846:	647b      	str	r3, [r7, #68]	@ 0x44
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e850:	61bb      	str	r3, [r7, #24]
 800e852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e854:	6979      	ldr	r1, [r7, #20]
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	e841 2300 	strex	r3, r2, [r1]
 800e85c:	613b      	str	r3, [r7, #16]
   return(result);
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1e6      	bne.n	800e832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2220      	movs	r2, #32
 800e868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e878:	bf00      	nop
 800e87a:	3754      	adds	r7, #84	@ 0x54
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	effffffe 	.word	0xeffffffe

0800e888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f7fe ff2e 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ac:	bf00      	nop
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	e853 3f00 	ldrex	r3, [r3]
 800e8c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8d0:	61fb      	str	r3, [r7, #28]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	61bb      	str	r3, [r7, #24]
 800e8dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8de:	6979      	ldr	r1, [r7, #20]
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	e841 2300 	strex	r3, r2, [r1]
 800e8e6:	613b      	str	r3, [r7, #16]
   return(result);
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1e6      	bne.n	800e8bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2220      	movs	r2, #32
 800e8f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7fe fef9 	bl	800d6f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e902:	bf00      	nop
 800e904:	3720      	adds	r7, #32
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b09c      	sub	sp, #112	@ 0x70
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e91a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e924:	2b22      	cmp	r3, #34	@ 0x22
 800e926:	f040 80be 	bne.w	800eaa6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e930:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e934:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e938:	b2d9      	uxtb	r1, r3
 800e93a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e944:	400a      	ands	r2, r1
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e94e:	1c5a      	adds	r2, r3, #1
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	3b01      	subs	r3, #1
 800e95e:	b29a      	uxth	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f040 80a1 	bne.w	800eab6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e992:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e99a:	e841 2300 	strex	r3, r2, [r1]
 800e99e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e6      	bne.n	800e974 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9b8:	f023 0301 	bic.w	r3, r3, #1
 800e9bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e9c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e9c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9ce:	e841 2300 	strex	r3, r2, [r1]
 800e9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e5      	bne.n	800e9a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a33      	ldr	r2, [pc, #204]	@ (800eac0 <UART_RxISR_8BIT+0x1b4>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d01f      	beq.n	800ea38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d018      	beq.n	800ea38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0e:	e853 3f00 	ldrex	r3, [r3]
 800ea12:	623b      	str	r3, [r7, #32]
   return(result);
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ea1a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	461a      	mov	r2, r3
 800ea22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2c:	e841 2300 	strex	r3, r2, [r1]
 800ea30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1e6      	bne.n	800ea06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d12e      	bne.n	800ea9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	e853 3f00 	ldrex	r3, [r3]
 800ea52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f023 0310 	bic.w	r3, r3, #16
 800ea5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea64:	61fb      	str	r3, [r7, #28]
 800ea66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea68:	69b9      	ldr	r1, [r7, #24]
 800ea6a:	69fa      	ldr	r2, [r7, #28]
 800ea6c:	e841 2300 	strex	r3, r2, [r1]
 800ea70:	617b      	str	r3, [r7, #20]
   return(result);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e6      	bne.n	800ea46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	f003 0310 	and.w	r3, r3, #16
 800ea82:	2b10      	cmp	r3, #16
 800ea84:	d103      	bne.n	800ea8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2210      	movs	r2, #16
 800ea8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7fe fe40 	bl	800d71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea9c:	e00b      	b.n	800eab6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7f2 feca 	bl	8001838 <HAL_UART_RxCpltCallback>
}
 800eaa4:	e007      	b.n	800eab6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	699a      	ldr	r2, [r3, #24]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f042 0208 	orr.w	r2, r2, #8
 800eab4:	619a      	str	r2, [r3, #24]
}
 800eab6:	bf00      	nop
 800eab8:	3770      	adds	r7, #112	@ 0x70
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	58000c00 	.word	0x58000c00

0800eac4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b09c      	sub	sp, #112	@ 0x70
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ead2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eadc:	2b22      	cmp	r3, #34	@ 0x22
 800eade:	f040 80be 	bne.w	800ec5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eae8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eaf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800eaf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800eaf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800eafa:	4013      	ands	r3, r2
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb06:	1c9a      	adds	r2, r3, #2
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	3b01      	subs	r3, #1
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f040 80a1 	bne.w	800ec6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb34:	e853 3f00 	ldrex	r3, [r3]
 800eb38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eb3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb40:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb52:	e841 2300 	strex	r3, r2, [r1]
 800eb56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eb58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1e6      	bne.n	800eb2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3308      	adds	r3, #8
 800eb64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb68:	e853 3f00 	ldrex	r3, [r3]
 800eb6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	f023 0301 	bic.w	r3, r3, #1
 800eb74:	663b      	str	r3, [r7, #96]	@ 0x60
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eb7e:	643a      	str	r2, [r7, #64]	@ 0x40
 800eb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb86:	e841 2300 	strex	r3, r2, [r1]
 800eb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1e5      	bne.n	800eb5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2220      	movs	r2, #32
 800eb96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a33      	ldr	r2, [pc, #204]	@ (800ec78 <UART_RxISR_16BIT+0x1b4>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d01f      	beq.n	800ebf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d018      	beq.n	800ebf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	e853 3f00 	ldrex	r3, [r3]
 800ebca:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ebd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ebe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ebea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e6      	bne.n	800ebbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d12e      	bne.n	800ec56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	e853 3f00 	ldrex	r3, [r3]
 800ec0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	f023 0310 	bic.w	r3, r3, #16
 800ec12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec1c:	61bb      	str	r3, [r7, #24]
 800ec1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec20:	6979      	ldr	r1, [r7, #20]
 800ec22:	69ba      	ldr	r2, [r7, #24]
 800ec24:	e841 2300 	strex	r3, r2, [r1]
 800ec28:	613b      	str	r3, [r7, #16]
   return(result);
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1e6      	bne.n	800ebfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	69db      	ldr	r3, [r3, #28]
 800ec36:	f003 0310 	and.w	r3, r3, #16
 800ec3a:	2b10      	cmp	r3, #16
 800ec3c:	d103      	bne.n	800ec46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2210      	movs	r2, #16
 800ec44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fe fd64 	bl	800d71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec54:	e00b      	b.n	800ec6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7f2 fdee 	bl	8001838 <HAL_UART_RxCpltCallback>
}
 800ec5c:	e007      	b.n	800ec6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	699a      	ldr	r2, [r3, #24]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f042 0208 	orr.w	r2, r2, #8
 800ec6c:	619a      	str	r2, [r3, #24]
}
 800ec6e:	bf00      	nop
 800ec70:	3770      	adds	r7, #112	@ 0x70
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	58000c00 	.word	0x58000c00

0800ec7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b0ac      	sub	sp, #176	@ 0xb0
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	69db      	ldr	r3, [r3, #28]
 800ec94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecb2:	2b22      	cmp	r3, #34	@ 0x22
 800ecb4:	f040 8180 	bne.w	800efb8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ecbe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ecc2:	e123      	b.n	800ef0c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ecce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ecd2:	b2d9      	uxtb	r1, r3
 800ecd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecde:	400a      	ands	r2, r1
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ece8:	1c5a      	adds	r2, r3, #1
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	69db      	ldr	r3, [r3, #28]
 800ed06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ed0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed0e:	f003 0307 	and.w	r3, r3, #7
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d053      	beq.n	800edbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d011      	beq.n	800ed46 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ed22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00b      	beq.n	800ed46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2201      	movs	r2, #1
 800ed34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed3c:	f043 0201 	orr.w	r2, r3, #1
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed4a:	f003 0302 	and.w	r3, r3, #2
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d011      	beq.n	800ed76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ed52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00b      	beq.n	800ed76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2202      	movs	r2, #2
 800ed64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed6c:	f043 0204 	orr.w	r2, r3, #4
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed7a:	f003 0304 	and.w	r3, r3, #4
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d011      	beq.n	800eda6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ed82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed86:	f003 0301 	and.w	r3, r3, #1
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2204      	movs	r2, #4
 800ed94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed9c:	f043 0202 	orr.w	r2, r3, #2
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7fe fca9 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f040 80a0 	bne.w	800ef0c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800edd4:	e853 3f00 	ldrex	r3, [r3]
 800edd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800edda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ede0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	461a      	mov	r2, r3
 800edea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800edf0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800edf4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800edf6:	e841 2300 	strex	r3, r2, [r1]
 800edfa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800edfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1e4      	bne.n	800edcc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee0c:	e853 3f00 	ldrex	r3, [r3]
 800ee10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ee12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee14:	4b6e      	ldr	r3, [pc, #440]	@ (800efd0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ee16:	4013      	ands	r3, r2
 800ee18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3308      	adds	r3, #8
 800ee22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ee26:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ee28:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ee2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ee2e:	e841 2300 	strex	r3, r2, [r1]
 800ee32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ee34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1e3      	bne.n	800ee02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a60      	ldr	r2, [pc, #384]	@ (800efd4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d021      	beq.n	800ee9c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d01a      	beq.n	800ee9c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee6e:	e853 3f00 	ldrex	r3, [r3]
 800ee72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ee74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	461a      	mov	r2, r3
 800ee84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee88:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee8a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee90:	e841 2300 	strex	r3, r2, [r1]
 800ee94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ee96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1e4      	bne.n	800ee66 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d130      	bne.n	800ef06 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb2:	e853 3f00 	ldrex	r3, [r3]
 800eeb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	f023 0310 	bic.w	r3, r3, #16
 800eebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eecc:	643b      	str	r3, [r7, #64]	@ 0x40
 800eece:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eed4:	e841 2300 	strex	r3, r2, [r1]
 800eed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d1e4      	bne.n	800eeaa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	f003 0310 	and.w	r3, r3, #16
 800eeea:	2b10      	cmp	r3, #16
 800eeec:	d103      	bne.n	800eef6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2210      	movs	r2, #16
 800eef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eefc:	4619      	mov	r1, r3
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7fe fc0c 	bl	800d71c <HAL_UARTEx_RxEventCallback>
 800ef04:	e002      	b.n	800ef0c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7f2 fc96 	bl	8001838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef0c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ef14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef18:	f003 0320 	and.w	r3, r3, #32
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f47f aed1 	bne.w	800ecc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ef2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d049      	beq.n	800efc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef3a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d242      	bcs.n	800efc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3308      	adds	r3, #8
 800ef48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	e853 3f00 	ldrex	r3, [r3]
 800ef50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ef58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3308      	adds	r3, #8
 800ef62:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ef66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef6e:	e841 2300 	strex	r3, r2, [r1]
 800ef72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1e3      	bne.n	800ef42 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a16      	ldr	r2, [pc, #88]	@ (800efd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ef7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	f043 0320 	orr.w	r3, r3, #32
 800ef94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800efa2:	61bb      	str	r3, [r7, #24]
 800efa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa6:	6979      	ldr	r1, [r7, #20]
 800efa8:	69ba      	ldr	r2, [r7, #24]
 800efaa:	e841 2300 	strex	r3, r2, [r1]
 800efae:	613b      	str	r3, [r7, #16]
   return(result);
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1e4      	bne.n	800ef80 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efb6:	e007      	b.n	800efc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	699a      	ldr	r2, [r3, #24]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f042 0208 	orr.w	r2, r2, #8
 800efc6:	619a      	str	r2, [r3, #24]
}
 800efc8:	bf00      	nop
 800efca:	37b0      	adds	r7, #176	@ 0xb0
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	effffffe 	.word	0xeffffffe
 800efd4:	58000c00 	.word	0x58000c00
 800efd8:	0800e90d 	.word	0x0800e90d

0800efdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b0ae      	sub	sp, #184	@ 0xb8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	69db      	ldr	r3, [r3, #28]
 800eff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f012:	2b22      	cmp	r3, #34	@ 0x22
 800f014:	f040 8184 	bne.w	800f320 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f01e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f022:	e127      	b.n	800f274 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f036:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f03a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f03e:	4013      	ands	r3, r2
 800f040:	b29a      	uxth	r2, r3
 800f042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f046:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f04c:	1c9a      	adds	r2, r3, #2
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f058:	b29b      	uxth	r3, r3
 800f05a:	3b01      	subs	r3, #1
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	69db      	ldr	r3, [r3, #28]
 800f06a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f06e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b00      	cmp	r3, #0
 800f078:	d053      	beq.n	800f122 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b00      	cmp	r3, #0
 800f084:	d011      	beq.n	800f0aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800f086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f08a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00b      	beq.n	800f0aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2201      	movs	r2, #1
 800f098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0a0:	f043 0201 	orr.w	r2, r3, #1
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f0ae:	f003 0302 	and.w	r3, r3, #2
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d011      	beq.n	800f0da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f0b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0ba:	f003 0301 	and.w	r3, r3, #1
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00b      	beq.n	800f0da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2202      	movs	r2, #2
 800f0c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0d0:	f043 0204 	orr.w	r2, r3, #4
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f0de:	f003 0304 	and.w	r3, r3, #4
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d011      	beq.n	800f10a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00b      	beq.n	800f10a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2204      	movs	r2, #4
 800f0f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f100:	f043 0202 	orr.w	r2, r3, #2
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7fe faf7 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f128:	b29b      	uxth	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f040 80a2 	bne.w	800f274 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f138:	e853 3f00 	ldrex	r3, [r3]
 800f13c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f156:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f15e:	e841 2300 	strex	r3, r2, [r1]
 800f162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1e2      	bne.n	800f130 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3308      	adds	r3, #8
 800f170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f174:	e853 3f00 	ldrex	r3, [r3]
 800f178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f17a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f17c:	4b6e      	ldr	r3, [pc, #440]	@ (800f338 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f17e:	4013      	ands	r3, r2
 800f180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	3308      	adds	r3, #8
 800f18a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f18e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f196:	e841 2300 	strex	r3, r2, [r1]
 800f19a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f19c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1e3      	bne.n	800f16a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2220      	movs	r2, #32
 800f1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4a60      	ldr	r2, [pc, #384]	@ (800f33c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d021      	beq.n	800f204 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01a      	beq.n	800f204 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1d6:	e853 3f00 	ldrex	r3, [r3]
 800f1da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f1e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f1f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f1f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f1f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f1f8:	e841 2300 	strex	r3, r2, [r1]
 800f1fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f1fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1e4      	bne.n	800f1ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d130      	bne.n	800f26e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21a:	e853 3f00 	ldrex	r3, [r3]
 800f21e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f222:	f023 0310 	bic.w	r3, r3, #16
 800f226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f234:	647b      	str	r3, [r7, #68]	@ 0x44
 800f236:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f23c:	e841 2300 	strex	r3, r2, [r1]
 800f240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1e4      	bne.n	800f212 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	69db      	ldr	r3, [r3, #28]
 800f24e:	f003 0310 	and.w	r3, r3, #16
 800f252:	2b10      	cmp	r3, #16
 800f254:	d103      	bne.n	800f25e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2210      	movs	r2, #16
 800f25c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7fe fa58 	bl	800d71c <HAL_UARTEx_RxEventCallback>
 800f26c:	e002      	b.n	800f274 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7f2 fae2 	bl	8001838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f274:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d006      	beq.n	800f28a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f27c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f280:	f003 0320 	and.w	r3, r3, #32
 800f284:	2b00      	cmp	r3, #0
 800f286:	f47f aecd 	bne.w	800f024 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f290:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f294:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d049      	beq.n	800f330 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f2a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d242      	bcs.n	800f330 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b4:	e853 3f00 	ldrex	r3, [r3]
 800f2b8:	623b      	str	r3, [r7, #32]
   return(result);
 800f2ba:	6a3b      	ldr	r3, [r7, #32]
 800f2bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	3308      	adds	r3, #8
 800f2ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f2ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800f2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2d6:	e841 2300 	strex	r3, r2, [r1]
 800f2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1e3      	bne.n	800f2aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a16      	ldr	r2, [pc, #88]	@ (800f340 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f2e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	e853 3f00 	ldrex	r3, [r3]
 800f2f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f043 0320 	orr.w	r3, r3, #32
 800f2fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	461a      	mov	r2, r3
 800f306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f30a:	61fb      	str	r3, [r7, #28]
 800f30c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30e:	69b9      	ldr	r1, [r7, #24]
 800f310:	69fa      	ldr	r2, [r7, #28]
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	617b      	str	r3, [r7, #20]
   return(result);
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e4      	bne.n	800f2e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f31e:	e007      	b.n	800f330 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	699a      	ldr	r2, [r3, #24]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f042 0208 	orr.w	r2, r2, #8
 800f32e:	619a      	str	r2, [r3, #24]
}
 800f330:	bf00      	nop
 800f332:	37b8      	adds	r7, #184	@ 0xb8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	effffffe 	.word	0xeffffffe
 800f33c:	58000c00 	.word	0x58000c00
 800f340:	0800eac5 	.word	0x0800eac5

0800f344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d101      	bne.n	800f396 <HAL_UARTEx_DisableFifoMode+0x16>
 800f392:	2302      	movs	r3, #2
 800f394:	e027      	b.n	800f3e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2224      	movs	r2, #36	@ 0x24
 800f3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f022 0201 	bic.w	r2, r2, #1
 800f3bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f3c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2220      	movs	r2, #32
 800f3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3714      	adds	r7, #20
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b084      	sub	sp, #16
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f402:	2b01      	cmp	r3, #1
 800f404:	d101      	bne.n	800f40a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f406:	2302      	movs	r3, #2
 800f408:	e02d      	b.n	800f466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2224      	movs	r2, #36	@ 0x24
 800f416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f022 0201 	bic.w	r2, r2, #1
 800f430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 f850 	bl	800f4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2220      	movs	r2, #32
 800f458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b084      	sub	sp, #16
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d101      	bne.n	800f486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f482:	2302      	movs	r3, #2
 800f484:	e02d      	b.n	800f4e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2224      	movs	r2, #36	@ 0x24
 800f492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f022 0201 	bic.w	r2, r2, #1
 800f4ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	430a      	orrs	r2, r1
 800f4c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f812 	bl	800f4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2220      	movs	r2, #32
 800f4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
	...

0800f4ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d108      	bne.n	800f50e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2201      	movs	r2, #1
 800f508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f50c:	e031      	b.n	800f572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f50e:	2310      	movs	r3, #16
 800f510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f512:	2310      	movs	r3, #16
 800f514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	0e5b      	lsrs	r3, r3, #25
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	f003 0307 	and.w	r3, r3, #7
 800f524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	0f5b      	lsrs	r3, r3, #29
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	f003 0307 	and.w	r3, r3, #7
 800f534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f536:	7bbb      	ldrb	r3, [r7, #14]
 800f538:	7b3a      	ldrb	r2, [r7, #12]
 800f53a:	4911      	ldr	r1, [pc, #68]	@ (800f580 <UARTEx_SetNbDataToProcess+0x94>)
 800f53c:	5c8a      	ldrb	r2, [r1, r2]
 800f53e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f542:	7b3a      	ldrb	r2, [r7, #12]
 800f544:	490f      	ldr	r1, [pc, #60]	@ (800f584 <UARTEx_SetNbDataToProcess+0x98>)
 800f546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f548:	fb93 f3f2 	sdiv	r3, r3, r2
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f554:	7bfb      	ldrb	r3, [r7, #15]
 800f556:	7b7a      	ldrb	r2, [r7, #13]
 800f558:	4909      	ldr	r1, [pc, #36]	@ (800f580 <UARTEx_SetNbDataToProcess+0x94>)
 800f55a:	5c8a      	ldrb	r2, [r1, r2]
 800f55c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f560:	7b7a      	ldrb	r2, [r7, #13]
 800f562:	4908      	ldr	r1, [pc, #32]	@ (800f584 <UARTEx_SetNbDataToProcess+0x98>)
 800f564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f566:	fb93 f3f2 	sdiv	r3, r3, r2
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f572:	bf00      	nop
 800f574:	3714      	adds	r7, #20
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	0801a300 	.word	0x0801a300
 800f584:	0801a308 	.word	0x0801a308

0800f588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f588:	b084      	sub	sp, #16
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	f107 001c 	add.w	r0, r7, #28
 800f596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f59a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d121      	bne.n	800f5e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	68da      	ldr	r2, [r3, #12]
 800f5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f664 <USB_CoreInit+0xdc>)
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d105      	bne.n	800f5da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f001 faf6 	bl	8010bcc <USB_CoreReset>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73fb      	strb	r3, [r7, #15]
 800f5e4:	e01b      	b.n	800f61e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f001 faea 	bl	8010bcc <USB_CoreReset>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f600:	2b00      	cmp	r3, #0
 800f602:	d106      	bne.n	800f612 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f610:	e005      	b.n	800f61e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f61e:	7fbb      	ldrb	r3, [r7, #30]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d116      	bne.n	800f652 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f628:	b29a      	uxth	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f632:	4b0d      	ldr	r3, [pc, #52]	@ (800f668 <USB_CoreInit+0xe0>)
 800f634:	4313      	orrs	r3, r2
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f043 0206 	orr.w	r2, r3, #6
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f043 0220 	orr.w	r2, r3, #32
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f652:	7bfb      	ldrb	r3, [r7, #15]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f65e:	b004      	add	sp, #16
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	ffbdffbf 	.word	0xffbdffbf
 800f668:	03ee0000 	.word	0x03ee0000

0800f66c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	4613      	mov	r3, r2
 800f678:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f67a:	79fb      	ldrb	r3, [r7, #7]
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d165      	bne.n	800f74c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	4a41      	ldr	r2, [pc, #260]	@ (800f788 <USB_SetTurnaroundTime+0x11c>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d906      	bls.n	800f696 <USB_SetTurnaroundTime+0x2a>
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	4a40      	ldr	r2, [pc, #256]	@ (800f78c <USB_SetTurnaroundTime+0x120>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d202      	bcs.n	800f696 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f690:	230f      	movs	r3, #15
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	e062      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	4a3c      	ldr	r2, [pc, #240]	@ (800f78c <USB_SetTurnaroundTime+0x120>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d306      	bcc.n	800f6ac <USB_SetTurnaroundTime+0x40>
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	4a3b      	ldr	r2, [pc, #236]	@ (800f790 <USB_SetTurnaroundTime+0x124>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d202      	bcs.n	800f6ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f6a6:	230e      	movs	r3, #14
 800f6a8:	617b      	str	r3, [r7, #20]
 800f6aa:	e057      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4a38      	ldr	r2, [pc, #224]	@ (800f790 <USB_SetTurnaroundTime+0x124>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d306      	bcc.n	800f6c2 <USB_SetTurnaroundTime+0x56>
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	4a37      	ldr	r2, [pc, #220]	@ (800f794 <USB_SetTurnaroundTime+0x128>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d202      	bcs.n	800f6c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f6bc:	230d      	movs	r3, #13
 800f6be:	617b      	str	r3, [r7, #20]
 800f6c0:	e04c      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	4a33      	ldr	r2, [pc, #204]	@ (800f794 <USB_SetTurnaroundTime+0x128>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d306      	bcc.n	800f6d8 <USB_SetTurnaroundTime+0x6c>
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	4a32      	ldr	r2, [pc, #200]	@ (800f798 <USB_SetTurnaroundTime+0x12c>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d802      	bhi.n	800f6d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f6d2:	230c      	movs	r3, #12
 800f6d4:	617b      	str	r3, [r7, #20]
 800f6d6:	e041      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	4a2f      	ldr	r2, [pc, #188]	@ (800f798 <USB_SetTurnaroundTime+0x12c>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d906      	bls.n	800f6ee <USB_SetTurnaroundTime+0x82>
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	4a2e      	ldr	r2, [pc, #184]	@ (800f79c <USB_SetTurnaroundTime+0x130>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d802      	bhi.n	800f6ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f6e8:	230b      	movs	r3, #11
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	e036      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f79c <USB_SetTurnaroundTime+0x130>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d906      	bls.n	800f704 <USB_SetTurnaroundTime+0x98>
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	4a29      	ldr	r2, [pc, #164]	@ (800f7a0 <USB_SetTurnaroundTime+0x134>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d802      	bhi.n	800f704 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6fe:	230a      	movs	r3, #10
 800f700:	617b      	str	r3, [r7, #20]
 800f702:	e02b      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	4a26      	ldr	r2, [pc, #152]	@ (800f7a0 <USB_SetTurnaroundTime+0x134>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d906      	bls.n	800f71a <USB_SetTurnaroundTime+0xae>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	4a25      	ldr	r2, [pc, #148]	@ (800f7a4 <USB_SetTurnaroundTime+0x138>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d202      	bcs.n	800f71a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f714:	2309      	movs	r3, #9
 800f716:	617b      	str	r3, [r7, #20]
 800f718:	e020      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	4a21      	ldr	r2, [pc, #132]	@ (800f7a4 <USB_SetTurnaroundTime+0x138>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d306      	bcc.n	800f730 <USB_SetTurnaroundTime+0xc4>
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	4a20      	ldr	r2, [pc, #128]	@ (800f7a8 <USB_SetTurnaroundTime+0x13c>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d802      	bhi.n	800f730 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f72a:	2308      	movs	r3, #8
 800f72c:	617b      	str	r3, [r7, #20]
 800f72e:	e015      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	4a1d      	ldr	r2, [pc, #116]	@ (800f7a8 <USB_SetTurnaroundTime+0x13c>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d906      	bls.n	800f746 <USB_SetTurnaroundTime+0xda>
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	4a1c      	ldr	r2, [pc, #112]	@ (800f7ac <USB_SetTurnaroundTime+0x140>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d202      	bcs.n	800f746 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f740:	2307      	movs	r3, #7
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e00a      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f746:	2306      	movs	r3, #6
 800f748:	617b      	str	r3, [r7, #20]
 800f74a:	e007      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f752:	2309      	movs	r3, #9
 800f754:	617b      	str	r3, [r7, #20]
 800f756:	e001      	b.n	800f75c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f758:	2309      	movs	r3, #9
 800f75a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	68da      	ldr	r2, [r3, #12]
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	029b      	lsls	r3, r3, #10
 800f770:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f774:	431a      	orrs	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	371c      	adds	r7, #28
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	00d8acbf 	.word	0x00d8acbf
 800f78c:	00e4e1c0 	.word	0x00e4e1c0
 800f790:	00f42400 	.word	0x00f42400
 800f794:	01067380 	.word	0x01067380
 800f798:	011a499f 	.word	0x011a499f
 800f79c:	01312cff 	.word	0x01312cff
 800f7a0:	014ca43f 	.word	0x014ca43f
 800f7a4:	016e3600 	.word	0x016e3600
 800f7a8:	01a6ab1f 	.word	0x01a6ab1f
 800f7ac:	01e84800 	.word	0x01e84800

0800f7b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f043 0201 	orr.w	r2, r3, #1
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	f023 0201 	bic.w	r2, r3, #1
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	370c      	adds	r7, #12
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	2b01      	cmp	r3, #1
 800f814:	d115      	bne.n	800f842 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f822:	200a      	movs	r0, #10
 800f824:	f7f3 f8d2 	bl	80029cc <HAL_Delay>
      ms += 10U;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	330a      	adds	r3, #10
 800f82c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f001 f93b 	bl	8010aaa <USB_GetMode>
 800f834:	4603      	mov	r3, r0
 800f836:	2b01      	cmp	r3, #1
 800f838:	d01e      	beq.n	800f878 <USB_SetCurrentMode+0x84>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2bc7      	cmp	r3, #199	@ 0xc7
 800f83e:	d9f0      	bls.n	800f822 <USB_SetCurrentMode+0x2e>
 800f840:	e01a      	b.n	800f878 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f842:	78fb      	ldrb	r3, [r7, #3]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d115      	bne.n	800f874 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f854:	200a      	movs	r0, #10
 800f856:	f7f3 f8b9 	bl	80029cc <HAL_Delay>
      ms += 10U;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	330a      	adds	r3, #10
 800f85e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f001 f922 	bl	8010aaa <USB_GetMode>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d005      	beq.n	800f878 <USB_SetCurrentMode+0x84>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2bc7      	cmp	r3, #199	@ 0xc7
 800f870:	d9f0      	bls.n	800f854 <USB_SetCurrentMode+0x60>
 800f872:	e001      	b.n	800f878 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	e005      	b.n	800f884 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2bc8      	cmp	r3, #200	@ 0xc8
 800f87c:	d101      	bne.n	800f882 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e000      	b.n	800f884 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f88c:	b084      	sub	sp, #16
 800f88e:	b580      	push	{r7, lr}
 800f890:	b086      	sub	sp, #24
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
 800f896:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	613b      	str	r3, [r7, #16]
 800f8aa:	e009      	b.n	800f8c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	3340      	adds	r3, #64	@ 0x40
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4413      	add	r3, r2
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	613b      	str	r3, [r7, #16]
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	2b0e      	cmp	r3, #14
 800f8c4:	d9f2      	bls.n	800f8ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f8c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d11c      	bne.n	800f908 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f8dc:	f043 0302 	orr.w	r3, r3, #2
 800f8e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	e005      	b.n	800f914 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f90c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f91a:	461a      	mov	r2, r3
 800f91c:	2300      	movs	r3, #0
 800f91e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f920:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f924:	2b01      	cmp	r3, #1
 800f926:	d10d      	bne.n	800f944 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d104      	bne.n	800f93a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f930:	2100      	movs	r1, #0
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 f968 	bl	800fc08 <USB_SetDevSpeed>
 800f938:	e008      	b.n	800f94c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f93a:	2101      	movs	r1, #1
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 f963 	bl	800fc08 <USB_SetDevSpeed>
 800f942:	e003      	b.n	800f94c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f944:	2103      	movs	r1, #3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 f95e 	bl	800fc08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f94c:	2110      	movs	r1, #16
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f8fa 	bl	800fb48 <USB_FlushTxFifo>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 f924 	bl	800fbac <USB_FlushRxFifo>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f96a:	2301      	movs	r3, #1
 800f96c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f974:	461a      	mov	r2, r3
 800f976:	2300      	movs	r3, #0
 800f978:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f980:	461a      	mov	r2, r3
 800f982:	2300      	movs	r3, #0
 800f984:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f98c:	461a      	mov	r2, r3
 800f98e:	2300      	movs	r3, #0
 800f990:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f992:	2300      	movs	r3, #0
 800f994:	613b      	str	r3, [r7, #16]
 800f996:	e043      	b.n	800fa20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	015a      	lsls	r2, r3, #5
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	4413      	add	r3, r2
 800f9a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9ae:	d118      	bne.n	800f9e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10a      	bne.n	800f9cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	015a      	lsls	r2, r3, #5
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	4413      	add	r3, r2
 800f9be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f9c8:	6013      	str	r3, [r2, #0]
 800f9ca:	e013      	b.n	800f9f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	015a      	lsls	r2, r3, #5
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	e008      	b.n	800f9f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	015a      	lsls	r2, r3, #5
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	015a      	lsls	r2, r3, #5
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa00:	461a      	mov	r2, r3
 800fa02:	2300      	movs	r3, #0
 800fa04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	015a      	lsls	r2, r3, #5
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa12:	461a      	mov	r2, r3
 800fa14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fa18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	613b      	str	r3, [r7, #16]
 800fa20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fa24:	461a      	mov	r2, r3
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d3b5      	bcc.n	800f998 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	613b      	str	r3, [r7, #16]
 800fa30:	e043      	b.n	800faba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	015a      	lsls	r2, r3, #5
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	4413      	add	r3, r2
 800fa3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa48:	d118      	bne.n	800fa7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10a      	bne.n	800fa66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	015a      	lsls	r2, r3, #5
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	4413      	add	r3, r2
 800fa58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fa62:	6013      	str	r3, [r2, #0]
 800fa64:	e013      	b.n	800fa8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	015a      	lsls	r2, r3, #5
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa72:	461a      	mov	r2, r3
 800fa74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	e008      	b.n	800fa8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	015a      	lsls	r2, r3, #5
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	4413      	add	r3, r2
 800fa84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa88:	461a      	mov	r2, r3
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	015a      	lsls	r2, r3, #5
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	4413      	add	r3, r2
 800fa96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	015a      	lsls	r2, r3, #5
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4413      	add	r3, r2
 800faa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faac:	461a      	mov	r2, r3
 800faae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	3301      	adds	r3, #1
 800fab8:	613b      	str	r3, [r7, #16]
 800faba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fabe:	461a      	mov	r2, r3
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d3b5      	bcc.n	800fa32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fad8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fae6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800faec:	2b00      	cmp	r3, #0
 800faee:	d105      	bne.n	800fafc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	699b      	ldr	r3, [r3, #24]
 800faf4:	f043 0210 	orr.w	r2, r3, #16
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	699a      	ldr	r2, [r3, #24]
 800fb00:	4b0f      	ldr	r3, [pc, #60]	@ (800fb40 <USB_DevInit+0x2b4>)
 800fb02:	4313      	orrs	r3, r2
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d005      	beq.n	800fb1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	f043 0208 	orr.w	r2, r3, #8
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d105      	bne.n	800fb30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	699a      	ldr	r2, [r3, #24]
 800fb28:	4b06      	ldr	r3, [pc, #24]	@ (800fb44 <USB_DevInit+0x2b8>)
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3718      	adds	r7, #24
 800fb36:	46bd      	mov	sp, r7
 800fb38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb3c:	b004      	add	sp, #16
 800fb3e:	4770      	bx	lr
 800fb40:	803c3800 	.word	0x803c3800
 800fb44:	40000004 	.word	0x40000004

0800fb48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fb52:	2300      	movs	r3, #0
 800fb54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb62:	d901      	bls.n	800fb68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e01b      	b.n	800fba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	691b      	ldr	r3, [r3, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	daf2      	bge.n	800fb56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fb70:	2300      	movs	r3, #0
 800fb72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	019b      	lsls	r3, r3, #6
 800fb78:	f043 0220 	orr.w	r2, r3, #32
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	3301      	adds	r3, #1
 800fb84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb8c:	d901      	bls.n	800fb92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fb8e:	2303      	movs	r3, #3
 800fb90:	e006      	b.n	800fba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	f003 0320 	and.w	r3, r3, #32
 800fb9a:	2b20      	cmp	r3, #32
 800fb9c:	d0f0      	beq.n	800fb80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3714      	adds	r7, #20
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fbc4:	d901      	bls.n	800fbca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	e018      	b.n	800fbfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	daf2      	bge.n	800fbb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2210      	movs	r2, #16
 800fbda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fbe8:	d901      	bls.n	800fbee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e006      	b.n	800fbfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	f003 0310 	and.w	r3, r3, #16
 800fbf6:	2b10      	cmp	r3, #16
 800fbf8:	d0f0      	beq.n	800fbdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3714      	adds	r7, #20
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	460b      	mov	r3, r1
 800fc12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	68f9      	ldr	r1, [r7, #12]
 800fc24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr

0800fc3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b087      	sub	sp, #28
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc4c:	689b      	ldr	r3, [r3, #8]
 800fc4e:	f003 0306 	and.w	r3, r3, #6
 800fc52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d102      	bne.n	800fc60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	75fb      	strb	r3, [r7, #23]
 800fc5e:	e00a      	b.n	800fc76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b02      	cmp	r3, #2
 800fc64:	d002      	beq.n	800fc6c <USB_GetDevSpeed+0x32>
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2b06      	cmp	r3, #6
 800fc6a:	d102      	bne.n	800fc72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc6c:	2302      	movs	r3, #2
 800fc6e:	75fb      	strb	r3, [r7, #23]
 800fc70:	e001      	b.n	800fc76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fc72:	230f      	movs	r3, #15
 800fc74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	785b      	ldrb	r3, [r3, #1]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d139      	bne.n	800fd14 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fca6:	69da      	ldr	r2, [r3, #28]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	f003 030f 	and.w	r3, r3, #15
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	fa01 f303 	lsl.w	r3, r1, r3
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	68f9      	ldr	r1, [r7, #12]
 800fcba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	015a      	lsls	r2, r3, #5
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	4413      	add	r3, r2
 800fcca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d153      	bne.n	800fd80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	015a      	lsls	r2, r3, #5
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	4413      	add	r3, r2
 800fce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	791b      	ldrb	r3, [r3, #4]
 800fcf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	059b      	lsls	r3, r3, #22
 800fcfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcfc:	431a      	orrs	r2, r3
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	0159      	lsls	r1, r3, #5
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	440b      	add	r3, r1
 800fd06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4b20      	ldr	r3, [pc, #128]	@ (800fd90 <USB_ActivateEndpoint+0x10c>)
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	600b      	str	r3, [r1, #0]
 800fd12:	e035      	b.n	800fd80 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd1a:	69da      	ldr	r2, [r3, #28]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	f003 030f 	and.w	r3, r3, #15
 800fd24:	2101      	movs	r1, #1
 800fd26:	fa01 f303 	lsl.w	r3, r1, r3
 800fd2a:	041b      	lsls	r3, r3, #16
 800fd2c:	68f9      	ldr	r1, [r7, #12]
 800fd2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd32:	4313      	orrs	r3, r2
 800fd34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	015a      	lsls	r2, r3, #5
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d119      	bne.n	800fd80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	015a      	lsls	r2, r3, #5
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4413      	add	r3, r2
 800fd54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	791b      	ldrb	r3, [r3, #4]
 800fd66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	0159      	lsls	r1, r3, #5
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	440b      	add	r3, r1
 800fd74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4b05      	ldr	r3, [pc, #20]	@ (800fd90 <USB_ActivateEndpoint+0x10c>)
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3714      	adds	r7, #20
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	10008000 	.word	0x10008000

0800fd94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	785b      	ldrb	r3, [r3, #1]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d161      	bne.n	800fe74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fdc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fdc6:	d11f      	bne.n	800fe08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	0151      	lsls	r1, r2, #5
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	440a      	add	r2, r1
 800fdde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fde2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fde6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	015a      	lsls	r2, r3, #5
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	0151      	lsls	r1, r2, #5
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fe06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	f003 030f 	and.w	r3, r3, #15
 800fe18:	2101      	movs	r1, #1
 800fe1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	43db      	mvns	r3, r3
 800fe22:	68f9      	ldr	r1, [r7, #12]
 800fe24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fe28:	4013      	ands	r3, r2
 800fe2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	f003 030f 	and.w	r3, r3, #15
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	43db      	mvns	r3, r3
 800fe46:	68f9      	ldr	r1, [r7, #12]
 800fe48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	0159      	lsls	r1, r3, #5
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	440b      	add	r3, r1
 800fe66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4b35      	ldr	r3, [pc, #212]	@ (800ff44 <USB_DeactivateEndpoint+0x1b0>)
 800fe6e:	4013      	ands	r3, r2
 800fe70:	600b      	str	r3, [r1, #0]
 800fe72:	e060      	b.n	800ff36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fe86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fe8a:	d11f      	bne.n	800fecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	0151      	lsls	r1, r2, #5
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	440a      	add	r2, r1
 800fea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800feaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	015a      	lsls	r2, r3, #5
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4413      	add	r3, r2
 800feb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68ba      	ldr	r2, [r7, #8]
 800febc:	0151      	lsls	r1, r2, #5
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	440a      	add	r2, r1
 800fec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800feca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	f003 030f 	and.w	r3, r3, #15
 800fedc:	2101      	movs	r1, #1
 800fede:	fa01 f303 	lsl.w	r3, r1, r3
 800fee2:	041b      	lsls	r3, r3, #16
 800fee4:	43db      	mvns	r3, r3
 800fee6:	68f9      	ldr	r1, [r7, #12]
 800fee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800feec:	4013      	ands	r3, r2
 800feee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fef6:	69da      	ldr	r2, [r3, #28]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 030f 	and.w	r3, r3, #15
 800ff00:	2101      	movs	r1, #1
 800ff02:	fa01 f303 	lsl.w	r3, r1, r3
 800ff06:	041b      	lsls	r3, r3, #16
 800ff08:	43db      	mvns	r3, r3
 800ff0a:	68f9      	ldr	r1, [r7, #12]
 800ff0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff10:	4013      	ands	r3, r2
 800ff12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	015a      	lsls	r2, r3, #5
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	0159      	lsls	r1, r3, #5
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	440b      	add	r3, r1
 800ff2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4b05      	ldr	r3, [pc, #20]	@ (800ff48 <USB_DeactivateEndpoint+0x1b4>)
 800ff32:	4013      	ands	r3, r2
 800ff34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	ec337800 	.word	0xec337800
 800ff48:	eff37800 	.word	0xeff37800

0800ff4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08a      	sub	sp, #40	@ 0x28
 800ff50:	af02      	add	r7, sp, #8
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	4613      	mov	r3, r2
 800ff58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	785b      	ldrb	r3, [r3, #1]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	f040 8181 	bne.w	8010270 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d132      	bne.n	800ffdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	015a      	lsls	r2, r3, #5
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff82:	691a      	ldr	r2, [r3, #16]
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	0159      	lsls	r1, r3, #5
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	440b      	add	r3, r1
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff90:	4619      	mov	r1, r3
 800ff92:	4ba5      	ldr	r3, [pc, #660]	@ (8010228 <USB_EPStartXfer+0x2dc>)
 800ff94:	4013      	ands	r3, r2
 800ff96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	015a      	lsls	r2, r3, #5
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	69ba      	ldr	r2, [r7, #24]
 800ffa8:	0151      	lsls	r1, r2, #5
 800ffaa:	69fa      	ldr	r2, [r7, #28]
 800ffac:	440a      	add	r2, r1
 800ffae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ffb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffc4:	691a      	ldr	r2, [r3, #16]
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	0159      	lsls	r1, r3, #5
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	440b      	add	r3, r1
 800ffce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4b95      	ldr	r3, [pc, #596]	@ (801022c <USB_EPStartXfer+0x2e0>)
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	610b      	str	r3, [r1, #16]
 800ffda:	e092      	b.n	8010102 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	015a      	lsls	r2, r3, #5
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffe8:	691a      	ldr	r2, [r3, #16]
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	0159      	lsls	r1, r3, #5
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	440b      	add	r3, r1
 800fff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fff6:	4619      	mov	r1, r3
 800fff8:	4b8c      	ldr	r3, [pc, #560]	@ (801022c <USB_EPStartXfer+0x2e0>)
 800fffa:	4013      	ands	r3, r2
 800fffc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801000a:	691a      	ldr	r2, [r3, #16]
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	0159      	lsls	r1, r3, #5
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	440b      	add	r3, r1
 8010014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010018:	4619      	mov	r1, r3
 801001a:	4b83      	ldr	r3, [pc, #524]	@ (8010228 <USB_EPStartXfer+0x2dc>)
 801001c:	4013      	ands	r3, r2
 801001e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d11a      	bne.n	801005c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	691a      	ldr	r2, [r3, #16]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	429a      	cmp	r2, r3
 8010030:	d903      	bls.n	801003a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	689a      	ldr	r2, [r3, #8]
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	015a      	lsls	r2, r3, #5
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	4413      	add	r3, r2
 8010042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	69ba      	ldr	r2, [r7, #24]
 801004a:	0151      	lsls	r1, r2, #5
 801004c:	69fa      	ldr	r2, [r7, #28]
 801004e:	440a      	add	r2, r1
 8010050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010058:	6113      	str	r3, [r2, #16]
 801005a:	e01b      	b.n	8010094 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	015a      	lsls	r2, r3, #5
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	4413      	add	r3, r2
 8010064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010068:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	6919      	ldr	r1, [r3, #16]
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	440b      	add	r3, r1
 8010074:	1e59      	subs	r1, r3, #1
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	fbb1 f3f3 	udiv	r3, r1, r3
 801007e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010080:	4b6b      	ldr	r3, [pc, #428]	@ (8010230 <USB_EPStartXfer+0x2e4>)
 8010082:	400b      	ands	r3, r1
 8010084:	69b9      	ldr	r1, [r7, #24]
 8010086:	0148      	lsls	r0, r1, #5
 8010088:	69f9      	ldr	r1, [r7, #28]
 801008a:	4401      	add	r1, r0
 801008c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010090:	4313      	orrs	r3, r2
 8010092:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	015a      	lsls	r2, r3, #5
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	4413      	add	r3, r2
 801009c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a0:	691a      	ldr	r2, [r3, #16]
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100aa:	69b9      	ldr	r1, [r7, #24]
 80100ac:	0148      	lsls	r0, r1, #5
 80100ae:	69f9      	ldr	r1, [r7, #28]
 80100b0:	4401      	add	r1, r0
 80100b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80100b6:	4313      	orrs	r3, r2
 80100b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	791b      	ldrb	r3, [r3, #4]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d11f      	bne.n	8010102 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	015a      	lsls	r2, r3, #5
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	4413      	add	r3, r2
 80100ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	69ba      	ldr	r2, [r7, #24]
 80100d2:	0151      	lsls	r1, r2, #5
 80100d4:	69fa      	ldr	r2, [r7, #28]
 80100d6:	440a      	add	r2, r1
 80100d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80100e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	015a      	lsls	r2, r3, #5
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	4413      	add	r3, r2
 80100ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100ee:	691b      	ldr	r3, [r3, #16]
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	0151      	lsls	r1, r2, #5
 80100f4:	69fa      	ldr	r2, [r7, #28]
 80100f6:	440a      	add	r2, r1
 80100f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010100:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d14b      	bne.n	80101a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	69db      	ldr	r3, [r3, #28]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d009      	beq.n	8010124 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	015a      	lsls	r2, r3, #5
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	4413      	add	r3, r2
 8010118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801011c:	461a      	mov	r2, r3
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	69db      	ldr	r3, [r3, #28]
 8010122:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	791b      	ldrb	r3, [r3, #4]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d128      	bne.n	801017e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010138:	2b00      	cmp	r3, #0
 801013a:	d110      	bne.n	801015e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	015a      	lsls	r2, r3, #5
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	4413      	add	r3, r2
 8010144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	69ba      	ldr	r2, [r7, #24]
 801014c:	0151      	lsls	r1, r2, #5
 801014e:	69fa      	ldr	r2, [r7, #28]
 8010150:	440a      	add	r2, r1
 8010152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010156:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	e00f      	b.n	801017e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	015a      	lsls	r2, r3, #5
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	4413      	add	r3, r2
 8010166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	0151      	lsls	r1, r2, #5
 8010170:	69fa      	ldr	r2, [r7, #28]
 8010172:	440a      	add	r2, r1
 8010174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801017c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	015a      	lsls	r2, r3, #5
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	0151      	lsls	r1, r2, #5
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	440a      	add	r2, r1
 8010194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010198:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	e16a      	b.n	8010476 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	69ba      	ldr	r2, [r7, #24]
 80101b0:	0151      	lsls	r1, r2, #5
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	440a      	add	r2, r1
 80101b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80101be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d015      	beq.n	80101f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 8152 	beq.w	8010476 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	f003 030f 	and.w	r3, r3, #15
 80101e2:	2101      	movs	r1, #1
 80101e4:	fa01 f303 	lsl.w	r3, r1, r3
 80101e8:	69f9      	ldr	r1, [r7, #28]
 80101ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101ee:	4313      	orrs	r3, r2
 80101f0:	634b      	str	r3, [r1, #52]	@ 0x34
 80101f2:	e140      	b.n	8010476 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010200:	2b00      	cmp	r3, #0
 8010202:	d117      	bne.n	8010234 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	015a      	lsls	r2, r3, #5
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	4413      	add	r3, r2
 801020c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	69ba      	ldr	r2, [r7, #24]
 8010214:	0151      	lsls	r1, r2, #5
 8010216:	69fa      	ldr	r2, [r7, #28]
 8010218:	440a      	add	r2, r1
 801021a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801021e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010222:	6013      	str	r3, [r2, #0]
 8010224:	e016      	b.n	8010254 <USB_EPStartXfer+0x308>
 8010226:	bf00      	nop
 8010228:	e007ffff 	.word	0xe007ffff
 801022c:	fff80000 	.word	0xfff80000
 8010230:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	015a      	lsls	r2, r3, #5
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	4413      	add	r3, r2
 801023c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	69ba      	ldr	r2, [r7, #24]
 8010244:	0151      	lsls	r1, r2, #5
 8010246:	69fa      	ldr	r2, [r7, #28]
 8010248:	440a      	add	r2, r1
 801024a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801024e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010252:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	68d9      	ldr	r1, [r3, #12]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	781a      	ldrb	r2, [r3, #0]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	b298      	uxth	r0, r3
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	9300      	str	r3, [sp, #0]
 8010266:	4603      	mov	r3, r0
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f000 f9b9 	bl	80105e0 <USB_WritePacket>
 801026e:	e102      	b.n	8010476 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	015a      	lsls	r2, r3, #5
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	4413      	add	r3, r2
 8010278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801027c:	691a      	ldr	r2, [r3, #16]
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	0159      	lsls	r1, r3, #5
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	440b      	add	r3, r1
 8010286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801028a:	4619      	mov	r1, r3
 801028c:	4b7c      	ldr	r3, [pc, #496]	@ (8010480 <USB_EPStartXfer+0x534>)
 801028e:	4013      	ands	r3, r2
 8010290:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	015a      	lsls	r2, r3, #5
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	4413      	add	r3, r2
 801029a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801029e:	691a      	ldr	r2, [r3, #16]
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	0159      	lsls	r1, r3, #5
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	440b      	add	r3, r1
 80102a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102ac:	4619      	mov	r1, r3
 80102ae:	4b75      	ldr	r3, [pc, #468]	@ (8010484 <USB_EPStartXfer+0x538>)
 80102b0:	4013      	ands	r3, r2
 80102b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d12f      	bne.n	801031a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d003      	beq.n	80102ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	689a      	ldr	r2, [r3, #8]
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	689a      	ldr	r2, [r3, #8]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	015a      	lsls	r2, r3, #5
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	4413      	add	r3, r2
 80102da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102de:	691a      	ldr	r2, [r3, #16]
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	6a1b      	ldr	r3, [r3, #32]
 80102e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102e8:	69b9      	ldr	r1, [r7, #24]
 80102ea:	0148      	lsls	r0, r1, #5
 80102ec:	69f9      	ldr	r1, [r7, #28]
 80102ee:	4401      	add	r1, r0
 80102f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80102f4:	4313      	orrs	r3, r2
 80102f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	015a      	lsls	r2, r3, #5
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	4413      	add	r3, r2
 8010300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010304:	691b      	ldr	r3, [r3, #16]
 8010306:	69ba      	ldr	r2, [r7, #24]
 8010308:	0151      	lsls	r1, r2, #5
 801030a:	69fa      	ldr	r2, [r7, #28]
 801030c:	440a      	add	r2, r1
 801030e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010316:	6113      	str	r3, [r2, #16]
 8010318:	e05f      	b.n	80103da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d123      	bne.n	801036a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	015a      	lsls	r2, r3, #5
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	4413      	add	r3, r2
 801032a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801032e:	691a      	ldr	r2, [r3, #16]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010338:	69b9      	ldr	r1, [r7, #24]
 801033a:	0148      	lsls	r0, r1, #5
 801033c:	69f9      	ldr	r1, [r7, #28]
 801033e:	4401      	add	r1, r0
 8010340:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010344:	4313      	orrs	r3, r2
 8010346:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	015a      	lsls	r2, r3, #5
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	4413      	add	r3, r2
 8010350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	69ba      	ldr	r2, [r7, #24]
 8010358:	0151      	lsls	r1, r2, #5
 801035a:	69fa      	ldr	r2, [r7, #28]
 801035c:	440a      	add	r2, r1
 801035e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010366:	6113      	str	r3, [r2, #16]
 8010368:	e037      	b.n	80103da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	691a      	ldr	r2, [r3, #16]
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	4413      	add	r3, r2
 8010374:	1e5a      	subs	r2, r3, #1
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	fbb2 f3f3 	udiv	r3, r2, r3
 801037e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	8afa      	ldrh	r2, [r7, #22]
 8010386:	fb03 f202 	mul.w	r2, r3, r2
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	015a      	lsls	r2, r3, #5
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	4413      	add	r3, r2
 8010396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801039a:	691a      	ldr	r2, [r3, #16]
 801039c:	8afb      	ldrh	r3, [r7, #22]
 801039e:	04d9      	lsls	r1, r3, #19
 80103a0:	4b39      	ldr	r3, [pc, #228]	@ (8010488 <USB_EPStartXfer+0x53c>)
 80103a2:	400b      	ands	r3, r1
 80103a4:	69b9      	ldr	r1, [r7, #24]
 80103a6:	0148      	lsls	r0, r1, #5
 80103a8:	69f9      	ldr	r1, [r7, #28]
 80103aa:	4401      	add	r1, r0
 80103ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80103b0:	4313      	orrs	r3, r2
 80103b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103c0:	691a      	ldr	r2, [r3, #16]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103ca:	69b9      	ldr	r1, [r7, #24]
 80103cc:	0148      	lsls	r0, r1, #5
 80103ce:	69f9      	ldr	r1, [r7, #28]
 80103d0:	4401      	add	r1, r0
 80103d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80103d6:	4313      	orrs	r3, r2
 80103d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d10d      	bne.n	80103fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d009      	beq.n	80103fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	68d9      	ldr	r1, [r3, #12]
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	015a      	lsls	r2, r3, #5
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	4413      	add	r3, r2
 80103f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103f8:	460a      	mov	r2, r1
 80103fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	791b      	ldrb	r3, [r3, #4]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d128      	bne.n	8010456 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010410:	2b00      	cmp	r3, #0
 8010412:	d110      	bne.n	8010436 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	015a      	lsls	r2, r3, #5
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	4413      	add	r3, r2
 801041c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	69ba      	ldr	r2, [r7, #24]
 8010424:	0151      	lsls	r1, r2, #5
 8010426:	69fa      	ldr	r2, [r7, #28]
 8010428:	440a      	add	r2, r1
 801042a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801042e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	e00f      	b.n	8010456 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	015a      	lsls	r2, r3, #5
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	4413      	add	r3, r2
 801043e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	0151      	lsls	r1, r2, #5
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	440a      	add	r2, r1
 801044c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010454:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	015a      	lsls	r2, r3, #5
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	4413      	add	r3, r2
 801045e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	69ba      	ldr	r2, [r7, #24]
 8010466:	0151      	lsls	r1, r2, #5
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	440a      	add	r2, r1
 801046c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010470:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010474:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3720      	adds	r7, #32
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	fff80000 	.word	0xfff80000
 8010484:	e007ffff 	.word	0xe007ffff
 8010488:	1ff80000 	.word	0x1ff80000

0801048c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801048c:	b480      	push	{r7}
 801048e:	b087      	sub	sp, #28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801049a:	2300      	movs	r3, #0
 801049c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	785b      	ldrb	r3, [r3, #1]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d14a      	bne.n	8010540 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80104be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80104c2:	f040 8086 	bne.w	80105d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	015a      	lsls	r2, r3, #5
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	4413      	add	r3, r2
 80104d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	683a      	ldr	r2, [r7, #0]
 80104d8:	7812      	ldrb	r2, [r2, #0]
 80104da:	0151      	lsls	r1, r2, #5
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	440a      	add	r2, r1
 80104e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80104e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	7812      	ldrb	r2, [r2, #0]
 80104fe:	0151      	lsls	r1, r2, #5
 8010500:	693a      	ldr	r2, [r7, #16]
 8010502:	440a      	add	r2, r1
 8010504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801050c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	3301      	adds	r3, #1
 8010512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f242 7210 	movw	r2, #10000	@ 0x2710
 801051a:	4293      	cmp	r3, r2
 801051c:	d902      	bls.n	8010524 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	75fb      	strb	r3, [r7, #23]
          break;
 8010522:	e056      	b.n	80105d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	015a      	lsls	r2, r3, #5
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801053c:	d0e7      	beq.n	801050e <USB_EPStopXfer+0x82>
 801053e:	e048      	b.n	80105d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	015a      	lsls	r2, r3, #5
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	4413      	add	r3, r2
 801054a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010558:	d13b      	bne.n	80105d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	015a      	lsls	r2, r3, #5
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	4413      	add	r3, r2
 8010564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	7812      	ldrb	r2, [r2, #0]
 801056e:	0151      	lsls	r1, r2, #5
 8010570:	693a      	ldr	r2, [r7, #16]
 8010572:	440a      	add	r2, r1
 8010574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801057c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	015a      	lsls	r2, r3, #5
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	4413      	add	r3, r2
 8010588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	683a      	ldr	r2, [r7, #0]
 8010590:	7812      	ldrb	r2, [r2, #0]
 8010592:	0151      	lsls	r1, r2, #5
 8010594:	693a      	ldr	r2, [r7, #16]
 8010596:	440a      	add	r2, r1
 8010598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801059c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80105a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	3301      	adds	r3, #1
 80105a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d902      	bls.n	80105b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	75fb      	strb	r3, [r7, #23]
          break;
 80105b6:	e00c      	b.n	80105d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	015a      	lsls	r2, r3, #5
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	4413      	add	r3, r2
 80105c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105d0:	d0e7      	beq.n	80105a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80105d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	371c      	adds	r7, #28
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b089      	sub	sp, #36	@ 0x24
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	4611      	mov	r1, r2
 80105ec:	461a      	mov	r2, r3
 80105ee:	460b      	mov	r3, r1
 80105f0:	71fb      	strb	r3, [r7, #7]
 80105f2:	4613      	mov	r3, r2
 80105f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80105fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010602:	2b00      	cmp	r3, #0
 8010604:	d123      	bne.n	801064e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010606:	88bb      	ldrh	r3, [r7, #4]
 8010608:	3303      	adds	r3, #3
 801060a:	089b      	lsrs	r3, r3, #2
 801060c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801060e:	2300      	movs	r3, #0
 8010610:	61bb      	str	r3, [r7, #24]
 8010612:	e018      	b.n	8010646 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010614:	79fb      	ldrb	r3, [r7, #7]
 8010616:	031a      	lsls	r2, r3, #12
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	4413      	add	r3, r2
 801061c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010620:	461a      	mov	r2, r3
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	3301      	adds	r3, #1
 801062c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	3301      	adds	r3, #1
 8010632:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	3301      	adds	r3, #1
 8010638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	3301      	adds	r3, #1
 801063e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	3301      	adds	r3, #1
 8010644:	61bb      	str	r3, [r7, #24]
 8010646:	69ba      	ldr	r2, [r7, #24]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	429a      	cmp	r2, r3
 801064c:	d3e2      	bcc.n	8010614 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3724      	adds	r7, #36	@ 0x24
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801065c:	b480      	push	{r7}
 801065e:	b08b      	sub	sp, #44	@ 0x2c
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	4613      	mov	r3, r2
 8010668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010672:	88fb      	ldrh	r3, [r7, #6]
 8010674:	089b      	lsrs	r3, r3, #2
 8010676:	b29b      	uxth	r3, r3
 8010678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801067a:	88fb      	ldrh	r3, [r7, #6]
 801067c:	f003 0303 	and.w	r3, r3, #3
 8010680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010682:	2300      	movs	r3, #0
 8010684:	623b      	str	r3, [r7, #32]
 8010686:	e014      	b.n	80106b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	601a      	str	r2, [r3, #0]
    pDest++;
 8010694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010696:	3301      	adds	r3, #1
 8010698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801069a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069c:	3301      	adds	r3, #1
 801069e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a2:	3301      	adds	r3, #1
 80106a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80106a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a8:	3301      	adds	r3, #1
 80106aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	3301      	adds	r3, #1
 80106b0:	623b      	str	r3, [r7, #32]
 80106b2:	6a3a      	ldr	r2, [r7, #32]
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d3e6      	bcc.n	8010688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80106ba:	8bfb      	ldrh	r3, [r7, #30]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d01e      	beq.n	80106fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80106c0:	2300      	movs	r3, #0
 80106c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80106ca:	461a      	mov	r2, r3
 80106cc:	f107 0310 	add.w	r3, r7, #16
 80106d0:	6812      	ldr	r2, [r2, #0]
 80106d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80106d4:	693a      	ldr	r2, [r7, #16]
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	fa22 f303 	lsr.w	r3, r2, r3
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e4:	701a      	strb	r2, [r3, #0]
      i++;
 80106e6:	6a3b      	ldr	r3, [r7, #32]
 80106e8:	3301      	adds	r3, #1
 80106ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80106ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ee:	3301      	adds	r3, #1
 80106f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80106f2:	8bfb      	ldrh	r3, [r7, #30]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80106f8:	8bfb      	ldrh	r3, [r7, #30]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1ea      	bne.n	80106d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80106fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010700:	4618      	mov	r0, r3
 8010702:	372c      	adds	r7, #44	@ 0x2c
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	785b      	ldrb	r3, [r3, #1]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d12c      	bne.n	8010782 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	015a      	lsls	r2, r3, #5
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	4413      	add	r3, r2
 8010730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	db12      	blt.n	8010760 <USB_EPSetStall+0x54>
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00f      	beq.n	8010760 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	4413      	add	r3, r2
 8010748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	0151      	lsls	r1, r2, #5
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	440a      	add	r2, r1
 8010756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801075a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801075e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	015a      	lsls	r2, r3, #5
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	4413      	add	r3, r2
 8010768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	68ba      	ldr	r2, [r7, #8]
 8010770:	0151      	lsls	r1, r2, #5
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	440a      	add	r2, r1
 8010776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801077e:	6013      	str	r3, [r2, #0]
 8010780:	e02b      	b.n	80107da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	015a      	lsls	r2, r3, #5
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	4413      	add	r3, r2
 801078a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db12      	blt.n	80107ba <USB_EPSetStall+0xae>
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00f      	beq.n	80107ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	0151      	lsls	r1, r2, #5
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	440a      	add	r2, r1
 80107b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80107b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	015a      	lsls	r2, r3, #5
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	4413      	add	r3, r2
 80107c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	0151      	lsls	r1, r2, #5
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	440a      	add	r2, r1
 80107d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80107d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3714      	adds	r7, #20
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	785b      	ldrb	r3, [r3, #1]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d128      	bne.n	8010856 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	015a      	lsls	r2, r3, #5
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	4413      	add	r3, r2
 801080c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	0151      	lsls	r1, r2, #5
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	440a      	add	r2, r1
 801081a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801081e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010822:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	791b      	ldrb	r3, [r3, #4]
 8010828:	2b03      	cmp	r3, #3
 801082a:	d003      	beq.n	8010834 <USB_EPClearStall+0x4c>
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	791b      	ldrb	r3, [r3, #4]
 8010830:	2b02      	cmp	r3, #2
 8010832:	d138      	bne.n	80108a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	015a      	lsls	r2, r3, #5
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	4413      	add	r3, r2
 801083c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	0151      	lsls	r1, r2, #5
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	440a      	add	r2, r1
 801084a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010852:	6013      	str	r3, [r2, #0]
 8010854:	e027      	b.n	80108a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	015a      	lsls	r2, r3, #5
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4413      	add	r3, r2
 801085e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	0151      	lsls	r1, r2, #5
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	440a      	add	r2, r1
 801086c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010870:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010874:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	791b      	ldrb	r3, [r3, #4]
 801087a:	2b03      	cmp	r3, #3
 801087c:	d003      	beq.n	8010886 <USB_EPClearStall+0x9e>
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	791b      	ldrb	r3, [r3, #4]
 8010882:	2b02      	cmp	r3, #2
 8010884:	d10f      	bne.n	80108a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	0151      	lsls	r1, r2, #5
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	440a      	add	r2, r1
 801089c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80108a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3714      	adds	r7, #20
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80108d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	78fb      	ldrb	r3, [r7, #3]
 80108e2:	011b      	lsls	r3, r3, #4
 80108e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80108e8:	68f9      	ldr	r1, [r7, #12]
 80108ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80108ee:	4313      	orrs	r3, r2
 80108f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801091a:	f023 0303 	bic.w	r3, r3, #3
 801091e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801092e:	f023 0302 	bic.w	r3, r3, #2
 8010932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3714      	adds	r7, #20
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr

08010942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010942:	b480      	push	{r7}
 8010944:	b085      	sub	sp, #20
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801095c:	f023 0303 	bic.w	r3, r3, #3
 8010960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010970:	f043 0302 	orr.w	r3, r3, #2
 8010974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010976:	2300      	movs	r3, #0
}
 8010978:	4618      	mov	r0, r3
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	695b      	ldr	r3, [r3, #20]
 8010990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	699b      	ldr	r3, [r3, #24]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	4013      	ands	r3, r2
 801099a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80109aa:	b480      	push	{r7}
 80109ac:	b085      	sub	sp, #20
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109bc:	699b      	ldr	r3, [r3, #24]
 80109be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	4013      	ands	r3, r2
 80109cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	0c1b      	lsrs	r3, r3, #16
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3714      	adds	r7, #20
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80109de:	b480      	push	{r7}
 80109e0:	b085      	sub	sp, #20
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109f0:	699b      	ldr	r3, [r3, #24]
 80109f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109fa:	69db      	ldr	r3, [r3, #28]
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	4013      	ands	r3, r2
 8010a00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	b29b      	uxth	r3, r3
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a22:	78fb      	ldrb	r3, [r7, #3]
 8010a24:	015a      	lsls	r2, r3, #5
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	4413      	add	r3, r2
 8010a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a38:	695b      	ldr	r3, [r3, #20]
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a40:	68bb      	ldr	r3, [r7, #8]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3714      	adds	r7, #20
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr

08010a4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a4e:	b480      	push	{r7}
 8010a50:	b087      	sub	sp, #28
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	460b      	mov	r3, r1
 8010a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010a72:	78fb      	ldrb	r3, [r7, #3]
 8010a74:	f003 030f 	and.w	r3, r3, #15
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a7e:	01db      	lsls	r3, r3, #7
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	693a      	ldr	r2, [r7, #16]
 8010a84:	4313      	orrs	r3, r2
 8010a86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010a88:	78fb      	ldrb	r3, [r7, #3]
 8010a8a:	015a      	lsls	r2, r3, #5
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	4413      	add	r3, r2
 8010a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	693a      	ldr	r2, [r7, #16]
 8010a98:	4013      	ands	r3, r2
 8010a9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a9c:	68bb      	ldr	r3, [r7, #8]
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	371c      	adds	r7, #28
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr

08010aaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010aaa:	b480      	push	{r7}
 8010aac:	b083      	sub	sp, #12
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	695b      	ldr	r3, [r3, #20]
 8010ab6:	f003 0301 	and.w	r3, r3, #1
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
	...

08010ac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	4b09      	ldr	r3, [pc, #36]	@ (8010b0c <USB_ActivateSetup+0x44>)
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3714      	adds	r7, #20
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr
 8010b0c:	fffff800 	.word	0xfffff800

08010b10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b087      	sub	sp, #28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	460b      	mov	r3, r1
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	333c      	adds	r3, #60	@ 0x3c
 8010b26:	3304      	adds	r3, #4
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	4a26      	ldr	r2, [pc, #152]	@ (8010bc8 <USB_EP0_OutStart+0xb8>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d90a      	bls.n	8010b4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b44:	d101      	bne.n	8010b4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	e037      	b.n	8010bba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b50:	461a      	mov	r2, r3
 8010b52:	2300      	movs	r3, #0
 8010b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	697a      	ldr	r2, [r7, #20]
 8010b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b78:	f043 0318 	orr.w	r3, r3, #24
 8010b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	697a      	ldr	r2, [r7, #20]
 8010b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010b90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010b92:	7afb      	ldrb	r3, [r7, #11]
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d10f      	bne.n	8010bb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	697a      	ldr	r2, [r7, #20]
 8010bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	4f54300a 	.word	0x4f54300a

08010bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010be4:	d901      	bls.n	8010bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e01b      	b.n	8010c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	daf2      	bge.n	8010bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	691b      	ldr	r3, [r3, #16]
 8010bfa:	f043 0201 	orr.w	r2, r3, #1
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3301      	adds	r3, #1
 8010c06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010c0e:	d901      	bls.n	8010c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c10:	2303      	movs	r3, #3
 8010c12:	e006      	b.n	8010c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691b      	ldr	r3, [r3, #16]
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d0f0      	beq.n	8010c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8010c20:	2300      	movs	r3, #0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3714      	adds	r7, #20
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr
	...

08010c30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010c3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010c40:	f005 fa9e 	bl	8016180 <USBD_static_malloc>
 8010c44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d109      	bne.n	8010c60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	32b0      	adds	r2, #176	@ 0xb0
 8010c56:	2100      	movs	r1, #0
 8010c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010c5c:	2302      	movs	r3, #2
 8010c5e:	e0d4      	b.n	8010e0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010c60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010c64:	2100      	movs	r1, #0
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f006 fefe 	bl	8017a68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	32b0      	adds	r2, #176	@ 0xb0
 8010c76:	68f9      	ldr	r1, [r7, #12]
 8010c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	32b0      	adds	r2, #176	@ 0xb0
 8010c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7c1b      	ldrb	r3, [r3, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d138      	bne.n	8010d0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010c98:	4b5e      	ldr	r3, [pc, #376]	@ (8010e14 <USBD_CDC_Init+0x1e4>)
 8010c9a:	7819      	ldrb	r1, [r3, #0]
 8010c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ca0:	2202      	movs	r2, #2
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f005 f949 	bl	8015f3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8010e14 <USBD_CDC_Init+0x1e4>)
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	f003 020f 	and.w	r2, r3, #15
 8010cb0:	6879      	ldr	r1, [r7, #4]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	4413      	add	r3, r2
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	440b      	add	r3, r1
 8010cbc:	3324      	adds	r3, #36	@ 0x24
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010cc2:	4b55      	ldr	r3, [pc, #340]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010cc4:	7819      	ldrb	r1, [r3, #0]
 8010cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010cca:	2202      	movs	r2, #2
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f005 f934 	bl	8015f3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010cd2:	4b51      	ldr	r3, [pc, #324]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	f003 020f 	and.w	r2, r3, #15
 8010cda:	6879      	ldr	r1, [r7, #4]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	4413      	add	r3, r2
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	440b      	add	r3, r1
 8010ce6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010cea:	2201      	movs	r2, #1
 8010cec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010cee:	4b4b      	ldr	r3, [pc, #300]	@ (8010e1c <USBD_CDC_Init+0x1ec>)
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	f003 020f 	and.w	r2, r3, #15
 8010cf6:	6879      	ldr	r1, [r7, #4]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	440b      	add	r3, r1
 8010d02:	3326      	adds	r3, #38	@ 0x26
 8010d04:	2210      	movs	r2, #16
 8010d06:	801a      	strh	r2, [r3, #0]
 8010d08:	e035      	b.n	8010d76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010d0a:	4b42      	ldr	r3, [pc, #264]	@ (8010e14 <USBD_CDC_Init+0x1e4>)
 8010d0c:	7819      	ldrb	r1, [r3, #0]
 8010d0e:	2340      	movs	r3, #64	@ 0x40
 8010d10:	2202      	movs	r2, #2
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f005 f911 	bl	8015f3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010d18:	4b3e      	ldr	r3, [pc, #248]	@ (8010e14 <USBD_CDC_Init+0x1e4>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	f003 020f 	and.w	r2, r3, #15
 8010d20:	6879      	ldr	r1, [r7, #4]
 8010d22:	4613      	mov	r3, r2
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	440b      	add	r3, r1
 8010d2c:	3324      	adds	r3, #36	@ 0x24
 8010d2e:	2201      	movs	r2, #1
 8010d30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010d32:	4b39      	ldr	r3, [pc, #228]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010d34:	7819      	ldrb	r1, [r3, #0]
 8010d36:	2340      	movs	r3, #64	@ 0x40
 8010d38:	2202      	movs	r2, #2
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f005 f8fd 	bl	8015f3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010d40:	4b35      	ldr	r3, [pc, #212]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	f003 020f 	and.w	r2, r3, #15
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	440b      	add	r3, r1
 8010d54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010d58:	2201      	movs	r2, #1
 8010d5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8010e1c <USBD_CDC_Init+0x1ec>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	f003 020f 	and.w	r2, r3, #15
 8010d64:	6879      	ldr	r1, [r7, #4]
 8010d66:	4613      	mov	r3, r2
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	4413      	add	r3, r2
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	440b      	add	r3, r1
 8010d70:	3326      	adds	r3, #38	@ 0x26
 8010d72:	2210      	movs	r2, #16
 8010d74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d76:	4b29      	ldr	r3, [pc, #164]	@ (8010e1c <USBD_CDC_Init+0x1ec>)
 8010d78:	7819      	ldrb	r1, [r3, #0]
 8010d7a:	2308      	movs	r3, #8
 8010d7c:	2203      	movs	r2, #3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f005 f8db 	bl	8015f3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010d84:	4b25      	ldr	r3, [pc, #148]	@ (8010e1c <USBD_CDC_Init+0x1ec>)
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	f003 020f 	and.w	r2, r3, #15
 8010d8c:	6879      	ldr	r1, [r7, #4]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	4413      	add	r3, r2
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	440b      	add	r3, r1
 8010d98:	3324      	adds	r3, #36	@ 0x24
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	33b0      	adds	r3, #176	@ 0xb0
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	4413      	add	r3, r2
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d101      	bne.n	8010dd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	e018      	b.n	8010e0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	7c1b      	ldrb	r3, [r3, #16]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10a      	bne.n	8010df6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010de0:	4b0d      	ldr	r3, [pc, #52]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010de2:	7819      	ldrb	r1, [r3, #0]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f005 f992 	bl	8016118 <USBD_LL_PrepareReceive>
 8010df4:	e008      	b.n	8010e08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010df6:	4b08      	ldr	r3, [pc, #32]	@ (8010e18 <USBD_CDC_Init+0x1e8>)
 8010df8:	7819      	ldrb	r1, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e00:	2340      	movs	r3, #64	@ 0x40
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f005 f988 	bl	8016118 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	24000097 	.word	0x24000097
 8010e18:	24000098 	.word	0x24000098
 8010e1c:	24000099 	.word	0x24000099

08010e20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8010f18 <USBD_CDC_DeInit+0xf8>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	4619      	mov	r1, r3
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f005 f8a7 	bl	8015f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010e38:	4b37      	ldr	r3, [pc, #220]	@ (8010f18 <USBD_CDC_DeInit+0xf8>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	f003 020f 	and.w	r2, r3, #15
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	4613      	mov	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	4413      	add	r3, r2
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3324      	adds	r3, #36	@ 0x24
 8010e4e:	2200      	movs	r2, #0
 8010e50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010e52:	4b32      	ldr	r3, [pc, #200]	@ (8010f1c <USBD_CDC_DeInit+0xfc>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f005 f894 	bl	8015f86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f1c <USBD_CDC_DeInit+0xfc>)
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	f003 020f 	and.w	r2, r3, #15
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	440b      	add	r3, r1
 8010e72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010e76:	2200      	movs	r2, #0
 8010e78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010e7a:	4b29      	ldr	r3, [pc, #164]	@ (8010f20 <USBD_CDC_DeInit+0x100>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	4619      	mov	r1, r3
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f005 f880 	bl	8015f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010e86:	4b26      	ldr	r3, [pc, #152]	@ (8010f20 <USBD_CDC_DeInit+0x100>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	f003 020f 	and.w	r2, r3, #15
 8010e8e:	6879      	ldr	r1, [r7, #4]
 8010e90:	4613      	mov	r3, r2
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	4413      	add	r3, r2
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	440b      	add	r3, r1
 8010e9a:	3324      	adds	r3, #36	@ 0x24
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8010f20 <USBD_CDC_DeInit+0x100>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	f003 020f 	and.w	r2, r3, #15
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	4413      	add	r3, r2
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	440b      	add	r3, r1
 8010eb4:	3326      	adds	r3, #38	@ 0x26
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	32b0      	adds	r2, #176	@ 0xb0
 8010ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d01f      	beq.n	8010f0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	33b0      	adds	r3, #176	@ 0xb0
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	32b0      	adds	r2, #176	@ 0xb0
 8010eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f005 f954 	bl	801619c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	32b0      	adds	r2, #176	@ 0xb0
 8010efe:	2100      	movs	r1, #0
 8010f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010f0c:	2300      	movs	r3, #0
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3708      	adds	r7, #8
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	24000097 	.word	0x24000097
 8010f1c:	24000098 	.word	0x24000098
 8010f20:	24000099 	.word	0x24000099

08010f24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	32b0      	adds	r2, #176	@ 0xb0
 8010f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010f42:	2300      	movs	r3, #0
 8010f44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f46:	2300      	movs	r3, #0
 8010f48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010f50:	2303      	movs	r3, #3
 8010f52:	e0bf      	b.n	80110d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d050      	beq.n	8011002 <USBD_CDC_Setup+0xde>
 8010f60:	2b20      	cmp	r3, #32
 8010f62:	f040 80af 	bne.w	80110c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	88db      	ldrh	r3, [r3, #6]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d03a      	beq.n	8010fe4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	b25b      	sxtb	r3, r3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	da1b      	bge.n	8010fb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	33b0      	adds	r3, #176	@ 0xb0
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	4413      	add	r3, r2
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	689b      	ldr	r3, [r3, #8]
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010f8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010f90:	683a      	ldr	r2, [r7, #0]
 8010f92:	88d2      	ldrh	r2, [r2, #6]
 8010f94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	88db      	ldrh	r3, [r3, #6]
 8010f9a:	2b07      	cmp	r3, #7
 8010f9c:	bf28      	it	cs
 8010f9e:	2307      	movcs	r3, #7
 8010fa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	89fa      	ldrh	r2, [r7, #14]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f001 fdbd 	bl	8012b28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010fae:	e090      	b.n	80110d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	785a      	ldrb	r2, [r3, #1]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	88db      	ldrh	r3, [r3, #6]
 8010fbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8010fc0:	d803      	bhi.n	8010fca <USBD_CDC_Setup+0xa6>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	88db      	ldrh	r3, [r3, #6]
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	e000      	b.n	8010fcc <USBD_CDC_Setup+0xa8>
 8010fca:	2240      	movs	r2, #64	@ 0x40
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010fd2:	6939      	ldr	r1, [r7, #16]
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010fda:	461a      	mov	r2, r3
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f001 fdcf 	bl	8012b80 <USBD_CtlPrepareRx>
      break;
 8010fe2:	e076      	b.n	80110d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	33b0      	adds	r3, #176	@ 0xb0
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	7850      	ldrb	r0, [r2, #1]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	6839      	ldr	r1, [r7, #0]
 8010ffe:	4798      	blx	r3
      break;
 8011000:	e067      	b.n	80110d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	785b      	ldrb	r3, [r3, #1]
 8011006:	2b0b      	cmp	r3, #11
 8011008:	d851      	bhi.n	80110ae <USBD_CDC_Setup+0x18a>
 801100a:	a201      	add	r2, pc, #4	@ (adr r2, 8011010 <USBD_CDC_Setup+0xec>)
 801100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011010:	08011041 	.word	0x08011041
 8011014:	080110bd 	.word	0x080110bd
 8011018:	080110af 	.word	0x080110af
 801101c:	080110af 	.word	0x080110af
 8011020:	080110af 	.word	0x080110af
 8011024:	080110af 	.word	0x080110af
 8011028:	080110af 	.word	0x080110af
 801102c:	080110af 	.word	0x080110af
 8011030:	080110af 	.word	0x080110af
 8011034:	080110af 	.word	0x080110af
 8011038:	0801106b 	.word	0x0801106b
 801103c:	08011095 	.word	0x08011095
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011046:	b2db      	uxtb	r3, r3
 8011048:	2b03      	cmp	r3, #3
 801104a:	d107      	bne.n	801105c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801104c:	f107 030a 	add.w	r3, r7, #10
 8011050:	2202      	movs	r2, #2
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f001 fd67 	bl	8012b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801105a:	e032      	b.n	80110c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801105c:	6839      	ldr	r1, [r7, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f001 fce5 	bl	8012a2e <USBD_CtlError>
            ret = USBD_FAIL;
 8011064:	2303      	movs	r3, #3
 8011066:	75fb      	strb	r3, [r7, #23]
          break;
 8011068:	e02b      	b.n	80110c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011070:	b2db      	uxtb	r3, r3
 8011072:	2b03      	cmp	r3, #3
 8011074:	d107      	bne.n	8011086 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011076:	f107 030d 	add.w	r3, r7, #13
 801107a:	2201      	movs	r2, #1
 801107c:	4619      	mov	r1, r3
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f001 fd52 	bl	8012b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011084:	e01d      	b.n	80110c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f001 fcd0 	bl	8012a2e <USBD_CtlError>
            ret = USBD_FAIL;
 801108e:	2303      	movs	r3, #3
 8011090:	75fb      	strb	r3, [r7, #23]
          break;
 8011092:	e016      	b.n	80110c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801109a:	b2db      	uxtb	r3, r3
 801109c:	2b03      	cmp	r3, #3
 801109e:	d00f      	beq.n	80110c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f001 fcc3 	bl	8012a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80110a8:	2303      	movs	r3, #3
 80110aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80110ac:	e008      	b.n	80110c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f001 fcbc 	bl	8012a2e <USBD_CtlError>
          ret = USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	75fb      	strb	r3, [r7, #23]
          break;
 80110ba:	e002      	b.n	80110c2 <USBD_CDC_Setup+0x19e>
          break;
 80110bc:	bf00      	nop
 80110be:	e008      	b.n	80110d2 <USBD_CDC_Setup+0x1ae>
          break;
 80110c0:	bf00      	nop
      }
      break;
 80110c2:	e006      	b.n	80110d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f001 fcb1 	bl	8012a2e <USBD_CtlError>
      ret = USBD_FAIL;
 80110cc:	2303      	movs	r3, #3
 80110ce:	75fb      	strb	r3, [r7, #23]
      break;
 80110d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3718      	adds	r7, #24
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	32b0      	adds	r2, #176	@ 0xb0
 80110fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011102:	2303      	movs	r3, #3
 8011104:	e065      	b.n	80111d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	32b0      	adds	r2, #176	@ 0xb0
 8011110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011114:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011116:	78fb      	ldrb	r3, [r7, #3]
 8011118:	f003 020f 	and.w	r2, r3, #15
 801111c:	6879      	ldr	r1, [r7, #4]
 801111e:	4613      	mov	r3, r2
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4413      	add	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	440b      	add	r3, r1
 8011128:	3318      	adds	r3, #24
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d02f      	beq.n	8011190 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011130:	78fb      	ldrb	r3, [r7, #3]
 8011132:	f003 020f 	and.w	r2, r3, #15
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	4613      	mov	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	4413      	add	r3, r2
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	440b      	add	r3, r1
 8011142:	3318      	adds	r3, #24
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	78fb      	ldrb	r3, [r7, #3]
 8011148:	f003 010f 	and.w	r1, r3, #15
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	460b      	mov	r3, r1
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	440b      	add	r3, r1
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4403      	add	r3, r0
 8011158:	331c      	adds	r3, #28
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011160:	fb01 f303 	mul.w	r3, r1, r3
 8011164:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011166:	2b00      	cmp	r3, #0
 8011168:	d112      	bne.n	8011190 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801116a:	78fb      	ldrb	r3, [r7, #3]
 801116c:	f003 020f 	and.w	r2, r3, #15
 8011170:	6879      	ldr	r1, [r7, #4]
 8011172:	4613      	mov	r3, r2
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4413      	add	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	440b      	add	r3, r1
 801117c:	3318      	adds	r3, #24
 801117e:	2200      	movs	r2, #0
 8011180:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011182:	78f9      	ldrb	r1, [r7, #3]
 8011184:	2300      	movs	r3, #0
 8011186:	2200      	movs	r2, #0
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f004 ffa4 	bl	80160d6 <USBD_LL_Transmit>
 801118e:	e01f      	b.n	80111d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	2200      	movs	r2, #0
 8011194:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	33b0      	adds	r3, #176	@ 0xb0
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4413      	add	r3, r2
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d010      	beq.n	80111d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	33b0      	adds	r3, #176	@ 0xb0
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	4413      	add	r3, r2
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	691b      	ldr	r3, [r3, #16]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80111cc:	78fa      	ldrb	r2, [r7, #3]
 80111ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b084      	sub	sp, #16
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	460b      	mov	r3, r1
 80111e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	32b0      	adds	r2, #176	@ 0xb0
 80111f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	32b0      	adds	r2, #176	@ 0xb0
 8011200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011208:	2303      	movs	r3, #3
 801120a:	e01a      	b.n	8011242 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801120c:	78fb      	ldrb	r3, [r7, #3]
 801120e:	4619      	mov	r1, r3
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f004 ffa2 	bl	801615a <USBD_LL_GetRxDataSize>
 8011216:	4602      	mov	r2, r0
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	33b0      	adds	r3, #176	@ 0xb0
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	4413      	add	r3, r2
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801123c:	4611      	mov	r1, r2
 801123e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b084      	sub	sp, #16
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	32b0      	adds	r2, #176	@ 0xb0
 801125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011268:	2303      	movs	r3, #3
 801126a:	e024      	b.n	80112b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	33b0      	adds	r3, #176	@ 0xb0
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	4413      	add	r3, r2
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d019      	beq.n	80112b4 <USBD_CDC_EP0_RxReady+0x6a>
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011286:	2bff      	cmp	r3, #255	@ 0xff
 8011288:	d014      	beq.n	80112b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	33b0      	adds	r3, #176	@ 0xb0
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80112a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80112aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	22ff      	movs	r2, #255	@ 0xff
 80112b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
	...

080112c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80112c8:	2182      	movs	r1, #130	@ 0x82
 80112ca:	4818      	ldr	r0, [pc, #96]	@ (801132c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112cc:	f000 fd4f 	bl	8011d6e <USBD_GetEpDesc>
 80112d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80112d2:	2101      	movs	r1, #1
 80112d4:	4815      	ldr	r0, [pc, #84]	@ (801132c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112d6:	f000 fd4a 	bl	8011d6e <USBD_GetEpDesc>
 80112da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80112dc:	2181      	movs	r1, #129	@ 0x81
 80112de:	4813      	ldr	r0, [pc, #76]	@ (801132c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112e0:	f000 fd45 	bl	8011d6e <USBD_GetEpDesc>
 80112e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	2210      	movs	r2, #16
 80112f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d006      	beq.n	8011306 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011300:	711a      	strb	r2, [r3, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d006      	beq.n	801131a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2200      	movs	r2, #0
 8011310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011314:	711a      	strb	r2, [r3, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2243      	movs	r2, #67	@ 0x43
 801131e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011320:	4b02      	ldr	r3, [pc, #8]	@ (801132c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011322:	4618      	mov	r0, r3
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	24000054 	.word	0x24000054

08011330 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011338:	2182      	movs	r1, #130	@ 0x82
 801133a:	4818      	ldr	r0, [pc, #96]	@ (801139c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801133c:	f000 fd17 	bl	8011d6e <USBD_GetEpDesc>
 8011340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011342:	2101      	movs	r1, #1
 8011344:	4815      	ldr	r0, [pc, #84]	@ (801139c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011346:	f000 fd12 	bl	8011d6e <USBD_GetEpDesc>
 801134a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801134c:	2181      	movs	r1, #129	@ 0x81
 801134e:	4813      	ldr	r0, [pc, #76]	@ (801139c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011350:	f000 fd0d 	bl	8011d6e <USBD_GetEpDesc>
 8011354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	2210      	movs	r2, #16
 8011360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d006      	beq.n	8011376 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	2200      	movs	r2, #0
 801136c:	711a      	strb	r2, [r3, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	f042 0202 	orr.w	r2, r2, #2
 8011374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d006      	beq.n	801138a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2200      	movs	r2, #0
 8011380:	711a      	strb	r2, [r3, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	f042 0202 	orr.w	r2, r2, #2
 8011388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2243      	movs	r2, #67	@ 0x43
 801138e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011390:	4b02      	ldr	r3, [pc, #8]	@ (801139c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	24000054 	.word	0x24000054

080113a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80113a8:	2182      	movs	r1, #130	@ 0x82
 80113aa:	4818      	ldr	r0, [pc, #96]	@ (801140c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113ac:	f000 fcdf 	bl	8011d6e <USBD_GetEpDesc>
 80113b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80113b2:	2101      	movs	r1, #1
 80113b4:	4815      	ldr	r0, [pc, #84]	@ (801140c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113b6:	f000 fcda 	bl	8011d6e <USBD_GetEpDesc>
 80113ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80113bc:	2181      	movs	r1, #129	@ 0x81
 80113be:	4813      	ldr	r0, [pc, #76]	@ (801140c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80113c0:	f000 fcd5 	bl	8011d6e <USBD_GetEpDesc>
 80113c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d002      	beq.n	80113d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	2210      	movs	r2, #16
 80113d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d006      	beq.n	80113e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	2200      	movs	r2, #0
 80113dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80113e0:	711a      	strb	r2, [r3, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d006      	beq.n	80113fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80113f4:	711a      	strb	r2, [r3, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2243      	movs	r2, #67	@ 0x43
 80113fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011400:	4b02      	ldr	r3, [pc, #8]	@ (801140c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011402:	4618      	mov	r0, r3
 8011404:	3718      	adds	r7, #24
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	24000054 	.word	0x24000054

08011410 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	220a      	movs	r2, #10
 801141c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801141e:	4b03      	ldr	r3, [pc, #12]	@ (801142c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011420:	4618      	mov	r0, r3
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	24000010 	.word	0x24000010

08011430 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011440:	2303      	movs	r3, #3
 8011442:	e009      	b.n	8011458 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	33b0      	adds	r3, #176	@ 0xb0
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4413      	add	r3, r2
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011464:	b480      	push	{r7}
 8011466:	b087      	sub	sp, #28
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	32b0      	adds	r2, #176	@ 0xb0
 801147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801147e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011486:	2303      	movs	r3, #3
 8011488:	e008      	b.n	801149c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	371c      	adds	r7, #28
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr

080114a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b085      	sub	sp, #20
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	32b0      	adds	r2, #176	@ 0xb0
 80114bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d101      	bne.n	80114cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80114c8:	2303      	movs	r3, #3
 80114ca:	e004      	b.n	80114d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	683a      	ldr	r2, [r7, #0]
 80114d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3714      	adds	r7, #20
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr
	...

080114e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	32b0      	adds	r2, #176	@ 0xb0
 80114f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80114fc:	2301      	movs	r3, #1
 80114fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d101      	bne.n	801150a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011506:	2303      	movs	r3, #3
 8011508:	e025      	b.n	8011556 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011510:	2b00      	cmp	r3, #0
 8011512:	d11f      	bne.n	8011554 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	2201      	movs	r2, #1
 8011518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801151c:	4b10      	ldr	r3, [pc, #64]	@ (8011560 <USBD_CDC_TransmitPacket+0x7c>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	f003 020f 	and.w	r2, r3, #15
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	4613      	mov	r3, r2
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	4413      	add	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4403      	add	r3, r0
 8011536:	3318      	adds	r3, #24
 8011538:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801153a:	4b09      	ldr	r3, [pc, #36]	@ (8011560 <USBD_CDC_TransmitPacket+0x7c>)
 801153c:	7819      	ldrb	r1, [r3, #0]
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f004 fdc3 	bl	80160d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011550:	2300      	movs	r3, #0
 8011552:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011554:	7bfb      	ldrb	r3, [r7, #15]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	24000097 	.word	0x24000097

08011564 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	32b0      	adds	r2, #176	@ 0xb0
 8011576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801157a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	32b0      	adds	r2, #176	@ 0xb0
 8011586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801158e:	2303      	movs	r3, #3
 8011590:	e018      	b.n	80115c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	7c1b      	ldrb	r3, [r3, #16]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10a      	bne.n	80115b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801159a:	4b0c      	ldr	r3, [pc, #48]	@ (80115cc <USBD_CDC_ReceivePacket+0x68>)
 801159c:	7819      	ldrb	r1, [r3, #0]
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80115a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f004 fdb5 	bl	8016118 <USBD_LL_PrepareReceive>
 80115ae:	e008      	b.n	80115c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80115b0:	4b06      	ldr	r3, [pc, #24]	@ (80115cc <USBD_CDC_ReceivePacket+0x68>)
 80115b2:	7819      	ldrb	r1, [r3, #0]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80115ba:	2340      	movs	r3, #64	@ 0x40
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f004 fdab 	bl	8016118 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3710      	adds	r7, #16
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	24000098 	.word	0x24000098

080115d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b086      	sub	sp, #24
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4613      	mov	r3, r2
 80115dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d101      	bne.n	80115e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80115e4:	2303      	movs	r3, #3
 80115e6:	e01f      	b.n	8011628 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2200      	movs	r2, #0
 80115ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2200      	movs	r2, #0
 80115fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d003      	beq.n	801160e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	79fa      	ldrb	r2, [r7, #7]
 801161a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f004 fc21 	bl	8015e64 <USBD_LL_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011626:	7dfb      	ldrb	r3, [r7, #23]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801163a:	2300      	movs	r3, #0
 801163c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d101      	bne.n	8011648 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011644:	2303      	movs	r3, #3
 8011646:	e025      	b.n	8011694 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	32ae      	adds	r2, #174	@ 0xae
 801165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00f      	beq.n	8011684 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	32ae      	adds	r2, #174	@ 0xae
 801166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011674:	f107 020e 	add.w	r2, r7, #14
 8011678:	4610      	mov	r0, r2
 801167a:	4798      	blx	r3
 801167c:	4602      	mov	r2, r0
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011692:	2300      	movs	r3, #0
}
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f004 fc2d 	bl	8015f04 <USBD_LL_Start>
 80116aa:	4603      	mov	r3, r0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80116bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80116be:	4618      	mov	r0, r3
 80116c0:	370c      	adds	r7, #12
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr

080116ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b084      	sub	sp, #16
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	460b      	mov	r3, r1
 80116d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d009      	beq.n	80116f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	78fa      	ldrb	r2, [r7, #3]
 80116ee:	4611      	mov	r1, r2
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	4798      	blx	r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b084      	sub	sp, #16
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
 801170a:	460b      	mov	r3, r1
 801170c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801170e:	2300      	movs	r3, #0
 8011710:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	78fa      	ldrb	r2, [r7, #3]
 801171c:	4611      	mov	r1, r2
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	4798      	blx	r3
 8011722:	4603      	mov	r3, r0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d001      	beq.n	801172c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011728:	2303      	movs	r3, #3
 801172a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801172c:	7bfb      	ldrb	r3, [r7, #15]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b084      	sub	sp, #16
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011746:	6839      	ldr	r1, [r7, #0]
 8011748:	4618      	mov	r0, r3
 801174a:	f001 f936 	bl	80129ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2201      	movs	r2, #1
 8011752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801175c:	461a      	mov	r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801176a:	f003 031f 	and.w	r3, r3, #31
 801176e:	2b02      	cmp	r3, #2
 8011770:	d01a      	beq.n	80117a8 <USBD_LL_SetupStage+0x72>
 8011772:	2b02      	cmp	r3, #2
 8011774:	d822      	bhi.n	80117bc <USBD_LL_SetupStage+0x86>
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <USBD_LL_SetupStage+0x4a>
 801177a:	2b01      	cmp	r3, #1
 801177c:	d00a      	beq.n	8011794 <USBD_LL_SetupStage+0x5e>
 801177e:	e01d      	b.n	80117bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 fb63 	bl	8011e54 <USBD_StdDevReq>
 801178e:	4603      	mov	r3, r0
 8011790:	73fb      	strb	r3, [r7, #15]
      break;
 8011792:	e020      	b.n	80117d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801179a:	4619      	mov	r1, r3
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f000 fbcb 	bl	8011f38 <USBD_StdItfReq>
 80117a2:	4603      	mov	r3, r0
 80117a4:	73fb      	strb	r3, [r7, #15]
      break;
 80117a6:	e016      	b.n	80117d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80117ae:	4619      	mov	r1, r3
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fc2d 	bl	8012010 <USBD_StdEPReq>
 80117b6:	4603      	mov	r3, r0
 80117b8:	73fb      	strb	r3, [r7, #15]
      break;
 80117ba:	e00c      	b.n	80117d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80117c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	4619      	mov	r1, r3
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f004 fbfa 	bl	8015fc4 <USBD_LL_StallEP>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73fb      	strb	r3, [r7, #15]
      break;
 80117d4:	bf00      	nop
  }

  return ret;
 80117d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3710      	adds	r7, #16
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b086      	sub	sp, #24
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	460b      	mov	r3, r1
 80117ea:	607a      	str	r2, [r7, #4]
 80117ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80117f2:	7afb      	ldrb	r3, [r7, #11]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d16e      	bne.n	80118d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80117fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011806:	2b03      	cmp	r3, #3
 8011808:	f040 8098 	bne.w	801193c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	689a      	ldr	r2, [r3, #8]
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	429a      	cmp	r2, r3
 8011816:	d913      	bls.n	8011840 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	689a      	ldr	r2, [r3, #8]
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	1ad2      	subs	r2, r2, r3
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	68da      	ldr	r2, [r3, #12]
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	689b      	ldr	r3, [r3, #8]
 801182e:	4293      	cmp	r3, r2
 8011830:	bf28      	it	cs
 8011832:	4613      	movcs	r3, r2
 8011834:	461a      	mov	r2, r3
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f001 f9be 	bl	8012bba <USBD_CtlContinueRx>
 801183e:	e07d      	b.n	801193c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011846:	f003 031f 	and.w	r3, r3, #31
 801184a:	2b02      	cmp	r3, #2
 801184c:	d014      	beq.n	8011878 <USBD_LL_DataOutStage+0x98>
 801184e:	2b02      	cmp	r3, #2
 8011850:	d81d      	bhi.n	801188e <USBD_LL_DataOutStage+0xae>
 8011852:	2b00      	cmp	r3, #0
 8011854:	d002      	beq.n	801185c <USBD_LL_DataOutStage+0x7c>
 8011856:	2b01      	cmp	r3, #1
 8011858:	d003      	beq.n	8011862 <USBD_LL_DataOutStage+0x82>
 801185a:	e018      	b.n	801188e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801185c:	2300      	movs	r3, #0
 801185e:	75bb      	strb	r3, [r7, #22]
            break;
 8011860:	e018      	b.n	8011894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011868:	b2db      	uxtb	r3, r3
 801186a:	4619      	mov	r1, r3
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 fa64 	bl	8011d3a <USBD_CoreFindIF>
 8011872:	4603      	mov	r3, r0
 8011874:	75bb      	strb	r3, [r7, #22]
            break;
 8011876:	e00d      	b.n	8011894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801187e:	b2db      	uxtb	r3, r3
 8011880:	4619      	mov	r1, r3
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f000 fa66 	bl	8011d54 <USBD_CoreFindEP>
 8011888:	4603      	mov	r3, r0
 801188a:	75bb      	strb	r3, [r7, #22]
            break;
 801188c:	e002      	b.n	8011894 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801188e:	2300      	movs	r3, #0
 8011890:	75bb      	strb	r3, [r7, #22]
            break;
 8011892:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011894:	7dbb      	ldrb	r3, [r7, #22]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d119      	bne.n	80118ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	2b03      	cmp	r3, #3
 80118a4:	d113      	bne.n	80118ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80118a6:	7dba      	ldrb	r2, [r7, #22]
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	32ae      	adds	r2, #174	@ 0xae
 80118ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b0:	691b      	ldr	r3, [r3, #16]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00b      	beq.n	80118ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80118b6:	7dba      	ldrb	r2, [r7, #22]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80118be:	7dba      	ldrb	r2, [r7, #22]
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	32ae      	adds	r2, #174	@ 0xae
 80118c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f001 f984 	bl	8012bdc <USBD_CtlSendStatus>
 80118d4:	e032      	b.n	801193c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80118d6:	7afb      	ldrb	r3, [r7, #11]
 80118d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	4619      	mov	r1, r3
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f000 fa37 	bl	8011d54 <USBD_CoreFindEP>
 80118e6:	4603      	mov	r3, r0
 80118e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118ea:	7dbb      	ldrb	r3, [r7, #22]
 80118ec:	2bff      	cmp	r3, #255	@ 0xff
 80118ee:	d025      	beq.n	801193c <USBD_LL_DataOutStage+0x15c>
 80118f0:	7dbb      	ldrb	r3, [r7, #22]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d122      	bne.n	801193c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	2b03      	cmp	r3, #3
 8011900:	d117      	bne.n	8011932 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011902:	7dba      	ldrb	r2, [r7, #22]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	32ae      	adds	r2, #174	@ 0xae
 8011908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801190c:	699b      	ldr	r3, [r3, #24]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00f      	beq.n	8011932 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011912:	7dba      	ldrb	r2, [r7, #22]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801191a:	7dba      	ldrb	r2, [r7, #22]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	32ae      	adds	r2, #174	@ 0xae
 8011920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011924:	699b      	ldr	r3, [r3, #24]
 8011926:	7afa      	ldrb	r2, [r7, #11]
 8011928:	4611      	mov	r1, r2
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	4798      	blx	r3
 801192e:	4603      	mov	r3, r0
 8011930:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011932:	7dfb      	ldrb	r3, [r7, #23]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d001      	beq.n	801193c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011938:	7dfb      	ldrb	r3, [r7, #23]
 801193a:	e000      	b.n	801193e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3718      	adds	r7, #24
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b086      	sub	sp, #24
 801194a:	af00      	add	r7, sp, #0
 801194c:	60f8      	str	r0, [r7, #12]
 801194e:	460b      	mov	r3, r1
 8011950:	607a      	str	r2, [r7, #4]
 8011952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011954:	7afb      	ldrb	r3, [r7, #11]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d16f      	bne.n	8011a3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	3314      	adds	r3, #20
 801195e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011966:	2b02      	cmp	r3, #2
 8011968:	d15a      	bne.n	8011a20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	689a      	ldr	r2, [r3, #8]
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	429a      	cmp	r2, r3
 8011974:	d914      	bls.n	80119a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	689a      	ldr	r2, [r3, #8]
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	1ad2      	subs	r2, r2, r3
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	461a      	mov	r2, r3
 801198a:	6879      	ldr	r1, [r7, #4]
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f001 f8e6 	bl	8012b5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011992:	2300      	movs	r3, #0
 8011994:	2200      	movs	r2, #0
 8011996:	2100      	movs	r1, #0
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f004 fbbd 	bl	8016118 <USBD_LL_PrepareReceive>
 801199e:	e03f      	b.n	8011a20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	68da      	ldr	r2, [r3, #12]
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	689b      	ldr	r3, [r3, #8]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d11c      	bne.n	80119e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	685a      	ldr	r2, [r3, #4]
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d316      	bcc.n	80119e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d20f      	bcs.n	80119e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80119c6:	2200      	movs	r2, #0
 80119c8:	2100      	movs	r1, #0
 80119ca:	68f8      	ldr	r0, [r7, #12]
 80119cc:	f001 f8c7 	bl	8012b5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80119d8:	2300      	movs	r3, #0
 80119da:	2200      	movs	r2, #0
 80119dc:	2100      	movs	r1, #0
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f004 fb9a 	bl	8016118 <USBD_LL_PrepareReceive>
 80119e4:	e01c      	b.n	8011a20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	2b03      	cmp	r3, #3
 80119f0:	d10f      	bne.n	8011a12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d009      	beq.n	8011a12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a12:	2180      	movs	r1, #128	@ 0x80
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f004 fad5 	bl	8015fc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f001 f8f1 	bl	8012c02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d03a      	beq.n	8011aa0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f7ff fe42 	bl	80116b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2200      	movs	r2, #0
 8011a34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011a38:	e032      	b.n	8011aa0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011a3a:	7afb      	ldrb	r3, [r7, #11]
 8011a3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 f985 	bl	8011d54 <USBD_CoreFindEP>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a4e:	7dfb      	ldrb	r3, [r7, #23]
 8011a50:	2bff      	cmp	r3, #255	@ 0xff
 8011a52:	d025      	beq.n	8011aa0 <USBD_LL_DataInStage+0x15a>
 8011a54:	7dfb      	ldrb	r3, [r7, #23]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d122      	bne.n	8011aa0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b03      	cmp	r3, #3
 8011a64:	d11c      	bne.n	8011aa0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011a66:	7dfa      	ldrb	r2, [r7, #23]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	32ae      	adds	r2, #174	@ 0xae
 8011a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a70:	695b      	ldr	r3, [r3, #20]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d014      	beq.n	8011aa0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011a76:	7dfa      	ldrb	r2, [r7, #23]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011a7e:	7dfa      	ldrb	r2, [r7, #23]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	32ae      	adds	r2, #174	@ 0xae
 8011a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	7afa      	ldrb	r2, [r7, #11]
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	4798      	blx	r3
 8011a92:	4603      	mov	r3, r0
 8011a94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011a96:	7dbb      	ldrb	r3, [r7, #22]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011a9c:	7dbb      	ldrb	r3, [r7, #22]
 8011a9e:	e000      	b.n	8011aa2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d014      	beq.n	8011b10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00e      	beq.n	8011b10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	6852      	ldr	r2, [r2, #4]
 8011afe:	b2d2      	uxtb	r2, r2
 8011b00:	4611      	mov	r1, r2
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	4798      	blx	r3
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d001      	beq.n	8011b10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011b0c:	2303      	movs	r3, #3
 8011b0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b10:	2340      	movs	r3, #64	@ 0x40
 8011b12:	2200      	movs	r2, #0
 8011b14:	2100      	movs	r1, #0
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f004 fa0f 	bl	8015f3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2240      	movs	r2, #64	@ 0x40
 8011b28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b2c:	2340      	movs	r3, #64	@ 0x40
 8011b2e:	2200      	movs	r2, #0
 8011b30:	2180      	movs	r1, #128	@ 0x80
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f004 fa01 	bl	8015f3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2240      	movs	r2, #64	@ 0x40
 8011b42:	621a      	str	r2, [r3, #32]

  return ret;
 8011b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	460b      	mov	r3, r1
 8011b58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	78fa      	ldrb	r2, [r7, #3]
 8011b5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	370c      	adds	r7, #12
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b083      	sub	sp, #12
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d006      	beq.n	8011b90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2204      	movs	r2, #4
 8011b94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	370c      	adds	r7, #12
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr

08011ba6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ba6:	b480      	push	{r7}
 8011ba8:	b083      	sub	sp, #12
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b04      	cmp	r3, #4
 8011bb8:	d106      	bne.n	8011bc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	370c      	adds	r7, #12
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr

08011bd6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011bd6:	b580      	push	{r7, lr}
 8011bd8:	b082      	sub	sp, #8
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b03      	cmp	r3, #3
 8011be8:	d110      	bne.n	8011c0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00b      	beq.n	8011c0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bfa:	69db      	ldr	r3, [r3, #28]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c06:	69db      	ldr	r3, [r3, #28]
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011c0c:	2300      	movs	r3, #0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	460b      	mov	r3, r1
 8011c20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	32ae      	adds	r2, #174	@ 0xae
 8011c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d101      	bne.n	8011c38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011c34:	2303      	movs	r3, #3
 8011c36:	e01c      	b.n	8011c72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d115      	bne.n	8011c70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	32ae      	adds	r2, #174	@ 0xae
 8011c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c52:	6a1b      	ldr	r3, [r3, #32]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00b      	beq.n	8011c70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	32ae      	adds	r2, #174	@ 0xae
 8011c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c66:	6a1b      	ldr	r3, [r3, #32]
 8011c68:	78fa      	ldrb	r2, [r7, #3]
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b082      	sub	sp, #8
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	460b      	mov	r3, r1
 8011c84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	32ae      	adds	r2, #174	@ 0xae
 8011c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d101      	bne.n	8011c9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	e01c      	b.n	8011cd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d115      	bne.n	8011cd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	32ae      	adds	r2, #174	@ 0xae
 8011cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00b      	beq.n	8011cd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	32ae      	adds	r2, #174	@ 0xae
 8011cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ccc:	78fa      	ldrb	r2, [r7, #3]
 8011cce:	4611      	mov	r1, r2
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011cd4:	2300      	movs	r3, #0
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ce6:	2300      	movs	r3, #0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2201      	movs	r2, #1
 8011d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00e      	beq.n	8011d30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	6852      	ldr	r2, [r2, #4]
 8011d1e:	b2d2      	uxtb	r2, r2
 8011d20:	4611      	mov	r1, r2
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	4798      	blx	r3
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011d2c:	2303      	movs	r3, #3
 8011d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011d3a:	b480      	push	{r7}
 8011d3c:	b083      	sub	sp, #12
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	460b      	mov	r3, r1
 8011d44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011d46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	370c      	adds	r7, #12
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr

08011d54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011d60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr

08011d6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b086      	sub	sp, #24
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	460b      	mov	r3, r1
 8011d78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011d82:	2300      	movs	r3, #0
 8011d84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	885b      	ldrh	r3, [r3, #2]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	68fa      	ldr	r2, [r7, #12]
 8011d8e:	7812      	ldrb	r2, [r2, #0]
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d91f      	bls.n	8011dd4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011d9a:	e013      	b.n	8011dc4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011d9c:	f107 030a 	add.w	r3, r7, #10
 8011da0:	4619      	mov	r1, r3
 8011da2:	6978      	ldr	r0, [r7, #20]
 8011da4:	f000 f81b 	bl	8011dde <USBD_GetNextDesc>
 8011da8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	785b      	ldrb	r3, [r3, #1]
 8011dae:	2b05      	cmp	r3, #5
 8011db0:	d108      	bne.n	8011dc4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	789b      	ldrb	r3, [r3, #2]
 8011dba:	78fa      	ldrb	r2, [r7, #3]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d008      	beq.n	8011dd2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	885b      	ldrh	r3, [r3, #2]
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	897b      	ldrh	r3, [r7, #10]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d8e5      	bhi.n	8011d9c <USBD_GetEpDesc+0x2e>
 8011dd0:	e000      	b.n	8011dd4 <USBD_GetEpDesc+0x66>
          break;
 8011dd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011dd4:	693b      	ldr	r3, [r7, #16]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3718      	adds	r7, #24
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011dde:	b480      	push	{r7}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	7812      	ldrb	r2, [r2, #0]
 8011df4:	4413      	add	r3, r2
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4413      	add	r3, r2
 8011e06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011e08:	68fb      	ldr	r3, [r7, #12]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr

08011e16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011e16:	b480      	push	{r7}
 8011e18:	b087      	sub	sp, #28
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011e34:	8a3b      	ldrh	r3, [r7, #16]
 8011e36:	021b      	lsls	r3, r3, #8
 8011e38:	b21a      	sxth	r2, r3
 8011e3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	b21b      	sxth	r3, r3
 8011e42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011e44:	89fb      	ldrh	r3, [r7, #14]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	371c      	adds	r7, #28
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr
	...

08011e54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e6a:	2b40      	cmp	r3, #64	@ 0x40
 8011e6c:	d005      	beq.n	8011e7a <USBD_StdDevReq+0x26>
 8011e6e:	2b40      	cmp	r3, #64	@ 0x40
 8011e70:	d857      	bhi.n	8011f22 <USBD_StdDevReq+0xce>
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00f      	beq.n	8011e96 <USBD_StdDevReq+0x42>
 8011e76:	2b20      	cmp	r3, #32
 8011e78:	d153      	bne.n	8011f22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	32ae      	adds	r2, #174	@ 0xae
 8011e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	6839      	ldr	r1, [r7, #0]
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	4798      	blx	r3
 8011e90:	4603      	mov	r3, r0
 8011e92:	73fb      	strb	r3, [r7, #15]
      break;
 8011e94:	e04a      	b.n	8011f2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	785b      	ldrb	r3, [r3, #1]
 8011e9a:	2b09      	cmp	r3, #9
 8011e9c:	d83b      	bhi.n	8011f16 <USBD_StdDevReq+0xc2>
 8011e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8011ea4 <USBD_StdDevReq+0x50>)
 8011ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea4:	08011ef9 	.word	0x08011ef9
 8011ea8:	08011f0d 	.word	0x08011f0d
 8011eac:	08011f17 	.word	0x08011f17
 8011eb0:	08011f03 	.word	0x08011f03
 8011eb4:	08011f17 	.word	0x08011f17
 8011eb8:	08011ed7 	.word	0x08011ed7
 8011ebc:	08011ecd 	.word	0x08011ecd
 8011ec0:	08011f17 	.word	0x08011f17
 8011ec4:	08011eef 	.word	0x08011eef
 8011ec8:	08011ee1 	.word	0x08011ee1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011ecc:	6839      	ldr	r1, [r7, #0]
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fa3c 	bl	801234c <USBD_GetDescriptor>
          break;
 8011ed4:	e024      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fbcb 	bl	8012674 <USBD_SetAddress>
          break;
 8011ede:	e01f      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fc0a 	bl	80126fc <USBD_SetConfig>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73fb      	strb	r3, [r7, #15]
          break;
 8011eec:	e018      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 fcad 	bl	8012850 <USBD_GetConfig>
          break;
 8011ef6:	e013      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fcde 	bl	80128bc <USBD_GetStatus>
          break;
 8011f00:	e00e      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011f02:	6839      	ldr	r1, [r7, #0]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 fd0d 	bl	8012924 <USBD_SetFeature>
          break;
 8011f0a:	e009      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fd31 	bl	8012976 <USBD_ClrFeature>
          break;
 8011f14:	e004      	b.n	8011f20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011f16:	6839      	ldr	r1, [r7, #0]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f000 fd88 	bl	8012a2e <USBD_CtlError>
          break;
 8011f1e:	bf00      	nop
      }
      break;
 8011f20:	e004      	b.n	8011f2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011f22:	6839      	ldr	r1, [r7, #0]
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f000 fd82 	bl	8012a2e <USBD_CtlError>
      break;
 8011f2a:	bf00      	nop
  }

  return ret;
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop

08011f38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f42:	2300      	movs	r3, #0
 8011f44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011f4e:	2b40      	cmp	r3, #64	@ 0x40
 8011f50:	d005      	beq.n	8011f5e <USBD_StdItfReq+0x26>
 8011f52:	2b40      	cmp	r3, #64	@ 0x40
 8011f54:	d852      	bhi.n	8011ffc <USBD_StdItfReq+0xc4>
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <USBD_StdItfReq+0x26>
 8011f5a:	2b20      	cmp	r3, #32
 8011f5c:	d14e      	bne.n	8011ffc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	3b01      	subs	r3, #1
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d840      	bhi.n	8011fee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	889b      	ldrh	r3, [r3, #4]
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d836      	bhi.n	8011fe4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	889b      	ldrh	r3, [r3, #4]
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7ff fedb 	bl	8011d3a <USBD_CoreFindIF>
 8011f84:	4603      	mov	r3, r0
 8011f86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f88:	7bbb      	ldrb	r3, [r7, #14]
 8011f8a:	2bff      	cmp	r3, #255	@ 0xff
 8011f8c:	d01d      	beq.n	8011fca <USBD_StdItfReq+0x92>
 8011f8e:	7bbb      	ldrb	r3, [r7, #14]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d11a      	bne.n	8011fca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011f94:	7bba      	ldrb	r2, [r7, #14]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	32ae      	adds	r2, #174	@ 0xae
 8011f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d00f      	beq.n	8011fc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011fa4:	7bba      	ldrb	r2, [r7, #14]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011fac:	7bba      	ldrb	r2, [r7, #14]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	32ae      	adds	r2, #174	@ 0xae
 8011fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	4798      	blx	r3
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011fc2:	e004      	b.n	8011fce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011fc4:	2303      	movs	r3, #3
 8011fc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011fc8:	e001      	b.n	8011fce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011fca:	2303      	movs	r3, #3
 8011fcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	88db      	ldrh	r3, [r3, #6]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d110      	bne.n	8011ff8 <USBD_StdItfReq+0xc0>
 8011fd6:	7bfb      	ldrb	r3, [r7, #15]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10d      	bne.n	8011ff8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fdfd 	bl	8012bdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011fe2:	e009      	b.n	8011ff8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011fe4:	6839      	ldr	r1, [r7, #0]
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fd21 	bl	8012a2e <USBD_CtlError>
          break;
 8011fec:	e004      	b.n	8011ff8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 fd1c 	bl	8012a2e <USBD_CtlError>
          break;
 8011ff6:	e000      	b.n	8011ffa <USBD_StdItfReq+0xc2>
          break;
 8011ff8:	bf00      	nop
      }
      break;
 8011ffa:	e004      	b.n	8012006 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 fd15 	bl	8012a2e <USBD_CtlError>
      break;
 8012004:	bf00      	nop
  }

  return ret;
 8012006:	7bfb      	ldrb	r3, [r7, #15]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3710      	adds	r7, #16
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	889b      	ldrh	r3, [r3, #4]
 8012022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801202c:	2b40      	cmp	r3, #64	@ 0x40
 801202e:	d007      	beq.n	8012040 <USBD_StdEPReq+0x30>
 8012030:	2b40      	cmp	r3, #64	@ 0x40
 8012032:	f200 817f 	bhi.w	8012334 <USBD_StdEPReq+0x324>
 8012036:	2b00      	cmp	r3, #0
 8012038:	d02a      	beq.n	8012090 <USBD_StdEPReq+0x80>
 801203a:	2b20      	cmp	r3, #32
 801203c:	f040 817a 	bne.w	8012334 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012040:	7bbb      	ldrb	r3, [r7, #14]
 8012042:	4619      	mov	r1, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff fe85 	bl	8011d54 <USBD_CoreFindEP>
 801204a:	4603      	mov	r3, r0
 801204c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801204e:	7b7b      	ldrb	r3, [r7, #13]
 8012050:	2bff      	cmp	r3, #255	@ 0xff
 8012052:	f000 8174 	beq.w	801233e <USBD_StdEPReq+0x32e>
 8012056:	7b7b      	ldrb	r3, [r7, #13]
 8012058:	2b00      	cmp	r3, #0
 801205a:	f040 8170 	bne.w	801233e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801205e:	7b7a      	ldrb	r2, [r7, #13]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012066:	7b7a      	ldrb	r2, [r7, #13]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	32ae      	adds	r2, #174	@ 0xae
 801206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012070:	689b      	ldr	r3, [r3, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	f000 8163 	beq.w	801233e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012078:	7b7a      	ldrb	r2, [r7, #13]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	32ae      	adds	r2, #174	@ 0xae
 801207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	4798      	blx	r3
 801208a:	4603      	mov	r3, r0
 801208c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801208e:	e156      	b.n	801233e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	785b      	ldrb	r3, [r3, #1]
 8012094:	2b03      	cmp	r3, #3
 8012096:	d008      	beq.n	80120aa <USBD_StdEPReq+0x9a>
 8012098:	2b03      	cmp	r3, #3
 801209a:	f300 8145 	bgt.w	8012328 <USBD_StdEPReq+0x318>
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f000 809b 	beq.w	80121da <USBD_StdEPReq+0x1ca>
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d03c      	beq.n	8012122 <USBD_StdEPReq+0x112>
 80120a8:	e13e      	b.n	8012328 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	2b02      	cmp	r3, #2
 80120b4:	d002      	beq.n	80120bc <USBD_StdEPReq+0xac>
 80120b6:	2b03      	cmp	r3, #3
 80120b8:	d016      	beq.n	80120e8 <USBD_StdEPReq+0xd8>
 80120ba:	e02c      	b.n	8012116 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120bc:	7bbb      	ldrb	r3, [r7, #14]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00d      	beq.n	80120de <USBD_StdEPReq+0xce>
 80120c2:	7bbb      	ldrb	r3, [r7, #14]
 80120c4:	2b80      	cmp	r3, #128	@ 0x80
 80120c6:	d00a      	beq.n	80120de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80120c8:	7bbb      	ldrb	r3, [r7, #14]
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f003 ff79 	bl	8015fc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80120d2:	2180      	movs	r1, #128	@ 0x80
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f003 ff75 	bl	8015fc4 <USBD_LL_StallEP>
 80120da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80120dc:	e020      	b.n	8012120 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fca4 	bl	8012a2e <USBD_CtlError>
              break;
 80120e6:	e01b      	b.n	8012120 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	885b      	ldrh	r3, [r3, #2]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10e      	bne.n	801210e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80120f0:	7bbb      	ldrb	r3, [r7, #14]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00b      	beq.n	801210e <USBD_StdEPReq+0xfe>
 80120f6:	7bbb      	ldrb	r3, [r7, #14]
 80120f8:	2b80      	cmp	r3, #128	@ 0x80
 80120fa:	d008      	beq.n	801210e <USBD_StdEPReq+0xfe>
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	88db      	ldrh	r3, [r3, #6]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d104      	bne.n	801210e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012104:	7bbb      	ldrb	r3, [r7, #14]
 8012106:	4619      	mov	r1, r3
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f003 ff5b 	bl	8015fc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fd64 	bl	8012bdc <USBD_CtlSendStatus>

              break;
 8012114:	e004      	b.n	8012120 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012116:	6839      	ldr	r1, [r7, #0]
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 fc88 	bl	8012a2e <USBD_CtlError>
              break;
 801211e:	bf00      	nop
          }
          break;
 8012120:	e107      	b.n	8012332 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b02      	cmp	r3, #2
 801212c:	d002      	beq.n	8012134 <USBD_StdEPReq+0x124>
 801212e:	2b03      	cmp	r3, #3
 8012130:	d016      	beq.n	8012160 <USBD_StdEPReq+0x150>
 8012132:	e04b      	b.n	80121cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012134:	7bbb      	ldrb	r3, [r7, #14]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d00d      	beq.n	8012156 <USBD_StdEPReq+0x146>
 801213a:	7bbb      	ldrb	r3, [r7, #14]
 801213c:	2b80      	cmp	r3, #128	@ 0x80
 801213e:	d00a      	beq.n	8012156 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012140:	7bbb      	ldrb	r3, [r7, #14]
 8012142:	4619      	mov	r1, r3
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f003 ff3d 	bl	8015fc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801214a:	2180      	movs	r1, #128	@ 0x80
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f003 ff39 	bl	8015fc4 <USBD_LL_StallEP>
 8012152:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012154:	e040      	b.n	80121d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012156:	6839      	ldr	r1, [r7, #0]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 fc68 	bl	8012a2e <USBD_CtlError>
              break;
 801215e:	e03b      	b.n	80121d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	885b      	ldrh	r3, [r3, #2]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d136      	bne.n	80121d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012168:	7bbb      	ldrb	r3, [r7, #14]
 801216a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801216e:	2b00      	cmp	r3, #0
 8012170:	d004      	beq.n	801217c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012172:	7bbb      	ldrb	r3, [r7, #14]
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f003 ff43 	bl	8016002 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 fd2d 	bl	8012bdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012182:	7bbb      	ldrb	r3, [r7, #14]
 8012184:	4619      	mov	r1, r3
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fde4 	bl	8011d54 <USBD_CoreFindEP>
 801218c:	4603      	mov	r3, r0
 801218e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012190:	7b7b      	ldrb	r3, [r7, #13]
 8012192:	2bff      	cmp	r3, #255	@ 0xff
 8012194:	d01f      	beq.n	80121d6 <USBD_StdEPReq+0x1c6>
 8012196:	7b7b      	ldrb	r3, [r7, #13]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d11c      	bne.n	80121d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801219c:	7b7a      	ldrb	r2, [r7, #13]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80121a4:	7b7a      	ldrb	r2, [r7, #13]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	32ae      	adds	r2, #174	@ 0xae
 80121aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ae:	689b      	ldr	r3, [r3, #8]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d010      	beq.n	80121d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80121b4:	7b7a      	ldrb	r2, [r7, #13]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	32ae      	adds	r2, #174	@ 0xae
 80121ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	4798      	blx	r3
 80121c6:	4603      	mov	r3, r0
 80121c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80121ca:	e004      	b.n	80121d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80121cc:	6839      	ldr	r1, [r7, #0]
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 fc2d 	bl	8012a2e <USBD_CtlError>
              break;
 80121d4:	e000      	b.n	80121d8 <USBD_StdEPReq+0x1c8>
              break;
 80121d6:	bf00      	nop
          }
          break;
 80121d8:	e0ab      	b.n	8012332 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d002      	beq.n	80121ec <USBD_StdEPReq+0x1dc>
 80121e6:	2b03      	cmp	r3, #3
 80121e8:	d032      	beq.n	8012250 <USBD_StdEPReq+0x240>
 80121ea:	e097      	b.n	801231c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121ec:	7bbb      	ldrb	r3, [r7, #14]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d007      	beq.n	8012202 <USBD_StdEPReq+0x1f2>
 80121f2:	7bbb      	ldrb	r3, [r7, #14]
 80121f4:	2b80      	cmp	r3, #128	@ 0x80
 80121f6:	d004      	beq.n	8012202 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fc17 	bl	8012a2e <USBD_CtlError>
                break;
 8012200:	e091      	b.n	8012326 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012206:	2b00      	cmp	r3, #0
 8012208:	da0b      	bge.n	8012222 <USBD_StdEPReq+0x212>
 801220a:	7bbb      	ldrb	r3, [r7, #14]
 801220c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012210:	4613      	mov	r3, r2
 8012212:	009b      	lsls	r3, r3, #2
 8012214:	4413      	add	r3, r2
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	3310      	adds	r3, #16
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	4413      	add	r3, r2
 801221e:	3304      	adds	r3, #4
 8012220:	e00b      	b.n	801223a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012222:	7bbb      	ldrb	r3, [r7, #14]
 8012224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012228:	4613      	mov	r3, r2
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4413      	add	r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	4413      	add	r3, r2
 8012238:	3304      	adds	r3, #4
 801223a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	2200      	movs	r2, #0
 8012240:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	2202      	movs	r2, #2
 8012246:	4619      	mov	r1, r3
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 fc6d 	bl	8012b28 <USBD_CtlSendData>
              break;
 801224e:	e06a      	b.n	8012326 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012254:	2b00      	cmp	r3, #0
 8012256:	da11      	bge.n	801227c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012258:	7bbb      	ldrb	r3, [r7, #14]
 801225a:	f003 020f 	and.w	r2, r3, #15
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	4613      	mov	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	4413      	add	r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	440b      	add	r3, r1
 801226a:	3324      	adds	r3, #36	@ 0x24
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d117      	bne.n	80122a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 fbda 	bl	8012a2e <USBD_CtlError>
                  break;
 801227a:	e054      	b.n	8012326 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801227c:	7bbb      	ldrb	r3, [r7, #14]
 801227e:	f003 020f 	and.w	r2, r3, #15
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	4613      	mov	r3, r2
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	4413      	add	r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	440b      	add	r3, r1
 801228e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d104      	bne.n	80122a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 fbc7 	bl	8012a2e <USBD_CtlError>
                  break;
 80122a0:	e041      	b.n	8012326 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	da0b      	bge.n	80122c2 <USBD_StdEPReq+0x2b2>
 80122aa:	7bbb      	ldrb	r3, [r7, #14]
 80122ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80122b0:	4613      	mov	r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	4413      	add	r3, r2
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	3310      	adds	r3, #16
 80122ba:	687a      	ldr	r2, [r7, #4]
 80122bc:	4413      	add	r3, r2
 80122be:	3304      	adds	r3, #4
 80122c0:	e00b      	b.n	80122da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80122c2:	7bbb      	ldrb	r3, [r7, #14]
 80122c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122c8:	4613      	mov	r3, r2
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	4413      	add	r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	4413      	add	r3, r2
 80122d8:	3304      	adds	r3, #4
 80122da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d002      	beq.n	80122e8 <USBD_StdEPReq+0x2d8>
 80122e2:	7bbb      	ldrb	r3, [r7, #14]
 80122e4:	2b80      	cmp	r3, #128	@ 0x80
 80122e6:	d103      	bne.n	80122f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	2200      	movs	r2, #0
 80122ec:	601a      	str	r2, [r3, #0]
 80122ee:	e00e      	b.n	801230e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80122f0:	7bbb      	ldrb	r3, [r7, #14]
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f003 fea3 	bl	8016040 <USBD_LL_IsStallEP>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d003      	beq.n	8012308 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	2201      	movs	r2, #1
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	e002      	b.n	801230e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	2200      	movs	r2, #0
 801230c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	2202      	movs	r2, #2
 8012312:	4619      	mov	r1, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fc07 	bl	8012b28 <USBD_CtlSendData>
              break;
 801231a:	e004      	b.n	8012326 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801231c:	6839      	ldr	r1, [r7, #0]
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 fb85 	bl	8012a2e <USBD_CtlError>
              break;
 8012324:	bf00      	nop
          }
          break;
 8012326:	e004      	b.n	8012332 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fb7f 	bl	8012a2e <USBD_CtlError>
          break;
 8012330:	bf00      	nop
      }
      break;
 8012332:	e005      	b.n	8012340 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 fb79 	bl	8012a2e <USBD_CtlError>
      break;
 801233c:	e000      	b.n	8012340 <USBD_StdEPReq+0x330>
      break;
 801233e:	bf00      	nop
  }

  return ret;
 8012340:	7bfb      	ldrb	r3, [r7, #15]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
	...

0801234c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012356:	2300      	movs	r3, #0
 8012358:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801235a:	2300      	movs	r3, #0
 801235c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801235e:	2300      	movs	r3, #0
 8012360:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	885b      	ldrh	r3, [r3, #2]
 8012366:	0a1b      	lsrs	r3, r3, #8
 8012368:	b29b      	uxth	r3, r3
 801236a:	3b01      	subs	r3, #1
 801236c:	2b0e      	cmp	r3, #14
 801236e:	f200 8152 	bhi.w	8012616 <USBD_GetDescriptor+0x2ca>
 8012372:	a201      	add	r2, pc, #4	@ (adr r2, 8012378 <USBD_GetDescriptor+0x2c>)
 8012374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012378:	080123e9 	.word	0x080123e9
 801237c:	08012401 	.word	0x08012401
 8012380:	08012441 	.word	0x08012441
 8012384:	08012617 	.word	0x08012617
 8012388:	08012617 	.word	0x08012617
 801238c:	080125b7 	.word	0x080125b7
 8012390:	080125e3 	.word	0x080125e3
 8012394:	08012617 	.word	0x08012617
 8012398:	08012617 	.word	0x08012617
 801239c:	08012617 	.word	0x08012617
 80123a0:	08012617 	.word	0x08012617
 80123a4:	08012617 	.word	0x08012617
 80123a8:	08012617 	.word	0x08012617
 80123ac:	08012617 	.word	0x08012617
 80123b0:	080123b5 	.word	0x080123b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123ba:	69db      	ldr	r3, [r3, #28]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00b      	beq.n	80123d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123c6:	69db      	ldr	r3, [r3, #28]
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	7c12      	ldrb	r2, [r2, #16]
 80123cc:	f107 0108 	add.w	r1, r7, #8
 80123d0:	4610      	mov	r0, r2
 80123d2:	4798      	blx	r3
 80123d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123d6:	e126      	b.n	8012626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123d8:	6839      	ldr	r1, [r7, #0]
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 fb27 	bl	8012a2e <USBD_CtlError>
        err++;
 80123e0:	7afb      	ldrb	r3, [r7, #11]
 80123e2:	3301      	adds	r3, #1
 80123e4:	72fb      	strb	r3, [r7, #11]
      break;
 80123e6:	e11e      	b.n	8012626 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	7c12      	ldrb	r2, [r2, #16]
 80123f4:	f107 0108 	add.w	r1, r7, #8
 80123f8:	4610      	mov	r0, r2
 80123fa:	4798      	blx	r3
 80123fc:	60f8      	str	r0, [r7, #12]
      break;
 80123fe:	e112      	b.n	8012626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	7c1b      	ldrb	r3, [r3, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10d      	bne.n	8012424 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012410:	f107 0208 	add.w	r2, r7, #8
 8012414:	4610      	mov	r0, r2
 8012416:	4798      	blx	r3
 8012418:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	3301      	adds	r3, #1
 801241e:	2202      	movs	r2, #2
 8012420:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012422:	e100      	b.n	8012626 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801242c:	f107 0208 	add.w	r2, r7, #8
 8012430:	4610      	mov	r0, r2
 8012432:	4798      	blx	r3
 8012434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3301      	adds	r3, #1
 801243a:	2202      	movs	r2, #2
 801243c:	701a      	strb	r2, [r3, #0]
      break;
 801243e:	e0f2      	b.n	8012626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	885b      	ldrh	r3, [r3, #2]
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b05      	cmp	r3, #5
 8012448:	f200 80ac 	bhi.w	80125a4 <USBD_GetDescriptor+0x258>
 801244c:	a201      	add	r2, pc, #4	@ (adr r2, 8012454 <USBD_GetDescriptor+0x108>)
 801244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012452:	bf00      	nop
 8012454:	0801246d 	.word	0x0801246d
 8012458:	080124a1 	.word	0x080124a1
 801245c:	080124d5 	.word	0x080124d5
 8012460:	08012509 	.word	0x08012509
 8012464:	0801253d 	.word	0x0801253d
 8012468:	08012571 	.word	0x08012571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00b      	beq.n	8012490 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	7c12      	ldrb	r2, [r2, #16]
 8012484:	f107 0108 	add.w	r1, r7, #8
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
 801248c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801248e:	e091      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012490:	6839      	ldr	r1, [r7, #0]
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 facb 	bl	8012a2e <USBD_CtlError>
            err++;
 8012498:	7afb      	ldrb	r3, [r7, #11]
 801249a:	3301      	adds	r3, #1
 801249c:	72fb      	strb	r3, [r7, #11]
          break;
 801249e:	e089      	b.n	80125b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00b      	beq.n	80124c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	7c12      	ldrb	r2, [r2, #16]
 80124b8:	f107 0108 	add.w	r1, r7, #8
 80124bc:	4610      	mov	r0, r2
 80124be:	4798      	blx	r3
 80124c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124c2:	e077      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fab1 	bl	8012a2e <USBD_CtlError>
            err++;
 80124cc:	7afb      	ldrb	r3, [r7, #11]
 80124ce:	3301      	adds	r3, #1
 80124d0:	72fb      	strb	r3, [r7, #11]
          break;
 80124d2:	e06f      	b.n	80125b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d00b      	beq.n	80124f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	7c12      	ldrb	r2, [r2, #16]
 80124ec:	f107 0108 	add.w	r1, r7, #8
 80124f0:	4610      	mov	r0, r2
 80124f2:	4798      	blx	r3
 80124f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124f6:	e05d      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fa97 	bl	8012a2e <USBD_CtlError>
            err++;
 8012500:	7afb      	ldrb	r3, [r7, #11]
 8012502:	3301      	adds	r3, #1
 8012504:	72fb      	strb	r3, [r7, #11]
          break;
 8012506:	e055      	b.n	80125b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00b      	beq.n	801252c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801251a:	691b      	ldr	r3, [r3, #16]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	7c12      	ldrb	r2, [r2, #16]
 8012520:	f107 0108 	add.w	r1, r7, #8
 8012524:	4610      	mov	r0, r2
 8012526:	4798      	blx	r3
 8012528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801252a:	e043      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 fa7d 	bl	8012a2e <USBD_CtlError>
            err++;
 8012534:	7afb      	ldrb	r3, [r7, #11]
 8012536:	3301      	adds	r3, #1
 8012538:	72fb      	strb	r3, [r7, #11]
          break;
 801253a:	e03b      	b.n	80125b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012542:	695b      	ldr	r3, [r3, #20]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00b      	beq.n	8012560 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801254e:	695b      	ldr	r3, [r3, #20]
 8012550:	687a      	ldr	r2, [r7, #4]
 8012552:	7c12      	ldrb	r2, [r2, #16]
 8012554:	f107 0108 	add.w	r1, r7, #8
 8012558:	4610      	mov	r0, r2
 801255a:	4798      	blx	r3
 801255c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801255e:	e029      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012560:	6839      	ldr	r1, [r7, #0]
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f000 fa63 	bl	8012a2e <USBD_CtlError>
            err++;
 8012568:	7afb      	ldrb	r3, [r7, #11]
 801256a:	3301      	adds	r3, #1
 801256c:	72fb      	strb	r3, [r7, #11]
          break;
 801256e:	e021      	b.n	80125b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00b      	beq.n	8012594 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012582:	699b      	ldr	r3, [r3, #24]
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	7c12      	ldrb	r2, [r2, #16]
 8012588:	f107 0108 	add.w	r1, r7, #8
 801258c:	4610      	mov	r0, r2
 801258e:	4798      	blx	r3
 8012590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012592:	e00f      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012594:	6839      	ldr	r1, [r7, #0]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 fa49 	bl	8012a2e <USBD_CtlError>
            err++;
 801259c:	7afb      	ldrb	r3, [r7, #11]
 801259e:	3301      	adds	r3, #1
 80125a0:	72fb      	strb	r3, [r7, #11]
          break;
 80125a2:	e007      	b.n	80125b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f000 fa41 	bl	8012a2e <USBD_CtlError>
          err++;
 80125ac:	7afb      	ldrb	r3, [r7, #11]
 80125ae:	3301      	adds	r3, #1
 80125b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80125b2:	bf00      	nop
      }
      break;
 80125b4:	e037      	b.n	8012626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	7c1b      	ldrb	r3, [r3, #16]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d109      	bne.n	80125d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125c6:	f107 0208 	add.w	r2, r7, #8
 80125ca:	4610      	mov	r0, r2
 80125cc:	4798      	blx	r3
 80125ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125d0:	e029      	b.n	8012626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80125d2:	6839      	ldr	r1, [r7, #0]
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 fa2a 	bl	8012a2e <USBD_CtlError>
        err++;
 80125da:	7afb      	ldrb	r3, [r7, #11]
 80125dc:	3301      	adds	r3, #1
 80125de:	72fb      	strb	r3, [r7, #11]
      break;
 80125e0:	e021      	b.n	8012626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	7c1b      	ldrb	r3, [r3, #16]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d10d      	bne.n	8012606 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125f2:	f107 0208 	add.w	r2, r7, #8
 80125f6:	4610      	mov	r0, r2
 80125f8:	4798      	blx	r3
 80125fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	3301      	adds	r3, #1
 8012600:	2207      	movs	r2, #7
 8012602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012604:	e00f      	b.n	8012626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 fa10 	bl	8012a2e <USBD_CtlError>
        err++;
 801260e:	7afb      	ldrb	r3, [r7, #11]
 8012610:	3301      	adds	r3, #1
 8012612:	72fb      	strb	r3, [r7, #11]
      break;
 8012614:	e007      	b.n	8012626 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012616:	6839      	ldr	r1, [r7, #0]
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f000 fa08 	bl	8012a2e <USBD_CtlError>
      err++;
 801261e:	7afb      	ldrb	r3, [r7, #11]
 8012620:	3301      	adds	r3, #1
 8012622:	72fb      	strb	r3, [r7, #11]
      break;
 8012624:	bf00      	nop
  }

  if (err != 0U)
 8012626:	7afb      	ldrb	r3, [r7, #11]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d11e      	bne.n	801266a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	88db      	ldrh	r3, [r3, #6]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d016      	beq.n	8012662 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012634:	893b      	ldrh	r3, [r7, #8]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	88da      	ldrh	r2, [r3, #6]
 801263e:	893b      	ldrh	r3, [r7, #8]
 8012640:	4293      	cmp	r3, r2
 8012642:	bf28      	it	cs
 8012644:	4613      	movcs	r3, r2
 8012646:	b29b      	uxth	r3, r3
 8012648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801264a:	893b      	ldrh	r3, [r7, #8]
 801264c:	461a      	mov	r2, r3
 801264e:	68f9      	ldr	r1, [r7, #12]
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f000 fa69 	bl	8012b28 <USBD_CtlSendData>
 8012656:	e009      	b.n	801266c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 f9e7 	bl	8012a2e <USBD_CtlError>
 8012660:	e004      	b.n	801266c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 faba 	bl	8012bdc <USBD_CtlSendStatus>
 8012668:	e000      	b.n	801266c <USBD_GetDescriptor+0x320>
    return;
 801266a:	bf00      	nop
  }
}
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop

08012674 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	889b      	ldrh	r3, [r3, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d131      	bne.n	80126ea <USBD_SetAddress+0x76>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	88db      	ldrh	r3, [r3, #6]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d12d      	bne.n	80126ea <USBD_SetAddress+0x76>
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	885b      	ldrh	r3, [r3, #2]
 8012692:	2b7f      	cmp	r3, #127	@ 0x7f
 8012694:	d829      	bhi.n	80126ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	885b      	ldrh	r3, [r3, #2]
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b03      	cmp	r3, #3
 80126ac:	d104      	bne.n	80126b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80126ae:	6839      	ldr	r1, [r7, #0]
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 f9bc 	bl	8012a2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126b6:	e01d      	b.n	80126f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	7bfa      	ldrb	r2, [r7, #15]
 80126bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80126c0:	7bfb      	ldrb	r3, [r7, #15]
 80126c2:	4619      	mov	r1, r3
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f003 fce7 	bl	8016098 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 fa86 	bl	8012bdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80126d0:	7bfb      	ldrb	r3, [r7, #15]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d004      	beq.n	80126e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2202      	movs	r2, #2
 80126da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126de:	e009      	b.n	80126f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126e8:	e004      	b.n	80126f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f99e 	bl	8012a2e <USBD_CtlError>
  }
}
 80126f2:	bf00      	nop
 80126f4:	bf00      	nop
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012706:	2300      	movs	r3, #0
 8012708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	885b      	ldrh	r3, [r3, #2]
 801270e:	b2da      	uxtb	r2, r3
 8012710:	4b4e      	ldr	r3, [pc, #312]	@ (801284c <USBD_SetConfig+0x150>)
 8012712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012714:	4b4d      	ldr	r3, [pc, #308]	@ (801284c <USBD_SetConfig+0x150>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	2b01      	cmp	r3, #1
 801271a:	d905      	bls.n	8012728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801271c:	6839      	ldr	r1, [r7, #0]
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 f985 	bl	8012a2e <USBD_CtlError>
    return USBD_FAIL;
 8012724:	2303      	movs	r3, #3
 8012726:	e08c      	b.n	8012842 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801272e:	b2db      	uxtb	r3, r3
 8012730:	2b02      	cmp	r3, #2
 8012732:	d002      	beq.n	801273a <USBD_SetConfig+0x3e>
 8012734:	2b03      	cmp	r3, #3
 8012736:	d029      	beq.n	801278c <USBD_SetConfig+0x90>
 8012738:	e075      	b.n	8012826 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801273a:	4b44      	ldr	r3, [pc, #272]	@ (801284c <USBD_SetConfig+0x150>)
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d020      	beq.n	8012784 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012742:	4b42      	ldr	r3, [pc, #264]	@ (801284c <USBD_SetConfig+0x150>)
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	461a      	mov	r2, r3
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801274c:	4b3f      	ldr	r3, [pc, #252]	@ (801284c <USBD_SetConfig+0x150>)
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7fe ffb9 	bl	80116ca <USBD_SetClassConfig>
 8012758:	4603      	mov	r3, r0
 801275a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801275c:	7bfb      	ldrb	r3, [r7, #15]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d008      	beq.n	8012774 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012762:	6839      	ldr	r1, [r7, #0]
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 f962 	bl	8012a2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2202      	movs	r2, #2
 801276e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012772:	e065      	b.n	8012840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 fa31 	bl	8012bdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2203      	movs	r2, #3
 801277e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012782:	e05d      	b.n	8012840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 fa29 	bl	8012bdc <USBD_CtlSendStatus>
      break;
 801278a:	e059      	b.n	8012840 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801278c:	4b2f      	ldr	r3, [pc, #188]	@ (801284c <USBD_SetConfig+0x150>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d112      	bne.n	80127ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2202      	movs	r2, #2
 8012798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801279c:	4b2b      	ldr	r3, [pc, #172]	@ (801284c <USBD_SetConfig+0x150>)
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	461a      	mov	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80127a6:	4b29      	ldr	r3, [pc, #164]	@ (801284c <USBD_SetConfig+0x150>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	4619      	mov	r1, r3
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7fe ffa8 	bl	8011702 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 fa12 	bl	8012bdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80127b8:	e042      	b.n	8012840 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80127ba:	4b24      	ldr	r3, [pc, #144]	@ (801284c <USBD_SetConfig+0x150>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	461a      	mov	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d02a      	beq.n	801281e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	4619      	mov	r1, r3
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7fe ff96 	bl	8011702 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80127d6:	4b1d      	ldr	r3, [pc, #116]	@ (801284c <USBD_SetConfig+0x150>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	461a      	mov	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80127e0:	4b1a      	ldr	r3, [pc, #104]	@ (801284c <USBD_SetConfig+0x150>)
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	4619      	mov	r1, r3
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7fe ff6f 	bl	80116ca <USBD_SetClassConfig>
 80127ec:	4603      	mov	r3, r0
 80127ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d00f      	beq.n	8012816 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80127f6:	6839      	ldr	r1, [r7, #0]
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 f918 	bl	8012a2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	b2db      	uxtb	r3, r3
 8012804:	4619      	mov	r1, r3
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f7fe ff7b 	bl	8011702 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2202      	movs	r2, #2
 8012810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012814:	e014      	b.n	8012840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f9e0 	bl	8012bdc <USBD_CtlSendStatus>
      break;
 801281c:	e010      	b.n	8012840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 f9dc 	bl	8012bdc <USBD_CtlSendStatus>
      break;
 8012824:	e00c      	b.n	8012840 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f900 	bl	8012a2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801282e:	4b07      	ldr	r3, [pc, #28]	@ (801284c <USBD_SetConfig+0x150>)
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	4619      	mov	r1, r3
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7fe ff64 	bl	8011702 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801283a:	2303      	movs	r3, #3
 801283c:	73fb      	strb	r3, [r7, #15]
      break;
 801283e:	bf00      	nop
  }

  return ret;
 8012840:	7bfb      	ldrb	r3, [r7, #15]
}
 8012842:	4618      	mov	r0, r3
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	24070f30 	.word	0x24070f30

08012850 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	88db      	ldrh	r3, [r3, #6]
 801285e:	2b01      	cmp	r3, #1
 8012860:	d004      	beq.n	801286c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012862:	6839      	ldr	r1, [r7, #0]
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 f8e2 	bl	8012a2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801286a:	e023      	b.n	80128b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012872:	b2db      	uxtb	r3, r3
 8012874:	2b02      	cmp	r3, #2
 8012876:	dc02      	bgt.n	801287e <USBD_GetConfig+0x2e>
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc03      	bgt.n	8012884 <USBD_GetConfig+0x34>
 801287c:	e015      	b.n	80128aa <USBD_GetConfig+0x5a>
 801287e:	2b03      	cmp	r3, #3
 8012880:	d00b      	beq.n	801289a <USBD_GetConfig+0x4a>
 8012882:	e012      	b.n	80128aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3308      	adds	r3, #8
 801288e:	2201      	movs	r2, #1
 8012890:	4619      	mov	r1, r3
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f948 	bl	8012b28 <USBD_CtlSendData>
        break;
 8012898:	e00c      	b.n	80128b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3304      	adds	r3, #4
 801289e:	2201      	movs	r2, #1
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f940 	bl	8012b28 <USBD_CtlSendData>
        break;
 80128a8:	e004      	b.n	80128b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f8be 	bl	8012a2e <USBD_CtlError>
        break;
 80128b2:	bf00      	nop
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	3b01      	subs	r3, #1
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d81e      	bhi.n	8012912 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	88db      	ldrh	r3, [r3, #6]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d004      	beq.n	80128e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 f8a5 	bl	8012a2e <USBD_CtlError>
        break;
 80128e4:	e01a      	b.n	801291c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2201      	movs	r2, #1
 80128ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d005      	beq.n	8012902 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	f043 0202 	orr.w	r2, r3, #2
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	330c      	adds	r3, #12
 8012906:	2202      	movs	r2, #2
 8012908:	4619      	mov	r1, r3
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 f90c 	bl	8012b28 <USBD_CtlSendData>
      break;
 8012910:	e004      	b.n	801291c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f88a 	bl	8012a2e <USBD_CtlError>
      break;
 801291a:	bf00      	nop
  }
}
 801291c:	bf00      	nop
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	885b      	ldrh	r3, [r3, #2]
 8012932:	2b01      	cmp	r3, #1
 8012934:	d107      	bne.n	8012946 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2201      	movs	r2, #1
 801293a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 f94c 	bl	8012bdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012944:	e013      	b.n	801296e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	885b      	ldrh	r3, [r3, #2]
 801294a:	2b02      	cmp	r3, #2
 801294c:	d10b      	bne.n	8012966 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	889b      	ldrh	r3, [r3, #4]
 8012952:	0a1b      	lsrs	r3, r3, #8
 8012954:	b29b      	uxth	r3, r3
 8012956:	b2da      	uxtb	r2, r3
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f93c 	bl	8012bdc <USBD_CtlSendStatus>
}
 8012964:	e003      	b.n	801296e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 f860 	bl	8012a2e <USBD_CtlError>
}
 801296e:	bf00      	nop
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012976:	b580      	push	{r7, lr}
 8012978:	b082      	sub	sp, #8
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
 801297e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012986:	b2db      	uxtb	r3, r3
 8012988:	3b01      	subs	r3, #1
 801298a:	2b02      	cmp	r3, #2
 801298c:	d80b      	bhi.n	80129a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	885b      	ldrh	r3, [r3, #2]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d10c      	bne.n	80129b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2200      	movs	r2, #0
 801299a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 f91c 	bl	8012bdc <USBD_CtlSendStatus>
      }
      break;
 80129a4:	e004      	b.n	80129b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80129a6:	6839      	ldr	r1, [r7, #0]
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f000 f840 	bl	8012a2e <USBD_CtlError>
      break;
 80129ae:	e000      	b.n	80129b2 <USBD_ClrFeature+0x3c>
      break;
 80129b0:	bf00      	nop
  }
}
 80129b2:	bf00      	nop
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b084      	sub	sp, #16
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	781a      	ldrb	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	3301      	adds	r3, #1
 80129d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	781a      	ldrb	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	3301      	adds	r3, #1
 80129e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f7ff fa16 	bl	8011e16 <SWAPBYTE>
 80129ea:	4603      	mov	r3, r0
 80129ec:	461a      	mov	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	3301      	adds	r3, #1
 80129f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	3301      	adds	r3, #1
 80129fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f7ff fa09 	bl	8011e16 <SWAPBYTE>
 8012a04:	4603      	mov	r3, r0
 8012a06:	461a      	mov	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	3301      	adds	r3, #1
 8012a16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f7ff f9fc 	bl	8011e16 <SWAPBYTE>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	461a      	mov	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	80da      	strh	r2, [r3, #6]
}
 8012a26:	bf00      	nop
 8012a28:	3710      	adds	r7, #16
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b082      	sub	sp, #8
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
 8012a36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012a38:	2180      	movs	r1, #128	@ 0x80
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f003 fac2 	bl	8015fc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012a40:	2100      	movs	r1, #0
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f003 fabe 	bl	8015fc4 <USBD_LL_StallEP>
}
 8012a48:	bf00      	nop
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b086      	sub	sp, #24
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d042      	beq.n	8012aec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012a6a:	6938      	ldr	r0, [r7, #16]
 8012a6c:	f000 f842 	bl	8012af4 <USBD_GetLen>
 8012a70:	4603      	mov	r3, r0
 8012a72:	3301      	adds	r3, #1
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a7a:	d808      	bhi.n	8012a8e <USBD_GetString+0x3e>
 8012a7c:	6938      	ldr	r0, [r7, #16]
 8012a7e:	f000 f839 	bl	8012af4 <USBD_GetLen>
 8012a82:	4603      	mov	r3, r0
 8012a84:	3301      	adds	r3, #1
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	005b      	lsls	r3, r3, #1
 8012a8a:	b29a      	uxth	r2, r3
 8012a8c:	e001      	b.n	8012a92 <USBD_GetString+0x42>
 8012a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012a96:	7dfb      	ldrb	r3, [r7, #23]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	7812      	ldrb	r2, [r2, #0]
 8012aa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012aa2:	7dfb      	ldrb	r3, [r7, #23]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
 8012aaa:	68ba      	ldr	r2, [r7, #8]
 8012aac:	4413      	add	r3, r2
 8012aae:	2203      	movs	r2, #3
 8012ab0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012ab2:	7dfb      	ldrb	r3, [r7, #23]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012ab8:	e013      	b.n	8012ae2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	4413      	add	r3, r2
 8012ac0:	693a      	ldr	r2, [r7, #16]
 8012ac2:	7812      	ldrb	r2, [r2, #0]
 8012ac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	3301      	adds	r3, #1
 8012aca:	613b      	str	r3, [r7, #16]
    idx++;
 8012acc:	7dfb      	ldrb	r3, [r7, #23]
 8012ace:	3301      	adds	r3, #1
 8012ad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	68ba      	ldr	r2, [r7, #8]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
    idx++;
 8012adc:	7dfb      	ldrb	r3, [r7, #23]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1e7      	bne.n	8012aba <USBD_GetString+0x6a>
 8012aea:	e000      	b.n	8012aee <USBD_GetString+0x9e>
    return;
 8012aec:	bf00      	nop
  }
}
 8012aee:	3718      	adds	r7, #24
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b04:	e005      	b.n	8012b12 <USBD_GetLen+0x1e>
  {
    len++;
 8012b06:	7bfb      	ldrb	r3, [r7, #15]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1f5      	bne.n	8012b06 <USBD_GetLen+0x12>
  }

  return len;
 8012b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3714      	adds	r7, #20
 8012b20:	46bd      	mov	sp, r7
 8012b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b26:	4770      	bx	lr

08012b28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2202      	movs	r2, #2
 8012b38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f003 fac1 	bl	80160d6 <USBD_LL_Transmit>

  return USBD_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b084      	sub	sp, #16
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	2100      	movs	r1, #0
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f003 fab0 	bl	80160d6 <USBD_LL_Transmit>

  return USBD_OK;
 8012b76:	2300      	movs	r3, #0
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3710      	adds	r7, #16
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2203      	movs	r2, #3
 8012b90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	2100      	movs	r1, #0
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	f003 fab4 	bl	8016118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bb0:	2300      	movs	r3, #0
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}

08012bba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012bba:	b580      	push	{r7, lr}
 8012bbc:	b084      	sub	sp, #16
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	60f8      	str	r0, [r7, #12]
 8012bc2:	60b9      	str	r1, [r7, #8]
 8012bc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	68ba      	ldr	r2, [r7, #8]
 8012bca:	2100      	movs	r1, #0
 8012bcc:	68f8      	ldr	r0, [r7, #12]
 8012bce:	f003 faa3 	bl	8016118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bd2:	2300      	movs	r3, #0
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2204      	movs	r2, #4
 8012be8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012bec:	2300      	movs	r3, #0
 8012bee:	2200      	movs	r2, #0
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f003 fa6f 	bl	80160d6 <USBD_LL_Transmit>

  return USBD_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}

08012c02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c02:	b580      	push	{r7, lr}
 8012c04:	b082      	sub	sp, #8
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2205      	movs	r2, #5
 8012c0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c12:	2300      	movs	r3, #0
 8012c14:	2200      	movs	r2, #0
 8012c16:	2100      	movs	r1, #0
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f003 fa7d 	bl	8016118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c1e:	2300      	movs	r3, #0
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <__NVIC_SetPriority>:
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b083      	sub	sp, #12
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	6039      	str	r1, [r7, #0]
 8012c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	db0a      	blt.n	8012c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	490c      	ldr	r1, [pc, #48]	@ (8012c74 <__NVIC_SetPriority+0x4c>)
 8012c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c46:	0112      	lsls	r2, r2, #4
 8012c48:	b2d2      	uxtb	r2, r2
 8012c4a:	440b      	add	r3, r1
 8012c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012c50:	e00a      	b.n	8012c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	b2da      	uxtb	r2, r3
 8012c56:	4908      	ldr	r1, [pc, #32]	@ (8012c78 <__NVIC_SetPriority+0x50>)
 8012c58:	88fb      	ldrh	r3, [r7, #6]
 8012c5a:	f003 030f 	and.w	r3, r3, #15
 8012c5e:	3b04      	subs	r3, #4
 8012c60:	0112      	lsls	r2, r2, #4
 8012c62:	b2d2      	uxtb	r2, r2
 8012c64:	440b      	add	r3, r1
 8012c66:	761a      	strb	r2, [r3, #24]
}
 8012c68:	bf00      	nop
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	e000e100 	.word	0xe000e100
 8012c78:	e000ed00 	.word	0xe000ed00

08012c7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012c80:	4b05      	ldr	r3, [pc, #20]	@ (8012c98 <SysTick_Handler+0x1c>)
 8012c82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012c84:	f001 fcf4 	bl	8014670 <xTaskGetSchedulerState>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d001      	beq.n	8012c92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012c8e:	f002 faeb 	bl	8015268 <xPortSysTickHandler>
  }
}
 8012c92:	bf00      	nop
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	e000e010 	.word	0xe000e010

08012c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	f06f 0004 	mvn.w	r0, #4
 8012ca6:	f7ff ffbf 	bl	8012c28 <__NVIC_SetPriority>
#endif
}
 8012caa:	bf00      	nop
 8012cac:	bd80      	pop	{r7, pc}
	...

08012cb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cb6:	f3ef 8305 	mrs	r3, IPSR
 8012cba:	603b      	str	r3, [r7, #0]
  return(result);
 8012cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d003      	beq.n	8012cca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012cc2:	f06f 0305 	mvn.w	r3, #5
 8012cc6:	607b      	str	r3, [r7, #4]
 8012cc8:	e00c      	b.n	8012ce4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012cca:	4b0a      	ldr	r3, [pc, #40]	@ (8012cf4 <osKernelInitialize+0x44>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d105      	bne.n	8012cde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012cd2:	4b08      	ldr	r3, [pc, #32]	@ (8012cf4 <osKernelInitialize+0x44>)
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	607b      	str	r3, [r7, #4]
 8012cdc:	e002      	b.n	8012ce4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012cde:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ce4:	687b      	ldr	r3, [r7, #4]
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	370c      	adds	r7, #12
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr
 8012cf2:	bf00      	nop
 8012cf4:	24070f34 	.word	0x24070f34

08012cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cfe:	f3ef 8305 	mrs	r3, IPSR
 8012d02:	603b      	str	r3, [r7, #0]
  return(result);
 8012d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d003      	beq.n	8012d12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012d0a:	f06f 0305 	mvn.w	r3, #5
 8012d0e:	607b      	str	r3, [r7, #4]
 8012d10:	e010      	b.n	8012d34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012d12:	4b0b      	ldr	r3, [pc, #44]	@ (8012d40 <osKernelStart+0x48>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d109      	bne.n	8012d2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012d1a:	f7ff ffbf 	bl	8012c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012d1e:	4b08      	ldr	r3, [pc, #32]	@ (8012d40 <osKernelStart+0x48>)
 8012d20:	2202      	movs	r2, #2
 8012d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012d24:	f001 f840 	bl	8013da8 <vTaskStartScheduler>
      stat = osOK;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	607b      	str	r3, [r7, #4]
 8012d2c:	e002      	b.n	8012d34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012d34:	687b      	ldr	r3, [r7, #4]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	24070f34 	.word	0x24070f34

08012d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b08e      	sub	sp, #56	@ 0x38
 8012d48:	af04      	add	r7, sp, #16
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012d50:	2300      	movs	r3, #0
 8012d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d54:	f3ef 8305 	mrs	r3, IPSR
 8012d58:	617b      	str	r3, [r7, #20]
  return(result);
 8012d5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d17e      	bne.n	8012e5e <osThreadNew+0x11a>
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d07b      	beq.n	8012e5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012d66:	2380      	movs	r3, #128	@ 0x80
 8012d68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012d6a:	2318      	movs	r3, #24
 8012d6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012d72:	f04f 33ff 	mov.w	r3, #4294967295
 8012d76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d045      	beq.n	8012e0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d002      	beq.n	8012d8c <osThreadNew+0x48>
        name = attr->name;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	699b      	ldr	r3, [r3, #24]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	699b      	ldr	r3, [r3, #24]
 8012d98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d008      	beq.n	8012db2 <osThreadNew+0x6e>
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	2b38      	cmp	r3, #56	@ 0x38
 8012da4:	d805      	bhi.n	8012db2 <osThreadNew+0x6e>
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	f003 0301 	and.w	r3, r3, #1
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d001      	beq.n	8012db6 <osThreadNew+0x72>
        return (NULL);
 8012db2:	2300      	movs	r3, #0
 8012db4:	e054      	b.n	8012e60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	695b      	ldr	r3, [r3, #20]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d003      	beq.n	8012dc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	695b      	ldr	r3, [r3, #20]
 8012dc2:	089b      	lsrs	r3, r3, #2
 8012dc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	689b      	ldr	r3, [r3, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d00e      	beq.n	8012dec <osThreadNew+0xa8>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	2ba7      	cmp	r3, #167	@ 0xa7
 8012dd4:	d90a      	bls.n	8012dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d006      	beq.n	8012dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	695b      	ldr	r3, [r3, #20]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d002      	beq.n	8012dec <osThreadNew+0xa8>
        mem = 1;
 8012de6:	2301      	movs	r3, #1
 8012de8:	61bb      	str	r3, [r7, #24]
 8012dea:	e010      	b.n	8012e0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	689b      	ldr	r3, [r3, #8]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d10c      	bne.n	8012e0e <osThreadNew+0xca>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d108      	bne.n	8012e0e <osThreadNew+0xca>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	691b      	ldr	r3, [r3, #16]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d104      	bne.n	8012e0e <osThreadNew+0xca>
          mem = 0;
 8012e04:	2300      	movs	r3, #0
 8012e06:	61bb      	str	r3, [r7, #24]
 8012e08:	e001      	b.n	8012e0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d110      	bne.n	8012e36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012e1c:	9202      	str	r2, [sp, #8]
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	6a3a      	ldr	r2, [r7, #32]
 8012e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f000 fdfe 	bl	8013a2c <xTaskCreateStatic>
 8012e30:	4603      	mov	r3, r0
 8012e32:	613b      	str	r3, [r7, #16]
 8012e34:	e013      	b.n	8012e5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d110      	bne.n	8012e5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012e3c:	6a3b      	ldr	r3, [r7, #32]
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	f107 0310 	add.w	r3, r7, #16
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f000 fe4c 	bl	8013aec <xTaskCreate>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d001      	beq.n	8012e5e <osThreadNew+0x11a>
            hTask = NULL;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012e5e:	693b      	ldr	r3, [r7, #16]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3728      	adds	r7, #40	@ 0x28
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e68:	b480      	push	{r7}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4a07      	ldr	r2, [pc, #28]	@ (8012e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	4a06      	ldr	r2, [pc, #24]	@ (8012e98 <vApplicationGetIdleTaskMemory+0x30>)
 8012e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2280      	movs	r2, #128	@ 0x80
 8012e84:	601a      	str	r2, [r3, #0]
}
 8012e86:	bf00      	nop
 8012e88:	3714      	adds	r7, #20
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop
 8012e94:	24070f38 	.word	0x24070f38
 8012e98:	24070fe0 	.word	0x24070fe0

08012e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4a07      	ldr	r2, [pc, #28]	@ (8012ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	4a06      	ldr	r2, [pc, #24]	@ (8012ecc <vApplicationGetTimerTaskMemory+0x30>)
 8012eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012eba:	601a      	str	r2, [r3, #0]
}
 8012ebc:	bf00      	nop
 8012ebe:	3714      	adds	r7, #20
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr
 8012ec8:	240711e0 	.word	0x240711e0
 8012ecc:	24071288 	.word	0x24071288

08012ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f103 0208 	add.w	r2, r3, #8
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f103 0208 	add.w	r2, r3, #8
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f103 0208 	add.w	r2, r3, #8
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f04:	bf00      	nop
 8012f06:	370c      	adds	r7, #12
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f10:	b480      	push	{r7}
 8012f12:	b083      	sub	sp, #12
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f1e:	bf00      	nop
 8012f20:	370c      	adds	r7, #12
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr

08012f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f2a:	b480      	push	{r7}
 8012f2c:	b085      	sub	sp, #20
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
 8012f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	689a      	ldr	r2, [r3, #8]
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	689b      	ldr	r3, [r3, #8]
 8012f4c:	683a      	ldr	r2, [r7, #0]
 8012f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	1c5a      	adds	r2, r3, #1
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	601a      	str	r2, [r3, #0]
}
 8012f66:	bf00      	nop
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f88:	d103      	bne.n	8012f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	e00c      	b.n	8012fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	3308      	adds	r3, #8
 8012f96:	60fb      	str	r3, [r7, #12]
 8012f98:	e002      	b.n	8012fa0 <vListInsert+0x2e>
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	60fb      	str	r3, [r7, #12]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	68ba      	ldr	r2, [r7, #8]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d2f6      	bcs.n	8012f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	685a      	ldr	r2, [r3, #4]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	683a      	ldr	r2, [r7, #0]
 8012fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	683a      	ldr	r2, [r7, #0]
 8012fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	1c5a      	adds	r2, r3, #1
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	601a      	str	r2, [r3, #0]
}
 8012fd8:	bf00      	nop
 8012fda:	3714      	adds	r7, #20
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr

08012fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	6892      	ldr	r2, [r2, #8]
 8012ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	6852      	ldr	r2, [r2, #4]
 8013004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	429a      	cmp	r2, r3
 801300e:	d103      	bne.n	8013018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	689a      	ldr	r2, [r3, #8]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2200      	movs	r2, #0
 801301c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	1e5a      	subs	r2, r3, #1
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	681b      	ldr	r3, [r3, #0]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10b      	bne.n	8013064 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801305e:	bf00      	nop
 8013060:	bf00      	nop
 8013062:	e7fd      	b.n	8013060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013064:	f002 f870 	bl	8015148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013070:	68f9      	ldr	r1, [r7, #12]
 8013072:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013074:	fb01 f303 	mul.w	r3, r1, r3
 8013078:	441a      	add	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2200      	movs	r2, #0
 8013082:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013094:	3b01      	subs	r3, #1
 8013096:	68f9      	ldr	r1, [r7, #12]
 8013098:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801309a:	fb01 f303 	mul.w	r3, r1, r3
 801309e:	441a      	add	r2, r3
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	22ff      	movs	r2, #255	@ 0xff
 80130a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	22ff      	movs	r2, #255	@ 0xff
 80130b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d114      	bne.n	80130e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d01a      	beq.n	80130f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3310      	adds	r3, #16
 80130c6:	4618      	mov	r0, r3
 80130c8:	f001 f90c 	bl	80142e4 <xTaskRemoveFromEventList>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d012      	beq.n	80130f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80130d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013108 <xQueueGenericReset+0xd0>)
 80130d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130d8:	601a      	str	r2, [r3, #0]
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	e009      	b.n	80130f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3310      	adds	r3, #16
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7ff fef1 	bl	8012ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3324      	adds	r3, #36	@ 0x24
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff feec 	bl	8012ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80130f8:	f002 f858 	bl	80151ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80130fc:	2301      	movs	r3, #1
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	e000ed04 	.word	0xe000ed04

0801310c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801310c:	b580      	push	{r7, lr}
 801310e:	b08e      	sub	sp, #56	@ 0x38
 8013110:	af02      	add	r7, sp, #8
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
 8013118:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10b      	bne.n	8013138 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013124:	f383 8811 	msr	BASEPRI, r3
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013132:	bf00      	nop
 8013134:	bf00      	nop
 8013136:	e7fd      	b.n	8013134 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10b      	bne.n	8013156 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013150:	bf00      	nop
 8013152:	bf00      	nop
 8013154:	e7fd      	b.n	8013152 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <xQueueGenericCreateStatic+0x56>
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <xQueueGenericCreateStatic+0x5a>
 8013162:	2301      	movs	r3, #1
 8013164:	e000      	b.n	8013168 <xQueueGenericCreateStatic+0x5c>
 8013166:	2300      	movs	r3, #0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d10b      	bne.n	8013184 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801316c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	623b      	str	r3, [r7, #32]
}
 801317e:	bf00      	nop
 8013180:	bf00      	nop
 8013182:	e7fd      	b.n	8013180 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <xQueueGenericCreateStatic+0x84>
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <xQueueGenericCreateStatic+0x88>
 8013190:	2301      	movs	r3, #1
 8013192:	e000      	b.n	8013196 <xQueueGenericCreateStatic+0x8a>
 8013194:	2300      	movs	r3, #0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d10b      	bne.n	80131b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801319a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	61fb      	str	r3, [r7, #28]
}
 80131ac:	bf00      	nop
 80131ae:	bf00      	nop
 80131b0:	e7fd      	b.n	80131ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80131b2:	2350      	movs	r3, #80	@ 0x50
 80131b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	2b50      	cmp	r3, #80	@ 0x50
 80131ba:	d00b      	beq.n	80131d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80131bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131c0:	f383 8811 	msr	BASEPRI, r3
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	61bb      	str	r3, [r7, #24]
}
 80131ce:	bf00      	nop
 80131d0:	bf00      	nop
 80131d2:	e7fd      	b.n	80131d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80131d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80131da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00d      	beq.n	80131fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80131e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e2:	2201      	movs	r2, #1
 80131e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80131e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80131ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	4613      	mov	r3, r2
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	68b9      	ldr	r1, [r7, #8]
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f000 f805 	bl	8013206 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80131fe:	4618      	mov	r0, r3
 8013200:	3730      	adds	r7, #48	@ 0x30
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b084      	sub	sp, #16
 801320a:	af00      	add	r7, sp, #0
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	607a      	str	r2, [r7, #4]
 8013212:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d103      	bne.n	8013222 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	69ba      	ldr	r2, [r7, #24]
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	e002      	b.n	8013228 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	68fa      	ldr	r2, [r7, #12]
 801322c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	68ba      	ldr	r2, [r7, #8]
 8013232:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013234:	2101      	movs	r1, #1
 8013236:	69b8      	ldr	r0, [r7, #24]
 8013238:	f7ff fefe 	bl	8013038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	78fa      	ldrb	r2, [r7, #3]
 8013240:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013244:	bf00      	nop
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b08e      	sub	sp, #56	@ 0x38
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
 8013258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801325a:	2300      	movs	r3, #0
 801325c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10b      	bne.n	8013280 <xQueueGenericSend+0x34>
	__asm volatile
 8013268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326c:	f383 8811 	msr	BASEPRI, r3
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d103      	bne.n	801328e <xQueueGenericSend+0x42>
 8013286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801328a:	2b00      	cmp	r3, #0
 801328c:	d101      	bne.n	8013292 <xQueueGenericSend+0x46>
 801328e:	2301      	movs	r3, #1
 8013290:	e000      	b.n	8013294 <xQueueGenericSend+0x48>
 8013292:	2300      	movs	r3, #0
 8013294:	2b00      	cmp	r3, #0
 8013296:	d10b      	bne.n	80132b0 <xQueueGenericSend+0x64>
	__asm volatile
 8013298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80132aa:	bf00      	nop
 80132ac:	bf00      	nop
 80132ae:	e7fd      	b.n	80132ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	2b02      	cmp	r3, #2
 80132b4:	d103      	bne.n	80132be <xQueueGenericSend+0x72>
 80132b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d101      	bne.n	80132c2 <xQueueGenericSend+0x76>
 80132be:	2301      	movs	r3, #1
 80132c0:	e000      	b.n	80132c4 <xQueueGenericSend+0x78>
 80132c2:	2300      	movs	r3, #0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d10b      	bne.n	80132e0 <xQueueGenericSend+0x94>
	__asm volatile
 80132c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132cc:	f383 8811 	msr	BASEPRI, r3
 80132d0:	f3bf 8f6f 	isb	sy
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	623b      	str	r3, [r7, #32]
}
 80132da:	bf00      	nop
 80132dc:	bf00      	nop
 80132de:	e7fd      	b.n	80132dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132e0:	f001 f9c6 	bl	8014670 <xTaskGetSchedulerState>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d102      	bne.n	80132f0 <xQueueGenericSend+0xa4>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <xQueueGenericSend+0xa8>
 80132f0:	2301      	movs	r3, #1
 80132f2:	e000      	b.n	80132f6 <xQueueGenericSend+0xaa>
 80132f4:	2300      	movs	r3, #0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d10b      	bne.n	8013312 <xQueueGenericSend+0xc6>
	__asm volatile
 80132fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	61fb      	str	r3, [r7, #28]
}
 801330c:	bf00      	nop
 801330e:	bf00      	nop
 8013310:	e7fd      	b.n	801330e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013312:	f001 ff19 	bl	8015148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801331c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801331e:	429a      	cmp	r2, r3
 8013320:	d302      	bcc.n	8013328 <xQueueGenericSend+0xdc>
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	2b02      	cmp	r3, #2
 8013326:	d129      	bne.n	801337c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013328:	683a      	ldr	r2, [r7, #0]
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801332e:	f000 fa0f 	bl	8013750 <prvCopyDataToQueue>
 8013332:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d010      	beq.n	801335e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333e:	3324      	adds	r3, #36	@ 0x24
 8013340:	4618      	mov	r0, r3
 8013342:	f000 ffcf 	bl	80142e4 <xTaskRemoveFromEventList>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d013      	beq.n	8013374 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801334c:	4b3f      	ldr	r3, [pc, #252]	@ (801344c <xQueueGenericSend+0x200>)
 801334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013352:	601a      	str	r2, [r3, #0]
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	f3bf 8f6f 	isb	sy
 801335c:	e00a      	b.n	8013374 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013360:	2b00      	cmp	r3, #0
 8013362:	d007      	beq.n	8013374 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013364:	4b39      	ldr	r3, [pc, #228]	@ (801344c <xQueueGenericSend+0x200>)
 8013366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801336a:	601a      	str	r2, [r3, #0]
 801336c:	f3bf 8f4f 	dsb	sy
 8013370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013374:	f001 ff1a 	bl	80151ac <vPortExitCritical>
				return pdPASS;
 8013378:	2301      	movs	r3, #1
 801337a:	e063      	b.n	8013444 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d103      	bne.n	801338a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013382:	f001 ff13 	bl	80151ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013386:	2300      	movs	r3, #0
 8013388:	e05c      	b.n	8013444 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801338a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801338c:	2b00      	cmp	r3, #0
 801338e:	d106      	bne.n	801339e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013390:	f107 0314 	add.w	r3, r7, #20
 8013394:	4618      	mov	r0, r3
 8013396:	f001 f809 	bl	80143ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801339a:	2301      	movs	r3, #1
 801339c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801339e:	f001 ff05 	bl	80151ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133a2:	f000 fd71 	bl	8013e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133a6:	f001 fecf 	bl	8015148 <vPortEnterCritical>
 80133aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133b0:	b25b      	sxtb	r3, r3
 80133b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b6:	d103      	bne.n	80133c0 <xQueueGenericSend+0x174>
 80133b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ba:	2200      	movs	r2, #0
 80133bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80133c6:	b25b      	sxtb	r3, r3
 80133c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133cc:	d103      	bne.n	80133d6 <xQueueGenericSend+0x18a>
 80133ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d0:	2200      	movs	r2, #0
 80133d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80133d6:	f001 fee9 	bl	80151ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133da:	1d3a      	adds	r2, r7, #4
 80133dc:	f107 0314 	add.w	r3, r7, #20
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 fff8 	bl	80143d8 <xTaskCheckForTimeOut>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d124      	bne.n	8013438 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80133ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133f0:	f000 faa6 	bl	8013940 <prvIsQueueFull>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d018      	beq.n	801342c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80133fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133fc:	3310      	adds	r3, #16
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	4611      	mov	r1, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f000 ff1c 	bl	8014240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801340a:	f000 fa31 	bl	8013870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801340e:	f000 fd49 	bl	8013ea4 <xTaskResumeAll>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	f47f af7c 	bne.w	8013312 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801341a:	4b0c      	ldr	r3, [pc, #48]	@ (801344c <xQueueGenericSend+0x200>)
 801341c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	e772      	b.n	8013312 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801342c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801342e:	f000 fa1f 	bl	8013870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013432:	f000 fd37 	bl	8013ea4 <xTaskResumeAll>
 8013436:	e76c      	b.n	8013312 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801343a:	f000 fa19 	bl	8013870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801343e:	f000 fd31 	bl	8013ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013444:	4618      	mov	r0, r3
 8013446:	3738      	adds	r7, #56	@ 0x38
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	e000ed04 	.word	0xe000ed04

08013450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b090      	sub	sp, #64	@ 0x40
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
 801345c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8013462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013464:	2b00      	cmp	r3, #0
 8013466:	d10b      	bne.n	8013480 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801347a:	bf00      	nop
 801347c:	bf00      	nop
 801347e:	e7fd      	b.n	801347c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d103      	bne.n	801348e <xQueueGenericSendFromISR+0x3e>
 8013486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <xQueueGenericSendFromISR+0x42>
 801348e:	2301      	movs	r3, #1
 8013490:	e000      	b.n	8013494 <xQueueGenericSendFromISR+0x44>
 8013492:	2300      	movs	r3, #0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d10b      	bne.n	80134b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80134aa:	bf00      	nop
 80134ac:	bf00      	nop
 80134ae:	e7fd      	b.n	80134ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	2b02      	cmp	r3, #2
 80134b4:	d103      	bne.n	80134be <xQueueGenericSendFromISR+0x6e>
 80134b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d101      	bne.n	80134c2 <xQueueGenericSendFromISR+0x72>
 80134be:	2301      	movs	r3, #1
 80134c0:	e000      	b.n	80134c4 <xQueueGenericSendFromISR+0x74>
 80134c2:	2300      	movs	r3, #0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d10b      	bne.n	80134e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80134c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134cc:	f383 8811 	msr	BASEPRI, r3
 80134d0:	f3bf 8f6f 	isb	sy
 80134d4:	f3bf 8f4f 	dsb	sy
 80134d8:	623b      	str	r3, [r7, #32]
}
 80134da:	bf00      	nop
 80134dc:	bf00      	nop
 80134de:	e7fd      	b.n	80134dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134e0:	f001 ff12 	bl	8015308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80134e4:	f3ef 8211 	mrs	r2, BASEPRI
 80134e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	61fa      	str	r2, [r7, #28]
 80134fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80134fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80134fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013508:	429a      	cmp	r2, r3
 801350a:	d302      	bcc.n	8013512 <xQueueGenericSendFromISR+0xc2>
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	2b02      	cmp	r3, #2
 8013510:	d12f      	bne.n	8013572 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013518:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013520:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013522:	683a      	ldr	r2, [r7, #0]
 8013524:	68b9      	ldr	r1, [r7, #8]
 8013526:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013528:	f000 f912 	bl	8013750 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801352c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013534:	d112      	bne.n	801355c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801353a:	2b00      	cmp	r3, #0
 801353c:	d016      	beq.n	801356c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013540:	3324      	adds	r3, #36	@ 0x24
 8013542:	4618      	mov	r0, r3
 8013544:	f000 fece 	bl	80142e4 <xTaskRemoveFromEventList>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00e      	beq.n	801356c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00b      	beq.n	801356c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2201      	movs	r2, #1
 8013558:	601a      	str	r2, [r3, #0]
 801355a:	e007      	b.n	801356c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801355c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013560:	3301      	adds	r3, #1
 8013562:	b2db      	uxtb	r3, r3
 8013564:	b25a      	sxtb	r2, r3
 8013566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801356c:	2301      	movs	r3, #1
 801356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013570:	e001      	b.n	8013576 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013572:	2300      	movs	r3, #0
 8013574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013578:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013580:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013584:	4618      	mov	r0, r3
 8013586:	3740      	adds	r7, #64	@ 0x40
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08c      	sub	sp, #48	@ 0x30
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013598:	2300      	movs	r3, #0
 801359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d10b      	bne.n	80135be <xQueueReceive+0x32>
	__asm volatile
 80135a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135aa:	f383 8811 	msr	BASEPRI, r3
 80135ae:	f3bf 8f6f 	isb	sy
 80135b2:	f3bf 8f4f 	dsb	sy
 80135b6:	623b      	str	r3, [r7, #32]
}
 80135b8:	bf00      	nop
 80135ba:	bf00      	nop
 80135bc:	e7fd      	b.n	80135ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d103      	bne.n	80135cc <xQueueReceive+0x40>
 80135c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d101      	bne.n	80135d0 <xQueueReceive+0x44>
 80135cc:	2301      	movs	r3, #1
 80135ce:	e000      	b.n	80135d2 <xQueueReceive+0x46>
 80135d0:	2300      	movs	r3, #0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10b      	bne.n	80135ee <xQueueReceive+0x62>
	__asm volatile
 80135d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	61fb      	str	r3, [r7, #28]
}
 80135e8:	bf00      	nop
 80135ea:	bf00      	nop
 80135ec:	e7fd      	b.n	80135ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135ee:	f001 f83f 	bl	8014670 <xTaskGetSchedulerState>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <xQueueReceive+0x72>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d101      	bne.n	8013602 <xQueueReceive+0x76>
 80135fe:	2301      	movs	r3, #1
 8013600:	e000      	b.n	8013604 <xQueueReceive+0x78>
 8013602:	2300      	movs	r3, #0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d10b      	bne.n	8013620 <xQueueReceive+0x94>
	__asm volatile
 8013608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801360c:	f383 8811 	msr	BASEPRI, r3
 8013610:	f3bf 8f6f 	isb	sy
 8013614:	f3bf 8f4f 	dsb	sy
 8013618:	61bb      	str	r3, [r7, #24]
}
 801361a:	bf00      	nop
 801361c:	bf00      	nop
 801361e:	e7fd      	b.n	801361c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013620:	f001 fd92 	bl	8015148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013628:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362c:	2b00      	cmp	r3, #0
 801362e:	d01f      	beq.n	8013670 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013630:	68b9      	ldr	r1, [r7, #8]
 8013632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013634:	f000 f8f6 	bl	8013824 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363a:	1e5a      	subs	r2, r3, #1
 801363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013642:	691b      	ldr	r3, [r3, #16]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d00f      	beq.n	8013668 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801364a:	3310      	adds	r3, #16
 801364c:	4618      	mov	r0, r3
 801364e:	f000 fe49 	bl	80142e4 <xTaskRemoveFromEventList>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d007      	beq.n	8013668 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013658:	4b3c      	ldr	r3, [pc, #240]	@ (801374c <xQueueReceive+0x1c0>)
 801365a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801365e:	601a      	str	r2, [r3, #0]
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013668:	f001 fda0 	bl	80151ac <vPortExitCritical>
				return pdPASS;
 801366c:	2301      	movs	r3, #1
 801366e:	e069      	b.n	8013744 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d103      	bne.n	801367e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013676:	f001 fd99 	bl	80151ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801367a:	2300      	movs	r3, #0
 801367c:	e062      	b.n	8013744 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013680:	2b00      	cmp	r3, #0
 8013682:	d106      	bne.n	8013692 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013684:	f107 0310 	add.w	r3, r7, #16
 8013688:	4618      	mov	r0, r3
 801368a:	f000 fe8f 	bl	80143ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801368e:	2301      	movs	r3, #1
 8013690:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013692:	f001 fd8b 	bl	80151ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013696:	f000 fbf7 	bl	8013e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801369a:	f001 fd55 	bl	8015148 <vPortEnterCritical>
 801369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136a4:	b25b      	sxtb	r3, r3
 80136a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136aa:	d103      	bne.n	80136b4 <xQueueReceive+0x128>
 80136ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ae:	2200      	movs	r2, #0
 80136b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136ba:	b25b      	sxtb	r3, r3
 80136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c0:	d103      	bne.n	80136ca <xQueueReceive+0x13e>
 80136c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c4:	2200      	movs	r2, #0
 80136c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80136ca:	f001 fd6f 	bl	80151ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136ce:	1d3a      	adds	r2, r7, #4
 80136d0:	f107 0310 	add.w	r3, r7, #16
 80136d4:	4611      	mov	r1, r2
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 fe7e 	bl	80143d8 <xTaskCheckForTimeOut>
 80136dc:	4603      	mov	r3, r0
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d123      	bne.n	801372a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136e4:	f000 f916 	bl	8013914 <prvIsQueueEmpty>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d017      	beq.n	801371e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80136ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f0:	3324      	adds	r3, #36	@ 0x24
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	4611      	mov	r1, r2
 80136f6:	4618      	mov	r0, r3
 80136f8:	f000 fda2 	bl	8014240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80136fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136fe:	f000 f8b7 	bl	8013870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013702:	f000 fbcf 	bl	8013ea4 <xTaskResumeAll>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d189      	bne.n	8013620 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801370c:	4b0f      	ldr	r3, [pc, #60]	@ (801374c <xQueueReceive+0x1c0>)
 801370e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013712:	601a      	str	r2, [r3, #0]
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	f3bf 8f6f 	isb	sy
 801371c:	e780      	b.n	8013620 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801371e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013720:	f000 f8a6 	bl	8013870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013724:	f000 fbbe 	bl	8013ea4 <xTaskResumeAll>
 8013728:	e77a      	b.n	8013620 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801372a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801372c:	f000 f8a0 	bl	8013870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013730:	f000 fbb8 	bl	8013ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013736:	f000 f8ed 	bl	8013914 <prvIsQueueEmpty>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	f43f af6f 	beq.w	8013620 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013742:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013744:	4618      	mov	r0, r3
 8013746:	3730      	adds	r7, #48	@ 0x30
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}
 801374c:	e000ed04 	.word	0xe000ed04

08013750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b086      	sub	sp, #24
 8013754:	af00      	add	r7, sp, #0
 8013756:	60f8      	str	r0, [r7, #12]
 8013758:	60b9      	str	r1, [r7, #8]
 801375a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801375c:	2300      	movs	r3, #0
 801375e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801376a:	2b00      	cmp	r3, #0
 801376c:	d10d      	bne.n	801378a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d14d      	bne.n	8013812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	4618      	mov	r0, r3
 801377c:	f000 ff96 	bl	80146ac <xTaskPriorityDisinherit>
 8013780:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	609a      	str	r2, [r3, #8]
 8013788:	e043      	b.n	8013812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d119      	bne.n	80137c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6858      	ldr	r0, [r3, #4]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013798:	461a      	mov	r2, r3
 801379a:	68b9      	ldr	r1, [r7, #8]
 801379c:	f004 facf 	bl	8017d3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	685a      	ldr	r2, [r3, #4]
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137a8:	441a      	add	r2, r3
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	689b      	ldr	r3, [r3, #8]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d32b      	bcc.n	8013812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	605a      	str	r2, [r3, #4]
 80137c2:	e026      	b.n	8013812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	68d8      	ldr	r0, [r3, #12]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137cc:	461a      	mov	r2, r3
 80137ce:	68b9      	ldr	r1, [r7, #8]
 80137d0:	f004 fab5 	bl	8017d3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	68da      	ldr	r2, [r3, #12]
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137dc:	425b      	negs	r3, r3
 80137de:	441a      	add	r2, r3
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	68da      	ldr	r2, [r3, #12]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d207      	bcs.n	8013800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	689a      	ldr	r2, [r3, #8]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137f8:	425b      	negs	r3, r3
 80137fa:	441a      	add	r2, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b02      	cmp	r3, #2
 8013804:	d105      	bne.n	8013812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d002      	beq.n	8013812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	3b01      	subs	r3, #1
 8013810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	1c5a      	adds	r2, r3, #1
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801381a:	697b      	ldr	r3, [r7, #20]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3718      	adds	r7, #24
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013832:	2b00      	cmp	r3, #0
 8013834:	d018      	beq.n	8013868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	68da      	ldr	r2, [r3, #12]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801383e:	441a      	add	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	68da      	ldr	r2, [r3, #12]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	429a      	cmp	r2, r3
 801384e:	d303      	bcc.n	8013858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	68d9      	ldr	r1, [r3, #12]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013860:	461a      	mov	r2, r3
 8013862:	6838      	ldr	r0, [r7, #0]
 8013864:	f004 fa6b 	bl	8017d3e <memcpy>
	}
}
 8013868:	bf00      	nop
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013878:	f001 fc66 	bl	8015148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013884:	e011      	b.n	80138aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801388a:	2b00      	cmp	r3, #0
 801388c:	d012      	beq.n	80138b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	3324      	adds	r3, #36	@ 0x24
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fd26 	bl	80142e4 <xTaskRemoveFromEventList>
 8013898:	4603      	mov	r3, r0
 801389a:	2b00      	cmp	r3, #0
 801389c:	d001      	beq.n	80138a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801389e:	f000 fdff 	bl	80144a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138a2:	7bfb      	ldrb	r3, [r7, #15]
 80138a4:	3b01      	subs	r3, #1
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	dce9      	bgt.n	8013886 <prvUnlockQueue+0x16>
 80138b2:	e000      	b.n	80138b6 <prvUnlockQueue+0x46>
					break;
 80138b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	22ff      	movs	r2, #255	@ 0xff
 80138ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80138be:	f001 fc75 	bl	80151ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80138c2:	f001 fc41 	bl	8015148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80138cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80138ce:	e011      	b.n	80138f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	691b      	ldr	r3, [r3, #16]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d012      	beq.n	80138fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3310      	adds	r3, #16
 80138dc:	4618      	mov	r0, r3
 80138de:	f000 fd01 	bl	80142e4 <xTaskRemoveFromEventList>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d001      	beq.n	80138ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80138e8:	f000 fdda 	bl	80144a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
 80138ee:	3b01      	subs	r3, #1
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80138f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	dce9      	bgt.n	80138d0 <prvUnlockQueue+0x60>
 80138fc:	e000      	b.n	8013900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80138fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	22ff      	movs	r2, #255	@ 0xff
 8013904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013908:	f001 fc50 	bl	80151ac <vPortExitCritical>
}
 801390c:	bf00      	nop
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801391c:	f001 fc14 	bl	8015148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013924:	2b00      	cmp	r3, #0
 8013926:	d102      	bne.n	801392e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013928:	2301      	movs	r3, #1
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	e001      	b.n	8013932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801392e:	2300      	movs	r3, #0
 8013930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013932:	f001 fc3b 	bl	80151ac <vPortExitCritical>

	return xReturn;
 8013936:	68fb      	ldr	r3, [r7, #12]
}
 8013938:	4618      	mov	r0, r3
 801393a:	3710      	adds	r7, #16
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013948:	f001 fbfe 	bl	8015148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013954:	429a      	cmp	r2, r3
 8013956:	d102      	bne.n	801395e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013958:	2301      	movs	r3, #1
 801395a:	60fb      	str	r3, [r7, #12]
 801395c:	e001      	b.n	8013962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801395e:	2300      	movs	r3, #0
 8013960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013962:	f001 fc23 	bl	80151ac <vPortExitCritical>

	return xReturn;
 8013966:	68fb      	ldr	r3, [r7, #12]
}
 8013968:	4618      	mov	r0, r3
 801396a:	3710      	adds	r7, #16
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801397a:	2300      	movs	r3, #0
 801397c:	60fb      	str	r3, [r7, #12]
 801397e:	e014      	b.n	80139aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013980:	4a0f      	ldr	r2, [pc, #60]	@ (80139c0 <vQueueAddToRegistry+0x50>)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10b      	bne.n	80139a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801398c:	490c      	ldr	r1, [pc, #48]	@ (80139c0 <vQueueAddToRegistry+0x50>)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	683a      	ldr	r2, [r7, #0]
 8013992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013996:	4a0a      	ldr	r2, [pc, #40]	@ (80139c0 <vQueueAddToRegistry+0x50>)
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	4413      	add	r3, r2
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80139a2:	e006      	b.n	80139b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	3301      	adds	r3, #1
 80139a8:	60fb      	str	r3, [r7, #12]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2b07      	cmp	r3, #7
 80139ae:	d9e7      	bls.n	8013980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80139b0:	bf00      	nop
 80139b2:	bf00      	nop
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop
 80139c0:	24071688 	.word	0x24071688

080139c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b086      	sub	sp, #24
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80139d4:	f001 fbb8 	bl	8015148 <vPortEnterCritical>
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139de:	b25b      	sxtb	r3, r3
 80139e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e4:	d103      	bne.n	80139ee <vQueueWaitForMessageRestricted+0x2a>
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139f4:	b25b      	sxtb	r3, r3
 80139f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139fa:	d103      	bne.n	8013a04 <vQueueWaitForMessageRestricted+0x40>
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	2200      	movs	r2, #0
 8013a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a04:	f001 fbd2 	bl	80151ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d106      	bne.n	8013a1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	3324      	adds	r3, #36	@ 0x24
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	68b9      	ldr	r1, [r7, #8]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f000 fc37 	bl	801428c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013a1e:	6978      	ldr	r0, [r7, #20]
 8013a20:	f7ff ff26 	bl	8013870 <prvUnlockQueue>
	}
 8013a24:	bf00      	nop
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b08e      	sub	sp, #56	@ 0x38
 8013a30:	af04      	add	r7, sp, #16
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
 8013a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d10b      	bne.n	8013a58 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a44:	f383 8811 	msr	BASEPRI, r3
 8013a48:	f3bf 8f6f 	isb	sy
 8013a4c:	f3bf 8f4f 	dsb	sy
 8013a50:	623b      	str	r3, [r7, #32]
}
 8013a52:	bf00      	nop
 8013a54:	bf00      	nop
 8013a56:	e7fd      	b.n	8013a54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d10b      	bne.n	8013a76 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a62:	f383 8811 	msr	BASEPRI, r3
 8013a66:	f3bf 8f6f 	isb	sy
 8013a6a:	f3bf 8f4f 	dsb	sy
 8013a6e:	61fb      	str	r3, [r7, #28]
}
 8013a70:	bf00      	nop
 8013a72:	bf00      	nop
 8013a74:	e7fd      	b.n	8013a72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013a76:	23a8      	movs	r3, #168	@ 0xa8
 8013a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	2ba8      	cmp	r3, #168	@ 0xa8
 8013a7e:	d00b      	beq.n	8013a98 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a84:	f383 8811 	msr	BASEPRI, r3
 8013a88:	f3bf 8f6f 	isb	sy
 8013a8c:	f3bf 8f4f 	dsb	sy
 8013a90:	61bb      	str	r3, [r7, #24]
}
 8013a92:	bf00      	nop
 8013a94:	bf00      	nop
 8013a96:	e7fd      	b.n	8013a94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013a98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d01e      	beq.n	8013ade <xTaskCreateStatic+0xb2>
 8013aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d01b      	beq.n	8013ade <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013aae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab2:	2202      	movs	r2, #2
 8013ab4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ab8:	2300      	movs	r3, #0
 8013aba:	9303      	str	r3, [sp, #12]
 8013abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013abe:	9302      	str	r3, [sp, #8]
 8013ac0:	f107 0314 	add.w	r3, r7, #20
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	68b9      	ldr	r1, [r7, #8]
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f000 f851 	bl	8013b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ad8:	f000 f8f6 	bl	8013cc8 <prvAddNewTaskToReadyList>
 8013adc:	e001      	b.n	8013ae2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013ae2:	697b      	ldr	r3, [r7, #20]
	}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3728      	adds	r7, #40	@ 0x28
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b08c      	sub	sp, #48	@ 0x30
 8013af0:	af04      	add	r7, sp, #16
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	603b      	str	r3, [r7, #0]
 8013af8:	4613      	mov	r3, r2
 8013afa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013afc:	88fb      	ldrh	r3, [r7, #6]
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	4618      	mov	r0, r3
 8013b02:	f001 fc43 	bl	801538c <pvPortMalloc>
 8013b06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d00e      	beq.n	8013b2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013b0e:	20a8      	movs	r0, #168	@ 0xa8
 8013b10:	f001 fc3c 	bl	801538c <pvPortMalloc>
 8013b14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d003      	beq.n	8013b24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	697a      	ldr	r2, [r7, #20]
 8013b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8013b22:	e005      	b.n	8013b30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013b24:	6978      	ldr	r0, [r7, #20]
 8013b26:	f001 fcff 	bl	8015528 <vPortFree>
 8013b2a:	e001      	b.n	8013b30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d017      	beq.n	8013b66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013b3e:	88fa      	ldrh	r2, [r7, #6]
 8013b40:	2300      	movs	r3, #0
 8013b42:	9303      	str	r3, [sp, #12]
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	9302      	str	r3, [sp, #8]
 8013b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b4e:	9300      	str	r3, [sp, #0]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	68b9      	ldr	r1, [r7, #8]
 8013b54:	68f8      	ldr	r0, [r7, #12]
 8013b56:	f000 f80f 	bl	8013b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b5a:	69f8      	ldr	r0, [r7, #28]
 8013b5c:	f000 f8b4 	bl	8013cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013b60:	2301      	movs	r3, #1
 8013b62:	61bb      	str	r3, [r7, #24]
 8013b64:	e002      	b.n	8013b6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013b66:	f04f 33ff 	mov.w	r3, #4294967295
 8013b6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013b6c:	69bb      	ldr	r3, [r7, #24]
	}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3720      	adds	r7, #32
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
	...

08013b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b088      	sub	sp, #32
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
 8013b84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	461a      	mov	r2, r3
 8013b90:	21a5      	movs	r1, #165	@ 0xa5
 8013b92:	f003 ff69 	bl	8017a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b9a:	6879      	ldr	r1, [r7, #4]
 8013b9c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013ba0:	440b      	add	r3, r1
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	4413      	add	r3, r2
 8013ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	f023 0307 	bic.w	r3, r3, #7
 8013bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	f003 0307 	and.w	r3, r3, #7
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00b      	beq.n	8013bd2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	617b      	str	r3, [r7, #20]
}
 8013bcc:	bf00      	nop
 8013bce:	bf00      	nop
 8013bd0:	e7fd      	b.n	8013bce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d01f      	beq.n	8013c18 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013bd8:	2300      	movs	r3, #0
 8013bda:	61fb      	str	r3, [r7, #28]
 8013bdc:	e012      	b.n	8013c04 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	4413      	add	r3, r2
 8013be4:	7819      	ldrb	r1, [r3, #0]
 8013be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	4413      	add	r3, r2
 8013bec:	3334      	adds	r3, #52	@ 0x34
 8013bee:	460a      	mov	r2, r1
 8013bf0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013bf2:	68ba      	ldr	r2, [r7, #8]
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	4413      	add	r3, r2
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d006      	beq.n	8013c0c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	3301      	adds	r3, #1
 8013c02:	61fb      	str	r3, [r7, #28]
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	2b0f      	cmp	r3, #15
 8013c08:	d9e9      	bls.n	8013bde <prvInitialiseNewTask+0x66>
 8013c0a:	e000      	b.n	8013c0e <prvInitialiseNewTask+0x96>
			{
				break;
 8013c0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c10:	2200      	movs	r2, #0
 8013c12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013c16:	e003      	b.n	8013c20 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c22:	2b37      	cmp	r3, #55	@ 0x37
 8013c24:	d901      	bls.n	8013c2a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013c26:	2337      	movs	r3, #55	@ 0x37
 8013c28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c34:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c38:	2200      	movs	r2, #0
 8013c3a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c3e:	3304      	adds	r3, #4
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7ff f965 	bl	8012f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c48:	3318      	adds	r3, #24
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff f960 	bl	8012f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c70:	2200      	movs	r2, #0
 8013c72:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c78:	3354      	adds	r3, #84	@ 0x54
 8013c7a:	224c      	movs	r2, #76	@ 0x4c
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f003 fef2 	bl	8017a68 <memset>
 8013c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c86:	4a0d      	ldr	r2, [pc, #52]	@ (8013cbc <prvInitialiseNewTask+0x144>)
 8013c88:	659a      	str	r2, [r3, #88]	@ 0x58
 8013c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8013cc0 <prvInitialiseNewTask+0x148>)
 8013c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c92:	4a0c      	ldr	r2, [pc, #48]	@ (8013cc4 <prvInitialiseNewTask+0x14c>)
 8013c94:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	68f9      	ldr	r1, [r7, #12]
 8013c9a:	69b8      	ldr	r0, [r7, #24]
 8013c9c:	f001 f924 	bl	8014ee8 <pxPortInitialiseStack>
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ca4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013cb2:	bf00      	nop
 8013cb4:	3720      	adds	r7, #32
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	24077504 	.word	0x24077504
 8013cc0:	2407756c 	.word	0x2407756c
 8013cc4:	240775d4 	.word	0x240775d4

08013cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013cd0:	f001 fa3a 	bl	8015148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8013d8c <prvAddNewTaskToReadyList+0xc4>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	4a2c      	ldr	r2, [pc, #176]	@ (8013d8c <prvAddNewTaskToReadyList+0xc4>)
 8013cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013cde:	4b2c      	ldr	r3, [pc, #176]	@ (8013d90 <prvAddNewTaskToReadyList+0xc8>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d109      	bne.n	8013cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8013d90 <prvAddNewTaskToReadyList+0xc8>)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013cec:	4b27      	ldr	r3, [pc, #156]	@ (8013d8c <prvAddNewTaskToReadyList+0xc4>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d110      	bne.n	8013d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013cf4:	f000 fbf8 	bl	80144e8 <prvInitialiseTaskLists>
 8013cf8:	e00d      	b.n	8013d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013cfa:	4b26      	ldr	r3, [pc, #152]	@ (8013d94 <prvAddNewTaskToReadyList+0xcc>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d109      	bne.n	8013d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d02:	4b23      	ldr	r3, [pc, #140]	@ (8013d90 <prvAddNewTaskToReadyList+0xc8>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d802      	bhi.n	8013d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013d10:	4a1f      	ldr	r2, [pc, #124]	@ (8013d90 <prvAddNewTaskToReadyList+0xc8>)
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013d16:	4b20      	ldr	r3, [pc, #128]	@ (8013d98 <prvAddNewTaskToReadyList+0xd0>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8013d98 <prvAddNewTaskToReadyList+0xd0>)
 8013d1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013d20:	4b1d      	ldr	r3, [pc, #116]	@ (8013d98 <prvAddNewTaskToReadyList+0xd0>)
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8013d9c <prvAddNewTaskToReadyList+0xd4>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d903      	bls.n	8013d3c <prvAddNewTaskToReadyList+0x74>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d38:	4a18      	ldr	r2, [pc, #96]	@ (8013d9c <prvAddNewTaskToReadyList+0xd4>)
 8013d3a:	6013      	str	r3, [r2, #0]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d40:	4613      	mov	r3, r2
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	4413      	add	r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	4a15      	ldr	r2, [pc, #84]	@ (8013da0 <prvAddNewTaskToReadyList+0xd8>)
 8013d4a:	441a      	add	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	3304      	adds	r3, #4
 8013d50:	4619      	mov	r1, r3
 8013d52:	4610      	mov	r0, r2
 8013d54:	f7ff f8e9 	bl	8012f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013d58:	f001 fa28 	bl	80151ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8013d94 <prvAddNewTaskToReadyList+0xcc>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d00e      	beq.n	8013d82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d64:	4b0a      	ldr	r3, [pc, #40]	@ (8013d90 <prvAddNewTaskToReadyList+0xc8>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d207      	bcs.n	8013d82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013d72:	4b0c      	ldr	r3, [pc, #48]	@ (8013da4 <prvAddNewTaskToReadyList+0xdc>)
 8013d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d78:	601a      	str	r2, [r3, #0]
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d82:	bf00      	nop
 8013d84:	3708      	adds	r7, #8
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	24071b9c 	.word	0x24071b9c
 8013d90:	240716c8 	.word	0x240716c8
 8013d94:	24071ba8 	.word	0x24071ba8
 8013d98:	24071bb8 	.word	0x24071bb8
 8013d9c:	24071ba4 	.word	0x24071ba4
 8013da0:	240716cc 	.word	0x240716cc
 8013da4:	e000ed04 	.word	0xe000ed04

08013da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08a      	sub	sp, #40	@ 0x28
 8013dac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013dae:	2300      	movs	r3, #0
 8013db0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013db2:	2300      	movs	r3, #0
 8013db4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013db6:	463a      	mov	r2, r7
 8013db8:	1d39      	adds	r1, r7, #4
 8013dba:	f107 0308 	add.w	r3, r7, #8
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff f852 	bl	8012e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013dc4:	6839      	ldr	r1, [r7, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	9202      	str	r2, [sp, #8]
 8013dcc:	9301      	str	r3, [sp, #4]
 8013dce:	2300      	movs	r3, #0
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	460a      	mov	r2, r1
 8013dd6:	4924      	ldr	r1, [pc, #144]	@ (8013e68 <vTaskStartScheduler+0xc0>)
 8013dd8:	4824      	ldr	r0, [pc, #144]	@ (8013e6c <vTaskStartScheduler+0xc4>)
 8013dda:	f7ff fe27 	bl	8013a2c <xTaskCreateStatic>
 8013dde:	4603      	mov	r3, r0
 8013de0:	4a23      	ldr	r2, [pc, #140]	@ (8013e70 <vTaskStartScheduler+0xc8>)
 8013de2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013de4:	4b22      	ldr	r3, [pc, #136]	@ (8013e70 <vTaskStartScheduler+0xc8>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d002      	beq.n	8013df2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013dec:	2301      	movs	r3, #1
 8013dee:	617b      	str	r3, [r7, #20]
 8013df0:	e001      	b.n	8013df6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d102      	bne.n	8013e02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013dfc:	f000 fd1a 	bl	8014834 <xTimerCreateTimerTask>
 8013e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d11b      	bne.n	8013e40 <vTaskStartScheduler+0x98>
	__asm volatile
 8013e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e0c:	f383 8811 	msr	BASEPRI, r3
 8013e10:	f3bf 8f6f 	isb	sy
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	613b      	str	r3, [r7, #16]
}
 8013e1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e1c:	4b15      	ldr	r3, [pc, #84]	@ (8013e74 <vTaskStartScheduler+0xcc>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	3354      	adds	r3, #84	@ 0x54
 8013e22:	4a15      	ldr	r2, [pc, #84]	@ (8013e78 <vTaskStartScheduler+0xd0>)
 8013e24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e26:	4b15      	ldr	r3, [pc, #84]	@ (8013e7c <vTaskStartScheduler+0xd4>)
 8013e28:	f04f 32ff 	mov.w	r2, #4294967295
 8013e2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e2e:	4b14      	ldr	r3, [pc, #80]	@ (8013e80 <vTaskStartScheduler+0xd8>)
 8013e30:	2201      	movs	r2, #1
 8013e32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e34:	4b13      	ldr	r3, [pc, #76]	@ (8013e84 <vTaskStartScheduler+0xdc>)
 8013e36:	2200      	movs	r2, #0
 8013e38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e3a:	f001 f8e1 	bl	8015000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e3e:	e00f      	b.n	8013e60 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e46:	d10b      	bne.n	8013e60 <vTaskStartScheduler+0xb8>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	60fb      	str	r3, [r7, #12]
}
 8013e5a:	bf00      	nop
 8013e5c:	bf00      	nop
 8013e5e:	e7fd      	b.n	8013e5c <vTaskStartScheduler+0xb4>
}
 8013e60:	bf00      	nop
 8013e62:	3718      	adds	r7, #24
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	0801a240 	.word	0x0801a240
 8013e6c:	080144b9 	.word	0x080144b9
 8013e70:	24071bc0 	.word	0x24071bc0
 8013e74:	240716c8 	.word	0x240716c8
 8013e78:	24000280 	.word	0x24000280
 8013e7c:	24071bbc 	.word	0x24071bbc
 8013e80:	24071ba8 	.word	0x24071ba8
 8013e84:	24071ba0 	.word	0x24071ba0

08013e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e8c:	4b04      	ldr	r3, [pc, #16]	@ (8013ea0 <vTaskSuspendAll+0x18>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	3301      	adds	r3, #1
 8013e92:	4a03      	ldr	r2, [pc, #12]	@ (8013ea0 <vTaskSuspendAll+0x18>)
 8013e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr
 8013ea0:	24071bc4 	.word	0x24071bc4

08013ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013eb2:	4b42      	ldr	r3, [pc, #264]	@ (8013fbc <xTaskResumeAll+0x118>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10b      	bne.n	8013ed2 <xTaskResumeAll+0x2e>
	__asm volatile
 8013eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	603b      	str	r3, [r7, #0]
}
 8013ecc:	bf00      	nop
 8013ece:	bf00      	nop
 8013ed0:	e7fd      	b.n	8013ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ed2:	f001 f939 	bl	8015148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ed6:	4b39      	ldr	r3, [pc, #228]	@ (8013fbc <xTaskResumeAll+0x118>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	3b01      	subs	r3, #1
 8013edc:	4a37      	ldr	r2, [pc, #220]	@ (8013fbc <xTaskResumeAll+0x118>)
 8013ede:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ee0:	4b36      	ldr	r3, [pc, #216]	@ (8013fbc <xTaskResumeAll+0x118>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d162      	bne.n	8013fae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ee8:	4b35      	ldr	r3, [pc, #212]	@ (8013fc0 <xTaskResumeAll+0x11c>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d05e      	beq.n	8013fae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ef0:	e02f      	b.n	8013f52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef2:	4b34      	ldr	r3, [pc, #208]	@ (8013fc4 <xTaskResumeAll+0x120>)
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	3318      	adds	r3, #24
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ff f870 	bl	8012fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	3304      	adds	r3, #4
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7ff f86b 	bl	8012fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f12:	4b2d      	ldr	r3, [pc, #180]	@ (8013fc8 <xTaskResumeAll+0x124>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d903      	bls.n	8013f22 <xTaskResumeAll+0x7e>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8013fc8 <xTaskResumeAll+0x124>)
 8013f20:	6013      	str	r3, [r2, #0]
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f26:	4613      	mov	r3, r2
 8013f28:	009b      	lsls	r3, r3, #2
 8013f2a:	4413      	add	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	4a27      	ldr	r2, [pc, #156]	@ (8013fcc <xTaskResumeAll+0x128>)
 8013f30:	441a      	add	r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	3304      	adds	r3, #4
 8013f36:	4619      	mov	r1, r3
 8013f38:	4610      	mov	r0, r2
 8013f3a:	f7fe fff6 	bl	8012f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f42:	4b23      	ldr	r3, [pc, #140]	@ (8013fd0 <xTaskResumeAll+0x12c>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d302      	bcc.n	8013f52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013f4c:	4b21      	ldr	r3, [pc, #132]	@ (8013fd4 <xTaskResumeAll+0x130>)
 8013f4e:	2201      	movs	r2, #1
 8013f50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f52:	4b1c      	ldr	r3, [pc, #112]	@ (8013fc4 <xTaskResumeAll+0x120>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1cb      	bne.n	8013ef2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f60:	f000 fb66 	bl	8014630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f64:	4b1c      	ldr	r3, [pc, #112]	@ (8013fd8 <xTaskResumeAll+0x134>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d010      	beq.n	8013f92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f70:	f000 f846 	bl	8014000 <xTaskIncrementTick>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d002      	beq.n	8013f80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013f7a:	4b16      	ldr	r3, [pc, #88]	@ (8013fd4 <xTaskResumeAll+0x130>)
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	3b01      	subs	r3, #1
 8013f84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1f1      	bne.n	8013f70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8013f8c:	4b12      	ldr	r3, [pc, #72]	@ (8013fd8 <xTaskResumeAll+0x134>)
 8013f8e:	2200      	movs	r2, #0
 8013f90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f92:	4b10      	ldr	r3, [pc, #64]	@ (8013fd4 <xTaskResumeAll+0x130>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d009      	beq.n	8013fae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013fdc <xTaskResumeAll+0x138>)
 8013fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fa4:	601a      	str	r2, [r3, #0]
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fae:	f001 f8fd 	bl	80151ac <vPortExitCritical>

	return xAlreadyYielded;
 8013fb2:	68bb      	ldr	r3, [r7, #8]
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	24071bc4 	.word	0x24071bc4
 8013fc0:	24071b9c 	.word	0x24071b9c
 8013fc4:	24071b5c 	.word	0x24071b5c
 8013fc8:	24071ba4 	.word	0x24071ba4
 8013fcc:	240716cc 	.word	0x240716cc
 8013fd0:	240716c8 	.word	0x240716c8
 8013fd4:	24071bb0 	.word	0x24071bb0
 8013fd8:	24071bac 	.word	0x24071bac
 8013fdc:	e000ed04 	.word	0xe000ed04

08013fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013fe6:	4b05      	ldr	r3, [pc, #20]	@ (8013ffc <xTaskGetTickCount+0x1c>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fec:	687b      	ldr	r3, [r7, #4]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	370c      	adds	r7, #12
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	24071ba0 	.word	0x24071ba0

08014000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b086      	sub	sp, #24
 8014004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014006:	2300      	movs	r3, #0
 8014008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801400a:	4b4f      	ldr	r3, [pc, #316]	@ (8014148 <xTaskIncrementTick+0x148>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	f040 8090 	bne.w	8014134 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014014:	4b4d      	ldr	r3, [pc, #308]	@ (801414c <xTaskIncrementTick+0x14c>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801401c:	4a4b      	ldr	r2, [pc, #300]	@ (801414c <xTaskIncrementTick+0x14c>)
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d121      	bne.n	801406c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014028:	4b49      	ldr	r3, [pc, #292]	@ (8014150 <xTaskIncrementTick+0x150>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d00b      	beq.n	801404a <xTaskIncrementTick+0x4a>
	__asm volatile
 8014032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	603b      	str	r3, [r7, #0]
}
 8014044:	bf00      	nop
 8014046:	bf00      	nop
 8014048:	e7fd      	b.n	8014046 <xTaskIncrementTick+0x46>
 801404a:	4b41      	ldr	r3, [pc, #260]	@ (8014150 <xTaskIncrementTick+0x150>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	60fb      	str	r3, [r7, #12]
 8014050:	4b40      	ldr	r3, [pc, #256]	@ (8014154 <xTaskIncrementTick+0x154>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4a3e      	ldr	r2, [pc, #248]	@ (8014150 <xTaskIncrementTick+0x150>)
 8014056:	6013      	str	r3, [r2, #0]
 8014058:	4a3e      	ldr	r2, [pc, #248]	@ (8014154 <xTaskIncrementTick+0x154>)
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	6013      	str	r3, [r2, #0]
 801405e:	4b3e      	ldr	r3, [pc, #248]	@ (8014158 <xTaskIncrementTick+0x158>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	3301      	adds	r3, #1
 8014064:	4a3c      	ldr	r2, [pc, #240]	@ (8014158 <xTaskIncrementTick+0x158>)
 8014066:	6013      	str	r3, [r2, #0]
 8014068:	f000 fae2 	bl	8014630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801406c:	4b3b      	ldr	r3, [pc, #236]	@ (801415c <xTaskIncrementTick+0x15c>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	693a      	ldr	r2, [r7, #16]
 8014072:	429a      	cmp	r2, r3
 8014074:	d349      	bcc.n	801410a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014076:	4b36      	ldr	r3, [pc, #216]	@ (8014150 <xTaskIncrementTick+0x150>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d104      	bne.n	801408a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014080:	4b36      	ldr	r3, [pc, #216]	@ (801415c <xTaskIncrementTick+0x15c>)
 8014082:	f04f 32ff 	mov.w	r2, #4294967295
 8014086:	601a      	str	r2, [r3, #0]
					break;
 8014088:	e03f      	b.n	801410a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801408a:	4b31      	ldr	r3, [pc, #196]	@ (8014150 <xTaskIncrementTick+0x150>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d203      	bcs.n	80140aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140a2:	4a2e      	ldr	r2, [pc, #184]	@ (801415c <xTaskIncrementTick+0x15c>)
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140a8:	e02f      	b.n	801410a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	3304      	adds	r3, #4
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fe ff98 	bl	8012fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d004      	beq.n	80140c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	3318      	adds	r3, #24
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fe ff8f 	bl	8012fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140ca:	4b25      	ldr	r3, [pc, #148]	@ (8014160 <xTaskIncrementTick+0x160>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d903      	bls.n	80140da <xTaskIncrementTick+0xda>
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140d6:	4a22      	ldr	r2, [pc, #136]	@ (8014160 <xTaskIncrementTick+0x160>)
 80140d8:	6013      	str	r3, [r2, #0]
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140de:	4613      	mov	r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	4413      	add	r3, r2
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	4a1f      	ldr	r2, [pc, #124]	@ (8014164 <xTaskIncrementTick+0x164>)
 80140e8:	441a      	add	r2, r3
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	3304      	adds	r3, #4
 80140ee:	4619      	mov	r1, r3
 80140f0:	4610      	mov	r0, r2
 80140f2:	f7fe ff1a 	bl	8012f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140fa:	4b1b      	ldr	r3, [pc, #108]	@ (8014168 <xTaskIncrementTick+0x168>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014100:	429a      	cmp	r2, r3
 8014102:	d3b8      	bcc.n	8014076 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014104:	2301      	movs	r3, #1
 8014106:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014108:	e7b5      	b.n	8014076 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801410a:	4b17      	ldr	r3, [pc, #92]	@ (8014168 <xTaskIncrementTick+0x168>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014110:	4914      	ldr	r1, [pc, #80]	@ (8014164 <xTaskIncrementTick+0x164>)
 8014112:	4613      	mov	r3, r2
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	4413      	add	r3, r2
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	440b      	add	r3, r1
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b01      	cmp	r3, #1
 8014120:	d901      	bls.n	8014126 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8014122:	2301      	movs	r3, #1
 8014124:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014126:	4b11      	ldr	r3, [pc, #68]	@ (801416c <xTaskIncrementTick+0x16c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801412e:	2301      	movs	r3, #1
 8014130:	617b      	str	r3, [r7, #20]
 8014132:	e004      	b.n	801413e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014134:	4b0e      	ldr	r3, [pc, #56]	@ (8014170 <xTaskIncrementTick+0x170>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	3301      	adds	r3, #1
 801413a:	4a0d      	ldr	r2, [pc, #52]	@ (8014170 <xTaskIncrementTick+0x170>)
 801413c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801413e:	697b      	ldr	r3, [r7, #20]
}
 8014140:	4618      	mov	r0, r3
 8014142:	3718      	adds	r7, #24
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	24071bc4 	.word	0x24071bc4
 801414c:	24071ba0 	.word	0x24071ba0
 8014150:	24071b54 	.word	0x24071b54
 8014154:	24071b58 	.word	0x24071b58
 8014158:	24071bb4 	.word	0x24071bb4
 801415c:	24071bbc 	.word	0x24071bbc
 8014160:	24071ba4 	.word	0x24071ba4
 8014164:	240716cc 	.word	0x240716cc
 8014168:	240716c8 	.word	0x240716c8
 801416c:	24071bb0 	.word	0x24071bb0
 8014170:	24071bac 	.word	0x24071bac

08014174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014174:	b480      	push	{r7}
 8014176:	b085      	sub	sp, #20
 8014178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801417a:	4b2b      	ldr	r3, [pc, #172]	@ (8014228 <vTaskSwitchContext+0xb4>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d003      	beq.n	801418a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014182:	4b2a      	ldr	r3, [pc, #168]	@ (801422c <vTaskSwitchContext+0xb8>)
 8014184:	2201      	movs	r2, #1
 8014186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014188:	e047      	b.n	801421a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801418a:	4b28      	ldr	r3, [pc, #160]	@ (801422c <vTaskSwitchContext+0xb8>)
 801418c:	2200      	movs	r2, #0
 801418e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014190:	4b27      	ldr	r3, [pc, #156]	@ (8014230 <vTaskSwitchContext+0xbc>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	60fb      	str	r3, [r7, #12]
 8014196:	e011      	b.n	80141bc <vTaskSwitchContext+0x48>
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10b      	bne.n	80141b6 <vTaskSwitchContext+0x42>
	__asm volatile
 801419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a2:	f383 8811 	msr	BASEPRI, r3
 80141a6:	f3bf 8f6f 	isb	sy
 80141aa:	f3bf 8f4f 	dsb	sy
 80141ae:	607b      	str	r3, [r7, #4]
}
 80141b0:	bf00      	nop
 80141b2:	bf00      	nop
 80141b4:	e7fd      	b.n	80141b2 <vTaskSwitchContext+0x3e>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3b01      	subs	r3, #1
 80141ba:	60fb      	str	r3, [r7, #12]
 80141bc:	491d      	ldr	r1, [pc, #116]	@ (8014234 <vTaskSwitchContext+0xc0>)
 80141be:	68fa      	ldr	r2, [r7, #12]
 80141c0:	4613      	mov	r3, r2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	4413      	add	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	440b      	add	r3, r1
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d0e3      	beq.n	8014198 <vTaskSwitchContext+0x24>
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	4613      	mov	r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	4413      	add	r3, r2
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	4a16      	ldr	r2, [pc, #88]	@ (8014234 <vTaskSwitchContext+0xc0>)
 80141dc:	4413      	add	r3, r2
 80141de:	60bb      	str	r3, [r7, #8]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	685a      	ldr	r2, [r3, #4]
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	605a      	str	r2, [r3, #4]
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	685a      	ldr	r2, [r3, #4]
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	3308      	adds	r3, #8
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d104      	bne.n	8014200 <vTaskSwitchContext+0x8c>
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	605a      	str	r2, [r3, #4]
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	4a0c      	ldr	r2, [pc, #48]	@ (8014238 <vTaskSwitchContext+0xc4>)
 8014208:	6013      	str	r3, [r2, #0]
 801420a:	4a09      	ldr	r2, [pc, #36]	@ (8014230 <vTaskSwitchContext+0xbc>)
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014210:	4b09      	ldr	r3, [pc, #36]	@ (8014238 <vTaskSwitchContext+0xc4>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	3354      	adds	r3, #84	@ 0x54
 8014216:	4a09      	ldr	r2, [pc, #36]	@ (801423c <vTaskSwitchContext+0xc8>)
 8014218:	6013      	str	r3, [r2, #0]
}
 801421a:	bf00      	nop
 801421c:	3714      	adds	r7, #20
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr
 8014226:	bf00      	nop
 8014228:	24071bc4 	.word	0x24071bc4
 801422c:	24071bb0 	.word	0x24071bb0
 8014230:	24071ba4 	.word	0x24071ba4
 8014234:	240716cc 	.word	0x240716cc
 8014238:	240716c8 	.word	0x240716c8
 801423c:	24000280 	.word	0x24000280

08014240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d10b      	bne.n	8014268 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014254:	f383 8811 	msr	BASEPRI, r3
 8014258:	f3bf 8f6f 	isb	sy
 801425c:	f3bf 8f4f 	dsb	sy
 8014260:	60fb      	str	r3, [r7, #12]
}
 8014262:	bf00      	nop
 8014264:	bf00      	nop
 8014266:	e7fd      	b.n	8014264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014268:	4b07      	ldr	r3, [pc, #28]	@ (8014288 <vTaskPlaceOnEventList+0x48>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	3318      	adds	r3, #24
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7fe fe7e 	bl	8012f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014276:	2101      	movs	r1, #1
 8014278:	6838      	ldr	r0, [r7, #0]
 801427a:	f000 fa87 	bl	801478c <prvAddCurrentTaskToDelayedList>
}
 801427e:	bf00      	nop
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	240716c8 	.word	0x240716c8

0801428c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d10b      	bne.n	80142b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a2:	f383 8811 	msr	BASEPRI, r3
 80142a6:	f3bf 8f6f 	isb	sy
 80142aa:	f3bf 8f4f 	dsb	sy
 80142ae:	617b      	str	r3, [r7, #20]
}
 80142b0:	bf00      	nop
 80142b2:	bf00      	nop
 80142b4:	e7fd      	b.n	80142b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142b6:	4b0a      	ldr	r3, [pc, #40]	@ (80142e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	3318      	adds	r3, #24
 80142bc:	4619      	mov	r1, r3
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f7fe fe33 	bl	8012f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d002      	beq.n	80142d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80142ca:	f04f 33ff 	mov.w	r3, #4294967295
 80142ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80142d0:	6879      	ldr	r1, [r7, #4]
 80142d2:	68b8      	ldr	r0, [r7, #8]
 80142d4:	f000 fa5a 	bl	801478c <prvAddCurrentTaskToDelayedList>
	}
 80142d8:	bf00      	nop
 80142da:	3718      	adds	r7, #24
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	240716c8 	.word	0x240716c8

080142e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d10b      	bne.n	8014312 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80142fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	60fb      	str	r3, [r7, #12]
}
 801430c:	bf00      	nop
 801430e:	bf00      	nop
 8014310:	e7fd      	b.n	801430e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	3318      	adds	r3, #24
 8014316:	4618      	mov	r0, r3
 8014318:	f7fe fe64 	bl	8012fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801431c:	4b1d      	ldr	r3, [pc, #116]	@ (8014394 <xTaskRemoveFromEventList+0xb0>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d11d      	bne.n	8014360 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	3304      	adds	r3, #4
 8014328:	4618      	mov	r0, r3
 801432a:	f7fe fe5b 	bl	8012fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014332:	4b19      	ldr	r3, [pc, #100]	@ (8014398 <xTaskRemoveFromEventList+0xb4>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	429a      	cmp	r2, r3
 8014338:	d903      	bls.n	8014342 <xTaskRemoveFromEventList+0x5e>
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801433e:	4a16      	ldr	r2, [pc, #88]	@ (8014398 <xTaskRemoveFromEventList+0xb4>)
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014346:	4613      	mov	r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	4413      	add	r3, r2
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	4a13      	ldr	r2, [pc, #76]	@ (801439c <xTaskRemoveFromEventList+0xb8>)
 8014350:	441a      	add	r2, r3
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	3304      	adds	r3, #4
 8014356:	4619      	mov	r1, r3
 8014358:	4610      	mov	r0, r2
 801435a:	f7fe fde6 	bl	8012f2a <vListInsertEnd>
 801435e:	e005      	b.n	801436c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	3318      	adds	r3, #24
 8014364:	4619      	mov	r1, r3
 8014366:	480e      	ldr	r0, [pc, #56]	@ (80143a0 <xTaskRemoveFromEventList+0xbc>)
 8014368:	f7fe fddf 	bl	8012f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014370:	4b0c      	ldr	r3, [pc, #48]	@ (80143a4 <xTaskRemoveFromEventList+0xc0>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014376:	429a      	cmp	r2, r3
 8014378:	d905      	bls.n	8014386 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801437a:	2301      	movs	r3, #1
 801437c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801437e:	4b0a      	ldr	r3, [pc, #40]	@ (80143a8 <xTaskRemoveFromEventList+0xc4>)
 8014380:	2201      	movs	r2, #1
 8014382:	601a      	str	r2, [r3, #0]
 8014384:	e001      	b.n	801438a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014386:	2300      	movs	r3, #0
 8014388:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801438a:	697b      	ldr	r3, [r7, #20]
}
 801438c:	4618      	mov	r0, r3
 801438e:	3718      	adds	r7, #24
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}
 8014394:	24071bc4 	.word	0x24071bc4
 8014398:	24071ba4 	.word	0x24071ba4
 801439c:	240716cc 	.word	0x240716cc
 80143a0:	24071b5c 	.word	0x24071b5c
 80143a4:	240716c8 	.word	0x240716c8
 80143a8:	24071bb0 	.word	0x24071bb0

080143ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80143b4:	4b06      	ldr	r3, [pc, #24]	@ (80143d0 <vTaskInternalSetTimeOutState+0x24>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80143bc:	4b05      	ldr	r3, [pc, #20]	@ (80143d4 <vTaskInternalSetTimeOutState+0x28>)
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	605a      	str	r2, [r3, #4]
}
 80143c4:	bf00      	nop
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	24071bb4 	.word	0x24071bb4
 80143d4:	24071ba0 	.word	0x24071ba0

080143d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b088      	sub	sp, #32
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d10b      	bne.n	8014400 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80143e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143ec:	f383 8811 	msr	BASEPRI, r3
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	613b      	str	r3, [r7, #16]
}
 80143fa:	bf00      	nop
 80143fc:	bf00      	nop
 80143fe:	e7fd      	b.n	80143fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10b      	bne.n	801441e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801440a:	f383 8811 	msr	BASEPRI, r3
 801440e:	f3bf 8f6f 	isb	sy
 8014412:	f3bf 8f4f 	dsb	sy
 8014416:	60fb      	str	r3, [r7, #12]
}
 8014418:	bf00      	nop
 801441a:	bf00      	nop
 801441c:	e7fd      	b.n	801441a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801441e:	f000 fe93 	bl	8015148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014422:	4b1d      	ldr	r3, [pc, #116]	@ (8014498 <xTaskCheckForTimeOut+0xc0>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	69ba      	ldr	r2, [r7, #24]
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443a:	d102      	bne.n	8014442 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801443c:	2300      	movs	r3, #0
 801443e:	61fb      	str	r3, [r7, #28]
 8014440:	e023      	b.n	801448a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	4b15      	ldr	r3, [pc, #84]	@ (801449c <xTaskCheckForTimeOut+0xc4>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	429a      	cmp	r2, r3
 801444c:	d007      	beq.n	801445e <xTaskCheckForTimeOut+0x86>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	69ba      	ldr	r2, [r7, #24]
 8014454:	429a      	cmp	r2, r3
 8014456:	d302      	bcc.n	801445e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014458:	2301      	movs	r3, #1
 801445a:	61fb      	str	r3, [r7, #28]
 801445c:	e015      	b.n	801448a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	697a      	ldr	r2, [r7, #20]
 8014464:	429a      	cmp	r2, r3
 8014466:	d20b      	bcs.n	8014480 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	1ad2      	subs	r2, r2, r3
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7ff ff99 	bl	80143ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801447a:	2300      	movs	r3, #0
 801447c:	61fb      	str	r3, [r7, #28]
 801447e:	e004      	b.n	801448a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	2200      	movs	r2, #0
 8014484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014486:	2301      	movs	r3, #1
 8014488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801448a:	f000 fe8f 	bl	80151ac <vPortExitCritical>

	return xReturn;
 801448e:	69fb      	ldr	r3, [r7, #28]
}
 8014490:	4618      	mov	r0, r3
 8014492:	3720      	adds	r7, #32
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	24071ba0 	.word	0x24071ba0
 801449c:	24071bb4 	.word	0x24071bb4

080144a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80144a0:	b480      	push	{r7}
 80144a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80144a4:	4b03      	ldr	r3, [pc, #12]	@ (80144b4 <vTaskMissedYield+0x14>)
 80144a6:	2201      	movs	r2, #1
 80144a8:	601a      	str	r2, [r3, #0]
}
 80144aa:	bf00      	nop
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr
 80144b4:	24071bb0 	.word	0x24071bb0

080144b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144c0:	f000 f852 	bl	8014568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144c4:	4b06      	ldr	r3, [pc, #24]	@ (80144e0 <prvIdleTask+0x28>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d9f9      	bls.n	80144c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144cc:	4b05      	ldr	r3, [pc, #20]	@ (80144e4 <prvIdleTask+0x2c>)
 80144ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144d2:	601a      	str	r2, [r3, #0]
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144dc:	e7f0      	b.n	80144c0 <prvIdleTask+0x8>
 80144de:	bf00      	nop
 80144e0:	240716cc 	.word	0x240716cc
 80144e4:	e000ed04 	.word	0xe000ed04

080144e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144ee:	2300      	movs	r3, #0
 80144f0:	607b      	str	r3, [r7, #4]
 80144f2:	e00c      	b.n	801450e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	4613      	mov	r3, r2
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	4413      	add	r3, r2
 80144fc:	009b      	lsls	r3, r3, #2
 80144fe:	4a12      	ldr	r2, [pc, #72]	@ (8014548 <prvInitialiseTaskLists+0x60>)
 8014500:	4413      	add	r3, r2
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe fce4 	bl	8012ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	3301      	adds	r3, #1
 801450c:	607b      	str	r3, [r7, #4]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b37      	cmp	r3, #55	@ 0x37
 8014512:	d9ef      	bls.n	80144f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014514:	480d      	ldr	r0, [pc, #52]	@ (801454c <prvInitialiseTaskLists+0x64>)
 8014516:	f7fe fcdb 	bl	8012ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801451a:	480d      	ldr	r0, [pc, #52]	@ (8014550 <prvInitialiseTaskLists+0x68>)
 801451c:	f7fe fcd8 	bl	8012ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014520:	480c      	ldr	r0, [pc, #48]	@ (8014554 <prvInitialiseTaskLists+0x6c>)
 8014522:	f7fe fcd5 	bl	8012ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014526:	480c      	ldr	r0, [pc, #48]	@ (8014558 <prvInitialiseTaskLists+0x70>)
 8014528:	f7fe fcd2 	bl	8012ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801452c:	480b      	ldr	r0, [pc, #44]	@ (801455c <prvInitialiseTaskLists+0x74>)
 801452e:	f7fe fccf 	bl	8012ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014532:	4b0b      	ldr	r3, [pc, #44]	@ (8014560 <prvInitialiseTaskLists+0x78>)
 8014534:	4a05      	ldr	r2, [pc, #20]	@ (801454c <prvInitialiseTaskLists+0x64>)
 8014536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014538:	4b0a      	ldr	r3, [pc, #40]	@ (8014564 <prvInitialiseTaskLists+0x7c>)
 801453a:	4a05      	ldr	r2, [pc, #20]	@ (8014550 <prvInitialiseTaskLists+0x68>)
 801453c:	601a      	str	r2, [r3, #0]
}
 801453e:	bf00      	nop
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	240716cc 	.word	0x240716cc
 801454c:	24071b2c 	.word	0x24071b2c
 8014550:	24071b40 	.word	0x24071b40
 8014554:	24071b5c 	.word	0x24071b5c
 8014558:	24071b70 	.word	0x24071b70
 801455c:	24071b88 	.word	0x24071b88
 8014560:	24071b54 	.word	0x24071b54
 8014564:	24071b58 	.word	0x24071b58

08014568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801456e:	e019      	b.n	80145a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014570:	f000 fdea 	bl	8015148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014574:	4b10      	ldr	r3, [pc, #64]	@ (80145b8 <prvCheckTasksWaitingTermination+0x50>)
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	3304      	adds	r3, #4
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe fd2f 	bl	8012fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014586:	4b0d      	ldr	r3, [pc, #52]	@ (80145bc <prvCheckTasksWaitingTermination+0x54>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	3b01      	subs	r3, #1
 801458c:	4a0b      	ldr	r2, [pc, #44]	@ (80145bc <prvCheckTasksWaitingTermination+0x54>)
 801458e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014590:	4b0b      	ldr	r3, [pc, #44]	@ (80145c0 <prvCheckTasksWaitingTermination+0x58>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	3b01      	subs	r3, #1
 8014596:	4a0a      	ldr	r2, [pc, #40]	@ (80145c0 <prvCheckTasksWaitingTermination+0x58>)
 8014598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801459a:	f000 fe07 	bl	80151ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 f810 	bl	80145c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145a4:	4b06      	ldr	r3, [pc, #24]	@ (80145c0 <prvCheckTasksWaitingTermination+0x58>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d1e1      	bne.n	8014570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80145ac:	bf00      	nop
 80145ae:	bf00      	nop
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	24071b70 	.word	0x24071b70
 80145bc:	24071b9c 	.word	0x24071b9c
 80145c0:	24071b84 	.word	0x24071b84

080145c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	3354      	adds	r3, #84	@ 0x54
 80145d0:	4618      	mov	r0, r3
 80145d2:	f003 faeb 	bl	8017bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d108      	bne.n	80145f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 ff9f 	bl	8015528 <vPortFree>
				vPortFree( pxTCB );
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 ff9c 	bl	8015528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145f0:	e019      	b.n	8014626 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d103      	bne.n	8014604 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 ff93 	bl	8015528 <vPortFree>
	}
 8014602:	e010      	b.n	8014626 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801460a:	2b02      	cmp	r3, #2
 801460c:	d00b      	beq.n	8014626 <prvDeleteTCB+0x62>
	__asm volatile
 801460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014612:	f383 8811 	msr	BASEPRI, r3
 8014616:	f3bf 8f6f 	isb	sy
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	60fb      	str	r3, [r7, #12]
}
 8014620:	bf00      	nop
 8014622:	bf00      	nop
 8014624:	e7fd      	b.n	8014622 <prvDeleteTCB+0x5e>
	}
 8014626:	bf00      	nop
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
	...

08014630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014630:	b480      	push	{r7}
 8014632:	b083      	sub	sp, #12
 8014634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014636:	4b0c      	ldr	r3, [pc, #48]	@ (8014668 <prvResetNextTaskUnblockTime+0x38>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d104      	bne.n	801464a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014640:	4b0a      	ldr	r3, [pc, #40]	@ (801466c <prvResetNextTaskUnblockTime+0x3c>)
 8014642:	f04f 32ff 	mov.w	r2, #4294967295
 8014646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014648:	e008      	b.n	801465c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801464a:	4b07      	ldr	r3, [pc, #28]	@ (8014668 <prvResetNextTaskUnblockTime+0x38>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4a04      	ldr	r2, [pc, #16]	@ (801466c <prvResetNextTaskUnblockTime+0x3c>)
 801465a:	6013      	str	r3, [r2, #0]
}
 801465c:	bf00      	nop
 801465e:	370c      	adds	r7, #12
 8014660:	46bd      	mov	sp, r7
 8014662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014666:	4770      	bx	lr
 8014668:	24071b54 	.word	0x24071b54
 801466c:	24071bbc 	.word	0x24071bbc

08014670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014676:	4b0b      	ldr	r3, [pc, #44]	@ (80146a4 <xTaskGetSchedulerState+0x34>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d102      	bne.n	8014684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801467e:	2301      	movs	r3, #1
 8014680:	607b      	str	r3, [r7, #4]
 8014682:	e008      	b.n	8014696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014684:	4b08      	ldr	r3, [pc, #32]	@ (80146a8 <xTaskGetSchedulerState+0x38>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d102      	bne.n	8014692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801468c:	2302      	movs	r3, #2
 801468e:	607b      	str	r3, [r7, #4]
 8014690:	e001      	b.n	8014696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014692:	2300      	movs	r3, #0
 8014694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014696:	687b      	ldr	r3, [r7, #4]
	}
 8014698:	4618      	mov	r0, r3
 801469a:	370c      	adds	r7, #12
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr
 80146a4:	24071ba8 	.word	0x24071ba8
 80146a8:	24071bc4 	.word	0x24071bc4

080146ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b086      	sub	sp, #24
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80146b8:	2300      	movs	r3, #0
 80146ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d058      	beq.n	8014774 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80146c2:	4b2f      	ldr	r3, [pc, #188]	@ (8014780 <xTaskPriorityDisinherit+0xd4>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	693a      	ldr	r2, [r7, #16]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d00b      	beq.n	80146e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80146cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146d0:	f383 8811 	msr	BASEPRI, r3
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	f3bf 8f4f 	dsb	sy
 80146dc:	60fb      	str	r3, [r7, #12]
}
 80146de:	bf00      	nop
 80146e0:	bf00      	nop
 80146e2:	e7fd      	b.n	80146e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10b      	bne.n	8014704 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80146ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146f0:	f383 8811 	msr	BASEPRI, r3
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	60bb      	str	r3, [r7, #8]
}
 80146fe:	bf00      	nop
 8014700:	bf00      	nop
 8014702:	e7fd      	b.n	8014700 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014708:	1e5a      	subs	r2, r3, #1
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014716:	429a      	cmp	r2, r3
 8014718:	d02c      	beq.n	8014774 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801471e:	2b00      	cmp	r3, #0
 8014720:	d128      	bne.n	8014774 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	3304      	adds	r3, #4
 8014726:	4618      	mov	r0, r3
 8014728:	f7fe fc5c 	bl	8012fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014738:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014744:	4b0f      	ldr	r3, [pc, #60]	@ (8014784 <xTaskPriorityDisinherit+0xd8>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	429a      	cmp	r2, r3
 801474a:	d903      	bls.n	8014754 <xTaskPriorityDisinherit+0xa8>
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014750:	4a0c      	ldr	r2, [pc, #48]	@ (8014784 <xTaskPriorityDisinherit+0xd8>)
 8014752:	6013      	str	r3, [r2, #0]
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014758:	4613      	mov	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	4413      	add	r3, r2
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	4a09      	ldr	r2, [pc, #36]	@ (8014788 <xTaskPriorityDisinherit+0xdc>)
 8014762:	441a      	add	r2, r3
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	3304      	adds	r3, #4
 8014768:	4619      	mov	r1, r3
 801476a:	4610      	mov	r0, r2
 801476c:	f7fe fbdd 	bl	8012f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014770:	2301      	movs	r3, #1
 8014772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014774:	697b      	ldr	r3, [r7, #20]
	}
 8014776:	4618      	mov	r0, r3
 8014778:	3718      	adds	r7, #24
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	240716c8 	.word	0x240716c8
 8014784:	24071ba4 	.word	0x24071ba4
 8014788:	240716cc 	.word	0x240716cc

0801478c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014796:	4b21      	ldr	r3, [pc, #132]	@ (801481c <prvAddCurrentTaskToDelayedList+0x90>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801479c:	4b20      	ldr	r3, [pc, #128]	@ (8014820 <prvAddCurrentTaskToDelayedList+0x94>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3304      	adds	r3, #4
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7fe fc1e 	bl	8012fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ae:	d10a      	bne.n	80147c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d007      	beq.n	80147c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147b6:	4b1a      	ldr	r3, [pc, #104]	@ (8014820 <prvAddCurrentTaskToDelayedList+0x94>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	3304      	adds	r3, #4
 80147bc:	4619      	mov	r1, r3
 80147be:	4819      	ldr	r0, [pc, #100]	@ (8014824 <prvAddCurrentTaskToDelayedList+0x98>)
 80147c0:	f7fe fbb3 	bl	8012f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80147c4:	e026      	b.n	8014814 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80147c6:	68fa      	ldr	r2, [r7, #12]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	4413      	add	r3, r2
 80147cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80147ce:	4b14      	ldr	r3, [pc, #80]	@ (8014820 <prvAddCurrentTaskToDelayedList+0x94>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	68ba      	ldr	r2, [r7, #8]
 80147d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d209      	bcs.n	80147f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147de:	4b12      	ldr	r3, [pc, #72]	@ (8014828 <prvAddCurrentTaskToDelayedList+0x9c>)
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	4b0f      	ldr	r3, [pc, #60]	@ (8014820 <prvAddCurrentTaskToDelayedList+0x94>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	3304      	adds	r3, #4
 80147e8:	4619      	mov	r1, r3
 80147ea:	4610      	mov	r0, r2
 80147ec:	f7fe fbc1 	bl	8012f72 <vListInsert>
}
 80147f0:	e010      	b.n	8014814 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147f2:	4b0e      	ldr	r3, [pc, #56]	@ (801482c <prvAddCurrentTaskToDelayedList+0xa0>)
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	4b0a      	ldr	r3, [pc, #40]	@ (8014820 <prvAddCurrentTaskToDelayedList+0x94>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	3304      	adds	r3, #4
 80147fc:	4619      	mov	r1, r3
 80147fe:	4610      	mov	r0, r2
 8014800:	f7fe fbb7 	bl	8012f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014804:	4b0a      	ldr	r3, [pc, #40]	@ (8014830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	429a      	cmp	r2, r3
 801480c:	d202      	bcs.n	8014814 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801480e:	4a08      	ldr	r2, [pc, #32]	@ (8014830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	6013      	str	r3, [r2, #0]
}
 8014814:	bf00      	nop
 8014816:	3710      	adds	r7, #16
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	24071ba0 	.word	0x24071ba0
 8014820:	240716c8 	.word	0x240716c8
 8014824:	24071b88 	.word	0x24071b88
 8014828:	24071b58 	.word	0x24071b58
 801482c:	24071b54 	.word	0x24071b54
 8014830:	24071bbc 	.word	0x24071bbc

08014834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b08a      	sub	sp, #40	@ 0x28
 8014838:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801483a:	2300      	movs	r3, #0
 801483c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801483e:	f000 fb13 	bl	8014e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014842:	4b1d      	ldr	r3, [pc, #116]	@ (80148b8 <xTimerCreateTimerTask+0x84>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d021      	beq.n	801488e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801484a:	2300      	movs	r3, #0
 801484c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014852:	1d3a      	adds	r2, r7, #4
 8014854:	f107 0108 	add.w	r1, r7, #8
 8014858:	f107 030c 	add.w	r3, r7, #12
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe fb1d 	bl	8012e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014862:	6879      	ldr	r1, [r7, #4]
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	68fa      	ldr	r2, [r7, #12]
 8014868:	9202      	str	r2, [sp, #8]
 801486a:	9301      	str	r3, [sp, #4]
 801486c:	2302      	movs	r3, #2
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	2300      	movs	r3, #0
 8014872:	460a      	mov	r2, r1
 8014874:	4911      	ldr	r1, [pc, #68]	@ (80148bc <xTimerCreateTimerTask+0x88>)
 8014876:	4812      	ldr	r0, [pc, #72]	@ (80148c0 <xTimerCreateTimerTask+0x8c>)
 8014878:	f7ff f8d8 	bl	8013a2c <xTaskCreateStatic>
 801487c:	4603      	mov	r3, r0
 801487e:	4a11      	ldr	r2, [pc, #68]	@ (80148c4 <xTimerCreateTimerTask+0x90>)
 8014880:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014882:	4b10      	ldr	r3, [pc, #64]	@ (80148c4 <xTimerCreateTimerTask+0x90>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801488a:	2301      	movs	r3, #1
 801488c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d10b      	bne.n	80148ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8014894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014898:	f383 8811 	msr	BASEPRI, r3
 801489c:	f3bf 8f6f 	isb	sy
 80148a0:	f3bf 8f4f 	dsb	sy
 80148a4:	613b      	str	r3, [r7, #16]
}
 80148a6:	bf00      	nop
 80148a8:	bf00      	nop
 80148aa:	e7fd      	b.n	80148a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80148ac:	697b      	ldr	r3, [r7, #20]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3718      	adds	r7, #24
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	24071bf8 	.word	0x24071bf8
 80148bc:	0801a248 	.word	0x0801a248
 80148c0:	08014a01 	.word	0x08014a01
 80148c4:	24071bfc 	.word	0x24071bfc

080148c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b08a      	sub	sp, #40	@ 0x28
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
 80148d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80148d6:	2300      	movs	r3, #0
 80148d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d10b      	bne.n	80148f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80148e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e4:	f383 8811 	msr	BASEPRI, r3
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	623b      	str	r3, [r7, #32]
}
 80148f2:	bf00      	nop
 80148f4:	bf00      	nop
 80148f6:	e7fd      	b.n	80148f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80148f8:	4b19      	ldr	r3, [pc, #100]	@ (8014960 <xTimerGenericCommand+0x98>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d02a      	beq.n	8014956 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	2b05      	cmp	r3, #5
 8014910:	dc18      	bgt.n	8014944 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014912:	f7ff fead 	bl	8014670 <xTaskGetSchedulerState>
 8014916:	4603      	mov	r3, r0
 8014918:	2b02      	cmp	r3, #2
 801491a:	d109      	bne.n	8014930 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801491c:	4b10      	ldr	r3, [pc, #64]	@ (8014960 <xTimerGenericCommand+0x98>)
 801491e:	6818      	ldr	r0, [r3, #0]
 8014920:	f107 0110 	add.w	r1, r7, #16
 8014924:	2300      	movs	r3, #0
 8014926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014928:	f7fe fc90 	bl	801324c <xQueueGenericSend>
 801492c:	6278      	str	r0, [r7, #36]	@ 0x24
 801492e:	e012      	b.n	8014956 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014930:	4b0b      	ldr	r3, [pc, #44]	@ (8014960 <xTimerGenericCommand+0x98>)
 8014932:	6818      	ldr	r0, [r3, #0]
 8014934:	f107 0110 	add.w	r1, r7, #16
 8014938:	2300      	movs	r3, #0
 801493a:	2200      	movs	r2, #0
 801493c:	f7fe fc86 	bl	801324c <xQueueGenericSend>
 8014940:	6278      	str	r0, [r7, #36]	@ 0x24
 8014942:	e008      	b.n	8014956 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014944:	4b06      	ldr	r3, [pc, #24]	@ (8014960 <xTimerGenericCommand+0x98>)
 8014946:	6818      	ldr	r0, [r3, #0]
 8014948:	f107 0110 	add.w	r1, r7, #16
 801494c:	2300      	movs	r3, #0
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	f7fe fd7e 	bl	8013450 <xQueueGenericSendFromISR>
 8014954:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014958:	4618      	mov	r0, r3
 801495a:	3728      	adds	r7, #40	@ 0x28
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	24071bf8 	.word	0x24071bf8

08014964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b088      	sub	sp, #32
 8014968:	af02      	add	r7, sp, #8
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801496e:	4b23      	ldr	r3, [pc, #140]	@ (80149fc <prvProcessExpiredTimer+0x98>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	3304      	adds	r3, #4
 801497c:	4618      	mov	r0, r3
 801497e:	f7fe fb31 	bl	8012fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b00      	cmp	r3, #0
 801498e:	d023      	beq.n	80149d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	699a      	ldr	r2, [r3, #24]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	18d1      	adds	r1, r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	683a      	ldr	r2, [r7, #0]
 801499c:	6978      	ldr	r0, [r7, #20]
 801499e:	f000 f8d5 	bl	8014b4c <prvInsertTimerInActiveList>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d020      	beq.n	80149ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80149a8:	2300      	movs	r3, #0
 80149aa:	9300      	str	r3, [sp, #0]
 80149ac:	2300      	movs	r3, #0
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	2100      	movs	r1, #0
 80149b2:	6978      	ldr	r0, [r7, #20]
 80149b4:	f7ff ff88 	bl	80148c8 <xTimerGenericCommand>
 80149b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d114      	bne.n	80149ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80149c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c4:	f383 8811 	msr	BASEPRI, r3
 80149c8:	f3bf 8f6f 	isb	sy
 80149cc:	f3bf 8f4f 	dsb	sy
 80149d0:	60fb      	str	r3, [r7, #12]
}
 80149d2:	bf00      	nop
 80149d4:	bf00      	nop
 80149d6:	e7fd      	b.n	80149d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80149de:	f023 0301 	bic.w	r3, r3, #1
 80149e2:	b2da      	uxtb	r2, r3
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	6a1b      	ldr	r3, [r3, #32]
 80149ee:	6978      	ldr	r0, [r7, #20]
 80149f0:	4798      	blx	r3
}
 80149f2:	bf00      	nop
 80149f4:	3718      	adds	r7, #24
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	24071bf0 	.word	0x24071bf0

08014a00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014a08:	f107 0308 	add.w	r3, r7, #8
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 f859 	bl	8014ac4 <prvGetNextExpireTime>
 8014a12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	4619      	mov	r1, r3
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f000 f805 	bl	8014a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014a1e:	f000 f8d7 	bl	8014bd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014a22:	bf00      	nop
 8014a24:	e7f0      	b.n	8014a08 <prvTimerTask+0x8>
	...

08014a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014a32:	f7ff fa29 	bl	8013e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a36:	f107 0308 	add.w	r3, r7, #8
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f000 f866 	bl	8014b0c <prvSampleTimeNow>
 8014a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d130      	bne.n	8014aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d10a      	bne.n	8014a64 <prvProcessTimerOrBlockTask+0x3c>
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d806      	bhi.n	8014a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014a56:	f7ff fa25 	bl	8013ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014a5a:	68f9      	ldr	r1, [r7, #12]
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f7ff ff81 	bl	8014964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014a62:	e024      	b.n	8014aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d008      	beq.n	8014a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014a6a:	4b13      	ldr	r3, [pc, #76]	@ (8014ab8 <prvProcessTimerOrBlockTask+0x90>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d101      	bne.n	8014a78 <prvProcessTimerOrBlockTask+0x50>
 8014a74:	2301      	movs	r3, #1
 8014a76:	e000      	b.n	8014a7a <prvProcessTimerOrBlockTask+0x52>
 8014a78:	2300      	movs	r3, #0
 8014a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8014abc <prvProcessTimerOrBlockTask+0x94>)
 8014a7e:	6818      	ldr	r0, [r3, #0]
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	1ad3      	subs	r3, r2, r3
 8014a86:	683a      	ldr	r2, [r7, #0]
 8014a88:	4619      	mov	r1, r3
 8014a8a:	f7fe ff9b 	bl	80139c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014a8e:	f7ff fa09 	bl	8013ea4 <xTaskResumeAll>
 8014a92:	4603      	mov	r3, r0
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d10a      	bne.n	8014aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014a98:	4b09      	ldr	r3, [pc, #36]	@ (8014ac0 <prvProcessTimerOrBlockTask+0x98>)
 8014a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a9e:	601a      	str	r2, [r3, #0]
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	f3bf 8f6f 	isb	sy
}
 8014aa8:	e001      	b.n	8014aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014aaa:	f7ff f9fb 	bl	8013ea4 <xTaskResumeAll>
}
 8014aae:	bf00      	nop
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	24071bf4 	.word	0x24071bf4
 8014abc:	24071bf8 	.word	0x24071bf8
 8014ac0:	e000ed04 	.word	0xe000ed04

08014ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014acc:	4b0e      	ldr	r3, [pc, #56]	@ (8014b08 <prvGetNextExpireTime+0x44>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <prvGetNextExpireTime+0x16>
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	e000      	b.n	8014adc <prvGetNextExpireTime+0x18>
 8014ada:	2200      	movs	r2, #0
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d105      	bne.n	8014af4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ae8:	4b07      	ldr	r3, [pc, #28]	@ (8014b08 <prvGetNextExpireTime+0x44>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68db      	ldr	r3, [r3, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	60fb      	str	r3, [r7, #12]
 8014af2:	e001      	b.n	8014af8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014af4:	2300      	movs	r3, #0
 8014af6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014af8:	68fb      	ldr	r3, [r7, #12]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3714      	adds	r7, #20
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop
 8014b08:	24071bf0 	.word	0x24071bf0

08014b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014b14:	f7ff fa64 	bl	8013fe0 <xTaskGetTickCount>
 8014b18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8014b48 <prvSampleTimeNow+0x3c>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d205      	bcs.n	8014b30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014b24:	f000 f93a 	bl	8014d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	601a      	str	r2, [r3, #0]
 8014b2e:	e002      	b.n	8014b36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014b36:	4a04      	ldr	r2, [pc, #16]	@ (8014b48 <prvSampleTimeNow+0x3c>)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	24071c00 	.word	0x24071c00

08014b4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	607a      	str	r2, [r7, #4]
 8014b58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	68ba      	ldr	r2, [r7, #8]
 8014b62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	68fa      	ldr	r2, [r7, #12]
 8014b68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014b6a:	68ba      	ldr	r2, [r7, #8]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d812      	bhi.n	8014b98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	1ad2      	subs	r2, r2, r3
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	699b      	ldr	r3, [r3, #24]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d302      	bcc.n	8014b86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014b80:	2301      	movs	r3, #1
 8014b82:	617b      	str	r3, [r7, #20]
 8014b84:	e01b      	b.n	8014bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014b86:	4b10      	ldr	r3, [pc, #64]	@ (8014bc8 <prvInsertTimerInActiveList+0x7c>)
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	3304      	adds	r3, #4
 8014b8e:	4619      	mov	r1, r3
 8014b90:	4610      	mov	r0, r2
 8014b92:	f7fe f9ee 	bl	8012f72 <vListInsert>
 8014b96:	e012      	b.n	8014bbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d206      	bcs.n	8014bae <prvInsertTimerInActiveList+0x62>
 8014ba0:	68ba      	ldr	r2, [r7, #8]
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d302      	bcc.n	8014bae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ba8:	2301      	movs	r3, #1
 8014baa:	617b      	str	r3, [r7, #20]
 8014bac:	e007      	b.n	8014bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014bae:	4b07      	ldr	r3, [pc, #28]	@ (8014bcc <prvInsertTimerInActiveList+0x80>)
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	4610      	mov	r0, r2
 8014bba:	f7fe f9da 	bl	8012f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014bbe:	697b      	ldr	r3, [r7, #20]
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3718      	adds	r7, #24
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	24071bf4 	.word	0x24071bf4
 8014bcc:	24071bf0 	.word	0x24071bf0

08014bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08e      	sub	sp, #56	@ 0x38
 8014bd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014bd6:	e0ce      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	da19      	bge.n	8014c12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014bde:	1d3b      	adds	r3, r7, #4
 8014be0:	3304      	adds	r3, #4
 8014be2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10b      	bne.n	8014c02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	61fb      	str	r3, [r7, #28]
}
 8014bfc:	bf00      	nop
 8014bfe:	bf00      	nop
 8014c00:	e7fd      	b.n	8014bfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c08:	6850      	ldr	r0, [r2, #4]
 8014c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c0c:	6892      	ldr	r2, [r2, #8]
 8014c0e:	4611      	mov	r1, r2
 8014c10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f2c0 80ae 	blt.w	8014d76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c20:	695b      	ldr	r3, [r3, #20]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d004      	beq.n	8014c30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c28:	3304      	adds	r3, #4
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7fe f9da 	bl	8012fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014c30:	463b      	mov	r3, r7
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7ff ff6a 	bl	8014b0c <prvSampleTimeNow>
 8014c38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b09      	cmp	r3, #9
 8014c3e:	f200 8097 	bhi.w	8014d70 <prvProcessReceivedCommands+0x1a0>
 8014c42:	a201      	add	r2, pc, #4	@ (adr r2, 8014c48 <prvProcessReceivedCommands+0x78>)
 8014c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c48:	08014c71 	.word	0x08014c71
 8014c4c:	08014c71 	.word	0x08014c71
 8014c50:	08014c71 	.word	0x08014c71
 8014c54:	08014ce7 	.word	0x08014ce7
 8014c58:	08014cfb 	.word	0x08014cfb
 8014c5c:	08014d47 	.word	0x08014d47
 8014c60:	08014c71 	.word	0x08014c71
 8014c64:	08014c71 	.word	0x08014c71
 8014c68:	08014ce7 	.word	0x08014ce7
 8014c6c:	08014cfb 	.word	0x08014cfb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014c76:	f043 0301 	orr.w	r3, r3, #1
 8014c7a:	b2da      	uxtb	r2, r3
 8014c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014c82:	68ba      	ldr	r2, [r7, #8]
 8014c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c86:	699b      	ldr	r3, [r3, #24]
 8014c88:	18d1      	adds	r1, r2, r3
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c90:	f7ff ff5c 	bl	8014b4c <prvInsertTimerInActiveList>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d06c      	beq.n	8014d74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c9c:	6a1b      	ldr	r3, [r3, #32]
 8014c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014ca0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ca8:	f003 0304 	and.w	r3, r3, #4
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d061      	beq.n	8014d74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	441a      	add	r2, r3
 8014cb8:	2300      	movs	r3, #0
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014cc2:	f7ff fe01 	bl	80148c8 <xTimerGenericCommand>
 8014cc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014cc8:	6a3b      	ldr	r3, [r7, #32]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d152      	bne.n	8014d74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8014cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cd2:	f383 8811 	msr	BASEPRI, r3
 8014cd6:	f3bf 8f6f 	isb	sy
 8014cda:	f3bf 8f4f 	dsb	sy
 8014cde:	61bb      	str	r3, [r7, #24]
}
 8014ce0:	bf00      	nop
 8014ce2:	bf00      	nop
 8014ce4:	e7fd      	b.n	8014ce2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014cec:	f023 0301 	bic.w	r3, r3, #1
 8014cf0:	b2da      	uxtb	r2, r3
 8014cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8014cf8:	e03d      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d00:	f043 0301 	orr.w	r3, r3, #1
 8014d04:	b2da      	uxtb	r2, r3
 8014d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014d0c:	68ba      	ldr	r2, [r7, #8]
 8014d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d14:	699b      	ldr	r3, [r3, #24]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d10b      	bne.n	8014d32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8014d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	617b      	str	r3, [r7, #20]
}
 8014d2c:	bf00      	nop
 8014d2e:	bf00      	nop
 8014d30:	e7fd      	b.n	8014d2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d34:	699a      	ldr	r2, [r3, #24]
 8014d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d38:	18d1      	adds	r1, r2, r3
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d40:	f7ff ff04 	bl	8014b4c <prvInsertTimerInActiveList>
					break;
 8014d44:	e017      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d4c:	f003 0302 	and.w	r3, r3, #2
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d103      	bne.n	8014d5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d56:	f000 fbe7 	bl	8015528 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014d5a:	e00c      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d62:	f023 0301 	bic.w	r3, r3, #1
 8014d66:	b2da      	uxtb	r2, r3
 8014d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8014d6e:	e002      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8014d70:	bf00      	nop
 8014d72:	e000      	b.n	8014d76 <prvProcessReceivedCommands+0x1a6>
					break;
 8014d74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014d76:	4b08      	ldr	r3, [pc, #32]	@ (8014d98 <prvProcessReceivedCommands+0x1c8>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	1d39      	adds	r1, r7, #4
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7fe fc04 	bl	801358c <xQueueReceive>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f47f af26 	bne.w	8014bd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014d8c:	bf00      	nop
 8014d8e:	bf00      	nop
 8014d90:	3730      	adds	r7, #48	@ 0x30
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	24071bf8 	.word	0x24071bf8

08014d9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b088      	sub	sp, #32
 8014da0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014da2:	e049      	b.n	8014e38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014da4:	4b2e      	ldr	r3, [pc, #184]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dae:	4b2c      	ldr	r3, [pc, #176]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	3304      	adds	r3, #4
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fe f911 	bl	8012fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6a1b      	ldr	r3, [r3, #32]
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014dd0:	f003 0304 	and.w	r3, r3, #4
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d02f      	beq.n	8014e38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	699b      	ldr	r3, [r3, #24]
 8014ddc:	693a      	ldr	r2, [r7, #16]
 8014dde:	4413      	add	r3, r2
 8014de0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014de2:	68ba      	ldr	r2, [r7, #8]
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d90e      	bls.n	8014e08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	68ba      	ldr	r2, [r7, #8]
 8014dee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	68fa      	ldr	r2, [r7, #12]
 8014df4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014df6:	4b1a      	ldr	r3, [pc, #104]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	4619      	mov	r1, r3
 8014e00:	4610      	mov	r0, r2
 8014e02:	f7fe f8b6 	bl	8012f72 <vListInsert>
 8014e06:	e017      	b.n	8014e38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014e08:	2300      	movs	r3, #0
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	693a      	ldr	r2, [r7, #16]
 8014e10:	2100      	movs	r1, #0
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f7ff fd58 	bl	80148c8 <xTimerGenericCommand>
 8014e18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d10b      	bne.n	8014e38 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8014e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e24:	f383 8811 	msr	BASEPRI, r3
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	f3bf 8f4f 	dsb	sy
 8014e30:	603b      	str	r3, [r7, #0]
}
 8014e32:	bf00      	nop
 8014e34:	bf00      	nop
 8014e36:	e7fd      	b.n	8014e34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014e38:	4b09      	ldr	r3, [pc, #36]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1b0      	bne.n	8014da4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014e42:	4b07      	ldr	r3, [pc, #28]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014e48:	4b06      	ldr	r3, [pc, #24]	@ (8014e64 <prvSwitchTimerLists+0xc8>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4a04      	ldr	r2, [pc, #16]	@ (8014e60 <prvSwitchTimerLists+0xc4>)
 8014e4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014e50:	4a04      	ldr	r2, [pc, #16]	@ (8014e64 <prvSwitchTimerLists+0xc8>)
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	6013      	str	r3, [r2, #0]
}
 8014e56:	bf00      	nop
 8014e58:	3718      	adds	r7, #24
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	24071bf0 	.word	0x24071bf0
 8014e64:	24071bf4 	.word	0x24071bf4

08014e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014e6e:	f000 f96b 	bl	8015148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014e72:	4b15      	ldr	r3, [pc, #84]	@ (8014ec8 <prvCheckForValidListAndQueue+0x60>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d120      	bne.n	8014ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014e7a:	4814      	ldr	r0, [pc, #80]	@ (8014ecc <prvCheckForValidListAndQueue+0x64>)
 8014e7c:	f7fe f828 	bl	8012ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014e80:	4813      	ldr	r0, [pc, #76]	@ (8014ed0 <prvCheckForValidListAndQueue+0x68>)
 8014e82:	f7fe f825 	bl	8012ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014e86:	4b13      	ldr	r3, [pc, #76]	@ (8014ed4 <prvCheckForValidListAndQueue+0x6c>)
 8014e88:	4a10      	ldr	r2, [pc, #64]	@ (8014ecc <prvCheckForValidListAndQueue+0x64>)
 8014e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014e8c:	4b12      	ldr	r3, [pc, #72]	@ (8014ed8 <prvCheckForValidListAndQueue+0x70>)
 8014e8e:	4a10      	ldr	r2, [pc, #64]	@ (8014ed0 <prvCheckForValidListAndQueue+0x68>)
 8014e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014e92:	2300      	movs	r3, #0
 8014e94:	9300      	str	r3, [sp, #0]
 8014e96:	4b11      	ldr	r3, [pc, #68]	@ (8014edc <prvCheckForValidListAndQueue+0x74>)
 8014e98:	4a11      	ldr	r2, [pc, #68]	@ (8014ee0 <prvCheckForValidListAndQueue+0x78>)
 8014e9a:	2110      	movs	r1, #16
 8014e9c:	200a      	movs	r0, #10
 8014e9e:	f7fe f935 	bl	801310c <xQueueGenericCreateStatic>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	4a08      	ldr	r2, [pc, #32]	@ (8014ec8 <prvCheckForValidListAndQueue+0x60>)
 8014ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014ea8:	4b07      	ldr	r3, [pc, #28]	@ (8014ec8 <prvCheckForValidListAndQueue+0x60>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d005      	beq.n	8014ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014eb0:	4b05      	ldr	r3, [pc, #20]	@ (8014ec8 <prvCheckForValidListAndQueue+0x60>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	490b      	ldr	r1, [pc, #44]	@ (8014ee4 <prvCheckForValidListAndQueue+0x7c>)
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7fe fd5a 	bl	8013970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ebc:	f000 f976 	bl	80151ac <vPortExitCritical>
}
 8014ec0:	bf00      	nop
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	24071bf8 	.word	0x24071bf8
 8014ecc:	24071bc8 	.word	0x24071bc8
 8014ed0:	24071bdc 	.word	0x24071bdc
 8014ed4:	24071bf0 	.word	0x24071bf0
 8014ed8:	24071bf4 	.word	0x24071bf4
 8014edc:	24071ca4 	.word	0x24071ca4
 8014ee0:	24071c04 	.word	0x24071c04
 8014ee4:	0801a250 	.word	0x0801a250

08014ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	3b04      	subs	r3, #4
 8014ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3b04      	subs	r3, #4
 8014f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	f023 0201 	bic.w	r2, r3, #1
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	3b04      	subs	r3, #4
 8014f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f18:	4a0c      	ldr	r2, [pc, #48]	@ (8014f4c <pxPortInitialiseStack+0x64>)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	3b14      	subs	r3, #20
 8014f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	3b04      	subs	r3, #4
 8014f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f06f 0202 	mvn.w	r2, #2
 8014f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	3b20      	subs	r3, #32
 8014f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3714      	adds	r7, #20
 8014f44:	46bd      	mov	sp, r7
 8014f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4a:	4770      	bx	lr
 8014f4c:	08014f51 	.word	0x08014f51

08014f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014f50:	b480      	push	{r7}
 8014f52:	b085      	sub	sp, #20
 8014f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014f56:	2300      	movs	r3, #0
 8014f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014f5a:	4b13      	ldr	r3, [pc, #76]	@ (8014fa8 <prvTaskExitError+0x58>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f62:	d00b      	beq.n	8014f7c <prvTaskExitError+0x2c>
	__asm volatile
 8014f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f68:	f383 8811 	msr	BASEPRI, r3
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	f3bf 8f4f 	dsb	sy
 8014f74:	60fb      	str	r3, [r7, #12]
}
 8014f76:	bf00      	nop
 8014f78:	bf00      	nop
 8014f7a:	e7fd      	b.n	8014f78 <prvTaskExitError+0x28>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	60bb      	str	r3, [r7, #8]
}
 8014f8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014f90:	bf00      	nop
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d0fc      	beq.n	8014f92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014f98:	bf00      	nop
 8014f9a:	bf00      	nop
 8014f9c:	3714      	adds	r7, #20
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop
 8014fa8:	2400009c 	.word	0x2400009c
 8014fac:	00000000 	.word	0x00000000

08014fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014fb0:	4b07      	ldr	r3, [pc, #28]	@ (8014fd0 <pxCurrentTCBConst2>)
 8014fb2:	6819      	ldr	r1, [r3, #0]
 8014fb4:	6808      	ldr	r0, [r1, #0]
 8014fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fba:	f380 8809 	msr	PSP, r0
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f04f 0000 	mov.w	r0, #0
 8014fc6:	f380 8811 	msr	BASEPRI, r0
 8014fca:	4770      	bx	lr
 8014fcc:	f3af 8000 	nop.w

08014fd0 <pxCurrentTCBConst2>:
 8014fd0:	240716c8 	.word	0x240716c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop

08014fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014fd8:	4808      	ldr	r0, [pc, #32]	@ (8014ffc <prvPortStartFirstTask+0x24>)
 8014fda:	6800      	ldr	r0, [r0, #0]
 8014fdc:	6800      	ldr	r0, [r0, #0]
 8014fde:	f380 8808 	msr	MSP, r0
 8014fe2:	f04f 0000 	mov.w	r0, #0
 8014fe6:	f380 8814 	msr	CONTROL, r0
 8014fea:	b662      	cpsie	i
 8014fec:	b661      	cpsie	f
 8014fee:	f3bf 8f4f 	dsb	sy
 8014ff2:	f3bf 8f6f 	isb	sy
 8014ff6:	df00      	svc	0
 8014ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014ffa:	bf00      	nop
 8014ffc:	e000ed08 	.word	0xe000ed08

08015000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015006:	4b47      	ldr	r3, [pc, #284]	@ (8015124 <xPortStartScheduler+0x124>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4a47      	ldr	r2, [pc, #284]	@ (8015128 <xPortStartScheduler+0x128>)
 801500c:	4293      	cmp	r3, r2
 801500e:	d10b      	bne.n	8015028 <xPortStartScheduler+0x28>
	__asm volatile
 8015010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	613b      	str	r3, [r7, #16]
}
 8015022:	bf00      	nop
 8015024:	bf00      	nop
 8015026:	e7fd      	b.n	8015024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015028:	4b3e      	ldr	r3, [pc, #248]	@ (8015124 <xPortStartScheduler+0x124>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	4a3f      	ldr	r2, [pc, #252]	@ (801512c <xPortStartScheduler+0x12c>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d10b      	bne.n	801504a <xPortStartScheduler+0x4a>
	__asm volatile
 8015032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015036:	f383 8811 	msr	BASEPRI, r3
 801503a:	f3bf 8f6f 	isb	sy
 801503e:	f3bf 8f4f 	dsb	sy
 8015042:	60fb      	str	r3, [r7, #12]
}
 8015044:	bf00      	nop
 8015046:	bf00      	nop
 8015048:	e7fd      	b.n	8015046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801504a:	4b39      	ldr	r3, [pc, #228]	@ (8015130 <xPortStartScheduler+0x130>)
 801504c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	b2db      	uxtb	r3, r3
 8015054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	22ff      	movs	r2, #255	@ 0xff
 801505a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	b2db      	uxtb	r3, r3
 8015062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015064:	78fb      	ldrb	r3, [r7, #3]
 8015066:	b2db      	uxtb	r3, r3
 8015068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801506c:	b2da      	uxtb	r2, r3
 801506e:	4b31      	ldr	r3, [pc, #196]	@ (8015134 <xPortStartScheduler+0x134>)
 8015070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015072:	4b31      	ldr	r3, [pc, #196]	@ (8015138 <xPortStartScheduler+0x138>)
 8015074:	2207      	movs	r2, #7
 8015076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015078:	e009      	b.n	801508e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801507a:	4b2f      	ldr	r3, [pc, #188]	@ (8015138 <xPortStartScheduler+0x138>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	3b01      	subs	r3, #1
 8015080:	4a2d      	ldr	r2, [pc, #180]	@ (8015138 <xPortStartScheduler+0x138>)
 8015082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015084:	78fb      	ldrb	r3, [r7, #3]
 8015086:	b2db      	uxtb	r3, r3
 8015088:	005b      	lsls	r3, r3, #1
 801508a:	b2db      	uxtb	r3, r3
 801508c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801508e:	78fb      	ldrb	r3, [r7, #3]
 8015090:	b2db      	uxtb	r3, r3
 8015092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015096:	2b80      	cmp	r3, #128	@ 0x80
 8015098:	d0ef      	beq.n	801507a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801509a:	4b27      	ldr	r3, [pc, #156]	@ (8015138 <xPortStartScheduler+0x138>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	f1c3 0307 	rsb	r3, r3, #7
 80150a2:	2b04      	cmp	r3, #4
 80150a4:	d00b      	beq.n	80150be <xPortStartScheduler+0xbe>
	__asm volatile
 80150a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150aa:	f383 8811 	msr	BASEPRI, r3
 80150ae:	f3bf 8f6f 	isb	sy
 80150b2:	f3bf 8f4f 	dsb	sy
 80150b6:	60bb      	str	r3, [r7, #8]
}
 80150b8:	bf00      	nop
 80150ba:	bf00      	nop
 80150bc:	e7fd      	b.n	80150ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80150be:	4b1e      	ldr	r3, [pc, #120]	@ (8015138 <xPortStartScheduler+0x138>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	021b      	lsls	r3, r3, #8
 80150c4:	4a1c      	ldr	r2, [pc, #112]	@ (8015138 <xPortStartScheduler+0x138>)
 80150c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80150c8:	4b1b      	ldr	r3, [pc, #108]	@ (8015138 <xPortStartScheduler+0x138>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80150d0:	4a19      	ldr	r2, [pc, #100]	@ (8015138 <xPortStartScheduler+0x138>)
 80150d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	b2da      	uxtb	r2, r3
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80150dc:	4b17      	ldr	r3, [pc, #92]	@ (801513c <xPortStartScheduler+0x13c>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a16      	ldr	r2, [pc, #88]	@ (801513c <xPortStartScheduler+0x13c>)
 80150e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80150e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80150e8:	4b14      	ldr	r3, [pc, #80]	@ (801513c <xPortStartScheduler+0x13c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4a13      	ldr	r2, [pc, #76]	@ (801513c <xPortStartScheduler+0x13c>)
 80150ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80150f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80150f4:	f000 f8da 	bl	80152ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80150f8:	4b11      	ldr	r3, [pc, #68]	@ (8015140 <xPortStartScheduler+0x140>)
 80150fa:	2200      	movs	r2, #0
 80150fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80150fe:	f000 f8f9 	bl	80152f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015102:	4b10      	ldr	r3, [pc, #64]	@ (8015144 <xPortStartScheduler+0x144>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	4a0f      	ldr	r2, [pc, #60]	@ (8015144 <xPortStartScheduler+0x144>)
 8015108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801510c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801510e:	f7ff ff63 	bl	8014fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015112:	f7ff f82f 	bl	8014174 <vTaskSwitchContext>
	prvTaskExitError();
 8015116:	f7ff ff1b 	bl	8014f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801511a:	2300      	movs	r3, #0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3718      	adds	r7, #24
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	e000ed00 	.word	0xe000ed00
 8015128:	410fc271 	.word	0x410fc271
 801512c:	410fc270 	.word	0x410fc270
 8015130:	e000e400 	.word	0xe000e400
 8015134:	24071cf4 	.word	0x24071cf4
 8015138:	24071cf8 	.word	0x24071cf8
 801513c:	e000ed20 	.word	0xe000ed20
 8015140:	2400009c 	.word	0x2400009c
 8015144:	e000ef34 	.word	0xe000ef34

08015148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
	__asm volatile
 801514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015152:	f383 8811 	msr	BASEPRI, r3
 8015156:	f3bf 8f6f 	isb	sy
 801515a:	f3bf 8f4f 	dsb	sy
 801515e:	607b      	str	r3, [r7, #4]
}
 8015160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015162:	4b10      	ldr	r3, [pc, #64]	@ (80151a4 <vPortEnterCritical+0x5c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	3301      	adds	r3, #1
 8015168:	4a0e      	ldr	r2, [pc, #56]	@ (80151a4 <vPortEnterCritical+0x5c>)
 801516a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801516c:	4b0d      	ldr	r3, [pc, #52]	@ (80151a4 <vPortEnterCritical+0x5c>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2b01      	cmp	r3, #1
 8015172:	d110      	bne.n	8015196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015174:	4b0c      	ldr	r3, [pc, #48]	@ (80151a8 <vPortEnterCritical+0x60>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	b2db      	uxtb	r3, r3
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00b      	beq.n	8015196 <vPortEnterCritical+0x4e>
	__asm volatile
 801517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015182:	f383 8811 	msr	BASEPRI, r3
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	f3bf 8f4f 	dsb	sy
 801518e:	603b      	str	r3, [r7, #0]
}
 8015190:	bf00      	nop
 8015192:	bf00      	nop
 8015194:	e7fd      	b.n	8015192 <vPortEnterCritical+0x4a>
	}
}
 8015196:	bf00      	nop
 8015198:	370c      	adds	r7, #12
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	2400009c 	.word	0x2400009c
 80151a8:	e000ed04 	.word	0xe000ed04

080151ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80151b2:	4b12      	ldr	r3, [pc, #72]	@ (80151fc <vPortExitCritical+0x50>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d10b      	bne.n	80151d2 <vPortExitCritical+0x26>
	__asm volatile
 80151ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151be:	f383 8811 	msr	BASEPRI, r3
 80151c2:	f3bf 8f6f 	isb	sy
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	607b      	str	r3, [r7, #4]
}
 80151cc:	bf00      	nop
 80151ce:	bf00      	nop
 80151d0:	e7fd      	b.n	80151ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80151d2:	4b0a      	ldr	r3, [pc, #40]	@ (80151fc <vPortExitCritical+0x50>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	3b01      	subs	r3, #1
 80151d8:	4a08      	ldr	r2, [pc, #32]	@ (80151fc <vPortExitCritical+0x50>)
 80151da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80151dc:	4b07      	ldr	r3, [pc, #28]	@ (80151fc <vPortExitCritical+0x50>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d105      	bne.n	80151f0 <vPortExitCritical+0x44>
 80151e4:	2300      	movs	r3, #0
 80151e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	f383 8811 	msr	BASEPRI, r3
}
 80151ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80151f0:	bf00      	nop
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr
 80151fc:	2400009c 	.word	0x2400009c

08015200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015200:	f3ef 8009 	mrs	r0, PSP
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	4b15      	ldr	r3, [pc, #84]	@ (8015260 <pxCurrentTCBConst>)
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	f01e 0f10 	tst.w	lr, #16
 8015210:	bf08      	it	eq
 8015212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521a:	6010      	str	r0, [r2, #0]
 801521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015224:	f380 8811 	msr	BASEPRI, r0
 8015228:	f3bf 8f4f 	dsb	sy
 801522c:	f3bf 8f6f 	isb	sy
 8015230:	f7fe ffa0 	bl	8014174 <vTaskSwitchContext>
 8015234:	f04f 0000 	mov.w	r0, #0
 8015238:	f380 8811 	msr	BASEPRI, r0
 801523c:	bc09      	pop	{r0, r3}
 801523e:	6819      	ldr	r1, [r3, #0]
 8015240:	6808      	ldr	r0, [r1, #0]
 8015242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015246:	f01e 0f10 	tst.w	lr, #16
 801524a:	bf08      	it	eq
 801524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015250:	f380 8809 	msr	PSP, r0
 8015254:	f3bf 8f6f 	isb	sy
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop
 801525c:	f3af 8000 	nop.w

08015260 <pxCurrentTCBConst>:
 8015260:	240716c8 	.word	0x240716c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015264:	bf00      	nop
 8015266:	bf00      	nop

08015268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
	__asm volatile
 801526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015272:	f383 8811 	msr	BASEPRI, r3
 8015276:	f3bf 8f6f 	isb	sy
 801527a:	f3bf 8f4f 	dsb	sy
 801527e:	607b      	str	r3, [r7, #4]
}
 8015280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015282:	f7fe febd 	bl	8014000 <xTaskIncrementTick>
 8015286:	4603      	mov	r3, r0
 8015288:	2b00      	cmp	r3, #0
 801528a:	d003      	beq.n	8015294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801528c:	4b06      	ldr	r3, [pc, #24]	@ (80152a8 <xPortSysTickHandler+0x40>)
 801528e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015292:	601a      	str	r2, [r3, #0]
 8015294:	2300      	movs	r3, #0
 8015296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	f383 8811 	msr	BASEPRI, r3
}
 801529e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80152a0:	bf00      	nop
 80152a2:	3708      	adds	r7, #8
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	e000ed04 	.word	0xe000ed04

080152ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80152ac:	b480      	push	{r7}
 80152ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80152b0:	4b0b      	ldr	r3, [pc, #44]	@ (80152e0 <vPortSetupTimerInterrupt+0x34>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80152b6:	4b0b      	ldr	r3, [pc, #44]	@ (80152e4 <vPortSetupTimerInterrupt+0x38>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80152bc:	4b0a      	ldr	r3, [pc, #40]	@ (80152e8 <vPortSetupTimerInterrupt+0x3c>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4a0a      	ldr	r2, [pc, #40]	@ (80152ec <vPortSetupTimerInterrupt+0x40>)
 80152c2:	fba2 2303 	umull	r2, r3, r2, r3
 80152c6:	099b      	lsrs	r3, r3, #6
 80152c8:	4a09      	ldr	r2, [pc, #36]	@ (80152f0 <vPortSetupTimerInterrupt+0x44>)
 80152ca:	3b01      	subs	r3, #1
 80152cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80152ce:	4b04      	ldr	r3, [pc, #16]	@ (80152e0 <vPortSetupTimerInterrupt+0x34>)
 80152d0:	2207      	movs	r2, #7
 80152d2:	601a      	str	r2, [r3, #0]
}
 80152d4:	bf00      	nop
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	e000e010 	.word	0xe000e010
 80152e4:	e000e018 	.word	0xe000e018
 80152e8:	24000000 	.word	0x24000000
 80152ec:	10624dd3 	.word	0x10624dd3
 80152f0:	e000e014 	.word	0xe000e014

080152f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80152f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015304 <vPortEnableVFP+0x10>
 80152f8:	6801      	ldr	r1, [r0, #0]
 80152fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80152fe:	6001      	str	r1, [r0, #0]
 8015300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015302:	bf00      	nop
 8015304:	e000ed88 	.word	0xe000ed88

08015308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015308:	b480      	push	{r7}
 801530a:	b085      	sub	sp, #20
 801530c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801530e:	f3ef 8305 	mrs	r3, IPSR
 8015312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b0f      	cmp	r3, #15
 8015318:	d915      	bls.n	8015346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801531a:	4a18      	ldr	r2, [pc, #96]	@ (801537c <vPortValidateInterruptPriority+0x74>)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	4413      	add	r3, r2
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015324:	4b16      	ldr	r3, [pc, #88]	@ (8015380 <vPortValidateInterruptPriority+0x78>)
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	7afa      	ldrb	r2, [r7, #11]
 801532a:	429a      	cmp	r2, r3
 801532c:	d20b      	bcs.n	8015346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015332:	f383 8811 	msr	BASEPRI, r3
 8015336:	f3bf 8f6f 	isb	sy
 801533a:	f3bf 8f4f 	dsb	sy
 801533e:	607b      	str	r3, [r7, #4]
}
 8015340:	bf00      	nop
 8015342:	bf00      	nop
 8015344:	e7fd      	b.n	8015342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015346:	4b0f      	ldr	r3, [pc, #60]	@ (8015384 <vPortValidateInterruptPriority+0x7c>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801534e:	4b0e      	ldr	r3, [pc, #56]	@ (8015388 <vPortValidateInterruptPriority+0x80>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	429a      	cmp	r2, r3
 8015354:	d90b      	bls.n	801536e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	603b      	str	r3, [r7, #0]
}
 8015368:	bf00      	nop
 801536a:	bf00      	nop
 801536c:	e7fd      	b.n	801536a <vPortValidateInterruptPriority+0x62>
	}
 801536e:	bf00      	nop
 8015370:	3714      	adds	r7, #20
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	e000e3f0 	.word	0xe000e3f0
 8015380:	24071cf4 	.word	0x24071cf4
 8015384:	e000ed0c 	.word	0xe000ed0c
 8015388:	24071cf8 	.word	0x24071cf8

0801538c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b08a      	sub	sp, #40	@ 0x28
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015394:	2300      	movs	r3, #0
 8015396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015398:	f7fe fd76 	bl	8013e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801539c:	4b5c      	ldr	r3, [pc, #368]	@ (8015510 <pvPortMalloc+0x184>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80153a4:	f000 f924 	bl	80155f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80153a8:	4b5a      	ldr	r3, [pc, #360]	@ (8015514 <pvPortMalloc+0x188>)
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	4013      	ands	r3, r2
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f040 8095 	bne.w	80154e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d01e      	beq.n	80153fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80153bc:	2208      	movs	r2, #8
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	4413      	add	r3, r2
 80153c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f003 0307 	and.w	r3, r3, #7
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d015      	beq.n	80153fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f023 0307 	bic.w	r3, r3, #7
 80153d4:	3308      	adds	r3, #8
 80153d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f003 0307 	and.w	r3, r3, #7
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d00b      	beq.n	80153fa <pvPortMalloc+0x6e>
	__asm volatile
 80153e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153e6:	f383 8811 	msr	BASEPRI, r3
 80153ea:	f3bf 8f6f 	isb	sy
 80153ee:	f3bf 8f4f 	dsb	sy
 80153f2:	617b      	str	r3, [r7, #20]
}
 80153f4:	bf00      	nop
 80153f6:	bf00      	nop
 80153f8:	e7fd      	b.n	80153f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d06f      	beq.n	80154e0 <pvPortMalloc+0x154>
 8015400:	4b45      	ldr	r3, [pc, #276]	@ (8015518 <pvPortMalloc+0x18c>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	429a      	cmp	r2, r3
 8015408:	d86a      	bhi.n	80154e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801540a:	4b44      	ldr	r3, [pc, #272]	@ (801551c <pvPortMalloc+0x190>)
 801540c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801540e:	4b43      	ldr	r3, [pc, #268]	@ (801551c <pvPortMalloc+0x190>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015414:	e004      	b.n	8015420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	429a      	cmp	r2, r3
 8015428:	d903      	bls.n	8015432 <pvPortMalloc+0xa6>
 801542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d1f1      	bne.n	8015416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015432:	4b37      	ldr	r3, [pc, #220]	@ (8015510 <pvPortMalloc+0x184>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015438:	429a      	cmp	r2, r3
 801543a:	d051      	beq.n	80154e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801543c:	6a3b      	ldr	r3, [r7, #32]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2208      	movs	r2, #8
 8015442:	4413      	add	r3, r2
 8015444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	6a3b      	ldr	r3, [r7, #32]
 801544c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015450:	685a      	ldr	r2, [r3, #4]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	1ad2      	subs	r2, r2, r3
 8015456:	2308      	movs	r3, #8
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	429a      	cmp	r2, r3
 801545c:	d920      	bls.n	80154a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801545e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	4413      	add	r3, r2
 8015464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	f003 0307 	and.w	r3, r3, #7
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00b      	beq.n	8015488 <pvPortMalloc+0xfc>
	__asm volatile
 8015470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015474:	f383 8811 	msr	BASEPRI, r3
 8015478:	f3bf 8f6f 	isb	sy
 801547c:	f3bf 8f4f 	dsb	sy
 8015480:	613b      	str	r3, [r7, #16]
}
 8015482:	bf00      	nop
 8015484:	bf00      	nop
 8015486:	e7fd      	b.n	8015484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801548a:	685a      	ldr	r2, [r3, #4]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	1ad2      	subs	r2, r2, r3
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801549a:	69b8      	ldr	r0, [r7, #24]
 801549c:	f000 f90a 	bl	80156b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80154a0:	4b1d      	ldr	r3, [pc, #116]	@ (8015518 <pvPortMalloc+0x18c>)
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	1ad3      	subs	r3, r2, r3
 80154aa:	4a1b      	ldr	r2, [pc, #108]	@ (8015518 <pvPortMalloc+0x18c>)
 80154ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80154ae:	4b1a      	ldr	r3, [pc, #104]	@ (8015518 <pvPortMalloc+0x18c>)
 80154b0:	681a      	ldr	r2, [r3, #0]
 80154b2:	4b1b      	ldr	r3, [pc, #108]	@ (8015520 <pvPortMalloc+0x194>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d203      	bcs.n	80154c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80154ba:	4b17      	ldr	r3, [pc, #92]	@ (8015518 <pvPortMalloc+0x18c>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4a18      	ldr	r2, [pc, #96]	@ (8015520 <pvPortMalloc+0x194>)
 80154c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80154c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c4:	685a      	ldr	r2, [r3, #4]
 80154c6:	4b13      	ldr	r3, [pc, #76]	@ (8015514 <pvPortMalloc+0x188>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	431a      	orrs	r2, r3
 80154cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80154d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154d2:	2200      	movs	r2, #0
 80154d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80154d6:	4b13      	ldr	r3, [pc, #76]	@ (8015524 <pvPortMalloc+0x198>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	3301      	adds	r3, #1
 80154dc:	4a11      	ldr	r2, [pc, #68]	@ (8015524 <pvPortMalloc+0x198>)
 80154de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80154e0:	f7fe fce0 	bl	8013ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	f003 0307 	and.w	r3, r3, #7
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d00b      	beq.n	8015506 <pvPortMalloc+0x17a>
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	60fb      	str	r3, [r7, #12]
}
 8015500:	bf00      	nop
 8015502:	bf00      	nop
 8015504:	e7fd      	b.n	8015502 <pvPortMalloc+0x176>
	return pvReturn;
 8015506:	69fb      	ldr	r3, [r7, #28]
}
 8015508:	4618      	mov	r0, r3
 801550a:	3728      	adds	r7, #40	@ 0x28
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	24075904 	.word	0x24075904
 8015514:	24075918 	.word	0x24075918
 8015518:	24075908 	.word	0x24075908
 801551c:	240758fc 	.word	0x240758fc
 8015520:	2407590c 	.word	0x2407590c
 8015524:	24075910 	.word	0x24075910

08015528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b086      	sub	sp, #24
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d04f      	beq.n	80155da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801553a:	2308      	movs	r3, #8
 801553c:	425b      	negs	r3, r3
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	4413      	add	r3, r2
 8015542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	685a      	ldr	r2, [r3, #4]
 801554c:	4b25      	ldr	r3, [pc, #148]	@ (80155e4 <vPortFree+0xbc>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4013      	ands	r3, r2
 8015552:	2b00      	cmp	r3, #0
 8015554:	d10b      	bne.n	801556e <vPortFree+0x46>
	__asm volatile
 8015556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801555a:	f383 8811 	msr	BASEPRI, r3
 801555e:	f3bf 8f6f 	isb	sy
 8015562:	f3bf 8f4f 	dsb	sy
 8015566:	60fb      	str	r3, [r7, #12]
}
 8015568:	bf00      	nop
 801556a:	bf00      	nop
 801556c:	e7fd      	b.n	801556a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d00b      	beq.n	801558e <vPortFree+0x66>
	__asm volatile
 8015576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801557a:	f383 8811 	msr	BASEPRI, r3
 801557e:	f3bf 8f6f 	isb	sy
 8015582:	f3bf 8f4f 	dsb	sy
 8015586:	60bb      	str	r3, [r7, #8]
}
 8015588:	bf00      	nop
 801558a:	bf00      	nop
 801558c:	e7fd      	b.n	801558a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	685a      	ldr	r2, [r3, #4]
 8015592:	4b14      	ldr	r3, [pc, #80]	@ (80155e4 <vPortFree+0xbc>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4013      	ands	r3, r2
 8015598:	2b00      	cmp	r3, #0
 801559a:	d01e      	beq.n	80155da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d11a      	bne.n	80155da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80155a4:	693b      	ldr	r3, [r7, #16]
 80155a6:	685a      	ldr	r2, [r3, #4]
 80155a8:	4b0e      	ldr	r3, [pc, #56]	@ (80155e4 <vPortFree+0xbc>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	43db      	mvns	r3, r3
 80155ae:	401a      	ands	r2, r3
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80155b4:	f7fe fc68 	bl	8013e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	685a      	ldr	r2, [r3, #4]
 80155bc:	4b0a      	ldr	r3, [pc, #40]	@ (80155e8 <vPortFree+0xc0>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4413      	add	r3, r2
 80155c2:	4a09      	ldr	r2, [pc, #36]	@ (80155e8 <vPortFree+0xc0>)
 80155c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80155c6:	6938      	ldr	r0, [r7, #16]
 80155c8:	f000 f874 	bl	80156b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80155cc:	4b07      	ldr	r3, [pc, #28]	@ (80155ec <vPortFree+0xc4>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	3301      	adds	r3, #1
 80155d2:	4a06      	ldr	r2, [pc, #24]	@ (80155ec <vPortFree+0xc4>)
 80155d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80155d6:	f7fe fc65 	bl	8013ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80155da:	bf00      	nop
 80155dc:	3718      	adds	r7, #24
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}
 80155e2:	bf00      	nop
 80155e4:	24075918 	.word	0x24075918
 80155e8:	24075908 	.word	0x24075908
 80155ec:	24075914 	.word	0x24075914

080155f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80155f0:	b480      	push	{r7}
 80155f2:	b085      	sub	sp, #20
 80155f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80155f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80155fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80155fc:	4b27      	ldr	r3, [pc, #156]	@ (801569c <prvHeapInit+0xac>)
 80155fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f003 0307 	and.w	r3, r3, #7
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00c      	beq.n	8015624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	3307      	adds	r3, #7
 801560e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f023 0307 	bic.w	r3, r3, #7
 8015616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	1ad3      	subs	r3, r2, r3
 801561e:	4a1f      	ldr	r2, [pc, #124]	@ (801569c <prvHeapInit+0xac>)
 8015620:	4413      	add	r3, r2
 8015622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015628:	4a1d      	ldr	r2, [pc, #116]	@ (80156a0 <prvHeapInit+0xb0>)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801562e:	4b1c      	ldr	r3, [pc, #112]	@ (80156a0 <prvHeapInit+0xb0>)
 8015630:	2200      	movs	r2, #0
 8015632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	68ba      	ldr	r2, [r7, #8]
 8015638:	4413      	add	r3, r2
 801563a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801563c:	2208      	movs	r2, #8
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	1a9b      	subs	r3, r3, r2
 8015642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	f023 0307 	bic.w	r3, r3, #7
 801564a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	4a15      	ldr	r2, [pc, #84]	@ (80156a4 <prvHeapInit+0xb4>)
 8015650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015652:	4b14      	ldr	r3, [pc, #80]	@ (80156a4 <prvHeapInit+0xb4>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	2200      	movs	r2, #0
 8015658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801565a:	4b12      	ldr	r3, [pc, #72]	@ (80156a4 <prvHeapInit+0xb4>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	2200      	movs	r2, #0
 8015660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	68fa      	ldr	r2, [r7, #12]
 801566a:	1ad2      	subs	r2, r2, r3
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015670:	4b0c      	ldr	r3, [pc, #48]	@ (80156a4 <prvHeapInit+0xb4>)
 8015672:	681a      	ldr	r2, [r3, #0]
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	4a0a      	ldr	r2, [pc, #40]	@ (80156a8 <prvHeapInit+0xb8>)
 801567e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	4a09      	ldr	r2, [pc, #36]	@ (80156ac <prvHeapInit+0xbc>)
 8015686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015688:	4b09      	ldr	r3, [pc, #36]	@ (80156b0 <prvHeapInit+0xc0>)
 801568a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801568e:	601a      	str	r2, [r3, #0]
}
 8015690:	bf00      	nop
 8015692:	3714      	adds	r7, #20
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr
 801569c:	24071cfc 	.word	0x24071cfc
 80156a0:	240758fc 	.word	0x240758fc
 80156a4:	24075904 	.word	0x24075904
 80156a8:	2407590c 	.word	0x2407590c
 80156ac:	24075908 	.word	0x24075908
 80156b0:	24075918 	.word	0x24075918

080156b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80156bc:	4b28      	ldr	r3, [pc, #160]	@ (8015760 <prvInsertBlockIntoFreeList+0xac>)
 80156be:	60fb      	str	r3, [r7, #12]
 80156c0:	e002      	b.n	80156c8 <prvInsertBlockIntoFreeList+0x14>
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	60fb      	str	r3, [r7, #12]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d8f7      	bhi.n	80156c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	68ba      	ldr	r2, [r7, #8]
 80156dc:	4413      	add	r3, r2
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d108      	bne.n	80156f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	685a      	ldr	r2, [r3, #4]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	441a      	add	r2, r3
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	68ba      	ldr	r2, [r7, #8]
 8015700:	441a      	add	r2, r3
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	429a      	cmp	r2, r3
 8015708:	d118      	bne.n	801573c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	4b15      	ldr	r3, [pc, #84]	@ (8015764 <prvInsertBlockIntoFreeList+0xb0>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	429a      	cmp	r2, r3
 8015714:	d00d      	beq.n	8015732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	685a      	ldr	r2, [r3, #4]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	441a      	add	r2, r3
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	601a      	str	r2, [r3, #0]
 8015730:	e008      	b.n	8015744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015732:	4b0c      	ldr	r3, [pc, #48]	@ (8015764 <prvInsertBlockIntoFreeList+0xb0>)
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	601a      	str	r2, [r3, #0]
 801573a:	e003      	b.n	8015744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681a      	ldr	r2, [r3, #0]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015744:	68fa      	ldr	r2, [r7, #12]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	429a      	cmp	r2, r3
 801574a:	d002      	beq.n	8015752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	687a      	ldr	r2, [r7, #4]
 8015750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015752:	bf00      	nop
 8015754:	3714      	adds	r7, #20
 8015756:	46bd      	mov	sp, r7
 8015758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop
 8015760:	240758fc 	.word	0x240758fc
 8015764:	24075904 	.word	0x24075904

08015768 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801576c:	2200      	movs	r2, #0
 801576e:	4913      	ldr	r1, [pc, #76]	@ (80157bc <MX_USB_DEVICE_Init+0x54>)
 8015770:	4813      	ldr	r0, [pc, #76]	@ (80157c0 <MX_USB_DEVICE_Init+0x58>)
 8015772:	f7fb ff2d 	bl	80115d0 <USBD_Init>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d001      	beq.n	8015780 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801577c:	f7ec f94c 	bl	8001a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015780:	4910      	ldr	r1, [pc, #64]	@ (80157c4 <MX_USB_DEVICE_Init+0x5c>)
 8015782:	480f      	ldr	r0, [pc, #60]	@ (80157c0 <MX_USB_DEVICE_Init+0x58>)
 8015784:	f7fb ff54 	bl	8011630 <USBD_RegisterClass>
 8015788:	4603      	mov	r3, r0
 801578a:	2b00      	cmp	r3, #0
 801578c:	d001      	beq.n	8015792 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801578e:	f7ec f943 	bl	8001a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015792:	490d      	ldr	r1, [pc, #52]	@ (80157c8 <MX_USB_DEVICE_Init+0x60>)
 8015794:	480a      	ldr	r0, [pc, #40]	@ (80157c0 <MX_USB_DEVICE_Init+0x58>)
 8015796:	f7fb fe4b 	bl	8011430 <USBD_CDC_RegisterInterface>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d001      	beq.n	80157a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80157a0:	f7ec f93a 	bl	8001a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80157a4:	4806      	ldr	r0, [pc, #24]	@ (80157c0 <MX_USB_DEVICE_Init+0x58>)
 80157a6:	f7fb ff79 	bl	801169c <USBD_Start>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d001      	beq.n	80157b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80157b0:	f7ec f932 	bl	8001a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80157b4:	f7f3 f916 	bl	80089e4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80157b8:	bf00      	nop
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	240000b4 	.word	0x240000b4
 80157c0:	2407591c 	.word	0x2407591c
 80157c4:	2400001c 	.word	0x2400001c
 80157c8:	240000a0 	.word	0x240000a0

080157cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80157d0:	2200      	movs	r2, #0
 80157d2:	4905      	ldr	r1, [pc, #20]	@ (80157e8 <CDC_Init_FS+0x1c>)
 80157d4:	4805      	ldr	r0, [pc, #20]	@ (80157ec <CDC_Init_FS+0x20>)
 80157d6:	f7fb fe45 	bl	8011464 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80157da:	4905      	ldr	r1, [pc, #20]	@ (80157f0 <CDC_Init_FS+0x24>)
 80157dc:	4803      	ldr	r0, [pc, #12]	@ (80157ec <CDC_Init_FS+0x20>)
 80157de:	f7fb fe63 	bl	80114a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80157e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	240763f8 	.word	0x240763f8
 80157ec:	2407591c 	.word	0x2407591c
 80157f0:	24075bf8 	.word	0x24075bf8

080157f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80157f4:	b480      	push	{r7}
 80157f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80157f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	4603      	mov	r3, r0
 801580c:	6039      	str	r1, [r7, #0]
 801580e:	71fb      	strb	r3, [r7, #7]
 8015810:	4613      	mov	r3, r2
 8015812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015814:	79fb      	ldrb	r3, [r7, #7]
 8015816:	2b23      	cmp	r3, #35	@ 0x23
 8015818:	d84a      	bhi.n	80158b0 <CDC_Control_FS+0xac>
 801581a:	a201      	add	r2, pc, #4	@ (adr r2, 8015820 <CDC_Control_FS+0x1c>)
 801581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015820:	080158b1 	.word	0x080158b1
 8015824:	080158b1 	.word	0x080158b1
 8015828:	080158b1 	.word	0x080158b1
 801582c:	080158b1 	.word	0x080158b1
 8015830:	080158b1 	.word	0x080158b1
 8015834:	080158b1 	.word	0x080158b1
 8015838:	080158b1 	.word	0x080158b1
 801583c:	080158b1 	.word	0x080158b1
 8015840:	080158b1 	.word	0x080158b1
 8015844:	080158b1 	.word	0x080158b1
 8015848:	080158b1 	.word	0x080158b1
 801584c:	080158b1 	.word	0x080158b1
 8015850:	080158b1 	.word	0x080158b1
 8015854:	080158b1 	.word	0x080158b1
 8015858:	080158b1 	.word	0x080158b1
 801585c:	080158b1 	.word	0x080158b1
 8015860:	080158b1 	.word	0x080158b1
 8015864:	080158b1 	.word	0x080158b1
 8015868:	080158b1 	.word	0x080158b1
 801586c:	080158b1 	.word	0x080158b1
 8015870:	080158b1 	.word	0x080158b1
 8015874:	080158b1 	.word	0x080158b1
 8015878:	080158b1 	.word	0x080158b1
 801587c:	080158b1 	.word	0x080158b1
 8015880:	080158b1 	.word	0x080158b1
 8015884:	080158b1 	.word	0x080158b1
 8015888:	080158b1 	.word	0x080158b1
 801588c:	080158b1 	.word	0x080158b1
 8015890:	080158b1 	.word	0x080158b1
 8015894:	080158b1 	.word	0x080158b1
 8015898:	080158b1 	.word	0x080158b1
 801589c:	080158b1 	.word	0x080158b1
 80158a0:	080158b1 	.word	0x080158b1
 80158a4:	080158b1 	.word	0x080158b1
 80158a8:	080158b1 	.word	0x080158b1
 80158ac:	080158b1 	.word	0x080158b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80158b0:	bf00      	nop
  }

  return (USBD_OK);
 80158b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	4805      	ldr	r0, [pc, #20]	@ (80158e4 <CDC_Receive_FS+0x24>)
 80158ce:	f7fb fdeb 	bl	80114a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80158d2:	4804      	ldr	r0, [pc, #16]	@ (80158e4 <CDC_Receive_FS+0x24>)
 80158d4:	f7fb fe46 	bl	8011564 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80158d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3708      	adds	r7, #8
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	2407591c 	.word	0x2407591c

080158e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	460b      	mov	r3, r1
 80158f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80158f4:	2300      	movs	r3, #0
 80158f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80158f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015930 <CDC_Transmit_FS+0x48>)
 80158fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80158fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015906:	2b00      	cmp	r3, #0
 8015908:	d001      	beq.n	801590e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801590a:	2301      	movs	r3, #1
 801590c:	e00b      	b.n	8015926 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801590e:	887b      	ldrh	r3, [r7, #2]
 8015910:	461a      	mov	r2, r3
 8015912:	6879      	ldr	r1, [r7, #4]
 8015914:	4806      	ldr	r0, [pc, #24]	@ (8015930 <CDC_Transmit_FS+0x48>)
 8015916:	f7fb fda5 	bl	8011464 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801591a:	4805      	ldr	r0, [pc, #20]	@ (8015930 <CDC_Transmit_FS+0x48>)
 801591c:	f7fb fde2 	bl	80114e4 <USBD_CDC_TransmitPacket>
 8015920:	4603      	mov	r3, r0
 8015922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015924:	7bfb      	ldrb	r3, [r7, #15]
}
 8015926:	4618      	mov	r0, r3
 8015928:	3710      	adds	r7, #16
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	2407591c 	.word	0x2407591c

08015934 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015934:	b480      	push	{r7}
 8015936:	b087      	sub	sp, #28
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	4613      	mov	r3, r2
 8015940:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015942:	2300      	movs	r3, #0
 8015944:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801594a:	4618      	mov	r0, r3
 801594c:	371c      	adds	r7, #28
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr
	...

08015958 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015958:	b480      	push	{r7}
 801595a:	b083      	sub	sp, #12
 801595c:	af00      	add	r7, sp, #0
 801595e:	4603      	mov	r3, r0
 8015960:	6039      	str	r1, [r7, #0]
 8015962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	2212      	movs	r2, #18
 8015968:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801596a:	4b03      	ldr	r3, [pc, #12]	@ (8015978 <USBD_FS_DeviceDescriptor+0x20>)
}
 801596c:	4618      	mov	r0, r3
 801596e:	370c      	adds	r7, #12
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	240000d4 	.word	0x240000d4

0801597c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	6039      	str	r1, [r7, #0]
 8015986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	2204      	movs	r2, #4
 801598c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801598e:	4b03      	ldr	r3, [pc, #12]	@ (801599c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015990:	4618      	mov	r0, r3
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr
 801599c:	240000e8 	.word	0x240000e8

080159a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	6039      	str	r1, [r7, #0]
 80159aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80159ac:	79fb      	ldrb	r3, [r7, #7]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d105      	bne.n	80159be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80159b2:	683a      	ldr	r2, [r7, #0]
 80159b4:	4907      	ldr	r1, [pc, #28]	@ (80159d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80159b6:	4808      	ldr	r0, [pc, #32]	@ (80159d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80159b8:	f7fd f84a 	bl	8012a50 <USBD_GetString>
 80159bc:	e004      	b.n	80159c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80159be:	683a      	ldr	r2, [r7, #0]
 80159c0:	4904      	ldr	r1, [pc, #16]	@ (80159d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80159c2:	4805      	ldr	r0, [pc, #20]	@ (80159d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80159c4:	f7fd f844 	bl	8012a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80159c8:	4b02      	ldr	r3, [pc, #8]	@ (80159d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3708      	adds	r7, #8
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	24076bf8 	.word	0x24076bf8
 80159d8:	0801a258 	.word	0x0801a258

080159dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b082      	sub	sp, #8
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4603      	mov	r3, r0
 80159e4:	6039      	str	r1, [r7, #0]
 80159e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80159e8:	683a      	ldr	r2, [r7, #0]
 80159ea:	4904      	ldr	r1, [pc, #16]	@ (80159fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80159ec:	4804      	ldr	r0, [pc, #16]	@ (8015a00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80159ee:	f7fd f82f 	bl	8012a50 <USBD_GetString>
  return USBD_StrDesc;
 80159f2:	4b02      	ldr	r3, [pc, #8]	@ (80159fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3708      	adds	r7, #8
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	24076bf8 	.word	0x24076bf8
 8015a00:	0801a270 	.word	0x0801a270

08015a04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	6039      	str	r1, [r7, #0]
 8015a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	221a      	movs	r2, #26
 8015a14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015a16:	f000 f843 	bl	8015aa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015a1a:	4b02      	ldr	r3, [pc, #8]	@ (8015a24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3708      	adds	r7, #8
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}
 8015a24:	240000ec 	.word	0x240000ec

08015a28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	6039      	str	r1, [r7, #0]
 8015a32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015a34:	79fb      	ldrb	r3, [r7, #7]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d105      	bne.n	8015a46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	4907      	ldr	r1, [pc, #28]	@ (8015a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015a3e:	4808      	ldr	r0, [pc, #32]	@ (8015a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015a40:	f7fd f806 	bl	8012a50 <USBD_GetString>
 8015a44:	e004      	b.n	8015a50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015a46:	683a      	ldr	r2, [r7, #0]
 8015a48:	4904      	ldr	r1, [pc, #16]	@ (8015a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015a4a:	4805      	ldr	r0, [pc, #20]	@ (8015a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015a4c:	f7fd f800 	bl	8012a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a50:	4b02      	ldr	r3, [pc, #8]	@ (8015a5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	24076bf8 	.word	0x24076bf8
 8015a60:	0801a284 	.word	0x0801a284

08015a64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	6039      	str	r1, [r7, #0]
 8015a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a70:	79fb      	ldrb	r3, [r7, #7]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d105      	bne.n	8015a82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015a76:	683a      	ldr	r2, [r7, #0]
 8015a78:	4907      	ldr	r1, [pc, #28]	@ (8015a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015a7a:	4808      	ldr	r0, [pc, #32]	@ (8015a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015a7c:	f7fc ffe8 	bl	8012a50 <USBD_GetString>
 8015a80:	e004      	b.n	8015a8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015a82:	683a      	ldr	r2, [r7, #0]
 8015a84:	4904      	ldr	r1, [pc, #16]	@ (8015a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015a86:	4805      	ldr	r0, [pc, #20]	@ (8015a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015a88:	f7fc ffe2 	bl	8012a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a8c:	4b02      	ldr	r3, [pc, #8]	@ (8015a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	24076bf8 	.word	0x24076bf8
 8015a9c:	0801a290 	.word	0x0801a290

08015aa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b084      	sub	sp, #16
 8015aa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8015ae4 <Get_SerialNum+0x44>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015aac:	4b0e      	ldr	r3, [pc, #56]	@ (8015ae8 <Get_SerialNum+0x48>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8015aec <Get_SerialNum+0x4c>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015ab8:	68fa      	ldr	r2, [r7, #12]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	4413      	add	r3, r2
 8015abe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d009      	beq.n	8015ada <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015ac6:	2208      	movs	r2, #8
 8015ac8:	4909      	ldr	r1, [pc, #36]	@ (8015af0 <Get_SerialNum+0x50>)
 8015aca:	68f8      	ldr	r0, [r7, #12]
 8015acc:	f000 f814 	bl	8015af8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015ad0:	2204      	movs	r2, #4
 8015ad2:	4908      	ldr	r1, [pc, #32]	@ (8015af4 <Get_SerialNum+0x54>)
 8015ad4:	68b8      	ldr	r0, [r7, #8]
 8015ad6:	f000 f80f 	bl	8015af8 <IntToUnicode>
  }
}
 8015ada:	bf00      	nop
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	1ff1e800 	.word	0x1ff1e800
 8015ae8:	1ff1e804 	.word	0x1ff1e804
 8015aec:	1ff1e808 	.word	0x1ff1e808
 8015af0:	240000ee 	.word	0x240000ee
 8015af4:	240000fe 	.word	0x240000fe

08015af8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015af8:	b480      	push	{r7}
 8015afa:	b087      	sub	sp, #28
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	4613      	mov	r3, r2
 8015b04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	75fb      	strb	r3, [r7, #23]
 8015b0e:	e027      	b.n	8015b60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	0f1b      	lsrs	r3, r3, #28
 8015b14:	2b09      	cmp	r3, #9
 8015b16:	d80b      	bhi.n	8015b30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	0f1b      	lsrs	r3, r3, #28
 8015b1c:	b2da      	uxtb	r2, r3
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4619      	mov	r1, r3
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	440b      	add	r3, r1
 8015b28:	3230      	adds	r2, #48	@ 0x30
 8015b2a:	b2d2      	uxtb	r2, r2
 8015b2c:	701a      	strb	r2, [r3, #0]
 8015b2e:	e00a      	b.n	8015b46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	0f1b      	lsrs	r3, r3, #28
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	7dfb      	ldrb	r3, [r7, #23]
 8015b38:	005b      	lsls	r3, r3, #1
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	440b      	add	r3, r1
 8015b40:	3237      	adds	r2, #55	@ 0x37
 8015b42:	b2d2      	uxtb	r2, r2
 8015b44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	011b      	lsls	r3, r3, #4
 8015b4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015b4c:	7dfb      	ldrb	r3, [r7, #23]
 8015b4e:	005b      	lsls	r3, r3, #1
 8015b50:	3301      	adds	r3, #1
 8015b52:	68ba      	ldr	r2, [r7, #8]
 8015b54:	4413      	add	r3, r2
 8015b56:	2200      	movs	r2, #0
 8015b58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015b5a:	7dfb      	ldrb	r3, [r7, #23]
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	75fb      	strb	r3, [r7, #23]
 8015b60:	7dfa      	ldrb	r2, [r7, #23]
 8015b62:	79fb      	ldrb	r3, [r7, #7]
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d3d3      	bcc.n	8015b10 <IntToUnicode+0x18>
  }
}
 8015b68:	bf00      	nop
 8015b6a:	bf00      	nop
 8015b6c:	371c      	adds	r7, #28
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b74:	4770      	bx	lr
	...

08015b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015b84:	2200      	movs	r2, #0
 8015b86:	601a      	str	r2, [r3, #0]
 8015b88:	605a      	str	r2, [r3, #4]
 8015b8a:	609a      	str	r2, [r3, #8]
 8015b8c:	60da      	str	r2, [r3, #12]
 8015b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015b90:	f107 0310 	add.w	r3, r7, #16
 8015b94:	22c0      	movs	r2, #192	@ 0xc0
 8015b96:	2100      	movs	r1, #0
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f001 ff65 	bl	8017a68 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	4a34      	ldr	r2, [pc, #208]	@ (8015c74 <HAL_PCD_MspInit+0xfc>)
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	d161      	bne.n	8015c6c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015ba8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015bac:	f04f 0300 	mov.w	r3, #0
 8015bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015bb4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8015bb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015bbc:	f107 0310 	add.w	r3, r7, #16
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7f4 f801 	bl	8009bc8 <HAL_RCCEx_PeriphCLKConfig>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d001      	beq.n	8015bd0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8015bcc:	f7eb ff24 	bl	8001a18 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015bd0:	f7f2 ff08 	bl	80089e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bd4:	4b28      	ldr	r3, [pc, #160]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015bda:	4a27      	ldr	r2, [pc, #156]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015bdc:	f043 0301 	orr.w	r3, r3, #1
 8015be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015be4:	4b24      	ldr	r3, [pc, #144]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015bea:	f003 0301 	and.w	r3, r3, #1
 8015bee:	60fb      	str	r3, [r7, #12]
 8015bf0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c00:	2300      	movs	r3, #0
 8015c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	481b      	ldr	r0, [pc, #108]	@ (8015c7c <HAL_PCD_MspInit+0x104>)
 8015c0e:	f7ef fa99 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015c12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c1a:	2302      	movs	r3, #2
 8015c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c20:	2300      	movs	r3, #0
 8015c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015c26:	2300      	movs	r3, #0
 8015c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015c2c:	230a      	movs	r3, #10
 8015c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015c36:	4619      	mov	r1, r3
 8015c38:	4810      	ldr	r0, [pc, #64]	@ (8015c7c <HAL_PCD_MspInit+0x104>)
 8015c3a:	f7ef fa83 	bl	8005144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015c44:	4a0c      	ldr	r2, [pc, #48]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015c46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8015c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8015c78 <HAL_PCD_MspInit+0x100>)
 8015c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015c58:	60bb      	str	r3, [r7, #8]
 8015c5a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	2105      	movs	r1, #5
 8015c60:	2065      	movs	r0, #101	@ 0x65
 8015c62:	f7ec ff9b 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015c66:	2065      	movs	r0, #101	@ 0x65
 8015c68:	f7ec ffb2 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015c6c:	bf00      	nop
 8015c6e:	37e8      	adds	r7, #232	@ 0xe8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	40080000 	.word	0x40080000
 8015c78:	58024400 	.word	0x58024400
 8015c7c:	58020000 	.word	0x58020000

08015c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015c94:	4619      	mov	r1, r3
 8015c96:	4610      	mov	r0, r2
 8015c98:	f7fb fd4d 	bl	8011736 <USBD_LL_SetupStage>
}
 8015c9c:	bf00      	nop
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	460b      	mov	r3, r1
 8015cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015cb6:	78fa      	ldrb	r2, [r7, #3]
 8015cb8:	6879      	ldr	r1, [r7, #4]
 8015cba:	4613      	mov	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	4413      	add	r3, r2
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	440b      	add	r3, r1
 8015cc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015cc8:	681a      	ldr	r2, [r3, #0]
 8015cca:	78fb      	ldrb	r3, [r7, #3]
 8015ccc:	4619      	mov	r1, r3
 8015cce:	f7fb fd87 	bl	80117e0 <USBD_LL_DataOutStage>
}
 8015cd2:	bf00      	nop
 8015cd4:	3708      	adds	r7, #8
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cda:	b580      	push	{r7, lr}
 8015cdc:	b082      	sub	sp, #8
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	6078      	str	r0, [r7, #4]
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015cec:	78fa      	ldrb	r2, [r7, #3]
 8015cee:	6879      	ldr	r1, [r7, #4]
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	4413      	add	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	440b      	add	r3, r1
 8015cfa:	3320      	adds	r3, #32
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	78fb      	ldrb	r3, [r7, #3]
 8015d00:	4619      	mov	r1, r3
 8015d02:	f7fb fe20 	bl	8011946 <USBD_LL_DataInStage>
}
 8015d06:	bf00      	nop
 8015d08:	3708      	adds	r7, #8
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7fb ff5a 	bl	8011bd6 <USBD_LL_SOF>
}
 8015d22:	bf00      	nop
 8015d24:	3708      	adds	r7, #8
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}

08015d2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d2a:	b580      	push	{r7, lr}
 8015d2c:	b084      	sub	sp, #16
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015d32:	2301      	movs	r3, #1
 8015d34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	79db      	ldrb	r3, [r3, #7]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d102      	bne.n	8015d44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	73fb      	strb	r3, [r7, #15]
 8015d42:	e008      	b.n	8015d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	79db      	ldrb	r3, [r3, #7]
 8015d48:	2b02      	cmp	r3, #2
 8015d4a:	d102      	bne.n	8015d52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	73fb      	strb	r3, [r7, #15]
 8015d50:	e001      	b.n	8015d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015d52:	f7eb fe61 	bl	8001a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015d5c:	7bfa      	ldrb	r2, [r7, #15]
 8015d5e:	4611      	mov	r1, r2
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7fb fef4 	bl	8011b4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7fb fe9c 	bl	8011aaa <USBD_LL_Reset>
}
 8015d72:	bf00      	nop
 8015d74:	3710      	adds	r7, #16
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
	...

08015d7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fb feef 	bl	8011b6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	6812      	ldr	r2, [r2, #0]
 8015d9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015da2:	f043 0301 	orr.w	r3, r3, #1
 8015da6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	7adb      	ldrb	r3, [r3, #11]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d005      	beq.n	8015dbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015db0:	4b04      	ldr	r3, [pc, #16]	@ (8015dc4 <HAL_PCD_SuspendCallback+0x48>)
 8015db2:	691b      	ldr	r3, [r3, #16]
 8015db4:	4a03      	ldr	r2, [pc, #12]	@ (8015dc4 <HAL_PCD_SuspendCallback+0x48>)
 8015db6:	f043 0306 	orr.w	r3, r3, #6
 8015dba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015dbc:	bf00      	nop
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	e000ed00 	.word	0xe000ed00

08015dc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7fb fee5 	bl	8011ba6 <USBD_LL_Resume>
}
 8015ddc:	bf00      	nop
 8015dde:	3708      	adds	r7, #8
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	460b      	mov	r3, r1
 8015dee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015df6:	78fa      	ldrb	r2, [r7, #3]
 8015df8:	4611      	mov	r1, r2
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fb ff3d 	bl	8011c7a <USBD_LL_IsoOUTIncomplete>
}
 8015e00:	bf00      	nop
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	460b      	mov	r3, r1
 8015e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015e1a:	78fa      	ldrb	r2, [r7, #3]
 8015e1c:	4611      	mov	r1, r2
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7fb fef9 	bl	8011c16 <USBD_LL_IsoINIncomplete>
}
 8015e24:	bf00      	nop
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b082      	sub	sp, #8
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fb ff4f 	bl	8011cde <USBD_LL_DevConnected>
}
 8015e40:	bf00      	nop
 8015e42:	3708      	adds	r7, #8
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7fb ff4c 	bl	8011cf4 <USBD_LL_DevDisconnected>
}
 8015e5c:	bf00      	nop
 8015e5e:	3708      	adds	r7, #8
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d13e      	bne.n	8015ef2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015e74:	4a21      	ldr	r2, [pc, #132]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015e84:	4b1d      	ldr	r3, [pc, #116]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e86:	4a1e      	ldr	r2, [pc, #120]	@ (8015f00 <USBD_LL_Init+0x9c>)
 8015e88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e8c:	2209      	movs	r2, #9
 8015e8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015e90:	4b1a      	ldr	r3, [pc, #104]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e92:	2202      	movs	r2, #2
 8015e94:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015e96:	4b19      	ldr	r3, [pc, #100]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e98:	2200      	movs	r2, #0
 8015e9a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015e9c:	4b17      	ldr	r3, [pc, #92]	@ (8015efc <USBD_LL_Init+0x98>)
 8015e9e:	2202      	movs	r2, #2
 8015ea0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ea2:	4b16      	ldr	r3, [pc, #88]	@ (8015efc <USBD_LL_Init+0x98>)
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015ea8:	4b14      	ldr	r3, [pc, #80]	@ (8015efc <USBD_LL_Init+0x98>)
 8015eaa:	2200      	movs	r2, #0
 8015eac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015eae:	4b13      	ldr	r3, [pc, #76]	@ (8015efc <USBD_LL_Init+0x98>)
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8015eb4:	4b11      	ldr	r3, [pc, #68]	@ (8015efc <USBD_LL_Init+0x98>)
 8015eb6:	2201      	movs	r2, #1
 8015eb8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8015eba:	4b10      	ldr	r3, [pc, #64]	@ (8015efc <USBD_LL_Init+0x98>)
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8015efc <USBD_LL_Init+0x98>)
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015ec6:	480d      	ldr	r0, [pc, #52]	@ (8015efc <USBD_LL_Init+0x98>)
 8015ec8:	f7f1 fab4 	bl	8007434 <HAL_PCD_Init>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d001      	beq.n	8015ed6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015ed2:	f7eb fda1 	bl	8001a18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015ed6:	2180      	movs	r1, #128	@ 0x80
 8015ed8:	4808      	ldr	r0, [pc, #32]	@ (8015efc <USBD_LL_Init+0x98>)
 8015eda:	f7f2 fd08 	bl	80088ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ede:	2240      	movs	r2, #64	@ 0x40
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	4806      	ldr	r0, [pc, #24]	@ (8015efc <USBD_LL_Init+0x98>)
 8015ee4:	f7f2 fcbc 	bl	8008860 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015ee8:	2280      	movs	r2, #128	@ 0x80
 8015eea:	2101      	movs	r1, #1
 8015eec:	4803      	ldr	r0, [pc, #12]	@ (8015efc <USBD_LL_Init+0x98>)
 8015eee:	f7f2 fcb7 	bl	8008860 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015ef2:	2300      	movs	r3, #0
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3708      	adds	r7, #8
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	24076df8 	.word	0x24076df8
 8015f00:	40080000 	.word	0x40080000

08015f04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f10:	2300      	movs	r3, #0
 8015f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f1 fb96 	bl	800764c <HAL_PCD_Start>
 8015f20:	4603      	mov	r3, r0
 8015f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f000 f942 	bl	80161b0 <USBD_Get_USB_Status>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	3710      	adds	r7, #16
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}

08015f3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015f3a:	b580      	push	{r7, lr}
 8015f3c:	b084      	sub	sp, #16
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	6078      	str	r0, [r7, #4]
 8015f42:	4608      	mov	r0, r1
 8015f44:	4611      	mov	r1, r2
 8015f46:	461a      	mov	r2, r3
 8015f48:	4603      	mov	r3, r0
 8015f4a:	70fb      	strb	r3, [r7, #3]
 8015f4c:	460b      	mov	r3, r1
 8015f4e:	70bb      	strb	r3, [r7, #2]
 8015f50:	4613      	mov	r3, r2
 8015f52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f54:	2300      	movs	r3, #0
 8015f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015f62:	78bb      	ldrb	r3, [r7, #2]
 8015f64:	883a      	ldrh	r2, [r7, #0]
 8015f66:	78f9      	ldrb	r1, [r7, #3]
 8015f68:	f7f2 f897 	bl	800809a <HAL_PCD_EP_Open>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f70:	7bfb      	ldrb	r3, [r7, #15]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f000 f91c 	bl	80161b0 <USBD_Get_USB_Status>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3710      	adds	r7, #16
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b084      	sub	sp, #16
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
 8015f8e:	460b      	mov	r3, r1
 8015f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f92:	2300      	movs	r3, #0
 8015f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f96:	2300      	movs	r3, #0
 8015f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015fa0:	78fa      	ldrb	r2, [r7, #3]
 8015fa2:	4611      	mov	r1, r2
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f2 f8e0 	bl	800816a <HAL_PCD_EP_Close>
 8015faa:	4603      	mov	r3, r0
 8015fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fae:	7bfb      	ldrb	r3, [r7, #15]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f000 f8fd 	bl	80161b0 <USBD_Get_USB_Status>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3710      	adds	r7, #16
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	460b      	mov	r3, r1
 8015fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015fde:	78fa      	ldrb	r2, [r7, #3]
 8015fe0:	4611      	mov	r1, r2
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7f2 f998 	bl	8008318 <HAL_PCD_EP_SetStall>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fec:	7bfb      	ldrb	r3, [r7, #15]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f000 f8de 	bl	80161b0 <USBD_Get_USB_Status>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	3710      	adds	r7, #16
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}

08016002 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016002:	b580      	push	{r7, lr}
 8016004:	b084      	sub	sp, #16
 8016006:	af00      	add	r7, sp, #0
 8016008:	6078      	str	r0, [r7, #4]
 801600a:	460b      	mov	r3, r1
 801600c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801600e:	2300      	movs	r3, #0
 8016010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016012:	2300      	movs	r3, #0
 8016014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801601c:	78fa      	ldrb	r2, [r7, #3]
 801601e:	4611      	mov	r1, r2
 8016020:	4618      	mov	r0, r3
 8016022:	f7f2 f9dc 	bl	80083de <HAL_PCD_EP_ClrStall>
 8016026:	4603      	mov	r3, r0
 8016028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801602a:	7bfb      	ldrb	r3, [r7, #15]
 801602c:	4618      	mov	r0, r3
 801602e:	f000 f8bf 	bl	80161b0 <USBD_Get_USB_Status>
 8016032:	4603      	mov	r3, r0
 8016034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016036:	7bbb      	ldrb	r3, [r7, #14]
}
 8016038:	4618      	mov	r0, r3
 801603a:	3710      	adds	r7, #16
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}

08016040 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016040:	b480      	push	{r7}
 8016042:	b085      	sub	sp, #20
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	460b      	mov	r3, r1
 801604a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016052:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016058:	2b00      	cmp	r3, #0
 801605a:	da0b      	bge.n	8016074 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801605c:	78fb      	ldrb	r3, [r7, #3]
 801605e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016062:	68f9      	ldr	r1, [r7, #12]
 8016064:	4613      	mov	r3, r2
 8016066:	00db      	lsls	r3, r3, #3
 8016068:	4413      	add	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	440b      	add	r3, r1
 801606e:	3316      	adds	r3, #22
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	e00b      	b.n	801608c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016074:	78fb      	ldrb	r3, [r7, #3]
 8016076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801607a:	68f9      	ldr	r1, [r7, #12]
 801607c:	4613      	mov	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	4413      	add	r3, r2
 8016082:	009b      	lsls	r3, r3, #2
 8016084:	440b      	add	r3, r1
 8016086:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801608a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801608c:	4618      	mov	r0, r3
 801608e:	3714      	adds	r7, #20
 8016090:	46bd      	mov	sp, r7
 8016092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016096:	4770      	bx	lr

08016098 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	460b      	mov	r3, r1
 80160a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160a4:	2300      	movs	r3, #0
 80160a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160a8:	2300      	movs	r3, #0
 80160aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80160b2:	78fa      	ldrb	r2, [r7, #3]
 80160b4:	4611      	mov	r1, r2
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7f1 ffcb 	bl	8008052 <HAL_PCD_SetAddress>
 80160bc:	4603      	mov	r3, r0
 80160be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
 80160c2:	4618      	mov	r0, r3
 80160c4:	f000 f874 	bl	80161b0 <USBD_Get_USB_Status>
 80160c8:	4603      	mov	r3, r0
 80160ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	3710      	adds	r7, #16
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}

080160d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80160d6:	b580      	push	{r7, lr}
 80160d8:	b086      	sub	sp, #24
 80160da:	af00      	add	r7, sp, #0
 80160dc:	60f8      	str	r0, [r7, #12]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
 80160e2:	460b      	mov	r3, r1
 80160e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160e6:	2300      	movs	r3, #0
 80160e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160ea:	2300      	movs	r3, #0
 80160ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80160f4:	7af9      	ldrb	r1, [r7, #11]
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	f7f2 f8d3 	bl	80082a4 <HAL_PCD_EP_Transmit>
 80160fe:	4603      	mov	r3, r0
 8016100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016102:	7dfb      	ldrb	r3, [r7, #23]
 8016104:	4618      	mov	r0, r3
 8016106:	f000 f853 	bl	80161b0 <USBD_Get_USB_Status>
 801610a:	4603      	mov	r3, r0
 801610c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801610e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016110:	4618      	mov	r0, r3
 8016112:	3718      	adds	r7, #24
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	607a      	str	r2, [r7, #4]
 8016122:	603b      	str	r3, [r7, #0]
 8016124:	460b      	mov	r3, r1
 8016126:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016128:	2300      	movs	r3, #0
 801612a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801612c:	2300      	movs	r3, #0
 801612e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016136:	7af9      	ldrb	r1, [r7, #11]
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	f7f2 f85f 	bl	80081fe <HAL_PCD_EP_Receive>
 8016140:	4603      	mov	r3, r0
 8016142:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016144:	7dfb      	ldrb	r3, [r7, #23]
 8016146:	4618      	mov	r0, r3
 8016148:	f000 f832 	bl	80161b0 <USBD_Get_USB_Status>
 801614c:	4603      	mov	r3, r0
 801614e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016150:	7dbb      	ldrb	r3, [r7, #22]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3718      	adds	r7, #24
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}

0801615a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b082      	sub	sp, #8
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
 8016162:	460b      	mov	r3, r1
 8016164:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801616c:	78fa      	ldrb	r2, [r7, #3]
 801616e:	4611      	mov	r1, r2
 8016170:	4618      	mov	r0, r3
 8016172:	f7f2 f87f 	bl	8008274 <HAL_PCD_EP_GetRxCount>
 8016176:	4603      	mov	r3, r0
}
 8016178:	4618      	mov	r0, r3
 801617a:	3708      	adds	r7, #8
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}

08016180 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016180:	b480      	push	{r7}
 8016182:	b083      	sub	sp, #12
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016188:	4b03      	ldr	r3, [pc, #12]	@ (8016198 <USBD_static_malloc+0x18>)
}
 801618a:	4618      	mov	r0, r3
 801618c:	370c      	adds	r7, #12
 801618e:	46bd      	mov	sp, r7
 8016190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016194:	4770      	bx	lr
 8016196:	bf00      	nop
 8016198:	240772dc 	.word	0x240772dc

0801619c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801619c:	b480      	push	{r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80161a4:	bf00      	nop
 80161a6:	370c      	adds	r7, #12
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80161b0:	b480      	push	{r7}
 80161b2:	b085      	sub	sp, #20
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	4603      	mov	r3, r0
 80161b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161ba:	2300      	movs	r3, #0
 80161bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80161be:	79fb      	ldrb	r3, [r7, #7]
 80161c0:	2b03      	cmp	r3, #3
 80161c2:	d817      	bhi.n	80161f4 <USBD_Get_USB_Status+0x44>
 80161c4:	a201      	add	r2, pc, #4	@ (adr r2, 80161cc <USBD_Get_USB_Status+0x1c>)
 80161c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ca:	bf00      	nop
 80161cc:	080161dd 	.word	0x080161dd
 80161d0:	080161e3 	.word	0x080161e3
 80161d4:	080161e9 	.word	0x080161e9
 80161d8:	080161ef 	.word	0x080161ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80161dc:	2300      	movs	r3, #0
 80161de:	73fb      	strb	r3, [r7, #15]
    break;
 80161e0:	e00b      	b.n	80161fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80161e2:	2303      	movs	r3, #3
 80161e4:	73fb      	strb	r3, [r7, #15]
    break;
 80161e6:	e008      	b.n	80161fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80161e8:	2301      	movs	r3, #1
 80161ea:	73fb      	strb	r3, [r7, #15]
    break;
 80161ec:	e005      	b.n	80161fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80161ee:	2303      	movs	r3, #3
 80161f0:	73fb      	strb	r3, [r7, #15]
    break;
 80161f2:	e002      	b.n	80161fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80161f4:	2303      	movs	r3, #3
 80161f6:	73fb      	strb	r3, [r7, #15]
    break;
 80161f8:	bf00      	nop
  }
  return usb_status;
 80161fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	3714      	adds	r7, #20
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <atof>:
 8016208:	2100      	movs	r1, #0
 801620a:	f000 be79 	b.w	8016f00 <strtod>

0801620e <atoi>:
 801620e:	220a      	movs	r2, #10
 8016210:	2100      	movs	r1, #0
 8016212:	f000 befd 	b.w	8017010 <strtol>
	...

08016218 <malloc>:
 8016218:	4b02      	ldr	r3, [pc, #8]	@ (8016224 <malloc+0xc>)
 801621a:	4601      	mov	r1, r0
 801621c:	6818      	ldr	r0, [r3, #0]
 801621e:	f000 b82d 	b.w	801627c <_malloc_r>
 8016222:	bf00      	nop
 8016224:	24000280 	.word	0x24000280

08016228 <free>:
 8016228:	4b02      	ldr	r3, [pc, #8]	@ (8016234 <free+0xc>)
 801622a:	4601      	mov	r1, r0
 801622c:	6818      	ldr	r0, [r3, #0]
 801622e:	f001 bdc3 	b.w	8017db8 <_free_r>
 8016232:	bf00      	nop
 8016234:	24000280 	.word	0x24000280

08016238 <sbrk_aligned>:
 8016238:	b570      	push	{r4, r5, r6, lr}
 801623a:	4e0f      	ldr	r6, [pc, #60]	@ (8016278 <sbrk_aligned+0x40>)
 801623c:	460c      	mov	r4, r1
 801623e:	6831      	ldr	r1, [r6, #0]
 8016240:	4605      	mov	r5, r0
 8016242:	b911      	cbnz	r1, 801624a <sbrk_aligned+0x12>
 8016244:	f001 fd2c 	bl	8017ca0 <_sbrk_r>
 8016248:	6030      	str	r0, [r6, #0]
 801624a:	4621      	mov	r1, r4
 801624c:	4628      	mov	r0, r5
 801624e:	f001 fd27 	bl	8017ca0 <_sbrk_r>
 8016252:	1c43      	adds	r3, r0, #1
 8016254:	d103      	bne.n	801625e <sbrk_aligned+0x26>
 8016256:	f04f 34ff 	mov.w	r4, #4294967295
 801625a:	4620      	mov	r0, r4
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	1cc4      	adds	r4, r0, #3
 8016260:	f024 0403 	bic.w	r4, r4, #3
 8016264:	42a0      	cmp	r0, r4
 8016266:	d0f8      	beq.n	801625a <sbrk_aligned+0x22>
 8016268:	1a21      	subs	r1, r4, r0
 801626a:	4628      	mov	r0, r5
 801626c:	f001 fd18 	bl	8017ca0 <_sbrk_r>
 8016270:	3001      	adds	r0, #1
 8016272:	d1f2      	bne.n	801625a <sbrk_aligned+0x22>
 8016274:	e7ef      	b.n	8016256 <sbrk_aligned+0x1e>
 8016276:	bf00      	nop
 8016278:	240774fc 	.word	0x240774fc

0801627c <_malloc_r>:
 801627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016280:	1ccd      	adds	r5, r1, #3
 8016282:	f025 0503 	bic.w	r5, r5, #3
 8016286:	3508      	adds	r5, #8
 8016288:	2d0c      	cmp	r5, #12
 801628a:	bf38      	it	cc
 801628c:	250c      	movcc	r5, #12
 801628e:	2d00      	cmp	r5, #0
 8016290:	4606      	mov	r6, r0
 8016292:	db01      	blt.n	8016298 <_malloc_r+0x1c>
 8016294:	42a9      	cmp	r1, r5
 8016296:	d904      	bls.n	80162a2 <_malloc_r+0x26>
 8016298:	230c      	movs	r3, #12
 801629a:	6033      	str	r3, [r6, #0]
 801629c:	2000      	movs	r0, #0
 801629e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016378 <_malloc_r+0xfc>
 80162a6:	f000 f869 	bl	801637c <__malloc_lock>
 80162aa:	f8d8 3000 	ldr.w	r3, [r8]
 80162ae:	461c      	mov	r4, r3
 80162b0:	bb44      	cbnz	r4, 8016304 <_malloc_r+0x88>
 80162b2:	4629      	mov	r1, r5
 80162b4:	4630      	mov	r0, r6
 80162b6:	f7ff ffbf 	bl	8016238 <sbrk_aligned>
 80162ba:	1c43      	adds	r3, r0, #1
 80162bc:	4604      	mov	r4, r0
 80162be:	d158      	bne.n	8016372 <_malloc_r+0xf6>
 80162c0:	f8d8 4000 	ldr.w	r4, [r8]
 80162c4:	4627      	mov	r7, r4
 80162c6:	2f00      	cmp	r7, #0
 80162c8:	d143      	bne.n	8016352 <_malloc_r+0xd6>
 80162ca:	2c00      	cmp	r4, #0
 80162cc:	d04b      	beq.n	8016366 <_malloc_r+0xea>
 80162ce:	6823      	ldr	r3, [r4, #0]
 80162d0:	4639      	mov	r1, r7
 80162d2:	4630      	mov	r0, r6
 80162d4:	eb04 0903 	add.w	r9, r4, r3
 80162d8:	f001 fce2 	bl	8017ca0 <_sbrk_r>
 80162dc:	4581      	cmp	r9, r0
 80162de:	d142      	bne.n	8016366 <_malloc_r+0xea>
 80162e0:	6821      	ldr	r1, [r4, #0]
 80162e2:	1a6d      	subs	r5, r5, r1
 80162e4:	4629      	mov	r1, r5
 80162e6:	4630      	mov	r0, r6
 80162e8:	f7ff ffa6 	bl	8016238 <sbrk_aligned>
 80162ec:	3001      	adds	r0, #1
 80162ee:	d03a      	beq.n	8016366 <_malloc_r+0xea>
 80162f0:	6823      	ldr	r3, [r4, #0]
 80162f2:	442b      	add	r3, r5
 80162f4:	6023      	str	r3, [r4, #0]
 80162f6:	f8d8 3000 	ldr.w	r3, [r8]
 80162fa:	685a      	ldr	r2, [r3, #4]
 80162fc:	bb62      	cbnz	r2, 8016358 <_malloc_r+0xdc>
 80162fe:	f8c8 7000 	str.w	r7, [r8]
 8016302:	e00f      	b.n	8016324 <_malloc_r+0xa8>
 8016304:	6822      	ldr	r2, [r4, #0]
 8016306:	1b52      	subs	r2, r2, r5
 8016308:	d420      	bmi.n	801634c <_malloc_r+0xd0>
 801630a:	2a0b      	cmp	r2, #11
 801630c:	d917      	bls.n	801633e <_malloc_r+0xc2>
 801630e:	1961      	adds	r1, r4, r5
 8016310:	42a3      	cmp	r3, r4
 8016312:	6025      	str	r5, [r4, #0]
 8016314:	bf18      	it	ne
 8016316:	6059      	strne	r1, [r3, #4]
 8016318:	6863      	ldr	r3, [r4, #4]
 801631a:	bf08      	it	eq
 801631c:	f8c8 1000 	streq.w	r1, [r8]
 8016320:	5162      	str	r2, [r4, r5]
 8016322:	604b      	str	r3, [r1, #4]
 8016324:	4630      	mov	r0, r6
 8016326:	f000 f82f 	bl	8016388 <__malloc_unlock>
 801632a:	f104 000b 	add.w	r0, r4, #11
 801632e:	1d23      	adds	r3, r4, #4
 8016330:	f020 0007 	bic.w	r0, r0, #7
 8016334:	1ac2      	subs	r2, r0, r3
 8016336:	bf1c      	itt	ne
 8016338:	1a1b      	subne	r3, r3, r0
 801633a:	50a3      	strne	r3, [r4, r2]
 801633c:	e7af      	b.n	801629e <_malloc_r+0x22>
 801633e:	6862      	ldr	r2, [r4, #4]
 8016340:	42a3      	cmp	r3, r4
 8016342:	bf0c      	ite	eq
 8016344:	f8c8 2000 	streq.w	r2, [r8]
 8016348:	605a      	strne	r2, [r3, #4]
 801634a:	e7eb      	b.n	8016324 <_malloc_r+0xa8>
 801634c:	4623      	mov	r3, r4
 801634e:	6864      	ldr	r4, [r4, #4]
 8016350:	e7ae      	b.n	80162b0 <_malloc_r+0x34>
 8016352:	463c      	mov	r4, r7
 8016354:	687f      	ldr	r7, [r7, #4]
 8016356:	e7b6      	b.n	80162c6 <_malloc_r+0x4a>
 8016358:	461a      	mov	r2, r3
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	42a3      	cmp	r3, r4
 801635e:	d1fb      	bne.n	8016358 <_malloc_r+0xdc>
 8016360:	2300      	movs	r3, #0
 8016362:	6053      	str	r3, [r2, #4]
 8016364:	e7de      	b.n	8016324 <_malloc_r+0xa8>
 8016366:	230c      	movs	r3, #12
 8016368:	6033      	str	r3, [r6, #0]
 801636a:	4630      	mov	r0, r6
 801636c:	f000 f80c 	bl	8016388 <__malloc_unlock>
 8016370:	e794      	b.n	801629c <_malloc_r+0x20>
 8016372:	6005      	str	r5, [r0, #0]
 8016374:	e7d6      	b.n	8016324 <_malloc_r+0xa8>
 8016376:	bf00      	nop
 8016378:	24077500 	.word	0x24077500

0801637c <__malloc_lock>:
 801637c:	4801      	ldr	r0, [pc, #4]	@ (8016384 <__malloc_lock+0x8>)
 801637e:	f001 bcdc 	b.w	8017d3a <__retarget_lock_acquire_recursive>
 8016382:	bf00      	nop
 8016384:	24077644 	.word	0x24077644

08016388 <__malloc_unlock>:
 8016388:	4801      	ldr	r0, [pc, #4]	@ (8016390 <__malloc_unlock+0x8>)
 801638a:	f001 bcd7 	b.w	8017d3c <__retarget_lock_release_recursive>
 801638e:	bf00      	nop
 8016390:	24077644 	.word	0x24077644

08016394 <sulp>:
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	4604      	mov	r4, r0
 8016398:	460d      	mov	r5, r1
 801639a:	4616      	mov	r6, r2
 801639c:	ec45 4b10 	vmov	d0, r4, r5
 80163a0:	f002 fc14 	bl	8018bcc <__ulp>
 80163a4:	b17e      	cbz	r6, 80163c6 <sulp+0x32>
 80163a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80163aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	dd09      	ble.n	80163c6 <sulp+0x32>
 80163b2:	051b      	lsls	r3, r3, #20
 80163b4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80163b8:	2000      	movs	r0, #0
 80163ba:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80163be:	ec41 0b17 	vmov	d7, r0, r1
 80163c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80163c6:	bd70      	pop	{r4, r5, r6, pc}

080163c8 <_strtod_l>:
 80163c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163cc:	ed2d 8b0a 	vpush	{d8-d12}
 80163d0:	b097      	sub	sp, #92	@ 0x5c
 80163d2:	4688      	mov	r8, r1
 80163d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80163d6:	2200      	movs	r2, #0
 80163d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80163da:	9005      	str	r0, [sp, #20]
 80163dc:	f04f 0a00 	mov.w	sl, #0
 80163e0:	f04f 0b00 	mov.w	fp, #0
 80163e4:	460a      	mov	r2, r1
 80163e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80163e8:	7811      	ldrb	r1, [r2, #0]
 80163ea:	292b      	cmp	r1, #43	@ 0x2b
 80163ec:	d04c      	beq.n	8016488 <_strtod_l+0xc0>
 80163ee:	d839      	bhi.n	8016464 <_strtod_l+0x9c>
 80163f0:	290d      	cmp	r1, #13
 80163f2:	d833      	bhi.n	801645c <_strtod_l+0x94>
 80163f4:	2908      	cmp	r1, #8
 80163f6:	d833      	bhi.n	8016460 <_strtod_l+0x98>
 80163f8:	2900      	cmp	r1, #0
 80163fa:	d03c      	beq.n	8016476 <_strtod_l+0xae>
 80163fc:	2200      	movs	r2, #0
 80163fe:	9208      	str	r2, [sp, #32]
 8016400:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016402:	782a      	ldrb	r2, [r5, #0]
 8016404:	2a30      	cmp	r2, #48	@ 0x30
 8016406:	f040 80b5 	bne.w	8016574 <_strtod_l+0x1ac>
 801640a:	786a      	ldrb	r2, [r5, #1]
 801640c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016410:	2a58      	cmp	r2, #88	@ 0x58
 8016412:	d170      	bne.n	80164f6 <_strtod_l+0x12e>
 8016414:	9302      	str	r3, [sp, #8]
 8016416:	9b08      	ldr	r3, [sp, #32]
 8016418:	9301      	str	r3, [sp, #4]
 801641a:	ab12      	add	r3, sp, #72	@ 0x48
 801641c:	9300      	str	r3, [sp, #0]
 801641e:	4a8b      	ldr	r2, [pc, #556]	@ (801664c <_strtod_l+0x284>)
 8016420:	9805      	ldr	r0, [sp, #20]
 8016422:	ab13      	add	r3, sp, #76	@ 0x4c
 8016424:	a911      	add	r1, sp, #68	@ 0x44
 8016426:	f001 fd79 	bl	8017f1c <__gethex>
 801642a:	f010 060f 	ands.w	r6, r0, #15
 801642e:	4604      	mov	r4, r0
 8016430:	d005      	beq.n	801643e <_strtod_l+0x76>
 8016432:	2e06      	cmp	r6, #6
 8016434:	d12a      	bne.n	801648c <_strtod_l+0xc4>
 8016436:	3501      	adds	r5, #1
 8016438:	2300      	movs	r3, #0
 801643a:	9511      	str	r5, [sp, #68]	@ 0x44
 801643c:	9308      	str	r3, [sp, #32]
 801643e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016440:	2b00      	cmp	r3, #0
 8016442:	f040 852f 	bne.w	8016ea4 <_strtod_l+0xadc>
 8016446:	9b08      	ldr	r3, [sp, #32]
 8016448:	ec4b ab10 	vmov	d0, sl, fp
 801644c:	b1cb      	cbz	r3, 8016482 <_strtod_l+0xba>
 801644e:	eeb1 0b40 	vneg.f64	d0, d0
 8016452:	b017      	add	sp, #92	@ 0x5c
 8016454:	ecbd 8b0a 	vpop	{d8-d12}
 8016458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801645c:	2920      	cmp	r1, #32
 801645e:	d1cd      	bne.n	80163fc <_strtod_l+0x34>
 8016460:	3201      	adds	r2, #1
 8016462:	e7c0      	b.n	80163e6 <_strtod_l+0x1e>
 8016464:	292d      	cmp	r1, #45	@ 0x2d
 8016466:	d1c9      	bne.n	80163fc <_strtod_l+0x34>
 8016468:	2101      	movs	r1, #1
 801646a:	9108      	str	r1, [sp, #32]
 801646c:	1c51      	adds	r1, r2, #1
 801646e:	9111      	str	r1, [sp, #68]	@ 0x44
 8016470:	7852      	ldrb	r2, [r2, #1]
 8016472:	2a00      	cmp	r2, #0
 8016474:	d1c4      	bne.n	8016400 <_strtod_l+0x38>
 8016476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016478:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801647c:	2b00      	cmp	r3, #0
 801647e:	f040 850f 	bne.w	8016ea0 <_strtod_l+0xad8>
 8016482:	ec4b ab10 	vmov	d0, sl, fp
 8016486:	e7e4      	b.n	8016452 <_strtod_l+0x8a>
 8016488:	2100      	movs	r1, #0
 801648a:	e7ee      	b.n	801646a <_strtod_l+0xa2>
 801648c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801648e:	b13a      	cbz	r2, 80164a0 <_strtod_l+0xd8>
 8016490:	2135      	movs	r1, #53	@ 0x35
 8016492:	a814      	add	r0, sp, #80	@ 0x50
 8016494:	f002 fc91 	bl	8018dba <__copybits>
 8016498:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801649a:	9805      	ldr	r0, [sp, #20]
 801649c:	f002 f862 	bl	8018564 <_Bfree>
 80164a0:	1e73      	subs	r3, r6, #1
 80164a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80164a4:	2b04      	cmp	r3, #4
 80164a6:	d806      	bhi.n	80164b6 <_strtod_l+0xee>
 80164a8:	e8df f003 	tbb	[pc, r3]
 80164ac:	201d0314 	.word	0x201d0314
 80164b0:	14          	.byte	0x14
 80164b1:	00          	.byte	0x00
 80164b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80164b6:	05e3      	lsls	r3, r4, #23
 80164b8:	bf48      	it	mi
 80164ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80164be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80164c2:	0d1b      	lsrs	r3, r3, #20
 80164c4:	051b      	lsls	r3, r3, #20
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d1b9      	bne.n	801643e <_strtod_l+0x76>
 80164ca:	f001 fc0b 	bl	8017ce4 <__errno>
 80164ce:	2322      	movs	r3, #34	@ 0x22
 80164d0:	6003      	str	r3, [r0, #0]
 80164d2:	e7b4      	b.n	801643e <_strtod_l+0x76>
 80164d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80164d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80164dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80164e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80164e4:	e7e7      	b.n	80164b6 <_strtod_l+0xee>
 80164e6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016654 <_strtod_l+0x28c>
 80164ea:	e7e4      	b.n	80164b6 <_strtod_l+0xee>
 80164ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80164f0:	f04f 3aff 	mov.w	sl, #4294967295
 80164f4:	e7df      	b.n	80164b6 <_strtod_l+0xee>
 80164f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80164f8:	1c5a      	adds	r2, r3, #1
 80164fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80164fc:	785b      	ldrb	r3, [r3, #1]
 80164fe:	2b30      	cmp	r3, #48	@ 0x30
 8016500:	d0f9      	beq.n	80164f6 <_strtod_l+0x12e>
 8016502:	2b00      	cmp	r3, #0
 8016504:	d09b      	beq.n	801643e <_strtod_l+0x76>
 8016506:	2301      	movs	r3, #1
 8016508:	2600      	movs	r6, #0
 801650a:	9307      	str	r3, [sp, #28]
 801650c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801650e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016510:	46b1      	mov	r9, r6
 8016512:	4635      	mov	r5, r6
 8016514:	220a      	movs	r2, #10
 8016516:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016518:	7804      	ldrb	r4, [r0, #0]
 801651a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801651e:	b2d9      	uxtb	r1, r3
 8016520:	2909      	cmp	r1, #9
 8016522:	d929      	bls.n	8016578 <_strtod_l+0x1b0>
 8016524:	494a      	ldr	r1, [pc, #296]	@ (8016650 <_strtod_l+0x288>)
 8016526:	2201      	movs	r2, #1
 8016528:	f001 fac1 	bl	8017aae <strncmp>
 801652c:	b378      	cbz	r0, 801658e <_strtod_l+0x1c6>
 801652e:	2000      	movs	r0, #0
 8016530:	4622      	mov	r2, r4
 8016532:	462b      	mov	r3, r5
 8016534:	4607      	mov	r7, r0
 8016536:	9006      	str	r0, [sp, #24]
 8016538:	2a65      	cmp	r2, #101	@ 0x65
 801653a:	d001      	beq.n	8016540 <_strtod_l+0x178>
 801653c:	2a45      	cmp	r2, #69	@ 0x45
 801653e:	d117      	bne.n	8016570 <_strtod_l+0x1a8>
 8016540:	b91b      	cbnz	r3, 801654a <_strtod_l+0x182>
 8016542:	9b07      	ldr	r3, [sp, #28]
 8016544:	4303      	orrs	r3, r0
 8016546:	d096      	beq.n	8016476 <_strtod_l+0xae>
 8016548:	2300      	movs	r3, #0
 801654a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801654e:	f108 0201 	add.w	r2, r8, #1
 8016552:	9211      	str	r2, [sp, #68]	@ 0x44
 8016554:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016558:	2a2b      	cmp	r2, #43	@ 0x2b
 801655a:	d06b      	beq.n	8016634 <_strtod_l+0x26c>
 801655c:	2a2d      	cmp	r2, #45	@ 0x2d
 801655e:	d071      	beq.n	8016644 <_strtod_l+0x27c>
 8016560:	f04f 0e00 	mov.w	lr, #0
 8016564:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016568:	2c09      	cmp	r4, #9
 801656a:	d979      	bls.n	8016660 <_strtod_l+0x298>
 801656c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016570:	2400      	movs	r4, #0
 8016572:	e094      	b.n	801669e <_strtod_l+0x2d6>
 8016574:	2300      	movs	r3, #0
 8016576:	e7c7      	b.n	8016508 <_strtod_l+0x140>
 8016578:	2d08      	cmp	r5, #8
 801657a:	f100 0001 	add.w	r0, r0, #1
 801657e:	bfd4      	ite	le
 8016580:	fb02 3909 	mlale	r9, r2, r9, r3
 8016584:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016588:	3501      	adds	r5, #1
 801658a:	9011      	str	r0, [sp, #68]	@ 0x44
 801658c:	e7c3      	b.n	8016516 <_strtod_l+0x14e>
 801658e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016590:	1c5a      	adds	r2, r3, #1
 8016592:	9211      	str	r2, [sp, #68]	@ 0x44
 8016594:	785a      	ldrb	r2, [r3, #1]
 8016596:	b375      	cbz	r5, 80165f6 <_strtod_l+0x22e>
 8016598:	4607      	mov	r7, r0
 801659a:	462b      	mov	r3, r5
 801659c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80165a0:	2909      	cmp	r1, #9
 80165a2:	d913      	bls.n	80165cc <_strtod_l+0x204>
 80165a4:	2101      	movs	r1, #1
 80165a6:	9106      	str	r1, [sp, #24]
 80165a8:	e7c6      	b.n	8016538 <_strtod_l+0x170>
 80165aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80165ac:	1c5a      	adds	r2, r3, #1
 80165ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80165b0:	785a      	ldrb	r2, [r3, #1]
 80165b2:	3001      	adds	r0, #1
 80165b4:	2a30      	cmp	r2, #48	@ 0x30
 80165b6:	d0f8      	beq.n	80165aa <_strtod_l+0x1e2>
 80165b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80165bc:	2b08      	cmp	r3, #8
 80165be:	f200 8476 	bhi.w	8016eae <_strtod_l+0xae6>
 80165c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80165c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80165c6:	4607      	mov	r7, r0
 80165c8:	2000      	movs	r0, #0
 80165ca:	4603      	mov	r3, r0
 80165cc:	3a30      	subs	r2, #48	@ 0x30
 80165ce:	f100 0101 	add.w	r1, r0, #1
 80165d2:	d023      	beq.n	801661c <_strtod_l+0x254>
 80165d4:	440f      	add	r7, r1
 80165d6:	eb00 0c03 	add.w	ip, r0, r3
 80165da:	4619      	mov	r1, r3
 80165dc:	240a      	movs	r4, #10
 80165de:	4561      	cmp	r1, ip
 80165e0:	d10b      	bne.n	80165fa <_strtod_l+0x232>
 80165e2:	1c5c      	adds	r4, r3, #1
 80165e4:	4403      	add	r3, r0
 80165e6:	2b08      	cmp	r3, #8
 80165e8:	4404      	add	r4, r0
 80165ea:	dc11      	bgt.n	8016610 <_strtod_l+0x248>
 80165ec:	230a      	movs	r3, #10
 80165ee:	fb03 2909 	mla	r9, r3, r9, r2
 80165f2:	2100      	movs	r1, #0
 80165f4:	e013      	b.n	801661e <_strtod_l+0x256>
 80165f6:	4628      	mov	r0, r5
 80165f8:	e7dc      	b.n	80165b4 <_strtod_l+0x1ec>
 80165fa:	2908      	cmp	r1, #8
 80165fc:	f101 0101 	add.w	r1, r1, #1
 8016600:	dc02      	bgt.n	8016608 <_strtod_l+0x240>
 8016602:	fb04 f909 	mul.w	r9, r4, r9
 8016606:	e7ea      	b.n	80165de <_strtod_l+0x216>
 8016608:	2910      	cmp	r1, #16
 801660a:	bfd8      	it	le
 801660c:	4366      	mulle	r6, r4
 801660e:	e7e6      	b.n	80165de <_strtod_l+0x216>
 8016610:	2b0f      	cmp	r3, #15
 8016612:	dcee      	bgt.n	80165f2 <_strtod_l+0x22a>
 8016614:	230a      	movs	r3, #10
 8016616:	fb03 2606 	mla	r6, r3, r6, r2
 801661a:	e7ea      	b.n	80165f2 <_strtod_l+0x22a>
 801661c:	461c      	mov	r4, r3
 801661e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016620:	1c5a      	adds	r2, r3, #1
 8016622:	9211      	str	r2, [sp, #68]	@ 0x44
 8016624:	785a      	ldrb	r2, [r3, #1]
 8016626:	4608      	mov	r0, r1
 8016628:	4623      	mov	r3, r4
 801662a:	e7b7      	b.n	801659c <_strtod_l+0x1d4>
 801662c:	2301      	movs	r3, #1
 801662e:	2700      	movs	r7, #0
 8016630:	9306      	str	r3, [sp, #24]
 8016632:	e786      	b.n	8016542 <_strtod_l+0x17a>
 8016634:	f04f 0e00 	mov.w	lr, #0
 8016638:	f108 0202 	add.w	r2, r8, #2
 801663c:	9211      	str	r2, [sp, #68]	@ 0x44
 801663e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016642:	e78f      	b.n	8016564 <_strtod_l+0x19c>
 8016644:	f04f 0e01 	mov.w	lr, #1
 8016648:	e7f6      	b.n	8016638 <_strtod_l+0x270>
 801664a:	bf00      	nop
 801664c:	0801a334 	.word	0x0801a334
 8016650:	0801a310 	.word	0x0801a310
 8016654:	7ff00000 	.word	0x7ff00000
 8016658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801665a:	1c54      	adds	r4, r2, #1
 801665c:	9411      	str	r4, [sp, #68]	@ 0x44
 801665e:	7852      	ldrb	r2, [r2, #1]
 8016660:	2a30      	cmp	r2, #48	@ 0x30
 8016662:	d0f9      	beq.n	8016658 <_strtod_l+0x290>
 8016664:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016668:	2c08      	cmp	r4, #8
 801666a:	d881      	bhi.n	8016570 <_strtod_l+0x1a8>
 801666c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016670:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016672:	9209      	str	r2, [sp, #36]	@ 0x24
 8016674:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016676:	1c51      	adds	r1, r2, #1
 8016678:	9111      	str	r1, [sp, #68]	@ 0x44
 801667a:	7852      	ldrb	r2, [r2, #1]
 801667c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016680:	2c09      	cmp	r4, #9
 8016682:	d938      	bls.n	80166f6 <_strtod_l+0x32e>
 8016684:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016686:	1b0c      	subs	r4, r1, r4
 8016688:	2c08      	cmp	r4, #8
 801668a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801668e:	dc02      	bgt.n	8016696 <_strtod_l+0x2ce>
 8016690:	4564      	cmp	r4, ip
 8016692:	bfa8      	it	ge
 8016694:	4664      	movge	r4, ip
 8016696:	f1be 0f00 	cmp.w	lr, #0
 801669a:	d000      	beq.n	801669e <_strtod_l+0x2d6>
 801669c:	4264      	negs	r4, r4
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d14e      	bne.n	8016740 <_strtod_l+0x378>
 80166a2:	9b07      	ldr	r3, [sp, #28]
 80166a4:	4318      	orrs	r0, r3
 80166a6:	f47f aeca 	bne.w	801643e <_strtod_l+0x76>
 80166aa:	9b06      	ldr	r3, [sp, #24]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	f47f aee2 	bne.w	8016476 <_strtod_l+0xae>
 80166b2:	2a69      	cmp	r2, #105	@ 0x69
 80166b4:	d027      	beq.n	8016706 <_strtod_l+0x33e>
 80166b6:	dc24      	bgt.n	8016702 <_strtod_l+0x33a>
 80166b8:	2a49      	cmp	r2, #73	@ 0x49
 80166ba:	d024      	beq.n	8016706 <_strtod_l+0x33e>
 80166bc:	2a4e      	cmp	r2, #78	@ 0x4e
 80166be:	f47f aeda 	bne.w	8016476 <_strtod_l+0xae>
 80166c2:	4997      	ldr	r1, [pc, #604]	@ (8016920 <_strtod_l+0x558>)
 80166c4:	a811      	add	r0, sp, #68	@ 0x44
 80166c6:	f001 fe4b 	bl	8018360 <__match>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	f43f aed3 	beq.w	8016476 <_strtod_l+0xae>
 80166d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	2b28      	cmp	r3, #40	@ 0x28
 80166d6:	d12d      	bne.n	8016734 <_strtod_l+0x36c>
 80166d8:	4992      	ldr	r1, [pc, #584]	@ (8016924 <_strtod_l+0x55c>)
 80166da:	aa14      	add	r2, sp, #80	@ 0x50
 80166dc:	a811      	add	r0, sp, #68	@ 0x44
 80166de:	f001 fe53 	bl	8018388 <__hexnan>
 80166e2:	2805      	cmp	r0, #5
 80166e4:	d126      	bne.n	8016734 <_strtod_l+0x36c>
 80166e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80166e8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80166ec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80166f0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80166f4:	e6a3      	b.n	801643e <_strtod_l+0x76>
 80166f6:	240a      	movs	r4, #10
 80166f8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80166fc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016700:	e7b8      	b.n	8016674 <_strtod_l+0x2ac>
 8016702:	2a6e      	cmp	r2, #110	@ 0x6e
 8016704:	e7db      	b.n	80166be <_strtod_l+0x2f6>
 8016706:	4988      	ldr	r1, [pc, #544]	@ (8016928 <_strtod_l+0x560>)
 8016708:	a811      	add	r0, sp, #68	@ 0x44
 801670a:	f001 fe29 	bl	8018360 <__match>
 801670e:	2800      	cmp	r0, #0
 8016710:	f43f aeb1 	beq.w	8016476 <_strtod_l+0xae>
 8016714:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016716:	4985      	ldr	r1, [pc, #532]	@ (801692c <_strtod_l+0x564>)
 8016718:	3b01      	subs	r3, #1
 801671a:	a811      	add	r0, sp, #68	@ 0x44
 801671c:	9311      	str	r3, [sp, #68]	@ 0x44
 801671e:	f001 fe1f 	bl	8018360 <__match>
 8016722:	b910      	cbnz	r0, 801672a <_strtod_l+0x362>
 8016724:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016726:	3301      	adds	r3, #1
 8016728:	9311      	str	r3, [sp, #68]	@ 0x44
 801672a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016940 <_strtod_l+0x578>
 801672e:	f04f 0a00 	mov.w	sl, #0
 8016732:	e684      	b.n	801643e <_strtod_l+0x76>
 8016734:	487e      	ldr	r0, [pc, #504]	@ (8016930 <_strtod_l+0x568>)
 8016736:	f001 fb13 	bl	8017d60 <nan>
 801673a:	ec5b ab10 	vmov	sl, fp, d0
 801673e:	e67e      	b.n	801643e <_strtod_l+0x76>
 8016740:	ee07 9a90 	vmov	s15, r9
 8016744:	1be2      	subs	r2, r4, r7
 8016746:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801674a:	2d00      	cmp	r5, #0
 801674c:	bf08      	it	eq
 801674e:	461d      	moveq	r5, r3
 8016750:	2b10      	cmp	r3, #16
 8016752:	9209      	str	r2, [sp, #36]	@ 0x24
 8016754:	461a      	mov	r2, r3
 8016756:	bfa8      	it	ge
 8016758:	2210      	movge	r2, #16
 801675a:	2b09      	cmp	r3, #9
 801675c:	ec5b ab17 	vmov	sl, fp, d7
 8016760:	dc15      	bgt.n	801678e <_strtod_l+0x3c6>
 8016762:	1be1      	subs	r1, r4, r7
 8016764:	2900      	cmp	r1, #0
 8016766:	f43f ae6a 	beq.w	801643e <_strtod_l+0x76>
 801676a:	eba4 0107 	sub.w	r1, r4, r7
 801676e:	dd72      	ble.n	8016856 <_strtod_l+0x48e>
 8016770:	2916      	cmp	r1, #22
 8016772:	dc59      	bgt.n	8016828 <_strtod_l+0x460>
 8016774:	4b6f      	ldr	r3, [pc, #444]	@ (8016934 <_strtod_l+0x56c>)
 8016776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801677c:	ed93 7b00 	vldr	d7, [r3]
 8016780:	ec4b ab16 	vmov	d6, sl, fp
 8016784:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016788:	ec5b ab17 	vmov	sl, fp, d7
 801678c:	e657      	b.n	801643e <_strtod_l+0x76>
 801678e:	4969      	ldr	r1, [pc, #420]	@ (8016934 <_strtod_l+0x56c>)
 8016790:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016794:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016798:	ee06 6a90 	vmov	s13, r6
 801679c:	2b0f      	cmp	r3, #15
 801679e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80167a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80167a6:	ec5b ab16 	vmov	sl, fp, d6
 80167aa:	ddda      	ble.n	8016762 <_strtod_l+0x39a>
 80167ac:	1a9a      	subs	r2, r3, r2
 80167ae:	1be1      	subs	r1, r4, r7
 80167b0:	440a      	add	r2, r1
 80167b2:	2a00      	cmp	r2, #0
 80167b4:	f340 8094 	ble.w	80168e0 <_strtod_l+0x518>
 80167b8:	f012 000f 	ands.w	r0, r2, #15
 80167bc:	d00a      	beq.n	80167d4 <_strtod_l+0x40c>
 80167be:	495d      	ldr	r1, [pc, #372]	@ (8016934 <_strtod_l+0x56c>)
 80167c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80167c4:	ed91 7b00 	vldr	d7, [r1]
 80167c8:	ec4b ab16 	vmov	d6, sl, fp
 80167cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167d0:	ec5b ab17 	vmov	sl, fp, d7
 80167d4:	f032 020f 	bics.w	r2, r2, #15
 80167d8:	d073      	beq.n	80168c2 <_strtod_l+0x4fa>
 80167da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80167de:	dd47      	ble.n	8016870 <_strtod_l+0x4a8>
 80167e0:	2400      	movs	r4, #0
 80167e2:	4625      	mov	r5, r4
 80167e4:	9407      	str	r4, [sp, #28]
 80167e6:	4626      	mov	r6, r4
 80167e8:	9a05      	ldr	r2, [sp, #20]
 80167ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016940 <_strtod_l+0x578>
 80167ee:	2322      	movs	r3, #34	@ 0x22
 80167f0:	6013      	str	r3, [r2, #0]
 80167f2:	f04f 0a00 	mov.w	sl, #0
 80167f6:	9b07      	ldr	r3, [sp, #28]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	f43f ae20 	beq.w	801643e <_strtod_l+0x76>
 80167fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016800:	9805      	ldr	r0, [sp, #20]
 8016802:	f001 feaf 	bl	8018564 <_Bfree>
 8016806:	9805      	ldr	r0, [sp, #20]
 8016808:	4631      	mov	r1, r6
 801680a:	f001 feab 	bl	8018564 <_Bfree>
 801680e:	9805      	ldr	r0, [sp, #20]
 8016810:	4629      	mov	r1, r5
 8016812:	f001 fea7 	bl	8018564 <_Bfree>
 8016816:	9907      	ldr	r1, [sp, #28]
 8016818:	9805      	ldr	r0, [sp, #20]
 801681a:	f001 fea3 	bl	8018564 <_Bfree>
 801681e:	9805      	ldr	r0, [sp, #20]
 8016820:	4621      	mov	r1, r4
 8016822:	f001 fe9f 	bl	8018564 <_Bfree>
 8016826:	e60a      	b.n	801643e <_strtod_l+0x76>
 8016828:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801682c:	1be0      	subs	r0, r4, r7
 801682e:	4281      	cmp	r1, r0
 8016830:	dbbc      	blt.n	80167ac <_strtod_l+0x3e4>
 8016832:	4a40      	ldr	r2, [pc, #256]	@ (8016934 <_strtod_l+0x56c>)
 8016834:	f1c3 030f 	rsb	r3, r3, #15
 8016838:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801683c:	ed91 7b00 	vldr	d7, [r1]
 8016840:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016842:	ec4b ab16 	vmov	d6, sl, fp
 8016846:	1acb      	subs	r3, r1, r3
 8016848:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801684c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016850:	ed92 6b00 	vldr	d6, [r2]
 8016854:	e796      	b.n	8016784 <_strtod_l+0x3bc>
 8016856:	3116      	adds	r1, #22
 8016858:	dba8      	blt.n	80167ac <_strtod_l+0x3e4>
 801685a:	4b36      	ldr	r3, [pc, #216]	@ (8016934 <_strtod_l+0x56c>)
 801685c:	1b3c      	subs	r4, r7, r4
 801685e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016862:	ed94 7b00 	vldr	d7, [r4]
 8016866:	ec4b ab16 	vmov	d6, sl, fp
 801686a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801686e:	e78b      	b.n	8016788 <_strtod_l+0x3c0>
 8016870:	2000      	movs	r0, #0
 8016872:	ec4b ab17 	vmov	d7, sl, fp
 8016876:	4e30      	ldr	r6, [pc, #192]	@ (8016938 <_strtod_l+0x570>)
 8016878:	1112      	asrs	r2, r2, #4
 801687a:	4601      	mov	r1, r0
 801687c:	2a01      	cmp	r2, #1
 801687e:	dc23      	bgt.n	80168c8 <_strtod_l+0x500>
 8016880:	b108      	cbz	r0, 8016886 <_strtod_l+0x4be>
 8016882:	ec5b ab17 	vmov	sl, fp, d7
 8016886:	4a2c      	ldr	r2, [pc, #176]	@ (8016938 <_strtod_l+0x570>)
 8016888:	482c      	ldr	r0, [pc, #176]	@ (801693c <_strtod_l+0x574>)
 801688a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801688e:	ed92 7b00 	vldr	d7, [r2]
 8016892:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016896:	ec4b ab16 	vmov	d6, sl, fp
 801689a:	4a29      	ldr	r2, [pc, #164]	@ (8016940 <_strtod_l+0x578>)
 801689c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168a0:	ee17 1a90 	vmov	r1, s15
 80168a4:	400a      	ands	r2, r1
 80168a6:	4282      	cmp	r2, r0
 80168a8:	ec5b ab17 	vmov	sl, fp, d7
 80168ac:	d898      	bhi.n	80167e0 <_strtod_l+0x418>
 80168ae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80168b2:	4282      	cmp	r2, r0
 80168b4:	bf86      	itte	hi
 80168b6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016944 <_strtod_l+0x57c>
 80168ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80168be:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80168c2:	2200      	movs	r2, #0
 80168c4:	9206      	str	r2, [sp, #24]
 80168c6:	e076      	b.n	80169b6 <_strtod_l+0x5ee>
 80168c8:	f012 0f01 	tst.w	r2, #1
 80168cc:	d004      	beq.n	80168d8 <_strtod_l+0x510>
 80168ce:	ed96 6b00 	vldr	d6, [r6]
 80168d2:	2001      	movs	r0, #1
 80168d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168d8:	3101      	adds	r1, #1
 80168da:	1052      	asrs	r2, r2, #1
 80168dc:	3608      	adds	r6, #8
 80168de:	e7cd      	b.n	801687c <_strtod_l+0x4b4>
 80168e0:	d0ef      	beq.n	80168c2 <_strtod_l+0x4fa>
 80168e2:	4252      	negs	r2, r2
 80168e4:	f012 000f 	ands.w	r0, r2, #15
 80168e8:	d00a      	beq.n	8016900 <_strtod_l+0x538>
 80168ea:	4912      	ldr	r1, [pc, #72]	@ (8016934 <_strtod_l+0x56c>)
 80168ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80168f0:	ed91 7b00 	vldr	d7, [r1]
 80168f4:	ec4b ab16 	vmov	d6, sl, fp
 80168f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80168fc:	ec5b ab17 	vmov	sl, fp, d7
 8016900:	1112      	asrs	r2, r2, #4
 8016902:	d0de      	beq.n	80168c2 <_strtod_l+0x4fa>
 8016904:	2a1f      	cmp	r2, #31
 8016906:	dd1f      	ble.n	8016948 <_strtod_l+0x580>
 8016908:	2400      	movs	r4, #0
 801690a:	4625      	mov	r5, r4
 801690c:	9407      	str	r4, [sp, #28]
 801690e:	4626      	mov	r6, r4
 8016910:	9a05      	ldr	r2, [sp, #20]
 8016912:	2322      	movs	r3, #34	@ 0x22
 8016914:	f04f 0a00 	mov.w	sl, #0
 8016918:	f04f 0b00 	mov.w	fp, #0
 801691c:	6013      	str	r3, [r2, #0]
 801691e:	e76a      	b.n	80167f6 <_strtod_l+0x42e>
 8016920:	0801a31b 	.word	0x0801a31b
 8016924:	0801a320 	.word	0x0801a320
 8016928:	0801a312 	.word	0x0801a312
 801692c:	0801a315 	.word	0x0801a315
 8016930:	0801a52a 	.word	0x0801a52a
 8016934:	0801a630 	.word	0x0801a630
 8016938:	0801a608 	.word	0x0801a608
 801693c:	7ca00000 	.word	0x7ca00000
 8016940:	7ff00000 	.word	0x7ff00000
 8016944:	7fefffff 	.word	0x7fefffff
 8016948:	f012 0110 	ands.w	r1, r2, #16
 801694c:	bf18      	it	ne
 801694e:	216a      	movne	r1, #106	@ 0x6a
 8016950:	9106      	str	r1, [sp, #24]
 8016952:	ec4b ab17 	vmov	d7, sl, fp
 8016956:	49b0      	ldr	r1, [pc, #704]	@ (8016c18 <_strtod_l+0x850>)
 8016958:	2000      	movs	r0, #0
 801695a:	07d6      	lsls	r6, r2, #31
 801695c:	d504      	bpl.n	8016968 <_strtod_l+0x5a0>
 801695e:	ed91 6b00 	vldr	d6, [r1]
 8016962:	2001      	movs	r0, #1
 8016964:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016968:	1052      	asrs	r2, r2, #1
 801696a:	f101 0108 	add.w	r1, r1, #8
 801696e:	d1f4      	bne.n	801695a <_strtod_l+0x592>
 8016970:	b108      	cbz	r0, 8016976 <_strtod_l+0x5ae>
 8016972:	ec5b ab17 	vmov	sl, fp, d7
 8016976:	9a06      	ldr	r2, [sp, #24]
 8016978:	b1b2      	cbz	r2, 80169a8 <_strtod_l+0x5e0>
 801697a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801697e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016982:	2a00      	cmp	r2, #0
 8016984:	4658      	mov	r0, fp
 8016986:	dd0f      	ble.n	80169a8 <_strtod_l+0x5e0>
 8016988:	2a1f      	cmp	r2, #31
 801698a:	dd55      	ble.n	8016a38 <_strtod_l+0x670>
 801698c:	2a34      	cmp	r2, #52	@ 0x34
 801698e:	bfde      	ittt	le
 8016990:	f04f 32ff 	movle.w	r2, #4294967295
 8016994:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016998:	408a      	lslle	r2, r1
 801699a:	f04f 0a00 	mov.w	sl, #0
 801699e:	bfcc      	ite	gt
 80169a0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80169a4:	ea02 0b00 	andle.w	fp, r2, r0
 80169a8:	ec4b ab17 	vmov	d7, sl, fp
 80169ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80169b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b4:	d0a8      	beq.n	8016908 <_strtod_l+0x540>
 80169b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80169b8:	9805      	ldr	r0, [sp, #20]
 80169ba:	f8cd 9000 	str.w	r9, [sp]
 80169be:	462a      	mov	r2, r5
 80169c0:	f001 fe38 	bl	8018634 <__s2b>
 80169c4:	9007      	str	r0, [sp, #28]
 80169c6:	2800      	cmp	r0, #0
 80169c8:	f43f af0a 	beq.w	80167e0 <_strtod_l+0x418>
 80169cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169ce:	1b3f      	subs	r7, r7, r4
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	bfb4      	ite	lt
 80169d4:	463b      	movlt	r3, r7
 80169d6:	2300      	movge	r3, #0
 80169d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80169da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169dc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016c08 <_strtod_l+0x840>
 80169e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169e4:	2400      	movs	r4, #0
 80169e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80169e8:	4625      	mov	r5, r4
 80169ea:	9b07      	ldr	r3, [sp, #28]
 80169ec:	9805      	ldr	r0, [sp, #20]
 80169ee:	6859      	ldr	r1, [r3, #4]
 80169f0:	f001 fd78 	bl	80184e4 <_Balloc>
 80169f4:	4606      	mov	r6, r0
 80169f6:	2800      	cmp	r0, #0
 80169f8:	f43f aef6 	beq.w	80167e8 <_strtod_l+0x420>
 80169fc:	9b07      	ldr	r3, [sp, #28]
 80169fe:	691a      	ldr	r2, [r3, #16]
 8016a00:	ec4b ab19 	vmov	d9, sl, fp
 8016a04:	3202      	adds	r2, #2
 8016a06:	f103 010c 	add.w	r1, r3, #12
 8016a0a:	0092      	lsls	r2, r2, #2
 8016a0c:	300c      	adds	r0, #12
 8016a0e:	f001 f996 	bl	8017d3e <memcpy>
 8016a12:	eeb0 0b49 	vmov.f64	d0, d9
 8016a16:	9805      	ldr	r0, [sp, #20]
 8016a18:	aa14      	add	r2, sp, #80	@ 0x50
 8016a1a:	a913      	add	r1, sp, #76	@ 0x4c
 8016a1c:	f002 f946 	bl	8018cac <__d2b>
 8016a20:	9012      	str	r0, [sp, #72]	@ 0x48
 8016a22:	2800      	cmp	r0, #0
 8016a24:	f43f aee0 	beq.w	80167e8 <_strtod_l+0x420>
 8016a28:	9805      	ldr	r0, [sp, #20]
 8016a2a:	2101      	movs	r1, #1
 8016a2c:	f001 fe98 	bl	8018760 <__i2b>
 8016a30:	4605      	mov	r5, r0
 8016a32:	b940      	cbnz	r0, 8016a46 <_strtod_l+0x67e>
 8016a34:	2500      	movs	r5, #0
 8016a36:	e6d7      	b.n	80167e8 <_strtod_l+0x420>
 8016a38:	f04f 31ff 	mov.w	r1, #4294967295
 8016a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8016a40:	ea02 0a0a 	and.w	sl, r2, sl
 8016a44:	e7b0      	b.n	80169a8 <_strtod_l+0x5e0>
 8016a46:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016a48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016a4a:	2f00      	cmp	r7, #0
 8016a4c:	bfab      	itete	ge
 8016a4e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016a50:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8016a52:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8016a56:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016a5a:	bfac      	ite	ge
 8016a5c:	eb07 0903 	addge.w	r9, r7, r3
 8016a60:	eba3 0807 	sublt.w	r8, r3, r7
 8016a64:	9b06      	ldr	r3, [sp, #24]
 8016a66:	1aff      	subs	r7, r7, r3
 8016a68:	4417      	add	r7, r2
 8016a6a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8016c1c <_strtod_l+0x854>)
 8016a70:	3f01      	subs	r7, #1
 8016a72:	4297      	cmp	r7, r2
 8016a74:	da51      	bge.n	8016b1a <_strtod_l+0x752>
 8016a76:	1bd1      	subs	r1, r2, r7
 8016a78:	291f      	cmp	r1, #31
 8016a7a:	eba3 0301 	sub.w	r3, r3, r1
 8016a7e:	f04f 0201 	mov.w	r2, #1
 8016a82:	dc3e      	bgt.n	8016b02 <_strtod_l+0x73a>
 8016a84:	408a      	lsls	r2, r1
 8016a86:	920c      	str	r2, [sp, #48]	@ 0x30
 8016a88:	2200      	movs	r2, #0
 8016a8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016a8c:	eb09 0703 	add.w	r7, r9, r3
 8016a90:	4498      	add	r8, r3
 8016a92:	9b06      	ldr	r3, [sp, #24]
 8016a94:	45b9      	cmp	r9, r7
 8016a96:	4498      	add	r8, r3
 8016a98:	464b      	mov	r3, r9
 8016a9a:	bfa8      	it	ge
 8016a9c:	463b      	movge	r3, r7
 8016a9e:	4543      	cmp	r3, r8
 8016aa0:	bfa8      	it	ge
 8016aa2:	4643      	movge	r3, r8
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	bfc2      	ittt	gt
 8016aa8:	1aff      	subgt	r7, r7, r3
 8016aaa:	eba8 0803 	subgt.w	r8, r8, r3
 8016aae:	eba9 0903 	subgt.w	r9, r9, r3
 8016ab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	dd16      	ble.n	8016ae6 <_strtod_l+0x71e>
 8016ab8:	4629      	mov	r1, r5
 8016aba:	9805      	ldr	r0, [sp, #20]
 8016abc:	461a      	mov	r2, r3
 8016abe:	f001 ff0f 	bl	80188e0 <__pow5mult>
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d0b5      	beq.n	8016a34 <_strtod_l+0x66c>
 8016ac8:	4601      	mov	r1, r0
 8016aca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016acc:	9805      	ldr	r0, [sp, #20]
 8016ace:	f001 fe5d 	bl	801878c <__multiply>
 8016ad2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	f43f ae87 	beq.w	80167e8 <_strtod_l+0x420>
 8016ada:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016adc:	9805      	ldr	r0, [sp, #20]
 8016ade:	f001 fd41 	bl	8018564 <_Bfree>
 8016ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ae4:	9312      	str	r3, [sp, #72]	@ 0x48
 8016ae6:	2f00      	cmp	r7, #0
 8016ae8:	dc1b      	bgt.n	8016b22 <_strtod_l+0x75a>
 8016aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	dd21      	ble.n	8016b34 <_strtod_l+0x76c>
 8016af0:	4631      	mov	r1, r6
 8016af2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016af4:	9805      	ldr	r0, [sp, #20]
 8016af6:	f001 fef3 	bl	80188e0 <__pow5mult>
 8016afa:	4606      	mov	r6, r0
 8016afc:	b9d0      	cbnz	r0, 8016b34 <_strtod_l+0x76c>
 8016afe:	2600      	movs	r6, #0
 8016b00:	e672      	b.n	80167e8 <_strtod_l+0x420>
 8016b02:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8016b06:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016b0a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016b0e:	37e2      	adds	r7, #226	@ 0xe2
 8016b10:	fa02 f107 	lsl.w	r1, r2, r7
 8016b14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016b16:	920c      	str	r2, [sp, #48]	@ 0x30
 8016b18:	e7b8      	b.n	8016a8c <_strtod_l+0x6c4>
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016b1e:	2201      	movs	r2, #1
 8016b20:	e7f9      	b.n	8016b16 <_strtod_l+0x74e>
 8016b22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016b24:	9805      	ldr	r0, [sp, #20]
 8016b26:	463a      	mov	r2, r7
 8016b28:	f001 ff34 	bl	8018994 <__lshift>
 8016b2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	d1db      	bne.n	8016aea <_strtod_l+0x722>
 8016b32:	e659      	b.n	80167e8 <_strtod_l+0x420>
 8016b34:	f1b8 0f00 	cmp.w	r8, #0
 8016b38:	dd07      	ble.n	8016b4a <_strtod_l+0x782>
 8016b3a:	4631      	mov	r1, r6
 8016b3c:	9805      	ldr	r0, [sp, #20]
 8016b3e:	4642      	mov	r2, r8
 8016b40:	f001 ff28 	bl	8018994 <__lshift>
 8016b44:	4606      	mov	r6, r0
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d0d9      	beq.n	8016afe <_strtod_l+0x736>
 8016b4a:	f1b9 0f00 	cmp.w	r9, #0
 8016b4e:	dd08      	ble.n	8016b62 <_strtod_l+0x79a>
 8016b50:	4629      	mov	r1, r5
 8016b52:	9805      	ldr	r0, [sp, #20]
 8016b54:	464a      	mov	r2, r9
 8016b56:	f001 ff1d 	bl	8018994 <__lshift>
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	f43f ae43 	beq.w	80167e8 <_strtod_l+0x420>
 8016b62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016b64:	9805      	ldr	r0, [sp, #20]
 8016b66:	4632      	mov	r2, r6
 8016b68:	f001 ff9c 	bl	8018aa4 <__mdiff>
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	f43f ae3a 	beq.w	80167e8 <_strtod_l+0x420>
 8016b74:	2300      	movs	r3, #0
 8016b76:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016b7a:	60c3      	str	r3, [r0, #12]
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	f001 ff75 	bl	8018a6c <__mcmp>
 8016b82:	2800      	cmp	r0, #0
 8016b84:	da4e      	bge.n	8016c24 <_strtod_l+0x85c>
 8016b86:	ea58 080a 	orrs.w	r8, r8, sl
 8016b8a:	d174      	bne.n	8016c76 <_strtod_l+0x8ae>
 8016b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d170      	bne.n	8016c76 <_strtod_l+0x8ae>
 8016b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b98:	0d1b      	lsrs	r3, r3, #20
 8016b9a:	051b      	lsls	r3, r3, #20
 8016b9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ba0:	d969      	bls.n	8016c76 <_strtod_l+0x8ae>
 8016ba2:	6963      	ldr	r3, [r4, #20]
 8016ba4:	b913      	cbnz	r3, 8016bac <_strtod_l+0x7e4>
 8016ba6:	6923      	ldr	r3, [r4, #16]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	dd64      	ble.n	8016c76 <_strtod_l+0x8ae>
 8016bac:	4621      	mov	r1, r4
 8016bae:	2201      	movs	r2, #1
 8016bb0:	9805      	ldr	r0, [sp, #20]
 8016bb2:	f001 feef 	bl	8018994 <__lshift>
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	4604      	mov	r4, r0
 8016bba:	f001 ff57 	bl	8018a6c <__mcmp>
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	dd59      	ble.n	8016c76 <_strtod_l+0x8ae>
 8016bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016bc6:	9a06      	ldr	r2, [sp, #24]
 8016bc8:	0d1b      	lsrs	r3, r3, #20
 8016bca:	051b      	lsls	r3, r3, #20
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	d070      	beq.n	8016cb2 <_strtod_l+0x8ea>
 8016bd0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016bd4:	d86d      	bhi.n	8016cb2 <_strtod_l+0x8ea>
 8016bd6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016bda:	f67f ae99 	bls.w	8016910 <_strtod_l+0x548>
 8016bde:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016c10 <_strtod_l+0x848>
 8016be2:	ec4b ab16 	vmov	d6, sl, fp
 8016be6:	4b0e      	ldr	r3, [pc, #56]	@ (8016c20 <_strtod_l+0x858>)
 8016be8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016bec:	ee17 2a90 	vmov	r2, s15
 8016bf0:	4013      	ands	r3, r2
 8016bf2:	ec5b ab17 	vmov	sl, fp, d7
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	f47f ae01 	bne.w	80167fe <_strtod_l+0x436>
 8016bfc:	9a05      	ldr	r2, [sp, #20]
 8016bfe:	2322      	movs	r3, #34	@ 0x22
 8016c00:	6013      	str	r3, [r2, #0]
 8016c02:	e5fc      	b.n	80167fe <_strtod_l+0x436>
 8016c04:	f3af 8000 	nop.w
 8016c08:	ffc00000 	.word	0xffc00000
 8016c0c:	41dfffff 	.word	0x41dfffff
 8016c10:	00000000 	.word	0x00000000
 8016c14:	39500000 	.word	0x39500000
 8016c18:	0801a348 	.word	0x0801a348
 8016c1c:	fffffc02 	.word	0xfffffc02
 8016c20:	7ff00000 	.word	0x7ff00000
 8016c24:	46d9      	mov	r9, fp
 8016c26:	d15d      	bne.n	8016ce4 <_strtod_l+0x91c>
 8016c28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c2c:	f1b8 0f00 	cmp.w	r8, #0
 8016c30:	d02a      	beq.n	8016c88 <_strtod_l+0x8c0>
 8016c32:	4aab      	ldr	r2, [pc, #684]	@ (8016ee0 <_strtod_l+0xb18>)
 8016c34:	4293      	cmp	r3, r2
 8016c36:	d12a      	bne.n	8016c8e <_strtod_l+0x8c6>
 8016c38:	9b06      	ldr	r3, [sp, #24]
 8016c3a:	4652      	mov	r2, sl
 8016c3c:	b1fb      	cbz	r3, 8016c7e <_strtod_l+0x8b6>
 8016c3e:	4ba9      	ldr	r3, [pc, #676]	@ (8016ee4 <_strtod_l+0xb1c>)
 8016c40:	ea0b 0303 	and.w	r3, fp, r3
 8016c44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016c48:	f04f 31ff 	mov.w	r1, #4294967295
 8016c4c:	d81a      	bhi.n	8016c84 <_strtod_l+0x8bc>
 8016c4e:	0d1b      	lsrs	r3, r3, #20
 8016c50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016c54:	fa01 f303 	lsl.w	r3, r1, r3
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d118      	bne.n	8016c8e <_strtod_l+0x8c6>
 8016c5c:	4ba2      	ldr	r3, [pc, #648]	@ (8016ee8 <_strtod_l+0xb20>)
 8016c5e:	4599      	cmp	r9, r3
 8016c60:	d102      	bne.n	8016c68 <_strtod_l+0x8a0>
 8016c62:	3201      	adds	r2, #1
 8016c64:	f43f adc0 	beq.w	80167e8 <_strtod_l+0x420>
 8016c68:	4b9e      	ldr	r3, [pc, #632]	@ (8016ee4 <_strtod_l+0xb1c>)
 8016c6a:	ea09 0303 	and.w	r3, r9, r3
 8016c6e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016c72:	f04f 0a00 	mov.w	sl, #0
 8016c76:	9b06      	ldr	r3, [sp, #24]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d1b0      	bne.n	8016bde <_strtod_l+0x816>
 8016c7c:	e5bf      	b.n	80167fe <_strtod_l+0x436>
 8016c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c82:	e7e9      	b.n	8016c58 <_strtod_l+0x890>
 8016c84:	460b      	mov	r3, r1
 8016c86:	e7e7      	b.n	8016c58 <_strtod_l+0x890>
 8016c88:	ea53 030a 	orrs.w	r3, r3, sl
 8016c8c:	d099      	beq.n	8016bc2 <_strtod_l+0x7fa>
 8016c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c90:	b1c3      	cbz	r3, 8016cc4 <_strtod_l+0x8fc>
 8016c92:	ea13 0f09 	tst.w	r3, r9
 8016c96:	d0ee      	beq.n	8016c76 <_strtod_l+0x8ae>
 8016c98:	9a06      	ldr	r2, [sp, #24]
 8016c9a:	4650      	mov	r0, sl
 8016c9c:	4659      	mov	r1, fp
 8016c9e:	f1b8 0f00 	cmp.w	r8, #0
 8016ca2:	d013      	beq.n	8016ccc <_strtod_l+0x904>
 8016ca4:	f7ff fb76 	bl	8016394 <sulp>
 8016ca8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016cac:	ec5b ab17 	vmov	sl, fp, d7
 8016cb0:	e7e1      	b.n	8016c76 <_strtod_l+0x8ae>
 8016cb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016cb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016cba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016cbe:	f04f 3aff 	mov.w	sl, #4294967295
 8016cc2:	e7d8      	b.n	8016c76 <_strtod_l+0x8ae>
 8016cc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016cc6:	ea13 0f0a 	tst.w	r3, sl
 8016cca:	e7e4      	b.n	8016c96 <_strtod_l+0x8ce>
 8016ccc:	f7ff fb62 	bl	8016394 <sulp>
 8016cd0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016cd4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cdc:	ec5b ab10 	vmov	sl, fp, d0
 8016ce0:	d1c9      	bne.n	8016c76 <_strtod_l+0x8ae>
 8016ce2:	e615      	b.n	8016910 <_strtod_l+0x548>
 8016ce4:	4629      	mov	r1, r5
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f002 f838 	bl	8018d5c <__ratio>
 8016cec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016cf0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf8:	d85d      	bhi.n	8016db6 <_strtod_l+0x9ee>
 8016cfa:	f1b8 0f00 	cmp.w	r8, #0
 8016cfe:	d164      	bne.n	8016dca <_strtod_l+0xa02>
 8016d00:	f1ba 0f00 	cmp.w	sl, #0
 8016d04:	d14b      	bne.n	8016d9e <_strtod_l+0x9d6>
 8016d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d0a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d160      	bne.n	8016dd4 <_strtod_l+0xa0c>
 8016d12:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8016d16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1e:	d401      	bmi.n	8016d24 <_strtod_l+0x95c>
 8016d20:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016d24:	eeb1 ab48 	vneg.f64	d10, d8
 8016d28:	486e      	ldr	r0, [pc, #440]	@ (8016ee4 <_strtod_l+0xb1c>)
 8016d2a:	4970      	ldr	r1, [pc, #448]	@ (8016eec <_strtod_l+0xb24>)
 8016d2c:	ea09 0700 	and.w	r7, r9, r0
 8016d30:	428f      	cmp	r7, r1
 8016d32:	ec53 2b1a 	vmov	r2, r3, d10
 8016d36:	d17d      	bne.n	8016e34 <_strtod_l+0xa6c>
 8016d38:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016d3c:	ec4b ab1c 	vmov	d12, sl, fp
 8016d40:	eeb0 0b4c 	vmov.f64	d0, d12
 8016d44:	f001 ff42 	bl	8018bcc <__ulp>
 8016d48:	4866      	ldr	r0, [pc, #408]	@ (8016ee4 <_strtod_l+0xb1c>)
 8016d4a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016d4e:	ee1c 3a90 	vmov	r3, s25
 8016d52:	4a67      	ldr	r2, [pc, #412]	@ (8016ef0 <_strtod_l+0xb28>)
 8016d54:	ea03 0100 	and.w	r1, r3, r0
 8016d58:	4291      	cmp	r1, r2
 8016d5a:	ec5b ab1c 	vmov	sl, fp, d12
 8016d5e:	d93c      	bls.n	8016dda <_strtod_l+0xa12>
 8016d60:	ee19 2a90 	vmov	r2, s19
 8016d64:	4b60      	ldr	r3, [pc, #384]	@ (8016ee8 <_strtod_l+0xb20>)
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d104      	bne.n	8016d74 <_strtod_l+0x9ac>
 8016d6a:	ee19 3a10 	vmov	r3, s18
 8016d6e:	3301      	adds	r3, #1
 8016d70:	f43f ad3a 	beq.w	80167e8 <_strtod_l+0x420>
 8016d74:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016ee8 <_strtod_l+0xb20>
 8016d78:	f04f 3aff 	mov.w	sl, #4294967295
 8016d7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016d7e:	9805      	ldr	r0, [sp, #20]
 8016d80:	f001 fbf0 	bl	8018564 <_Bfree>
 8016d84:	9805      	ldr	r0, [sp, #20]
 8016d86:	4631      	mov	r1, r6
 8016d88:	f001 fbec 	bl	8018564 <_Bfree>
 8016d8c:	9805      	ldr	r0, [sp, #20]
 8016d8e:	4629      	mov	r1, r5
 8016d90:	f001 fbe8 	bl	8018564 <_Bfree>
 8016d94:	9805      	ldr	r0, [sp, #20]
 8016d96:	4621      	mov	r1, r4
 8016d98:	f001 fbe4 	bl	8018564 <_Bfree>
 8016d9c:	e625      	b.n	80169ea <_strtod_l+0x622>
 8016d9e:	f1ba 0f01 	cmp.w	sl, #1
 8016da2:	d103      	bne.n	8016dac <_strtod_l+0x9e4>
 8016da4:	f1bb 0f00 	cmp.w	fp, #0
 8016da8:	f43f adb2 	beq.w	8016910 <_strtod_l+0x548>
 8016dac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016db0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016db4:	e7b8      	b.n	8016d28 <_strtod_l+0x960>
 8016db6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016dba:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016dbe:	f1b8 0f00 	cmp.w	r8, #0
 8016dc2:	d0af      	beq.n	8016d24 <_strtod_l+0x95c>
 8016dc4:	eeb0 ab48 	vmov.f64	d10, d8
 8016dc8:	e7ae      	b.n	8016d28 <_strtod_l+0x960>
 8016dca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016dce:	eeb0 8b4a 	vmov.f64	d8, d10
 8016dd2:	e7a9      	b.n	8016d28 <_strtod_l+0x960>
 8016dd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016dd8:	e7a6      	b.n	8016d28 <_strtod_l+0x960>
 8016dda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016dde:	9b06      	ldr	r3, [sp, #24]
 8016de0:	46d9      	mov	r9, fp
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d1ca      	bne.n	8016d7c <_strtod_l+0x9b4>
 8016de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016dea:	0d1b      	lsrs	r3, r3, #20
 8016dec:	051b      	lsls	r3, r3, #20
 8016dee:	429f      	cmp	r7, r3
 8016df0:	d1c4      	bne.n	8016d7c <_strtod_l+0x9b4>
 8016df2:	ec51 0b18 	vmov	r0, r1, d8
 8016df6:	f7e9 fc9f 	bl	8000738 <__aeabi_d2lz>
 8016dfa:	f7e9 fc57 	bl	80006ac <__aeabi_l2d>
 8016dfe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016e02:	ec41 0b17 	vmov	d7, r0, r1
 8016e06:	ea49 090a 	orr.w	r9, r9, sl
 8016e0a:	ea59 0908 	orrs.w	r9, r9, r8
 8016e0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016e12:	d03c      	beq.n	8016e8e <_strtod_l+0xac6>
 8016e14:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016ec8 <_strtod_l+0xb00>
 8016e18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e20:	f53f aced 	bmi.w	80167fe <_strtod_l+0x436>
 8016e24:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016ed0 <_strtod_l+0xb08>
 8016e28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e30:	dda4      	ble.n	8016d7c <_strtod_l+0x9b4>
 8016e32:	e4e4      	b.n	80167fe <_strtod_l+0x436>
 8016e34:	9906      	ldr	r1, [sp, #24]
 8016e36:	b1e1      	cbz	r1, 8016e72 <_strtod_l+0xaaa>
 8016e38:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016e3c:	d819      	bhi.n	8016e72 <_strtod_l+0xaaa>
 8016e3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e46:	d811      	bhi.n	8016e6c <_strtod_l+0xaa4>
 8016e48:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016e4c:	ee18 3a10 	vmov	r3, s16
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	bf38      	it	cc
 8016e54:	2301      	movcc	r3, #1
 8016e56:	ee08 3a10 	vmov	s16, r3
 8016e5a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016e5e:	f1b8 0f00 	cmp.w	r8, #0
 8016e62:	d111      	bne.n	8016e88 <_strtod_l+0xac0>
 8016e64:	eeb1 7b48 	vneg.f64	d7, d8
 8016e68:	ec53 2b17 	vmov	r2, r3, d7
 8016e6c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016e70:	1bcb      	subs	r3, r1, r7
 8016e72:	eeb0 0b49 	vmov.f64	d0, d9
 8016e76:	ec43 2b1a 	vmov	d10, r2, r3
 8016e7a:	f001 fea7 	bl	8018bcc <__ulp>
 8016e7e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016e82:	ec5b ab19 	vmov	sl, fp, d9
 8016e86:	e7aa      	b.n	8016dde <_strtod_l+0xa16>
 8016e88:	eeb0 7b48 	vmov.f64	d7, d8
 8016e8c:	e7ec      	b.n	8016e68 <_strtod_l+0xaa0>
 8016e8e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016ed8 <_strtod_l+0xb10>
 8016e92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9a:	f57f af6f 	bpl.w	8016d7c <_strtod_l+0x9b4>
 8016e9e:	e4ae      	b.n	80167fe <_strtod_l+0x436>
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	9308      	str	r3, [sp, #32]
 8016ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ea6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ea8:	6013      	str	r3, [r2, #0]
 8016eaa:	f7ff bacc 	b.w	8016446 <_strtod_l+0x7e>
 8016eae:	2a65      	cmp	r2, #101	@ 0x65
 8016eb0:	f43f abbc 	beq.w	801662c <_strtod_l+0x264>
 8016eb4:	2a45      	cmp	r2, #69	@ 0x45
 8016eb6:	f43f abb9 	beq.w	801662c <_strtod_l+0x264>
 8016eba:	2301      	movs	r3, #1
 8016ebc:	9306      	str	r3, [sp, #24]
 8016ebe:	f7ff bbf0 	b.w	80166a2 <_strtod_l+0x2da>
 8016ec2:	bf00      	nop
 8016ec4:	f3af 8000 	nop.w
 8016ec8:	94a03595 	.word	0x94a03595
 8016ecc:	3fdfffff 	.word	0x3fdfffff
 8016ed0:	35afe535 	.word	0x35afe535
 8016ed4:	3fe00000 	.word	0x3fe00000
 8016ed8:	94a03595 	.word	0x94a03595
 8016edc:	3fcfffff 	.word	0x3fcfffff
 8016ee0:	000fffff 	.word	0x000fffff
 8016ee4:	7ff00000 	.word	0x7ff00000
 8016ee8:	7fefffff 	.word	0x7fefffff
 8016eec:	7fe00000 	.word	0x7fe00000
 8016ef0:	7c9fffff 	.word	0x7c9fffff

08016ef4 <_strtod_r>:
 8016ef4:	4b01      	ldr	r3, [pc, #4]	@ (8016efc <_strtod_r+0x8>)
 8016ef6:	f7ff ba67 	b.w	80163c8 <_strtod_l>
 8016efa:	bf00      	nop
 8016efc:	24000114 	.word	0x24000114

08016f00 <strtod>:
 8016f00:	460a      	mov	r2, r1
 8016f02:	4601      	mov	r1, r0
 8016f04:	4802      	ldr	r0, [pc, #8]	@ (8016f10 <strtod+0x10>)
 8016f06:	4b03      	ldr	r3, [pc, #12]	@ (8016f14 <strtod+0x14>)
 8016f08:	6800      	ldr	r0, [r0, #0]
 8016f0a:	f7ff ba5d 	b.w	80163c8 <_strtod_l>
 8016f0e:	bf00      	nop
 8016f10:	24000280 	.word	0x24000280
 8016f14:	24000114 	.word	0x24000114

08016f18 <_strtol_l.constprop.0>:
 8016f18:	2b24      	cmp	r3, #36	@ 0x24
 8016f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f1e:	4686      	mov	lr, r0
 8016f20:	4690      	mov	r8, r2
 8016f22:	d801      	bhi.n	8016f28 <_strtol_l.constprop.0+0x10>
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d106      	bne.n	8016f36 <_strtol_l.constprop.0+0x1e>
 8016f28:	f000 fedc 	bl	8017ce4 <__errno>
 8016f2c:	2316      	movs	r3, #22
 8016f2e:	6003      	str	r3, [r0, #0]
 8016f30:	2000      	movs	r0, #0
 8016f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f36:	4834      	ldr	r0, [pc, #208]	@ (8017008 <_strtol_l.constprop.0+0xf0>)
 8016f38:	460d      	mov	r5, r1
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f40:	5d06      	ldrb	r6, [r0, r4]
 8016f42:	f016 0608 	ands.w	r6, r6, #8
 8016f46:	d1f8      	bne.n	8016f3a <_strtol_l.constprop.0+0x22>
 8016f48:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f4a:	d12d      	bne.n	8016fa8 <_strtol_l.constprop.0+0x90>
 8016f4c:	782c      	ldrb	r4, [r5, #0]
 8016f4e:	2601      	movs	r6, #1
 8016f50:	1c95      	adds	r5, r2, #2
 8016f52:	f033 0210 	bics.w	r2, r3, #16
 8016f56:	d109      	bne.n	8016f6c <_strtol_l.constprop.0+0x54>
 8016f58:	2c30      	cmp	r4, #48	@ 0x30
 8016f5a:	d12a      	bne.n	8016fb2 <_strtol_l.constprop.0+0x9a>
 8016f5c:	782a      	ldrb	r2, [r5, #0]
 8016f5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016f62:	2a58      	cmp	r2, #88	@ 0x58
 8016f64:	d125      	bne.n	8016fb2 <_strtol_l.constprop.0+0x9a>
 8016f66:	786c      	ldrb	r4, [r5, #1]
 8016f68:	2310      	movs	r3, #16
 8016f6a:	3502      	adds	r5, #2
 8016f6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016f70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f74:	2200      	movs	r2, #0
 8016f76:	fbbc f9f3 	udiv	r9, ip, r3
 8016f7a:	4610      	mov	r0, r2
 8016f7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8016f80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016f84:	2f09      	cmp	r7, #9
 8016f86:	d81b      	bhi.n	8016fc0 <_strtol_l.constprop.0+0xa8>
 8016f88:	463c      	mov	r4, r7
 8016f8a:	42a3      	cmp	r3, r4
 8016f8c:	dd27      	ble.n	8016fde <_strtol_l.constprop.0+0xc6>
 8016f8e:	1c57      	adds	r7, r2, #1
 8016f90:	d007      	beq.n	8016fa2 <_strtol_l.constprop.0+0x8a>
 8016f92:	4581      	cmp	r9, r0
 8016f94:	d320      	bcc.n	8016fd8 <_strtol_l.constprop.0+0xc0>
 8016f96:	d101      	bne.n	8016f9c <_strtol_l.constprop.0+0x84>
 8016f98:	45a2      	cmp	sl, r4
 8016f9a:	db1d      	blt.n	8016fd8 <_strtol_l.constprop.0+0xc0>
 8016f9c:	fb00 4003 	mla	r0, r0, r3, r4
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fa6:	e7eb      	b.n	8016f80 <_strtol_l.constprop.0+0x68>
 8016fa8:	2c2b      	cmp	r4, #43	@ 0x2b
 8016faa:	bf04      	itt	eq
 8016fac:	782c      	ldrbeq	r4, [r5, #0]
 8016fae:	1c95      	addeq	r5, r2, #2
 8016fb0:	e7cf      	b.n	8016f52 <_strtol_l.constprop.0+0x3a>
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d1da      	bne.n	8016f6c <_strtol_l.constprop.0+0x54>
 8016fb6:	2c30      	cmp	r4, #48	@ 0x30
 8016fb8:	bf0c      	ite	eq
 8016fba:	2308      	moveq	r3, #8
 8016fbc:	230a      	movne	r3, #10
 8016fbe:	e7d5      	b.n	8016f6c <_strtol_l.constprop.0+0x54>
 8016fc0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016fc4:	2f19      	cmp	r7, #25
 8016fc6:	d801      	bhi.n	8016fcc <_strtol_l.constprop.0+0xb4>
 8016fc8:	3c37      	subs	r4, #55	@ 0x37
 8016fca:	e7de      	b.n	8016f8a <_strtol_l.constprop.0+0x72>
 8016fcc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016fd0:	2f19      	cmp	r7, #25
 8016fd2:	d804      	bhi.n	8016fde <_strtol_l.constprop.0+0xc6>
 8016fd4:	3c57      	subs	r4, #87	@ 0x57
 8016fd6:	e7d8      	b.n	8016f8a <_strtol_l.constprop.0+0x72>
 8016fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8016fdc:	e7e1      	b.n	8016fa2 <_strtol_l.constprop.0+0x8a>
 8016fde:	1c53      	adds	r3, r2, #1
 8016fe0:	d108      	bne.n	8016ff4 <_strtol_l.constprop.0+0xdc>
 8016fe2:	2322      	movs	r3, #34	@ 0x22
 8016fe4:	f8ce 3000 	str.w	r3, [lr]
 8016fe8:	4660      	mov	r0, ip
 8016fea:	f1b8 0f00 	cmp.w	r8, #0
 8016fee:	d0a0      	beq.n	8016f32 <_strtol_l.constprop.0+0x1a>
 8016ff0:	1e69      	subs	r1, r5, #1
 8016ff2:	e006      	b.n	8017002 <_strtol_l.constprop.0+0xea>
 8016ff4:	b106      	cbz	r6, 8016ff8 <_strtol_l.constprop.0+0xe0>
 8016ff6:	4240      	negs	r0, r0
 8016ff8:	f1b8 0f00 	cmp.w	r8, #0
 8016ffc:	d099      	beq.n	8016f32 <_strtol_l.constprop.0+0x1a>
 8016ffe:	2a00      	cmp	r2, #0
 8017000:	d1f6      	bne.n	8016ff0 <_strtol_l.constprop.0+0xd8>
 8017002:	f8c8 1000 	str.w	r1, [r8]
 8017006:	e794      	b.n	8016f32 <_strtol_l.constprop.0+0x1a>
 8017008:	0801a371 	.word	0x0801a371

0801700c <_strtol_r>:
 801700c:	f7ff bf84 	b.w	8016f18 <_strtol_l.constprop.0>

08017010 <strtol>:
 8017010:	4613      	mov	r3, r2
 8017012:	460a      	mov	r2, r1
 8017014:	4601      	mov	r1, r0
 8017016:	4802      	ldr	r0, [pc, #8]	@ (8017020 <strtol+0x10>)
 8017018:	6800      	ldr	r0, [r0, #0]
 801701a:	f7ff bf7d 	b.w	8016f18 <_strtol_l.constprop.0>
 801701e:	bf00      	nop
 8017020:	24000280 	.word	0x24000280

08017024 <_scanf_float>:
 8017024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017028:	b087      	sub	sp, #28
 801702a:	4617      	mov	r7, r2
 801702c:	9303      	str	r3, [sp, #12]
 801702e:	688b      	ldr	r3, [r1, #8]
 8017030:	1e5a      	subs	r2, r3, #1
 8017032:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017036:	bf81      	itttt	hi
 8017038:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801703c:	eb03 0b05 	addhi.w	fp, r3, r5
 8017040:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017044:	608b      	strhi	r3, [r1, #8]
 8017046:	680b      	ldr	r3, [r1, #0]
 8017048:	460a      	mov	r2, r1
 801704a:	f04f 0500 	mov.w	r5, #0
 801704e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017052:	f842 3b1c 	str.w	r3, [r2], #28
 8017056:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801705a:	4680      	mov	r8, r0
 801705c:	460c      	mov	r4, r1
 801705e:	bf98      	it	ls
 8017060:	f04f 0b00 	movls.w	fp, #0
 8017064:	9201      	str	r2, [sp, #4]
 8017066:	4616      	mov	r6, r2
 8017068:	46aa      	mov	sl, r5
 801706a:	46a9      	mov	r9, r5
 801706c:	9502      	str	r5, [sp, #8]
 801706e:	68a2      	ldr	r2, [r4, #8]
 8017070:	b152      	cbz	r2, 8017088 <_scanf_float+0x64>
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	2b4e      	cmp	r3, #78	@ 0x4e
 8017078:	d864      	bhi.n	8017144 <_scanf_float+0x120>
 801707a:	2b40      	cmp	r3, #64	@ 0x40
 801707c:	d83c      	bhi.n	80170f8 <_scanf_float+0xd4>
 801707e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017082:	b2c8      	uxtb	r0, r1
 8017084:	280e      	cmp	r0, #14
 8017086:	d93a      	bls.n	80170fe <_scanf_float+0xda>
 8017088:	f1b9 0f00 	cmp.w	r9, #0
 801708c:	d003      	beq.n	8017096 <_scanf_float+0x72>
 801708e:	6823      	ldr	r3, [r4, #0]
 8017090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	f10a 3aff 	add.w	sl, sl, #4294967295
 801709a:	f1ba 0f01 	cmp.w	sl, #1
 801709e:	f200 8117 	bhi.w	80172d0 <_scanf_float+0x2ac>
 80170a2:	9b01      	ldr	r3, [sp, #4]
 80170a4:	429e      	cmp	r6, r3
 80170a6:	f200 8108 	bhi.w	80172ba <_scanf_float+0x296>
 80170aa:	2001      	movs	r0, #1
 80170ac:	b007      	add	sp, #28
 80170ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80170b6:	2a0d      	cmp	r2, #13
 80170b8:	d8e6      	bhi.n	8017088 <_scanf_float+0x64>
 80170ba:	a101      	add	r1, pc, #4	@ (adr r1, 80170c0 <_scanf_float+0x9c>)
 80170bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80170c0:	08017207 	.word	0x08017207
 80170c4:	08017089 	.word	0x08017089
 80170c8:	08017089 	.word	0x08017089
 80170cc:	08017089 	.word	0x08017089
 80170d0:	08017267 	.word	0x08017267
 80170d4:	0801723f 	.word	0x0801723f
 80170d8:	08017089 	.word	0x08017089
 80170dc:	08017089 	.word	0x08017089
 80170e0:	08017215 	.word	0x08017215
 80170e4:	08017089 	.word	0x08017089
 80170e8:	08017089 	.word	0x08017089
 80170ec:	08017089 	.word	0x08017089
 80170f0:	08017089 	.word	0x08017089
 80170f4:	080171cd 	.word	0x080171cd
 80170f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80170fc:	e7db      	b.n	80170b6 <_scanf_float+0x92>
 80170fe:	290e      	cmp	r1, #14
 8017100:	d8c2      	bhi.n	8017088 <_scanf_float+0x64>
 8017102:	a001      	add	r0, pc, #4	@ (adr r0, 8017108 <_scanf_float+0xe4>)
 8017104:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017108:	080171bd 	.word	0x080171bd
 801710c:	08017089 	.word	0x08017089
 8017110:	080171bd 	.word	0x080171bd
 8017114:	08017253 	.word	0x08017253
 8017118:	08017089 	.word	0x08017089
 801711c:	08017165 	.word	0x08017165
 8017120:	080171a3 	.word	0x080171a3
 8017124:	080171a3 	.word	0x080171a3
 8017128:	080171a3 	.word	0x080171a3
 801712c:	080171a3 	.word	0x080171a3
 8017130:	080171a3 	.word	0x080171a3
 8017134:	080171a3 	.word	0x080171a3
 8017138:	080171a3 	.word	0x080171a3
 801713c:	080171a3 	.word	0x080171a3
 8017140:	080171a3 	.word	0x080171a3
 8017144:	2b6e      	cmp	r3, #110	@ 0x6e
 8017146:	d809      	bhi.n	801715c <_scanf_float+0x138>
 8017148:	2b60      	cmp	r3, #96	@ 0x60
 801714a:	d8b2      	bhi.n	80170b2 <_scanf_float+0x8e>
 801714c:	2b54      	cmp	r3, #84	@ 0x54
 801714e:	d07b      	beq.n	8017248 <_scanf_float+0x224>
 8017150:	2b59      	cmp	r3, #89	@ 0x59
 8017152:	d199      	bne.n	8017088 <_scanf_float+0x64>
 8017154:	2d07      	cmp	r5, #7
 8017156:	d197      	bne.n	8017088 <_scanf_float+0x64>
 8017158:	2508      	movs	r5, #8
 801715a:	e02c      	b.n	80171b6 <_scanf_float+0x192>
 801715c:	2b74      	cmp	r3, #116	@ 0x74
 801715e:	d073      	beq.n	8017248 <_scanf_float+0x224>
 8017160:	2b79      	cmp	r3, #121	@ 0x79
 8017162:	e7f6      	b.n	8017152 <_scanf_float+0x12e>
 8017164:	6821      	ldr	r1, [r4, #0]
 8017166:	05c8      	lsls	r0, r1, #23
 8017168:	d51b      	bpl.n	80171a2 <_scanf_float+0x17e>
 801716a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801716e:	6021      	str	r1, [r4, #0]
 8017170:	f109 0901 	add.w	r9, r9, #1
 8017174:	f1bb 0f00 	cmp.w	fp, #0
 8017178:	d003      	beq.n	8017182 <_scanf_float+0x15e>
 801717a:	3201      	adds	r2, #1
 801717c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017180:	60a2      	str	r2, [r4, #8]
 8017182:	68a3      	ldr	r3, [r4, #8]
 8017184:	3b01      	subs	r3, #1
 8017186:	60a3      	str	r3, [r4, #8]
 8017188:	6923      	ldr	r3, [r4, #16]
 801718a:	3301      	adds	r3, #1
 801718c:	6123      	str	r3, [r4, #16]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	3b01      	subs	r3, #1
 8017192:	2b00      	cmp	r3, #0
 8017194:	607b      	str	r3, [r7, #4]
 8017196:	f340 8087 	ble.w	80172a8 <_scanf_float+0x284>
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	3301      	adds	r3, #1
 801719e:	603b      	str	r3, [r7, #0]
 80171a0:	e765      	b.n	801706e <_scanf_float+0x4a>
 80171a2:	eb1a 0105 	adds.w	r1, sl, r5
 80171a6:	f47f af6f 	bne.w	8017088 <_scanf_float+0x64>
 80171aa:	6822      	ldr	r2, [r4, #0]
 80171ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80171b0:	6022      	str	r2, [r4, #0]
 80171b2:	460d      	mov	r5, r1
 80171b4:	468a      	mov	sl, r1
 80171b6:	f806 3b01 	strb.w	r3, [r6], #1
 80171ba:	e7e2      	b.n	8017182 <_scanf_float+0x15e>
 80171bc:	6822      	ldr	r2, [r4, #0]
 80171be:	0610      	lsls	r0, r2, #24
 80171c0:	f57f af62 	bpl.w	8017088 <_scanf_float+0x64>
 80171c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80171c8:	6022      	str	r2, [r4, #0]
 80171ca:	e7f4      	b.n	80171b6 <_scanf_float+0x192>
 80171cc:	f1ba 0f00 	cmp.w	sl, #0
 80171d0:	d10e      	bne.n	80171f0 <_scanf_float+0x1cc>
 80171d2:	f1b9 0f00 	cmp.w	r9, #0
 80171d6:	d10e      	bne.n	80171f6 <_scanf_float+0x1d2>
 80171d8:	6822      	ldr	r2, [r4, #0]
 80171da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80171de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80171e2:	d108      	bne.n	80171f6 <_scanf_float+0x1d2>
 80171e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80171e8:	6022      	str	r2, [r4, #0]
 80171ea:	f04f 0a01 	mov.w	sl, #1
 80171ee:	e7e2      	b.n	80171b6 <_scanf_float+0x192>
 80171f0:	f1ba 0f02 	cmp.w	sl, #2
 80171f4:	d055      	beq.n	80172a2 <_scanf_float+0x27e>
 80171f6:	2d01      	cmp	r5, #1
 80171f8:	d002      	beq.n	8017200 <_scanf_float+0x1dc>
 80171fa:	2d04      	cmp	r5, #4
 80171fc:	f47f af44 	bne.w	8017088 <_scanf_float+0x64>
 8017200:	3501      	adds	r5, #1
 8017202:	b2ed      	uxtb	r5, r5
 8017204:	e7d7      	b.n	80171b6 <_scanf_float+0x192>
 8017206:	f1ba 0f01 	cmp.w	sl, #1
 801720a:	f47f af3d 	bne.w	8017088 <_scanf_float+0x64>
 801720e:	f04f 0a02 	mov.w	sl, #2
 8017212:	e7d0      	b.n	80171b6 <_scanf_float+0x192>
 8017214:	b97d      	cbnz	r5, 8017236 <_scanf_float+0x212>
 8017216:	f1b9 0f00 	cmp.w	r9, #0
 801721a:	f47f af38 	bne.w	801708e <_scanf_float+0x6a>
 801721e:	6822      	ldr	r2, [r4, #0]
 8017220:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017224:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017228:	f040 8101 	bne.w	801742e <_scanf_float+0x40a>
 801722c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017230:	6022      	str	r2, [r4, #0]
 8017232:	2501      	movs	r5, #1
 8017234:	e7bf      	b.n	80171b6 <_scanf_float+0x192>
 8017236:	2d03      	cmp	r5, #3
 8017238:	d0e2      	beq.n	8017200 <_scanf_float+0x1dc>
 801723a:	2d05      	cmp	r5, #5
 801723c:	e7de      	b.n	80171fc <_scanf_float+0x1d8>
 801723e:	2d02      	cmp	r5, #2
 8017240:	f47f af22 	bne.w	8017088 <_scanf_float+0x64>
 8017244:	2503      	movs	r5, #3
 8017246:	e7b6      	b.n	80171b6 <_scanf_float+0x192>
 8017248:	2d06      	cmp	r5, #6
 801724a:	f47f af1d 	bne.w	8017088 <_scanf_float+0x64>
 801724e:	2507      	movs	r5, #7
 8017250:	e7b1      	b.n	80171b6 <_scanf_float+0x192>
 8017252:	6822      	ldr	r2, [r4, #0]
 8017254:	0591      	lsls	r1, r2, #22
 8017256:	f57f af17 	bpl.w	8017088 <_scanf_float+0x64>
 801725a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801725e:	6022      	str	r2, [r4, #0]
 8017260:	f8cd 9008 	str.w	r9, [sp, #8]
 8017264:	e7a7      	b.n	80171b6 <_scanf_float+0x192>
 8017266:	6822      	ldr	r2, [r4, #0]
 8017268:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801726c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017270:	d006      	beq.n	8017280 <_scanf_float+0x25c>
 8017272:	0550      	lsls	r0, r2, #21
 8017274:	f57f af08 	bpl.w	8017088 <_scanf_float+0x64>
 8017278:	f1b9 0f00 	cmp.w	r9, #0
 801727c:	f000 80d7 	beq.w	801742e <_scanf_float+0x40a>
 8017280:	0591      	lsls	r1, r2, #22
 8017282:	bf58      	it	pl
 8017284:	9902      	ldrpl	r1, [sp, #8]
 8017286:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801728a:	bf58      	it	pl
 801728c:	eba9 0101 	subpl.w	r1, r9, r1
 8017290:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8017294:	bf58      	it	pl
 8017296:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801729a:	6022      	str	r2, [r4, #0]
 801729c:	f04f 0900 	mov.w	r9, #0
 80172a0:	e789      	b.n	80171b6 <_scanf_float+0x192>
 80172a2:	f04f 0a03 	mov.w	sl, #3
 80172a6:	e786      	b.n	80171b6 <_scanf_float+0x192>
 80172a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80172ac:	4639      	mov	r1, r7
 80172ae:	4640      	mov	r0, r8
 80172b0:	4798      	blx	r3
 80172b2:	2800      	cmp	r0, #0
 80172b4:	f43f aedb 	beq.w	801706e <_scanf_float+0x4a>
 80172b8:	e6e6      	b.n	8017088 <_scanf_float+0x64>
 80172ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80172be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80172c2:	463a      	mov	r2, r7
 80172c4:	4640      	mov	r0, r8
 80172c6:	4798      	blx	r3
 80172c8:	6923      	ldr	r3, [r4, #16]
 80172ca:	3b01      	subs	r3, #1
 80172cc:	6123      	str	r3, [r4, #16]
 80172ce:	e6e8      	b.n	80170a2 <_scanf_float+0x7e>
 80172d0:	1e6b      	subs	r3, r5, #1
 80172d2:	2b06      	cmp	r3, #6
 80172d4:	d824      	bhi.n	8017320 <_scanf_float+0x2fc>
 80172d6:	2d02      	cmp	r5, #2
 80172d8:	d836      	bhi.n	8017348 <_scanf_float+0x324>
 80172da:	9b01      	ldr	r3, [sp, #4]
 80172dc:	429e      	cmp	r6, r3
 80172de:	f67f aee4 	bls.w	80170aa <_scanf_float+0x86>
 80172e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80172e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80172ea:	463a      	mov	r2, r7
 80172ec:	4640      	mov	r0, r8
 80172ee:	4798      	blx	r3
 80172f0:	6923      	ldr	r3, [r4, #16]
 80172f2:	3b01      	subs	r3, #1
 80172f4:	6123      	str	r3, [r4, #16]
 80172f6:	e7f0      	b.n	80172da <_scanf_float+0x2b6>
 80172f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80172fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8017300:	463a      	mov	r2, r7
 8017302:	4640      	mov	r0, r8
 8017304:	4798      	blx	r3
 8017306:	6923      	ldr	r3, [r4, #16]
 8017308:	3b01      	subs	r3, #1
 801730a:	6123      	str	r3, [r4, #16]
 801730c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017310:	fa5f fa8a 	uxtb.w	sl, sl
 8017314:	f1ba 0f02 	cmp.w	sl, #2
 8017318:	d1ee      	bne.n	80172f8 <_scanf_float+0x2d4>
 801731a:	3d03      	subs	r5, #3
 801731c:	b2ed      	uxtb	r5, r5
 801731e:	1b76      	subs	r6, r6, r5
 8017320:	6823      	ldr	r3, [r4, #0]
 8017322:	05da      	lsls	r2, r3, #23
 8017324:	d530      	bpl.n	8017388 <_scanf_float+0x364>
 8017326:	055b      	lsls	r3, r3, #21
 8017328:	d511      	bpl.n	801734e <_scanf_float+0x32a>
 801732a:	9b01      	ldr	r3, [sp, #4]
 801732c:	429e      	cmp	r6, r3
 801732e:	f67f aebc 	bls.w	80170aa <_scanf_float+0x86>
 8017332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801733a:	463a      	mov	r2, r7
 801733c:	4640      	mov	r0, r8
 801733e:	4798      	blx	r3
 8017340:	6923      	ldr	r3, [r4, #16]
 8017342:	3b01      	subs	r3, #1
 8017344:	6123      	str	r3, [r4, #16]
 8017346:	e7f0      	b.n	801732a <_scanf_float+0x306>
 8017348:	46aa      	mov	sl, r5
 801734a:	46b3      	mov	fp, r6
 801734c:	e7de      	b.n	801730c <_scanf_float+0x2e8>
 801734e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017352:	6923      	ldr	r3, [r4, #16]
 8017354:	2965      	cmp	r1, #101	@ 0x65
 8017356:	f103 33ff 	add.w	r3, r3, #4294967295
 801735a:	f106 35ff 	add.w	r5, r6, #4294967295
 801735e:	6123      	str	r3, [r4, #16]
 8017360:	d00c      	beq.n	801737c <_scanf_float+0x358>
 8017362:	2945      	cmp	r1, #69	@ 0x45
 8017364:	d00a      	beq.n	801737c <_scanf_float+0x358>
 8017366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801736a:	463a      	mov	r2, r7
 801736c:	4640      	mov	r0, r8
 801736e:	4798      	blx	r3
 8017370:	6923      	ldr	r3, [r4, #16]
 8017372:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017376:	3b01      	subs	r3, #1
 8017378:	1eb5      	subs	r5, r6, #2
 801737a:	6123      	str	r3, [r4, #16]
 801737c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017380:	463a      	mov	r2, r7
 8017382:	4640      	mov	r0, r8
 8017384:	4798      	blx	r3
 8017386:	462e      	mov	r6, r5
 8017388:	6822      	ldr	r2, [r4, #0]
 801738a:	f012 0210 	ands.w	r2, r2, #16
 801738e:	d001      	beq.n	8017394 <_scanf_float+0x370>
 8017390:	2000      	movs	r0, #0
 8017392:	e68b      	b.n	80170ac <_scanf_float+0x88>
 8017394:	7032      	strb	r2, [r6, #0]
 8017396:	6823      	ldr	r3, [r4, #0]
 8017398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801739c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80173a0:	d11a      	bne.n	80173d8 <_scanf_float+0x3b4>
 80173a2:	9b02      	ldr	r3, [sp, #8]
 80173a4:	454b      	cmp	r3, r9
 80173a6:	eba3 0209 	sub.w	r2, r3, r9
 80173aa:	d121      	bne.n	80173f0 <_scanf_float+0x3cc>
 80173ac:	9901      	ldr	r1, [sp, #4]
 80173ae:	2200      	movs	r2, #0
 80173b0:	4640      	mov	r0, r8
 80173b2:	f7ff fd9f 	bl	8016ef4 <_strtod_r>
 80173b6:	9b03      	ldr	r3, [sp, #12]
 80173b8:	6821      	ldr	r1, [r4, #0]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	f011 0f02 	tst.w	r1, #2
 80173c0:	f103 0204 	add.w	r2, r3, #4
 80173c4:	d01f      	beq.n	8017406 <_scanf_float+0x3e2>
 80173c6:	9903      	ldr	r1, [sp, #12]
 80173c8:	600a      	str	r2, [r1, #0]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	ed83 0b00 	vstr	d0, [r3]
 80173d0:	68e3      	ldr	r3, [r4, #12]
 80173d2:	3301      	adds	r3, #1
 80173d4:	60e3      	str	r3, [r4, #12]
 80173d6:	e7db      	b.n	8017390 <_scanf_float+0x36c>
 80173d8:	9b04      	ldr	r3, [sp, #16]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d0e6      	beq.n	80173ac <_scanf_float+0x388>
 80173de:	9905      	ldr	r1, [sp, #20]
 80173e0:	230a      	movs	r3, #10
 80173e2:	3101      	adds	r1, #1
 80173e4:	4640      	mov	r0, r8
 80173e6:	f7ff fe11 	bl	801700c <_strtol_r>
 80173ea:	9b04      	ldr	r3, [sp, #16]
 80173ec:	9e05      	ldr	r6, [sp, #20]
 80173ee:	1ac2      	subs	r2, r0, r3
 80173f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80173f4:	429e      	cmp	r6, r3
 80173f6:	bf28      	it	cs
 80173f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80173fc:	490d      	ldr	r1, [pc, #52]	@ (8017434 <_scanf_float+0x410>)
 80173fe:	4630      	mov	r0, r6
 8017400:	f000 fa0e 	bl	8017820 <siprintf>
 8017404:	e7d2      	b.n	80173ac <_scanf_float+0x388>
 8017406:	f011 0f04 	tst.w	r1, #4
 801740a:	9903      	ldr	r1, [sp, #12]
 801740c:	600a      	str	r2, [r1, #0]
 801740e:	d1dc      	bne.n	80173ca <_scanf_float+0x3a6>
 8017410:	eeb4 0b40 	vcmp.f64	d0, d0
 8017414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017418:	681d      	ldr	r5, [r3, #0]
 801741a:	d705      	bvc.n	8017428 <_scanf_float+0x404>
 801741c:	4806      	ldr	r0, [pc, #24]	@ (8017438 <_scanf_float+0x414>)
 801741e:	f000 fca7 	bl	8017d70 <nanf>
 8017422:	ed85 0a00 	vstr	s0, [r5]
 8017426:	e7d3      	b.n	80173d0 <_scanf_float+0x3ac>
 8017428:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801742c:	e7f9      	b.n	8017422 <_scanf_float+0x3fe>
 801742e:	f04f 0900 	mov.w	r9, #0
 8017432:	e630      	b.n	8017096 <_scanf_float+0x72>
 8017434:	0801a471 	.word	0x0801a471
 8017438:	0801a52a 	.word	0x0801a52a

0801743c <__sflush_r>:
 801743c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017444:	0716      	lsls	r6, r2, #28
 8017446:	4605      	mov	r5, r0
 8017448:	460c      	mov	r4, r1
 801744a:	d454      	bmi.n	80174f6 <__sflush_r+0xba>
 801744c:	684b      	ldr	r3, [r1, #4]
 801744e:	2b00      	cmp	r3, #0
 8017450:	dc02      	bgt.n	8017458 <__sflush_r+0x1c>
 8017452:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017454:	2b00      	cmp	r3, #0
 8017456:	dd48      	ble.n	80174ea <__sflush_r+0xae>
 8017458:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801745a:	2e00      	cmp	r6, #0
 801745c:	d045      	beq.n	80174ea <__sflush_r+0xae>
 801745e:	2300      	movs	r3, #0
 8017460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017464:	682f      	ldr	r7, [r5, #0]
 8017466:	6a21      	ldr	r1, [r4, #32]
 8017468:	602b      	str	r3, [r5, #0]
 801746a:	d030      	beq.n	80174ce <__sflush_r+0x92>
 801746c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801746e:	89a3      	ldrh	r3, [r4, #12]
 8017470:	0759      	lsls	r1, r3, #29
 8017472:	d505      	bpl.n	8017480 <__sflush_r+0x44>
 8017474:	6863      	ldr	r3, [r4, #4]
 8017476:	1ad2      	subs	r2, r2, r3
 8017478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801747a:	b10b      	cbz	r3, 8017480 <__sflush_r+0x44>
 801747c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801747e:	1ad2      	subs	r2, r2, r3
 8017480:	2300      	movs	r3, #0
 8017482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017484:	6a21      	ldr	r1, [r4, #32]
 8017486:	4628      	mov	r0, r5
 8017488:	47b0      	blx	r6
 801748a:	1c43      	adds	r3, r0, #1
 801748c:	89a3      	ldrh	r3, [r4, #12]
 801748e:	d106      	bne.n	801749e <__sflush_r+0x62>
 8017490:	6829      	ldr	r1, [r5, #0]
 8017492:	291d      	cmp	r1, #29
 8017494:	d82b      	bhi.n	80174ee <__sflush_r+0xb2>
 8017496:	4a2a      	ldr	r2, [pc, #168]	@ (8017540 <__sflush_r+0x104>)
 8017498:	410a      	asrs	r2, r1
 801749a:	07d6      	lsls	r6, r2, #31
 801749c:	d427      	bmi.n	80174ee <__sflush_r+0xb2>
 801749e:	2200      	movs	r2, #0
 80174a0:	6062      	str	r2, [r4, #4]
 80174a2:	04d9      	lsls	r1, r3, #19
 80174a4:	6922      	ldr	r2, [r4, #16]
 80174a6:	6022      	str	r2, [r4, #0]
 80174a8:	d504      	bpl.n	80174b4 <__sflush_r+0x78>
 80174aa:	1c42      	adds	r2, r0, #1
 80174ac:	d101      	bne.n	80174b2 <__sflush_r+0x76>
 80174ae:	682b      	ldr	r3, [r5, #0]
 80174b0:	b903      	cbnz	r3, 80174b4 <__sflush_r+0x78>
 80174b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80174b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174b6:	602f      	str	r7, [r5, #0]
 80174b8:	b1b9      	cbz	r1, 80174ea <__sflush_r+0xae>
 80174ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174be:	4299      	cmp	r1, r3
 80174c0:	d002      	beq.n	80174c8 <__sflush_r+0x8c>
 80174c2:	4628      	mov	r0, r5
 80174c4:	f000 fc78 	bl	8017db8 <_free_r>
 80174c8:	2300      	movs	r3, #0
 80174ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80174cc:	e00d      	b.n	80174ea <__sflush_r+0xae>
 80174ce:	2301      	movs	r3, #1
 80174d0:	4628      	mov	r0, r5
 80174d2:	47b0      	blx	r6
 80174d4:	4602      	mov	r2, r0
 80174d6:	1c50      	adds	r0, r2, #1
 80174d8:	d1c9      	bne.n	801746e <__sflush_r+0x32>
 80174da:	682b      	ldr	r3, [r5, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d0c6      	beq.n	801746e <__sflush_r+0x32>
 80174e0:	2b1d      	cmp	r3, #29
 80174e2:	d001      	beq.n	80174e8 <__sflush_r+0xac>
 80174e4:	2b16      	cmp	r3, #22
 80174e6:	d11e      	bne.n	8017526 <__sflush_r+0xea>
 80174e8:	602f      	str	r7, [r5, #0]
 80174ea:	2000      	movs	r0, #0
 80174ec:	e022      	b.n	8017534 <__sflush_r+0xf8>
 80174ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174f2:	b21b      	sxth	r3, r3
 80174f4:	e01b      	b.n	801752e <__sflush_r+0xf2>
 80174f6:	690f      	ldr	r7, [r1, #16]
 80174f8:	2f00      	cmp	r7, #0
 80174fa:	d0f6      	beq.n	80174ea <__sflush_r+0xae>
 80174fc:	0793      	lsls	r3, r2, #30
 80174fe:	680e      	ldr	r6, [r1, #0]
 8017500:	bf08      	it	eq
 8017502:	694b      	ldreq	r3, [r1, #20]
 8017504:	600f      	str	r7, [r1, #0]
 8017506:	bf18      	it	ne
 8017508:	2300      	movne	r3, #0
 801750a:	eba6 0807 	sub.w	r8, r6, r7
 801750e:	608b      	str	r3, [r1, #8]
 8017510:	f1b8 0f00 	cmp.w	r8, #0
 8017514:	dde9      	ble.n	80174ea <__sflush_r+0xae>
 8017516:	6a21      	ldr	r1, [r4, #32]
 8017518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801751a:	4643      	mov	r3, r8
 801751c:	463a      	mov	r2, r7
 801751e:	4628      	mov	r0, r5
 8017520:	47b0      	blx	r6
 8017522:	2800      	cmp	r0, #0
 8017524:	dc08      	bgt.n	8017538 <__sflush_r+0xfc>
 8017526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801752a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801752e:	81a3      	strh	r3, [r4, #12]
 8017530:	f04f 30ff 	mov.w	r0, #4294967295
 8017534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017538:	4407      	add	r7, r0
 801753a:	eba8 0800 	sub.w	r8, r8, r0
 801753e:	e7e7      	b.n	8017510 <__sflush_r+0xd4>
 8017540:	dfbffffe 	.word	0xdfbffffe

08017544 <_fflush_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	690b      	ldr	r3, [r1, #16]
 8017548:	4605      	mov	r5, r0
 801754a:	460c      	mov	r4, r1
 801754c:	b913      	cbnz	r3, 8017554 <_fflush_r+0x10>
 801754e:	2500      	movs	r5, #0
 8017550:	4628      	mov	r0, r5
 8017552:	bd38      	pop	{r3, r4, r5, pc}
 8017554:	b118      	cbz	r0, 801755e <_fflush_r+0x1a>
 8017556:	6a03      	ldr	r3, [r0, #32]
 8017558:	b90b      	cbnz	r3, 801755e <_fflush_r+0x1a>
 801755a:	f000 f8bb 	bl	80176d4 <__sinit>
 801755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d0f3      	beq.n	801754e <_fflush_r+0xa>
 8017566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017568:	07d0      	lsls	r0, r2, #31
 801756a:	d404      	bmi.n	8017576 <_fflush_r+0x32>
 801756c:	0599      	lsls	r1, r3, #22
 801756e:	d402      	bmi.n	8017576 <_fflush_r+0x32>
 8017570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017572:	f000 fbe2 	bl	8017d3a <__retarget_lock_acquire_recursive>
 8017576:	4628      	mov	r0, r5
 8017578:	4621      	mov	r1, r4
 801757a:	f7ff ff5f 	bl	801743c <__sflush_r>
 801757e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017580:	07da      	lsls	r2, r3, #31
 8017582:	4605      	mov	r5, r0
 8017584:	d4e4      	bmi.n	8017550 <_fflush_r+0xc>
 8017586:	89a3      	ldrh	r3, [r4, #12]
 8017588:	059b      	lsls	r3, r3, #22
 801758a:	d4e1      	bmi.n	8017550 <_fflush_r+0xc>
 801758c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801758e:	f000 fbd5 	bl	8017d3c <__retarget_lock_release_recursive>
 8017592:	e7dd      	b.n	8017550 <_fflush_r+0xc>

08017594 <fflush>:
 8017594:	4601      	mov	r1, r0
 8017596:	b920      	cbnz	r0, 80175a2 <fflush+0xe>
 8017598:	4a04      	ldr	r2, [pc, #16]	@ (80175ac <fflush+0x18>)
 801759a:	4905      	ldr	r1, [pc, #20]	@ (80175b0 <fflush+0x1c>)
 801759c:	4805      	ldr	r0, [pc, #20]	@ (80175b4 <fflush+0x20>)
 801759e:	f000 b8b1 	b.w	8017704 <_fwalk_sglue>
 80175a2:	4b05      	ldr	r3, [pc, #20]	@ (80175b8 <fflush+0x24>)
 80175a4:	6818      	ldr	r0, [r3, #0]
 80175a6:	f7ff bfcd 	b.w	8017544 <_fflush_r>
 80175aa:	bf00      	nop
 80175ac:	24000108 	.word	0x24000108
 80175b0:	08017545 	.word	0x08017545
 80175b4:	24000284 	.word	0x24000284
 80175b8:	24000280 	.word	0x24000280

080175bc <std>:
 80175bc:	2300      	movs	r3, #0
 80175be:	b510      	push	{r4, lr}
 80175c0:	4604      	mov	r4, r0
 80175c2:	e9c0 3300 	strd	r3, r3, [r0]
 80175c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80175ca:	6083      	str	r3, [r0, #8]
 80175cc:	8181      	strh	r1, [r0, #12]
 80175ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80175d0:	81c2      	strh	r2, [r0, #14]
 80175d2:	6183      	str	r3, [r0, #24]
 80175d4:	4619      	mov	r1, r3
 80175d6:	2208      	movs	r2, #8
 80175d8:	305c      	adds	r0, #92	@ 0x5c
 80175da:	f000 fa45 	bl	8017a68 <memset>
 80175de:	4b0d      	ldr	r3, [pc, #52]	@ (8017614 <std+0x58>)
 80175e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80175e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017618 <std+0x5c>)
 80175e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80175e6:	4b0d      	ldr	r3, [pc, #52]	@ (801761c <std+0x60>)
 80175e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80175ea:	4b0d      	ldr	r3, [pc, #52]	@ (8017620 <std+0x64>)
 80175ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80175ee:	4b0d      	ldr	r3, [pc, #52]	@ (8017624 <std+0x68>)
 80175f0:	6224      	str	r4, [r4, #32]
 80175f2:	429c      	cmp	r4, r3
 80175f4:	d006      	beq.n	8017604 <std+0x48>
 80175f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80175fa:	4294      	cmp	r4, r2
 80175fc:	d002      	beq.n	8017604 <std+0x48>
 80175fe:	33d0      	adds	r3, #208	@ 0xd0
 8017600:	429c      	cmp	r4, r3
 8017602:	d105      	bne.n	8017610 <std+0x54>
 8017604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801760c:	f000 bb94 	b.w	8017d38 <__retarget_lock_init_recursive>
 8017610:	bd10      	pop	{r4, pc}
 8017612:	bf00      	nop
 8017614:	080178b5 	.word	0x080178b5
 8017618:	080178db 	.word	0x080178db
 801761c:	08017913 	.word	0x08017913
 8017620:	08017937 	.word	0x08017937
 8017624:	24077504 	.word	0x24077504

08017628 <stdio_exit_handler>:
 8017628:	4a02      	ldr	r2, [pc, #8]	@ (8017634 <stdio_exit_handler+0xc>)
 801762a:	4903      	ldr	r1, [pc, #12]	@ (8017638 <stdio_exit_handler+0x10>)
 801762c:	4803      	ldr	r0, [pc, #12]	@ (801763c <stdio_exit_handler+0x14>)
 801762e:	f000 b869 	b.w	8017704 <_fwalk_sglue>
 8017632:	bf00      	nop
 8017634:	24000108 	.word	0x24000108
 8017638:	08017545 	.word	0x08017545
 801763c:	24000284 	.word	0x24000284

08017640 <cleanup_stdio>:
 8017640:	6841      	ldr	r1, [r0, #4]
 8017642:	4b0c      	ldr	r3, [pc, #48]	@ (8017674 <cleanup_stdio+0x34>)
 8017644:	4299      	cmp	r1, r3
 8017646:	b510      	push	{r4, lr}
 8017648:	4604      	mov	r4, r0
 801764a:	d001      	beq.n	8017650 <cleanup_stdio+0x10>
 801764c:	f7ff ff7a 	bl	8017544 <_fflush_r>
 8017650:	68a1      	ldr	r1, [r4, #8]
 8017652:	4b09      	ldr	r3, [pc, #36]	@ (8017678 <cleanup_stdio+0x38>)
 8017654:	4299      	cmp	r1, r3
 8017656:	d002      	beq.n	801765e <cleanup_stdio+0x1e>
 8017658:	4620      	mov	r0, r4
 801765a:	f7ff ff73 	bl	8017544 <_fflush_r>
 801765e:	68e1      	ldr	r1, [r4, #12]
 8017660:	4b06      	ldr	r3, [pc, #24]	@ (801767c <cleanup_stdio+0x3c>)
 8017662:	4299      	cmp	r1, r3
 8017664:	d004      	beq.n	8017670 <cleanup_stdio+0x30>
 8017666:	4620      	mov	r0, r4
 8017668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801766c:	f7ff bf6a 	b.w	8017544 <_fflush_r>
 8017670:	bd10      	pop	{r4, pc}
 8017672:	bf00      	nop
 8017674:	24077504 	.word	0x24077504
 8017678:	2407756c 	.word	0x2407756c
 801767c:	240775d4 	.word	0x240775d4

08017680 <global_stdio_init.part.0>:
 8017680:	b510      	push	{r4, lr}
 8017682:	4b0b      	ldr	r3, [pc, #44]	@ (80176b0 <global_stdio_init.part.0+0x30>)
 8017684:	4c0b      	ldr	r4, [pc, #44]	@ (80176b4 <global_stdio_init.part.0+0x34>)
 8017686:	4a0c      	ldr	r2, [pc, #48]	@ (80176b8 <global_stdio_init.part.0+0x38>)
 8017688:	601a      	str	r2, [r3, #0]
 801768a:	4620      	mov	r0, r4
 801768c:	2200      	movs	r2, #0
 801768e:	2104      	movs	r1, #4
 8017690:	f7ff ff94 	bl	80175bc <std>
 8017694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017698:	2201      	movs	r2, #1
 801769a:	2109      	movs	r1, #9
 801769c:	f7ff ff8e 	bl	80175bc <std>
 80176a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80176a4:	2202      	movs	r2, #2
 80176a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176aa:	2112      	movs	r1, #18
 80176ac:	f7ff bf86 	b.w	80175bc <std>
 80176b0:	2407763c 	.word	0x2407763c
 80176b4:	24077504 	.word	0x24077504
 80176b8:	08017629 	.word	0x08017629

080176bc <__sfp_lock_acquire>:
 80176bc:	4801      	ldr	r0, [pc, #4]	@ (80176c4 <__sfp_lock_acquire+0x8>)
 80176be:	f000 bb3c 	b.w	8017d3a <__retarget_lock_acquire_recursive>
 80176c2:	bf00      	nop
 80176c4:	24077645 	.word	0x24077645

080176c8 <__sfp_lock_release>:
 80176c8:	4801      	ldr	r0, [pc, #4]	@ (80176d0 <__sfp_lock_release+0x8>)
 80176ca:	f000 bb37 	b.w	8017d3c <__retarget_lock_release_recursive>
 80176ce:	bf00      	nop
 80176d0:	24077645 	.word	0x24077645

080176d4 <__sinit>:
 80176d4:	b510      	push	{r4, lr}
 80176d6:	4604      	mov	r4, r0
 80176d8:	f7ff fff0 	bl	80176bc <__sfp_lock_acquire>
 80176dc:	6a23      	ldr	r3, [r4, #32]
 80176de:	b11b      	cbz	r3, 80176e8 <__sinit+0x14>
 80176e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176e4:	f7ff bff0 	b.w	80176c8 <__sfp_lock_release>
 80176e8:	4b04      	ldr	r3, [pc, #16]	@ (80176fc <__sinit+0x28>)
 80176ea:	6223      	str	r3, [r4, #32]
 80176ec:	4b04      	ldr	r3, [pc, #16]	@ (8017700 <__sinit+0x2c>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d1f5      	bne.n	80176e0 <__sinit+0xc>
 80176f4:	f7ff ffc4 	bl	8017680 <global_stdio_init.part.0>
 80176f8:	e7f2      	b.n	80176e0 <__sinit+0xc>
 80176fa:	bf00      	nop
 80176fc:	08017641 	.word	0x08017641
 8017700:	2407763c 	.word	0x2407763c

08017704 <_fwalk_sglue>:
 8017704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017708:	4607      	mov	r7, r0
 801770a:	4688      	mov	r8, r1
 801770c:	4614      	mov	r4, r2
 801770e:	2600      	movs	r6, #0
 8017710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017714:	f1b9 0901 	subs.w	r9, r9, #1
 8017718:	d505      	bpl.n	8017726 <_fwalk_sglue+0x22>
 801771a:	6824      	ldr	r4, [r4, #0]
 801771c:	2c00      	cmp	r4, #0
 801771e:	d1f7      	bne.n	8017710 <_fwalk_sglue+0xc>
 8017720:	4630      	mov	r0, r6
 8017722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017726:	89ab      	ldrh	r3, [r5, #12]
 8017728:	2b01      	cmp	r3, #1
 801772a:	d907      	bls.n	801773c <_fwalk_sglue+0x38>
 801772c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017730:	3301      	adds	r3, #1
 8017732:	d003      	beq.n	801773c <_fwalk_sglue+0x38>
 8017734:	4629      	mov	r1, r5
 8017736:	4638      	mov	r0, r7
 8017738:	47c0      	blx	r8
 801773a:	4306      	orrs	r6, r0
 801773c:	3568      	adds	r5, #104	@ 0x68
 801773e:	e7e9      	b.n	8017714 <_fwalk_sglue+0x10>

08017740 <iprintf>:
 8017740:	b40f      	push	{r0, r1, r2, r3}
 8017742:	b507      	push	{r0, r1, r2, lr}
 8017744:	4906      	ldr	r1, [pc, #24]	@ (8017760 <iprintf+0x20>)
 8017746:	ab04      	add	r3, sp, #16
 8017748:	6808      	ldr	r0, [r1, #0]
 801774a:	f853 2b04 	ldr.w	r2, [r3], #4
 801774e:	6881      	ldr	r1, [r0, #8]
 8017750:	9301      	str	r3, [sp, #4]
 8017752:	f001 fed1 	bl	80194f8 <_vfiprintf_r>
 8017756:	b003      	add	sp, #12
 8017758:	f85d eb04 	ldr.w	lr, [sp], #4
 801775c:	b004      	add	sp, #16
 801775e:	4770      	bx	lr
 8017760:	24000280 	.word	0x24000280

08017764 <_puts_r>:
 8017764:	6a03      	ldr	r3, [r0, #32]
 8017766:	b570      	push	{r4, r5, r6, lr}
 8017768:	6884      	ldr	r4, [r0, #8]
 801776a:	4605      	mov	r5, r0
 801776c:	460e      	mov	r6, r1
 801776e:	b90b      	cbnz	r3, 8017774 <_puts_r+0x10>
 8017770:	f7ff ffb0 	bl	80176d4 <__sinit>
 8017774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017776:	07db      	lsls	r3, r3, #31
 8017778:	d405      	bmi.n	8017786 <_puts_r+0x22>
 801777a:	89a3      	ldrh	r3, [r4, #12]
 801777c:	0598      	lsls	r0, r3, #22
 801777e:	d402      	bmi.n	8017786 <_puts_r+0x22>
 8017780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017782:	f000 fada 	bl	8017d3a <__retarget_lock_acquire_recursive>
 8017786:	89a3      	ldrh	r3, [r4, #12]
 8017788:	0719      	lsls	r1, r3, #28
 801778a:	d502      	bpl.n	8017792 <_puts_r+0x2e>
 801778c:	6923      	ldr	r3, [r4, #16]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d135      	bne.n	80177fe <_puts_r+0x9a>
 8017792:	4621      	mov	r1, r4
 8017794:	4628      	mov	r0, r5
 8017796:	f000 f911 	bl	80179bc <__swsetup_r>
 801779a:	b380      	cbz	r0, 80177fe <_puts_r+0x9a>
 801779c:	f04f 35ff 	mov.w	r5, #4294967295
 80177a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177a2:	07da      	lsls	r2, r3, #31
 80177a4:	d405      	bmi.n	80177b2 <_puts_r+0x4e>
 80177a6:	89a3      	ldrh	r3, [r4, #12]
 80177a8:	059b      	lsls	r3, r3, #22
 80177aa:	d402      	bmi.n	80177b2 <_puts_r+0x4e>
 80177ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177ae:	f000 fac5 	bl	8017d3c <__retarget_lock_release_recursive>
 80177b2:	4628      	mov	r0, r5
 80177b4:	bd70      	pop	{r4, r5, r6, pc}
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	da04      	bge.n	80177c4 <_puts_r+0x60>
 80177ba:	69a2      	ldr	r2, [r4, #24]
 80177bc:	429a      	cmp	r2, r3
 80177be:	dc17      	bgt.n	80177f0 <_puts_r+0x8c>
 80177c0:	290a      	cmp	r1, #10
 80177c2:	d015      	beq.n	80177f0 <_puts_r+0x8c>
 80177c4:	6823      	ldr	r3, [r4, #0]
 80177c6:	1c5a      	adds	r2, r3, #1
 80177c8:	6022      	str	r2, [r4, #0]
 80177ca:	7019      	strb	r1, [r3, #0]
 80177cc:	68a3      	ldr	r3, [r4, #8]
 80177ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80177d2:	3b01      	subs	r3, #1
 80177d4:	60a3      	str	r3, [r4, #8]
 80177d6:	2900      	cmp	r1, #0
 80177d8:	d1ed      	bne.n	80177b6 <_puts_r+0x52>
 80177da:	2b00      	cmp	r3, #0
 80177dc:	da11      	bge.n	8017802 <_puts_r+0x9e>
 80177de:	4622      	mov	r2, r4
 80177e0:	210a      	movs	r1, #10
 80177e2:	4628      	mov	r0, r5
 80177e4:	f000 f8ab 	bl	801793e <__swbuf_r>
 80177e8:	3001      	adds	r0, #1
 80177ea:	d0d7      	beq.n	801779c <_puts_r+0x38>
 80177ec:	250a      	movs	r5, #10
 80177ee:	e7d7      	b.n	80177a0 <_puts_r+0x3c>
 80177f0:	4622      	mov	r2, r4
 80177f2:	4628      	mov	r0, r5
 80177f4:	f000 f8a3 	bl	801793e <__swbuf_r>
 80177f8:	3001      	adds	r0, #1
 80177fa:	d1e7      	bne.n	80177cc <_puts_r+0x68>
 80177fc:	e7ce      	b.n	801779c <_puts_r+0x38>
 80177fe:	3e01      	subs	r6, #1
 8017800:	e7e4      	b.n	80177cc <_puts_r+0x68>
 8017802:	6823      	ldr	r3, [r4, #0]
 8017804:	1c5a      	adds	r2, r3, #1
 8017806:	6022      	str	r2, [r4, #0]
 8017808:	220a      	movs	r2, #10
 801780a:	701a      	strb	r2, [r3, #0]
 801780c:	e7ee      	b.n	80177ec <_puts_r+0x88>
	...

08017810 <puts>:
 8017810:	4b02      	ldr	r3, [pc, #8]	@ (801781c <puts+0xc>)
 8017812:	4601      	mov	r1, r0
 8017814:	6818      	ldr	r0, [r3, #0]
 8017816:	f7ff bfa5 	b.w	8017764 <_puts_r>
 801781a:	bf00      	nop
 801781c:	24000280 	.word	0x24000280

08017820 <siprintf>:
 8017820:	b40e      	push	{r1, r2, r3}
 8017822:	b500      	push	{lr}
 8017824:	b09c      	sub	sp, #112	@ 0x70
 8017826:	ab1d      	add	r3, sp, #116	@ 0x74
 8017828:	9002      	str	r0, [sp, #8]
 801782a:	9006      	str	r0, [sp, #24]
 801782c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017830:	4809      	ldr	r0, [pc, #36]	@ (8017858 <siprintf+0x38>)
 8017832:	9107      	str	r1, [sp, #28]
 8017834:	9104      	str	r1, [sp, #16]
 8017836:	4909      	ldr	r1, [pc, #36]	@ (801785c <siprintf+0x3c>)
 8017838:	f853 2b04 	ldr.w	r2, [r3], #4
 801783c:	9105      	str	r1, [sp, #20]
 801783e:	6800      	ldr	r0, [r0, #0]
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	a902      	add	r1, sp, #8
 8017844:	f001 fb66 	bl	8018f14 <_svfiprintf_r>
 8017848:	9b02      	ldr	r3, [sp, #8]
 801784a:	2200      	movs	r2, #0
 801784c:	701a      	strb	r2, [r3, #0]
 801784e:	b01c      	add	sp, #112	@ 0x70
 8017850:	f85d eb04 	ldr.w	lr, [sp], #4
 8017854:	b003      	add	sp, #12
 8017856:	4770      	bx	lr
 8017858:	24000280 	.word	0x24000280
 801785c:	ffff0208 	.word	0xffff0208

08017860 <siscanf>:
 8017860:	b40e      	push	{r1, r2, r3}
 8017862:	b530      	push	{r4, r5, lr}
 8017864:	b09c      	sub	sp, #112	@ 0x70
 8017866:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017868:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801786c:	f854 5b04 	ldr.w	r5, [r4], #4
 8017870:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017874:	9002      	str	r0, [sp, #8]
 8017876:	9006      	str	r0, [sp, #24]
 8017878:	f7e8 fd32 	bl	80002e0 <strlen>
 801787c:	4b0b      	ldr	r3, [pc, #44]	@ (80178ac <siscanf+0x4c>)
 801787e:	9003      	str	r0, [sp, #12]
 8017880:	9007      	str	r0, [sp, #28]
 8017882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017884:	480a      	ldr	r0, [pc, #40]	@ (80178b0 <siscanf+0x50>)
 8017886:	9401      	str	r4, [sp, #4]
 8017888:	2300      	movs	r3, #0
 801788a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801788c:	9314      	str	r3, [sp, #80]	@ 0x50
 801788e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017892:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017896:	462a      	mov	r2, r5
 8017898:	4623      	mov	r3, r4
 801789a:	a902      	add	r1, sp, #8
 801789c:	6800      	ldr	r0, [r0, #0]
 801789e:	f001 fc8d 	bl	80191bc <__ssvfiscanf_r>
 80178a2:	b01c      	add	sp, #112	@ 0x70
 80178a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178a8:	b003      	add	sp, #12
 80178aa:	4770      	bx	lr
 80178ac:	080178d7 	.word	0x080178d7
 80178b0:	24000280 	.word	0x24000280

080178b4 <__sread>:
 80178b4:	b510      	push	{r4, lr}
 80178b6:	460c      	mov	r4, r1
 80178b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178bc:	f000 f9de 	bl	8017c7c <_read_r>
 80178c0:	2800      	cmp	r0, #0
 80178c2:	bfab      	itete	ge
 80178c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80178c6:	89a3      	ldrhlt	r3, [r4, #12]
 80178c8:	181b      	addge	r3, r3, r0
 80178ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80178ce:	bfac      	ite	ge
 80178d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80178d2:	81a3      	strhlt	r3, [r4, #12]
 80178d4:	bd10      	pop	{r4, pc}

080178d6 <__seofread>:
 80178d6:	2000      	movs	r0, #0
 80178d8:	4770      	bx	lr

080178da <__swrite>:
 80178da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178de:	461f      	mov	r7, r3
 80178e0:	898b      	ldrh	r3, [r1, #12]
 80178e2:	05db      	lsls	r3, r3, #23
 80178e4:	4605      	mov	r5, r0
 80178e6:	460c      	mov	r4, r1
 80178e8:	4616      	mov	r6, r2
 80178ea:	d505      	bpl.n	80178f8 <__swrite+0x1e>
 80178ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f0:	2302      	movs	r3, #2
 80178f2:	2200      	movs	r2, #0
 80178f4:	f000 f9b0 	bl	8017c58 <_lseek_r>
 80178f8:	89a3      	ldrh	r3, [r4, #12]
 80178fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017902:	81a3      	strh	r3, [r4, #12]
 8017904:	4632      	mov	r2, r6
 8017906:	463b      	mov	r3, r7
 8017908:	4628      	mov	r0, r5
 801790a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801790e:	f000 b9d7 	b.w	8017cc0 <_write_r>

08017912 <__sseek>:
 8017912:	b510      	push	{r4, lr}
 8017914:	460c      	mov	r4, r1
 8017916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801791a:	f000 f99d 	bl	8017c58 <_lseek_r>
 801791e:	1c43      	adds	r3, r0, #1
 8017920:	89a3      	ldrh	r3, [r4, #12]
 8017922:	bf15      	itete	ne
 8017924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801792a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801792e:	81a3      	strheq	r3, [r4, #12]
 8017930:	bf18      	it	ne
 8017932:	81a3      	strhne	r3, [r4, #12]
 8017934:	bd10      	pop	{r4, pc}

08017936 <__sclose>:
 8017936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801793a:	f000 b927 	b.w	8017b8c <_close_r>

0801793e <__swbuf_r>:
 801793e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017940:	460e      	mov	r6, r1
 8017942:	4614      	mov	r4, r2
 8017944:	4605      	mov	r5, r0
 8017946:	b118      	cbz	r0, 8017950 <__swbuf_r+0x12>
 8017948:	6a03      	ldr	r3, [r0, #32]
 801794a:	b90b      	cbnz	r3, 8017950 <__swbuf_r+0x12>
 801794c:	f7ff fec2 	bl	80176d4 <__sinit>
 8017950:	69a3      	ldr	r3, [r4, #24]
 8017952:	60a3      	str	r3, [r4, #8]
 8017954:	89a3      	ldrh	r3, [r4, #12]
 8017956:	071a      	lsls	r2, r3, #28
 8017958:	d501      	bpl.n	801795e <__swbuf_r+0x20>
 801795a:	6923      	ldr	r3, [r4, #16]
 801795c:	b943      	cbnz	r3, 8017970 <__swbuf_r+0x32>
 801795e:	4621      	mov	r1, r4
 8017960:	4628      	mov	r0, r5
 8017962:	f000 f82b 	bl	80179bc <__swsetup_r>
 8017966:	b118      	cbz	r0, 8017970 <__swbuf_r+0x32>
 8017968:	f04f 37ff 	mov.w	r7, #4294967295
 801796c:	4638      	mov	r0, r7
 801796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017970:	6823      	ldr	r3, [r4, #0]
 8017972:	6922      	ldr	r2, [r4, #16]
 8017974:	1a98      	subs	r0, r3, r2
 8017976:	6963      	ldr	r3, [r4, #20]
 8017978:	b2f6      	uxtb	r6, r6
 801797a:	4283      	cmp	r3, r0
 801797c:	4637      	mov	r7, r6
 801797e:	dc05      	bgt.n	801798c <__swbuf_r+0x4e>
 8017980:	4621      	mov	r1, r4
 8017982:	4628      	mov	r0, r5
 8017984:	f7ff fdde 	bl	8017544 <_fflush_r>
 8017988:	2800      	cmp	r0, #0
 801798a:	d1ed      	bne.n	8017968 <__swbuf_r+0x2a>
 801798c:	68a3      	ldr	r3, [r4, #8]
 801798e:	3b01      	subs	r3, #1
 8017990:	60a3      	str	r3, [r4, #8]
 8017992:	6823      	ldr	r3, [r4, #0]
 8017994:	1c5a      	adds	r2, r3, #1
 8017996:	6022      	str	r2, [r4, #0]
 8017998:	701e      	strb	r6, [r3, #0]
 801799a:	6962      	ldr	r2, [r4, #20]
 801799c:	1c43      	adds	r3, r0, #1
 801799e:	429a      	cmp	r2, r3
 80179a0:	d004      	beq.n	80179ac <__swbuf_r+0x6e>
 80179a2:	89a3      	ldrh	r3, [r4, #12]
 80179a4:	07db      	lsls	r3, r3, #31
 80179a6:	d5e1      	bpl.n	801796c <__swbuf_r+0x2e>
 80179a8:	2e0a      	cmp	r6, #10
 80179aa:	d1df      	bne.n	801796c <__swbuf_r+0x2e>
 80179ac:	4621      	mov	r1, r4
 80179ae:	4628      	mov	r0, r5
 80179b0:	f7ff fdc8 	bl	8017544 <_fflush_r>
 80179b4:	2800      	cmp	r0, #0
 80179b6:	d0d9      	beq.n	801796c <__swbuf_r+0x2e>
 80179b8:	e7d6      	b.n	8017968 <__swbuf_r+0x2a>
	...

080179bc <__swsetup_r>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4b29      	ldr	r3, [pc, #164]	@ (8017a64 <__swsetup_r+0xa8>)
 80179c0:	4605      	mov	r5, r0
 80179c2:	6818      	ldr	r0, [r3, #0]
 80179c4:	460c      	mov	r4, r1
 80179c6:	b118      	cbz	r0, 80179d0 <__swsetup_r+0x14>
 80179c8:	6a03      	ldr	r3, [r0, #32]
 80179ca:	b90b      	cbnz	r3, 80179d0 <__swsetup_r+0x14>
 80179cc:	f7ff fe82 	bl	80176d4 <__sinit>
 80179d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d4:	0719      	lsls	r1, r3, #28
 80179d6:	d422      	bmi.n	8017a1e <__swsetup_r+0x62>
 80179d8:	06da      	lsls	r2, r3, #27
 80179da:	d407      	bmi.n	80179ec <__swsetup_r+0x30>
 80179dc:	2209      	movs	r2, #9
 80179de:	602a      	str	r2, [r5, #0]
 80179e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179e4:	81a3      	strh	r3, [r4, #12]
 80179e6:	f04f 30ff 	mov.w	r0, #4294967295
 80179ea:	e033      	b.n	8017a54 <__swsetup_r+0x98>
 80179ec:	0758      	lsls	r0, r3, #29
 80179ee:	d512      	bpl.n	8017a16 <__swsetup_r+0x5a>
 80179f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179f2:	b141      	cbz	r1, 8017a06 <__swsetup_r+0x4a>
 80179f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80179f8:	4299      	cmp	r1, r3
 80179fa:	d002      	beq.n	8017a02 <__swsetup_r+0x46>
 80179fc:	4628      	mov	r0, r5
 80179fe:	f000 f9db 	bl	8017db8 <_free_r>
 8017a02:	2300      	movs	r3, #0
 8017a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a06:	89a3      	ldrh	r3, [r4, #12]
 8017a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017a0c:	81a3      	strh	r3, [r4, #12]
 8017a0e:	2300      	movs	r3, #0
 8017a10:	6063      	str	r3, [r4, #4]
 8017a12:	6923      	ldr	r3, [r4, #16]
 8017a14:	6023      	str	r3, [r4, #0]
 8017a16:	89a3      	ldrh	r3, [r4, #12]
 8017a18:	f043 0308 	orr.w	r3, r3, #8
 8017a1c:	81a3      	strh	r3, [r4, #12]
 8017a1e:	6923      	ldr	r3, [r4, #16]
 8017a20:	b94b      	cbnz	r3, 8017a36 <__swsetup_r+0x7a>
 8017a22:	89a3      	ldrh	r3, [r4, #12]
 8017a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a2c:	d003      	beq.n	8017a36 <__swsetup_r+0x7a>
 8017a2e:	4621      	mov	r1, r4
 8017a30:	4628      	mov	r0, r5
 8017a32:	f002 f98d 	bl	8019d50 <__smakebuf_r>
 8017a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a3a:	f013 0201 	ands.w	r2, r3, #1
 8017a3e:	d00a      	beq.n	8017a56 <__swsetup_r+0x9a>
 8017a40:	2200      	movs	r2, #0
 8017a42:	60a2      	str	r2, [r4, #8]
 8017a44:	6962      	ldr	r2, [r4, #20]
 8017a46:	4252      	negs	r2, r2
 8017a48:	61a2      	str	r2, [r4, #24]
 8017a4a:	6922      	ldr	r2, [r4, #16]
 8017a4c:	b942      	cbnz	r2, 8017a60 <__swsetup_r+0xa4>
 8017a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017a52:	d1c5      	bne.n	80179e0 <__swsetup_r+0x24>
 8017a54:	bd38      	pop	{r3, r4, r5, pc}
 8017a56:	0799      	lsls	r1, r3, #30
 8017a58:	bf58      	it	pl
 8017a5a:	6962      	ldrpl	r2, [r4, #20]
 8017a5c:	60a2      	str	r2, [r4, #8]
 8017a5e:	e7f4      	b.n	8017a4a <__swsetup_r+0x8e>
 8017a60:	2000      	movs	r0, #0
 8017a62:	e7f7      	b.n	8017a54 <__swsetup_r+0x98>
 8017a64:	24000280 	.word	0x24000280

08017a68 <memset>:
 8017a68:	4402      	add	r2, r0
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	d100      	bne.n	8017a72 <memset+0xa>
 8017a70:	4770      	bx	lr
 8017a72:	f803 1b01 	strb.w	r1, [r3], #1
 8017a76:	e7f9      	b.n	8017a6c <memset+0x4>

08017a78 <strdup>:
 8017a78:	4b02      	ldr	r3, [pc, #8]	@ (8017a84 <strdup+0xc>)
 8017a7a:	4601      	mov	r1, r0
 8017a7c:	6818      	ldr	r0, [r3, #0]
 8017a7e:	f000 b803 	b.w	8017a88 <_strdup_r>
 8017a82:	bf00      	nop
 8017a84:	24000280 	.word	0x24000280

08017a88 <_strdup_r>:
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	4608      	mov	r0, r1
 8017a8e:	460d      	mov	r5, r1
 8017a90:	f7e8 fc26 	bl	80002e0 <strlen>
 8017a94:	1c46      	adds	r6, r0, #1
 8017a96:	4631      	mov	r1, r6
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f7fe fbef 	bl	801627c <_malloc_r>
 8017a9e:	4604      	mov	r4, r0
 8017aa0:	b118      	cbz	r0, 8017aaa <_strdup_r+0x22>
 8017aa2:	4632      	mov	r2, r6
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	f000 f94a 	bl	8017d3e <memcpy>
 8017aaa:	4620      	mov	r0, r4
 8017aac:	bd70      	pop	{r4, r5, r6, pc}

08017aae <strncmp>:
 8017aae:	b510      	push	{r4, lr}
 8017ab0:	b16a      	cbz	r2, 8017ace <strncmp+0x20>
 8017ab2:	3901      	subs	r1, #1
 8017ab4:	1884      	adds	r4, r0, r2
 8017ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017aba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d103      	bne.n	8017aca <strncmp+0x1c>
 8017ac2:	42a0      	cmp	r0, r4
 8017ac4:	d001      	beq.n	8017aca <strncmp+0x1c>
 8017ac6:	2a00      	cmp	r2, #0
 8017ac8:	d1f5      	bne.n	8017ab6 <strncmp+0x8>
 8017aca:	1ad0      	subs	r0, r2, r3
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	4610      	mov	r0, r2
 8017ad0:	e7fc      	b.n	8017acc <strncmp+0x1e>
	...

08017ad4 <strtok>:
 8017ad4:	4b16      	ldr	r3, [pc, #88]	@ (8017b30 <strtok+0x5c>)
 8017ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ada:	681f      	ldr	r7, [r3, #0]
 8017adc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8017ade:	4605      	mov	r5, r0
 8017ae0:	460e      	mov	r6, r1
 8017ae2:	b9ec      	cbnz	r4, 8017b20 <strtok+0x4c>
 8017ae4:	2050      	movs	r0, #80	@ 0x50
 8017ae6:	f7fe fb97 	bl	8016218 <malloc>
 8017aea:	4602      	mov	r2, r0
 8017aec:	6478      	str	r0, [r7, #68]	@ 0x44
 8017aee:	b920      	cbnz	r0, 8017afa <strtok+0x26>
 8017af0:	4b10      	ldr	r3, [pc, #64]	@ (8017b34 <strtok+0x60>)
 8017af2:	4811      	ldr	r0, [pc, #68]	@ (8017b38 <strtok+0x64>)
 8017af4:	215b      	movs	r1, #91	@ 0x5b
 8017af6:	f000 f941 	bl	8017d7c <__assert_func>
 8017afa:	e9c0 4400 	strd	r4, r4, [r0]
 8017afe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017b02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017b06:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8017b0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8017b0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8017b12:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8017b16:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8017b1a:	6184      	str	r4, [r0, #24]
 8017b1c:	7704      	strb	r4, [r0, #28]
 8017b1e:	6244      	str	r4, [r0, #36]	@ 0x24
 8017b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017b22:	4631      	mov	r1, r6
 8017b24:	4628      	mov	r0, r5
 8017b26:	2301      	movs	r3, #1
 8017b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b2c:	f000 b806 	b.w	8017b3c <__strtok_r>
 8017b30:	24000280 	.word	0x24000280
 8017b34:	0801a476 	.word	0x0801a476
 8017b38:	0801a48d 	.word	0x0801a48d

08017b3c <__strtok_r>:
 8017b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b3e:	4604      	mov	r4, r0
 8017b40:	b908      	cbnz	r0, 8017b46 <__strtok_r+0xa>
 8017b42:	6814      	ldr	r4, [r2, #0]
 8017b44:	b144      	cbz	r4, 8017b58 <__strtok_r+0x1c>
 8017b46:	4620      	mov	r0, r4
 8017b48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017b4c:	460f      	mov	r7, r1
 8017b4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017b52:	b91e      	cbnz	r6, 8017b5c <__strtok_r+0x20>
 8017b54:	b965      	cbnz	r5, 8017b70 <__strtok_r+0x34>
 8017b56:	6015      	str	r5, [r2, #0]
 8017b58:	2000      	movs	r0, #0
 8017b5a:	e005      	b.n	8017b68 <__strtok_r+0x2c>
 8017b5c:	42b5      	cmp	r5, r6
 8017b5e:	d1f6      	bne.n	8017b4e <__strtok_r+0x12>
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d1f0      	bne.n	8017b46 <__strtok_r+0xa>
 8017b64:	6014      	str	r4, [r2, #0]
 8017b66:	7003      	strb	r3, [r0, #0]
 8017b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b6a:	461c      	mov	r4, r3
 8017b6c:	e00c      	b.n	8017b88 <__strtok_r+0x4c>
 8017b6e:	b915      	cbnz	r5, 8017b76 <__strtok_r+0x3a>
 8017b70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017b74:	460e      	mov	r6, r1
 8017b76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017b7a:	42ab      	cmp	r3, r5
 8017b7c:	d1f7      	bne.n	8017b6e <__strtok_r+0x32>
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d0f3      	beq.n	8017b6a <__strtok_r+0x2e>
 8017b82:	2300      	movs	r3, #0
 8017b84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017b88:	6014      	str	r4, [r2, #0]
 8017b8a:	e7ed      	b.n	8017b68 <__strtok_r+0x2c>

08017b8c <_close_r>:
 8017b8c:	b538      	push	{r3, r4, r5, lr}
 8017b8e:	4d06      	ldr	r5, [pc, #24]	@ (8017ba8 <_close_r+0x1c>)
 8017b90:	2300      	movs	r3, #0
 8017b92:	4604      	mov	r4, r0
 8017b94:	4608      	mov	r0, r1
 8017b96:	602b      	str	r3, [r5, #0]
 8017b98:	f7ea fda0 	bl	80026dc <_close>
 8017b9c:	1c43      	adds	r3, r0, #1
 8017b9e:	d102      	bne.n	8017ba6 <_close_r+0x1a>
 8017ba0:	682b      	ldr	r3, [r5, #0]
 8017ba2:	b103      	cbz	r3, 8017ba6 <_close_r+0x1a>
 8017ba4:	6023      	str	r3, [r4, #0]
 8017ba6:	bd38      	pop	{r3, r4, r5, pc}
 8017ba8:	24077640 	.word	0x24077640

08017bac <_reclaim_reent>:
 8017bac:	4b29      	ldr	r3, [pc, #164]	@ (8017c54 <_reclaim_reent+0xa8>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	4283      	cmp	r3, r0
 8017bb2:	b570      	push	{r4, r5, r6, lr}
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	d04b      	beq.n	8017c50 <_reclaim_reent+0xa4>
 8017bb8:	69c3      	ldr	r3, [r0, #28]
 8017bba:	b1ab      	cbz	r3, 8017be8 <_reclaim_reent+0x3c>
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	b16b      	cbz	r3, 8017bdc <_reclaim_reent+0x30>
 8017bc0:	2500      	movs	r5, #0
 8017bc2:	69e3      	ldr	r3, [r4, #28]
 8017bc4:	68db      	ldr	r3, [r3, #12]
 8017bc6:	5959      	ldr	r1, [r3, r5]
 8017bc8:	2900      	cmp	r1, #0
 8017bca:	d13b      	bne.n	8017c44 <_reclaim_reent+0x98>
 8017bcc:	3504      	adds	r5, #4
 8017bce:	2d80      	cmp	r5, #128	@ 0x80
 8017bd0:	d1f7      	bne.n	8017bc2 <_reclaim_reent+0x16>
 8017bd2:	69e3      	ldr	r3, [r4, #28]
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	68d9      	ldr	r1, [r3, #12]
 8017bd8:	f000 f8ee 	bl	8017db8 <_free_r>
 8017bdc:	69e3      	ldr	r3, [r4, #28]
 8017bde:	6819      	ldr	r1, [r3, #0]
 8017be0:	b111      	cbz	r1, 8017be8 <_reclaim_reent+0x3c>
 8017be2:	4620      	mov	r0, r4
 8017be4:	f000 f8e8 	bl	8017db8 <_free_r>
 8017be8:	6961      	ldr	r1, [r4, #20]
 8017bea:	b111      	cbz	r1, 8017bf2 <_reclaim_reent+0x46>
 8017bec:	4620      	mov	r0, r4
 8017bee:	f000 f8e3 	bl	8017db8 <_free_r>
 8017bf2:	69e1      	ldr	r1, [r4, #28]
 8017bf4:	b111      	cbz	r1, 8017bfc <_reclaim_reent+0x50>
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	f000 f8de 	bl	8017db8 <_free_r>
 8017bfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017bfe:	b111      	cbz	r1, 8017c06 <_reclaim_reent+0x5a>
 8017c00:	4620      	mov	r0, r4
 8017c02:	f000 f8d9 	bl	8017db8 <_free_r>
 8017c06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c08:	b111      	cbz	r1, 8017c10 <_reclaim_reent+0x64>
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f000 f8d4 	bl	8017db8 <_free_r>
 8017c10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017c12:	b111      	cbz	r1, 8017c1a <_reclaim_reent+0x6e>
 8017c14:	4620      	mov	r0, r4
 8017c16:	f000 f8cf 	bl	8017db8 <_free_r>
 8017c1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017c1c:	b111      	cbz	r1, 8017c24 <_reclaim_reent+0x78>
 8017c1e:	4620      	mov	r0, r4
 8017c20:	f000 f8ca 	bl	8017db8 <_free_r>
 8017c24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017c26:	b111      	cbz	r1, 8017c2e <_reclaim_reent+0x82>
 8017c28:	4620      	mov	r0, r4
 8017c2a:	f000 f8c5 	bl	8017db8 <_free_r>
 8017c2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017c30:	b111      	cbz	r1, 8017c38 <_reclaim_reent+0x8c>
 8017c32:	4620      	mov	r0, r4
 8017c34:	f000 f8c0 	bl	8017db8 <_free_r>
 8017c38:	6a23      	ldr	r3, [r4, #32]
 8017c3a:	b14b      	cbz	r3, 8017c50 <_reclaim_reent+0xa4>
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c42:	4718      	bx	r3
 8017c44:	680e      	ldr	r6, [r1, #0]
 8017c46:	4620      	mov	r0, r4
 8017c48:	f000 f8b6 	bl	8017db8 <_free_r>
 8017c4c:	4631      	mov	r1, r6
 8017c4e:	e7bb      	b.n	8017bc8 <_reclaim_reent+0x1c>
 8017c50:	bd70      	pop	{r4, r5, r6, pc}
 8017c52:	bf00      	nop
 8017c54:	24000280 	.word	0x24000280

08017c58 <_lseek_r>:
 8017c58:	b538      	push	{r3, r4, r5, lr}
 8017c5a:	4d07      	ldr	r5, [pc, #28]	@ (8017c78 <_lseek_r+0x20>)
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	4608      	mov	r0, r1
 8017c60:	4611      	mov	r1, r2
 8017c62:	2200      	movs	r2, #0
 8017c64:	602a      	str	r2, [r5, #0]
 8017c66:	461a      	mov	r2, r3
 8017c68:	f7ea fd5f 	bl	800272a <_lseek>
 8017c6c:	1c43      	adds	r3, r0, #1
 8017c6e:	d102      	bne.n	8017c76 <_lseek_r+0x1e>
 8017c70:	682b      	ldr	r3, [r5, #0]
 8017c72:	b103      	cbz	r3, 8017c76 <_lseek_r+0x1e>
 8017c74:	6023      	str	r3, [r4, #0]
 8017c76:	bd38      	pop	{r3, r4, r5, pc}
 8017c78:	24077640 	.word	0x24077640

08017c7c <_read_r>:
 8017c7c:	b538      	push	{r3, r4, r5, lr}
 8017c7e:	4d07      	ldr	r5, [pc, #28]	@ (8017c9c <_read_r+0x20>)
 8017c80:	4604      	mov	r4, r0
 8017c82:	4608      	mov	r0, r1
 8017c84:	4611      	mov	r1, r2
 8017c86:	2200      	movs	r2, #0
 8017c88:	602a      	str	r2, [r5, #0]
 8017c8a:	461a      	mov	r2, r3
 8017c8c:	f7ea fd09 	bl	80026a2 <_read>
 8017c90:	1c43      	adds	r3, r0, #1
 8017c92:	d102      	bne.n	8017c9a <_read_r+0x1e>
 8017c94:	682b      	ldr	r3, [r5, #0]
 8017c96:	b103      	cbz	r3, 8017c9a <_read_r+0x1e>
 8017c98:	6023      	str	r3, [r4, #0]
 8017c9a:	bd38      	pop	{r3, r4, r5, pc}
 8017c9c:	24077640 	.word	0x24077640

08017ca0 <_sbrk_r>:
 8017ca0:	b538      	push	{r3, r4, r5, lr}
 8017ca2:	4d06      	ldr	r5, [pc, #24]	@ (8017cbc <_sbrk_r+0x1c>)
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	4608      	mov	r0, r1
 8017caa:	602b      	str	r3, [r5, #0]
 8017cac:	f7ea fd4a 	bl	8002744 <_sbrk>
 8017cb0:	1c43      	adds	r3, r0, #1
 8017cb2:	d102      	bne.n	8017cba <_sbrk_r+0x1a>
 8017cb4:	682b      	ldr	r3, [r5, #0]
 8017cb6:	b103      	cbz	r3, 8017cba <_sbrk_r+0x1a>
 8017cb8:	6023      	str	r3, [r4, #0]
 8017cba:	bd38      	pop	{r3, r4, r5, pc}
 8017cbc:	24077640 	.word	0x24077640

08017cc0 <_write_r>:
 8017cc0:	b538      	push	{r3, r4, r5, lr}
 8017cc2:	4d07      	ldr	r5, [pc, #28]	@ (8017ce0 <_write_r+0x20>)
 8017cc4:	4604      	mov	r4, r0
 8017cc6:	4608      	mov	r0, r1
 8017cc8:	4611      	mov	r1, r2
 8017cca:	2200      	movs	r2, #0
 8017ccc:	602a      	str	r2, [r5, #0]
 8017cce:	461a      	mov	r2, r3
 8017cd0:	f7e9 f87a 	bl	8000dc8 <_write>
 8017cd4:	1c43      	adds	r3, r0, #1
 8017cd6:	d102      	bne.n	8017cde <_write_r+0x1e>
 8017cd8:	682b      	ldr	r3, [r5, #0]
 8017cda:	b103      	cbz	r3, 8017cde <_write_r+0x1e>
 8017cdc:	6023      	str	r3, [r4, #0]
 8017cde:	bd38      	pop	{r3, r4, r5, pc}
 8017ce0:	24077640 	.word	0x24077640

08017ce4 <__errno>:
 8017ce4:	4b01      	ldr	r3, [pc, #4]	@ (8017cec <__errno+0x8>)
 8017ce6:	6818      	ldr	r0, [r3, #0]
 8017ce8:	4770      	bx	lr
 8017cea:	bf00      	nop
 8017cec:	24000280 	.word	0x24000280

08017cf0 <__libc_init_array>:
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8017d28 <__libc_init_array+0x38>)
 8017cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8017d2c <__libc_init_array+0x3c>)
 8017cf6:	1b64      	subs	r4, r4, r5
 8017cf8:	10a4      	asrs	r4, r4, #2
 8017cfa:	2600      	movs	r6, #0
 8017cfc:	42a6      	cmp	r6, r4
 8017cfe:	d109      	bne.n	8017d14 <__libc_init_array+0x24>
 8017d00:	4d0b      	ldr	r5, [pc, #44]	@ (8017d30 <__libc_init_array+0x40>)
 8017d02:	4c0c      	ldr	r4, [pc, #48]	@ (8017d34 <__libc_init_array+0x44>)
 8017d04:	f002 fa16 	bl	801a134 <_init>
 8017d08:	1b64      	subs	r4, r4, r5
 8017d0a:	10a4      	asrs	r4, r4, #2
 8017d0c:	2600      	movs	r6, #0
 8017d0e:	42a6      	cmp	r6, r4
 8017d10:	d105      	bne.n	8017d1e <__libc_init_array+0x2e>
 8017d12:	bd70      	pop	{r4, r5, r6, pc}
 8017d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d18:	4798      	blx	r3
 8017d1a:	3601      	adds	r6, #1
 8017d1c:	e7ee      	b.n	8017cfc <__libc_init_array+0xc>
 8017d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d22:	4798      	blx	r3
 8017d24:	3601      	adds	r6, #1
 8017d26:	e7f2      	b.n	8017d0e <__libc_init_array+0x1e>
 8017d28:	0801a750 	.word	0x0801a750
 8017d2c:	0801a750 	.word	0x0801a750
 8017d30:	0801a750 	.word	0x0801a750
 8017d34:	0801a754 	.word	0x0801a754

08017d38 <__retarget_lock_init_recursive>:
 8017d38:	4770      	bx	lr

08017d3a <__retarget_lock_acquire_recursive>:
 8017d3a:	4770      	bx	lr

08017d3c <__retarget_lock_release_recursive>:
 8017d3c:	4770      	bx	lr

08017d3e <memcpy>:
 8017d3e:	440a      	add	r2, r1
 8017d40:	4291      	cmp	r1, r2
 8017d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8017d46:	d100      	bne.n	8017d4a <memcpy+0xc>
 8017d48:	4770      	bx	lr
 8017d4a:	b510      	push	{r4, lr}
 8017d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d54:	4291      	cmp	r1, r2
 8017d56:	d1f9      	bne.n	8017d4c <memcpy+0xe>
 8017d58:	bd10      	pop	{r4, pc}
 8017d5a:	0000      	movs	r0, r0
 8017d5c:	0000      	movs	r0, r0
	...

08017d60 <nan>:
 8017d60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017d68 <nan+0x8>
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	00000000 	.word	0x00000000
 8017d6c:	7ff80000 	.word	0x7ff80000

08017d70 <nanf>:
 8017d70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017d78 <nanf+0x8>
 8017d74:	4770      	bx	lr
 8017d76:	bf00      	nop
 8017d78:	7fc00000 	.word	0x7fc00000

08017d7c <__assert_func>:
 8017d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d7e:	4614      	mov	r4, r2
 8017d80:	461a      	mov	r2, r3
 8017d82:	4b09      	ldr	r3, [pc, #36]	@ (8017da8 <__assert_func+0x2c>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	4605      	mov	r5, r0
 8017d88:	68d8      	ldr	r0, [r3, #12]
 8017d8a:	b954      	cbnz	r4, 8017da2 <__assert_func+0x26>
 8017d8c:	4b07      	ldr	r3, [pc, #28]	@ (8017dac <__assert_func+0x30>)
 8017d8e:	461c      	mov	r4, r3
 8017d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d94:	9100      	str	r1, [sp, #0]
 8017d96:	462b      	mov	r3, r5
 8017d98:	4905      	ldr	r1, [pc, #20]	@ (8017db0 <__assert_func+0x34>)
 8017d9a:	f001 ffa1 	bl	8019ce0 <fiprintf>
 8017d9e:	f002 f8c3 	bl	8019f28 <abort>
 8017da2:	4b04      	ldr	r3, [pc, #16]	@ (8017db4 <__assert_func+0x38>)
 8017da4:	e7f4      	b.n	8017d90 <__assert_func+0x14>
 8017da6:	bf00      	nop
 8017da8:	24000280 	.word	0x24000280
 8017dac:	0801a52a 	.word	0x0801a52a
 8017db0:	0801a4fc 	.word	0x0801a4fc
 8017db4:	0801a4ef 	.word	0x0801a4ef

08017db8 <_free_r>:
 8017db8:	b538      	push	{r3, r4, r5, lr}
 8017dba:	4605      	mov	r5, r0
 8017dbc:	2900      	cmp	r1, #0
 8017dbe:	d041      	beq.n	8017e44 <_free_r+0x8c>
 8017dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dc4:	1f0c      	subs	r4, r1, #4
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	bfb8      	it	lt
 8017dca:	18e4      	addlt	r4, r4, r3
 8017dcc:	f7fe fad6 	bl	801637c <__malloc_lock>
 8017dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8017e48 <_free_r+0x90>)
 8017dd2:	6813      	ldr	r3, [r2, #0]
 8017dd4:	b933      	cbnz	r3, 8017de4 <_free_r+0x2c>
 8017dd6:	6063      	str	r3, [r4, #4]
 8017dd8:	6014      	str	r4, [r2, #0]
 8017dda:	4628      	mov	r0, r5
 8017ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017de0:	f7fe bad2 	b.w	8016388 <__malloc_unlock>
 8017de4:	42a3      	cmp	r3, r4
 8017de6:	d908      	bls.n	8017dfa <_free_r+0x42>
 8017de8:	6820      	ldr	r0, [r4, #0]
 8017dea:	1821      	adds	r1, r4, r0
 8017dec:	428b      	cmp	r3, r1
 8017dee:	bf01      	itttt	eq
 8017df0:	6819      	ldreq	r1, [r3, #0]
 8017df2:	685b      	ldreq	r3, [r3, #4]
 8017df4:	1809      	addeq	r1, r1, r0
 8017df6:	6021      	streq	r1, [r4, #0]
 8017df8:	e7ed      	b.n	8017dd6 <_free_r+0x1e>
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	b10b      	cbz	r3, 8017e04 <_free_r+0x4c>
 8017e00:	42a3      	cmp	r3, r4
 8017e02:	d9fa      	bls.n	8017dfa <_free_r+0x42>
 8017e04:	6811      	ldr	r1, [r2, #0]
 8017e06:	1850      	adds	r0, r2, r1
 8017e08:	42a0      	cmp	r0, r4
 8017e0a:	d10b      	bne.n	8017e24 <_free_r+0x6c>
 8017e0c:	6820      	ldr	r0, [r4, #0]
 8017e0e:	4401      	add	r1, r0
 8017e10:	1850      	adds	r0, r2, r1
 8017e12:	4283      	cmp	r3, r0
 8017e14:	6011      	str	r1, [r2, #0]
 8017e16:	d1e0      	bne.n	8017dda <_free_r+0x22>
 8017e18:	6818      	ldr	r0, [r3, #0]
 8017e1a:	685b      	ldr	r3, [r3, #4]
 8017e1c:	6053      	str	r3, [r2, #4]
 8017e1e:	4408      	add	r0, r1
 8017e20:	6010      	str	r0, [r2, #0]
 8017e22:	e7da      	b.n	8017dda <_free_r+0x22>
 8017e24:	d902      	bls.n	8017e2c <_free_r+0x74>
 8017e26:	230c      	movs	r3, #12
 8017e28:	602b      	str	r3, [r5, #0]
 8017e2a:	e7d6      	b.n	8017dda <_free_r+0x22>
 8017e2c:	6820      	ldr	r0, [r4, #0]
 8017e2e:	1821      	adds	r1, r4, r0
 8017e30:	428b      	cmp	r3, r1
 8017e32:	bf04      	itt	eq
 8017e34:	6819      	ldreq	r1, [r3, #0]
 8017e36:	685b      	ldreq	r3, [r3, #4]
 8017e38:	6063      	str	r3, [r4, #4]
 8017e3a:	bf04      	itt	eq
 8017e3c:	1809      	addeq	r1, r1, r0
 8017e3e:	6021      	streq	r1, [r4, #0]
 8017e40:	6054      	str	r4, [r2, #4]
 8017e42:	e7ca      	b.n	8017dda <_free_r+0x22>
 8017e44:	bd38      	pop	{r3, r4, r5, pc}
 8017e46:	bf00      	nop
 8017e48:	24077500 	.word	0x24077500

08017e4c <rshift>:
 8017e4c:	6903      	ldr	r3, [r0, #16]
 8017e4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017e52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017e5a:	f100 0414 	add.w	r4, r0, #20
 8017e5e:	dd45      	ble.n	8017eec <rshift+0xa0>
 8017e60:	f011 011f 	ands.w	r1, r1, #31
 8017e64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017e68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017e6c:	d10c      	bne.n	8017e88 <rshift+0x3c>
 8017e6e:	f100 0710 	add.w	r7, r0, #16
 8017e72:	4629      	mov	r1, r5
 8017e74:	42b1      	cmp	r1, r6
 8017e76:	d334      	bcc.n	8017ee2 <rshift+0x96>
 8017e78:	1a9b      	subs	r3, r3, r2
 8017e7a:	009b      	lsls	r3, r3, #2
 8017e7c:	1eea      	subs	r2, r5, #3
 8017e7e:	4296      	cmp	r6, r2
 8017e80:	bf38      	it	cc
 8017e82:	2300      	movcc	r3, #0
 8017e84:	4423      	add	r3, r4
 8017e86:	e015      	b.n	8017eb4 <rshift+0x68>
 8017e88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017e8c:	f1c1 0820 	rsb	r8, r1, #32
 8017e90:	40cf      	lsrs	r7, r1
 8017e92:	f105 0e04 	add.w	lr, r5, #4
 8017e96:	46a1      	mov	r9, r4
 8017e98:	4576      	cmp	r6, lr
 8017e9a:	46f4      	mov	ip, lr
 8017e9c:	d815      	bhi.n	8017eca <rshift+0x7e>
 8017e9e:	1a9a      	subs	r2, r3, r2
 8017ea0:	0092      	lsls	r2, r2, #2
 8017ea2:	3a04      	subs	r2, #4
 8017ea4:	3501      	adds	r5, #1
 8017ea6:	42ae      	cmp	r6, r5
 8017ea8:	bf38      	it	cc
 8017eaa:	2200      	movcc	r2, #0
 8017eac:	18a3      	adds	r3, r4, r2
 8017eae:	50a7      	str	r7, [r4, r2]
 8017eb0:	b107      	cbz	r7, 8017eb4 <rshift+0x68>
 8017eb2:	3304      	adds	r3, #4
 8017eb4:	1b1a      	subs	r2, r3, r4
 8017eb6:	42a3      	cmp	r3, r4
 8017eb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ebc:	bf08      	it	eq
 8017ebe:	2300      	moveq	r3, #0
 8017ec0:	6102      	str	r2, [r0, #16]
 8017ec2:	bf08      	it	eq
 8017ec4:	6143      	streq	r3, [r0, #20]
 8017ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017eca:	f8dc c000 	ldr.w	ip, [ip]
 8017ece:	fa0c fc08 	lsl.w	ip, ip, r8
 8017ed2:	ea4c 0707 	orr.w	r7, ip, r7
 8017ed6:	f849 7b04 	str.w	r7, [r9], #4
 8017eda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ede:	40cf      	lsrs	r7, r1
 8017ee0:	e7da      	b.n	8017e98 <rshift+0x4c>
 8017ee2:	f851 cb04 	ldr.w	ip, [r1], #4
 8017ee6:	f847 cf04 	str.w	ip, [r7, #4]!
 8017eea:	e7c3      	b.n	8017e74 <rshift+0x28>
 8017eec:	4623      	mov	r3, r4
 8017eee:	e7e1      	b.n	8017eb4 <rshift+0x68>

08017ef0 <__hexdig_fun>:
 8017ef0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017ef4:	2b09      	cmp	r3, #9
 8017ef6:	d802      	bhi.n	8017efe <__hexdig_fun+0xe>
 8017ef8:	3820      	subs	r0, #32
 8017efa:	b2c0      	uxtb	r0, r0
 8017efc:	4770      	bx	lr
 8017efe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017f02:	2b05      	cmp	r3, #5
 8017f04:	d801      	bhi.n	8017f0a <__hexdig_fun+0x1a>
 8017f06:	3847      	subs	r0, #71	@ 0x47
 8017f08:	e7f7      	b.n	8017efa <__hexdig_fun+0xa>
 8017f0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017f0e:	2b05      	cmp	r3, #5
 8017f10:	d801      	bhi.n	8017f16 <__hexdig_fun+0x26>
 8017f12:	3827      	subs	r0, #39	@ 0x27
 8017f14:	e7f1      	b.n	8017efa <__hexdig_fun+0xa>
 8017f16:	2000      	movs	r0, #0
 8017f18:	4770      	bx	lr
	...

08017f1c <__gethex>:
 8017f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f20:	b085      	sub	sp, #20
 8017f22:	468a      	mov	sl, r1
 8017f24:	9302      	str	r3, [sp, #8]
 8017f26:	680b      	ldr	r3, [r1, #0]
 8017f28:	9001      	str	r0, [sp, #4]
 8017f2a:	4690      	mov	r8, r2
 8017f2c:	1c9c      	adds	r4, r3, #2
 8017f2e:	46a1      	mov	r9, r4
 8017f30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017f34:	2830      	cmp	r0, #48	@ 0x30
 8017f36:	d0fa      	beq.n	8017f2e <__gethex+0x12>
 8017f38:	eba9 0303 	sub.w	r3, r9, r3
 8017f3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017f40:	f7ff ffd6 	bl	8017ef0 <__hexdig_fun>
 8017f44:	4605      	mov	r5, r0
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d168      	bne.n	801801c <__gethex+0x100>
 8017f4a:	49a0      	ldr	r1, [pc, #640]	@ (80181cc <__gethex+0x2b0>)
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	4648      	mov	r0, r9
 8017f50:	f7ff fdad 	bl	8017aae <strncmp>
 8017f54:	4607      	mov	r7, r0
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d167      	bne.n	801802a <__gethex+0x10e>
 8017f5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017f5e:	4626      	mov	r6, r4
 8017f60:	f7ff ffc6 	bl	8017ef0 <__hexdig_fun>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d062      	beq.n	801802e <__gethex+0x112>
 8017f68:	4623      	mov	r3, r4
 8017f6a:	7818      	ldrb	r0, [r3, #0]
 8017f6c:	2830      	cmp	r0, #48	@ 0x30
 8017f6e:	4699      	mov	r9, r3
 8017f70:	f103 0301 	add.w	r3, r3, #1
 8017f74:	d0f9      	beq.n	8017f6a <__gethex+0x4e>
 8017f76:	f7ff ffbb 	bl	8017ef0 <__hexdig_fun>
 8017f7a:	fab0 f580 	clz	r5, r0
 8017f7e:	096d      	lsrs	r5, r5, #5
 8017f80:	f04f 0b01 	mov.w	fp, #1
 8017f84:	464a      	mov	r2, r9
 8017f86:	4616      	mov	r6, r2
 8017f88:	3201      	adds	r2, #1
 8017f8a:	7830      	ldrb	r0, [r6, #0]
 8017f8c:	f7ff ffb0 	bl	8017ef0 <__hexdig_fun>
 8017f90:	2800      	cmp	r0, #0
 8017f92:	d1f8      	bne.n	8017f86 <__gethex+0x6a>
 8017f94:	498d      	ldr	r1, [pc, #564]	@ (80181cc <__gethex+0x2b0>)
 8017f96:	2201      	movs	r2, #1
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f7ff fd88 	bl	8017aae <strncmp>
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	d13f      	bne.n	8018022 <__gethex+0x106>
 8017fa2:	b944      	cbnz	r4, 8017fb6 <__gethex+0x9a>
 8017fa4:	1c74      	adds	r4, r6, #1
 8017fa6:	4622      	mov	r2, r4
 8017fa8:	4616      	mov	r6, r2
 8017faa:	3201      	adds	r2, #1
 8017fac:	7830      	ldrb	r0, [r6, #0]
 8017fae:	f7ff ff9f 	bl	8017ef0 <__hexdig_fun>
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	d1f8      	bne.n	8017fa8 <__gethex+0x8c>
 8017fb6:	1ba4      	subs	r4, r4, r6
 8017fb8:	00a7      	lsls	r7, r4, #2
 8017fba:	7833      	ldrb	r3, [r6, #0]
 8017fbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017fc0:	2b50      	cmp	r3, #80	@ 0x50
 8017fc2:	d13e      	bne.n	8018042 <__gethex+0x126>
 8017fc4:	7873      	ldrb	r3, [r6, #1]
 8017fc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8017fc8:	d033      	beq.n	8018032 <__gethex+0x116>
 8017fca:	2b2d      	cmp	r3, #45	@ 0x2d
 8017fcc:	d034      	beq.n	8018038 <__gethex+0x11c>
 8017fce:	1c71      	adds	r1, r6, #1
 8017fd0:	2400      	movs	r4, #0
 8017fd2:	7808      	ldrb	r0, [r1, #0]
 8017fd4:	f7ff ff8c 	bl	8017ef0 <__hexdig_fun>
 8017fd8:	1e43      	subs	r3, r0, #1
 8017fda:	b2db      	uxtb	r3, r3
 8017fdc:	2b18      	cmp	r3, #24
 8017fde:	d830      	bhi.n	8018042 <__gethex+0x126>
 8017fe0:	f1a0 0210 	sub.w	r2, r0, #16
 8017fe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017fe8:	f7ff ff82 	bl	8017ef0 <__hexdig_fun>
 8017fec:	f100 3cff 	add.w	ip, r0, #4294967295
 8017ff0:	fa5f fc8c 	uxtb.w	ip, ip
 8017ff4:	f1bc 0f18 	cmp.w	ip, #24
 8017ff8:	f04f 030a 	mov.w	r3, #10
 8017ffc:	d91e      	bls.n	801803c <__gethex+0x120>
 8017ffe:	b104      	cbz	r4, 8018002 <__gethex+0xe6>
 8018000:	4252      	negs	r2, r2
 8018002:	4417      	add	r7, r2
 8018004:	f8ca 1000 	str.w	r1, [sl]
 8018008:	b1ed      	cbz	r5, 8018046 <__gethex+0x12a>
 801800a:	f1bb 0f00 	cmp.w	fp, #0
 801800e:	bf0c      	ite	eq
 8018010:	2506      	moveq	r5, #6
 8018012:	2500      	movne	r5, #0
 8018014:	4628      	mov	r0, r5
 8018016:	b005      	add	sp, #20
 8018018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801c:	2500      	movs	r5, #0
 801801e:	462c      	mov	r4, r5
 8018020:	e7b0      	b.n	8017f84 <__gethex+0x68>
 8018022:	2c00      	cmp	r4, #0
 8018024:	d1c7      	bne.n	8017fb6 <__gethex+0x9a>
 8018026:	4627      	mov	r7, r4
 8018028:	e7c7      	b.n	8017fba <__gethex+0x9e>
 801802a:	464e      	mov	r6, r9
 801802c:	462f      	mov	r7, r5
 801802e:	2501      	movs	r5, #1
 8018030:	e7c3      	b.n	8017fba <__gethex+0x9e>
 8018032:	2400      	movs	r4, #0
 8018034:	1cb1      	adds	r1, r6, #2
 8018036:	e7cc      	b.n	8017fd2 <__gethex+0xb6>
 8018038:	2401      	movs	r4, #1
 801803a:	e7fb      	b.n	8018034 <__gethex+0x118>
 801803c:	fb03 0002 	mla	r0, r3, r2, r0
 8018040:	e7ce      	b.n	8017fe0 <__gethex+0xc4>
 8018042:	4631      	mov	r1, r6
 8018044:	e7de      	b.n	8018004 <__gethex+0xe8>
 8018046:	eba6 0309 	sub.w	r3, r6, r9
 801804a:	3b01      	subs	r3, #1
 801804c:	4629      	mov	r1, r5
 801804e:	2b07      	cmp	r3, #7
 8018050:	dc0a      	bgt.n	8018068 <__gethex+0x14c>
 8018052:	9801      	ldr	r0, [sp, #4]
 8018054:	f000 fa46 	bl	80184e4 <_Balloc>
 8018058:	4604      	mov	r4, r0
 801805a:	b940      	cbnz	r0, 801806e <__gethex+0x152>
 801805c:	4b5c      	ldr	r3, [pc, #368]	@ (80181d0 <__gethex+0x2b4>)
 801805e:	4602      	mov	r2, r0
 8018060:	21e4      	movs	r1, #228	@ 0xe4
 8018062:	485c      	ldr	r0, [pc, #368]	@ (80181d4 <__gethex+0x2b8>)
 8018064:	f7ff fe8a 	bl	8017d7c <__assert_func>
 8018068:	3101      	adds	r1, #1
 801806a:	105b      	asrs	r3, r3, #1
 801806c:	e7ef      	b.n	801804e <__gethex+0x132>
 801806e:	f100 0a14 	add.w	sl, r0, #20
 8018072:	2300      	movs	r3, #0
 8018074:	4655      	mov	r5, sl
 8018076:	469b      	mov	fp, r3
 8018078:	45b1      	cmp	r9, r6
 801807a:	d337      	bcc.n	80180ec <__gethex+0x1d0>
 801807c:	f845 bb04 	str.w	fp, [r5], #4
 8018080:	eba5 050a 	sub.w	r5, r5, sl
 8018084:	10ad      	asrs	r5, r5, #2
 8018086:	6125      	str	r5, [r4, #16]
 8018088:	4658      	mov	r0, fp
 801808a:	f000 fb1d 	bl	80186c8 <__hi0bits>
 801808e:	016d      	lsls	r5, r5, #5
 8018090:	f8d8 6000 	ldr.w	r6, [r8]
 8018094:	1a2d      	subs	r5, r5, r0
 8018096:	42b5      	cmp	r5, r6
 8018098:	dd54      	ble.n	8018144 <__gethex+0x228>
 801809a:	1bad      	subs	r5, r5, r6
 801809c:	4629      	mov	r1, r5
 801809e:	4620      	mov	r0, r4
 80180a0:	f000 feae 	bl	8018e00 <__any_on>
 80180a4:	4681      	mov	r9, r0
 80180a6:	b178      	cbz	r0, 80180c8 <__gethex+0x1ac>
 80180a8:	1e6b      	subs	r3, r5, #1
 80180aa:	1159      	asrs	r1, r3, #5
 80180ac:	f003 021f 	and.w	r2, r3, #31
 80180b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80180b4:	f04f 0901 	mov.w	r9, #1
 80180b8:	fa09 f202 	lsl.w	r2, r9, r2
 80180bc:	420a      	tst	r2, r1
 80180be:	d003      	beq.n	80180c8 <__gethex+0x1ac>
 80180c0:	454b      	cmp	r3, r9
 80180c2:	dc36      	bgt.n	8018132 <__gethex+0x216>
 80180c4:	f04f 0902 	mov.w	r9, #2
 80180c8:	4629      	mov	r1, r5
 80180ca:	4620      	mov	r0, r4
 80180cc:	f7ff febe 	bl	8017e4c <rshift>
 80180d0:	442f      	add	r7, r5
 80180d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180d6:	42bb      	cmp	r3, r7
 80180d8:	da42      	bge.n	8018160 <__gethex+0x244>
 80180da:	9801      	ldr	r0, [sp, #4]
 80180dc:	4621      	mov	r1, r4
 80180de:	f000 fa41 	bl	8018564 <_Bfree>
 80180e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80180e4:	2300      	movs	r3, #0
 80180e6:	6013      	str	r3, [r2, #0]
 80180e8:	25a3      	movs	r5, #163	@ 0xa3
 80180ea:	e793      	b.n	8018014 <__gethex+0xf8>
 80180ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80180f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80180f2:	d012      	beq.n	801811a <__gethex+0x1fe>
 80180f4:	2b20      	cmp	r3, #32
 80180f6:	d104      	bne.n	8018102 <__gethex+0x1e6>
 80180f8:	f845 bb04 	str.w	fp, [r5], #4
 80180fc:	f04f 0b00 	mov.w	fp, #0
 8018100:	465b      	mov	r3, fp
 8018102:	7830      	ldrb	r0, [r6, #0]
 8018104:	9303      	str	r3, [sp, #12]
 8018106:	f7ff fef3 	bl	8017ef0 <__hexdig_fun>
 801810a:	9b03      	ldr	r3, [sp, #12]
 801810c:	f000 000f 	and.w	r0, r0, #15
 8018110:	4098      	lsls	r0, r3
 8018112:	ea4b 0b00 	orr.w	fp, fp, r0
 8018116:	3304      	adds	r3, #4
 8018118:	e7ae      	b.n	8018078 <__gethex+0x15c>
 801811a:	45b1      	cmp	r9, r6
 801811c:	d8ea      	bhi.n	80180f4 <__gethex+0x1d8>
 801811e:	492b      	ldr	r1, [pc, #172]	@ (80181cc <__gethex+0x2b0>)
 8018120:	9303      	str	r3, [sp, #12]
 8018122:	2201      	movs	r2, #1
 8018124:	4630      	mov	r0, r6
 8018126:	f7ff fcc2 	bl	8017aae <strncmp>
 801812a:	9b03      	ldr	r3, [sp, #12]
 801812c:	2800      	cmp	r0, #0
 801812e:	d1e1      	bne.n	80180f4 <__gethex+0x1d8>
 8018130:	e7a2      	b.n	8018078 <__gethex+0x15c>
 8018132:	1ea9      	subs	r1, r5, #2
 8018134:	4620      	mov	r0, r4
 8018136:	f000 fe63 	bl	8018e00 <__any_on>
 801813a:	2800      	cmp	r0, #0
 801813c:	d0c2      	beq.n	80180c4 <__gethex+0x1a8>
 801813e:	f04f 0903 	mov.w	r9, #3
 8018142:	e7c1      	b.n	80180c8 <__gethex+0x1ac>
 8018144:	da09      	bge.n	801815a <__gethex+0x23e>
 8018146:	1b75      	subs	r5, r6, r5
 8018148:	4621      	mov	r1, r4
 801814a:	9801      	ldr	r0, [sp, #4]
 801814c:	462a      	mov	r2, r5
 801814e:	f000 fc21 	bl	8018994 <__lshift>
 8018152:	1b7f      	subs	r7, r7, r5
 8018154:	4604      	mov	r4, r0
 8018156:	f100 0a14 	add.w	sl, r0, #20
 801815a:	f04f 0900 	mov.w	r9, #0
 801815e:	e7b8      	b.n	80180d2 <__gethex+0x1b6>
 8018160:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018164:	42bd      	cmp	r5, r7
 8018166:	dd6f      	ble.n	8018248 <__gethex+0x32c>
 8018168:	1bed      	subs	r5, r5, r7
 801816a:	42ae      	cmp	r6, r5
 801816c:	dc34      	bgt.n	80181d8 <__gethex+0x2bc>
 801816e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018172:	2b02      	cmp	r3, #2
 8018174:	d022      	beq.n	80181bc <__gethex+0x2a0>
 8018176:	2b03      	cmp	r3, #3
 8018178:	d024      	beq.n	80181c4 <__gethex+0x2a8>
 801817a:	2b01      	cmp	r3, #1
 801817c:	d115      	bne.n	80181aa <__gethex+0x28e>
 801817e:	42ae      	cmp	r6, r5
 8018180:	d113      	bne.n	80181aa <__gethex+0x28e>
 8018182:	2e01      	cmp	r6, #1
 8018184:	d10b      	bne.n	801819e <__gethex+0x282>
 8018186:	9a02      	ldr	r2, [sp, #8]
 8018188:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801818c:	6013      	str	r3, [r2, #0]
 801818e:	2301      	movs	r3, #1
 8018190:	6123      	str	r3, [r4, #16]
 8018192:	f8ca 3000 	str.w	r3, [sl]
 8018196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018198:	2562      	movs	r5, #98	@ 0x62
 801819a:	601c      	str	r4, [r3, #0]
 801819c:	e73a      	b.n	8018014 <__gethex+0xf8>
 801819e:	1e71      	subs	r1, r6, #1
 80181a0:	4620      	mov	r0, r4
 80181a2:	f000 fe2d 	bl	8018e00 <__any_on>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d1ed      	bne.n	8018186 <__gethex+0x26a>
 80181aa:	9801      	ldr	r0, [sp, #4]
 80181ac:	4621      	mov	r1, r4
 80181ae:	f000 f9d9 	bl	8018564 <_Bfree>
 80181b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181b4:	2300      	movs	r3, #0
 80181b6:	6013      	str	r3, [r2, #0]
 80181b8:	2550      	movs	r5, #80	@ 0x50
 80181ba:	e72b      	b.n	8018014 <__gethex+0xf8>
 80181bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d1f3      	bne.n	80181aa <__gethex+0x28e>
 80181c2:	e7e0      	b.n	8018186 <__gethex+0x26a>
 80181c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d1dd      	bne.n	8018186 <__gethex+0x26a>
 80181ca:	e7ee      	b.n	80181aa <__gethex+0x28e>
 80181cc:	0801a310 	.word	0x0801a310
 80181d0:	0801a52b 	.word	0x0801a52b
 80181d4:	0801a53c 	.word	0x0801a53c
 80181d8:	1e6f      	subs	r7, r5, #1
 80181da:	f1b9 0f00 	cmp.w	r9, #0
 80181de:	d130      	bne.n	8018242 <__gethex+0x326>
 80181e0:	b127      	cbz	r7, 80181ec <__gethex+0x2d0>
 80181e2:	4639      	mov	r1, r7
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fe0b 	bl	8018e00 <__any_on>
 80181ea:	4681      	mov	r9, r0
 80181ec:	117a      	asrs	r2, r7, #5
 80181ee:	2301      	movs	r3, #1
 80181f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80181f4:	f007 071f 	and.w	r7, r7, #31
 80181f8:	40bb      	lsls	r3, r7
 80181fa:	4213      	tst	r3, r2
 80181fc:	4629      	mov	r1, r5
 80181fe:	4620      	mov	r0, r4
 8018200:	bf18      	it	ne
 8018202:	f049 0902 	orrne.w	r9, r9, #2
 8018206:	f7ff fe21 	bl	8017e4c <rshift>
 801820a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801820e:	1b76      	subs	r6, r6, r5
 8018210:	2502      	movs	r5, #2
 8018212:	f1b9 0f00 	cmp.w	r9, #0
 8018216:	d047      	beq.n	80182a8 <__gethex+0x38c>
 8018218:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801821c:	2b02      	cmp	r3, #2
 801821e:	d015      	beq.n	801824c <__gethex+0x330>
 8018220:	2b03      	cmp	r3, #3
 8018222:	d017      	beq.n	8018254 <__gethex+0x338>
 8018224:	2b01      	cmp	r3, #1
 8018226:	d109      	bne.n	801823c <__gethex+0x320>
 8018228:	f019 0f02 	tst.w	r9, #2
 801822c:	d006      	beq.n	801823c <__gethex+0x320>
 801822e:	f8da 3000 	ldr.w	r3, [sl]
 8018232:	ea49 0903 	orr.w	r9, r9, r3
 8018236:	f019 0f01 	tst.w	r9, #1
 801823a:	d10e      	bne.n	801825a <__gethex+0x33e>
 801823c:	f045 0510 	orr.w	r5, r5, #16
 8018240:	e032      	b.n	80182a8 <__gethex+0x38c>
 8018242:	f04f 0901 	mov.w	r9, #1
 8018246:	e7d1      	b.n	80181ec <__gethex+0x2d0>
 8018248:	2501      	movs	r5, #1
 801824a:	e7e2      	b.n	8018212 <__gethex+0x2f6>
 801824c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801824e:	f1c3 0301 	rsb	r3, r3, #1
 8018252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018256:	2b00      	cmp	r3, #0
 8018258:	d0f0      	beq.n	801823c <__gethex+0x320>
 801825a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801825e:	f104 0314 	add.w	r3, r4, #20
 8018262:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018266:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801826a:	f04f 0c00 	mov.w	ip, #0
 801826e:	4618      	mov	r0, r3
 8018270:	f853 2b04 	ldr.w	r2, [r3], #4
 8018274:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018278:	d01b      	beq.n	80182b2 <__gethex+0x396>
 801827a:	3201      	adds	r2, #1
 801827c:	6002      	str	r2, [r0, #0]
 801827e:	2d02      	cmp	r5, #2
 8018280:	f104 0314 	add.w	r3, r4, #20
 8018284:	d13c      	bne.n	8018300 <__gethex+0x3e4>
 8018286:	f8d8 2000 	ldr.w	r2, [r8]
 801828a:	3a01      	subs	r2, #1
 801828c:	42b2      	cmp	r2, r6
 801828e:	d109      	bne.n	80182a4 <__gethex+0x388>
 8018290:	1171      	asrs	r1, r6, #5
 8018292:	2201      	movs	r2, #1
 8018294:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018298:	f006 061f 	and.w	r6, r6, #31
 801829c:	fa02 f606 	lsl.w	r6, r2, r6
 80182a0:	421e      	tst	r6, r3
 80182a2:	d13a      	bne.n	801831a <__gethex+0x3fe>
 80182a4:	f045 0520 	orr.w	r5, r5, #32
 80182a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182aa:	601c      	str	r4, [r3, #0]
 80182ac:	9b02      	ldr	r3, [sp, #8]
 80182ae:	601f      	str	r7, [r3, #0]
 80182b0:	e6b0      	b.n	8018014 <__gethex+0xf8>
 80182b2:	4299      	cmp	r1, r3
 80182b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80182b8:	d8d9      	bhi.n	801826e <__gethex+0x352>
 80182ba:	68a3      	ldr	r3, [r4, #8]
 80182bc:	459b      	cmp	fp, r3
 80182be:	db17      	blt.n	80182f0 <__gethex+0x3d4>
 80182c0:	6861      	ldr	r1, [r4, #4]
 80182c2:	9801      	ldr	r0, [sp, #4]
 80182c4:	3101      	adds	r1, #1
 80182c6:	f000 f90d 	bl	80184e4 <_Balloc>
 80182ca:	4681      	mov	r9, r0
 80182cc:	b918      	cbnz	r0, 80182d6 <__gethex+0x3ba>
 80182ce:	4b1a      	ldr	r3, [pc, #104]	@ (8018338 <__gethex+0x41c>)
 80182d0:	4602      	mov	r2, r0
 80182d2:	2184      	movs	r1, #132	@ 0x84
 80182d4:	e6c5      	b.n	8018062 <__gethex+0x146>
 80182d6:	6922      	ldr	r2, [r4, #16]
 80182d8:	3202      	adds	r2, #2
 80182da:	f104 010c 	add.w	r1, r4, #12
 80182de:	0092      	lsls	r2, r2, #2
 80182e0:	300c      	adds	r0, #12
 80182e2:	f7ff fd2c 	bl	8017d3e <memcpy>
 80182e6:	4621      	mov	r1, r4
 80182e8:	9801      	ldr	r0, [sp, #4]
 80182ea:	f000 f93b 	bl	8018564 <_Bfree>
 80182ee:	464c      	mov	r4, r9
 80182f0:	6923      	ldr	r3, [r4, #16]
 80182f2:	1c5a      	adds	r2, r3, #1
 80182f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182f8:	6122      	str	r2, [r4, #16]
 80182fa:	2201      	movs	r2, #1
 80182fc:	615a      	str	r2, [r3, #20]
 80182fe:	e7be      	b.n	801827e <__gethex+0x362>
 8018300:	6922      	ldr	r2, [r4, #16]
 8018302:	455a      	cmp	r2, fp
 8018304:	dd0b      	ble.n	801831e <__gethex+0x402>
 8018306:	2101      	movs	r1, #1
 8018308:	4620      	mov	r0, r4
 801830a:	f7ff fd9f 	bl	8017e4c <rshift>
 801830e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018312:	3701      	adds	r7, #1
 8018314:	42bb      	cmp	r3, r7
 8018316:	f6ff aee0 	blt.w	80180da <__gethex+0x1be>
 801831a:	2501      	movs	r5, #1
 801831c:	e7c2      	b.n	80182a4 <__gethex+0x388>
 801831e:	f016 061f 	ands.w	r6, r6, #31
 8018322:	d0fa      	beq.n	801831a <__gethex+0x3fe>
 8018324:	4453      	add	r3, sl
 8018326:	f1c6 0620 	rsb	r6, r6, #32
 801832a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801832e:	f000 f9cb 	bl	80186c8 <__hi0bits>
 8018332:	42b0      	cmp	r0, r6
 8018334:	dbe7      	blt.n	8018306 <__gethex+0x3ea>
 8018336:	e7f0      	b.n	801831a <__gethex+0x3fe>
 8018338:	0801a52b 	.word	0x0801a52b

0801833c <L_shift>:
 801833c:	f1c2 0208 	rsb	r2, r2, #8
 8018340:	0092      	lsls	r2, r2, #2
 8018342:	b570      	push	{r4, r5, r6, lr}
 8018344:	f1c2 0620 	rsb	r6, r2, #32
 8018348:	6843      	ldr	r3, [r0, #4]
 801834a:	6804      	ldr	r4, [r0, #0]
 801834c:	fa03 f506 	lsl.w	r5, r3, r6
 8018350:	432c      	orrs	r4, r5
 8018352:	40d3      	lsrs	r3, r2
 8018354:	6004      	str	r4, [r0, #0]
 8018356:	f840 3f04 	str.w	r3, [r0, #4]!
 801835a:	4288      	cmp	r0, r1
 801835c:	d3f4      	bcc.n	8018348 <L_shift+0xc>
 801835e:	bd70      	pop	{r4, r5, r6, pc}

08018360 <__match>:
 8018360:	b530      	push	{r4, r5, lr}
 8018362:	6803      	ldr	r3, [r0, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	f811 4b01 	ldrb.w	r4, [r1], #1
 801836a:	b914      	cbnz	r4, 8018372 <__match+0x12>
 801836c:	6003      	str	r3, [r0, #0]
 801836e:	2001      	movs	r0, #1
 8018370:	bd30      	pop	{r4, r5, pc}
 8018372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018376:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801837a:	2d19      	cmp	r5, #25
 801837c:	bf98      	it	ls
 801837e:	3220      	addls	r2, #32
 8018380:	42a2      	cmp	r2, r4
 8018382:	d0f0      	beq.n	8018366 <__match+0x6>
 8018384:	2000      	movs	r0, #0
 8018386:	e7f3      	b.n	8018370 <__match+0x10>

08018388 <__hexnan>:
 8018388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838c:	680b      	ldr	r3, [r1, #0]
 801838e:	6801      	ldr	r1, [r0, #0]
 8018390:	115e      	asrs	r6, r3, #5
 8018392:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018396:	f013 031f 	ands.w	r3, r3, #31
 801839a:	b087      	sub	sp, #28
 801839c:	bf18      	it	ne
 801839e:	3604      	addne	r6, #4
 80183a0:	2500      	movs	r5, #0
 80183a2:	1f37      	subs	r7, r6, #4
 80183a4:	4682      	mov	sl, r0
 80183a6:	4690      	mov	r8, r2
 80183a8:	9301      	str	r3, [sp, #4]
 80183aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80183ae:	46b9      	mov	r9, r7
 80183b0:	463c      	mov	r4, r7
 80183b2:	9502      	str	r5, [sp, #8]
 80183b4:	46ab      	mov	fp, r5
 80183b6:	784a      	ldrb	r2, [r1, #1]
 80183b8:	1c4b      	adds	r3, r1, #1
 80183ba:	9303      	str	r3, [sp, #12]
 80183bc:	b342      	cbz	r2, 8018410 <__hexnan+0x88>
 80183be:	4610      	mov	r0, r2
 80183c0:	9105      	str	r1, [sp, #20]
 80183c2:	9204      	str	r2, [sp, #16]
 80183c4:	f7ff fd94 	bl	8017ef0 <__hexdig_fun>
 80183c8:	2800      	cmp	r0, #0
 80183ca:	d151      	bne.n	8018470 <__hexnan+0xe8>
 80183cc:	9a04      	ldr	r2, [sp, #16]
 80183ce:	9905      	ldr	r1, [sp, #20]
 80183d0:	2a20      	cmp	r2, #32
 80183d2:	d818      	bhi.n	8018406 <__hexnan+0x7e>
 80183d4:	9b02      	ldr	r3, [sp, #8]
 80183d6:	459b      	cmp	fp, r3
 80183d8:	dd13      	ble.n	8018402 <__hexnan+0x7a>
 80183da:	454c      	cmp	r4, r9
 80183dc:	d206      	bcs.n	80183ec <__hexnan+0x64>
 80183de:	2d07      	cmp	r5, #7
 80183e0:	dc04      	bgt.n	80183ec <__hexnan+0x64>
 80183e2:	462a      	mov	r2, r5
 80183e4:	4649      	mov	r1, r9
 80183e6:	4620      	mov	r0, r4
 80183e8:	f7ff ffa8 	bl	801833c <L_shift>
 80183ec:	4544      	cmp	r4, r8
 80183ee:	d952      	bls.n	8018496 <__hexnan+0x10e>
 80183f0:	2300      	movs	r3, #0
 80183f2:	f1a4 0904 	sub.w	r9, r4, #4
 80183f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80183fa:	f8cd b008 	str.w	fp, [sp, #8]
 80183fe:	464c      	mov	r4, r9
 8018400:	461d      	mov	r5, r3
 8018402:	9903      	ldr	r1, [sp, #12]
 8018404:	e7d7      	b.n	80183b6 <__hexnan+0x2e>
 8018406:	2a29      	cmp	r2, #41	@ 0x29
 8018408:	d157      	bne.n	80184ba <__hexnan+0x132>
 801840a:	3102      	adds	r1, #2
 801840c:	f8ca 1000 	str.w	r1, [sl]
 8018410:	f1bb 0f00 	cmp.w	fp, #0
 8018414:	d051      	beq.n	80184ba <__hexnan+0x132>
 8018416:	454c      	cmp	r4, r9
 8018418:	d206      	bcs.n	8018428 <__hexnan+0xa0>
 801841a:	2d07      	cmp	r5, #7
 801841c:	dc04      	bgt.n	8018428 <__hexnan+0xa0>
 801841e:	462a      	mov	r2, r5
 8018420:	4649      	mov	r1, r9
 8018422:	4620      	mov	r0, r4
 8018424:	f7ff ff8a 	bl	801833c <L_shift>
 8018428:	4544      	cmp	r4, r8
 801842a:	d936      	bls.n	801849a <__hexnan+0x112>
 801842c:	f1a8 0204 	sub.w	r2, r8, #4
 8018430:	4623      	mov	r3, r4
 8018432:	f853 1b04 	ldr.w	r1, [r3], #4
 8018436:	f842 1f04 	str.w	r1, [r2, #4]!
 801843a:	429f      	cmp	r7, r3
 801843c:	d2f9      	bcs.n	8018432 <__hexnan+0xaa>
 801843e:	1b3b      	subs	r3, r7, r4
 8018440:	f023 0303 	bic.w	r3, r3, #3
 8018444:	3304      	adds	r3, #4
 8018446:	3401      	adds	r4, #1
 8018448:	3e03      	subs	r6, #3
 801844a:	42b4      	cmp	r4, r6
 801844c:	bf88      	it	hi
 801844e:	2304      	movhi	r3, #4
 8018450:	4443      	add	r3, r8
 8018452:	2200      	movs	r2, #0
 8018454:	f843 2b04 	str.w	r2, [r3], #4
 8018458:	429f      	cmp	r7, r3
 801845a:	d2fb      	bcs.n	8018454 <__hexnan+0xcc>
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	b91b      	cbnz	r3, 8018468 <__hexnan+0xe0>
 8018460:	4547      	cmp	r7, r8
 8018462:	d128      	bne.n	80184b6 <__hexnan+0x12e>
 8018464:	2301      	movs	r3, #1
 8018466:	603b      	str	r3, [r7, #0]
 8018468:	2005      	movs	r0, #5
 801846a:	b007      	add	sp, #28
 801846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018470:	3501      	adds	r5, #1
 8018472:	2d08      	cmp	r5, #8
 8018474:	f10b 0b01 	add.w	fp, fp, #1
 8018478:	dd06      	ble.n	8018488 <__hexnan+0x100>
 801847a:	4544      	cmp	r4, r8
 801847c:	d9c1      	bls.n	8018402 <__hexnan+0x7a>
 801847e:	2300      	movs	r3, #0
 8018480:	f844 3c04 	str.w	r3, [r4, #-4]
 8018484:	2501      	movs	r5, #1
 8018486:	3c04      	subs	r4, #4
 8018488:	6822      	ldr	r2, [r4, #0]
 801848a:	f000 000f 	and.w	r0, r0, #15
 801848e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018492:	6020      	str	r0, [r4, #0]
 8018494:	e7b5      	b.n	8018402 <__hexnan+0x7a>
 8018496:	2508      	movs	r5, #8
 8018498:	e7b3      	b.n	8018402 <__hexnan+0x7a>
 801849a:	9b01      	ldr	r3, [sp, #4]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d0dd      	beq.n	801845c <__hexnan+0xd4>
 80184a0:	f1c3 0320 	rsb	r3, r3, #32
 80184a4:	f04f 32ff 	mov.w	r2, #4294967295
 80184a8:	40da      	lsrs	r2, r3
 80184aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80184ae:	4013      	ands	r3, r2
 80184b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80184b4:	e7d2      	b.n	801845c <__hexnan+0xd4>
 80184b6:	3f04      	subs	r7, #4
 80184b8:	e7d0      	b.n	801845c <__hexnan+0xd4>
 80184ba:	2004      	movs	r0, #4
 80184bc:	e7d5      	b.n	801846a <__hexnan+0xe2>

080184be <__ascii_mbtowc>:
 80184be:	b082      	sub	sp, #8
 80184c0:	b901      	cbnz	r1, 80184c4 <__ascii_mbtowc+0x6>
 80184c2:	a901      	add	r1, sp, #4
 80184c4:	b142      	cbz	r2, 80184d8 <__ascii_mbtowc+0x1a>
 80184c6:	b14b      	cbz	r3, 80184dc <__ascii_mbtowc+0x1e>
 80184c8:	7813      	ldrb	r3, [r2, #0]
 80184ca:	600b      	str	r3, [r1, #0]
 80184cc:	7812      	ldrb	r2, [r2, #0]
 80184ce:	1e10      	subs	r0, r2, #0
 80184d0:	bf18      	it	ne
 80184d2:	2001      	movne	r0, #1
 80184d4:	b002      	add	sp, #8
 80184d6:	4770      	bx	lr
 80184d8:	4610      	mov	r0, r2
 80184da:	e7fb      	b.n	80184d4 <__ascii_mbtowc+0x16>
 80184dc:	f06f 0001 	mvn.w	r0, #1
 80184e0:	e7f8      	b.n	80184d4 <__ascii_mbtowc+0x16>
	...

080184e4 <_Balloc>:
 80184e4:	b570      	push	{r4, r5, r6, lr}
 80184e6:	69c6      	ldr	r6, [r0, #28]
 80184e8:	4604      	mov	r4, r0
 80184ea:	460d      	mov	r5, r1
 80184ec:	b976      	cbnz	r6, 801850c <_Balloc+0x28>
 80184ee:	2010      	movs	r0, #16
 80184f0:	f7fd fe92 	bl	8016218 <malloc>
 80184f4:	4602      	mov	r2, r0
 80184f6:	61e0      	str	r0, [r4, #28]
 80184f8:	b920      	cbnz	r0, 8018504 <_Balloc+0x20>
 80184fa:	4b18      	ldr	r3, [pc, #96]	@ (801855c <_Balloc+0x78>)
 80184fc:	4818      	ldr	r0, [pc, #96]	@ (8018560 <_Balloc+0x7c>)
 80184fe:	216b      	movs	r1, #107	@ 0x6b
 8018500:	f7ff fc3c 	bl	8017d7c <__assert_func>
 8018504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018508:	6006      	str	r6, [r0, #0]
 801850a:	60c6      	str	r6, [r0, #12]
 801850c:	69e6      	ldr	r6, [r4, #28]
 801850e:	68f3      	ldr	r3, [r6, #12]
 8018510:	b183      	cbz	r3, 8018534 <_Balloc+0x50>
 8018512:	69e3      	ldr	r3, [r4, #28]
 8018514:	68db      	ldr	r3, [r3, #12]
 8018516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801851a:	b9b8      	cbnz	r0, 801854c <_Balloc+0x68>
 801851c:	2101      	movs	r1, #1
 801851e:	fa01 f605 	lsl.w	r6, r1, r5
 8018522:	1d72      	adds	r2, r6, #5
 8018524:	0092      	lsls	r2, r2, #2
 8018526:	4620      	mov	r0, r4
 8018528:	f001 fd05 	bl	8019f36 <_calloc_r>
 801852c:	b160      	cbz	r0, 8018548 <_Balloc+0x64>
 801852e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018532:	e00e      	b.n	8018552 <_Balloc+0x6e>
 8018534:	2221      	movs	r2, #33	@ 0x21
 8018536:	2104      	movs	r1, #4
 8018538:	4620      	mov	r0, r4
 801853a:	f001 fcfc 	bl	8019f36 <_calloc_r>
 801853e:	69e3      	ldr	r3, [r4, #28]
 8018540:	60f0      	str	r0, [r6, #12]
 8018542:	68db      	ldr	r3, [r3, #12]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d1e4      	bne.n	8018512 <_Balloc+0x2e>
 8018548:	2000      	movs	r0, #0
 801854a:	bd70      	pop	{r4, r5, r6, pc}
 801854c:	6802      	ldr	r2, [r0, #0]
 801854e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018552:	2300      	movs	r3, #0
 8018554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018558:	e7f7      	b.n	801854a <_Balloc+0x66>
 801855a:	bf00      	nop
 801855c:	0801a476 	.word	0x0801a476
 8018560:	0801a59c 	.word	0x0801a59c

08018564 <_Bfree>:
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	69c6      	ldr	r6, [r0, #28]
 8018568:	4605      	mov	r5, r0
 801856a:	460c      	mov	r4, r1
 801856c:	b976      	cbnz	r6, 801858c <_Bfree+0x28>
 801856e:	2010      	movs	r0, #16
 8018570:	f7fd fe52 	bl	8016218 <malloc>
 8018574:	4602      	mov	r2, r0
 8018576:	61e8      	str	r0, [r5, #28]
 8018578:	b920      	cbnz	r0, 8018584 <_Bfree+0x20>
 801857a:	4b09      	ldr	r3, [pc, #36]	@ (80185a0 <_Bfree+0x3c>)
 801857c:	4809      	ldr	r0, [pc, #36]	@ (80185a4 <_Bfree+0x40>)
 801857e:	218f      	movs	r1, #143	@ 0x8f
 8018580:	f7ff fbfc 	bl	8017d7c <__assert_func>
 8018584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018588:	6006      	str	r6, [r0, #0]
 801858a:	60c6      	str	r6, [r0, #12]
 801858c:	b13c      	cbz	r4, 801859e <_Bfree+0x3a>
 801858e:	69eb      	ldr	r3, [r5, #28]
 8018590:	6862      	ldr	r2, [r4, #4]
 8018592:	68db      	ldr	r3, [r3, #12]
 8018594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018598:	6021      	str	r1, [r4, #0]
 801859a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801859e:	bd70      	pop	{r4, r5, r6, pc}
 80185a0:	0801a476 	.word	0x0801a476
 80185a4:	0801a59c 	.word	0x0801a59c

080185a8 <__multadd>:
 80185a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185ac:	690d      	ldr	r5, [r1, #16]
 80185ae:	4607      	mov	r7, r0
 80185b0:	460c      	mov	r4, r1
 80185b2:	461e      	mov	r6, r3
 80185b4:	f101 0c14 	add.w	ip, r1, #20
 80185b8:	2000      	movs	r0, #0
 80185ba:	f8dc 3000 	ldr.w	r3, [ip]
 80185be:	b299      	uxth	r1, r3
 80185c0:	fb02 6101 	mla	r1, r2, r1, r6
 80185c4:	0c1e      	lsrs	r6, r3, #16
 80185c6:	0c0b      	lsrs	r3, r1, #16
 80185c8:	fb02 3306 	mla	r3, r2, r6, r3
 80185cc:	b289      	uxth	r1, r1
 80185ce:	3001      	adds	r0, #1
 80185d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80185d4:	4285      	cmp	r5, r0
 80185d6:	f84c 1b04 	str.w	r1, [ip], #4
 80185da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80185de:	dcec      	bgt.n	80185ba <__multadd+0x12>
 80185e0:	b30e      	cbz	r6, 8018626 <__multadd+0x7e>
 80185e2:	68a3      	ldr	r3, [r4, #8]
 80185e4:	42ab      	cmp	r3, r5
 80185e6:	dc19      	bgt.n	801861c <__multadd+0x74>
 80185e8:	6861      	ldr	r1, [r4, #4]
 80185ea:	4638      	mov	r0, r7
 80185ec:	3101      	adds	r1, #1
 80185ee:	f7ff ff79 	bl	80184e4 <_Balloc>
 80185f2:	4680      	mov	r8, r0
 80185f4:	b928      	cbnz	r0, 8018602 <__multadd+0x5a>
 80185f6:	4602      	mov	r2, r0
 80185f8:	4b0c      	ldr	r3, [pc, #48]	@ (801862c <__multadd+0x84>)
 80185fa:	480d      	ldr	r0, [pc, #52]	@ (8018630 <__multadd+0x88>)
 80185fc:	21ba      	movs	r1, #186	@ 0xba
 80185fe:	f7ff fbbd 	bl	8017d7c <__assert_func>
 8018602:	6922      	ldr	r2, [r4, #16]
 8018604:	3202      	adds	r2, #2
 8018606:	f104 010c 	add.w	r1, r4, #12
 801860a:	0092      	lsls	r2, r2, #2
 801860c:	300c      	adds	r0, #12
 801860e:	f7ff fb96 	bl	8017d3e <memcpy>
 8018612:	4621      	mov	r1, r4
 8018614:	4638      	mov	r0, r7
 8018616:	f7ff ffa5 	bl	8018564 <_Bfree>
 801861a:	4644      	mov	r4, r8
 801861c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018620:	3501      	adds	r5, #1
 8018622:	615e      	str	r6, [r3, #20]
 8018624:	6125      	str	r5, [r4, #16]
 8018626:	4620      	mov	r0, r4
 8018628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801862c:	0801a52b 	.word	0x0801a52b
 8018630:	0801a59c 	.word	0x0801a59c

08018634 <__s2b>:
 8018634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018638:	460c      	mov	r4, r1
 801863a:	4615      	mov	r5, r2
 801863c:	461f      	mov	r7, r3
 801863e:	2209      	movs	r2, #9
 8018640:	3308      	adds	r3, #8
 8018642:	4606      	mov	r6, r0
 8018644:	fb93 f3f2 	sdiv	r3, r3, r2
 8018648:	2100      	movs	r1, #0
 801864a:	2201      	movs	r2, #1
 801864c:	429a      	cmp	r2, r3
 801864e:	db09      	blt.n	8018664 <__s2b+0x30>
 8018650:	4630      	mov	r0, r6
 8018652:	f7ff ff47 	bl	80184e4 <_Balloc>
 8018656:	b940      	cbnz	r0, 801866a <__s2b+0x36>
 8018658:	4602      	mov	r2, r0
 801865a:	4b19      	ldr	r3, [pc, #100]	@ (80186c0 <__s2b+0x8c>)
 801865c:	4819      	ldr	r0, [pc, #100]	@ (80186c4 <__s2b+0x90>)
 801865e:	21d3      	movs	r1, #211	@ 0xd3
 8018660:	f7ff fb8c 	bl	8017d7c <__assert_func>
 8018664:	0052      	lsls	r2, r2, #1
 8018666:	3101      	adds	r1, #1
 8018668:	e7f0      	b.n	801864c <__s2b+0x18>
 801866a:	9b08      	ldr	r3, [sp, #32]
 801866c:	6143      	str	r3, [r0, #20]
 801866e:	2d09      	cmp	r5, #9
 8018670:	f04f 0301 	mov.w	r3, #1
 8018674:	6103      	str	r3, [r0, #16]
 8018676:	dd16      	ble.n	80186a6 <__s2b+0x72>
 8018678:	f104 0909 	add.w	r9, r4, #9
 801867c:	46c8      	mov	r8, r9
 801867e:	442c      	add	r4, r5
 8018680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018684:	4601      	mov	r1, r0
 8018686:	3b30      	subs	r3, #48	@ 0x30
 8018688:	220a      	movs	r2, #10
 801868a:	4630      	mov	r0, r6
 801868c:	f7ff ff8c 	bl	80185a8 <__multadd>
 8018690:	45a0      	cmp	r8, r4
 8018692:	d1f5      	bne.n	8018680 <__s2b+0x4c>
 8018694:	f1a5 0408 	sub.w	r4, r5, #8
 8018698:	444c      	add	r4, r9
 801869a:	1b2d      	subs	r5, r5, r4
 801869c:	1963      	adds	r3, r4, r5
 801869e:	42bb      	cmp	r3, r7
 80186a0:	db04      	blt.n	80186ac <__s2b+0x78>
 80186a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186a6:	340a      	adds	r4, #10
 80186a8:	2509      	movs	r5, #9
 80186aa:	e7f6      	b.n	801869a <__s2b+0x66>
 80186ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80186b0:	4601      	mov	r1, r0
 80186b2:	3b30      	subs	r3, #48	@ 0x30
 80186b4:	220a      	movs	r2, #10
 80186b6:	4630      	mov	r0, r6
 80186b8:	f7ff ff76 	bl	80185a8 <__multadd>
 80186bc:	e7ee      	b.n	801869c <__s2b+0x68>
 80186be:	bf00      	nop
 80186c0:	0801a52b 	.word	0x0801a52b
 80186c4:	0801a59c 	.word	0x0801a59c

080186c8 <__hi0bits>:
 80186c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80186cc:	4603      	mov	r3, r0
 80186ce:	bf36      	itet	cc
 80186d0:	0403      	lslcc	r3, r0, #16
 80186d2:	2000      	movcs	r0, #0
 80186d4:	2010      	movcc	r0, #16
 80186d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80186da:	bf3c      	itt	cc
 80186dc:	021b      	lslcc	r3, r3, #8
 80186de:	3008      	addcc	r0, #8
 80186e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80186e4:	bf3c      	itt	cc
 80186e6:	011b      	lslcc	r3, r3, #4
 80186e8:	3004      	addcc	r0, #4
 80186ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80186ee:	bf3c      	itt	cc
 80186f0:	009b      	lslcc	r3, r3, #2
 80186f2:	3002      	addcc	r0, #2
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	db05      	blt.n	8018704 <__hi0bits+0x3c>
 80186f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80186fc:	f100 0001 	add.w	r0, r0, #1
 8018700:	bf08      	it	eq
 8018702:	2020      	moveq	r0, #32
 8018704:	4770      	bx	lr

08018706 <__lo0bits>:
 8018706:	6803      	ldr	r3, [r0, #0]
 8018708:	4602      	mov	r2, r0
 801870a:	f013 0007 	ands.w	r0, r3, #7
 801870e:	d00b      	beq.n	8018728 <__lo0bits+0x22>
 8018710:	07d9      	lsls	r1, r3, #31
 8018712:	d421      	bmi.n	8018758 <__lo0bits+0x52>
 8018714:	0798      	lsls	r0, r3, #30
 8018716:	bf49      	itett	mi
 8018718:	085b      	lsrmi	r3, r3, #1
 801871a:	089b      	lsrpl	r3, r3, #2
 801871c:	2001      	movmi	r0, #1
 801871e:	6013      	strmi	r3, [r2, #0]
 8018720:	bf5c      	itt	pl
 8018722:	6013      	strpl	r3, [r2, #0]
 8018724:	2002      	movpl	r0, #2
 8018726:	4770      	bx	lr
 8018728:	b299      	uxth	r1, r3
 801872a:	b909      	cbnz	r1, 8018730 <__lo0bits+0x2a>
 801872c:	0c1b      	lsrs	r3, r3, #16
 801872e:	2010      	movs	r0, #16
 8018730:	b2d9      	uxtb	r1, r3
 8018732:	b909      	cbnz	r1, 8018738 <__lo0bits+0x32>
 8018734:	3008      	adds	r0, #8
 8018736:	0a1b      	lsrs	r3, r3, #8
 8018738:	0719      	lsls	r1, r3, #28
 801873a:	bf04      	itt	eq
 801873c:	091b      	lsreq	r3, r3, #4
 801873e:	3004      	addeq	r0, #4
 8018740:	0799      	lsls	r1, r3, #30
 8018742:	bf04      	itt	eq
 8018744:	089b      	lsreq	r3, r3, #2
 8018746:	3002      	addeq	r0, #2
 8018748:	07d9      	lsls	r1, r3, #31
 801874a:	d403      	bmi.n	8018754 <__lo0bits+0x4e>
 801874c:	085b      	lsrs	r3, r3, #1
 801874e:	f100 0001 	add.w	r0, r0, #1
 8018752:	d003      	beq.n	801875c <__lo0bits+0x56>
 8018754:	6013      	str	r3, [r2, #0]
 8018756:	4770      	bx	lr
 8018758:	2000      	movs	r0, #0
 801875a:	4770      	bx	lr
 801875c:	2020      	movs	r0, #32
 801875e:	4770      	bx	lr

08018760 <__i2b>:
 8018760:	b510      	push	{r4, lr}
 8018762:	460c      	mov	r4, r1
 8018764:	2101      	movs	r1, #1
 8018766:	f7ff febd 	bl	80184e4 <_Balloc>
 801876a:	4602      	mov	r2, r0
 801876c:	b928      	cbnz	r0, 801877a <__i2b+0x1a>
 801876e:	4b05      	ldr	r3, [pc, #20]	@ (8018784 <__i2b+0x24>)
 8018770:	4805      	ldr	r0, [pc, #20]	@ (8018788 <__i2b+0x28>)
 8018772:	f240 1145 	movw	r1, #325	@ 0x145
 8018776:	f7ff fb01 	bl	8017d7c <__assert_func>
 801877a:	2301      	movs	r3, #1
 801877c:	6144      	str	r4, [r0, #20]
 801877e:	6103      	str	r3, [r0, #16]
 8018780:	bd10      	pop	{r4, pc}
 8018782:	bf00      	nop
 8018784:	0801a52b 	.word	0x0801a52b
 8018788:	0801a59c 	.word	0x0801a59c

0801878c <__multiply>:
 801878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018790:	4614      	mov	r4, r2
 8018792:	690a      	ldr	r2, [r1, #16]
 8018794:	6923      	ldr	r3, [r4, #16]
 8018796:	429a      	cmp	r2, r3
 8018798:	bfa8      	it	ge
 801879a:	4623      	movge	r3, r4
 801879c:	460f      	mov	r7, r1
 801879e:	bfa4      	itt	ge
 80187a0:	460c      	movge	r4, r1
 80187a2:	461f      	movge	r7, r3
 80187a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80187a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80187ac:	68a3      	ldr	r3, [r4, #8]
 80187ae:	6861      	ldr	r1, [r4, #4]
 80187b0:	eb0a 0609 	add.w	r6, sl, r9
 80187b4:	42b3      	cmp	r3, r6
 80187b6:	b085      	sub	sp, #20
 80187b8:	bfb8      	it	lt
 80187ba:	3101      	addlt	r1, #1
 80187bc:	f7ff fe92 	bl	80184e4 <_Balloc>
 80187c0:	b930      	cbnz	r0, 80187d0 <__multiply+0x44>
 80187c2:	4602      	mov	r2, r0
 80187c4:	4b44      	ldr	r3, [pc, #272]	@ (80188d8 <__multiply+0x14c>)
 80187c6:	4845      	ldr	r0, [pc, #276]	@ (80188dc <__multiply+0x150>)
 80187c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80187cc:	f7ff fad6 	bl	8017d7c <__assert_func>
 80187d0:	f100 0514 	add.w	r5, r0, #20
 80187d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80187d8:	462b      	mov	r3, r5
 80187da:	2200      	movs	r2, #0
 80187dc:	4543      	cmp	r3, r8
 80187de:	d321      	bcc.n	8018824 <__multiply+0x98>
 80187e0:	f107 0114 	add.w	r1, r7, #20
 80187e4:	f104 0214 	add.w	r2, r4, #20
 80187e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80187ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80187f0:	9302      	str	r3, [sp, #8]
 80187f2:	1b13      	subs	r3, r2, r4
 80187f4:	3b15      	subs	r3, #21
 80187f6:	f023 0303 	bic.w	r3, r3, #3
 80187fa:	3304      	adds	r3, #4
 80187fc:	f104 0715 	add.w	r7, r4, #21
 8018800:	42ba      	cmp	r2, r7
 8018802:	bf38      	it	cc
 8018804:	2304      	movcc	r3, #4
 8018806:	9301      	str	r3, [sp, #4]
 8018808:	9b02      	ldr	r3, [sp, #8]
 801880a:	9103      	str	r1, [sp, #12]
 801880c:	428b      	cmp	r3, r1
 801880e:	d80c      	bhi.n	801882a <__multiply+0x9e>
 8018810:	2e00      	cmp	r6, #0
 8018812:	dd03      	ble.n	801881c <__multiply+0x90>
 8018814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018818:	2b00      	cmp	r3, #0
 801881a:	d05b      	beq.n	80188d4 <__multiply+0x148>
 801881c:	6106      	str	r6, [r0, #16]
 801881e:	b005      	add	sp, #20
 8018820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018824:	f843 2b04 	str.w	r2, [r3], #4
 8018828:	e7d8      	b.n	80187dc <__multiply+0x50>
 801882a:	f8b1 a000 	ldrh.w	sl, [r1]
 801882e:	f1ba 0f00 	cmp.w	sl, #0
 8018832:	d024      	beq.n	801887e <__multiply+0xf2>
 8018834:	f104 0e14 	add.w	lr, r4, #20
 8018838:	46a9      	mov	r9, r5
 801883a:	f04f 0c00 	mov.w	ip, #0
 801883e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018842:	f8d9 3000 	ldr.w	r3, [r9]
 8018846:	fa1f fb87 	uxth.w	fp, r7
 801884a:	b29b      	uxth	r3, r3
 801884c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018850:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018854:	f8d9 7000 	ldr.w	r7, [r9]
 8018858:	4463      	add	r3, ip
 801885a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801885e:	fb0a c70b 	mla	r7, sl, fp, ip
 8018862:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018866:	b29b      	uxth	r3, r3
 8018868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801886c:	4572      	cmp	r2, lr
 801886e:	f849 3b04 	str.w	r3, [r9], #4
 8018872:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018876:	d8e2      	bhi.n	801883e <__multiply+0xb2>
 8018878:	9b01      	ldr	r3, [sp, #4]
 801887a:	f845 c003 	str.w	ip, [r5, r3]
 801887e:	9b03      	ldr	r3, [sp, #12]
 8018880:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018884:	3104      	adds	r1, #4
 8018886:	f1b9 0f00 	cmp.w	r9, #0
 801888a:	d021      	beq.n	80188d0 <__multiply+0x144>
 801888c:	682b      	ldr	r3, [r5, #0]
 801888e:	f104 0c14 	add.w	ip, r4, #20
 8018892:	46ae      	mov	lr, r5
 8018894:	f04f 0a00 	mov.w	sl, #0
 8018898:	f8bc b000 	ldrh.w	fp, [ip]
 801889c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80188a0:	fb09 770b 	mla	r7, r9, fp, r7
 80188a4:	4457      	add	r7, sl
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80188ac:	f84e 3b04 	str.w	r3, [lr], #4
 80188b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80188b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80188b8:	f8be 3000 	ldrh.w	r3, [lr]
 80188bc:	fb09 330a 	mla	r3, r9, sl, r3
 80188c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80188c4:	4562      	cmp	r2, ip
 80188c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80188ca:	d8e5      	bhi.n	8018898 <__multiply+0x10c>
 80188cc:	9f01      	ldr	r7, [sp, #4]
 80188ce:	51eb      	str	r3, [r5, r7]
 80188d0:	3504      	adds	r5, #4
 80188d2:	e799      	b.n	8018808 <__multiply+0x7c>
 80188d4:	3e01      	subs	r6, #1
 80188d6:	e79b      	b.n	8018810 <__multiply+0x84>
 80188d8:	0801a52b 	.word	0x0801a52b
 80188dc:	0801a59c 	.word	0x0801a59c

080188e0 <__pow5mult>:
 80188e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188e4:	4615      	mov	r5, r2
 80188e6:	f012 0203 	ands.w	r2, r2, #3
 80188ea:	4607      	mov	r7, r0
 80188ec:	460e      	mov	r6, r1
 80188ee:	d007      	beq.n	8018900 <__pow5mult+0x20>
 80188f0:	4c25      	ldr	r4, [pc, #148]	@ (8018988 <__pow5mult+0xa8>)
 80188f2:	3a01      	subs	r2, #1
 80188f4:	2300      	movs	r3, #0
 80188f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80188fa:	f7ff fe55 	bl	80185a8 <__multadd>
 80188fe:	4606      	mov	r6, r0
 8018900:	10ad      	asrs	r5, r5, #2
 8018902:	d03d      	beq.n	8018980 <__pow5mult+0xa0>
 8018904:	69fc      	ldr	r4, [r7, #28]
 8018906:	b97c      	cbnz	r4, 8018928 <__pow5mult+0x48>
 8018908:	2010      	movs	r0, #16
 801890a:	f7fd fc85 	bl	8016218 <malloc>
 801890e:	4602      	mov	r2, r0
 8018910:	61f8      	str	r0, [r7, #28]
 8018912:	b928      	cbnz	r0, 8018920 <__pow5mult+0x40>
 8018914:	4b1d      	ldr	r3, [pc, #116]	@ (801898c <__pow5mult+0xac>)
 8018916:	481e      	ldr	r0, [pc, #120]	@ (8018990 <__pow5mult+0xb0>)
 8018918:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801891c:	f7ff fa2e 	bl	8017d7c <__assert_func>
 8018920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018924:	6004      	str	r4, [r0, #0]
 8018926:	60c4      	str	r4, [r0, #12]
 8018928:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801892c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018930:	b94c      	cbnz	r4, 8018946 <__pow5mult+0x66>
 8018932:	f240 2171 	movw	r1, #625	@ 0x271
 8018936:	4638      	mov	r0, r7
 8018938:	f7ff ff12 	bl	8018760 <__i2b>
 801893c:	2300      	movs	r3, #0
 801893e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018942:	4604      	mov	r4, r0
 8018944:	6003      	str	r3, [r0, #0]
 8018946:	f04f 0900 	mov.w	r9, #0
 801894a:	07eb      	lsls	r3, r5, #31
 801894c:	d50a      	bpl.n	8018964 <__pow5mult+0x84>
 801894e:	4631      	mov	r1, r6
 8018950:	4622      	mov	r2, r4
 8018952:	4638      	mov	r0, r7
 8018954:	f7ff ff1a 	bl	801878c <__multiply>
 8018958:	4631      	mov	r1, r6
 801895a:	4680      	mov	r8, r0
 801895c:	4638      	mov	r0, r7
 801895e:	f7ff fe01 	bl	8018564 <_Bfree>
 8018962:	4646      	mov	r6, r8
 8018964:	106d      	asrs	r5, r5, #1
 8018966:	d00b      	beq.n	8018980 <__pow5mult+0xa0>
 8018968:	6820      	ldr	r0, [r4, #0]
 801896a:	b938      	cbnz	r0, 801897c <__pow5mult+0x9c>
 801896c:	4622      	mov	r2, r4
 801896e:	4621      	mov	r1, r4
 8018970:	4638      	mov	r0, r7
 8018972:	f7ff ff0b 	bl	801878c <__multiply>
 8018976:	6020      	str	r0, [r4, #0]
 8018978:	f8c0 9000 	str.w	r9, [r0]
 801897c:	4604      	mov	r4, r0
 801897e:	e7e4      	b.n	801894a <__pow5mult+0x6a>
 8018980:	4630      	mov	r0, r6
 8018982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018986:	bf00      	nop
 8018988:	0801a5f8 	.word	0x0801a5f8
 801898c:	0801a476 	.word	0x0801a476
 8018990:	0801a59c 	.word	0x0801a59c

08018994 <__lshift>:
 8018994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018998:	460c      	mov	r4, r1
 801899a:	6849      	ldr	r1, [r1, #4]
 801899c:	6923      	ldr	r3, [r4, #16]
 801899e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80189a2:	68a3      	ldr	r3, [r4, #8]
 80189a4:	4607      	mov	r7, r0
 80189a6:	4691      	mov	r9, r2
 80189a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80189ac:	f108 0601 	add.w	r6, r8, #1
 80189b0:	42b3      	cmp	r3, r6
 80189b2:	db0b      	blt.n	80189cc <__lshift+0x38>
 80189b4:	4638      	mov	r0, r7
 80189b6:	f7ff fd95 	bl	80184e4 <_Balloc>
 80189ba:	4605      	mov	r5, r0
 80189bc:	b948      	cbnz	r0, 80189d2 <__lshift+0x3e>
 80189be:	4602      	mov	r2, r0
 80189c0:	4b28      	ldr	r3, [pc, #160]	@ (8018a64 <__lshift+0xd0>)
 80189c2:	4829      	ldr	r0, [pc, #164]	@ (8018a68 <__lshift+0xd4>)
 80189c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80189c8:	f7ff f9d8 	bl	8017d7c <__assert_func>
 80189cc:	3101      	adds	r1, #1
 80189ce:	005b      	lsls	r3, r3, #1
 80189d0:	e7ee      	b.n	80189b0 <__lshift+0x1c>
 80189d2:	2300      	movs	r3, #0
 80189d4:	f100 0114 	add.w	r1, r0, #20
 80189d8:	f100 0210 	add.w	r2, r0, #16
 80189dc:	4618      	mov	r0, r3
 80189de:	4553      	cmp	r3, sl
 80189e0:	db33      	blt.n	8018a4a <__lshift+0xb6>
 80189e2:	6920      	ldr	r0, [r4, #16]
 80189e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80189e8:	f104 0314 	add.w	r3, r4, #20
 80189ec:	f019 091f 	ands.w	r9, r9, #31
 80189f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80189f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80189f8:	d02b      	beq.n	8018a52 <__lshift+0xbe>
 80189fa:	f1c9 0e20 	rsb	lr, r9, #32
 80189fe:	468a      	mov	sl, r1
 8018a00:	2200      	movs	r2, #0
 8018a02:	6818      	ldr	r0, [r3, #0]
 8018a04:	fa00 f009 	lsl.w	r0, r0, r9
 8018a08:	4310      	orrs	r0, r2
 8018a0a:	f84a 0b04 	str.w	r0, [sl], #4
 8018a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a12:	459c      	cmp	ip, r3
 8018a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8018a18:	d8f3      	bhi.n	8018a02 <__lshift+0x6e>
 8018a1a:	ebac 0304 	sub.w	r3, ip, r4
 8018a1e:	3b15      	subs	r3, #21
 8018a20:	f023 0303 	bic.w	r3, r3, #3
 8018a24:	3304      	adds	r3, #4
 8018a26:	f104 0015 	add.w	r0, r4, #21
 8018a2a:	4584      	cmp	ip, r0
 8018a2c:	bf38      	it	cc
 8018a2e:	2304      	movcc	r3, #4
 8018a30:	50ca      	str	r2, [r1, r3]
 8018a32:	b10a      	cbz	r2, 8018a38 <__lshift+0xa4>
 8018a34:	f108 0602 	add.w	r6, r8, #2
 8018a38:	3e01      	subs	r6, #1
 8018a3a:	4638      	mov	r0, r7
 8018a3c:	612e      	str	r6, [r5, #16]
 8018a3e:	4621      	mov	r1, r4
 8018a40:	f7ff fd90 	bl	8018564 <_Bfree>
 8018a44:	4628      	mov	r0, r5
 8018a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018a4e:	3301      	adds	r3, #1
 8018a50:	e7c5      	b.n	80189de <__lshift+0x4a>
 8018a52:	3904      	subs	r1, #4
 8018a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8018a5c:	459c      	cmp	ip, r3
 8018a5e:	d8f9      	bhi.n	8018a54 <__lshift+0xc0>
 8018a60:	e7ea      	b.n	8018a38 <__lshift+0xa4>
 8018a62:	bf00      	nop
 8018a64:	0801a52b 	.word	0x0801a52b
 8018a68:	0801a59c 	.word	0x0801a59c

08018a6c <__mcmp>:
 8018a6c:	690a      	ldr	r2, [r1, #16]
 8018a6e:	4603      	mov	r3, r0
 8018a70:	6900      	ldr	r0, [r0, #16]
 8018a72:	1a80      	subs	r0, r0, r2
 8018a74:	b530      	push	{r4, r5, lr}
 8018a76:	d10e      	bne.n	8018a96 <__mcmp+0x2a>
 8018a78:	3314      	adds	r3, #20
 8018a7a:	3114      	adds	r1, #20
 8018a7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018a80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018a84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018a88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018a8c:	4295      	cmp	r5, r2
 8018a8e:	d003      	beq.n	8018a98 <__mcmp+0x2c>
 8018a90:	d205      	bcs.n	8018a9e <__mcmp+0x32>
 8018a92:	f04f 30ff 	mov.w	r0, #4294967295
 8018a96:	bd30      	pop	{r4, r5, pc}
 8018a98:	42a3      	cmp	r3, r4
 8018a9a:	d3f3      	bcc.n	8018a84 <__mcmp+0x18>
 8018a9c:	e7fb      	b.n	8018a96 <__mcmp+0x2a>
 8018a9e:	2001      	movs	r0, #1
 8018aa0:	e7f9      	b.n	8018a96 <__mcmp+0x2a>
	...

08018aa4 <__mdiff>:
 8018aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aa8:	4689      	mov	r9, r1
 8018aaa:	4606      	mov	r6, r0
 8018aac:	4611      	mov	r1, r2
 8018aae:	4648      	mov	r0, r9
 8018ab0:	4614      	mov	r4, r2
 8018ab2:	f7ff ffdb 	bl	8018a6c <__mcmp>
 8018ab6:	1e05      	subs	r5, r0, #0
 8018ab8:	d112      	bne.n	8018ae0 <__mdiff+0x3c>
 8018aba:	4629      	mov	r1, r5
 8018abc:	4630      	mov	r0, r6
 8018abe:	f7ff fd11 	bl	80184e4 <_Balloc>
 8018ac2:	4602      	mov	r2, r0
 8018ac4:	b928      	cbnz	r0, 8018ad2 <__mdiff+0x2e>
 8018ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8018bc4 <__mdiff+0x120>)
 8018ac8:	f240 2137 	movw	r1, #567	@ 0x237
 8018acc:	483e      	ldr	r0, [pc, #248]	@ (8018bc8 <__mdiff+0x124>)
 8018ace:	f7ff f955 	bl	8017d7c <__assert_func>
 8018ad2:	2301      	movs	r3, #1
 8018ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ad8:	4610      	mov	r0, r2
 8018ada:	b003      	add	sp, #12
 8018adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae0:	bfbc      	itt	lt
 8018ae2:	464b      	movlt	r3, r9
 8018ae4:	46a1      	movlt	r9, r4
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018aec:	bfba      	itte	lt
 8018aee:	461c      	movlt	r4, r3
 8018af0:	2501      	movlt	r5, #1
 8018af2:	2500      	movge	r5, #0
 8018af4:	f7ff fcf6 	bl	80184e4 <_Balloc>
 8018af8:	4602      	mov	r2, r0
 8018afa:	b918      	cbnz	r0, 8018b04 <__mdiff+0x60>
 8018afc:	4b31      	ldr	r3, [pc, #196]	@ (8018bc4 <__mdiff+0x120>)
 8018afe:	f240 2145 	movw	r1, #581	@ 0x245
 8018b02:	e7e3      	b.n	8018acc <__mdiff+0x28>
 8018b04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018b08:	6926      	ldr	r6, [r4, #16]
 8018b0a:	60c5      	str	r5, [r0, #12]
 8018b0c:	f109 0310 	add.w	r3, r9, #16
 8018b10:	f109 0514 	add.w	r5, r9, #20
 8018b14:	f104 0e14 	add.w	lr, r4, #20
 8018b18:	f100 0b14 	add.w	fp, r0, #20
 8018b1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018b20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018b24:	9301      	str	r3, [sp, #4]
 8018b26:	46d9      	mov	r9, fp
 8018b28:	f04f 0c00 	mov.w	ip, #0
 8018b2c:	9b01      	ldr	r3, [sp, #4]
 8018b2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018b32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018b36:	9301      	str	r3, [sp, #4]
 8018b38:	fa1f f38a 	uxth.w	r3, sl
 8018b3c:	4619      	mov	r1, r3
 8018b3e:	b283      	uxth	r3, r0
 8018b40:	1acb      	subs	r3, r1, r3
 8018b42:	0c00      	lsrs	r0, r0, #16
 8018b44:	4463      	add	r3, ip
 8018b46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018b4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018b54:	4576      	cmp	r6, lr
 8018b56:	f849 3b04 	str.w	r3, [r9], #4
 8018b5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018b5e:	d8e5      	bhi.n	8018b2c <__mdiff+0x88>
 8018b60:	1b33      	subs	r3, r6, r4
 8018b62:	3b15      	subs	r3, #21
 8018b64:	f023 0303 	bic.w	r3, r3, #3
 8018b68:	3415      	adds	r4, #21
 8018b6a:	3304      	adds	r3, #4
 8018b6c:	42a6      	cmp	r6, r4
 8018b6e:	bf38      	it	cc
 8018b70:	2304      	movcc	r3, #4
 8018b72:	441d      	add	r5, r3
 8018b74:	445b      	add	r3, fp
 8018b76:	461e      	mov	r6, r3
 8018b78:	462c      	mov	r4, r5
 8018b7a:	4544      	cmp	r4, r8
 8018b7c:	d30e      	bcc.n	8018b9c <__mdiff+0xf8>
 8018b7e:	f108 0103 	add.w	r1, r8, #3
 8018b82:	1b49      	subs	r1, r1, r5
 8018b84:	f021 0103 	bic.w	r1, r1, #3
 8018b88:	3d03      	subs	r5, #3
 8018b8a:	45a8      	cmp	r8, r5
 8018b8c:	bf38      	it	cc
 8018b8e:	2100      	movcc	r1, #0
 8018b90:	440b      	add	r3, r1
 8018b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018b96:	b191      	cbz	r1, 8018bbe <__mdiff+0x11a>
 8018b98:	6117      	str	r7, [r2, #16]
 8018b9a:	e79d      	b.n	8018ad8 <__mdiff+0x34>
 8018b9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8018ba0:	46e6      	mov	lr, ip
 8018ba2:	0c08      	lsrs	r0, r1, #16
 8018ba4:	fa1c fc81 	uxtah	ip, ip, r1
 8018ba8:	4471      	add	r1, lr
 8018baa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018bae:	b289      	uxth	r1, r1
 8018bb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018bb4:	f846 1b04 	str.w	r1, [r6], #4
 8018bb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018bbc:	e7dd      	b.n	8018b7a <__mdiff+0xd6>
 8018bbe:	3f01      	subs	r7, #1
 8018bc0:	e7e7      	b.n	8018b92 <__mdiff+0xee>
 8018bc2:	bf00      	nop
 8018bc4:	0801a52b 	.word	0x0801a52b
 8018bc8:	0801a59c 	.word	0x0801a59c

08018bcc <__ulp>:
 8018bcc:	b082      	sub	sp, #8
 8018bce:	ed8d 0b00 	vstr	d0, [sp]
 8018bd2:	9a01      	ldr	r2, [sp, #4]
 8018bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8018c14 <__ulp+0x48>)
 8018bd6:	4013      	ands	r3, r2
 8018bd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	dc08      	bgt.n	8018bf2 <__ulp+0x26>
 8018be0:	425b      	negs	r3, r3
 8018be2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018be6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018bea:	da04      	bge.n	8018bf6 <__ulp+0x2a>
 8018bec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018bf0:	4113      	asrs	r3, r2
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	e008      	b.n	8018c08 <__ulp+0x3c>
 8018bf6:	f1a2 0314 	sub.w	r3, r2, #20
 8018bfa:	2b1e      	cmp	r3, #30
 8018bfc:	bfda      	itte	le
 8018bfe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018c02:	40da      	lsrle	r2, r3
 8018c04:	2201      	movgt	r2, #1
 8018c06:	2300      	movs	r3, #0
 8018c08:	4619      	mov	r1, r3
 8018c0a:	4610      	mov	r0, r2
 8018c0c:	ec41 0b10 	vmov	d0, r0, r1
 8018c10:	b002      	add	sp, #8
 8018c12:	4770      	bx	lr
 8018c14:	7ff00000 	.word	0x7ff00000

08018c18 <__b2d>:
 8018c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c1c:	6906      	ldr	r6, [r0, #16]
 8018c1e:	f100 0814 	add.w	r8, r0, #20
 8018c22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018c26:	1f37      	subs	r7, r6, #4
 8018c28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018c2c:	4610      	mov	r0, r2
 8018c2e:	f7ff fd4b 	bl	80186c8 <__hi0bits>
 8018c32:	f1c0 0320 	rsb	r3, r0, #32
 8018c36:	280a      	cmp	r0, #10
 8018c38:	600b      	str	r3, [r1, #0]
 8018c3a:	491b      	ldr	r1, [pc, #108]	@ (8018ca8 <__b2d+0x90>)
 8018c3c:	dc15      	bgt.n	8018c6a <__b2d+0x52>
 8018c3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8018c42:	fa22 f30c 	lsr.w	r3, r2, ip
 8018c46:	45b8      	cmp	r8, r7
 8018c48:	ea43 0501 	orr.w	r5, r3, r1
 8018c4c:	bf34      	ite	cc
 8018c4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018c52:	2300      	movcs	r3, #0
 8018c54:	3015      	adds	r0, #21
 8018c56:	fa02 f000 	lsl.w	r0, r2, r0
 8018c5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8018c5e:	4303      	orrs	r3, r0
 8018c60:	461c      	mov	r4, r3
 8018c62:	ec45 4b10 	vmov	d0, r4, r5
 8018c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c6a:	45b8      	cmp	r8, r7
 8018c6c:	bf3a      	itte	cc
 8018c6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018c72:	f1a6 0708 	subcc.w	r7, r6, #8
 8018c76:	2300      	movcs	r3, #0
 8018c78:	380b      	subs	r0, #11
 8018c7a:	d012      	beq.n	8018ca2 <__b2d+0x8a>
 8018c7c:	f1c0 0120 	rsb	r1, r0, #32
 8018c80:	fa23 f401 	lsr.w	r4, r3, r1
 8018c84:	4082      	lsls	r2, r0
 8018c86:	4322      	orrs	r2, r4
 8018c88:	4547      	cmp	r7, r8
 8018c8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018c8e:	bf8c      	ite	hi
 8018c90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018c94:	2200      	movls	r2, #0
 8018c96:	4083      	lsls	r3, r0
 8018c98:	40ca      	lsrs	r2, r1
 8018c9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018c9e:	4313      	orrs	r3, r2
 8018ca0:	e7de      	b.n	8018c60 <__b2d+0x48>
 8018ca2:	ea42 0501 	orr.w	r5, r2, r1
 8018ca6:	e7db      	b.n	8018c60 <__b2d+0x48>
 8018ca8:	3ff00000 	.word	0x3ff00000

08018cac <__d2b>:
 8018cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018cb0:	460f      	mov	r7, r1
 8018cb2:	2101      	movs	r1, #1
 8018cb4:	ec59 8b10 	vmov	r8, r9, d0
 8018cb8:	4616      	mov	r6, r2
 8018cba:	f7ff fc13 	bl	80184e4 <_Balloc>
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	b930      	cbnz	r0, 8018cd0 <__d2b+0x24>
 8018cc2:	4602      	mov	r2, r0
 8018cc4:	4b23      	ldr	r3, [pc, #140]	@ (8018d54 <__d2b+0xa8>)
 8018cc6:	4824      	ldr	r0, [pc, #144]	@ (8018d58 <__d2b+0xac>)
 8018cc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8018ccc:	f7ff f856 	bl	8017d7c <__assert_func>
 8018cd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018cd8:	b10d      	cbz	r5, 8018cde <__d2b+0x32>
 8018cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018cde:	9301      	str	r3, [sp, #4]
 8018ce0:	f1b8 0300 	subs.w	r3, r8, #0
 8018ce4:	d023      	beq.n	8018d2e <__d2b+0x82>
 8018ce6:	4668      	mov	r0, sp
 8018ce8:	9300      	str	r3, [sp, #0]
 8018cea:	f7ff fd0c 	bl	8018706 <__lo0bits>
 8018cee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018cf2:	b1d0      	cbz	r0, 8018d2a <__d2b+0x7e>
 8018cf4:	f1c0 0320 	rsb	r3, r0, #32
 8018cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8018cfc:	430b      	orrs	r3, r1
 8018cfe:	40c2      	lsrs	r2, r0
 8018d00:	6163      	str	r3, [r4, #20]
 8018d02:	9201      	str	r2, [sp, #4]
 8018d04:	9b01      	ldr	r3, [sp, #4]
 8018d06:	61a3      	str	r3, [r4, #24]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	bf0c      	ite	eq
 8018d0c:	2201      	moveq	r2, #1
 8018d0e:	2202      	movne	r2, #2
 8018d10:	6122      	str	r2, [r4, #16]
 8018d12:	b1a5      	cbz	r5, 8018d3e <__d2b+0x92>
 8018d14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018d18:	4405      	add	r5, r0
 8018d1a:	603d      	str	r5, [r7, #0]
 8018d1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018d20:	6030      	str	r0, [r6, #0]
 8018d22:	4620      	mov	r0, r4
 8018d24:	b003      	add	sp, #12
 8018d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d2a:	6161      	str	r1, [r4, #20]
 8018d2c:	e7ea      	b.n	8018d04 <__d2b+0x58>
 8018d2e:	a801      	add	r0, sp, #4
 8018d30:	f7ff fce9 	bl	8018706 <__lo0bits>
 8018d34:	9b01      	ldr	r3, [sp, #4]
 8018d36:	6163      	str	r3, [r4, #20]
 8018d38:	3020      	adds	r0, #32
 8018d3a:	2201      	movs	r2, #1
 8018d3c:	e7e8      	b.n	8018d10 <__d2b+0x64>
 8018d3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018d42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018d46:	6038      	str	r0, [r7, #0]
 8018d48:	6918      	ldr	r0, [r3, #16]
 8018d4a:	f7ff fcbd 	bl	80186c8 <__hi0bits>
 8018d4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018d52:	e7e5      	b.n	8018d20 <__d2b+0x74>
 8018d54:	0801a52b 	.word	0x0801a52b
 8018d58:	0801a59c 	.word	0x0801a59c

08018d5c <__ratio>:
 8018d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d60:	4688      	mov	r8, r1
 8018d62:	4669      	mov	r1, sp
 8018d64:	4681      	mov	r9, r0
 8018d66:	f7ff ff57 	bl	8018c18 <__b2d>
 8018d6a:	a901      	add	r1, sp, #4
 8018d6c:	4640      	mov	r0, r8
 8018d6e:	ec55 4b10 	vmov	r4, r5, d0
 8018d72:	f7ff ff51 	bl	8018c18 <__b2d>
 8018d76:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018d7a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018d7e:	1ad2      	subs	r2, r2, r3
 8018d80:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018d84:	1a5b      	subs	r3, r3, r1
 8018d86:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018d8a:	ec57 6b10 	vmov	r6, r7, d0
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	bfd6      	itet	le
 8018d92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018d96:	462a      	movgt	r2, r5
 8018d98:	463a      	movle	r2, r7
 8018d9a:	46ab      	mov	fp, r5
 8018d9c:	46a2      	mov	sl, r4
 8018d9e:	bfce      	itee	gt
 8018da0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018da4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018da8:	ee00 3a90 	vmovle	s1, r3
 8018dac:	ec4b ab17 	vmov	d7, sl, fp
 8018db0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018db4:	b003      	add	sp, #12
 8018db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dba <__copybits>:
 8018dba:	3901      	subs	r1, #1
 8018dbc:	b570      	push	{r4, r5, r6, lr}
 8018dbe:	1149      	asrs	r1, r1, #5
 8018dc0:	6914      	ldr	r4, [r2, #16]
 8018dc2:	3101      	adds	r1, #1
 8018dc4:	f102 0314 	add.w	r3, r2, #20
 8018dc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018dcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018dd0:	1f05      	subs	r5, r0, #4
 8018dd2:	42a3      	cmp	r3, r4
 8018dd4:	d30c      	bcc.n	8018df0 <__copybits+0x36>
 8018dd6:	1aa3      	subs	r3, r4, r2
 8018dd8:	3b11      	subs	r3, #17
 8018dda:	f023 0303 	bic.w	r3, r3, #3
 8018dde:	3211      	adds	r2, #17
 8018de0:	42a2      	cmp	r2, r4
 8018de2:	bf88      	it	hi
 8018de4:	2300      	movhi	r3, #0
 8018de6:	4418      	add	r0, r3
 8018de8:	2300      	movs	r3, #0
 8018dea:	4288      	cmp	r0, r1
 8018dec:	d305      	bcc.n	8018dfa <__copybits+0x40>
 8018dee:	bd70      	pop	{r4, r5, r6, pc}
 8018df0:	f853 6b04 	ldr.w	r6, [r3], #4
 8018df4:	f845 6f04 	str.w	r6, [r5, #4]!
 8018df8:	e7eb      	b.n	8018dd2 <__copybits+0x18>
 8018dfa:	f840 3b04 	str.w	r3, [r0], #4
 8018dfe:	e7f4      	b.n	8018dea <__copybits+0x30>

08018e00 <__any_on>:
 8018e00:	f100 0214 	add.w	r2, r0, #20
 8018e04:	6900      	ldr	r0, [r0, #16]
 8018e06:	114b      	asrs	r3, r1, #5
 8018e08:	4298      	cmp	r0, r3
 8018e0a:	b510      	push	{r4, lr}
 8018e0c:	db11      	blt.n	8018e32 <__any_on+0x32>
 8018e0e:	dd0a      	ble.n	8018e26 <__any_on+0x26>
 8018e10:	f011 011f 	ands.w	r1, r1, #31
 8018e14:	d007      	beq.n	8018e26 <__any_on+0x26>
 8018e16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e1a:	fa24 f001 	lsr.w	r0, r4, r1
 8018e1e:	fa00 f101 	lsl.w	r1, r0, r1
 8018e22:	428c      	cmp	r4, r1
 8018e24:	d10b      	bne.n	8018e3e <__any_on+0x3e>
 8018e26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e2a:	4293      	cmp	r3, r2
 8018e2c:	d803      	bhi.n	8018e36 <__any_on+0x36>
 8018e2e:	2000      	movs	r0, #0
 8018e30:	bd10      	pop	{r4, pc}
 8018e32:	4603      	mov	r3, r0
 8018e34:	e7f7      	b.n	8018e26 <__any_on+0x26>
 8018e36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e3a:	2900      	cmp	r1, #0
 8018e3c:	d0f5      	beq.n	8018e2a <__any_on+0x2a>
 8018e3e:	2001      	movs	r0, #1
 8018e40:	e7f6      	b.n	8018e30 <__any_on+0x30>

08018e42 <__ascii_wctomb>:
 8018e42:	4603      	mov	r3, r0
 8018e44:	4608      	mov	r0, r1
 8018e46:	b141      	cbz	r1, 8018e5a <__ascii_wctomb+0x18>
 8018e48:	2aff      	cmp	r2, #255	@ 0xff
 8018e4a:	d904      	bls.n	8018e56 <__ascii_wctomb+0x14>
 8018e4c:	228a      	movs	r2, #138	@ 0x8a
 8018e4e:	601a      	str	r2, [r3, #0]
 8018e50:	f04f 30ff 	mov.w	r0, #4294967295
 8018e54:	4770      	bx	lr
 8018e56:	700a      	strb	r2, [r1, #0]
 8018e58:	2001      	movs	r0, #1
 8018e5a:	4770      	bx	lr

08018e5c <__ssputs_r>:
 8018e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e60:	688e      	ldr	r6, [r1, #8]
 8018e62:	461f      	mov	r7, r3
 8018e64:	42be      	cmp	r6, r7
 8018e66:	680b      	ldr	r3, [r1, #0]
 8018e68:	4682      	mov	sl, r0
 8018e6a:	460c      	mov	r4, r1
 8018e6c:	4690      	mov	r8, r2
 8018e6e:	d82d      	bhi.n	8018ecc <__ssputs_r+0x70>
 8018e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018e78:	d026      	beq.n	8018ec8 <__ssputs_r+0x6c>
 8018e7a:	6965      	ldr	r5, [r4, #20]
 8018e7c:	6909      	ldr	r1, [r1, #16]
 8018e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e82:	eba3 0901 	sub.w	r9, r3, r1
 8018e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e8a:	1c7b      	adds	r3, r7, #1
 8018e8c:	444b      	add	r3, r9
 8018e8e:	106d      	asrs	r5, r5, #1
 8018e90:	429d      	cmp	r5, r3
 8018e92:	bf38      	it	cc
 8018e94:	461d      	movcc	r5, r3
 8018e96:	0553      	lsls	r3, r2, #21
 8018e98:	d527      	bpl.n	8018eea <__ssputs_r+0x8e>
 8018e9a:	4629      	mov	r1, r5
 8018e9c:	f7fd f9ee 	bl	801627c <_malloc_r>
 8018ea0:	4606      	mov	r6, r0
 8018ea2:	b360      	cbz	r0, 8018efe <__ssputs_r+0xa2>
 8018ea4:	6921      	ldr	r1, [r4, #16]
 8018ea6:	464a      	mov	r2, r9
 8018ea8:	f7fe ff49 	bl	8017d3e <memcpy>
 8018eac:	89a3      	ldrh	r3, [r4, #12]
 8018eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018eb6:	81a3      	strh	r3, [r4, #12]
 8018eb8:	6126      	str	r6, [r4, #16]
 8018eba:	6165      	str	r5, [r4, #20]
 8018ebc:	444e      	add	r6, r9
 8018ebe:	eba5 0509 	sub.w	r5, r5, r9
 8018ec2:	6026      	str	r6, [r4, #0]
 8018ec4:	60a5      	str	r5, [r4, #8]
 8018ec6:	463e      	mov	r6, r7
 8018ec8:	42be      	cmp	r6, r7
 8018eca:	d900      	bls.n	8018ece <__ssputs_r+0x72>
 8018ecc:	463e      	mov	r6, r7
 8018ece:	6820      	ldr	r0, [r4, #0]
 8018ed0:	4632      	mov	r2, r6
 8018ed2:	4641      	mov	r1, r8
 8018ed4:	f000 ffeb 	bl	8019eae <memmove>
 8018ed8:	68a3      	ldr	r3, [r4, #8]
 8018eda:	1b9b      	subs	r3, r3, r6
 8018edc:	60a3      	str	r3, [r4, #8]
 8018ede:	6823      	ldr	r3, [r4, #0]
 8018ee0:	4433      	add	r3, r6
 8018ee2:	6023      	str	r3, [r4, #0]
 8018ee4:	2000      	movs	r0, #0
 8018ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eea:	462a      	mov	r2, r5
 8018eec:	f001 f837 	bl	8019f5e <_realloc_r>
 8018ef0:	4606      	mov	r6, r0
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	d1e0      	bne.n	8018eb8 <__ssputs_r+0x5c>
 8018ef6:	6921      	ldr	r1, [r4, #16]
 8018ef8:	4650      	mov	r0, sl
 8018efa:	f7fe ff5d 	bl	8017db8 <_free_r>
 8018efe:	230c      	movs	r3, #12
 8018f00:	f8ca 3000 	str.w	r3, [sl]
 8018f04:	89a3      	ldrh	r3, [r4, #12]
 8018f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f0a:	81a3      	strh	r3, [r4, #12]
 8018f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f10:	e7e9      	b.n	8018ee6 <__ssputs_r+0x8a>
	...

08018f14 <_svfiprintf_r>:
 8018f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f18:	4698      	mov	r8, r3
 8018f1a:	898b      	ldrh	r3, [r1, #12]
 8018f1c:	061b      	lsls	r3, r3, #24
 8018f1e:	b09d      	sub	sp, #116	@ 0x74
 8018f20:	4607      	mov	r7, r0
 8018f22:	460d      	mov	r5, r1
 8018f24:	4614      	mov	r4, r2
 8018f26:	d510      	bpl.n	8018f4a <_svfiprintf_r+0x36>
 8018f28:	690b      	ldr	r3, [r1, #16]
 8018f2a:	b973      	cbnz	r3, 8018f4a <_svfiprintf_r+0x36>
 8018f2c:	2140      	movs	r1, #64	@ 0x40
 8018f2e:	f7fd f9a5 	bl	801627c <_malloc_r>
 8018f32:	6028      	str	r0, [r5, #0]
 8018f34:	6128      	str	r0, [r5, #16]
 8018f36:	b930      	cbnz	r0, 8018f46 <_svfiprintf_r+0x32>
 8018f38:	230c      	movs	r3, #12
 8018f3a:	603b      	str	r3, [r7, #0]
 8018f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f40:	b01d      	add	sp, #116	@ 0x74
 8018f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f46:	2340      	movs	r3, #64	@ 0x40
 8018f48:	616b      	str	r3, [r5, #20]
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f4e:	2320      	movs	r3, #32
 8018f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f58:	2330      	movs	r3, #48	@ 0x30
 8018f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80190f8 <_svfiprintf_r+0x1e4>
 8018f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018f62:	f04f 0901 	mov.w	r9, #1
 8018f66:	4623      	mov	r3, r4
 8018f68:	469a      	mov	sl, r3
 8018f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f6e:	b10a      	cbz	r2, 8018f74 <_svfiprintf_r+0x60>
 8018f70:	2a25      	cmp	r2, #37	@ 0x25
 8018f72:	d1f9      	bne.n	8018f68 <_svfiprintf_r+0x54>
 8018f74:	ebba 0b04 	subs.w	fp, sl, r4
 8018f78:	d00b      	beq.n	8018f92 <_svfiprintf_r+0x7e>
 8018f7a:	465b      	mov	r3, fp
 8018f7c:	4622      	mov	r2, r4
 8018f7e:	4629      	mov	r1, r5
 8018f80:	4638      	mov	r0, r7
 8018f82:	f7ff ff6b 	bl	8018e5c <__ssputs_r>
 8018f86:	3001      	adds	r0, #1
 8018f88:	f000 80a7 	beq.w	80190da <_svfiprintf_r+0x1c6>
 8018f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f8e:	445a      	add	r2, fp
 8018f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f92:	f89a 3000 	ldrb.w	r3, [sl]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	f000 809f 	beq.w	80190da <_svfiprintf_r+0x1c6>
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fa6:	f10a 0a01 	add.w	sl, sl, #1
 8018faa:	9304      	str	r3, [sp, #16]
 8018fac:	9307      	str	r3, [sp, #28]
 8018fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8018fb4:	4654      	mov	r4, sl
 8018fb6:	2205      	movs	r2, #5
 8018fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fbc:	484e      	ldr	r0, [pc, #312]	@ (80190f8 <_svfiprintf_r+0x1e4>)
 8018fbe:	f7e7 f997 	bl	80002f0 <memchr>
 8018fc2:	9a04      	ldr	r2, [sp, #16]
 8018fc4:	b9d8      	cbnz	r0, 8018ffe <_svfiprintf_r+0xea>
 8018fc6:	06d0      	lsls	r0, r2, #27
 8018fc8:	bf44      	itt	mi
 8018fca:	2320      	movmi	r3, #32
 8018fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018fd0:	0711      	lsls	r1, r2, #28
 8018fd2:	bf44      	itt	mi
 8018fd4:	232b      	movmi	r3, #43	@ 0x2b
 8018fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018fda:	f89a 3000 	ldrb.w	r3, [sl]
 8018fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fe0:	d015      	beq.n	801900e <_svfiprintf_r+0xfa>
 8018fe2:	9a07      	ldr	r2, [sp, #28]
 8018fe4:	4654      	mov	r4, sl
 8018fe6:	2000      	movs	r0, #0
 8018fe8:	f04f 0c0a 	mov.w	ip, #10
 8018fec:	4621      	mov	r1, r4
 8018fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ff2:	3b30      	subs	r3, #48	@ 0x30
 8018ff4:	2b09      	cmp	r3, #9
 8018ff6:	d94b      	bls.n	8019090 <_svfiprintf_r+0x17c>
 8018ff8:	b1b0      	cbz	r0, 8019028 <_svfiprintf_r+0x114>
 8018ffa:	9207      	str	r2, [sp, #28]
 8018ffc:	e014      	b.n	8019028 <_svfiprintf_r+0x114>
 8018ffe:	eba0 0308 	sub.w	r3, r0, r8
 8019002:	fa09 f303 	lsl.w	r3, r9, r3
 8019006:	4313      	orrs	r3, r2
 8019008:	9304      	str	r3, [sp, #16]
 801900a:	46a2      	mov	sl, r4
 801900c:	e7d2      	b.n	8018fb4 <_svfiprintf_r+0xa0>
 801900e:	9b03      	ldr	r3, [sp, #12]
 8019010:	1d19      	adds	r1, r3, #4
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	9103      	str	r1, [sp, #12]
 8019016:	2b00      	cmp	r3, #0
 8019018:	bfbb      	ittet	lt
 801901a:	425b      	neglt	r3, r3
 801901c:	f042 0202 	orrlt.w	r2, r2, #2
 8019020:	9307      	strge	r3, [sp, #28]
 8019022:	9307      	strlt	r3, [sp, #28]
 8019024:	bfb8      	it	lt
 8019026:	9204      	strlt	r2, [sp, #16]
 8019028:	7823      	ldrb	r3, [r4, #0]
 801902a:	2b2e      	cmp	r3, #46	@ 0x2e
 801902c:	d10a      	bne.n	8019044 <_svfiprintf_r+0x130>
 801902e:	7863      	ldrb	r3, [r4, #1]
 8019030:	2b2a      	cmp	r3, #42	@ 0x2a
 8019032:	d132      	bne.n	801909a <_svfiprintf_r+0x186>
 8019034:	9b03      	ldr	r3, [sp, #12]
 8019036:	1d1a      	adds	r2, r3, #4
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	9203      	str	r2, [sp, #12]
 801903c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019040:	3402      	adds	r4, #2
 8019042:	9305      	str	r3, [sp, #20]
 8019044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019108 <_svfiprintf_r+0x1f4>
 8019048:	7821      	ldrb	r1, [r4, #0]
 801904a:	2203      	movs	r2, #3
 801904c:	4650      	mov	r0, sl
 801904e:	f7e7 f94f 	bl	80002f0 <memchr>
 8019052:	b138      	cbz	r0, 8019064 <_svfiprintf_r+0x150>
 8019054:	9b04      	ldr	r3, [sp, #16]
 8019056:	eba0 000a 	sub.w	r0, r0, sl
 801905a:	2240      	movs	r2, #64	@ 0x40
 801905c:	4082      	lsls	r2, r0
 801905e:	4313      	orrs	r3, r2
 8019060:	3401      	adds	r4, #1
 8019062:	9304      	str	r3, [sp, #16]
 8019064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019068:	4824      	ldr	r0, [pc, #144]	@ (80190fc <_svfiprintf_r+0x1e8>)
 801906a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801906e:	2206      	movs	r2, #6
 8019070:	f7e7 f93e 	bl	80002f0 <memchr>
 8019074:	2800      	cmp	r0, #0
 8019076:	d036      	beq.n	80190e6 <_svfiprintf_r+0x1d2>
 8019078:	4b21      	ldr	r3, [pc, #132]	@ (8019100 <_svfiprintf_r+0x1ec>)
 801907a:	bb1b      	cbnz	r3, 80190c4 <_svfiprintf_r+0x1b0>
 801907c:	9b03      	ldr	r3, [sp, #12]
 801907e:	3307      	adds	r3, #7
 8019080:	f023 0307 	bic.w	r3, r3, #7
 8019084:	3308      	adds	r3, #8
 8019086:	9303      	str	r3, [sp, #12]
 8019088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801908a:	4433      	add	r3, r6
 801908c:	9309      	str	r3, [sp, #36]	@ 0x24
 801908e:	e76a      	b.n	8018f66 <_svfiprintf_r+0x52>
 8019090:	fb0c 3202 	mla	r2, ip, r2, r3
 8019094:	460c      	mov	r4, r1
 8019096:	2001      	movs	r0, #1
 8019098:	e7a8      	b.n	8018fec <_svfiprintf_r+0xd8>
 801909a:	2300      	movs	r3, #0
 801909c:	3401      	adds	r4, #1
 801909e:	9305      	str	r3, [sp, #20]
 80190a0:	4619      	mov	r1, r3
 80190a2:	f04f 0c0a 	mov.w	ip, #10
 80190a6:	4620      	mov	r0, r4
 80190a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190ac:	3a30      	subs	r2, #48	@ 0x30
 80190ae:	2a09      	cmp	r2, #9
 80190b0:	d903      	bls.n	80190ba <_svfiprintf_r+0x1a6>
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d0c6      	beq.n	8019044 <_svfiprintf_r+0x130>
 80190b6:	9105      	str	r1, [sp, #20]
 80190b8:	e7c4      	b.n	8019044 <_svfiprintf_r+0x130>
 80190ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80190be:	4604      	mov	r4, r0
 80190c0:	2301      	movs	r3, #1
 80190c2:	e7f0      	b.n	80190a6 <_svfiprintf_r+0x192>
 80190c4:	ab03      	add	r3, sp, #12
 80190c6:	9300      	str	r3, [sp, #0]
 80190c8:	462a      	mov	r2, r5
 80190ca:	4b0e      	ldr	r3, [pc, #56]	@ (8019104 <_svfiprintf_r+0x1f0>)
 80190cc:	a904      	add	r1, sp, #16
 80190ce:	4638      	mov	r0, r7
 80190d0:	f3af 8000 	nop.w
 80190d4:	1c42      	adds	r2, r0, #1
 80190d6:	4606      	mov	r6, r0
 80190d8:	d1d6      	bne.n	8019088 <_svfiprintf_r+0x174>
 80190da:	89ab      	ldrh	r3, [r5, #12]
 80190dc:	065b      	lsls	r3, r3, #25
 80190de:	f53f af2d 	bmi.w	8018f3c <_svfiprintf_r+0x28>
 80190e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80190e4:	e72c      	b.n	8018f40 <_svfiprintf_r+0x2c>
 80190e6:	ab03      	add	r3, sp, #12
 80190e8:	9300      	str	r3, [sp, #0]
 80190ea:	462a      	mov	r2, r5
 80190ec:	4b05      	ldr	r3, [pc, #20]	@ (8019104 <_svfiprintf_r+0x1f0>)
 80190ee:	a904      	add	r1, sp, #16
 80190f0:	4638      	mov	r0, r7
 80190f2:	f000 fb87 	bl	8019804 <_printf_i>
 80190f6:	e7ed      	b.n	80190d4 <_svfiprintf_r+0x1c0>
 80190f8:	0801a6f8 	.word	0x0801a6f8
 80190fc:	0801a702 	.word	0x0801a702
 8019100:	00000000 	.word	0x00000000
 8019104:	08018e5d 	.word	0x08018e5d
 8019108:	0801a6fe 	.word	0x0801a6fe

0801910c <_sungetc_r>:
 801910c:	b538      	push	{r3, r4, r5, lr}
 801910e:	1c4b      	adds	r3, r1, #1
 8019110:	4614      	mov	r4, r2
 8019112:	d103      	bne.n	801911c <_sungetc_r+0x10>
 8019114:	f04f 35ff 	mov.w	r5, #4294967295
 8019118:	4628      	mov	r0, r5
 801911a:	bd38      	pop	{r3, r4, r5, pc}
 801911c:	8993      	ldrh	r3, [r2, #12]
 801911e:	f023 0320 	bic.w	r3, r3, #32
 8019122:	8193      	strh	r3, [r2, #12]
 8019124:	6853      	ldr	r3, [r2, #4]
 8019126:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8019128:	b2cd      	uxtb	r5, r1
 801912a:	b18a      	cbz	r2, 8019150 <_sungetc_r+0x44>
 801912c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801912e:	429a      	cmp	r2, r3
 8019130:	dd08      	ble.n	8019144 <_sungetc_r+0x38>
 8019132:	6823      	ldr	r3, [r4, #0]
 8019134:	1e5a      	subs	r2, r3, #1
 8019136:	6022      	str	r2, [r4, #0]
 8019138:	f803 5c01 	strb.w	r5, [r3, #-1]
 801913c:	6863      	ldr	r3, [r4, #4]
 801913e:	3301      	adds	r3, #1
 8019140:	6063      	str	r3, [r4, #4]
 8019142:	e7e9      	b.n	8019118 <_sungetc_r+0xc>
 8019144:	4621      	mov	r1, r4
 8019146:	f000 fe78 	bl	8019e3a <__submore>
 801914a:	2800      	cmp	r0, #0
 801914c:	d0f1      	beq.n	8019132 <_sungetc_r+0x26>
 801914e:	e7e1      	b.n	8019114 <_sungetc_r+0x8>
 8019150:	6921      	ldr	r1, [r4, #16]
 8019152:	6822      	ldr	r2, [r4, #0]
 8019154:	b141      	cbz	r1, 8019168 <_sungetc_r+0x5c>
 8019156:	4291      	cmp	r1, r2
 8019158:	d206      	bcs.n	8019168 <_sungetc_r+0x5c>
 801915a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801915e:	42a9      	cmp	r1, r5
 8019160:	d102      	bne.n	8019168 <_sungetc_r+0x5c>
 8019162:	3a01      	subs	r2, #1
 8019164:	6022      	str	r2, [r4, #0]
 8019166:	e7ea      	b.n	801913e <_sungetc_r+0x32>
 8019168:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801916c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019170:	6363      	str	r3, [r4, #52]	@ 0x34
 8019172:	2303      	movs	r3, #3
 8019174:	63a3      	str	r3, [r4, #56]	@ 0x38
 8019176:	4623      	mov	r3, r4
 8019178:	f803 5f46 	strb.w	r5, [r3, #70]!
 801917c:	6023      	str	r3, [r4, #0]
 801917e:	2301      	movs	r3, #1
 8019180:	e7de      	b.n	8019140 <_sungetc_r+0x34>

08019182 <__ssrefill_r>:
 8019182:	b510      	push	{r4, lr}
 8019184:	460c      	mov	r4, r1
 8019186:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8019188:	b169      	cbz	r1, 80191a6 <__ssrefill_r+0x24>
 801918a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801918e:	4299      	cmp	r1, r3
 8019190:	d001      	beq.n	8019196 <__ssrefill_r+0x14>
 8019192:	f7fe fe11 	bl	8017db8 <_free_r>
 8019196:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019198:	6063      	str	r3, [r4, #4]
 801919a:	2000      	movs	r0, #0
 801919c:	6360      	str	r0, [r4, #52]	@ 0x34
 801919e:	b113      	cbz	r3, 80191a6 <__ssrefill_r+0x24>
 80191a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80191a2:	6023      	str	r3, [r4, #0]
 80191a4:	bd10      	pop	{r4, pc}
 80191a6:	6923      	ldr	r3, [r4, #16]
 80191a8:	6023      	str	r3, [r4, #0]
 80191aa:	2300      	movs	r3, #0
 80191ac:	6063      	str	r3, [r4, #4]
 80191ae:	89a3      	ldrh	r3, [r4, #12]
 80191b0:	f043 0320 	orr.w	r3, r3, #32
 80191b4:	81a3      	strh	r3, [r4, #12]
 80191b6:	f04f 30ff 	mov.w	r0, #4294967295
 80191ba:	e7f3      	b.n	80191a4 <__ssrefill_r+0x22>

080191bc <__ssvfiscanf_r>:
 80191bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191c0:	460c      	mov	r4, r1
 80191c2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80191c6:	2100      	movs	r1, #0
 80191c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80191cc:	49a5      	ldr	r1, [pc, #660]	@ (8019464 <__ssvfiscanf_r+0x2a8>)
 80191ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80191d0:	f10d 0804 	add.w	r8, sp, #4
 80191d4:	49a4      	ldr	r1, [pc, #656]	@ (8019468 <__ssvfiscanf_r+0x2ac>)
 80191d6:	4fa5      	ldr	r7, [pc, #660]	@ (801946c <__ssvfiscanf_r+0x2b0>)
 80191d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80191dc:	4606      	mov	r6, r0
 80191de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80191e0:	9300      	str	r3, [sp, #0]
 80191e2:	7813      	ldrb	r3, [r2, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 8158 	beq.w	801949a <__ssvfiscanf_r+0x2de>
 80191ea:	5cf9      	ldrb	r1, [r7, r3]
 80191ec:	f011 0108 	ands.w	r1, r1, #8
 80191f0:	f102 0501 	add.w	r5, r2, #1
 80191f4:	d019      	beq.n	801922a <__ssvfiscanf_r+0x6e>
 80191f6:	6863      	ldr	r3, [r4, #4]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	dd0f      	ble.n	801921c <__ssvfiscanf_r+0x60>
 80191fc:	6823      	ldr	r3, [r4, #0]
 80191fe:	781a      	ldrb	r2, [r3, #0]
 8019200:	5cba      	ldrb	r2, [r7, r2]
 8019202:	0712      	lsls	r2, r2, #28
 8019204:	d401      	bmi.n	801920a <__ssvfiscanf_r+0x4e>
 8019206:	462a      	mov	r2, r5
 8019208:	e7eb      	b.n	80191e2 <__ssvfiscanf_r+0x26>
 801920a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801920c:	3201      	adds	r2, #1
 801920e:	9245      	str	r2, [sp, #276]	@ 0x114
 8019210:	6862      	ldr	r2, [r4, #4]
 8019212:	3301      	adds	r3, #1
 8019214:	3a01      	subs	r2, #1
 8019216:	6062      	str	r2, [r4, #4]
 8019218:	6023      	str	r3, [r4, #0]
 801921a:	e7ec      	b.n	80191f6 <__ssvfiscanf_r+0x3a>
 801921c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801921e:	4621      	mov	r1, r4
 8019220:	4630      	mov	r0, r6
 8019222:	4798      	blx	r3
 8019224:	2800      	cmp	r0, #0
 8019226:	d0e9      	beq.n	80191fc <__ssvfiscanf_r+0x40>
 8019228:	e7ed      	b.n	8019206 <__ssvfiscanf_r+0x4a>
 801922a:	2b25      	cmp	r3, #37	@ 0x25
 801922c:	d012      	beq.n	8019254 <__ssvfiscanf_r+0x98>
 801922e:	4699      	mov	r9, r3
 8019230:	6863      	ldr	r3, [r4, #4]
 8019232:	2b00      	cmp	r3, #0
 8019234:	f340 8093 	ble.w	801935e <__ssvfiscanf_r+0x1a2>
 8019238:	6822      	ldr	r2, [r4, #0]
 801923a:	7813      	ldrb	r3, [r2, #0]
 801923c:	454b      	cmp	r3, r9
 801923e:	f040 812c 	bne.w	801949a <__ssvfiscanf_r+0x2de>
 8019242:	6863      	ldr	r3, [r4, #4]
 8019244:	3b01      	subs	r3, #1
 8019246:	6063      	str	r3, [r4, #4]
 8019248:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801924a:	3201      	adds	r2, #1
 801924c:	3301      	adds	r3, #1
 801924e:	6022      	str	r2, [r4, #0]
 8019250:	9345      	str	r3, [sp, #276]	@ 0x114
 8019252:	e7d8      	b.n	8019206 <__ssvfiscanf_r+0x4a>
 8019254:	9141      	str	r1, [sp, #260]	@ 0x104
 8019256:	9143      	str	r1, [sp, #268]	@ 0x10c
 8019258:	7853      	ldrb	r3, [r2, #1]
 801925a:	2b2a      	cmp	r3, #42	@ 0x2a
 801925c:	bf02      	ittt	eq
 801925e:	2310      	moveq	r3, #16
 8019260:	1c95      	addeq	r5, r2, #2
 8019262:	9341      	streq	r3, [sp, #260]	@ 0x104
 8019264:	220a      	movs	r2, #10
 8019266:	46a9      	mov	r9, r5
 8019268:	f819 1b01 	ldrb.w	r1, [r9], #1
 801926c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8019270:	2b09      	cmp	r3, #9
 8019272:	d91e      	bls.n	80192b2 <__ssvfiscanf_r+0xf6>
 8019274:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8019470 <__ssvfiscanf_r+0x2b4>
 8019278:	2203      	movs	r2, #3
 801927a:	4650      	mov	r0, sl
 801927c:	f7e7 f838 	bl	80002f0 <memchr>
 8019280:	b138      	cbz	r0, 8019292 <__ssvfiscanf_r+0xd6>
 8019282:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019284:	eba0 000a 	sub.w	r0, r0, sl
 8019288:	2301      	movs	r3, #1
 801928a:	4083      	lsls	r3, r0
 801928c:	4313      	orrs	r3, r2
 801928e:	9341      	str	r3, [sp, #260]	@ 0x104
 8019290:	464d      	mov	r5, r9
 8019292:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019296:	2b78      	cmp	r3, #120	@ 0x78
 8019298:	d806      	bhi.n	80192a8 <__ssvfiscanf_r+0xec>
 801929a:	2b57      	cmp	r3, #87	@ 0x57
 801929c:	d810      	bhi.n	80192c0 <__ssvfiscanf_r+0x104>
 801929e:	2b25      	cmp	r3, #37	@ 0x25
 80192a0:	d0c5      	beq.n	801922e <__ssvfiscanf_r+0x72>
 80192a2:	d857      	bhi.n	8019354 <__ssvfiscanf_r+0x198>
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d065      	beq.n	8019374 <__ssvfiscanf_r+0x1b8>
 80192a8:	2303      	movs	r3, #3
 80192aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80192ac:	230a      	movs	r3, #10
 80192ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80192b0:	e078      	b.n	80193a4 <__ssvfiscanf_r+0x1e8>
 80192b2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80192b4:	fb02 1103 	mla	r1, r2, r3, r1
 80192b8:	3930      	subs	r1, #48	@ 0x30
 80192ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80192bc:	464d      	mov	r5, r9
 80192be:	e7d2      	b.n	8019266 <__ssvfiscanf_r+0xaa>
 80192c0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80192c4:	2a20      	cmp	r2, #32
 80192c6:	d8ef      	bhi.n	80192a8 <__ssvfiscanf_r+0xec>
 80192c8:	a101      	add	r1, pc, #4	@ (adr r1, 80192d0 <__ssvfiscanf_r+0x114>)
 80192ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80192ce:	bf00      	nop
 80192d0:	08019383 	.word	0x08019383
 80192d4:	080192a9 	.word	0x080192a9
 80192d8:	080192a9 	.word	0x080192a9
 80192dc:	080193dd 	.word	0x080193dd
 80192e0:	080192a9 	.word	0x080192a9
 80192e4:	080192a9 	.word	0x080192a9
 80192e8:	080192a9 	.word	0x080192a9
 80192ec:	080192a9 	.word	0x080192a9
 80192f0:	080192a9 	.word	0x080192a9
 80192f4:	080192a9 	.word	0x080192a9
 80192f8:	080192a9 	.word	0x080192a9
 80192fc:	080193f3 	.word	0x080193f3
 8019300:	080193d9 	.word	0x080193d9
 8019304:	0801935b 	.word	0x0801935b
 8019308:	0801935b 	.word	0x0801935b
 801930c:	0801935b 	.word	0x0801935b
 8019310:	080192a9 	.word	0x080192a9
 8019314:	08019395 	.word	0x08019395
 8019318:	080192a9 	.word	0x080192a9
 801931c:	080192a9 	.word	0x080192a9
 8019320:	080192a9 	.word	0x080192a9
 8019324:	080192a9 	.word	0x080192a9
 8019328:	08019403 	.word	0x08019403
 801932c:	0801939d 	.word	0x0801939d
 8019330:	0801937b 	.word	0x0801937b
 8019334:	080192a9 	.word	0x080192a9
 8019338:	080192a9 	.word	0x080192a9
 801933c:	080193ff 	.word	0x080193ff
 8019340:	080192a9 	.word	0x080192a9
 8019344:	080193d9 	.word	0x080193d9
 8019348:	080192a9 	.word	0x080192a9
 801934c:	080192a9 	.word	0x080192a9
 8019350:	08019383 	.word	0x08019383
 8019354:	3b45      	subs	r3, #69	@ 0x45
 8019356:	2b02      	cmp	r3, #2
 8019358:	d8a6      	bhi.n	80192a8 <__ssvfiscanf_r+0xec>
 801935a:	2305      	movs	r3, #5
 801935c:	e021      	b.n	80193a2 <__ssvfiscanf_r+0x1e6>
 801935e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019360:	4621      	mov	r1, r4
 8019362:	4630      	mov	r0, r6
 8019364:	4798      	blx	r3
 8019366:	2800      	cmp	r0, #0
 8019368:	f43f af66 	beq.w	8019238 <__ssvfiscanf_r+0x7c>
 801936c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801936e:	2800      	cmp	r0, #0
 8019370:	f040 808b 	bne.w	801948a <__ssvfiscanf_r+0x2ce>
 8019374:	f04f 30ff 	mov.w	r0, #4294967295
 8019378:	e08b      	b.n	8019492 <__ssvfiscanf_r+0x2d6>
 801937a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801937c:	f042 0220 	orr.w	r2, r2, #32
 8019380:	9241      	str	r2, [sp, #260]	@ 0x104
 8019382:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019388:	9241      	str	r2, [sp, #260]	@ 0x104
 801938a:	2210      	movs	r2, #16
 801938c:	2b6e      	cmp	r3, #110	@ 0x6e
 801938e:	9242      	str	r2, [sp, #264]	@ 0x108
 8019390:	d902      	bls.n	8019398 <__ssvfiscanf_r+0x1dc>
 8019392:	e005      	b.n	80193a0 <__ssvfiscanf_r+0x1e4>
 8019394:	2300      	movs	r3, #0
 8019396:	9342      	str	r3, [sp, #264]	@ 0x108
 8019398:	2303      	movs	r3, #3
 801939a:	e002      	b.n	80193a2 <__ssvfiscanf_r+0x1e6>
 801939c:	2308      	movs	r3, #8
 801939e:	9342      	str	r3, [sp, #264]	@ 0x108
 80193a0:	2304      	movs	r3, #4
 80193a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80193a4:	6863      	ldr	r3, [r4, #4]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	dd39      	ble.n	801941e <__ssvfiscanf_r+0x262>
 80193aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80193ac:	0659      	lsls	r1, r3, #25
 80193ae:	d404      	bmi.n	80193ba <__ssvfiscanf_r+0x1fe>
 80193b0:	6823      	ldr	r3, [r4, #0]
 80193b2:	781a      	ldrb	r2, [r3, #0]
 80193b4:	5cba      	ldrb	r2, [r7, r2]
 80193b6:	0712      	lsls	r2, r2, #28
 80193b8:	d438      	bmi.n	801942c <__ssvfiscanf_r+0x270>
 80193ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80193bc:	2b02      	cmp	r3, #2
 80193be:	dc47      	bgt.n	8019450 <__ssvfiscanf_r+0x294>
 80193c0:	466b      	mov	r3, sp
 80193c2:	4622      	mov	r2, r4
 80193c4:	a941      	add	r1, sp, #260	@ 0x104
 80193c6:	4630      	mov	r0, r6
 80193c8:	f000 fb3c 	bl	8019a44 <_scanf_chars>
 80193cc:	2801      	cmp	r0, #1
 80193ce:	d064      	beq.n	801949a <__ssvfiscanf_r+0x2de>
 80193d0:	2802      	cmp	r0, #2
 80193d2:	f47f af18 	bne.w	8019206 <__ssvfiscanf_r+0x4a>
 80193d6:	e7c9      	b.n	801936c <__ssvfiscanf_r+0x1b0>
 80193d8:	220a      	movs	r2, #10
 80193da:	e7d7      	b.n	801938c <__ssvfiscanf_r+0x1d0>
 80193dc:	4629      	mov	r1, r5
 80193de:	4640      	mov	r0, r8
 80193e0:	f000 fcf2 	bl	8019dc8 <__sccl>
 80193e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80193e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80193ec:	4605      	mov	r5, r0
 80193ee:	2301      	movs	r3, #1
 80193f0:	e7d7      	b.n	80193a2 <__ssvfiscanf_r+0x1e6>
 80193f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80193f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80193fa:	2300      	movs	r3, #0
 80193fc:	e7d1      	b.n	80193a2 <__ssvfiscanf_r+0x1e6>
 80193fe:	2302      	movs	r3, #2
 8019400:	e7cf      	b.n	80193a2 <__ssvfiscanf_r+0x1e6>
 8019402:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8019404:	06c3      	lsls	r3, r0, #27
 8019406:	f53f aefe 	bmi.w	8019206 <__ssvfiscanf_r+0x4a>
 801940a:	9b00      	ldr	r3, [sp, #0]
 801940c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801940e:	1d19      	adds	r1, r3, #4
 8019410:	9100      	str	r1, [sp, #0]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	07c0      	lsls	r0, r0, #31
 8019416:	bf4c      	ite	mi
 8019418:	801a      	strhmi	r2, [r3, #0]
 801941a:	601a      	strpl	r2, [r3, #0]
 801941c:	e6f3      	b.n	8019206 <__ssvfiscanf_r+0x4a>
 801941e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019420:	4621      	mov	r1, r4
 8019422:	4630      	mov	r0, r6
 8019424:	4798      	blx	r3
 8019426:	2800      	cmp	r0, #0
 8019428:	d0bf      	beq.n	80193aa <__ssvfiscanf_r+0x1ee>
 801942a:	e79f      	b.n	801936c <__ssvfiscanf_r+0x1b0>
 801942c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801942e:	3201      	adds	r2, #1
 8019430:	9245      	str	r2, [sp, #276]	@ 0x114
 8019432:	6862      	ldr	r2, [r4, #4]
 8019434:	3a01      	subs	r2, #1
 8019436:	2a00      	cmp	r2, #0
 8019438:	6062      	str	r2, [r4, #4]
 801943a:	dd02      	ble.n	8019442 <__ssvfiscanf_r+0x286>
 801943c:	3301      	adds	r3, #1
 801943e:	6023      	str	r3, [r4, #0]
 8019440:	e7b6      	b.n	80193b0 <__ssvfiscanf_r+0x1f4>
 8019442:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019444:	4621      	mov	r1, r4
 8019446:	4630      	mov	r0, r6
 8019448:	4798      	blx	r3
 801944a:	2800      	cmp	r0, #0
 801944c:	d0b0      	beq.n	80193b0 <__ssvfiscanf_r+0x1f4>
 801944e:	e78d      	b.n	801936c <__ssvfiscanf_r+0x1b0>
 8019450:	2b04      	cmp	r3, #4
 8019452:	dc0f      	bgt.n	8019474 <__ssvfiscanf_r+0x2b8>
 8019454:	466b      	mov	r3, sp
 8019456:	4622      	mov	r2, r4
 8019458:	a941      	add	r1, sp, #260	@ 0x104
 801945a:	4630      	mov	r0, r6
 801945c:	f000 fb4c 	bl	8019af8 <_scanf_i>
 8019460:	e7b4      	b.n	80193cc <__ssvfiscanf_r+0x210>
 8019462:	bf00      	nop
 8019464:	0801910d 	.word	0x0801910d
 8019468:	08019183 	.word	0x08019183
 801946c:	0801a371 	.word	0x0801a371
 8019470:	0801a6fe 	.word	0x0801a6fe
 8019474:	4b0a      	ldr	r3, [pc, #40]	@ (80194a0 <__ssvfiscanf_r+0x2e4>)
 8019476:	2b00      	cmp	r3, #0
 8019478:	f43f aec5 	beq.w	8019206 <__ssvfiscanf_r+0x4a>
 801947c:	466b      	mov	r3, sp
 801947e:	4622      	mov	r2, r4
 8019480:	a941      	add	r1, sp, #260	@ 0x104
 8019482:	4630      	mov	r0, r6
 8019484:	f7fd fdce 	bl	8017024 <_scanf_float>
 8019488:	e7a0      	b.n	80193cc <__ssvfiscanf_r+0x210>
 801948a:	89a3      	ldrh	r3, [r4, #12]
 801948c:	065b      	lsls	r3, r3, #25
 801948e:	f53f af71 	bmi.w	8019374 <__ssvfiscanf_r+0x1b8>
 8019492:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8019496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801949a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801949c:	e7f9      	b.n	8019492 <__ssvfiscanf_r+0x2d6>
 801949e:	bf00      	nop
 80194a0:	08017025 	.word	0x08017025

080194a4 <__sfputc_r>:
 80194a4:	6893      	ldr	r3, [r2, #8]
 80194a6:	3b01      	subs	r3, #1
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	b410      	push	{r4}
 80194ac:	6093      	str	r3, [r2, #8]
 80194ae:	da08      	bge.n	80194c2 <__sfputc_r+0x1e>
 80194b0:	6994      	ldr	r4, [r2, #24]
 80194b2:	42a3      	cmp	r3, r4
 80194b4:	db01      	blt.n	80194ba <__sfputc_r+0x16>
 80194b6:	290a      	cmp	r1, #10
 80194b8:	d103      	bne.n	80194c2 <__sfputc_r+0x1e>
 80194ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194be:	f7fe ba3e 	b.w	801793e <__swbuf_r>
 80194c2:	6813      	ldr	r3, [r2, #0]
 80194c4:	1c58      	adds	r0, r3, #1
 80194c6:	6010      	str	r0, [r2, #0]
 80194c8:	7019      	strb	r1, [r3, #0]
 80194ca:	4608      	mov	r0, r1
 80194cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194d0:	4770      	bx	lr

080194d2 <__sfputs_r>:
 80194d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d4:	4606      	mov	r6, r0
 80194d6:	460f      	mov	r7, r1
 80194d8:	4614      	mov	r4, r2
 80194da:	18d5      	adds	r5, r2, r3
 80194dc:	42ac      	cmp	r4, r5
 80194de:	d101      	bne.n	80194e4 <__sfputs_r+0x12>
 80194e0:	2000      	movs	r0, #0
 80194e2:	e007      	b.n	80194f4 <__sfputs_r+0x22>
 80194e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194e8:	463a      	mov	r2, r7
 80194ea:	4630      	mov	r0, r6
 80194ec:	f7ff ffda 	bl	80194a4 <__sfputc_r>
 80194f0:	1c43      	adds	r3, r0, #1
 80194f2:	d1f3      	bne.n	80194dc <__sfputs_r+0xa>
 80194f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194f8 <_vfiprintf_r>:
 80194f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194fc:	460d      	mov	r5, r1
 80194fe:	b09d      	sub	sp, #116	@ 0x74
 8019500:	4614      	mov	r4, r2
 8019502:	4698      	mov	r8, r3
 8019504:	4606      	mov	r6, r0
 8019506:	b118      	cbz	r0, 8019510 <_vfiprintf_r+0x18>
 8019508:	6a03      	ldr	r3, [r0, #32]
 801950a:	b90b      	cbnz	r3, 8019510 <_vfiprintf_r+0x18>
 801950c:	f7fe f8e2 	bl	80176d4 <__sinit>
 8019510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019512:	07d9      	lsls	r1, r3, #31
 8019514:	d405      	bmi.n	8019522 <_vfiprintf_r+0x2a>
 8019516:	89ab      	ldrh	r3, [r5, #12]
 8019518:	059a      	lsls	r2, r3, #22
 801951a:	d402      	bmi.n	8019522 <_vfiprintf_r+0x2a>
 801951c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801951e:	f7fe fc0c 	bl	8017d3a <__retarget_lock_acquire_recursive>
 8019522:	89ab      	ldrh	r3, [r5, #12]
 8019524:	071b      	lsls	r3, r3, #28
 8019526:	d501      	bpl.n	801952c <_vfiprintf_r+0x34>
 8019528:	692b      	ldr	r3, [r5, #16]
 801952a:	b99b      	cbnz	r3, 8019554 <_vfiprintf_r+0x5c>
 801952c:	4629      	mov	r1, r5
 801952e:	4630      	mov	r0, r6
 8019530:	f7fe fa44 	bl	80179bc <__swsetup_r>
 8019534:	b170      	cbz	r0, 8019554 <_vfiprintf_r+0x5c>
 8019536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019538:	07dc      	lsls	r4, r3, #31
 801953a:	d504      	bpl.n	8019546 <_vfiprintf_r+0x4e>
 801953c:	f04f 30ff 	mov.w	r0, #4294967295
 8019540:	b01d      	add	sp, #116	@ 0x74
 8019542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019546:	89ab      	ldrh	r3, [r5, #12]
 8019548:	0598      	lsls	r0, r3, #22
 801954a:	d4f7      	bmi.n	801953c <_vfiprintf_r+0x44>
 801954c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801954e:	f7fe fbf5 	bl	8017d3c <__retarget_lock_release_recursive>
 8019552:	e7f3      	b.n	801953c <_vfiprintf_r+0x44>
 8019554:	2300      	movs	r3, #0
 8019556:	9309      	str	r3, [sp, #36]	@ 0x24
 8019558:	2320      	movs	r3, #32
 801955a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801955e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019562:	2330      	movs	r3, #48	@ 0x30
 8019564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019714 <_vfiprintf_r+0x21c>
 8019568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801956c:	f04f 0901 	mov.w	r9, #1
 8019570:	4623      	mov	r3, r4
 8019572:	469a      	mov	sl, r3
 8019574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019578:	b10a      	cbz	r2, 801957e <_vfiprintf_r+0x86>
 801957a:	2a25      	cmp	r2, #37	@ 0x25
 801957c:	d1f9      	bne.n	8019572 <_vfiprintf_r+0x7a>
 801957e:	ebba 0b04 	subs.w	fp, sl, r4
 8019582:	d00b      	beq.n	801959c <_vfiprintf_r+0xa4>
 8019584:	465b      	mov	r3, fp
 8019586:	4622      	mov	r2, r4
 8019588:	4629      	mov	r1, r5
 801958a:	4630      	mov	r0, r6
 801958c:	f7ff ffa1 	bl	80194d2 <__sfputs_r>
 8019590:	3001      	adds	r0, #1
 8019592:	f000 80a7 	beq.w	80196e4 <_vfiprintf_r+0x1ec>
 8019596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019598:	445a      	add	r2, fp
 801959a:	9209      	str	r2, [sp, #36]	@ 0x24
 801959c:	f89a 3000 	ldrb.w	r3, [sl]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	f000 809f 	beq.w	80196e4 <_vfiprintf_r+0x1ec>
 80195a6:	2300      	movs	r3, #0
 80195a8:	f04f 32ff 	mov.w	r2, #4294967295
 80195ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195b0:	f10a 0a01 	add.w	sl, sl, #1
 80195b4:	9304      	str	r3, [sp, #16]
 80195b6:	9307      	str	r3, [sp, #28]
 80195b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80195bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80195be:	4654      	mov	r4, sl
 80195c0:	2205      	movs	r2, #5
 80195c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195c6:	4853      	ldr	r0, [pc, #332]	@ (8019714 <_vfiprintf_r+0x21c>)
 80195c8:	f7e6 fe92 	bl	80002f0 <memchr>
 80195cc:	9a04      	ldr	r2, [sp, #16]
 80195ce:	b9d8      	cbnz	r0, 8019608 <_vfiprintf_r+0x110>
 80195d0:	06d1      	lsls	r1, r2, #27
 80195d2:	bf44      	itt	mi
 80195d4:	2320      	movmi	r3, #32
 80195d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195da:	0713      	lsls	r3, r2, #28
 80195dc:	bf44      	itt	mi
 80195de:	232b      	movmi	r3, #43	@ 0x2b
 80195e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195e4:	f89a 3000 	ldrb.w	r3, [sl]
 80195e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80195ea:	d015      	beq.n	8019618 <_vfiprintf_r+0x120>
 80195ec:	9a07      	ldr	r2, [sp, #28]
 80195ee:	4654      	mov	r4, sl
 80195f0:	2000      	movs	r0, #0
 80195f2:	f04f 0c0a 	mov.w	ip, #10
 80195f6:	4621      	mov	r1, r4
 80195f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195fc:	3b30      	subs	r3, #48	@ 0x30
 80195fe:	2b09      	cmp	r3, #9
 8019600:	d94b      	bls.n	801969a <_vfiprintf_r+0x1a2>
 8019602:	b1b0      	cbz	r0, 8019632 <_vfiprintf_r+0x13a>
 8019604:	9207      	str	r2, [sp, #28]
 8019606:	e014      	b.n	8019632 <_vfiprintf_r+0x13a>
 8019608:	eba0 0308 	sub.w	r3, r0, r8
 801960c:	fa09 f303 	lsl.w	r3, r9, r3
 8019610:	4313      	orrs	r3, r2
 8019612:	9304      	str	r3, [sp, #16]
 8019614:	46a2      	mov	sl, r4
 8019616:	e7d2      	b.n	80195be <_vfiprintf_r+0xc6>
 8019618:	9b03      	ldr	r3, [sp, #12]
 801961a:	1d19      	adds	r1, r3, #4
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	9103      	str	r1, [sp, #12]
 8019620:	2b00      	cmp	r3, #0
 8019622:	bfbb      	ittet	lt
 8019624:	425b      	neglt	r3, r3
 8019626:	f042 0202 	orrlt.w	r2, r2, #2
 801962a:	9307      	strge	r3, [sp, #28]
 801962c:	9307      	strlt	r3, [sp, #28]
 801962e:	bfb8      	it	lt
 8019630:	9204      	strlt	r2, [sp, #16]
 8019632:	7823      	ldrb	r3, [r4, #0]
 8019634:	2b2e      	cmp	r3, #46	@ 0x2e
 8019636:	d10a      	bne.n	801964e <_vfiprintf_r+0x156>
 8019638:	7863      	ldrb	r3, [r4, #1]
 801963a:	2b2a      	cmp	r3, #42	@ 0x2a
 801963c:	d132      	bne.n	80196a4 <_vfiprintf_r+0x1ac>
 801963e:	9b03      	ldr	r3, [sp, #12]
 8019640:	1d1a      	adds	r2, r3, #4
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	9203      	str	r2, [sp, #12]
 8019646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801964a:	3402      	adds	r4, #2
 801964c:	9305      	str	r3, [sp, #20]
 801964e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019724 <_vfiprintf_r+0x22c>
 8019652:	7821      	ldrb	r1, [r4, #0]
 8019654:	2203      	movs	r2, #3
 8019656:	4650      	mov	r0, sl
 8019658:	f7e6 fe4a 	bl	80002f0 <memchr>
 801965c:	b138      	cbz	r0, 801966e <_vfiprintf_r+0x176>
 801965e:	9b04      	ldr	r3, [sp, #16]
 8019660:	eba0 000a 	sub.w	r0, r0, sl
 8019664:	2240      	movs	r2, #64	@ 0x40
 8019666:	4082      	lsls	r2, r0
 8019668:	4313      	orrs	r3, r2
 801966a:	3401      	adds	r4, #1
 801966c:	9304      	str	r3, [sp, #16]
 801966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019672:	4829      	ldr	r0, [pc, #164]	@ (8019718 <_vfiprintf_r+0x220>)
 8019674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019678:	2206      	movs	r2, #6
 801967a:	f7e6 fe39 	bl	80002f0 <memchr>
 801967e:	2800      	cmp	r0, #0
 8019680:	d03f      	beq.n	8019702 <_vfiprintf_r+0x20a>
 8019682:	4b26      	ldr	r3, [pc, #152]	@ (801971c <_vfiprintf_r+0x224>)
 8019684:	bb1b      	cbnz	r3, 80196ce <_vfiprintf_r+0x1d6>
 8019686:	9b03      	ldr	r3, [sp, #12]
 8019688:	3307      	adds	r3, #7
 801968a:	f023 0307 	bic.w	r3, r3, #7
 801968e:	3308      	adds	r3, #8
 8019690:	9303      	str	r3, [sp, #12]
 8019692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019694:	443b      	add	r3, r7
 8019696:	9309      	str	r3, [sp, #36]	@ 0x24
 8019698:	e76a      	b.n	8019570 <_vfiprintf_r+0x78>
 801969a:	fb0c 3202 	mla	r2, ip, r2, r3
 801969e:	460c      	mov	r4, r1
 80196a0:	2001      	movs	r0, #1
 80196a2:	e7a8      	b.n	80195f6 <_vfiprintf_r+0xfe>
 80196a4:	2300      	movs	r3, #0
 80196a6:	3401      	adds	r4, #1
 80196a8:	9305      	str	r3, [sp, #20]
 80196aa:	4619      	mov	r1, r3
 80196ac:	f04f 0c0a 	mov.w	ip, #10
 80196b0:	4620      	mov	r0, r4
 80196b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196b6:	3a30      	subs	r2, #48	@ 0x30
 80196b8:	2a09      	cmp	r2, #9
 80196ba:	d903      	bls.n	80196c4 <_vfiprintf_r+0x1cc>
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d0c6      	beq.n	801964e <_vfiprintf_r+0x156>
 80196c0:	9105      	str	r1, [sp, #20]
 80196c2:	e7c4      	b.n	801964e <_vfiprintf_r+0x156>
 80196c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80196c8:	4604      	mov	r4, r0
 80196ca:	2301      	movs	r3, #1
 80196cc:	e7f0      	b.n	80196b0 <_vfiprintf_r+0x1b8>
 80196ce:	ab03      	add	r3, sp, #12
 80196d0:	9300      	str	r3, [sp, #0]
 80196d2:	462a      	mov	r2, r5
 80196d4:	4b12      	ldr	r3, [pc, #72]	@ (8019720 <_vfiprintf_r+0x228>)
 80196d6:	a904      	add	r1, sp, #16
 80196d8:	4630      	mov	r0, r6
 80196da:	f3af 8000 	nop.w
 80196de:	4607      	mov	r7, r0
 80196e0:	1c78      	adds	r0, r7, #1
 80196e2:	d1d6      	bne.n	8019692 <_vfiprintf_r+0x19a>
 80196e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196e6:	07d9      	lsls	r1, r3, #31
 80196e8:	d405      	bmi.n	80196f6 <_vfiprintf_r+0x1fe>
 80196ea:	89ab      	ldrh	r3, [r5, #12]
 80196ec:	059a      	lsls	r2, r3, #22
 80196ee:	d402      	bmi.n	80196f6 <_vfiprintf_r+0x1fe>
 80196f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196f2:	f7fe fb23 	bl	8017d3c <__retarget_lock_release_recursive>
 80196f6:	89ab      	ldrh	r3, [r5, #12]
 80196f8:	065b      	lsls	r3, r3, #25
 80196fa:	f53f af1f 	bmi.w	801953c <_vfiprintf_r+0x44>
 80196fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019700:	e71e      	b.n	8019540 <_vfiprintf_r+0x48>
 8019702:	ab03      	add	r3, sp, #12
 8019704:	9300      	str	r3, [sp, #0]
 8019706:	462a      	mov	r2, r5
 8019708:	4b05      	ldr	r3, [pc, #20]	@ (8019720 <_vfiprintf_r+0x228>)
 801970a:	a904      	add	r1, sp, #16
 801970c:	4630      	mov	r0, r6
 801970e:	f000 f879 	bl	8019804 <_printf_i>
 8019712:	e7e4      	b.n	80196de <_vfiprintf_r+0x1e6>
 8019714:	0801a6f8 	.word	0x0801a6f8
 8019718:	0801a702 	.word	0x0801a702
 801971c:	00000000 	.word	0x00000000
 8019720:	080194d3 	.word	0x080194d3
 8019724:	0801a6fe 	.word	0x0801a6fe

08019728 <_printf_common>:
 8019728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801972c:	4616      	mov	r6, r2
 801972e:	4698      	mov	r8, r3
 8019730:	688a      	ldr	r2, [r1, #8]
 8019732:	690b      	ldr	r3, [r1, #16]
 8019734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019738:	4293      	cmp	r3, r2
 801973a:	bfb8      	it	lt
 801973c:	4613      	movlt	r3, r2
 801973e:	6033      	str	r3, [r6, #0]
 8019740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019744:	4607      	mov	r7, r0
 8019746:	460c      	mov	r4, r1
 8019748:	b10a      	cbz	r2, 801974e <_printf_common+0x26>
 801974a:	3301      	adds	r3, #1
 801974c:	6033      	str	r3, [r6, #0]
 801974e:	6823      	ldr	r3, [r4, #0]
 8019750:	0699      	lsls	r1, r3, #26
 8019752:	bf42      	ittt	mi
 8019754:	6833      	ldrmi	r3, [r6, #0]
 8019756:	3302      	addmi	r3, #2
 8019758:	6033      	strmi	r3, [r6, #0]
 801975a:	6825      	ldr	r5, [r4, #0]
 801975c:	f015 0506 	ands.w	r5, r5, #6
 8019760:	d106      	bne.n	8019770 <_printf_common+0x48>
 8019762:	f104 0a19 	add.w	sl, r4, #25
 8019766:	68e3      	ldr	r3, [r4, #12]
 8019768:	6832      	ldr	r2, [r6, #0]
 801976a:	1a9b      	subs	r3, r3, r2
 801976c:	42ab      	cmp	r3, r5
 801976e:	dc26      	bgt.n	80197be <_printf_common+0x96>
 8019770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019774:	6822      	ldr	r2, [r4, #0]
 8019776:	3b00      	subs	r3, #0
 8019778:	bf18      	it	ne
 801977a:	2301      	movne	r3, #1
 801977c:	0692      	lsls	r2, r2, #26
 801977e:	d42b      	bmi.n	80197d8 <_printf_common+0xb0>
 8019780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019784:	4641      	mov	r1, r8
 8019786:	4638      	mov	r0, r7
 8019788:	47c8      	blx	r9
 801978a:	3001      	adds	r0, #1
 801978c:	d01e      	beq.n	80197cc <_printf_common+0xa4>
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	6922      	ldr	r2, [r4, #16]
 8019792:	f003 0306 	and.w	r3, r3, #6
 8019796:	2b04      	cmp	r3, #4
 8019798:	bf02      	ittt	eq
 801979a:	68e5      	ldreq	r5, [r4, #12]
 801979c:	6833      	ldreq	r3, [r6, #0]
 801979e:	1aed      	subeq	r5, r5, r3
 80197a0:	68a3      	ldr	r3, [r4, #8]
 80197a2:	bf0c      	ite	eq
 80197a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80197a8:	2500      	movne	r5, #0
 80197aa:	4293      	cmp	r3, r2
 80197ac:	bfc4      	itt	gt
 80197ae:	1a9b      	subgt	r3, r3, r2
 80197b0:	18ed      	addgt	r5, r5, r3
 80197b2:	2600      	movs	r6, #0
 80197b4:	341a      	adds	r4, #26
 80197b6:	42b5      	cmp	r5, r6
 80197b8:	d11a      	bne.n	80197f0 <_printf_common+0xc8>
 80197ba:	2000      	movs	r0, #0
 80197bc:	e008      	b.n	80197d0 <_printf_common+0xa8>
 80197be:	2301      	movs	r3, #1
 80197c0:	4652      	mov	r2, sl
 80197c2:	4641      	mov	r1, r8
 80197c4:	4638      	mov	r0, r7
 80197c6:	47c8      	blx	r9
 80197c8:	3001      	adds	r0, #1
 80197ca:	d103      	bne.n	80197d4 <_printf_common+0xac>
 80197cc:	f04f 30ff 	mov.w	r0, #4294967295
 80197d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197d4:	3501      	adds	r5, #1
 80197d6:	e7c6      	b.n	8019766 <_printf_common+0x3e>
 80197d8:	18e1      	adds	r1, r4, r3
 80197da:	1c5a      	adds	r2, r3, #1
 80197dc:	2030      	movs	r0, #48	@ 0x30
 80197de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80197e2:	4422      	add	r2, r4
 80197e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80197e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80197ec:	3302      	adds	r3, #2
 80197ee:	e7c7      	b.n	8019780 <_printf_common+0x58>
 80197f0:	2301      	movs	r3, #1
 80197f2:	4622      	mov	r2, r4
 80197f4:	4641      	mov	r1, r8
 80197f6:	4638      	mov	r0, r7
 80197f8:	47c8      	blx	r9
 80197fa:	3001      	adds	r0, #1
 80197fc:	d0e6      	beq.n	80197cc <_printf_common+0xa4>
 80197fe:	3601      	adds	r6, #1
 8019800:	e7d9      	b.n	80197b6 <_printf_common+0x8e>
	...

08019804 <_printf_i>:
 8019804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019808:	7e0f      	ldrb	r7, [r1, #24]
 801980a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801980c:	2f78      	cmp	r7, #120	@ 0x78
 801980e:	4691      	mov	r9, r2
 8019810:	4680      	mov	r8, r0
 8019812:	460c      	mov	r4, r1
 8019814:	469a      	mov	sl, r3
 8019816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801981a:	d807      	bhi.n	801982c <_printf_i+0x28>
 801981c:	2f62      	cmp	r7, #98	@ 0x62
 801981e:	d80a      	bhi.n	8019836 <_printf_i+0x32>
 8019820:	2f00      	cmp	r7, #0
 8019822:	f000 80d2 	beq.w	80199ca <_printf_i+0x1c6>
 8019826:	2f58      	cmp	r7, #88	@ 0x58
 8019828:	f000 80b9 	beq.w	801999e <_printf_i+0x19a>
 801982c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019834:	e03a      	b.n	80198ac <_printf_i+0xa8>
 8019836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801983a:	2b15      	cmp	r3, #21
 801983c:	d8f6      	bhi.n	801982c <_printf_i+0x28>
 801983e:	a101      	add	r1, pc, #4	@ (adr r1, 8019844 <_printf_i+0x40>)
 8019840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019844:	0801989d 	.word	0x0801989d
 8019848:	080198b1 	.word	0x080198b1
 801984c:	0801982d 	.word	0x0801982d
 8019850:	0801982d 	.word	0x0801982d
 8019854:	0801982d 	.word	0x0801982d
 8019858:	0801982d 	.word	0x0801982d
 801985c:	080198b1 	.word	0x080198b1
 8019860:	0801982d 	.word	0x0801982d
 8019864:	0801982d 	.word	0x0801982d
 8019868:	0801982d 	.word	0x0801982d
 801986c:	0801982d 	.word	0x0801982d
 8019870:	080199b1 	.word	0x080199b1
 8019874:	080198db 	.word	0x080198db
 8019878:	0801996b 	.word	0x0801996b
 801987c:	0801982d 	.word	0x0801982d
 8019880:	0801982d 	.word	0x0801982d
 8019884:	080199d3 	.word	0x080199d3
 8019888:	0801982d 	.word	0x0801982d
 801988c:	080198db 	.word	0x080198db
 8019890:	0801982d 	.word	0x0801982d
 8019894:	0801982d 	.word	0x0801982d
 8019898:	08019973 	.word	0x08019973
 801989c:	6833      	ldr	r3, [r6, #0]
 801989e:	1d1a      	adds	r2, r3, #4
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	6032      	str	r2, [r6, #0]
 80198a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80198a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80198ac:	2301      	movs	r3, #1
 80198ae:	e09d      	b.n	80199ec <_printf_i+0x1e8>
 80198b0:	6833      	ldr	r3, [r6, #0]
 80198b2:	6820      	ldr	r0, [r4, #0]
 80198b4:	1d19      	adds	r1, r3, #4
 80198b6:	6031      	str	r1, [r6, #0]
 80198b8:	0606      	lsls	r6, r0, #24
 80198ba:	d501      	bpl.n	80198c0 <_printf_i+0xbc>
 80198bc:	681d      	ldr	r5, [r3, #0]
 80198be:	e003      	b.n	80198c8 <_printf_i+0xc4>
 80198c0:	0645      	lsls	r5, r0, #25
 80198c2:	d5fb      	bpl.n	80198bc <_printf_i+0xb8>
 80198c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80198c8:	2d00      	cmp	r5, #0
 80198ca:	da03      	bge.n	80198d4 <_printf_i+0xd0>
 80198cc:	232d      	movs	r3, #45	@ 0x2d
 80198ce:	426d      	negs	r5, r5
 80198d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80198d4:	4859      	ldr	r0, [pc, #356]	@ (8019a3c <_printf_i+0x238>)
 80198d6:	230a      	movs	r3, #10
 80198d8:	e011      	b.n	80198fe <_printf_i+0xfa>
 80198da:	6821      	ldr	r1, [r4, #0]
 80198dc:	6833      	ldr	r3, [r6, #0]
 80198de:	0608      	lsls	r0, r1, #24
 80198e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80198e4:	d402      	bmi.n	80198ec <_printf_i+0xe8>
 80198e6:	0649      	lsls	r1, r1, #25
 80198e8:	bf48      	it	mi
 80198ea:	b2ad      	uxthmi	r5, r5
 80198ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80198ee:	4853      	ldr	r0, [pc, #332]	@ (8019a3c <_printf_i+0x238>)
 80198f0:	6033      	str	r3, [r6, #0]
 80198f2:	bf14      	ite	ne
 80198f4:	230a      	movne	r3, #10
 80198f6:	2308      	moveq	r3, #8
 80198f8:	2100      	movs	r1, #0
 80198fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80198fe:	6866      	ldr	r6, [r4, #4]
 8019900:	60a6      	str	r6, [r4, #8]
 8019902:	2e00      	cmp	r6, #0
 8019904:	bfa2      	ittt	ge
 8019906:	6821      	ldrge	r1, [r4, #0]
 8019908:	f021 0104 	bicge.w	r1, r1, #4
 801990c:	6021      	strge	r1, [r4, #0]
 801990e:	b90d      	cbnz	r5, 8019914 <_printf_i+0x110>
 8019910:	2e00      	cmp	r6, #0
 8019912:	d04b      	beq.n	80199ac <_printf_i+0x1a8>
 8019914:	4616      	mov	r6, r2
 8019916:	fbb5 f1f3 	udiv	r1, r5, r3
 801991a:	fb03 5711 	mls	r7, r3, r1, r5
 801991e:	5dc7      	ldrb	r7, [r0, r7]
 8019920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019924:	462f      	mov	r7, r5
 8019926:	42bb      	cmp	r3, r7
 8019928:	460d      	mov	r5, r1
 801992a:	d9f4      	bls.n	8019916 <_printf_i+0x112>
 801992c:	2b08      	cmp	r3, #8
 801992e:	d10b      	bne.n	8019948 <_printf_i+0x144>
 8019930:	6823      	ldr	r3, [r4, #0]
 8019932:	07df      	lsls	r7, r3, #31
 8019934:	d508      	bpl.n	8019948 <_printf_i+0x144>
 8019936:	6923      	ldr	r3, [r4, #16]
 8019938:	6861      	ldr	r1, [r4, #4]
 801993a:	4299      	cmp	r1, r3
 801993c:	bfde      	ittt	le
 801993e:	2330      	movle	r3, #48	@ 0x30
 8019940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019944:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019948:	1b92      	subs	r2, r2, r6
 801994a:	6122      	str	r2, [r4, #16]
 801994c:	f8cd a000 	str.w	sl, [sp]
 8019950:	464b      	mov	r3, r9
 8019952:	aa03      	add	r2, sp, #12
 8019954:	4621      	mov	r1, r4
 8019956:	4640      	mov	r0, r8
 8019958:	f7ff fee6 	bl	8019728 <_printf_common>
 801995c:	3001      	adds	r0, #1
 801995e:	d14a      	bne.n	80199f6 <_printf_i+0x1f2>
 8019960:	f04f 30ff 	mov.w	r0, #4294967295
 8019964:	b004      	add	sp, #16
 8019966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801996a:	6823      	ldr	r3, [r4, #0]
 801996c:	f043 0320 	orr.w	r3, r3, #32
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	4833      	ldr	r0, [pc, #204]	@ (8019a40 <_printf_i+0x23c>)
 8019974:	2778      	movs	r7, #120	@ 0x78
 8019976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801997a:	6823      	ldr	r3, [r4, #0]
 801997c:	6831      	ldr	r1, [r6, #0]
 801997e:	061f      	lsls	r7, r3, #24
 8019980:	f851 5b04 	ldr.w	r5, [r1], #4
 8019984:	d402      	bmi.n	801998c <_printf_i+0x188>
 8019986:	065f      	lsls	r7, r3, #25
 8019988:	bf48      	it	mi
 801998a:	b2ad      	uxthmi	r5, r5
 801998c:	6031      	str	r1, [r6, #0]
 801998e:	07d9      	lsls	r1, r3, #31
 8019990:	bf44      	itt	mi
 8019992:	f043 0320 	orrmi.w	r3, r3, #32
 8019996:	6023      	strmi	r3, [r4, #0]
 8019998:	b11d      	cbz	r5, 80199a2 <_printf_i+0x19e>
 801999a:	2310      	movs	r3, #16
 801999c:	e7ac      	b.n	80198f8 <_printf_i+0xf4>
 801999e:	4827      	ldr	r0, [pc, #156]	@ (8019a3c <_printf_i+0x238>)
 80199a0:	e7e9      	b.n	8019976 <_printf_i+0x172>
 80199a2:	6823      	ldr	r3, [r4, #0]
 80199a4:	f023 0320 	bic.w	r3, r3, #32
 80199a8:	6023      	str	r3, [r4, #0]
 80199aa:	e7f6      	b.n	801999a <_printf_i+0x196>
 80199ac:	4616      	mov	r6, r2
 80199ae:	e7bd      	b.n	801992c <_printf_i+0x128>
 80199b0:	6833      	ldr	r3, [r6, #0]
 80199b2:	6825      	ldr	r5, [r4, #0]
 80199b4:	6961      	ldr	r1, [r4, #20]
 80199b6:	1d18      	adds	r0, r3, #4
 80199b8:	6030      	str	r0, [r6, #0]
 80199ba:	062e      	lsls	r6, r5, #24
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	d501      	bpl.n	80199c4 <_printf_i+0x1c0>
 80199c0:	6019      	str	r1, [r3, #0]
 80199c2:	e002      	b.n	80199ca <_printf_i+0x1c6>
 80199c4:	0668      	lsls	r0, r5, #25
 80199c6:	d5fb      	bpl.n	80199c0 <_printf_i+0x1bc>
 80199c8:	8019      	strh	r1, [r3, #0]
 80199ca:	2300      	movs	r3, #0
 80199cc:	6123      	str	r3, [r4, #16]
 80199ce:	4616      	mov	r6, r2
 80199d0:	e7bc      	b.n	801994c <_printf_i+0x148>
 80199d2:	6833      	ldr	r3, [r6, #0]
 80199d4:	1d1a      	adds	r2, r3, #4
 80199d6:	6032      	str	r2, [r6, #0]
 80199d8:	681e      	ldr	r6, [r3, #0]
 80199da:	6862      	ldr	r2, [r4, #4]
 80199dc:	2100      	movs	r1, #0
 80199de:	4630      	mov	r0, r6
 80199e0:	f7e6 fc86 	bl	80002f0 <memchr>
 80199e4:	b108      	cbz	r0, 80199ea <_printf_i+0x1e6>
 80199e6:	1b80      	subs	r0, r0, r6
 80199e8:	6060      	str	r0, [r4, #4]
 80199ea:	6863      	ldr	r3, [r4, #4]
 80199ec:	6123      	str	r3, [r4, #16]
 80199ee:	2300      	movs	r3, #0
 80199f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80199f4:	e7aa      	b.n	801994c <_printf_i+0x148>
 80199f6:	6923      	ldr	r3, [r4, #16]
 80199f8:	4632      	mov	r2, r6
 80199fa:	4649      	mov	r1, r9
 80199fc:	4640      	mov	r0, r8
 80199fe:	47d0      	blx	sl
 8019a00:	3001      	adds	r0, #1
 8019a02:	d0ad      	beq.n	8019960 <_printf_i+0x15c>
 8019a04:	6823      	ldr	r3, [r4, #0]
 8019a06:	079b      	lsls	r3, r3, #30
 8019a08:	d413      	bmi.n	8019a32 <_printf_i+0x22e>
 8019a0a:	68e0      	ldr	r0, [r4, #12]
 8019a0c:	9b03      	ldr	r3, [sp, #12]
 8019a0e:	4298      	cmp	r0, r3
 8019a10:	bfb8      	it	lt
 8019a12:	4618      	movlt	r0, r3
 8019a14:	e7a6      	b.n	8019964 <_printf_i+0x160>
 8019a16:	2301      	movs	r3, #1
 8019a18:	4632      	mov	r2, r6
 8019a1a:	4649      	mov	r1, r9
 8019a1c:	4640      	mov	r0, r8
 8019a1e:	47d0      	blx	sl
 8019a20:	3001      	adds	r0, #1
 8019a22:	d09d      	beq.n	8019960 <_printf_i+0x15c>
 8019a24:	3501      	adds	r5, #1
 8019a26:	68e3      	ldr	r3, [r4, #12]
 8019a28:	9903      	ldr	r1, [sp, #12]
 8019a2a:	1a5b      	subs	r3, r3, r1
 8019a2c:	42ab      	cmp	r3, r5
 8019a2e:	dcf2      	bgt.n	8019a16 <_printf_i+0x212>
 8019a30:	e7eb      	b.n	8019a0a <_printf_i+0x206>
 8019a32:	2500      	movs	r5, #0
 8019a34:	f104 0619 	add.w	r6, r4, #25
 8019a38:	e7f5      	b.n	8019a26 <_printf_i+0x222>
 8019a3a:	bf00      	nop
 8019a3c:	0801a709 	.word	0x0801a709
 8019a40:	0801a71a 	.word	0x0801a71a

08019a44 <_scanf_chars>:
 8019a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a48:	4615      	mov	r5, r2
 8019a4a:	688a      	ldr	r2, [r1, #8]
 8019a4c:	4680      	mov	r8, r0
 8019a4e:	460c      	mov	r4, r1
 8019a50:	b932      	cbnz	r2, 8019a60 <_scanf_chars+0x1c>
 8019a52:	698a      	ldr	r2, [r1, #24]
 8019a54:	2a00      	cmp	r2, #0
 8019a56:	bf14      	ite	ne
 8019a58:	f04f 32ff 	movne.w	r2, #4294967295
 8019a5c:	2201      	moveq	r2, #1
 8019a5e:	608a      	str	r2, [r1, #8]
 8019a60:	6822      	ldr	r2, [r4, #0]
 8019a62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8019af4 <_scanf_chars+0xb0>
 8019a66:	06d1      	lsls	r1, r2, #27
 8019a68:	bf5f      	itttt	pl
 8019a6a:	681a      	ldrpl	r2, [r3, #0]
 8019a6c:	1d11      	addpl	r1, r2, #4
 8019a6e:	6019      	strpl	r1, [r3, #0]
 8019a70:	6816      	ldrpl	r6, [r2, #0]
 8019a72:	2700      	movs	r7, #0
 8019a74:	69a0      	ldr	r0, [r4, #24]
 8019a76:	b188      	cbz	r0, 8019a9c <_scanf_chars+0x58>
 8019a78:	2801      	cmp	r0, #1
 8019a7a:	d107      	bne.n	8019a8c <_scanf_chars+0x48>
 8019a7c:	682b      	ldr	r3, [r5, #0]
 8019a7e:	781a      	ldrb	r2, [r3, #0]
 8019a80:	6963      	ldr	r3, [r4, #20]
 8019a82:	5c9b      	ldrb	r3, [r3, r2]
 8019a84:	b953      	cbnz	r3, 8019a9c <_scanf_chars+0x58>
 8019a86:	2f00      	cmp	r7, #0
 8019a88:	d031      	beq.n	8019aee <_scanf_chars+0xaa>
 8019a8a:	e022      	b.n	8019ad2 <_scanf_chars+0x8e>
 8019a8c:	2802      	cmp	r0, #2
 8019a8e:	d120      	bne.n	8019ad2 <_scanf_chars+0x8e>
 8019a90:	682b      	ldr	r3, [r5, #0]
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019a98:	071b      	lsls	r3, r3, #28
 8019a9a:	d41a      	bmi.n	8019ad2 <_scanf_chars+0x8e>
 8019a9c:	6823      	ldr	r3, [r4, #0]
 8019a9e:	06da      	lsls	r2, r3, #27
 8019aa0:	bf5e      	ittt	pl
 8019aa2:	682b      	ldrpl	r3, [r5, #0]
 8019aa4:	781b      	ldrbpl	r3, [r3, #0]
 8019aa6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019aaa:	682a      	ldr	r2, [r5, #0]
 8019aac:	686b      	ldr	r3, [r5, #4]
 8019aae:	3201      	adds	r2, #1
 8019ab0:	602a      	str	r2, [r5, #0]
 8019ab2:	68a2      	ldr	r2, [r4, #8]
 8019ab4:	3b01      	subs	r3, #1
 8019ab6:	3a01      	subs	r2, #1
 8019ab8:	606b      	str	r3, [r5, #4]
 8019aba:	3701      	adds	r7, #1
 8019abc:	60a2      	str	r2, [r4, #8]
 8019abe:	b142      	cbz	r2, 8019ad2 <_scanf_chars+0x8e>
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	dcd7      	bgt.n	8019a74 <_scanf_chars+0x30>
 8019ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019ac8:	4629      	mov	r1, r5
 8019aca:	4640      	mov	r0, r8
 8019acc:	4798      	blx	r3
 8019ace:	2800      	cmp	r0, #0
 8019ad0:	d0d0      	beq.n	8019a74 <_scanf_chars+0x30>
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	f013 0310 	ands.w	r3, r3, #16
 8019ad8:	d105      	bne.n	8019ae6 <_scanf_chars+0xa2>
 8019ada:	68e2      	ldr	r2, [r4, #12]
 8019adc:	3201      	adds	r2, #1
 8019ade:	60e2      	str	r2, [r4, #12]
 8019ae0:	69a2      	ldr	r2, [r4, #24]
 8019ae2:	b102      	cbz	r2, 8019ae6 <_scanf_chars+0xa2>
 8019ae4:	7033      	strb	r3, [r6, #0]
 8019ae6:	6923      	ldr	r3, [r4, #16]
 8019ae8:	443b      	add	r3, r7
 8019aea:	6123      	str	r3, [r4, #16]
 8019aec:	2000      	movs	r0, #0
 8019aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019af2:	bf00      	nop
 8019af4:	0801a371 	.word	0x0801a371

08019af8 <_scanf_i>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	4698      	mov	r8, r3
 8019afe:	4b74      	ldr	r3, [pc, #464]	@ (8019cd0 <_scanf_i+0x1d8>)
 8019b00:	460c      	mov	r4, r1
 8019b02:	4682      	mov	sl, r0
 8019b04:	4616      	mov	r6, r2
 8019b06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b0a:	b087      	sub	sp, #28
 8019b0c:	ab03      	add	r3, sp, #12
 8019b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019b12:	4b70      	ldr	r3, [pc, #448]	@ (8019cd4 <_scanf_i+0x1dc>)
 8019b14:	69a1      	ldr	r1, [r4, #24]
 8019b16:	4a70      	ldr	r2, [pc, #448]	@ (8019cd8 <_scanf_i+0x1e0>)
 8019b18:	2903      	cmp	r1, #3
 8019b1a:	bf08      	it	eq
 8019b1c:	461a      	moveq	r2, r3
 8019b1e:	68a3      	ldr	r3, [r4, #8]
 8019b20:	9201      	str	r2, [sp, #4]
 8019b22:	1e5a      	subs	r2, r3, #1
 8019b24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019b28:	bf88      	it	hi
 8019b2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019b2e:	4627      	mov	r7, r4
 8019b30:	bf82      	ittt	hi
 8019b32:	eb03 0905 	addhi.w	r9, r3, r5
 8019b36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019b3a:	60a3      	strhi	r3, [r4, #8]
 8019b3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019b40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8019b44:	bf98      	it	ls
 8019b46:	f04f 0900 	movls.w	r9, #0
 8019b4a:	6023      	str	r3, [r4, #0]
 8019b4c:	463d      	mov	r5, r7
 8019b4e:	f04f 0b00 	mov.w	fp, #0
 8019b52:	6831      	ldr	r1, [r6, #0]
 8019b54:	ab03      	add	r3, sp, #12
 8019b56:	7809      	ldrb	r1, [r1, #0]
 8019b58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019b5c:	2202      	movs	r2, #2
 8019b5e:	f7e6 fbc7 	bl	80002f0 <memchr>
 8019b62:	b328      	cbz	r0, 8019bb0 <_scanf_i+0xb8>
 8019b64:	f1bb 0f01 	cmp.w	fp, #1
 8019b68:	d159      	bne.n	8019c1e <_scanf_i+0x126>
 8019b6a:	6862      	ldr	r2, [r4, #4]
 8019b6c:	b92a      	cbnz	r2, 8019b7a <_scanf_i+0x82>
 8019b6e:	6822      	ldr	r2, [r4, #0]
 8019b70:	2108      	movs	r1, #8
 8019b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019b76:	6061      	str	r1, [r4, #4]
 8019b78:	6022      	str	r2, [r4, #0]
 8019b7a:	6822      	ldr	r2, [r4, #0]
 8019b7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8019b80:	6022      	str	r2, [r4, #0]
 8019b82:	68a2      	ldr	r2, [r4, #8]
 8019b84:	1e51      	subs	r1, r2, #1
 8019b86:	60a1      	str	r1, [r4, #8]
 8019b88:	b192      	cbz	r2, 8019bb0 <_scanf_i+0xb8>
 8019b8a:	6832      	ldr	r2, [r6, #0]
 8019b8c:	1c51      	adds	r1, r2, #1
 8019b8e:	6031      	str	r1, [r6, #0]
 8019b90:	7812      	ldrb	r2, [r2, #0]
 8019b92:	f805 2b01 	strb.w	r2, [r5], #1
 8019b96:	6872      	ldr	r2, [r6, #4]
 8019b98:	3a01      	subs	r2, #1
 8019b9a:	2a00      	cmp	r2, #0
 8019b9c:	6072      	str	r2, [r6, #4]
 8019b9e:	dc07      	bgt.n	8019bb0 <_scanf_i+0xb8>
 8019ba0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8019ba4:	4631      	mov	r1, r6
 8019ba6:	4650      	mov	r0, sl
 8019ba8:	4790      	blx	r2
 8019baa:	2800      	cmp	r0, #0
 8019bac:	f040 8085 	bne.w	8019cba <_scanf_i+0x1c2>
 8019bb0:	f10b 0b01 	add.w	fp, fp, #1
 8019bb4:	f1bb 0f03 	cmp.w	fp, #3
 8019bb8:	d1cb      	bne.n	8019b52 <_scanf_i+0x5a>
 8019bba:	6863      	ldr	r3, [r4, #4]
 8019bbc:	b90b      	cbnz	r3, 8019bc2 <_scanf_i+0xca>
 8019bbe:	230a      	movs	r3, #10
 8019bc0:	6063      	str	r3, [r4, #4]
 8019bc2:	6863      	ldr	r3, [r4, #4]
 8019bc4:	4945      	ldr	r1, [pc, #276]	@ (8019cdc <_scanf_i+0x1e4>)
 8019bc6:	6960      	ldr	r0, [r4, #20]
 8019bc8:	1ac9      	subs	r1, r1, r3
 8019bca:	f000 f8fd 	bl	8019dc8 <__sccl>
 8019bce:	f04f 0b00 	mov.w	fp, #0
 8019bd2:	68a3      	ldr	r3, [r4, #8]
 8019bd4:	6822      	ldr	r2, [r4, #0]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d03d      	beq.n	8019c56 <_scanf_i+0x15e>
 8019bda:	6831      	ldr	r1, [r6, #0]
 8019bdc:	6960      	ldr	r0, [r4, #20]
 8019bde:	f891 c000 	ldrb.w	ip, [r1]
 8019be2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019be6:	2800      	cmp	r0, #0
 8019be8:	d035      	beq.n	8019c56 <_scanf_i+0x15e>
 8019bea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8019bee:	d124      	bne.n	8019c3a <_scanf_i+0x142>
 8019bf0:	0510      	lsls	r0, r2, #20
 8019bf2:	d522      	bpl.n	8019c3a <_scanf_i+0x142>
 8019bf4:	f10b 0b01 	add.w	fp, fp, #1
 8019bf8:	f1b9 0f00 	cmp.w	r9, #0
 8019bfc:	d003      	beq.n	8019c06 <_scanf_i+0x10e>
 8019bfe:	3301      	adds	r3, #1
 8019c00:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c04:	60a3      	str	r3, [r4, #8]
 8019c06:	6873      	ldr	r3, [r6, #4]
 8019c08:	3b01      	subs	r3, #1
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	6073      	str	r3, [r6, #4]
 8019c0e:	dd1b      	ble.n	8019c48 <_scanf_i+0x150>
 8019c10:	6833      	ldr	r3, [r6, #0]
 8019c12:	3301      	adds	r3, #1
 8019c14:	6033      	str	r3, [r6, #0]
 8019c16:	68a3      	ldr	r3, [r4, #8]
 8019c18:	3b01      	subs	r3, #1
 8019c1a:	60a3      	str	r3, [r4, #8]
 8019c1c:	e7d9      	b.n	8019bd2 <_scanf_i+0xda>
 8019c1e:	f1bb 0f02 	cmp.w	fp, #2
 8019c22:	d1ae      	bne.n	8019b82 <_scanf_i+0x8a>
 8019c24:	6822      	ldr	r2, [r4, #0]
 8019c26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8019c2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019c2e:	d1bf      	bne.n	8019bb0 <_scanf_i+0xb8>
 8019c30:	2110      	movs	r1, #16
 8019c32:	6061      	str	r1, [r4, #4]
 8019c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019c38:	e7a2      	b.n	8019b80 <_scanf_i+0x88>
 8019c3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8019c3e:	6022      	str	r2, [r4, #0]
 8019c40:	780b      	ldrb	r3, [r1, #0]
 8019c42:	f805 3b01 	strb.w	r3, [r5], #1
 8019c46:	e7de      	b.n	8019c06 <_scanf_i+0x10e>
 8019c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019c4c:	4631      	mov	r1, r6
 8019c4e:	4650      	mov	r0, sl
 8019c50:	4798      	blx	r3
 8019c52:	2800      	cmp	r0, #0
 8019c54:	d0df      	beq.n	8019c16 <_scanf_i+0x11e>
 8019c56:	6823      	ldr	r3, [r4, #0]
 8019c58:	05d9      	lsls	r1, r3, #23
 8019c5a:	d50d      	bpl.n	8019c78 <_scanf_i+0x180>
 8019c5c:	42bd      	cmp	r5, r7
 8019c5e:	d909      	bls.n	8019c74 <_scanf_i+0x17c>
 8019c60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019c68:	4632      	mov	r2, r6
 8019c6a:	4650      	mov	r0, sl
 8019c6c:	4798      	blx	r3
 8019c6e:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c72:	464d      	mov	r5, r9
 8019c74:	42bd      	cmp	r5, r7
 8019c76:	d028      	beq.n	8019cca <_scanf_i+0x1d2>
 8019c78:	6822      	ldr	r2, [r4, #0]
 8019c7a:	f012 0210 	ands.w	r2, r2, #16
 8019c7e:	d113      	bne.n	8019ca8 <_scanf_i+0x1b0>
 8019c80:	702a      	strb	r2, [r5, #0]
 8019c82:	6863      	ldr	r3, [r4, #4]
 8019c84:	9e01      	ldr	r6, [sp, #4]
 8019c86:	4639      	mov	r1, r7
 8019c88:	4650      	mov	r0, sl
 8019c8a:	47b0      	blx	r6
 8019c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8019c90:	6821      	ldr	r1, [r4, #0]
 8019c92:	1d1a      	adds	r2, r3, #4
 8019c94:	f8c8 2000 	str.w	r2, [r8]
 8019c98:	f011 0f20 	tst.w	r1, #32
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	d00f      	beq.n	8019cc0 <_scanf_i+0x1c8>
 8019ca0:	6018      	str	r0, [r3, #0]
 8019ca2:	68e3      	ldr	r3, [r4, #12]
 8019ca4:	3301      	adds	r3, #1
 8019ca6:	60e3      	str	r3, [r4, #12]
 8019ca8:	6923      	ldr	r3, [r4, #16]
 8019caa:	1bed      	subs	r5, r5, r7
 8019cac:	445d      	add	r5, fp
 8019cae:	442b      	add	r3, r5
 8019cb0:	6123      	str	r3, [r4, #16]
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	b007      	add	sp, #28
 8019cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cba:	f04f 0b00 	mov.w	fp, #0
 8019cbe:	e7ca      	b.n	8019c56 <_scanf_i+0x15e>
 8019cc0:	07ca      	lsls	r2, r1, #31
 8019cc2:	bf4c      	ite	mi
 8019cc4:	8018      	strhmi	r0, [r3, #0]
 8019cc6:	6018      	strpl	r0, [r3, #0]
 8019cc8:	e7eb      	b.n	8019ca2 <_scanf_i+0x1aa>
 8019cca:	2001      	movs	r0, #1
 8019ccc:	e7f2      	b.n	8019cb4 <_scanf_i+0x1bc>
 8019cce:	bf00      	nop
 8019cd0:	0801a2a0 	.word	0x0801a2a0
 8019cd4:	0801700d 	.word	0x0801700d
 8019cd8:	0801a099 	.word	0x0801a099
 8019cdc:	0801a73b 	.word	0x0801a73b

08019ce0 <fiprintf>:
 8019ce0:	b40e      	push	{r1, r2, r3}
 8019ce2:	b503      	push	{r0, r1, lr}
 8019ce4:	4601      	mov	r1, r0
 8019ce6:	ab03      	add	r3, sp, #12
 8019ce8:	4805      	ldr	r0, [pc, #20]	@ (8019d00 <fiprintf+0x20>)
 8019cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cee:	6800      	ldr	r0, [r0, #0]
 8019cf0:	9301      	str	r3, [sp, #4]
 8019cf2:	f7ff fc01 	bl	80194f8 <_vfiprintf_r>
 8019cf6:	b002      	add	sp, #8
 8019cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cfc:	b003      	add	sp, #12
 8019cfe:	4770      	bx	lr
 8019d00:	24000280 	.word	0x24000280

08019d04 <__swhatbuf_r>:
 8019d04:	b570      	push	{r4, r5, r6, lr}
 8019d06:	460c      	mov	r4, r1
 8019d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d0c:	2900      	cmp	r1, #0
 8019d0e:	b096      	sub	sp, #88	@ 0x58
 8019d10:	4615      	mov	r5, r2
 8019d12:	461e      	mov	r6, r3
 8019d14:	da0d      	bge.n	8019d32 <__swhatbuf_r+0x2e>
 8019d16:	89a3      	ldrh	r3, [r4, #12]
 8019d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019d1c:	f04f 0100 	mov.w	r1, #0
 8019d20:	bf14      	ite	ne
 8019d22:	2340      	movne	r3, #64	@ 0x40
 8019d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019d28:	2000      	movs	r0, #0
 8019d2a:	6031      	str	r1, [r6, #0]
 8019d2c:	602b      	str	r3, [r5, #0]
 8019d2e:	b016      	add	sp, #88	@ 0x58
 8019d30:	bd70      	pop	{r4, r5, r6, pc}
 8019d32:	466a      	mov	r2, sp
 8019d34:	f000 f8d6 	bl	8019ee4 <_fstat_r>
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	dbec      	blt.n	8019d16 <__swhatbuf_r+0x12>
 8019d3c:	9901      	ldr	r1, [sp, #4]
 8019d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019d46:	4259      	negs	r1, r3
 8019d48:	4159      	adcs	r1, r3
 8019d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d4e:	e7eb      	b.n	8019d28 <__swhatbuf_r+0x24>

08019d50 <__smakebuf_r>:
 8019d50:	898b      	ldrh	r3, [r1, #12]
 8019d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d54:	079d      	lsls	r5, r3, #30
 8019d56:	4606      	mov	r6, r0
 8019d58:	460c      	mov	r4, r1
 8019d5a:	d507      	bpl.n	8019d6c <__smakebuf_r+0x1c>
 8019d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019d60:	6023      	str	r3, [r4, #0]
 8019d62:	6123      	str	r3, [r4, #16]
 8019d64:	2301      	movs	r3, #1
 8019d66:	6163      	str	r3, [r4, #20]
 8019d68:	b003      	add	sp, #12
 8019d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d6c:	ab01      	add	r3, sp, #4
 8019d6e:	466a      	mov	r2, sp
 8019d70:	f7ff ffc8 	bl	8019d04 <__swhatbuf_r>
 8019d74:	9f00      	ldr	r7, [sp, #0]
 8019d76:	4605      	mov	r5, r0
 8019d78:	4639      	mov	r1, r7
 8019d7a:	4630      	mov	r0, r6
 8019d7c:	f7fc fa7e 	bl	801627c <_malloc_r>
 8019d80:	b948      	cbnz	r0, 8019d96 <__smakebuf_r+0x46>
 8019d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d86:	059a      	lsls	r2, r3, #22
 8019d88:	d4ee      	bmi.n	8019d68 <__smakebuf_r+0x18>
 8019d8a:	f023 0303 	bic.w	r3, r3, #3
 8019d8e:	f043 0302 	orr.w	r3, r3, #2
 8019d92:	81a3      	strh	r3, [r4, #12]
 8019d94:	e7e2      	b.n	8019d5c <__smakebuf_r+0xc>
 8019d96:	89a3      	ldrh	r3, [r4, #12]
 8019d98:	6020      	str	r0, [r4, #0]
 8019d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d9e:	81a3      	strh	r3, [r4, #12]
 8019da0:	9b01      	ldr	r3, [sp, #4]
 8019da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019da6:	b15b      	cbz	r3, 8019dc0 <__smakebuf_r+0x70>
 8019da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dac:	4630      	mov	r0, r6
 8019dae:	f000 f8ab 	bl	8019f08 <_isatty_r>
 8019db2:	b128      	cbz	r0, 8019dc0 <__smakebuf_r+0x70>
 8019db4:	89a3      	ldrh	r3, [r4, #12]
 8019db6:	f023 0303 	bic.w	r3, r3, #3
 8019dba:	f043 0301 	orr.w	r3, r3, #1
 8019dbe:	81a3      	strh	r3, [r4, #12]
 8019dc0:	89a3      	ldrh	r3, [r4, #12]
 8019dc2:	431d      	orrs	r5, r3
 8019dc4:	81a5      	strh	r5, [r4, #12]
 8019dc6:	e7cf      	b.n	8019d68 <__smakebuf_r+0x18>

08019dc8 <__sccl>:
 8019dc8:	b570      	push	{r4, r5, r6, lr}
 8019dca:	780b      	ldrb	r3, [r1, #0]
 8019dcc:	4604      	mov	r4, r0
 8019dce:	2b5e      	cmp	r3, #94	@ 0x5e
 8019dd0:	bf0b      	itete	eq
 8019dd2:	784b      	ldrbeq	r3, [r1, #1]
 8019dd4:	1c4a      	addne	r2, r1, #1
 8019dd6:	1c8a      	addeq	r2, r1, #2
 8019dd8:	2100      	movne	r1, #0
 8019dda:	bf08      	it	eq
 8019ddc:	2101      	moveq	r1, #1
 8019dde:	3801      	subs	r0, #1
 8019de0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8019de4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8019de8:	42a8      	cmp	r0, r5
 8019dea:	d1fb      	bne.n	8019de4 <__sccl+0x1c>
 8019dec:	b90b      	cbnz	r3, 8019df2 <__sccl+0x2a>
 8019dee:	1e50      	subs	r0, r2, #1
 8019df0:	bd70      	pop	{r4, r5, r6, pc}
 8019df2:	f081 0101 	eor.w	r1, r1, #1
 8019df6:	54e1      	strb	r1, [r4, r3]
 8019df8:	4610      	mov	r0, r2
 8019dfa:	4602      	mov	r2, r0
 8019dfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019e00:	2d2d      	cmp	r5, #45	@ 0x2d
 8019e02:	d005      	beq.n	8019e10 <__sccl+0x48>
 8019e04:	2d5d      	cmp	r5, #93	@ 0x5d
 8019e06:	d016      	beq.n	8019e36 <__sccl+0x6e>
 8019e08:	2d00      	cmp	r5, #0
 8019e0a:	d0f1      	beq.n	8019df0 <__sccl+0x28>
 8019e0c:	462b      	mov	r3, r5
 8019e0e:	e7f2      	b.n	8019df6 <__sccl+0x2e>
 8019e10:	7846      	ldrb	r6, [r0, #1]
 8019e12:	2e5d      	cmp	r6, #93	@ 0x5d
 8019e14:	d0fa      	beq.n	8019e0c <__sccl+0x44>
 8019e16:	42b3      	cmp	r3, r6
 8019e18:	dcf8      	bgt.n	8019e0c <__sccl+0x44>
 8019e1a:	3002      	adds	r0, #2
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	3201      	adds	r2, #1
 8019e20:	4296      	cmp	r6, r2
 8019e22:	54a1      	strb	r1, [r4, r2]
 8019e24:	dcfb      	bgt.n	8019e1e <__sccl+0x56>
 8019e26:	1af2      	subs	r2, r6, r3
 8019e28:	3a01      	subs	r2, #1
 8019e2a:	1c5d      	adds	r5, r3, #1
 8019e2c:	42b3      	cmp	r3, r6
 8019e2e:	bfa8      	it	ge
 8019e30:	2200      	movge	r2, #0
 8019e32:	18ab      	adds	r3, r5, r2
 8019e34:	e7e1      	b.n	8019dfa <__sccl+0x32>
 8019e36:	4610      	mov	r0, r2
 8019e38:	e7da      	b.n	8019df0 <__sccl+0x28>

08019e3a <__submore>:
 8019e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e3e:	460c      	mov	r4, r1
 8019e40:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8019e42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019e46:	4299      	cmp	r1, r3
 8019e48:	d11d      	bne.n	8019e86 <__submore+0x4c>
 8019e4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8019e4e:	f7fc fa15 	bl	801627c <_malloc_r>
 8019e52:	b918      	cbnz	r0, 8019e5c <__submore+0x22>
 8019e54:	f04f 30ff 	mov.w	r0, #4294967295
 8019e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019e60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8019e62:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8019e66:	6360      	str	r0, [r4, #52]	@ 0x34
 8019e68:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8019e6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019e70:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8019e74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019e78:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8019e7c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8019e80:	6020      	str	r0, [r4, #0]
 8019e82:	2000      	movs	r0, #0
 8019e84:	e7e8      	b.n	8019e58 <__submore+0x1e>
 8019e86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8019e88:	0077      	lsls	r7, r6, #1
 8019e8a:	463a      	mov	r2, r7
 8019e8c:	f000 f867 	bl	8019f5e <_realloc_r>
 8019e90:	4605      	mov	r5, r0
 8019e92:	2800      	cmp	r0, #0
 8019e94:	d0de      	beq.n	8019e54 <__submore+0x1a>
 8019e96:	eb00 0806 	add.w	r8, r0, r6
 8019e9a:	4601      	mov	r1, r0
 8019e9c:	4632      	mov	r2, r6
 8019e9e:	4640      	mov	r0, r8
 8019ea0:	f7fd ff4d 	bl	8017d3e <memcpy>
 8019ea4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8019ea8:	f8c4 8000 	str.w	r8, [r4]
 8019eac:	e7e9      	b.n	8019e82 <__submore+0x48>

08019eae <memmove>:
 8019eae:	4288      	cmp	r0, r1
 8019eb0:	b510      	push	{r4, lr}
 8019eb2:	eb01 0402 	add.w	r4, r1, r2
 8019eb6:	d902      	bls.n	8019ebe <memmove+0x10>
 8019eb8:	4284      	cmp	r4, r0
 8019eba:	4623      	mov	r3, r4
 8019ebc:	d807      	bhi.n	8019ece <memmove+0x20>
 8019ebe:	1e43      	subs	r3, r0, #1
 8019ec0:	42a1      	cmp	r1, r4
 8019ec2:	d008      	beq.n	8019ed6 <memmove+0x28>
 8019ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ec8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ecc:	e7f8      	b.n	8019ec0 <memmove+0x12>
 8019ece:	4402      	add	r2, r0
 8019ed0:	4601      	mov	r1, r0
 8019ed2:	428a      	cmp	r2, r1
 8019ed4:	d100      	bne.n	8019ed8 <memmove+0x2a>
 8019ed6:	bd10      	pop	{r4, pc}
 8019ed8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019edc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019ee0:	e7f7      	b.n	8019ed2 <memmove+0x24>
	...

08019ee4 <_fstat_r>:
 8019ee4:	b538      	push	{r3, r4, r5, lr}
 8019ee6:	4d07      	ldr	r5, [pc, #28]	@ (8019f04 <_fstat_r+0x20>)
 8019ee8:	2300      	movs	r3, #0
 8019eea:	4604      	mov	r4, r0
 8019eec:	4608      	mov	r0, r1
 8019eee:	4611      	mov	r1, r2
 8019ef0:	602b      	str	r3, [r5, #0]
 8019ef2:	f7e8 fbff 	bl	80026f4 <_fstat>
 8019ef6:	1c43      	adds	r3, r0, #1
 8019ef8:	d102      	bne.n	8019f00 <_fstat_r+0x1c>
 8019efa:	682b      	ldr	r3, [r5, #0]
 8019efc:	b103      	cbz	r3, 8019f00 <_fstat_r+0x1c>
 8019efe:	6023      	str	r3, [r4, #0]
 8019f00:	bd38      	pop	{r3, r4, r5, pc}
 8019f02:	bf00      	nop
 8019f04:	24077640 	.word	0x24077640

08019f08 <_isatty_r>:
 8019f08:	b538      	push	{r3, r4, r5, lr}
 8019f0a:	4d06      	ldr	r5, [pc, #24]	@ (8019f24 <_isatty_r+0x1c>)
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	4604      	mov	r4, r0
 8019f10:	4608      	mov	r0, r1
 8019f12:	602b      	str	r3, [r5, #0]
 8019f14:	f7e8 fbfe 	bl	8002714 <_isatty>
 8019f18:	1c43      	adds	r3, r0, #1
 8019f1a:	d102      	bne.n	8019f22 <_isatty_r+0x1a>
 8019f1c:	682b      	ldr	r3, [r5, #0]
 8019f1e:	b103      	cbz	r3, 8019f22 <_isatty_r+0x1a>
 8019f20:	6023      	str	r3, [r4, #0]
 8019f22:	bd38      	pop	{r3, r4, r5, pc}
 8019f24:	24077640 	.word	0x24077640

08019f28 <abort>:
 8019f28:	b508      	push	{r3, lr}
 8019f2a:	2006      	movs	r0, #6
 8019f2c:	f000 f8de 	bl	801a0ec <raise>
 8019f30:	2001      	movs	r0, #1
 8019f32:	f7e8 fbab 	bl	800268c <_exit>

08019f36 <_calloc_r>:
 8019f36:	b570      	push	{r4, r5, r6, lr}
 8019f38:	fba1 5402 	umull	r5, r4, r1, r2
 8019f3c:	b93c      	cbnz	r4, 8019f4e <_calloc_r+0x18>
 8019f3e:	4629      	mov	r1, r5
 8019f40:	f7fc f99c 	bl	801627c <_malloc_r>
 8019f44:	4606      	mov	r6, r0
 8019f46:	b928      	cbnz	r0, 8019f54 <_calloc_r+0x1e>
 8019f48:	2600      	movs	r6, #0
 8019f4a:	4630      	mov	r0, r6
 8019f4c:	bd70      	pop	{r4, r5, r6, pc}
 8019f4e:	220c      	movs	r2, #12
 8019f50:	6002      	str	r2, [r0, #0]
 8019f52:	e7f9      	b.n	8019f48 <_calloc_r+0x12>
 8019f54:	462a      	mov	r2, r5
 8019f56:	4621      	mov	r1, r4
 8019f58:	f7fd fd86 	bl	8017a68 <memset>
 8019f5c:	e7f5      	b.n	8019f4a <_calloc_r+0x14>

08019f5e <_realloc_r>:
 8019f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f62:	4680      	mov	r8, r0
 8019f64:	4615      	mov	r5, r2
 8019f66:	460c      	mov	r4, r1
 8019f68:	b921      	cbnz	r1, 8019f74 <_realloc_r+0x16>
 8019f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f6e:	4611      	mov	r1, r2
 8019f70:	f7fc b984 	b.w	801627c <_malloc_r>
 8019f74:	b92a      	cbnz	r2, 8019f82 <_realloc_r+0x24>
 8019f76:	f7fd ff1f 	bl	8017db8 <_free_r>
 8019f7a:	2400      	movs	r4, #0
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f82:	f000 f8cf 	bl	801a124 <_malloc_usable_size_r>
 8019f86:	4285      	cmp	r5, r0
 8019f88:	4606      	mov	r6, r0
 8019f8a:	d802      	bhi.n	8019f92 <_realloc_r+0x34>
 8019f8c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019f90:	d8f4      	bhi.n	8019f7c <_realloc_r+0x1e>
 8019f92:	4629      	mov	r1, r5
 8019f94:	4640      	mov	r0, r8
 8019f96:	f7fc f971 	bl	801627c <_malloc_r>
 8019f9a:	4607      	mov	r7, r0
 8019f9c:	2800      	cmp	r0, #0
 8019f9e:	d0ec      	beq.n	8019f7a <_realloc_r+0x1c>
 8019fa0:	42b5      	cmp	r5, r6
 8019fa2:	462a      	mov	r2, r5
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	bf28      	it	cs
 8019fa8:	4632      	movcs	r2, r6
 8019faa:	f7fd fec8 	bl	8017d3e <memcpy>
 8019fae:	4621      	mov	r1, r4
 8019fb0:	4640      	mov	r0, r8
 8019fb2:	f7fd ff01 	bl	8017db8 <_free_r>
 8019fb6:	463c      	mov	r4, r7
 8019fb8:	e7e0      	b.n	8019f7c <_realloc_r+0x1e>
	...

08019fbc <_strtoul_l.constprop.0>:
 8019fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fc0:	4e34      	ldr	r6, [pc, #208]	@ (801a094 <_strtoul_l.constprop.0+0xd8>)
 8019fc2:	4686      	mov	lr, r0
 8019fc4:	460d      	mov	r5, r1
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fcc:	5d37      	ldrb	r7, [r6, r4]
 8019fce:	f017 0708 	ands.w	r7, r7, #8
 8019fd2:	d1f8      	bne.n	8019fc6 <_strtoul_l.constprop.0+0xa>
 8019fd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8019fd6:	d12f      	bne.n	801a038 <_strtoul_l.constprop.0+0x7c>
 8019fd8:	782c      	ldrb	r4, [r5, #0]
 8019fda:	2701      	movs	r7, #1
 8019fdc:	1c85      	adds	r5, r0, #2
 8019fde:	f033 0010 	bics.w	r0, r3, #16
 8019fe2:	d109      	bne.n	8019ff8 <_strtoul_l.constprop.0+0x3c>
 8019fe4:	2c30      	cmp	r4, #48	@ 0x30
 8019fe6:	d12c      	bne.n	801a042 <_strtoul_l.constprop.0+0x86>
 8019fe8:	7828      	ldrb	r0, [r5, #0]
 8019fea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019fee:	2858      	cmp	r0, #88	@ 0x58
 8019ff0:	d127      	bne.n	801a042 <_strtoul_l.constprop.0+0x86>
 8019ff2:	786c      	ldrb	r4, [r5, #1]
 8019ff4:	2310      	movs	r3, #16
 8019ff6:	3502      	adds	r5, #2
 8019ff8:	f04f 38ff 	mov.w	r8, #4294967295
 8019ffc:	2600      	movs	r6, #0
 8019ffe:	fbb8 f8f3 	udiv	r8, r8, r3
 801a002:	fb03 f908 	mul.w	r9, r3, r8
 801a006:	ea6f 0909 	mvn.w	r9, r9
 801a00a:	4630      	mov	r0, r6
 801a00c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a010:	f1bc 0f09 	cmp.w	ip, #9
 801a014:	d81c      	bhi.n	801a050 <_strtoul_l.constprop.0+0x94>
 801a016:	4664      	mov	r4, ip
 801a018:	42a3      	cmp	r3, r4
 801a01a:	dd2a      	ble.n	801a072 <_strtoul_l.constprop.0+0xb6>
 801a01c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a020:	d007      	beq.n	801a032 <_strtoul_l.constprop.0+0x76>
 801a022:	4580      	cmp	r8, r0
 801a024:	d322      	bcc.n	801a06c <_strtoul_l.constprop.0+0xb0>
 801a026:	d101      	bne.n	801a02c <_strtoul_l.constprop.0+0x70>
 801a028:	45a1      	cmp	r9, r4
 801a02a:	db1f      	blt.n	801a06c <_strtoul_l.constprop.0+0xb0>
 801a02c:	fb00 4003 	mla	r0, r0, r3, r4
 801a030:	2601      	movs	r6, #1
 801a032:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a036:	e7e9      	b.n	801a00c <_strtoul_l.constprop.0+0x50>
 801a038:	2c2b      	cmp	r4, #43	@ 0x2b
 801a03a:	bf04      	itt	eq
 801a03c:	782c      	ldrbeq	r4, [r5, #0]
 801a03e:	1c85      	addeq	r5, r0, #2
 801a040:	e7cd      	b.n	8019fde <_strtoul_l.constprop.0+0x22>
 801a042:	2b00      	cmp	r3, #0
 801a044:	d1d8      	bne.n	8019ff8 <_strtoul_l.constprop.0+0x3c>
 801a046:	2c30      	cmp	r4, #48	@ 0x30
 801a048:	bf0c      	ite	eq
 801a04a:	2308      	moveq	r3, #8
 801a04c:	230a      	movne	r3, #10
 801a04e:	e7d3      	b.n	8019ff8 <_strtoul_l.constprop.0+0x3c>
 801a050:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a054:	f1bc 0f19 	cmp.w	ip, #25
 801a058:	d801      	bhi.n	801a05e <_strtoul_l.constprop.0+0xa2>
 801a05a:	3c37      	subs	r4, #55	@ 0x37
 801a05c:	e7dc      	b.n	801a018 <_strtoul_l.constprop.0+0x5c>
 801a05e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a062:	f1bc 0f19 	cmp.w	ip, #25
 801a066:	d804      	bhi.n	801a072 <_strtoul_l.constprop.0+0xb6>
 801a068:	3c57      	subs	r4, #87	@ 0x57
 801a06a:	e7d5      	b.n	801a018 <_strtoul_l.constprop.0+0x5c>
 801a06c:	f04f 36ff 	mov.w	r6, #4294967295
 801a070:	e7df      	b.n	801a032 <_strtoul_l.constprop.0+0x76>
 801a072:	1c73      	adds	r3, r6, #1
 801a074:	d106      	bne.n	801a084 <_strtoul_l.constprop.0+0xc8>
 801a076:	2322      	movs	r3, #34	@ 0x22
 801a078:	f8ce 3000 	str.w	r3, [lr]
 801a07c:	4630      	mov	r0, r6
 801a07e:	b932      	cbnz	r2, 801a08e <_strtoul_l.constprop.0+0xd2>
 801a080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a084:	b107      	cbz	r7, 801a088 <_strtoul_l.constprop.0+0xcc>
 801a086:	4240      	negs	r0, r0
 801a088:	2a00      	cmp	r2, #0
 801a08a:	d0f9      	beq.n	801a080 <_strtoul_l.constprop.0+0xc4>
 801a08c:	b106      	cbz	r6, 801a090 <_strtoul_l.constprop.0+0xd4>
 801a08e:	1e69      	subs	r1, r5, #1
 801a090:	6011      	str	r1, [r2, #0]
 801a092:	e7f5      	b.n	801a080 <_strtoul_l.constprop.0+0xc4>
 801a094:	0801a371 	.word	0x0801a371

0801a098 <_strtoul_r>:
 801a098:	f7ff bf90 	b.w	8019fbc <_strtoul_l.constprop.0>

0801a09c <_raise_r>:
 801a09c:	291f      	cmp	r1, #31
 801a09e:	b538      	push	{r3, r4, r5, lr}
 801a0a0:	4605      	mov	r5, r0
 801a0a2:	460c      	mov	r4, r1
 801a0a4:	d904      	bls.n	801a0b0 <_raise_r+0x14>
 801a0a6:	2316      	movs	r3, #22
 801a0a8:	6003      	str	r3, [r0, #0]
 801a0aa:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ae:	bd38      	pop	{r3, r4, r5, pc}
 801a0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a0b2:	b112      	cbz	r2, 801a0ba <_raise_r+0x1e>
 801a0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0b8:	b94b      	cbnz	r3, 801a0ce <_raise_r+0x32>
 801a0ba:	4628      	mov	r0, r5
 801a0bc:	f000 f830 	bl	801a120 <_getpid_r>
 801a0c0:	4622      	mov	r2, r4
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0ca:	f000 b817 	b.w	801a0fc <_kill_r>
 801a0ce:	2b01      	cmp	r3, #1
 801a0d0:	d00a      	beq.n	801a0e8 <_raise_r+0x4c>
 801a0d2:	1c59      	adds	r1, r3, #1
 801a0d4:	d103      	bne.n	801a0de <_raise_r+0x42>
 801a0d6:	2316      	movs	r3, #22
 801a0d8:	6003      	str	r3, [r0, #0]
 801a0da:	2001      	movs	r0, #1
 801a0dc:	e7e7      	b.n	801a0ae <_raise_r+0x12>
 801a0de:	2100      	movs	r1, #0
 801a0e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	4798      	blx	r3
 801a0e8:	2000      	movs	r0, #0
 801a0ea:	e7e0      	b.n	801a0ae <_raise_r+0x12>

0801a0ec <raise>:
 801a0ec:	4b02      	ldr	r3, [pc, #8]	@ (801a0f8 <raise+0xc>)
 801a0ee:	4601      	mov	r1, r0
 801a0f0:	6818      	ldr	r0, [r3, #0]
 801a0f2:	f7ff bfd3 	b.w	801a09c <_raise_r>
 801a0f6:	bf00      	nop
 801a0f8:	24000280 	.word	0x24000280

0801a0fc <_kill_r>:
 801a0fc:	b538      	push	{r3, r4, r5, lr}
 801a0fe:	4d07      	ldr	r5, [pc, #28]	@ (801a11c <_kill_r+0x20>)
 801a100:	2300      	movs	r3, #0
 801a102:	4604      	mov	r4, r0
 801a104:	4608      	mov	r0, r1
 801a106:	4611      	mov	r1, r2
 801a108:	602b      	str	r3, [r5, #0]
 801a10a:	f7e8 faaf 	bl	800266c <_kill>
 801a10e:	1c43      	adds	r3, r0, #1
 801a110:	d102      	bne.n	801a118 <_kill_r+0x1c>
 801a112:	682b      	ldr	r3, [r5, #0]
 801a114:	b103      	cbz	r3, 801a118 <_kill_r+0x1c>
 801a116:	6023      	str	r3, [r4, #0]
 801a118:	bd38      	pop	{r3, r4, r5, pc}
 801a11a:	bf00      	nop
 801a11c:	24077640 	.word	0x24077640

0801a120 <_getpid_r>:
 801a120:	f7e8 ba9c 	b.w	800265c <_getpid>

0801a124 <_malloc_usable_size_r>:
 801a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a128:	1f18      	subs	r0, r3, #4
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	bfbc      	itt	lt
 801a12e:	580b      	ldrlt	r3, [r1, r0]
 801a130:	18c0      	addlt	r0, r0, r3
 801a132:	4770      	bx	lr

0801a134 <_init>:
 801a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a136:	bf00      	nop
 801a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a13a:	bc08      	pop	{r3}
 801a13c:	469e      	mov	lr, r3
 801a13e:	4770      	bx	lr

0801a140 <_fini>:
 801a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a142:	bf00      	nop
 801a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a146:	bc08      	pop	{r3}
 801a148:	469e      	mov	lr, r3
 801a14a:	4770      	bx	lr
